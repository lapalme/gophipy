# coding=utf-8
#  Mon Mar  8 14:47:26 2021 : /Users/lapalme/Dropbox/AMR/amr_annotation_3.0/data/frames/propbank-amr-frames-xml-2018-01-25

from jsRealBclass import N,A,Pro,D,Adv,V,C,P,DT,NO,Q,  NP,AP,AdvP,VP,CP,PP,S,SP,\
                         Constituent, Terminal, Phrase, jsRealB

from lexicalSemantics import LexSem, nounInfo,adjInfo,pp,optD


# ======== NOUNS 
nouns = {
 'abbreviation':nounInfo("abbreviation"), # [abbreviate.xml]
 'abdication':nounInfo("abdication"), # [abdicate.xml]
 'abduction':nounInfo("abduction"), # [abduct.xml]
 'ablation':nounInfo("ablation"), # [ablate.xml]
 'abolition':nounInfo("abolition"), # [abolish.xml]
 'abomination':nounInfo("abomination"), # [abominate.xml]
 'abortion':nounInfo("abortion"), # [abort.xml]
 'about-face':nounInfo("about-face"), # [face.xml]
 'aboutface-03':nounInfo("aboutface"), # [face.xml]
 'abrasion':nounInfo("abrasion"), # [abrade.xml]
 'abrogation':nounInfo("abrogation"), # [abrogate.xml]
 'absence':nounInfo("absence"), # [absent.xml]
 'absolution':nounInfo("absolution"), # [absolve.xml]
 'absorption':nounInfo("absorption"), # [absorb.xml]
 'abstention':nounInfo("abstention"), # [abstain.xml]
 'abstraction':nounInfo("abstraction"), # [abstract.xml]
 'abuse-01':nounInfo("abuse"), # [abuse.xml]
 'abuse-02':nounInfo("abuse"), # [abuse.xml]
 'abuse-03':nounInfo("abuse"), # [abuse.xml]
 'acceleration':nounInfo("acceleration"), # [accelerate.xml]
 'acceptance':nounInfo("acceptance"), # [accept.xml]
 'access-01':nounInfo("access"), # [access.xml]
 'acclaim-01':nounInfo("acclaim"), # [acclaim.xml]
 'accommodation':nounInfo("accommodation"), # [accommodate.xml]
 'accompaniment':nounInfo("accompaniment"), # [accompany.xml]
 'accord-03':nounInfo("accord"), # [accord.xml]
 'accordance':nounInfo("accordance"), # [accord.xml]
 'account':nounInfo("account"), # [account.xml]
 'account-01':nounInfo("account"), # [account.xml]
 'accumulation':nounInfo("accumulation"), # [accumulate.xml]
 'accusation':nounInfo("accusation"), # [accuse.xml]
 'acetylation':nounInfo("acetylation"), # [acetylate.xml]
 'achievement':nounInfo("achievement"), # [achieve.xml]
 'aching':nounInfo("aching"), # [ache.xml]
 'acknowledgment':nounInfo("acknowledgment"), # [acknowledge.xml]
 'acquisition':nounInfo("acquisition"), # [acquire.xml]
 'acquittal':nounInfo("acquittal"), # [acquit.xml]
 'act-02':nounInfo("act"), # [act.xml]
 'act-05':nounInfo("act"), # [act.xml]
 'action':nounInfo("action"), # [act.xml]
 'activating':nounInfo("activating"), # [activate.xml]
 'activation':nounInfo("activation"), # [activate.xml]
 'activeness':nounInfo("activeness"), # [act.xml]
 'activity-06':nounInfo("activity"), # [act.xml]
 'actuation':nounInfo("actuation"), # [actuate.xml]
 'adaptation':nounInfo("adaptation"), # [adapt.xml]
 'adaption':nounInfo("adaption"), # [adapt.xml]
 'addiction':nounInfo("addiction"), # [addict.xml]
 'addition':nounInfo("addition"), # [add.xml]
 'address-03':nounInfo("address"), # [address.xml]
 'adhesion':nounInfo("adhesion"), # [adhere.xml]
 'adjournment':nounInfo("adjournment"), # [adjourn.xml]
 'adjudication':nounInfo("adjudication"), # [adjudicate.xml]
 'adjustment':nounInfo("adjustment"), # [adjust.xml]
 'administration':nounInfo("administration"), # [administer.xml]
 'admiration':nounInfo("admiration"), # [admire.xml]
 'admission':nounInfo("admission"), # [admit.xml]
 'admitting':nounInfo("admitting"), # [admit.xml]
 'admonition':nounInfo("admonition"), # [admonish.xml]
 'adoption':nounInfo("adoption"), # [adopt.xml]
 'advance':nounInfo("advance"), # [advance.xml]
 'advance-01':nounInfo("advance"), # [advance.xml]
 'advantage':nounInfo("advantage"), # [advantage.xml]
 'advantage-01':nounInfo("advantage"), # [advantage.xml]
 'advertisement':nounInfo("advertisement"), # [advertise.xml]
 'advertising':nounInfo("advertising"), # [advertise.xml]
 'advertizement':nounInfo("advertizement"), # [advertise.xml]
 'advertizing':nounInfo("advertizing"), # [advertise.xml]
 'advice':nounInfo("advice"), # [advise.xml]
 'affair-01':nounInfo("affair"), # [affair.xml]
 'affair-02':nounInfo("affair"), # [affair.xml]
 'affectation':nounInfo("affectation"), # [affect.xml]
 'affiliation':nounInfo("affiliation"), # [affiliate.xml]
 'affirmation':nounInfo("affirmation"), # [affirm.xml]
 'aftermath-01':nounInfo("aftermath"), # [aftermath.xml]
 'agglomeration':nounInfo("agglomeration"), # [agglomerate.xml]
 'aggregation':nounInfo("aggregation"), # [aggregate.xml]
 'aging':nounInfo("aging"), # [age.xml]
 'agitation':nounInfo("agitation"), # [agitate.xml]
 'agreement':nounInfo("agreement"), # [agree.xml]
 'aid-01':nounInfo("aid"), # [aid.xml]
 'aim-01':nounInfo("aim"), # [aim.xml]
 'aim-02':nounInfo("aim"), # [aim.xml]
 'airlift-01':nounInfo("airlift"), # [airlift.xml]
 'airlifting':nounInfo("airlifting"), # [airlift.xml]
 'alert-01':nounInfo("alert"), # [alert.xml]
 'alienation':nounInfo("alienation"), # [alienate.xml]
 'alignment':nounInfo("alignment"), # [align.xml]
 'alkylation':nounInfo("alkylation"), # [alkylate.xml]
 'allegation':nounInfo("allegation"), # [allege.xml]
 'alleviation':nounInfo("alleviation"), # [alleviate.xml]
 'alliance':nounInfo("alliance"), # [ally.xml]
 'allocation':nounInfo("allocation"), # [allocate.xml]
 'allotment':nounInfo("allotment"), # [allot.xml]
 'allowance':nounInfo("allowance"), # [allow.xml]
 'alteration':nounInfo("alteration"), # [alter.xml]
 'alternation':nounInfo("alternation"), # [alternate.xml]
 'amalgamation':nounInfo("amalgamation"), # [amalgamate.xml]
 'ambush-01':nounInfo("ambush"), # [ambush.xml]
 'amendment':nounInfo("amendment"), # [amend.xml]
 'amination':nounInfo("amination"), # [aminate.xml]
 'amplification':nounInfo("amplification"), # [amplify.xml]
 'amputation':nounInfo("amputation"), # [amputate.xml]
 'amusement':nounInfo("amusement"), # [amuse.xml]
 'analysis':nounInfo("analysis"), # [analyze.xml]
 'analyze-01':nounInfo("analyze"), # [analyze.xml]
 'anathema-01':nounInfo("anathema"), # [anathema.xml]
 'animation':nounInfo("animation"), # [animate.xml]
 'annealing':nounInfo("annealing"), # [anneal.xml]
 'annihilation':nounInfo("annihilation"), # [annihilate.xml]
 'announcement':nounInfo("announcement"), # [announce.xml]
 'answer-01':nounInfo("answer"), # [answer.xml]
 'anticipation':nounInfo("anticipation"), # [anticipate.xml]
 'anticoagulation':nounInfo("anticoagulation"), # [anticoagulate.xml]
 'apology':nounInfo("apology"), # [apologize.xml]
 'appeal-01':nounInfo("appeal"), # [appeal.xml]
 'appeal-02':nounInfo("appeal"), # [appeal.xml]
 'appeal-03':nounInfo("appeal"), # [appeal.xml]
 'appearance':nounInfo("appearance"), # [appear.xml]
 'application':nounInfo("application"), # [apply.xml]
 'appointment':nounInfo("appointment"), # [appoint.xml]
 'appointment-02':nounInfo("appointment"), # [appoint.xml]
 'appraisal':nounInfo("appraisal"), # [appraise.xml]
 'appreciation':nounInfo("appreciation"), # [appreciate.xml]
 'apprehension':nounInfo("apprehension"), # [apprehend.xml]
 'apprehension-02':nounInfo("apprehension"), # [apprehend.xml]
 'approach-01':nounInfo("approach"), # [approach.xml]
 'approach-02':nounInfo("approach"), # [approach.xml]
 'appropriating':nounInfo("appropriating"), # [appropriate.xml]
 'appropriation':nounInfo("appropriation"), # [appropriate.xml]
 'approval':nounInfo("approval"), # [approve.xml]
 'aptitude':nounInfo("aptitude"), # [apt.xml]
 'arbitrage-01':nounInfo("arbitrage"), # [arbitrage.xml]
 'arbitration':nounInfo("arbitration"), # [arbitrate.xml]
 'argument':nounInfo("argument"), # [argue.xml]
 'arrangement':nounInfo("arrangement"), # [arrange.xml]
 'arrest-01':nounInfo("arrest"), # [arrest.xml]
 'arrest-02':nounInfo("arrest"), # [arrest.xml]
 'arrival':nounInfo("arrival"), # [arrive.xml]
 'arson-01':nounInfo("arson"), # [arson.xml]
 'articulation':nounInfo("articulation"), # [articulate.xml]
 'ascending':nounInfo("ascending"), # [ascend.xml]
 'ascension':nounInfo("ascension"), # [ascend.xml]
 'ascent':nounInfo("ascent"), # [ascend.xml]
 'asphyxiation':nounInfo("asphyxiation"), # [asphyxiate.xml]
 'aspiration':nounInfo("aspiration"), # [aspire.xml]
 'assassination':nounInfo("assassination"), # [assassinate.xml]
 'assault-01':nounInfo("assault"), # [assault.xml]
 'assay-01':nounInfo("assay"), # [assay.xml]
 'assembly':nounInfo("assembly"), # [assemble.xml]
 'assertion':nounInfo("assertion"), # [assert.xml]
 'assessment':nounInfo("assessment"), # [assess.xml]
 'assignment':nounInfo("assignment"), # [assign.xml]
 'assimilation':nounInfo("assimilation"), # [assimilate.xml]
 'assistance':nounInfo("assistance"), # [assist.xml]
 'association':nounInfo("association"), # [associate.xml]
 'assumption':nounInfo("assumption"), # [assume.xml]
 'assurance':nounInfo("assurance"), # [assure.xml]
 'attachment':nounInfo("attachment"), # [attach.xml]
 'attack-01':nounInfo("attack"), # [attack.xml]
 'attacking':nounInfo("attacking"), # [attack.xml]
 'attainment':nounInfo("attainment"), # [attain.xml]
 'attempt-01':nounInfo("attempt"), # [attempt.xml]
 'attending':nounInfo("attending"), # [attend.xml]
 'attention':nounInfo("attention"), # [attend.xml]
 'attenuation':nounInfo("attenuation"), # [attenuate.xml]
 'attraction':nounInfo("attraction"), # [attract.xml]
 'auction':nounInfo("auction"), # [auction.xml]
 'audit-01':nounInfo("audit"), # [audit.xml]
 'audition-01':nounInfo("audition"), # [audition.xml]
 'augmentation':nounInfo("augmentation"), # [augment.xml]
 'authentication':nounInfo("authentication"), # [authenticate.xml]
 'authorization':nounInfo("authorization"), # [authorize.xml]
 'automation':nounInfo("automation"), # [automate.xml]
 'averaging':nounInfo("averaging"), # [average.xml]
 'averaging-02':nounInfo("averaging"), # [average.xml]
 'avulsion':nounInfo("avulsion"), # [avulse.xml]
 'awakening':nounInfo("awakening"), # [wake.xml]
 'award-01':nounInfo("award"), # [award.xml]
 'babysitting':nounInfo("babysitting"), # [babysit.xml]
 'backing':nounInfo("backing"), # [back.xml]
 'backlash-01':nounInfo("backlash"), # [backlash.xml]
 'banding':nounInfo("banding"), # [band.xml]
 'bandwagon':nounInfo("bandwagon"), # [jump.xml]
 'banging':nounInfo("banging"), # [bang.xml]
 'banking':nounInfo("banking"), # [bank.xml]
 'bankruptcy':nounInfo("bankruptcy"), # [bankrupt.xml]
 'banning':nounInfo("banning"), # [ban.xml]
 'bargain-01':nounInfo("bargain"), # [bargain.xml]
 'barter-01':nounInfo("barter"), # [barter.xml]
 'bashing':nounInfo("bashing"), # [bash.xml]
 'bath':nounInfo("bath"), # [bathe.xml]
 'bathing':nounInfo("bathing"), # [bathe.xml]
 'battering':nounInfo("battering"), # [batter.xml]
 'batting':nounInfo("batting"), # [bat.xml]
 'battle-01':nounInfo("battle"), # [battle.xml]
 'bearing':nounInfo("bearing"), # [bear.xml]
 'beat-02':nounInfo("beat"), # [beat.xml]
 'beating':nounInfo("beating"), # [beat.xml]
 'beauty':nounInfo("beauty"), # [beautify.xml]
 'bedding':nounInfo("bedding"), # [bed.xml]
 'beginning':nounInfo("beginning"), # [begin.xml]
 'being':nounInfo("being"), # [be.xml]
 'belching':nounInfo("belching"), # [belch.xml]
 'belittling':nounInfo("belittling"), # [belittle.xml]
 'belonging':nounInfo("belonging"), # [belong.xml]
 'bend-01':nounInfo("bend"), # [bend.xml]
 'bending':nounInfo("bending"), # [bend.xml]
 'benefit-01':nounInfo("benefit"), # [benefit.xml]
 'bequest':nounInfo("bequest"), # [bequeath.xml]
 'bet-01':nounInfo("bet"), # [bet.xml]
 'betrayal':nounInfo("betrayal"), # [betray.xml]
 'betting':nounInfo("betting"), # [bet.xml]
 'bickering':nounInfo("bickering"), # [bicker.xml]
 'bid-01':nounInfo("bid"), # [bid.xml]
 'bid-03':nounInfo("bid"), # [bid.xml]
 'bid-06':nounInfo("bid"), # [bid.xml]
 'bidding-04':nounInfo("bidding"), # [bid.xml]
 'bidding-05':nounInfo("bidding"), # [bid.xml]
 'bifurcation':nounInfo("bifurcation"), # [bifurcate.xml]
 'biking':nounInfo("biking"), # [bike.xml]
 'billing':nounInfo("billing"), # [bill.xml]
 'binding':nounInfo("binding"), # [bind.xml]
 'binding-affinity-91':nounInfo("binding-affinity"), # [binding-affinity.xml]
 'biopsy-101':nounInfo("biopsy"), # [biopsy.xml]
 'biotinylation':nounInfo("biotinylation"), # [biotinylate.xml]
 'birth':nounInfo("birth"), # [bear.xml]
 'birthing':nounInfo("birthing"), # [bear.xml]
 'bite-01':nounInfo("bite"), # [bite.xml]
 'blame-01':nounInfo("blame"), # [blame.xml]
 'blast-01':nounInfo("blast"), # [blast.xml]
 'blast-02':nounInfo("blast"), # [blast.xml]
 'blast-05':nounInfo("blast"), # [blast.xml]
 'blathering':nounInfo("blathering"), # [blather.xml]
 'blaze-01':nounInfo("blaze"), # [blaze.xml]
 'bleeding':nounInfo("bleeding"), # [bleed.xml]
 'blemish-01':nounInfo("blemish"), # [blemish.xml]
 'blessing':nounInfo("blessing"), # [bless.xml]
 'blistering':nounInfo("blistering"), # [blister.xml]
 'blitz-01':nounInfo("blitz"), # [blitz.xml]
 'bloating':nounInfo("bloating"), # [bloat.xml]
 'block-01':nounInfo("block"), # [block.xml]
 'blockade-01':nounInfo("blockade"), # [blockade.xml]
 'blogging':nounInfo("blogging"), # [blog.xml]
 'blood':nounInfo("blood"), # [hand.xml]
 'bloom-01':nounInfo("bloom"), # [bloom.xml]
 'blow-01':nounInfo("blow"), # [blow.xml]
 'blow-08':nounInfo("blow"), # [blow.xml]
 'blow-14':nounInfo("blow"), # [blow.xml]
 'blowing':nounInfo("blowing"), # [blow.xml]
 'blowjob':nounInfo("blowjob"), # [blow.xml]
 'blunting':nounInfo("blunting"), # [blunt.xml]
 'blurring':nounInfo("blurring"), # [blur.xml]
 'board':nounInfo("board"), # [jump.xml]
 'boarding':nounInfo("boarding"), # [board.xml]
 'boast-01':nounInfo("boast"), # [boast.xml]
 'boating':nounInfo("boating"), # [boat.xml]
 'boil-01':nounInfo("boil"), # [boil.xml]
 'bombardment':nounInfo("bombardment"), # [bombard.xml]
 'bombing':nounInfo("bombing"), # [bomb.xml]
 'bond-01':nounInfo("bond"), # [bond.xml]
 'booing':nounInfo("booing"), # [boo.xml]
 'booking':nounInfo("booking"), # [book.xml]
 'boom-02':nounInfo("boom"), # [boom.xml]
 'boost-01':nounInfo("boost"), # [boost.xml]
 'boot-01':nounInfo("boot"), # [boot.xml]
 'boot-04':nounInfo("boot"), # [boot.xml]
 'borrowing':nounInfo("borrowing"), # [borrow.xml]
 'bounce-01':nounInfo("bounce"), # [bounce.xml]
 'bow-01':nounInfo("bow"), # [bow.xml]
 'bow-02':nounInfo("bow"), # [bow.xml]
 'bowling':nounInfo("bowling"), # [bowl.xml]
 'boxing':nounInfo("boxing"), # [box.xml]
 'boycott-01':nounInfo("boycott"), # [boycott.xml]
 'bracing':nounInfo("bracing"), # [brace.xml]
 'bravery':nounInfo("bravery"), # [brave.xml]
 'brawl-01':nounInfo("brawl"), # [brawl.xml]
 'break-01':nounInfo("break"), # [break.xml]
 'break-13':nounInfo("break"), # [break.xml]
 'break-18':nounInfo("break"), # [break.xml]
 'break-19':nounInfo("break"), # [break.xml]
 'break-20':nounInfo("break"), # [break.xml]
 'break-21':nounInfo("break"), # [break.xml]
 'breakdown':nounInfo("breakdown"), # [break.xml]
 'breaking':nounInfo("breaking"), # [break.xml]
 'breakthrough':nounInfo("breakthrough"), # [break.xml]
 'breakup':nounInfo("breakup"), # [break.xml]
 'breastfeeding':nounInfo("breastfeeding"), # [breastfeed.xml]
 'breath':nounInfo("breath"), # [breathe.xml]
 'breathing':nounInfo("breathing"), # [breathe.xml]
 'breeding':nounInfo("breeding"), # [breed.xml]
 'bridging':nounInfo("bridging"), # [bridge.xml]
 'briefing':nounInfo("briefing"), # [brief.xml]
 'broadcast-01':nounInfo("broadcast"), # [broadcast.xml]
 'broadening':nounInfo("broadening"), # [broaden.xml]
 'bruising':nounInfo("bruising"), # [bruise.xml]
 'brushing':nounInfo("brushing"), # [brush.xml]
 'brutality':nounInfo("brutality"), # [brutalize.xml]
 'budding':nounInfo("budding"), # [bud.xml]
 'budgeting':nounInfo("budgeting"), # [budget.xml]
 'build-01':nounInfo("build"), # [build.xml]
 'bulging':nounInfo("bulging"), # [bulge.xml]
 'bullying':nounInfo("bullying"), # [bully.xml]
 'burden-01':nounInfo("burden"), # [burden.xml]
 'burglary':nounInfo("burglary"), # [burglarize.xml]
 'burial':nounInfo("burial"), # [bury.xml]
 'burn-01':nounInfo("burn"), # [burn.xml]
 'burnout':nounInfo("burnout"), # [burn.xml]
 'burping':nounInfo("burping"), # [burp.xml]
 'burst-01':nounInfo("burst"), # [burst.xml]
 'burst-02':nounInfo("burst"), # [burst.xml]
 'burst-03':nounInfo("burst"), # [burst.xml]
 'bust-01':nounInfo("bust"), # [bust.xml]
 'bust-02':nounInfo("bust"), # [bust.xml]
 'bust-06':nounInfo("bust"), # [bust.xml]
 'buying':nounInfo("buying"), # [buy.xml]
 'buyout':nounInfo("buyout"), # [buy.xml]
 'by-election':nounInfo("by-election"), # [byelect.xml]
 'byelection':nounInfo("byelection"), # [byelect.xml]
 'byline-91':nounInfo("byline"), # [byline.xml]
 'bypass-01':nounInfo("bypass"), # [bypass.xml]
 'calcification':nounInfo("calcification"), # [calcify.xml]
 'calcifying':nounInfo("calcifying"), # [calcify.xml]
 'calculation':nounInfo("calculation"), # [calculate.xml]
 'call-02':nounInfo("call"), # [call.xml]
 'call-03':nounInfo("call"), # [call.xml]
 'call-07':nounInfo("call"), # [call.xml]
 'call-10':nounInfo("call"), # [call.xml]
 'call-16':nounInfo("call"), # [call.xml]
 'calling':nounInfo("calling"), # [call.xml]
 'campaign-01':nounInfo("campaign"), # [campaign.xml]
 'camping':nounInfo("camping"), # [camp.xml]
 'cancellation':nounInfo("cancellation"), # [cancel.xml]
 'canning':nounInfo("canning"), # [can.xml]
 'cap-01':nounInfo("cap"), # [cap.xml]
 'capitalization':nounInfo("capitalization"), # [capitalize.xml]
 'capitulation':nounInfo("capitulation"), # [capitulate.xml]
 'capture-01':nounInfo("capture"), # [capture.xml]
 'care-01':nounInfo("care"), # [care.xml]
 'care-03':nounInfo("care"), # [care.xml]
 'care-04':nounInfo("care"), # [care.xml]
 'caring':nounInfo("caring"), # [care.xml]
 'cascading':nounInfo("cascading"), # [cascade.xml]
 'case-03':nounInfo("case"), # [case.xml]
 'case-04':nounInfo("case"), # [case.xml]
 'cast-01':nounInfo("cast"), # [cast.xml]
 'casting':nounInfo("casting"), # [cast.xml]
 'castration':nounInfo("castration"), # [castrate.xml]
 'catalog':nounInfo("catalog"), # [catalogue.xml]
 'catalogue-01':nounInfo("catalogue"), # [catalogue.xml]
 'catch-01':nounInfo("catch"), # [catch.xml]
 'catching':nounInfo("catching"), # [catch.xml]
 'categorization':nounInfo("categorization"), # [categorize.xml]
 'catheterization':nounInfo("catheterization"), # [catheterize.xml]
 'causation':nounInfo("causation"), # [cause.xml]
 'caution-01':nounInfo("caution"), # [caution.xml]
 'celebration':nounInfo("celebration"), # [celebrate.xml]
 'center-02':nounInfo("center"), # [center.xml]
 'certification':nounInfo("certification"), # [certify.xml]
 'cessation':nounInfo("cessation"), # [cease.xml]
 'challenge-01':nounInfo("challenge"), # [challenge.xml]
 'championing':nounInfo("championing"), # [champion.xml]
 'championship':nounInfo("championship"), # [champion.xml]
 'championship-02':nounInfo("championship"), # [champion.xml]
 'chance-01':nounInfo("chance"), # [chance.xml]
 'chance-02':nounInfo("chance"), # [chance.xml]
 'change-01':nounInfo("change"), # [change.xml]
 'characterization':nounInfo("characterization"), # [characterize.xml]
 'charge-01':nounInfo("charge"), # [charge.xml]
 'charge-02':nounInfo("charge"), # [charge.xml]
 'charge-04':nounInfo("charge"), # [charge.xml]
 'charge-05':nounInfo("charge"), # [charge.xml]
 'charge-08':nounInfo("charge"), # [charge.xml]
 'chase-01':nounInfo("chase"), # [chase.xml]
 'chat-01':nounInfo("chat"), # [chat.xml]
 'cheating':nounInfo("cheating"), # [cheat.xml]
 'check':nounInfo("check"), # [check.xml]
 'check-01':nounInfo("check"), # [check.xml]
 'check-08':nounInfo("check"), # [check.xml]
 'checkin':nounInfo("checkin"), # [check.xml]
 'checking':nounInfo("checking"), # [check.xml]
 'checkout':nounInfo("checkout"), # [check.xml]
 'chewing':nounInfo("chewing"), # [chew.xml]
 'choice':nounInfo("choice"), # [choose.xml]
 'choking':nounInfo("choking"), # [choke.xml]
 'choosing':nounInfo("choosing"), # [choose.xml]
 'chop-01':nounInfo("chop"), # [chop.xml]
 'christening':nounInfo("christening"), # [christen.xml]
 'circulation':nounInfo("circulation"), # [circulate.xml]
 'circumcision':nounInfo("circumcision"), # [circumcise.xml]
 'citation':nounInfo("citation"), # [cite.xml]
 'civilization':nounInfo("civilization"), # [civilize.xml]
 'claim-01':nounInfo("claim"), # [claim.xml]
 'claim-02':nounInfo("claim"), # [claim.xml]
 'clapping':nounInfo("clapping"), # [clap.xml]
 'clarification':nounInfo("clarification"), # [clear.xml]
 'clash-01':nounInfo("clash"), # [clash.xml]
 'clash-02':nounInfo("clash"), # [clash.xml]
 'classification':nounInfo("classification"), # [classify.xml]
 'cleaning':nounInfo("cleaning"), # [clean.xml]
 'cleansing':nounInfo("cleansing"), # [cleanse.xml]
 'clearance':nounInfo("clearance"), # [clear.xml]
 'clearing':nounInfo("clearing"), # [clear.xml]
 'cleavage':nounInfo("cleavage"), # [cleave.xml]
 'clenching':nounInfo("clenching"), # [clench.xml]
 'click-01':nounInfo("click"), # [click.xml]
 'climax-01':nounInfo("climax"), # [climax.xml]
 'climb-01':nounInfo("climb"), # [climb.xml]
 'climb-02':nounInfo("climb"), # [climb.xml]
 'climbing':nounInfo("climbing"), # [climb.xml]
 'clip-01':nounInfo("clip"), # [clip.xml]
 'clogging':nounInfo("clogging"), # [clog.xml]
 'cloning':nounInfo("cloning"), # [clone.xml]
 'close-01':nounInfo("close"), # [close.xml]
 'closing':nounInfo("closing"), # [close.xml]
 'clothing':nounInfo("clothing"), # [clothe.xml]
 'clouding':nounInfo("clouding"), # [cloud.xml]
 'clubbing':nounInfo("clubbing"), # [club.xml]
 'clubbing-03':nounInfo("clubbing"), # [club.xml]
 'clumping':nounInfo("clumping"), # [clump.xml]
 'clunking':nounInfo("clunking"), # [clunk.xml]
 'co-administration':nounInfo("co-administration"), # [administer.xml]
 'co-evolution':nounInfo("co-evolution"), # [coevolve.xml]
 'co-existence':nounInfo("co-existence"), # [coexist.xml]
 'coactivation':nounInfo("coactivation"), # [coactivate.xml]
 'coadministration':nounInfo("coadministration"), # [administer.xml]
 'coagulation':nounInfo("coagulation"), # [coagulate.xml]
 'coating':nounInfo("coating"), # [coat.xml]
 'coblation':nounInfo("coblation"), # [ablate.xml]
 'coculture-01':nounInfo("coculture"), # [coculture.xml]
 'coding':nounInfo("coding"), # [code.xml]
 'coercion':nounInfo("coercion"), # [coerce.xml]
 'coevolution':nounInfo("coevolution"), # [coevolve.xml]
 'coexistence':nounInfo("coexistence"), # [coexist.xml]
 'coexpression':nounInfo("coexpression"), # [coexpress.xml]
 'cohesion':nounInfo("cohesion"), # [cohere.xml]
 'coimmunoprecipitation':nounInfo("coimmunoprecipitation"), # [coimmunoprecipitate.xml]
 'collaborating':nounInfo("collaborating"), # [collaborate.xml]
 'collaboration':nounInfo("collaboration"), # [collaborate.xml]
 'collapse-01':nounInfo("collapse"), # [collapse.xml]
 'collecting':nounInfo("collecting"), # [collect.xml]
 'collection':nounInfo("collection"), # [collect.xml]
 'collision':nounInfo("collision"), # [collide.xml]
 'collusion':nounInfo("collusion"), # [collude.xml]
 'colocalisation':nounInfo("colocalisation"), # [colocalize.xml]
 'colocalization':nounInfo("colocalization"), # [colocalize.xml]
 'colonization':nounInfo("colonization"), # [colonize.xml]
 'coloration':nounInfo("coloration"), # [color.xml]
 'coloring':nounInfo("coloring"), # [color.xml]
 'combat-01':nounInfo("combat"), # [combat.xml]
 'combination':nounInfo("combination"), # [combine.xml]
 'combustion':nounInfo("combustion"), # [combust.xml]
 'comeback-01':nounInfo("comeback"), # [comeback.xml]
 'coming':nounInfo("coming"), # [come.xml]
 'commemoration':nounInfo("commemoration"), # [commemorate.xml]
 'commendation':nounInfo("commendation"), # [commend.xml]
 'comment-01':nounInfo("comment"), # [comment.xml]
 'commercialization':nounInfo("commercialization"), # [commercialize.xml]
 'commissioning':nounInfo("commissioning"), # [commission.xml]
 'commitment':nounInfo("commitment"), # [commit.xml]
 'commoditization':nounInfo("commoditization"), # [commodify.xml]
 'communicating':nounInfo("communicating"), # [communicate.xml]
 'communication':nounInfo("communication"), # [communicate.xml]
 'comparison':nounInfo("comparison"), # [compare.xml]
 'compensation':nounInfo("compensation"), # [compensate.xml]
 'competition':nounInfo("competition"), # [compete.xml]
 'compilation':nounInfo("compilation"), # [compile.xml]
 'complaining':nounInfo("complaining"), # [complain.xml]
 'complaint':nounInfo("complaint"), # [complain.xml]
 'completion':nounInfo("completion"), # [complete.xml]
 'compliance':nounInfo("compliance"), # [comply.xml]
 'complication':nounInfo("complication"), # [complicate.xml]
 'composition':nounInfo("composition"), # [compose.xml]
 'comprehension':nounInfo("comprehension"), # [comprehend.xml]
 'compression':nounInfo("compression"), # [compress.xml]
 'compromise-01':nounInfo("compromise"), # [compromise.xml]
 'compromise-02':nounInfo("compromise"), # [compromise.xml]
 'compulsion':nounInfo("compulsion"), # [compel.xml]
 'concentration':nounInfo("concentration"), # [concentrate.xml]
 'conception':nounInfo("conception"), # [conceive.xml]
 'concern-01':nounInfo("concern"), # [concern.xml]
 'concession':nounInfo("concession"), # [concede.xml]
 'conclusion':nounInfo("conclusion"), # [conclude.xml]
 'condensation':nounInfo("condensation"), # [condense.xml]
 'conditioning':nounInfo("conditioning"), # [condition.xml]
 'conduct-01':nounInfo("conduct"), # [conduct.xml]
 'conduct-02':nounInfo("conduct"), # [conduct.xml]
 'conduction':nounInfo("conduction"), # [conduct.xml]
 'confederation':nounInfo("confederation"), # [confederate.xml]
 'conference':nounInfo("conference"), # [confer.xml]
 'confession':nounInfo("confession"), # [confess.xml]
 'configuration':nounInfo("configuration"), # [configure.xml]
 'confirmation':nounInfo("confirmation"), # [confirm.xml]
 'confiscation':nounInfo("confiscation"), # [confiscate.xml]
 'conflict-01':nounInfo("conflict"), # [conflict.xml]
 'confrontation':nounInfo("confrontation"), # [confront.xml]
 'confusion':nounInfo("confusion"), # [confuse.xml]
 'congestion':nounInfo("congestion"), # [congest.xml]
 'conglomeration':nounInfo("conglomeration"), # [combine.xml]
 'congratulation':nounInfo("congratulation"), # [congratulate.xml]
 'congregation':nounInfo("congregation"), # [congregate.xml]
 'conjugate-02':nounInfo("conjugate"), # [conjugate.xml]
 'conjugation':nounInfo("conjugation"), # [conjugate.xml]
 'connecting':nounInfo("connecting"), # [connect.xml]
 'connection':nounInfo("connection"), # [connect.xml]
 'connotation':nounInfo("connotation"), # [connote.xml]
 'conquering':nounInfo("conquering"), # [conquer.xml]
 'conquest':nounInfo("conquest"), # [conquer.xml]
 'consequence-02':nounInfo("consequence"), # [consequential.xml]
 'consequence-03':nounInfo("consequence"), # [consequential.xml]
 'conservation':nounInfo("conservation"), # [conserve.xml]
 'consideration':nounInfo("consideration"), # [consider.xml]
 'consistency':nounInfo("consistency"), # [consistent.xml]
 'consolation':nounInfo("consolation"), # [console.xml]
 'consolidation':nounInfo("consolidation"), # [consolidate.xml]
 'constipation':nounInfo("constipation"), # [constipate.xml]
 'constitution':nounInfo("constitution"), # [constitute.xml]
 'construction':nounInfo("construction"), # [construct.xml]
 'consult-01':nounInfo("consult"), # [consult.xml]
 'consuming':nounInfo("consuming"), # [consume.xml]
 'consumption':nounInfo("consumption"), # [consume.xml]
 'contact-01':nounInfo("contact"), # [contact.xml]
 'containment':nounInfo("containment"), # [contain.xml]
 'contamination':nounInfo("contamination"), # [contaminate.xml]
 'contemplation':nounInfo("contemplation"), # [contemplate.xml]
 'content-02':nounInfo("content"), # [content.xml]
 'contention':nounInfo("contention"), # [contend.xml]
 'contest-02':nounInfo("contest"), # [contest.xml]
 'continuation':nounInfo("continuation"), # [continue.xml]
 'contracting':nounInfo("contracting"), # [contract.xml]
 'contraction':nounInfo("contraction"), # [contract.xml]
 'contradiction':nounInfo("contradiction"), # [contradict.xml]
 'contraindication':nounInfo("contraindication"), # [contraindicate.xml]
 'contrast-01':nounInfo("contrast"), # [contrast.xml]
 'contribution':nounInfo("contribution"), # [contribute.xml]
 'control-01':nounInfo("control"), # [control.xml]
 'convening':nounInfo("convening"), # [convene.xml]
 'convention':nounInfo("convention"), # [convene.xml]
 'convergence':nounInfo("convergence"), # [converge.xml]
 'conversation':nounInfo("conversation"), # [converse.xml]
 'conversion':nounInfo("conversion"), # [convert.xml]
 'conviction':nounInfo("conviction"), # [convict.xml]
 'conviction-02':nounInfo("conviction"), # [convict.xml]
 'convulsion':nounInfo("convulsion"), # [convulse.xml]
 'cooking':nounInfo("cooking"), # [cook.xml]
 'cooling':nounInfo("cooling"), # [cool.xml]
 'cooperation':nounInfo("cooperation"), # [cooperate.xml]
 'coordination':nounInfo("coordination"), # [coordinate.xml]
 'coping':nounInfo("coping"), # [cope.xml]
 'coprecipitation':nounInfo("coprecipitation"), # [coprecipitate.xml]
 'copy-01':nounInfo("copy"), # [copy.xml]
 'corner-01':nounInfo("corner"), # [corner.xml]
 'cornification':nounInfo("cornification"), # [cornify.xml]
 'correction':nounInfo("correction"), # [correct.xml]
 'correlation':nounInfo("correlation"), # [correlate.xml]
 'correspondence':nounInfo("correspondence"), # [correspond.xml]
 'corrosion':nounInfo("corrosion"), # [corrode.xml]
 'corruption':nounInfo("corruption"), # [corrupt.xml]
 'cost-01':nounInfo("cost"), # [cost.xml]
 'cotransfection':nounInfo("cotransfection"), # [cotransfect.xml]
 'cough-01':nounInfo("cough"), # [cough.xml]
 'counseling':nounInfo("counseling"), # [counsel.xml]
 'count-01':nounInfo("count").addAttributes({"g":"m"}), # [count.xml]
 'counterfeiting':nounInfo("counterfeiting"), # [counterfeit.xml]
 'coup-01':nounInfo("coup"), # [coup.xml]
 'course-91':nounInfo("course"), # [course.xml]
 'coverage':nounInfo("coverage"), # [cover.xml]
 'coverage-06':nounInfo("coverage"), # [cover.xml]
 'covering':nounInfo("covering"), # [cover.xml]
 'crack-01':nounInfo("crack"), # [crack.xml]
 'crack-07':nounInfo("crack"), # [crack.xml]
 'crackdown':nounInfo("crackdown"), # [crack.xml]
 'cracking':nounInfo("cracking"), # [crack.xml]
 'cramping':nounInfo("cramping"), # [cramp.xml]
 'crash-01':nounInfo("crash"), # [crash.xml]
 'crash-02':nounInfo("crash"), # [crash.xml]
 'creation':nounInfo("creation"), # [create.xml]
 'credit-01':nounInfo("credit"), # [credit.xml]
 'crepitation':nounInfo("crepitation"), # [crepitate.xml]
 'crime-02':nounInfo("crime"), # [criminalize.xml]
 'criminalization':nounInfo("criminalization"), # [criminalize.xml]
 'criticism':nounInfo("criticism"), # [criticize.xml]
 'criticism-04':nounInfo("criticism"), # [criticize.xml]
 'criticizing':nounInfo("criticizing"), # [criticize.xml]
 'cross-examination':nounInfo("cross-examination"), # [crossexamine.xml]
 'cross-pollination':nounInfo("cross-pollination"), # [crosspollinate.xml]
 'crossexamination':nounInfo("crossexamination"), # [crossexamine.xml]
 'crossing':nounInfo("crossing"), # [cross.xml]
 'crosspollination':nounInfo("crosspollination"), # [crosspollinate.xml]
 'crosstalk-01':nounInfo("crosstalk"), # [crosstalk.xml]
 'crushing':nounInfo("crushing"), # [crush.xml]
 'cry-01':nounInfo("cry"), # [cry.xml]
 'crying':nounInfo("crying"), # [cry.xml]
 'cuddling':nounInfo("cuddling"), # [cuddle.xml]
 'culpability':nounInfo("culpability"), # [culpable.xml]
 'cultivation':nounInfo("cultivation"), # [cultivate.xml]
 'cupping':nounInfo("cupping"), # [cup.xml]
 'curb-01':nounInfo("curb"), # [curb.xml]
 'cure-01':nounInfo("cure"), # [cure.xml]
 'curling-03':nounInfo("curling"), # [curl.xml]
 'curse-02':nounInfo("curse"), # [curse.xml]
 'cut-01':nounInfo("cut"), # [cut.xml]
 'cut-02':nounInfo("cut"), # [cut.xml]
 'cutback':nounInfo("cutback"), # [cut.xml]
 'cutting':nounInfo("cutting"), # [cut.xml]
 'cycling':nounInfo("cycling"), # [cycle.xml]
 'damage-01':nounInfo("damage"), # [damage.xml]
 'damages-02':nounInfo("damages"), # [damage.xml]
 'dampening':nounInfo("dampening"), # [dampen.xml]
 'dance-01':nounInfo("dance"), # [dance.xml]
 'dance-02':nounInfo("dance"), # [dance.xml]
 'dancing':nounInfo("dancing"), # [dance.xml]
 'dating':nounInfo("dating"), # [date.xml]
 'dawn-02':nounInfo("dawn"), # [dawn.xml]
 'dazzling':nounInfo("dazzling"), # [dazzle.xml]
 'de-nuclearization':nounInfo("de-nuclearization"), # [denuclearize.xml]
 'deacetylation':nounInfo("deacetylation"), # [deacetylate.xml]
 'deal-01':nounInfo("deal"), # [deal.xml]
 'deal-02':nounInfo("deal"), # [deal.xml]
 'deal-03':nounInfo("deal"), # [deal.xml]
 'deamination':nounInfo("deamination"), # [deaminate.xml]
 'death':nounInfo("death"), # [die.xml]
 'debate-01':nounInfo("debate"), # [debate.xml]
 'debilitation':nounInfo("debilitation"), # [debilitate.xml]
 'debut-01':nounInfo("debut"), # [debut.xml]
 'deceleration':nounInfo("deceleration"), # [decelerate.xml]
 'deception':nounInfo("deception"), # [deceive.xml]
 'decision':nounInfo("decision"), # [decide.xml]
 'declaration':nounInfo("declaration"), # [declare.xml]
 'decline-01':nounInfo("decline"), # [decline.xml]
 'decomposition':nounInfo("decomposition"), # [decompose.xml]
 'decompression':nounInfo("decompression"), # [decompress.xml]
 'decoration':nounInfo("decoration"), # [decorate.xml]
 'decrease-01':nounInfo("decrease"), # [decrease.xml]
 'decryption':nounInfo("decryption"), # [decrypt.xml]
 'dedication':nounInfo("dedication"), # [dedicate.xml]
 'deduction':nounInfo("deduction"), # [deduct.xml]
 'defamation':nounInfo("defamation"), # [defame.xml]
 'defarnesylation':nounInfo("defarnesylation"), # [defarnesylate.xml]
 'default-01':nounInfo("default"), # [default.xml]
 'default-02':nounInfo("default"), # [default.xml]
 'defeat-01':nounInfo("defeat"), # [defeat.xml]
 'defecation':nounInfo("defecation"), # [defecate.xml]
 'defence':nounInfo("defence"), # [defend.xml]
 'defense':nounInfo("defense"), # [defend.xml]
 'defiance':nounInfo("defiance"), # [defy.xml]
 'definition':nounInfo("definition"), # [define.xml]
 'definition-02':nounInfo("definition"), # [define.xml]
 'deflation':nounInfo("deflation"), # [deflate.xml]
 'deflection':nounInfo("deflection"), # [deflect.xml]
 'degeneration':nounInfo("degeneration"), # [degenerate.xml]
 'deglycosylation':nounInfo("deglycosylation"), # [deglycosylate.xml]
 'degradation':nounInfo("degradation"), # [degrade.xml]
 'dehydration':nounInfo("dehydration"), # [dehydrate.xml]
 'delay-01':nounInfo("delay"), # [delay.xml]
 'deleting':nounInfo("deleting"), # [delete.xml]
 'deletion':nounInfo("deletion"), # [delete.xml]
 'deliberation':nounInfo("deliberation"), # [deliberate.xml]
 'delineation':nounInfo("delineation"), # [delineate.xml]
 'delivery':nounInfo("delivery"), # [deliver.xml]
 'delocalization':nounInfo("delocalization"), # [delocalize.xml]
 'delusion':nounInfo("delusion"), # [delude.xml]
 'demand-01':nounInfo("demand"), # [demand.xml]
 'demethylation':nounInfo("demethylation"), # [demethylate.xml]
 'demilitarization':nounInfo("demilitarization"), # [demilitarize.xml]
 'demolition':nounInfo("demolition"), # [demolish.xml]
 'demonstration':nounInfo("demonstration"), # [demonstrate.xml]
 'demoralization':nounInfo("demoralization"), # [demoralize.xml]
 'demyelinating':nounInfo("demyelinating"), # [demyelinate.xml]
 'demyelination':nounInfo("demyelination"), # [demyelinate.xml]
 'denaturation':nounInfo("denaturation"), # [denature.xml]
 'denomination':nounInfo("denomination"), # [denominate.xml]
 'dent-01':nounInfo("dent"), # [dent.xml]
 'denuclearization':nounInfo("denuclearization"), # [denuclearize.xml]
 'denunciation':nounInfo("denunciation"), # [denounce.xml]
 'depalmitoylation':nounInfo("depalmitoylation"), # [depalmitoylate.xml]
 'departure':nounInfo("departure"), # [depart.xml]
 'dephosphorylation':nounInfo("dephosphorylation"), # [dephosphorylate.xml]
 'depiction':nounInfo("depiction"), # [depict.xml]
 'depletion':nounInfo("depletion"), # [deplete.xml]
 'deployment':nounInfo("deployment"), # [deploy.xml]
 'depolymerisation':nounInfo("depolymerisation"), # [depolymerize.xml]
 'depolymerization':nounInfo("depolymerization"), # [depolymerize.xml]
 'deportation':nounInfo("deportation"), # [deport.xml]
 'deposit-01':nounInfo("deposit"), # [deposit.xml]
 'deposition':nounInfo("deposition"), # [deposit.xml]
 'deposition-02':nounInfo("deposition"), # [deposit.xml]
 'depreciation':nounInfo("depreciation"), # [depreciate.xml]
 'depression':nounInfo("depression"), # [depress.xml]
 'deprivation':nounInfo("deprivation"), # [deprive.xml]
 'depth':nounInfo("depth"), # [deepen.xml]
 'deregulation':nounInfo("deregulation"), # [deregulate.xml]
 'derision':nounInfo("derision"), # [deride.xml]
 'descending':nounInfo("descending"), # [descend.xml]
 'description':nounInfo("description"), # [describe.xml]
 'desecration':nounInfo("desecration"), # [desecrate.xml]
 'desensitization':nounInfo("desensitization"), # [desensitize.xml]
 'design-01':nounInfo("design"), # [design.xml]
 'design-02':nounInfo("design"), # [design.xml]
 'designation':nounInfo("designation"), # [designate.xml]
 'desire-01':nounInfo("desire"), # [desire.xml]
 'despair-01':nounInfo("despair"), # [despair.xml]
 'desperation':nounInfo("desperation"), # [despair.xml]
 'destabilization':nounInfo("destabilization"), # [destabilize.xml]
 'destruction':nounInfo("destruction"), # [destroy.xml]
 'detachment':nounInfo("detachment"), # [detach.xml]
 'detection':nounInfo("detection"), # [detect.xml]
 'detention':nounInfo("detention"), # [detain.xml]
 'deterioration':nounInfo("deterioration"), # [deteriorate.xml]
 'determination':nounInfo("determination"), # [determine.xml]
 'devaluation':nounInfo("devaluation"), # [devalue.xml]
 'devastation':nounInfo("devastation"), # [devastate.xml]
 'development':nounInfo("development"), # [develop.xml]
 'deviation':nounInfo("deviation"), # [deviate.xml]
 'devolution':nounInfo("devolution"), # [devolve.xml]
 'devotion':nounInfo("devotion"), # [devote.xml]
 'diagnosis':nounInfo("diagnosis"), # [diagnose.xml]
 'dialogue-01':nounInfo("dialogue"), # [dialogue.xml]
 'dictating':nounInfo("dictating"), # [dictate.xml]
 'dictation':nounInfo("dictation"), # [dictate.xml]
 'die-01':nounInfo("die"), # [die.xml]
 'difference':nounInfo("difference"), # [differ.xml]
 'differentiation':nounInfo("differentiation"), # [differentiate.xml]
 'diffusion':nounInfo("diffusion"), # [diffuse.xml]
 'dig-01':nounInfo("dig"), # [dig.xml]
 'dig-05':nounInfo("dig"), # [dig.xml]
 'digestion':nounInfo("digestion"), # [digest.xml]
 'digging':nounInfo("digging"), # [dig.xml]
 'digression':nounInfo("digression"), # [digress.xml]
 'dilatation':nounInfo("dilatation"), # [dilate.xml]
 'dilation':nounInfo("dilation"), # [dilate.xml]
 'dimerization':nounInfo("dimerization"), # [dimerize.xml]
 'dining':nounInfo("dining"), # [dine.xml]
 'directing':nounInfo("directing"), # [direct.xml]
 'direction':nounInfo("direction"), # [direct.xml]
 'disappointment':nounInfo("disappointment"), # [disappoint.xml]
 'disarmament':nounInfo("disarmament"), # [disarm.xml]
 'disarming':nounInfo("disarming"), # [disarm.xml]
 'discharge-101':nounInfo("discharge"), # [discharge.xml]
 'disclosure':nounInfo("disclosure"), # [disclose.xml]
 'discoloration':nounInfo("discoloration"), # [discolor.xml]
 'discontinuation':nounInfo("discontinuation"), # [discontinue.xml]
 'discount-01':nounInfo("discount"), # [discount.xml]
 'discourse-01':nounInfo("discourse"), # [discourse.xml]
 'discovery':nounInfo("discovery"), # [discover.xml]
 'discrimination':nounInfo("discrimination"), # [discriminate.xml]
 'discussion':nounInfo("discussion"), # [discuss.xml]
 'disgust-01':nounInfo("disgust"), # [disgust.xml]
 'disinformation':nounInfo("disinformation"), # [disinform.xml]
 'disintegration':nounInfo("disintegration"), # [disintegrate.xml]
 'dislocation':nounInfo("dislocation"), # [dislocate.xml]
 'dismemberment':nounInfo("dismemberment"), # [dismember.xml]
 'disobedience':nounInfo("disobedience"), # [disobey.xml]
 'disobediency':nounInfo("disobediency"), # [disobey.xml]
 'disorganization':nounInfo("disorganization"), # [disorganize.xml]
 'dispensation':nounInfo("dispensation"), # [dispense.xml]
 'displacement':nounInfo("displacement"), # [displace.xml]
 'display-01':nounInfo("display"), # [display.xml]
 'disposal':nounInfo("disposal"), # [dispose.xml]
 'disposal-03':nounInfo("disposal"), # [dispose.xml]
 'disposition':nounInfo("disposition"), # [dispose.xml]
 'dispute-01':nounInfo("dispute"), # [dispute.xml]
 'disruption':nounInfo("disruption"), # [disrupt.xml]
 'dissatisfaction':nounInfo("dissatisfaction"), # [dissatisfy.xml]
 'dissection':nounInfo("dissection"), # [dissect.xml]
 'dissemination':nounInfo("dissemination"), # [disseminate.xml]
 'dissent-01':nounInfo("dissent"), # [dissent.xml]
 'dissention':nounInfo("dissention"), # [dissent.xml]
 'dissociation':nounInfo("dissociation"), # [dissociate.xml]
 'dissolution':nounInfo("dissolution"), # [dissolve.xml]
 'distension':nounInfo("distension"), # [distend.xml]
 'distention':nounInfo("distention"), # [distend.xml]
 'distinction':nounInfo("distinction"), # [distinguish.xml]
 'distortion':nounInfo("distortion"), # [distort.xml]
 'distraction':nounInfo("distraction"), # [distract.xml]
 'distribution':nounInfo("distribution"), # [distribute.xml]
 'distribution-range-91':nounInfo("distribution-range"), # [distribution-range.xml]
 'disturbance':nounInfo("disturbance"), # [disturb.xml]
 'dive-02':nounInfo("dive"), # [dive.xml]
 'divergence':nounInfo("divergence"), # [diverge.xml]
 'diversification':nounInfo("diversification"), # [diversify.xml]
 'diversion':nounInfo("diversion"), # [divert.xml]
 'dividing':nounInfo("dividing"), # [divide.xml]
 'diving':nounInfo("diving"), # [dive.xml]
 'division':nounInfo("division"), # [divide.xml]
 'divorce-01':nounInfo("divorce"), # [divorce.xml]
 'dock-01':nounInfo("dock"), # [dock.xml]
 'dockings':nounInfo("dockings"), # [dock.xml]
 'documentation':nounInfo("documentation"), # [document.xml]
 'dogsledding':nounInfo("dogsledding"), # [dogsled.xml]
 'doing':nounInfo("doing"), # [do.xml]
 'doing-07':nounInfo("doing"), # [do.xml]
 'dominance':nounInfo("dominance"), # [dominate.xml]
 'domination':nounInfo("domination"), # [dominate.xml]
 'dominion':nounInfo("dominion"), # [dominate.xml]
 'donation':nounInfo("donation"), # [donate.xml]
 'dosing':nounInfo("dosing"), # [dose.xml]
 'doubling':nounInfo("doubling"), # [double.xml]
 'doubt-01':nounInfo("doubt"), # [doubt.xml]
 'downing':nounInfo("downing"), # [down.xml]
 'downloading':nounInfo("downloading"), # [download.xml]
 'downmodulation':nounInfo("downmodulation"), # [downmodulate.xml]
 'downregulation':nounInfo("downregulation"), # [downregulate.xml]
 'drafting':nounInfo("drafting"), # [draft.xml]
 'drag-01':nounInfo("drag"), # [drag.xml]
 'draining':nounInfo("draining"), # [drain.xml]
 'draw-02':nounInfo("draw"), # [draw.xml]
 'drawing':nounInfo("drawing"), # [draw.xml]
 'dream-01':nounInfo("dream"), # [dream.xml]
 'dressing':nounInfo("dressing"), # [dress.xml]
 'dribbling':nounInfo("dribbling"), # [dribble.xml]
 'drilling':nounInfo("drilling"), # [drill.xml]
 'drink-01':nounInfo("drink"), # [drink.xml]
 'drive-01':nounInfo("drive"), # [drive.xml]
 'drive-03':nounInfo("drive"), # [drive.xml]
 'drive-04':nounInfo("drive"), # [drive.xml]
 'driving':nounInfo("driving"), # [drive.xml]
 'drooling':nounInfo("drooling"), # [drool.xml]
 'drooping':nounInfo("drooping"), # [droop.xml]
 'drop-01':nounInfo("drop"), # [drop.xml]
 'drop-05':nounInfo("drop"), # [drop.xml]
 'drop-06':nounInfo("drop"), # [drop.xml]
 'dropping':nounInfo("dropping"), # [drop.xml]
 'drying':nounInfo("drying"), # [dry.xml]
 'dueling':nounInfo("dueling"), # [duel.xml]
 'duplication':nounInfo("duplication"), # [duplicate.xml]
 'dusting':nounInfo("dusting"), # [dust.xml]
 'dysregulation':nounInfo("dysregulation"), # [dysregulate.xml]
 'easing':nounInfo("easing"), # [ease.xml]
 'eating':nounInfo("eating"), # [eat.xml]
 'eavesdropping':nounInfo("eavesdropping"), # [eavesdrop.xml]
 'echo-01':nounInfo("echo"), # [echo.xml]
 'echo-02':nounInfo("echo"), # [echo.xml]
 'edification':nounInfo("edification"), # [edify.xml]
 'editing':nounInfo("editing"), # [edit.xml]
 'educating':nounInfo("educating"), # [educate.xml]
 'education':nounInfo("education"), # [educate.xml]
 'effect':nounInfo("effect"), # [affect.xml]
 'effect-03':nounInfo("effect"), # [affect.xml]
 'effectiveness':nounInfo("effectiveness"), # [affect.xml]
 'efficiency':nounInfo("efficiency"), # [efficient.xml]
 'effort-01':nounInfo("effort"), # [effort.xml]
 'effusion':nounInfo("effusion"), # [effuse.xml]
 'ejaculation':nounInfo("ejaculation"), # [ejaculate.xml]
 'ejection':nounInfo("ejection"), # [eject.xml]
 'elaboration':nounInfo("elaboration"), # [elaborate.xml]
 'elect-02':nounInfo("elect"), # [elect.xml]
 'election':nounInfo("election"), # [elect.xml]
 'electrocoagulation':nounInfo("electrocoagulation"), # [coagulate.xml]
 'electrocution':nounInfo("electrocution"), # [electrocute.xml]
 'electrodesiccation':nounInfo("electrodesiccation"), # [desiccate.xml]
 'elevation':nounInfo("elevation"), # [elevate.xml]
 'elimination':nounInfo("elimination"), # [eliminate.xml]
 'elution':nounInfo("elution"), # [elute.xml]
 'email-01':nounInfo("email"), # [email.xml]
 'emancipation':nounInfo("emancipation"), # [emancipate.xml]
 'embrace-01':nounInfo("embrace"), # [embrace.xml]
 'embrace-02':nounInfo("embrace"), # [embrace.xml]
 'emission':nounInfo("emission"), # [emit.xml]
 'emphasis':nounInfo("emphasis"), # [emphasize.xml]
 'employment':nounInfo("employment"), # [employ.xml]
 'emptying':nounInfo("emptying"), # [empty.xml]
 'emulation':nounInfo("emulation"), # [emulate.xml]
 'enactment':nounInfo("enactment"), # [enact.xml]
 'encounter-01':nounInfo("encounter"), # [encounter.xml]
 'encouragement':nounInfo("encouragement"), # [encourage.xml]
 'encryption':nounInfo("encryption"), # [encrypt.xml]
 'end-01':nounInfo("end"), # [end.xml]
 'endeavor-01':nounInfo("endeavor"), # [endeavor.xml]
 'endorsement':nounInfo("endorsement"), # [endorse.xml]
 'endowment':nounInfo("endowment"), # [endow.xml]
 'engagement':nounInfo("engagement"), # [engage.xml]
 'engagement-02':nounInfo("engagement"), # [engage.xml]
 'engineering':nounInfo("engineering"), # [engineer.xml]
 'enrollment':nounInfo("enrollment"), # [enroll.xml]
 'entering':nounInfo("entering"), # [enter.xml]
 'entrance':nounInfo("entrance"), # [enter.xml]
 'entry':nounInfo("entry"), # [enter.xml]
 'enumeration':nounInfo("enumeration"), # [enumerate.xml]
 'equality':nounInfo("equality"), # [equal.xml]
 'equation':nounInfo("equation"), # [equate.xml]
 'eradication':nounInfo("eradication"), # [eradicate.xml]
 'erection':nounInfo("erection"), # [erect.xml]
 'erosion':nounInfo("erosion"), # [erode.xml]
 'error':nounInfo("error"), # [err.xml]
 'eruption':nounInfo("eruption"), # [erupt.xml]
 'escalation':nounInfo("escalation"), # [escalate.xml]
 'escape-01':nounInfo("escape"), # [escape.xml]
 'establishment':nounInfo("establishment"), # [establish.xml]
 'estimate-01':nounInfo("estimate"), # [estimate.xml]
 'estimation':nounInfo("estimation"), # [estimate.xml]
 'evacuation':nounInfo("evacuation"), # [evacuate.xml]
 'evaluation':nounInfo("evaluation"), # [evaluate.xml]
 'evangelization':nounInfo("evangelization"), # [evangelize.xml]
 'evaporation':nounInfo("evaporation"), # [evaporate.xml]
 'evasion':nounInfo("evasion"), # [evade.xml]
 'evolution':nounInfo("evolution"), # [evolve.xml]
 'exacerbation':nounInfo("exacerbation"), # [exacerbate.xml]
 'exaction':nounInfo("exaction"), # [exact.xml]
 'exaggeration':nounInfo("exaggeration"), # [exaggerate.xml]
 'examination':nounInfo("examination"), # [examine.xml]
 'examination-02':nounInfo("examination"), # [examine.xml]
 'excavation':nounInfo("excavation"), # [excavate.xml]
 'exception':nounInfo("exception"), # [except.xml]
 'exchange-01':nounInfo("exchange"), # [exchange.xml]
 'excision':nounInfo("excision"), # [excise.xml]
 'excitement':nounInfo("excitement"), # [excite.xml]
 'exclusion':nounInfo("exclusion"), # [exclude.xml]
 'exclusive':nounInfo("exclusive"), # [exclude.xml]
 'excommunication':nounInfo("excommunication"), # [excommunicate.xml]
 'excoriation':nounInfo("excoriation"), # [excoriate.xml]
 'excuse-02':nounInfo("excuse"), # [excuse.xml]
 'execution':nounInfo("execution"), # [execute.xml]
 'exemption':nounInfo("exemption"), # [exempt.xml]
 'exercise-01':nounInfo("exercise"), # [exercise.xml]
 'exercise-02':nounInfo("exercise"), # [exercise.xml]
 'exertion':nounInfo("exertion"), # [exert.xml]
 'exhaustion':nounInfo("exhaustion"), # [exhaust.xml]
 'exhibition':nounInfo("exhibition"), # [exhibit.xml]
 'exile-01':nounInfo("exile"), # [exile.xml]
 'existing':nounInfo("existing"), # [exist.xml]
 'exit-01':nounInfo("exit"), # [exit.xml]
 'expansion':nounInfo("expansion"), # [expand.xml]
 'expectation':nounInfo("expectation"), # [expect.xml]
 'experience-01':nounInfo("experience"), # [experience.xml]
 'experiment-01':nounInfo("experiment"), # [experiment.xml]
 'expiration':nounInfo("expiration"), # [expire.xml]
 'explanation':nounInfo("explanation"), # [explain.xml]
 'exploitation':nounInfo("exploitation"), # [exploit.xml]
 'exploiting':nounInfo("exploiting"), # [exploit.xml]
 'exploration':nounInfo("exploration"), # [explore.xml]
 'explosion':nounInfo("explosion"), # [explode.xml]
 'exposure':nounInfo("exposure"), # [expose.xml]
 'expression':nounInfo("expression"), # [express.xml]
 'expulsion':nounInfo("expulsion"), # [expel.xml]
 'extension':nounInfo("extension"), # [extend.xml]
 'extermination':nounInfo("extermination"), # [exterminate.xml]
 'extortion':nounInfo("extortion"), # [extort.xml]
 'extracting':nounInfo("extracting"), # [extract.xml]
 'extraction':nounInfo("extraction"), # [extract.xml]
 'extraction-02':nounInfo("extraction"), # [extract.xml]
 'extradition':nounInfo("extradition"), # [extradite.xml]
 'extrusion':nounInfo("extrusion"), # [extrude.xml]
 'eye':nounInfo("eye"), # [eye.xml]
 'fabrication':nounInfo("fabrication"), # [fabricate.xml]
 'facilitation':nounInfo("facilitation"), # [facilitate.xml]
 'failing':nounInfo("failing"), # [fail.xml]
 'fainting':nounInfo("fainting"), # [faint.xml]
 'fall-01':nounInfo("fall"), # [fall.xml]
 'fall-05':nounInfo("fall"), # [fall.xml]
 'fall-07':nounInfo("fall"), # [fall.xml]
 'falling':nounInfo("falling"), # [fall.xml]
 'fame-01':nounInfo("fame"), # [fame.xml]
 'fancy-02':nounInfo("fancy"), # [fancy.xml]
 'farming':nounInfo("farming"), # [farm.xml]
 'farnesylation':nounInfo("farnesylation"), # [farnesylate.xml]
 'farting':nounInfo("farting"), # [fart.xml]
 'fascination':nounInfo("fascination"), # [fascinate.xml]
 'fasting':nounInfo("fasting"), # [fast.xml]
 'fault-01':nounInfo("fault"), # [fault.xml]
 'fault-02':nounInfo("fault"), # [fault.xml]
 'favor-01':nounInfo("favor"), # [favor.xml]
 'fax-01':nounInfo("fax"), # [fax.xml]
 'fear-01':nounInfo("fear"), # [fear.xml]
 'federation':nounInfo("federation"), # [federate.xml]
 'feeding':nounInfo("feeding"), # [feed.xml]
 'feeling':nounInfo("feeling"), # [feel.xml]
 'fencing':nounInfo("fencing"), # [fence.xml]
 'fermentation':nounInfo("fermentation"), # [ferment.xml]
 'feud-01':nounInfo("feud"), # [feud.xml]
 'feuding':nounInfo("feuding"), # [feud.xml]
 'fight-01':nounInfo("fight"), # [fight.xml]
 'file-01':nounInfo("file"), # [file.xml]
 'filling':nounInfo("filling"), # [fill.xml]
 'filming':nounInfo("filming"), # [film.xml]
 'filtration':nounInfo("filtration"), # [filter.xml]
 'finance-01':nounInfo("finance"), # [finance.xml]
 'financing':nounInfo("financing"), # [finance.xml]
 'find-01':nounInfo("find"), # [find.xml]
 'fine-01':nounInfo("fine"), # [fine.xml]
 'fine-tuning':nounInfo("fine-tuning"), # [finetune.xml]
 'finetuning':nounInfo("finetuning"), # [finetune.xml]
 'finger':nounInfo("finger"), # [point.xml]
 'finish-02':nounInfo("finish"), # [finish.xml]
 'finish-07':nounInfo("finish"), # [finish.xml]
 'fire':nounInfo("fire"), # [fire.xml]
 'fire-01':nounInfo("fire"), # [fire.xml]
 'fire-05':nounInfo("fire"), # [fire.xml]
 'firing':nounInfo("firing"), # [fire.xml]
 'fishing':nounInfo("fishing"), # [fish.xml]
 'fissuring':nounInfo("fissuring"), # [fissure.xml]
 'fit-04':nounInfo("fit"), # [fit.xml]
 'fit-06':nounInfo("fit"), # [fit.xml]
 'fitting':nounInfo("fitting"), # [fit.xml]
 'fix-02':nounInfo("fix"), # [fix.xml]
 'fix-03':nounInfo("fix"), # [fix.xml]
 'fixation':nounInfo("fixation"), # [fixate.xml]
 'flaking':nounInfo("flaking"), # [flake.xml]
 'flash-01':nounInfo("flash"), # [flash.xml]
 'flattening':nounInfo("flattening"), # [flatten.xml]
 'flaw-01':nounInfo("flaw"), # [flaw.xml]
 'fleeing':nounInfo("fleeing"), # [fly.xml]
 'flexion':nounInfo("flexion"), # [flex.xml]
 'flickering':nounInfo("flickering"), # [flicker.xml]
 'flight':nounInfo("flight"), # [fly.xml]
 'flood-01':nounInfo("flood"), # [flood.xml]
 'flossing':nounInfo("flossing"), # [floss.xml]
 'flow-01':nounInfo("flow"), # [flow.xml]
 'flow-02':nounInfo("flow"), # [flow.xml]
 'fluctuation':nounInfo("fluctuation"), # [fluctuate.xml]
 'fluoridation':nounInfo("fluoridation"), # [fluoridate.xml]
 'flushing':nounInfo("flushing"), # [flush.xml]
 'fluttering':nounInfo("fluttering"), # [flutter.xml]
 'flying':nounInfo("flying"), # [fly.xml]
 'foaming':nounInfo("foaming"), # [foam.xml]
 'following':nounInfo("following"), # [follow.xml]
 'force-04':nounInfo("force"), # [force.xml]
 'forecast-01':nounInfo("forecast"), # [forecast.xml]
 'forecasting':nounInfo("forecasting"), # [forecast.xml]
 'forgiving':nounInfo("forgiving"), # [forgive.xml]
 'fork-03':nounInfo("fork"), # [fork.xml]
 'formation':nounInfo("formation"), # [form.xml]
 'forming':nounInfo("forming"), # [form.xml]
 'formulation':nounInfo("formulation"), # [formulate.xml]
 'fostering':nounInfo("fostering"), # [foster.xml]
 'foundation':nounInfo("foundation"), # [found.xml]
 'founding':nounInfo("founding"), # [found.xml]
 'fragmentation':nounInfo("fragmentation"), # [fragment.xml]
 'freeze-01':nounInfo("freeze"), # [freeze.xml]
 'fright':nounInfo("fright"), # [frighten.xml]
 'fright-04':nounInfo("fright"), # [frighten.xml]
 'frost-01':nounInfo("frost"), # [frost.xml]
 'frustration':nounInfo("frustration"), # [frustrate.xml]
 'fuck-01':nounInfo("fuck"), # [fuck.xml]
 'fulfill-02':nounInfo("fulfill"), # [fulfill.xml]
 'fulfillment':nounInfo("fulfillment"), # [fulfill.xml]
 'fun-01':nounInfo("fun"), # [fun.xml]
 'function-01':nounInfo("function"), # [function.xml]
 'functioning':nounInfo("functioning"), # [function.xml]
 'funding':nounInfo("funding"), # [fund.xml]
 'fundraising':nounInfo("fundraising"), # [raise.xml]
 'fusion':nounInfo("fusion"), # [fuse.xml]
 'fussing':nounInfo("fussing"), # [fuss.xml]
 'gaiety':nounInfo("gaiety"), # [gay.xml]
 'gain-01':nounInfo("gain"), # [gain.xml]
 'gain-02':nounInfo("gain"), # [gain.xml]
 'gamble-01':nounInfo("gamble"), # [gamble.xml]
 'gambling':nounInfo("gambling"), # [gamble.xml]
 'gardening':nounInfo("gardening"), # [garden.xml]
 'gastrulation':nounInfo("gastrulation"), # [gastrulate.xml]
 'gathering':nounInfo("gathering"), # [gather.xml]
 'gauge-01':nounInfo("gauge"), # [gauge.xml]
 'gayness':nounInfo("gayness"), # [gay.xml]
 'generalization':nounInfo("generalization"), # [generalize.xml]
 'generation':nounInfo("generation"), # [generate.xml]
 'genocide-01':nounInfo("genocide"), # [genocide.xml]
 'geranylgeranylation':nounInfo("geranylgeranylation"), # [geranylgeranylate.xml]
 'germination':nounInfo("germination"), # [germinate.xml]
 'gestation':nounInfo("gestation"), # [gestate.xml]
 'gesture-01':nounInfo("gesture"), # [gesture.xml]
 'getting':nounInfo("getting"), # [get.xml]
 'giving':nounInfo("giving"), # [give.xml]
 'glare-01':nounInfo("glare"), # [glare.xml]
 'glimpse-01':nounInfo("glimpse"), # [glimpse.xml]
 'globalization':nounInfo("globalization"), # [globalize.xml]
 'gloss-02':nounInfo("gloss"), # [gloss.xml]
 'go-06':nounInfo("go"), # [go.xml]
 'go-31':nounInfo("go"), # [go.xml]
 'go-32':nounInfo("go"), # [go.xml]
 'going':nounInfo("going"), # [go.xml]
 'golf-01':nounInfo("golf"), # [golf.xml]
 'gossiping':nounInfo("gossiping"), # [gossip.xml]
 'governance':nounInfo("governance"), # [govern.xml]
 'grabbing':nounInfo("grabbing"), # [grab.xml]
 'grading':nounInfo("grading"), # [grade.xml]
 'graduation':nounInfo("graduation"), # [graduate.xml]
 'grafting':nounInfo("grafting"), # [graft.xml]
 'grant-01':nounInfo("grant"), # [grant.xml]
 'granulation':nounInfo("granulation"), # [granulate.xml]
 'grasp-01':nounInfo("grasp"), # [grasp.xml]
 'greeting':nounInfo("greeting"), # [greet.xml]
 'grievance':nounInfo("grievance"), # [complain.xml]
 'grinding':nounInfo("grinding"), # [grind.xml]
 'groan-01':nounInfo("groan"), # [groan.xml]
 'grooming':nounInfo("grooming"), # [groom.xml]
 'grooving':nounInfo("grooving"), # [groove.xml]
 'groundbreaking':nounInfo("groundbreaking"), # [break.xml]
 'grouping':nounInfo("grouping"), # [group.xml]
 'growing':nounInfo("growing"), # [grow.xml]
 'grumble-01':nounInfo("grumble"), # [grumble.xml]
 'guarantee-01':nounInfo("guarantee"), # [guarantee.xml]
 'guarding':nounInfo("guarding"), # [guard.xml]
 'guess-01':nounInfo("guess"), # [guess.xml]
 'guidance':nounInfo("guidance"), # [guide.xml]
 'gun':nounInfo("gun"), # [jump.xml]
 'gutting':nounInfo("gutting"), # [gut.xml]
 'hacking':nounInfo("hacking"), # [hack.xml]
 'hallucination':nounInfo("hallucination"), # [hallucinate.xml]
 'halt-01':nounInfo("halt"), # [halt.xml]
 'hammering':nounInfo("hammering"), # [hammer.xml]
 'hand':nounInfo("hand"), # [hand.xml]
 'hand-delivery':nounInfo("hand-delivery"), # [handdeliver.xml]
 'handdelivery':nounInfo("handdelivery"), # [handdeliver.xml]
 'handle-01':nounInfo("handle"), # [handle.xml]
 'handling':nounInfo("handling"), # [handle.xml]
 'handout':nounInfo("handout"), # [hand.xml]
 'handover':nounInfo("handover"), # [hand.xml]
 'hanging':nounInfo("hanging"), # [hang.xml]
 'hanging-07':nounInfo("hanging"), # [hang.xml]
 'hankering':nounInfo("hankering"), # [hanker.xml]
 'happening':nounInfo("happening"), # [happen.xml]
 'happiness':nounInfo("happiness"), # [happy.xml]
 'harassment':nounInfo("harassment"), # [harass.xml]
 'hardening':nounInfo("hardening"), # [harden.xml]
 'harm-01':nounInfo("harm"), # [harm.xml]
 'harming':nounInfo("harming"), # [harm.xml]
 'hassle-02':nounInfo("hassle"), # [hassle.xml]
 'headquarter':nounInfo("headquarter"), # [headquarter.xml]
 'headquarters':nounInfo("headquarters"), # [headquarter.xml]
 'healing':nounInfo("healing"), # [heal.xml]
 'hearing':nounInfo("hearing"), # [hear.xml]
 'hearing-02':nounInfo("hearing"), # [hear.xml]
 'heartbreak':nounInfo("heartbreak"), # [break.xml]
 'heating':nounInfo("heating"), # [heat.xml]
 'height':nounInfo("height"), # [heighten.xml]
 'heightening':nounInfo("heightening"), # [heighten.xml]
 'help-01':nounInfo("help"), # [help.xml]
 'hemorrhaging':nounInfo("hemorrhaging"), # [hemorrhage.xml]
 'hesitation':nounInfo("hesitation"), # [hesitate.xml]
 'heterodimerization':nounInfo("heterodimerization"), # [heterodimerize.xml]
 'hiding':nounInfo("hiding"), # [hide.xml]
 'highlighting':nounInfo("highlighting"), # [highlight.xml]
 'hiking':nounInfo("hiking"), # [hike.xml]
 'hint-01':nounInfo("hint"), # [hint.xml]
 'hire-01':nounInfo("hire"), # [hire.xml]
 'hiring':nounInfo("hiring"), # [hire.xml]
 'hissing':nounInfo("hissing"), # [hiss.xml]
 'hit-01':nounInfo("hit"), # [hit.xml]
 'hit-06':nounInfo("hit"), # [hit.xml]
 'hit-07':nounInfo("hit"), # [hit.xml]
 'hitting':nounInfo("hitting"), # [hit.xml]
 'hoax-01':nounInfo("hoax"), # [hoax.xml]
 'hoaxing':nounInfo("hoaxing"), # [con.xml]
 'hold-01':nounInfo("hold"), # [hold.xml]
 'holding':nounInfo("holding"), # [hold.xml]
 'holiday-01':nounInfo("holiday"), # [holiday.xml]
 'home-schooling':nounInfo("home-schooling"), # [homeschool.xml]
 'homer-01':nounInfo("homer"), # [homer.xml]
 'homeschooling':nounInfo("homeschooling"), # [homeschool.xml]
 'homodimerization':nounInfo("homodimerization"), # [homodimerize.xml]
 'honesty':nounInfo("honesty"), # [honest.xml]
 'honeymoon-01':nounInfo("honeymoon"), # [honeymoon.xml]
 'honor-01':nounInfo("honor"), # [honor.xml]
 'honor-02':nounInfo("honor"), # [honor.xml]
 'hope':nounInfo("hope"), # [hope.xml]
 'hopping':nounInfo("hopping"), # [hop.xml]
 'hospitalization':nounInfo("hospitalization"), # [hospitalize.xml]
 'hosting':nounInfo("hosting"), # [host.xml]
 'housing':nounInfo("housing"), # [house.xml]
 'humidification':nounInfo("humidification"), # [humidify.xml]
 'humiliation':nounInfo("humiliation"), # [humiliate.xml]
 'hunting':nounInfo("hunting"), # [hunt.xml]
 'hurry-01':nounInfo("hurry"), # [hurry.xml]
 'hurting':nounInfo("hurting"), # [hurt.xml]
 'hybridization':nounInfo("hybridization"), # [hybridize.xml]
 'hydration':nounInfo("hydration"), # [hydrate.xml]
 'hydrolysis':nounInfo("hydrolysis"), # [hydrolyze.xml]
 'hydrolyzation':nounInfo("hydrolyzation"), # [hydrolyze.xml]
 'hyperacetylation':nounInfo("hyperacetylation"), # [hyperacetylate.xml]
 'hypermethylation':nounInfo("hypermethylation"), # [hypermethylate.xml]
 'hyperphosphorylation':nounInfo("hyperphosphorylation"), # [hyperphosphorylate.xml]
 'hyperproliferation':nounInfo("hyperproliferation"), # [hyperproliferate.xml]
 'hyperventilating':nounInfo("hyperventilating"), # [hyperventilate.xml]
 'hyperventilation':nounInfo("hyperventilation"), # [hyperventilate.xml]
 'hypophosphorylation':nounInfo("hypophosphorylation"), # [hypophosphorylate.xml]
 'idealisation':nounInfo("idealisation"), # [idealize.xml]
 'idealization':nounInfo("idealization"), # [idealize.xml]
 'identification':nounInfo("identification"), # [identify.xml]
 'illness':nounInfo("illness"), # [ill.xml]
 'illumination':nounInfo("illumination"), # [illuminate.xml]
 'illustration':nounInfo("illustration"), # [illustrate.xml]
 'imagination':nounInfo("imagination"), # [imagine.xml]
 'imaging':nounInfo("imaging"), # [image.xml]
 'imitation':nounInfo("imitation"), # [imitate.xml]
 'immersion':nounInfo("immersion"), # [immerse.xml]
 'immigration':nounInfo("immigration"), # [immigrate.xml]
 'immobilization':nounInfo("immobilization"), # [immobilize.xml]
 'immortalization':nounInfo("immortalization"), # [immortalize.xml]
 'immortalizing':nounInfo("immortalizing"), # [immortalize.xml]
 'immunization':nounInfo("immunization"), # [immunize.xml]
 'immunoblot-01':nounInfo("immunoblot"), # [immunoblot.xml]
 'immunodetection':nounInfo("immunodetection"), # [immunodetect.xml]
 'immunofluorescence':nounInfo("immunofluorescence"), # [immunofluoresce.xml]
 'immunoprecipitation':nounInfo("immunoprecipitation"), # [immunoprecipitate.xml]
 'immunoreaction':nounInfo("immunoreaction"), # [immunoreact.xml]
 'immunoreactivity':nounInfo("immunoreactivity"), # [immunoreact.xml]
 'immunostaining':nounInfo("immunostaining"), # [immunostain.xml]
 'impact-01':nounInfo("impact"), # [impact.xml]
 'impact-02':nounInfo("impact"), # [impact.xml]
 'impaction':nounInfo("impaction"), # [impact.xml]
 'impediment':nounInfo("impediment"), # [impede.xml]
 'implantation':nounInfo("implantation"), # [implant.xml]
 'implementation':nounInfo("implementation"), # [implement.xml]
 'implication':nounInfo("implication"), # [implicate.xml]
 'implosion':nounInfo("implosion"), # [implode.xml]
 'import-01':nounInfo("import"), # [import.xml]
 'importance':nounInfo("importance"), # [important.xml]
 'imposition':nounInfo("imposition"), # [impose.xml]
 'impression-03':nounInfo("impression"), # [impress.xml]
 'improvement':nounInfo("improvement"), # [improve.xml]
 'inauguration':nounInfo("inauguration"), # [inaugurate.xml]
 'incarceration':nounInfo("incarceration"), # [incarcerate.xml]
 'incision':nounInfo("incision"), # [incise.xml]
 'incitement':nounInfo("incitement"), # [incite.xml]
 'inclination':nounInfo("inclination"), # [incline.xml]
 'inclusion':nounInfo("inclusion"), # [include.xml]
 'incorporation':nounInfo("incorporation"), # [incorporate.xml]
 'increase-01':nounInfo("increase"), # [increase.xml]
 'incrimination':nounInfo("incrimination"), # [incriminate.xml]
 'incubation':nounInfo("incubation"), # [incubate.xml]
 'incumbency-01':nounInfo("incumbency"), # [incumbency.xml]
 'incumbency-02':nounInfo("incumbency"), # [incumbency.xml]
 'incumbency-03':nounInfo("incumbency"), # [incumbency.xml]
 'indemnity':nounInfo("indemnity"), # [indemnify.xml]
 'indication':nounInfo("indication"), # [indicate.xml]
 'indictment':nounInfo("indictment"), # [indict.xml]
 'individualization':nounInfo("individualization"), # [individualistic.xml]
 'indoctrination':nounInfo("indoctrination"), # [indoctrinate.xml]
 'induction':nounInfo("induction"), # [induce.xml]
 'induration':nounInfo("induration"), # [indurate.xml]
 'industrialization':nounInfo("industrialization"), # [industrialize.xml]
 'ineptitude':nounInfo("ineptitude"), # [apt.xml]
 'ineptness':nounInfo("ineptness"), # [apt.xml]
 'infection':nounInfo("infection"), # [infect.xml]
 'inference':nounInfo("inference"), # [infer.xml]
 'infestation':nounInfo("infestation"), # [infest.xml]
 'infighting':nounInfo("infighting"), # [fight.xml]
 'infiltration':nounInfo("infiltration"), # [infiltrate.xml]
 'inflammation':nounInfo("inflammation"), # [inflame.xml]
 'inflation':nounInfo("inflation"), # [inflate.xml]
 'inflection':nounInfo("inflection"), # [inflect.xml]
 'inflexion':nounInfo("inflexion"), # [inflect.xml]
 'influence-01':nounInfo("influence"), # [influence.xml]
 'infringement':nounInfo("infringement"), # [infringe.xml]
 'infusion':nounInfo("infusion"), # [infuse.xml]
 'ingestion':nounInfo("ingestion"), # [ingest.xml]
 'inhalation':nounInfo("inhalation"), # [inhale.xml]
 'inheritance':nounInfo("inheritance"), # [inherit.xml]
 'inhibition':nounInfo("inhibition"), # [inhibit.xml]
 'initiation':nounInfo("initiation"), # [initiate.xml]
 'injection':nounInfo("injection"), # [inject.xml]
 'injury':nounInfo("injury"), # [injure.xml]
 'innovation':nounInfo("innovation"), # [innovate.xml]
 'inoculation':nounInfo("inoculation"), # [inoculate.xml]
 'inquiry':nounInfo("inquiry"), # [inquire.xml]
 'inscribe-02':nounInfo("inscribe"), # [inscribe.xml]
 'inscription':nounInfo("inscription"), # [inscribe.xml]
 'insertion':nounInfo("insertion"), # [insert.xml]
 'insistence':nounInfo("insistence"), # [insist.xml]
 'inspection':nounInfo("inspection"), # [inspect.xml]
 'inspiration':nounInfo("inspiration"), # [inspire.xml]
 'installation':nounInfo("installation"), # [install.xml]
 'installment':nounInfo("installment"), # [install.xml]
 'institution':nounInfo("institution"), # [institute.xml]
 'instruction':nounInfo("instruction"), # [instruct.xml]
 'insulation':nounInfo("insulation"), # [insulate.xml]
 'insult-01':nounInfo("insult"), # [insult.xml]
 'integration':nounInfo("integration"), # [integrate.xml]
 'intelligence':nounInfo("intelligence"), # [intelligent.xml]
 'intensification':nounInfo("intensification"), # [intensify.xml]
 'intent':nounInfo("intent"), # [intend.xml]
 'intention':nounInfo("intention"), # [intend.xml]
 'interaction':nounInfo("interaction"), # [interact.xml]
 'interception':nounInfo("interception"), # [intercept.xml]
 'interdict-01':nounInfo("interdict"), # [interdict.xml]
 'interest-01':nounInfo("interest"), # [interest.xml]
 'internment':nounInfo("internment"), # [intern.xml]
 'internship':nounInfo("internship"), # [intern.xml]
 'interposition':nounInfo("interposition"), # [interpose.xml]
 'interpretation':nounInfo("interpretation"), # [interpret.xml]
 'interpreting':nounInfo("interpreting"), # [interpret.xml]
 'interrogation':nounInfo("interrogation"), # [interrogate.xml]
 'interruption':nounInfo("interruption"), # [interrupt.xml]
 'intersection':nounInfo("intersection"), # [intersect.xml]
 'interspersing':nounInfo("interspersing"), # [intersperse.xml]
 'intervention':nounInfo("intervention"), # [intervene.xml]
 'interview-01':nounInfo("interview"), # [interview.xml]
 'intimidation':nounInfo("intimidation"), # [intimidate.xml]
 'intonation':nounInfo("intonation"), # [intone.xml]
 'intoxication':nounInfo("intoxication"), # [intoxicate.xml]
 'introduction':nounInfo("introduction"), # [introduce.xml]
 'intrusion':nounInfo("intrusion"), # [intrude.xml]
 'invagination':nounInfo("invagination"), # [invaginate.xml]
 'invasion':nounInfo("invasion"), # [invade.xml]
 'invention':nounInfo("invention"), # [invent.xml]
 'inversion':nounInfo("inversion"), # [invert.xml]
 'investigation':nounInfo("investigation"), # [investigate.xml]
 'investment':nounInfo("investment"), # [invest.xml]
 'invitation':nounInfo("invitation"), # [invite.xml]
 'involvement':nounInfo("involvement"), # [involve.xml]
 'irradiation':nounInfo("irradiation"), # [irradiate.xml]
 'irrigation':nounInfo("irrigation"), # [irrigate.xml]
 'irritation':nounInfo("irritation"), # [irritate.xml]
 'isolation':nounInfo("isolation"), # [isolate.xml]
 'isomerization':nounInfo("isomerization"), # [isomerize.xml]
 'issue-01':nounInfo("issue"), # [issue.xml]
 'issue-02':nounInfo("issue"), # [issue.xml]
 'itching':nounInfo("itching"), # [itch.xml]
 'jab-01':nounInfo("jab"), # [jab.xml]
 'jab-02':nounInfo("jab"), # [jab.xml]
 'jealousy':nounInfo("jealousy"), # [jealous.xml]
 'jeering':nounInfo("jeering"), # [jeer.xml]
 'jogging':nounInfo("jogging"), # [jog.xml]
 'joining':nounInfo("joining"), # [join.xml]
 'joke-01':nounInfo("joke"), # [joke.xml]
 'jolt-01':nounInfo("jolt"), # [jolt.xml]
 'journey-01':nounInfo("journey"), # [journey.xml]
 'judgement':nounInfo("judgement"), # [judge.xml]
 'judgment':nounInfo("judgment"), # [judge.xml]
 'jump-01':nounInfo("jump"), # [jump.xml]
 'jump-02':nounInfo("jump"), # [jump.xml]
 'jump-03':nounInfo("jump"), # [jump.xml]
 'jumping':nounInfo("jumping"), # [jump.xml]
 'jumpstart-01':nounInfo("jumpstart"), # [jumpstart.xml]
 'justification':nounInfo("justification"), # [justify.xml]
 'juxtaposition':nounInfo("juxtaposition"), # [juxtapose.xml]
 'kayaking':nounInfo("kayaking"), # [kayak.xml]
 'keeping':nounInfo("keeping"), # [keep.xml]
 'kick-01':nounInfo("kick"), # [kick.xml]
 'kidding':nounInfo("kidding"), # [kid.xml]
 'kill-01':nounInfo("kill"), # [kill.xml]
 'killing':nounInfo("killing"), # [kill.xml]
 'kind':nounInfo("kind"), # [kind.xml]
 'kiss-01':nounInfo("kiss"), # [kiss.xml]
 'kissing':nounInfo("kissing"), # [kiss.xml]
 'kneading':nounInfo("kneading"), # [knead.xml]
 'knifing':nounInfo("knifing"), # [knife.xml]
 'knitting':nounInfo("knitting"), # [knit.xml]
 'knock-01':nounInfo("knock"), # [knock.xml]
 'knockin':nounInfo("knockin"), # [knock.xml]
 'knockout':nounInfo("knockout"), # [knock.xml]
 'knowledge':nounInfo("knowledge"), # [know.xml]
 'labeling':nounInfo("labeling"), # [label.xml]
 'labor-01':nounInfo("labor"), # [labor.xml]
 'labor-02':nounInfo("labor"), # [labor.xml]
 'laceration':nounInfo("laceration"), # [lacerate.xml]
 'lack-01':nounInfo("lack"), # [lack.xml]
 'lactation':nounInfo("lactation"), # [lactate.xml]
 'lag-01':nounInfo("lag"), # [lag.xml]
 'landing':nounInfo("landing"), # [land.xml]
 'landscaping':nounInfo("landscaping"), # [landscape.xml]
 'laugh-01':nounInfo("laugh"), # [laugh.xml]
 'laughing':nounInfo("laughing"), # [laugh.xml]
 'launch-01':nounInfo("launch"), # [launch.xml]
 'laundering':nounInfo("laundering"), # [launder.xml]
 'laying':nounInfo("laying"), # [lay.xml]
 'layoff':nounInfo("layoff"), # [lay.xml]
 'lead-01':nounInfo("lead"), # [lead.xml]
 'lead-02':nounInfo("lead"), # [lead.xml]
 'lead-03':nounInfo("lead"), # [lead.xml]
 'leak-01':nounInfo("leak"), # [leak.xml]
 'leap-01':nounInfo("leap"), # [leap.xml]
 'leap-02':nounInfo("leap"), # [leap.xml]
 'leap-03':nounInfo("leap"), # [leap.xml]
 'leaping':nounInfo("leaping"), # [leap.xml]
 'learning':nounInfo("learning"), # [learn.xml]
 'leasing':nounInfo("leasing"), # [lease.xml]
 'leave-09':nounInfo("leave"), # [leave.xml]
 'leave-10':nounInfo("leave"), # [leave.xml]
 'leave-11':nounInfo("leave"), # [leave.xml]
 'leave-behind':nounInfo("leave-behind"), # [leave.xml]
 'legality':nounInfo("legality"), # [legalize.xml]
 'legalization':nounInfo("legalization"), # [legalize.xml]
 'legalizing':nounInfo("legalizing"), # [legalize.xml]
 'legislation':nounInfo("legislation"), # [legislate.xml]
 'lending':nounInfo("lending"), # [lend.xml]
 'length':nounInfo("length"), # [lengthen.xml]
 'leverage-01':nounInfo("leverage"), # [leverage.xml]
 'levitation':nounInfo("levitation"), # [levitate.xml]
 'levy-01':nounInfo("levy"), # [levy.xml]
 'libel-01':nounInfo("libel"), # [libel.xml]
 'liberalization':nounInfo("liberalization"), # [liberalize.xml]
 'liberation':nounInfo("liberation"), # [liberate.xml]
 'license-01':nounInfo("license"), # [license.xml]
 'licensing':nounInfo("licensing"), # [license.xml]
 'lichenification':nounInfo("lichenification"), # [lichenify.xml]
 'lie-08':nounInfo("lie"), # [lay.xml]
 'lifting':nounInfo("lifting"), # [lift.xml]
 'ligation':nounInfo("ligation"), # [ligate.xml]
 'light':nounInfo("light"), # [lighten.xml]
 'lightening':nounInfo("lightening"), # [lighten.xml]
 'lighting':nounInfo("lighting"), # [lighten.xml]
 'liking':nounInfo("liking"), # [liken.xml]
 'limit-01':nounInfo("limit"), # [limit.xml]
 'line':nounInfo("line"), # [line.xml]
 'line-drawing':nounInfo("line-drawing"), # [linedraw.xml]
 'linedrawing':nounInfo("linedrawing"), # [linedraw.xml]
 'lining':nounInfo("lining"), # [line.xml]
 'liquidation':nounInfo("liquidation"), # [liquidate.xml]
 'listening':nounInfo("listening"), # [listen.xml]
 'listing':nounInfo("listing"), # [list.xml]
 'litigation':nounInfo("litigation"), # [litigate.xml]
 'living':nounInfo("living"), # [live.xml]
 'loading':nounInfo("loading"), # [load.xml]
 'loan-01':nounInfo("loan"), # [loan.xml]
 'localization':nounInfo("localization"), # [localize.xml]
 'locking':nounInfo("locking"), # [lock.xml]
 'lodging':nounInfo("lodging"), # [lodge.xml]
 'look-01':nounInfo("look"), # [look.xml]
 'look-02':nounInfo("look"), # [look.xml]
 'loosening':nounInfo("loosening"), # [loosen.xml]
 'looting':nounInfo("looting"), # [loot.xml]
 'losing':nounInfo("losing"), # [lose.xml]
 'loss':nounInfo("loss"), # [lose.xml]
 'love-01':nounInfo("love"), # [love.xml]
 'lowering':nounInfo("lowering"), # [low.xml]
 'lynching':nounInfo("lynching"), # [lynch.xml]
 'lysis':nounInfo("lysis"), # [lyse.xml]
 'maceration':nounInfo("maceration"), # [macerate.xml]
 'magnifying':nounInfo("magnifying"), # [magnify.xml]
 'maintenance':nounInfo("maintenance"), # [maintain.xml]
 'make-01':nounInfo("make"), # [make.xml]
 'making':nounInfo("making"), # [make.xml]
 'making-03':nounInfo("making"), # [make.xml]
 'malfunction-01':nounInfo("malfunction"), # [malfunction.xml]
 'malingering':nounInfo("malingering"), # [malinger.xml]
 'malnourishment':nounInfo("malnourishment"), # [malnourished.xml]
 'malnutrition':nounInfo("malnutrition"), # [malnourished.xml]
 'management':nounInfo("management"), # [manage.xml]
 'maneuver-01':nounInfo("maneuver"), # [maneuver.xml]
 'manifestation':nounInfo("manifestation"), # [manifest.xml]
 'manipulation':nounInfo("manipulation"), # [manipulate.xml]
 'manning':nounInfo("manning"), # [man.xml]
 'manufacturing':nounInfo("manufacturing"), # [manufacture.xml]
 'mapping':nounInfo("mapping"), # [map.xml]
 'march-01':nounInfo("march"), # [march.xml]
 'marginalization':nounInfo("marginalization"), # [marginalize.xml]
 'mark-02':nounInfo("mark"), # [mark.xml]
 'marketing':nounInfo("marketing"), # [market.xml]
 'marking':nounInfo("marking"), # [mark.xml]
 'marriage':nounInfo("marriage"), # [marry.xml]
 'mass-production':nounInfo("mass-production"), # [massproduce.xml]
 'massacre-01':nounInfo("massacre"), # [massacre.xml]
 'massage-01':nounInfo("massage"), # [massage.xml]
 'massproduction':nounInfo("massproduction"), # [massproduce.xml]
 'match-01':nounInfo("match"), # [match.xml]
 'match-03':nounInfo("match"), # [match.xml]
 'matching':nounInfo("matching"), # [match.xml]
 'matter-02':nounInfo("matter"), # [matter.xml]
 'maturation':nounInfo("maturation"), # [mature.xml]
 'maturity':nounInfo("maturity"), # [mature.xml]
 'maximization':nounInfo("maximization"), # [maximize.xml]
 'meaning':nounInfo("meaning"), # [mean.xml]
 'measure-01':nounInfo("measure"), # [measure.xml]
 'measure-02':nounInfo("measure"), # [measure.xml]
 'measurement':nounInfo("measurement"), # [measure.xml]
 'measuring':nounInfo("measuring"), # [measure.xml]
 'meddling':nounInfo("meddling"), # [meddle.xml]
 'mediation':nounInfo("mediation"), # [mediate.xml]
 'medication':nounInfo("medication"), # [medicate.xml]
 'meditation':nounInfo("meditation"), # [meditate.xml]
 'meeting':nounInfo("meeting"), # [meet.xml]
 'memorization':nounInfo("memorization"), # [memorize.xml]
 'mention-01':nounInfo("mention"), # [mention.xml]
 'meowing':nounInfo("meowing"), # [meow.xml]
 'merger':nounInfo("merger"), # [merge.xml]
 'merging':nounInfo("merging"), # [merge.xml]
 'message-01':nounInfo("message"), # [message.xml]
 'metabolism':nounInfo("metabolism"), # [metabolize.xml]
 'methylation':nounInfo("methylation"), # [methylate.xml]
 'microinjection':nounInfo("microinjection"), # [microinject.xml]
 'migration':nounInfo("migration"), # [migrate.xml]
 'militarization':nounInfo("militarization"), # [militarize.xml]
 'mind':nounInfo("mind"), # [mind.xml]
 'mind-05':nounInfo("mind"), # [mind.xml]
 'minding':nounInfo("minding"), # [mind.xml]
 'mining':nounInfo("mining"), # [mine.xml]
 'misappropriation':nounInfo("misappropriation"), # [misappropriate.xml]
 'miscalculation':nounInfo("miscalculation"), # [miscalculate.xml]
 'misconduct-01':nounInfo("misconduct"), # [misconduct.xml]
 'misinformation':nounInfo("misinformation"), # [misinform.xml]
 'misinterpretation':nounInfo("misinterpretation"), # [misinterpret.xml]
 'misjudgment':nounInfo("misjudgment"), # [misjudge.xml]
 'misperception':nounInfo("misperception"), # [misperceive.xml]
 'misrepresentation':nounInfo("misrepresentation"), # [misrepresent.xml]
 'mission-01':nounInfo("mission"), # [mission.xml]
 'mistake-02':nounInfo("mistake"), # [mistake.xml]
 'mistrust-01':nounInfo("mistrust"), # [mistrust.xml]
 'misunderstanding':nounInfo("misunderstanding"), # [misunderstand.xml]
 'mixing':nounInfo("mixing"), # [mix.xml]
 'moaning':nounInfo("moaning"), # [moan.xml]
 'mobilization':nounInfo("mobilization"), # [mobilize.xml]
 'model-01':nounInfo("model"), # [model.xml]
 'moderation':nounInfo("moderation"), # [moderate.xml]
 'modernization':nounInfo("modernization"), # [modernize.xml]
 'modification':nounInfo("modification"), # [modify.xml]
 'moisturization':nounInfo("moisturization"), # [moisturize.xml]
 'monitoring':nounInfo("monitoring"), # [monitor.xml]
 'moocher':nounInfo("moocher"), # [mooch.xml]
 'mooching':nounInfo("mooching"), # [mooch.xml]
 'mopping':nounInfo("mopping"), # [mop.xml]
 'moralizing':nounInfo("moralizing"), # [moralize.xml]
 'motivation':nounInfo("motivation"), # [motivate.xml]
 'mourning':nounInfo("mourning"), # [mourn.xml]
 'move-01':nounInfo("move"), # [move.xml]
 'move-02':nounInfo("move"), # [move.xml]
 'movement-07':nounInfo("movement"), # [move.xml]
 'moving':nounInfo("moving"), # [move.xml]
 'muffling':nounInfo("muffling"), # [muffle.xml]
 'mugging':nounInfo("mugging"), # [mug.xml]
 'multi-tasking':nounInfo("multi-tasking"), # [multitask.xml]
 'multitasking':nounInfo("multitasking"), # [multitask.xml]
 'murder-01':nounInfo("murder"), # [murder.xml]
 'muscling':nounInfo("muscling"), # [muscle.xml]
 'mutation':nounInfo("mutation"), # [mutate.xml]
 'muttering':nounInfo("muttering"), # [mutter.xml]
 'myristoylation':nounInfo("myristoylation"), # [myristoylate.xml]
 'name-dropping':nounInfo("name-dropping"), # [namedrop.xml]
 'namedropping':nounInfo("namedropping"), # [namedrop.xml]
 'naming':nounInfo("naming"), # [name.xml]
 'nap-01':nounInfo("nap"), # [nap.xml]
 'narrowing':nounInfo("narrowing"), # [narrow.xml]
 'nationalization':nounInfo("nationalization"), # [nationalize.xml]
 'navigation':nounInfo("navigation"), # [navigate.xml]
 'necrotizing':nounInfo("necrotizing"), # [necrotize.xml]
 'need-01':nounInfo("need"), # [need.xml]
 'needling':nounInfo("needling"), # [needle.xml]
 'negation':nounInfo("negation"), # [negate.xml]
 'negative-02':nounInfo("negative"), # [negate.xml]
 'negativity':nounInfo("negativity"), # [negate.xml]
 'neglect-01':nounInfo("neglect"), # [neglect.xml]
 'negotiation':nounInfo("negotiation"), # [negotiate.xml]
 'networking':nounInfo("networking"), # [network.xml]
 'nitrosylation':nounInfo("nitrosylation"), # [nitrosylate.xml]
 'nomination':nounInfo("nomination"), # [nominate.xml]
 'normalization':nounInfo("normalization"), # [normalize.xml]
 'note-02':nounInfo("note"), # [note.xml]
 'notice-01':nounInfo("notice"), # [notice.xml]
 'notice-03':nounInfo("notice"), # [notice.xml]
 'notification':nounInfo("notification"), # [notify.xml]
 'notifying':nounInfo("notifying"), # [notify.xml]
 'nursing':nounInfo("nursing"), # [nurse.xml]
 'nurture-01':nounInfo("nurture"), # [nurture.xml]
 'obedience':nounInfo("obedience"), # [obey.xml]
 'obfuscation':nounInfo("obfuscation"), # [obfuscate.xml]
 'objection':nounInfo("objection"), # [object.xml]
 'obligation':nounInfo("obligation"), # [obligate.xml]
 'obliteration':nounInfo("obliteration"), # [obliterate.xml]
 'observation':nounInfo("observation"), # [observe.xml]
 'obsession':nounInfo("obsession"), # [obsess.xml]
 'obstructing':nounInfo("obstructing"), # [obstruct.xml]
 'obstruction':nounInfo("obstruction"), # [obstruct.xml]
 'occasion-02':nounInfo("occasion"), # [occasion.xml]
 'occlusion':nounInfo("occlusion"), # [occlude.xml]
 'occupation':nounInfo("occupation"), # [occupy.xml]
 'offense':nounInfo("offense"), # [offend.xml]
 'offense-02':nounInfo("offense"), # [offend.xml]
 'offer-01':nounInfo("offer"), # [offer.xml]
 'offering':nounInfo("offering"), # [offer.xml]
 'offset-01':nounInfo("offset"), # [offset.xml]
 'omission':nounInfo("omission"), # [omit.xml]
 'oozing':nounInfo("oozing"), # [ooze.xml]
 'opening':nounInfo("opening"), # [open.xml]
 'operating':nounInfo("operating"), # [operate.xml]
 'operation':nounInfo("operation"), # [operate.xml]
 'opinion':nounInfo("opinion"), # [opine.xml]
 'opposition':nounInfo("opposition"), # [oppose.xml]
 'oppression':nounInfo("oppression"), # [oppress.xml]
 'optimization':nounInfo("optimization"), # [optimize.xml]
 'order-01':nounInfo("order"), # [order.xml]
 'order-02':nounInfo("order"), # [order.xml]
 'order-03':nounInfo("order"), # [order.xml]
 'ordinance':nounInfo("ordinance"), # [ordain.xml]
 'organization':nounInfo("organization"), # [organize.xml]
 'orientation':nounInfo("orientation"), # [orient.xml]
 'origin':nounInfo("origin"), # [originate.xml]
 'ossification':nounInfo("ossification"), # [ossify.xml]
 'outbreak':nounInfo("outbreak"), # [break.xml]
 'outbreak-29':nounInfo("outbreak"), # [break.xml]
 'outfitting':nounInfo("outfitting"), # [outfit.xml]
 'outing-07':nounInfo("outing"), # [out.xml]
 'output':nounInfo("output"), # [put.xml]
 'outrage-01':nounInfo("outrage"), # [outrage.xml]
 'outsourcing':nounInfo("outsourcing"), # [outsource.xml]
 'ovation-01':nounInfo("ovation"), # [ovation.xml]
 'overdosing':nounInfo("overdosing"), # [overdose.xml]
 'overeating':nounInfo("overeating"), # [overeat.xml]
 'overexpression':nounInfo("overexpression"), # [overexpress.xml]
 'overlap-01':nounInfo("overlap"), # [overlap.xml]
 'overpayment':nounInfo("overpayment"), # [overpay.xml]
 'overreaction':nounInfo("overreaction"), # [overreact.xml]
 'overriding':nounInfo("overriding"), # [override.xml]
 'oversight':nounInfo("oversight"), # [oversee.xml]
 'oversight-02':nounInfo("oversight"), # [oversee.xml]
 'ownership':nounInfo("ownership"), # [own.xml]
 'oxidation':nounInfo("oxidation"), # [oxidize.xml]
 'oxygenation':nounInfo("oxygenation"), # [oxygenate.xml]
 'pace-01':nounInfo("pace"), # [pace.xml]
 'pace-02':nounInfo("pace"), # [pace.xml]
 'pacing-03':nounInfo("pacing"), # [pace.xml]
 'packaging':nounInfo("packaging"), # [package.xml]
 'packing':nounInfo("packing"), # [pack.xml]
 'painting':nounInfo("painting"), # [paint.xml]
 'pairing':nounInfo("pairing"), # [pair.xml]
 'palmitoylation':nounInfo("palmitoylation"), # [palmitoylate.xml]
 'palpitation':nounInfo("palpitation"), # [palpitate.xml]
 'pandering':nounInfo("pandering"), # [pander.xml]
 'panic-01':nounInfo("panic"), # [panic.xml]
 'pant-01':nounInfo("pant"), # [pant.xml]
 'parade-01':nounInfo("parade"), # [parade.xml]
 'parade-02':nounInfo("parade"), # [parade.xml]
 'pardon-01':nounInfo("pardon"), # [pardon.xml]
 'pardon-02':nounInfo("pardon"), # [pardon.xml]
 'paring':nounInfo("paring"), # [pare.xml]
 'parking':nounInfo("parking"), # [park.xml]
 'parole-01':nounInfo("parole"), # [parole.xml]
 'participation':nounInfo("participation"), # [participate.xml]
 'partition-01':nounInfo("partition"), # [partition.xml]
 'party-01':nounInfo("party"), # [party.xml]
 'pass-05':nounInfo("pass"), # [pass.xml]
 'pass-21':nounInfo("pass"), # [pass.xml]
 'pass-22':nounInfo("pass"), # [pass.xml]
 'passage':nounInfo("passage"), # [pass.xml]
 'passing':nounInfo("passing"), # [pass.xml]
 'patent-01':nounInfo("patent"), # [patent.xml]
 'patrol-01':nounInfo("patrol"), # [patrol.xml]
 'patronage':nounInfo("patronage"), # [patronize.xml]
 'pawn-01':nounInfo("pawn"), # [pawn.xml]
 'payment':nounInfo("payment"), # [pay.xml]
 'payoff':nounInfo("payoff"), # [pay.xml]
 'penetration':nounInfo("penetration"), # [penetrate.xml]
 'perception':nounInfo("perception"), # [perceive.xml]
 'perfection':nounInfo("perfection"), # [perfect.xml]
 'perforation':nounInfo("perforation"), # [perforate.xml]
 'performance':nounInfo("performance"), # [perform.xml]
 'perjury':nounInfo("perjury"), # [perjure.xml]
 'permission':nounInfo("permission"), # [permit.xml]
 'persecution':nounInfo("persecution"), # [persecute.xml]
 'persuasion':nounInfo("persuasion"), # [persuade.xml]
 'perversion':nounInfo("perversion"), # [pervert.xml]
 'petition-01':nounInfo("petition"), # [petition.xml]
 'philandering':nounInfo("philandering"), # [philander.xml]
 'phosphorylation':nounInfo("phosphorylation"), # [phosphorylate.xml]
 'photo':nounInfo("photo"), # [photograph.xml]
 'picking':nounInfo("picking"), # [pick.xml]
 'piercing':nounInfo("piercing"), # [pierce.xml]
 'pioneering':nounInfo("pioneering"), # [pioneer.xml]
 'pitch-01':nounInfo("pitch"), # [pitch.xml]
 'pitch-04':nounInfo("pitch"), # [pitch.xml]
 'pitching':nounInfo("pitching"), # [pitch.xml]
 'pitting':nounInfo("pitting"), # [pit.xml]
 'pity-01':nounInfo("pity"), # [pity.xml]
 'pivoting':nounInfo("pivoting"), # [pivot.xml]
 'placement':nounInfo("placement"), # [place.xml]
 'plan-01':nounInfo("plan"), # [plan.xml]
 'planning':nounInfo("planning"), # [plan.xml]
 'planting':nounInfo("planting"), # [plant.xml]
 'plating':nounInfo("plating"), # [plate.xml]
 'play-01':nounInfo("play"), # [play.xml]
 'playing':nounInfo("playing"), # [play.xml]
 'plea':nounInfo("plea"), # [plead.xml]
 'plot-01':nounInfo("plot"), # [plot.xml]
 'plug-02':nounInfo("plug"), # [plug.xml]
 'plugging':nounInfo("plugging"), # [plug.xml]
 'plunge-01':nounInfo("plunge"), # [plunge.xml]
 'plunge-02':nounInfo("plunge"), # [plunge.xml]
 'pocket':nounInfo("pocket"), # [pocket.xml]
 'point':nounInfo("point"), # [point.xml]
 'point-03':nounInfo("point"), # [point.xml]
 'point-04':nounInfo("point"), # [point.xml]
 'point-05':nounInfo("point"), # [point.xml]
 'poisoning':nounInfo("poisoning"), # [poison.xml]
 'poking':nounInfo("poking"), # [poke.xml]
 'polarization':nounInfo("polarization"), # [polarize.xml]
 'policing':nounInfo("policing"), # [police.xml]
 'policy-01':nounInfo("policy"), # [policy.xml]
 'polish-01':nounInfo("polish"), # [polish.xml]
 'poll-01':nounInfo("poll"), # [poll.xml]
 'pollution':nounInfo("pollution"), # [pollute.xml]
 'polymerization':nounInfo("polymerization"), # [polymerize.xml]
 'polyploidisation':nounInfo("polyploidisation"), # [polyploidize.xml]
 'polyploidization':nounInfo("polyploidization"), # [polyploidize.xml]
 'pontificating':nounInfo("pontificating"), # [pontificate.xml]
 'poo-poo':nounInfo("poo-poo"), # [poohpooh.xml]
 'pooling':nounInfo("pooling"), # [pool.xml]
 'poopoo':nounInfo("poopoo"), # [poohpooh.xml]
 'popping':nounInfo("popping"), # [pop.xml]
 'population':nounInfo("population"), # [populate.xml]
 'portrayal':nounInfo("portrayal"), # [portray.xml]
 'posing':nounInfo("posing"), # [pose.xml]
 'position-02':nounInfo("position"), # [position.xml]
 'positioning':nounInfo("positioning"), # [position.xml]
 'possession':nounInfo("possession"), # [possess.xml]
 'post-01':nounInfo("post"), # [post.xml]
 'post-04':nounInfo("post"), # [post.xml]
 'posting':nounInfo("posting"), # [post.xml]
 'postponement':nounInfo("postponement"), # [postpone.xml]
 'posturing':nounInfo("posturing"), # [posture.xml]
 'pounding':nounInfo("pounding"), # [pound.xml]
 'pouring':nounInfo("pouring"), # [pour.xml]
 'practicing':nounInfo("practicing"), # [practice.xml]
 'practising':nounInfo("practising"), # [practice.xml]
 'praise-01':nounInfo("praise"), # [praise.xml]
 'pre-negotiaton':nounInfo("pre-negotiaton"), # [prenegotiate.xml]
 'pre-separation':nounInfo("pre-separation"), # [preseparate.xml]
 'precaution-01':nounInfo("precaution"), # [precaution.xml]
 'precaution-02':nounInfo("precaution"), # [precaution.xml]
 'precedence':nounInfo("precedence"), # [precede.xml]
 'precipitation':nounInfo("precipitation"), # [precipitate.xml]
 'precondition-01':nounInfo("precondition"), # [precondition.xml]
 'preconditioning':nounInfo("preconditioning"), # [precondition.xml]
 'prediction':nounInfo("prediction"), # [predict.xml]
 'predisposition':nounInfo("predisposition"), # [predispose.xml]
 'preference':nounInfo("preference"), # [prefer.xml]
 'preincubation':nounInfo("preincubation"), # [preincubate.xml]
 'premiere-01':nounInfo("premiere"), # [premiere.xml]
 'prenegotiaton':nounInfo("prenegotiaton"), # [prenegotiate.xml]
 'prenylation':nounInfo("prenylation"), # [prenylate.xml]
 'preoccupation':nounInfo("preoccupation"), # [preoccupy.xml]
 'preparation':nounInfo("preparation"), # [prepare.xml]
 'prepayment':nounInfo("prepayment"), # [prepay.xml]
 'prescription':nounInfo("prescription"), # [prescribe.xml]
 'presentation':nounInfo("presentation"), # [present.xml]
 'presenting':nounInfo("presenting"), # [present.xml]
 'preseparation':nounInfo("preseparation"), # [preseparate.xml]
 'preservation':nounInfo("preservation"), # [preserve.xml]
 'pressing':nounInfo("pressing"), # [press.xml]
 'presumption':nounInfo("presumption"), # [presume.xml]
 'pretreatment':nounInfo("pretreatment"), # [pretreat.xml]
 'prevention':nounInfo("prevention"), # [prevent.xml]
 'price-01':nounInfo("price"), # [price.xml]
 'pride-01':nounInfo("pride"), # [pride.xml]
 'printing':nounInfo("printing"), # [print.xml]
 'privatization':nounInfo("privatization"), # [privatize.xml]
 'proceeding':nounInfo("proceeding"), # [proceed.xml]
 'proceeding-02':nounInfo("proceeding"), # [proceed.xml]
 'process-02':nounInfo("process"), # [process.xml]
 'processing':nounInfo("processing"), # [process.xml]
 'procession':nounInfo("procession"), # [proceed.xml]
 'procurement':nounInfo("procurement"), # [procure.xml]
 'producing':nounInfo("producing"), # [produce.xml]
 'production':nounInfo("production"), # [produce.xml]
 'profession':nounInfo("profession"), # [profess.xml]
 'profit-01':nounInfo("profit"), # [profit.xml]
 'profiteering':nounInfo("profiteering"), # [profiteer.xml]
 'programming':nounInfo("programming"), # [program.xml]
 'progress-01':nounInfo("progress"), # [progress.xml]
 'progression':nounInfo("progression"), # [progress.xml]
 'prohibition':nounInfo("prohibition"), # [prohibit.xml]
 'projection':nounInfo("projection"), # [project.xml]
 'proliferation':nounInfo("proliferation"), # [proliferate.xml]
 'prolongation':nounInfo("prolongation"), # [prolong.xml]
 'promise-01':nounInfo("promise"), # [promise.xml]
 'promotion':nounInfo("promotion"), # [promote.xml]
 'pronation':nounInfo("pronation"), # [pronate.xml]
 'proof':nounInfo("proof"), # [prove.xml]
 'propagation':nounInfo("propagation"), # [propagate.xml]
 'prophesy-01':nounInfo("prophesy"), # [prophesy.xml]
 'proposal':nounInfo("proposal"), # [propose.xml]
 'proposition':nounInfo("proposition"), # [propose.xml]
 'propulsion':nounInfo("propulsion"), # [propel.xml]
 'prosecution':nounInfo("prosecution"), # [prosecute.xml]
 'prospect-02':nounInfo("prospect"), # [prospect.xml]
 'prospering':nounInfo("prospering"), # [prosper.xml]
 'prostitution':nounInfo("prostitution"), # [prostitute.xml]
 'protection':nounInfo("protection"), # [protect.xml]
 'proteolysis':nounInfo("proteolysis"), # [proteolyze.xml]
 'proteolyzation':nounInfo("proteolyzation"), # [proteolyze.xml]
 'protest-01':nounInfo("protest"), # [protest.xml]
 'protest-02':nounInfo("protest"), # [protest.xml]
 'protesting':nounInfo("protesting"), # [protest.xml]
 'protrusion':nounInfo("protrusion"), # [protrude.xml]
 'provision':nounInfo("provision"), # [provide.xml]
 'provocation':nounInfo("provocation"), # [provoke.xml]
 'publication':nounInfo("publication"), # [publish.xml]
 'publication-91':nounInfo("publication"), # [publish.xml]
 'publishing':nounInfo("publishing"), # [publish.xml]
 'puckering':nounInfo("puckering"), # [pucker.xml]
 'pull-01':nounInfo("pull"), # [pull.xml]
 'pulling':nounInfo("pulling"), # [pull.xml]
 'pulsation':nounInfo("pulsation"), # [pulsate.xml]
 'pulse-01':nounInfo("pulse"), # [pulse.xml]
 'pumping':nounInfo("pumping"), # [pump.xml]
 'punch-01':nounInfo("punch"), # [punch.xml]
 'punching':nounInfo("punching"), # [punch.xml]
 'puncture-01':nounInfo("puncture"), # [puncture.xml]
 'punishment':nounInfo("punishment"), # [punish.xml]
 'purchase-01':nounInfo("purchase"), # [purchase.xml]
 'pursuit':nounInfo("pursuit"), # [pursue.xml]
 'push-01':nounInfo("push"), # [push.xml]
 'push-04':nounInfo("push"), # [push.xml]
 'qualification':nounInfo("qualification"), # [qualify.xml]
 'quantification':nounInfo("quantification"), # [quantify.xml]
 'quantitation':nounInfo("quantitation"), # [quantitate.xml]
 'quarreling':nounInfo("quarreling"), # [quarrel.xml]
 'question-01':nounInfo("question"), # [question.xml]
 'question-02':nounInfo("question"), # [question.xml]
 'question-03':nounInfo("question"), # [question.xml]
 'quotation':nounInfo("quotation"), # [quote.xml]
 'quote-01':nounInfo("quote"), # [quote.xml]
 'race-02':nounInfo("race"), # [race.xml]
 'racing':nounInfo("racing"), # [race.xml]
 'rack-04':nounInfo("rack"), # [rack.xml]
 'racket-01':nounInfo("racket"), # [racket.xml]
 'racket-02':nounInfo("racket"), # [racket.xml]
 'radiation':nounInfo("radiation"), # [radiate.xml]
 'radicalization':nounInfo("radicalization"), # [radicalize.xml]
 'rage-02':nounInfo("rage"), # [rage.xml]
 'raid-01':nounInfo("raid"), # [raid.xml]
 'raise-01':nounInfo("raise"), # [raise.xml]
 'raising':nounInfo("raising"), # [raise.xml]
 'rally-01':nounInfo("rally"), # [rally.xml]
 'rally-02':nounInfo("rally"), # [rally.xml]
 'ramble-02':nounInfo("ramble"), # [ramble.xml]
 'rambling':nounInfo("rambling"), # [ramble.xml]
 'ramification-02':nounInfo("ramification"), # [ramify.xml]
 'ranking':nounInfo("ranking"), # [rank.xml]
 'ransom-01':nounInfo("ransom"), # [ransom.xml]
 'ranting':nounInfo("ranting"), # [rant.xml]
 'rape-01':nounInfo("rape"), # [rape.xml]
 'rating':nounInfo("rating"), # [rate.xml]
 'ration-01':nounInfo("ration"), # [ration.xml]
 'rationalization':nounInfo("rationalization"), # [rationalize.xml]
 'rationing':nounInfo("rationing"), # [ration.xml]
 're-election':nounInfo("re-election"), # [reelect.xml]
 're-emergence':nounInfo("re-emergence"), # [reemerge.xml]
 're-emphasis':nounInfo("re-emphasis"), # [reemphasize.xml]
 're-employment':nounInfo("re-employment"), # [reemploy.xml]
 're-enactment':nounInfo("re-enactment"), # [reenact.xml]
 're-evaluation':nounInfo("re-evaluation"), # [reevaluate.xml]
 're-unification':nounInfo("re-unification"), # [reunify.xml]
 'reaction':nounInfo("reaction"), # [react.xml]
 'reactivation':nounInfo("reactivation"), # [reactivate.xml]
 'readiness':nounInfo("readiness"), # [ready.xml]
 'reading':nounInfo("reading"), # [read.xml]
 'readmission':nounInfo("readmission"), # [readmit.xml]
 'realization':nounInfo("realization"), # [realize.xml]
 'reapplication':nounInfo("reapplication"), # [reapply.xml]
 'reapproximation':nounInfo("reapproximation"), # [approximate.xml]
 'reasoning':nounInfo("reasoning"), # [reason.xml]
 'reassessment':nounInfo("reassessment"), # [reassess.xml]
 'rebellion':nounInfo("rebellion"), # [rebel.xml]
 'rebound-01':nounInfo("rebound"), # [rebound.xml]
 'rebuttal':nounInfo("rebuttal"), # [rebut.xml]
 'recall-01':nounInfo("recall"), # [recall.xml]
 'recall-02':nounInfo("recall"), # [recall.xml]
 'receding':nounInfo("receding"), # [recede.xml]
 'reception':nounInfo("reception"), # [receive.xml]
 'recess-02':nounInfo("recess"), # [recess.xml]
 'recession':nounInfo("recession"), # [recede.xml]
 'recession-02':nounInfo("recession"), # [recede.xml]
 'reciprocation':nounInfo("reciprocation"), # [reciprocate.xml]
 'reciprocity':nounInfo("reciprocity"), # [reciprocate.xml]
 'recirculation':nounInfo("recirculation"), # [recirculate.xml]
 'recital':nounInfo("recital"), # [recite.xml]
 'reckoning':nounInfo("reckoning"), # [reckon.xml]
 'recognition':nounInfo("recognition"), # [recognize.xml]
 'recollection':nounInfo("recollection"), # [recollect.xml]
 'recommendation':nounInfo("recommendation"), # [recommend.xml]
 'reconciliation':nounInfo("reconciliation"), # [reconcile.xml]
 'reconstitution':nounInfo("reconstitution"), # [reconstitute.xml]
 'reconstruction':nounInfo("reconstruction"), # [reconstruct.xml]
 'recording':nounInfo("recording"), # [record.xml]
 'recovery':nounInfo("recovery"), # [recover.xml]
 'recreation':nounInfo("recreation"), # [recreate.xml]
 'recreation-02':nounInfo("recreation"), # [recreate.xml]
 'recruiting':nounInfo("recruiting"), # [recruit.xml]
 'recruitment':nounInfo("recruitment"), # [recruit.xml]
 'recurrence':nounInfo("recurrence"), # [reoccur.xml]
 'recycling':nounInfo("recycling"), # [recycle.xml]
 'redemption':nounInfo("redemption"), # [redeem.xml]
 'redistribution':nounInfo("redistribution"), # [redistribute.xml]
 'reduction':nounInfo("reduction"), # [reduce.xml]
 'reelection':nounInfo("reelection"), # [reelect.xml]
 'reemergence':nounInfo("reemergence"), # [reemerge.xml]
 'reemphasis':nounInfo("reemphasis"), # [reemphasize.xml]
 'reemployment':nounInfo("reemployment"), # [reemploy.xml]
 'reenactment':nounInfo("reenactment"), # [reenact.xml]
 'reevaluation':nounInfo("reevaluation"), # [reevaluate.xml]
 'reexamination':nounInfo("reexamination"), # [reexamine.xml]
 'reference':nounInfo("reference"), # [refer.xml]
 'referral':nounInfo("referral"), # [refer.xml]
 'referring':nounInfo("referring"), # [refer.xml]
 'refilling':nounInfo("refilling"), # [refill.xml]
 'refinement':nounInfo("refinement"), # [refine.xml]
 'refining':nounInfo("refining"), # [refine.xml]
 'reflection':nounInfo("reflection"), # [reflect.xml]
 'refocusing':nounInfo("refocusing"), # [refocus.xml]
 'reformation':nounInfo("reformation"), # [reform.xml]
 'refueling':nounInfo("refueling"), # [refuel.xml]
 'refund-01':nounInfo("refund"), # [refund.xml]
 'regard-01':nounInfo("regard"), # [regard.xml]
 'regeneration':nounInfo("regeneration"), # [regenerate.xml]
 'register-01':nounInfo("register"), # [register.xml]
 'registration':nounInfo("registration"), # [register.xml]
 'regression':nounInfo("regression"), # [regress.xml]
 'regret-01':nounInfo("regret"), # [regret.xml]
 'regrowth':nounInfo("regrowth"), # [regrow.xml]
 'regulation':nounInfo("regulation"), # [regulate.xml]
 'regurgitation':nounInfo("regurgitation"), # [regurgitate.xml]
 'rehabilitation':nounInfo("rehabilitation"), # [rehabilitate.xml]
 'rehydration':nounInfo("rehydration"), # [hydrate.xml]
 'reimplantation':nounInfo("reimplantation"), # [reimplant.xml]
 'reinforcement':nounInfo("reinforcement"), # [reinforce.xml]
 'reinjection':nounInfo("reinjection"), # [inject.xml]
 'reinsurance':nounInfo("reinsurance"), # [reinsure.xml]
 'rejection':nounInfo("rejection"), # [reject.xml]
 'rejuvenation':nounInfo("rejuvenation"), # [rejuvenate.xml]
 'relate-01':nounInfo("relate"), # [relate.xml]
 'relation-03':nounInfo("relation").addAttributes({"g":"x"}), # [relate.xml]
 'relaxation':nounInfo("relaxation"), # [relax.xml]
 'relay-01':nounInfo("relay"), # [relay.xml]
 'relay-02':nounInfo("relay"), # [relay.xml]
 'release-01':nounInfo("release"), # [release.xml]
 'relevance':nounInfo("relevance"), # [relevant.xml]
 'relief':nounInfo("relief"), # [relieve.xml]
 'relocation':nounInfo("relocation"), # [relocate.xml]
 'reluctance':nounInfo("reluctance"), # [reluctant.xml]
 'remaining':nounInfo("remaining"), # [remain.xml]
 'remark-01':nounInfo("remark"), # [remark.xml]
 'remarriage':nounInfo("remarriage"), # [remarry.xml]
 'remastering':nounInfo("remastering"), # [remaster.xml]
 'remediation':nounInfo("remediation"), # [remedy.xml]
 'remembering':nounInfo("remembering"), # [remember.xml]
 'remembrance':nounInfo("remembrance"), # [remember.xml]
 'remission':nounInfo("remission"), # [remit.xml]
 'remission-02':nounInfo("remission"), # [remit.xml]
 'remit-01':nounInfo("remit"), # [remit.xml]
 'removal':nounInfo("removal"), # [remove.xml]
 'remuneration':nounInfo("remuneration"), # [remunerate.xml]
 'rendering':nounInfo("rendering"), # [render.xml]
 'rendition':nounInfo("rendition"), # [render.xml]
 'renewal':nounInfo("renewal"), # [renew.xml]
 'renomination':nounInfo("renomination"), # [nominate.xml]
 'renovation':nounInfo("renovation"), # [renovate.xml]
 'rental':nounInfo("rental"), # [rent.xml]
 'renting':nounInfo("renting"), # [rent.xml]
 'reopening':nounInfo("reopening"), # [reopen.xml]
 'reoperation':nounInfo("reoperation"), # [operate.xml]
 'reorganization':nounInfo("reorganization"), # [reorganize.xml]
 'reorientation':nounInfo("reorientation"), # [reorient.xml]
 'repair-01':nounInfo("repair"), # [repair.xml]
 'repatriation':nounInfo("repatriation"), # [repatriate.xml]
 'repayment':nounInfo("repayment"), # [pay.xml]
 'repeal-01':nounInfo("repeal"), # [repeal.xml]
 'repeat-01':nounInfo("repeat"), # [repeat.xml]
 'replacement':nounInfo("replacement"), # [replace.xml]
 'replay-01':nounInfo("replay"), # [replay.xml]
 'replication':nounInfo("replication"), # [replicate.xml]
 'reply-01':nounInfo("reply"), # [reply.xml]
 'report-01':nounInfo("report"), # [report.xml]
 'repositioning':nounInfo("repositioning"), # [reposition.xml]
 'representation':nounInfo("representation"), # [represent.xml]
 'representation-02':nounInfo("representation"), # [represent.xml]
 'repression':nounInfo("repression"), # [repress.xml]
 'reproduction':nounInfo("reproduction"), # [reproduce.xml]
 'reprogramming':nounInfo("reprogramming"), # [reprogram.xml]
 'request-01':nounInfo("request"), # [request.xml]
 'requirement':nounInfo("requirement"), # [require.xml]
 'requisition-01':nounInfo("requisition"), # [requisition.xml]
 'rescue-01':nounInfo("rescue"), # [rescue.xml]
 'research-01':nounInfo("research"), # [research.xml]
 'reservation':nounInfo("reservation"), # [reserve.xml]
 'reshuffle-01':nounInfo("reshuffle"), # [reshuffle.xml]
 'residence':nounInfo("residence"), # [reside.xml]
 'resignation':nounInfo("resignation"), # [resign.xml]
 'resistance':nounInfo("resistance"), # [resist.xml]
 'resolution':nounInfo("resolution"), # [resolve.xml]
 'resonance':nounInfo("resonance"), # [resonate.xml]
 'resorption':nounInfo("resorption"), # [resorb.xml]
 'resort-01':nounInfo("resort"), # [resort.xml]
 'respect-01':nounInfo("respect"), # [respect.xml]
 'respect-02':nounInfo("respect"), # [respect.xml]
 'respiration':nounInfo("respiration"), # [respire.xml]
 'responding':nounInfo("responding"), # [respond.xml]
 'response':nounInfo("response"), # [respond.xml]
 'responsibility':nounInfo("responsibility"), # [responsible.xml]
 'responsibleness':nounInfo("responsibleness"), # [responsible.xml]
 'rest-01':nounInfo("rest"), # [rest.xml]
 'resting':nounInfo("resting"), # [rest.xml]
 'restitution':nounInfo("restitution"), # [restore.xml]
 'restoration':nounInfo("restoration"), # [restore.xml]
 'restraint':nounInfo("restraint"), # [restrain.xml]
 'restriction':nounInfo("restriction"), # [restrict.xml]
 'restructuring':nounInfo("restructuring"), # [restructure.xml]
 'resumption':nounInfo("resumption"), # [resume.xml]
 'resurrection':nounInfo("resurrection"), # [resurrect.xml]
 'resuscitation':nounInfo("resuscitation"), # [resuscitate.xml]
 'retaliation':nounInfo("retaliation"), # [retaliate.xml]
 'retardation':nounInfo("retardation"), # [retard.xml]
 'retention':nounInfo("retention"), # [retain.xml]
 'retesting':nounInfo("retesting"), # [retest.xml]
 'rethinking':nounInfo("rethinking"), # [rethink.xml]
 'retirement':nounInfo("retirement"), # [retire.xml]
 'retracting':nounInfo("retracting"), # [retract.xml]
 'retraction':nounInfo("retraction"), # [retract.xml]
 'retraining':nounInfo("retraining"), # [retrain.xml]
 'retreat-01':nounInfo("retreat"), # [retreat.xml]
 'retreat-02':nounInfo("retreat"), # [retreat.xml]
 'retreat-03':nounInfo("retreat"), # [retreat.xml]
 'retribution':nounInfo("retribution"), # [retribute.xml]
 'retrieval':nounInfo("retrieval"), # [retrieve.xml]
 'return-01':nounInfo("return"), # [return.xml]
 'return-02':nounInfo("return"), # [return.xml]
 'return-03':nounInfo("return"), # [return.xml]
 'return-05':nounInfo("return"), # [return.xml]
 'return-06':nounInfo("return"), # [return.xml]
 'reunification':nounInfo("reunification"), # [reunify.xml]
 'reunion':nounInfo("reunion"), # [reunify.xml]
 'revelation':nounInfo("revelation"), # [reveal.xml]
 'reverse-01':nounInfo("reverse"), # [reverse.xml]
 'reversion':nounInfo("reversion"), # [revert.xml]
 'review-01':nounInfo("review"), # [review.xml]
 'review-02':nounInfo("review"), # [review.xml]
 'review-03':nounInfo("review"), # [review.xml]
 'revision':nounInfo("revision"), # [revise.xml]
 'revitalization':nounInfo("revitalization"), # [revitalize.xml]
 'revival':nounInfo("revival"), # [revive.xml]
 'revocation':nounInfo("revocation"), # [revoke.xml]
 'revolution-03':nounInfo("revolution"), # [revolt.xml]
 'ride-01':nounInfo("ride"), # [ride.xml]
 'rift-01':nounInfo("rift"), # [rift.xml]
 'rig-01':nounInfo("rig"), # [rig.xml]
 'right-05':nounInfo("right"), # [right.xml]
 'ring-01':nounInfo("ring"), # [ring.xml]
 'ring-05':nounInfo("ring"), # [ring.xml]
 'ringing':nounInfo("ringing"), # [ring.xml]
 'riot-01':nounInfo("riot"), # [riot.xml]
 'rioting':nounInfo("rioting"), # [riot.xml]
 'ripening':nounInfo("ripening"), # [ripen.xml]
 'ripple-01':nounInfo("ripple"), # [ripple.xml]
 'rise-01':nounInfo("rise"), # [rise.xml]
 'risk-01':nounInfo("risk"), # [risk.xml]
 'roasting':nounInfo("roasting"), # [roast.xml]
 'roll-01':nounInfo("roll"), # [roll.xml]
 'rollback':nounInfo("rollback"), # [roll.xml]
 'romanization':nounInfo("romanization"), # [transliterate.xml]
 'rotation':nounInfo("rotation"), # [rotate.xml]
 'round-03':nounInfo("round"), # [round.xml]
 'round-05':nounInfo("round"), # [round.xml]
 'routing':nounInfo("routing"), # [route.xml]
 'rowing':nounInfo("rowing"), # [row.xml]
 'rubbing':nounInfo("rubbing"), # [rub.xml]
 'ruin-01':nounInfo("ruin"), # [ruin.xml]
 'rule-01':nounInfo("rule"), # [rule.xml]
 'rule-03':nounInfo("rule"), # [rule.xml]
 'ruling':nounInfo("ruling"), # [rule.xml]
 'rumor-01':nounInfo("rumor"), # [rumor.xml]
 'run-01':nounInfo("run"), # [run.xml]
 'run-02':nounInfo("run"), # [run.xml]
 'run-13':nounInfo("run"), # [run.xml]
 'run-14':nounInfo("run"), # [run.xml]
 'run-15':nounInfo("run"), # [run.xml]
 'run-16':nounInfo("run"), # [run.xml]
 'run-17':nounInfo("run"), # [run.xml]
 'runaround-22':nounInfo("runaround"), # [run.xml]
 'running':nounInfo("running"), # [run.xml]
 'rush-01':nounInfo("rush"), # [rush.xml]
 'sacking':nounInfo("sacking"), # [sack.xml]
 'sacrifice-01':nounInfo("sacrifice"), # [sacrifice.xml]
 'sailing':nounInfo("sailing"), # [sail.xml]
 'sale':nounInfo("sale"), # [sell.xml]
 'salivation':nounInfo("salivation"), # [salivate.xml]
 'salutation':nounInfo("salutation"), # [salute.xml]
 'salvage-01':nounInfo("salvage"), # [salvage.xml]
 'sample-01':nounInfo("sample"), # [sample.xml]
 'sanitation':nounInfo("sanitation"), # [sanitize.xml]
 'satiation':nounInfo("satiation"), # [satiate.xml]
 'satisfaction':nounInfo("satisfaction"), # [satisfy.xml]
 'saturation':nounInfo("saturation"), # [saturate.xml]
 'saving':nounInfo("saving"), # [save.xml]
 'scaling':nounInfo("scaling"), # [scale.xml]
 'scalloping':nounInfo("scalloping"), # [scallop.xml]
 'scam-01':nounInfo("scam"), # [scam.xml]
 'scanning':nounInfo("scanning"), # [scan.xml]
 'scare-01':nounInfo("scare"), # [scare.xml]
 'scarring':nounInfo("scarring"), # [scar.xml]
 'scattering':nounInfo("scattering"), # [scatter.xml]
 'scheduling':nounInfo("scheduling"), # [schedule.xml]
 'schmoozing':nounInfo("schmoozing"), # [schmooze.xml]
 'schooling':nounInfo("schooling"), # [school.xml]
 'sclerosing':nounInfo("sclerosing"), # [sclerose.xml]
 'scolding':nounInfo("scolding"), # [scold.xml]
 'score-01':nounInfo("score"), # [score.xml]
 'score-entity':nounInfo("score-entity"), # [score.xml]
 'score-on-scale-91':nounInfo("score-on-scale"), # [score.xml]
 'scrapping':nounInfo("scrapping"), # [scrap.xml]
 'scratching':nounInfo("scratching"), # [scratch.xml]
 'scream-01':nounInfo("scream"), # [scream.xml]
 'screening':nounInfo("screening"), # [screen.xml]
 'screwup':nounInfo("screwup"), # [screw.xml]
 'search-01':nounInfo("search"), # [search.xml]
 'searching':nounInfo("searching"), # [search.xml]
 'seasoning':nounInfo("seasoning"), # [season.xml]
 'secretion':nounInfo("secretion"), # [secrete.xml]
 'sectioning':nounInfo("sectioning"), # [section.xml]
 'sedation':nounInfo("sedation"), # [sedate.xml]
 'seeding':nounInfo("seeding"), # [seed.xml]
 'seeking':nounInfo("seeking"), # [seek.xml]
 'segregation':nounInfo("segregation"), # [segregate.xml]
 'seizure':nounInfo("seizure"), # [seize.xml]
 'selection':nounInfo("selection"), # [select.xml]
 'self-adjustment':nounInfo("self-adjustment"), # [selfadjust.xml]
 'self-destruction':nounInfo("self-destruction"), # [selfdestruct.xml]
 'selfadjustment':nounInfo("selfadjustment"), # [selfadjust.xml]
 'selfdestruction':nounInfo("selfdestruction"), # [selfdestruct.xml]
 'selling':nounInfo("selling"), # [sell.xml]
 'sense-01':nounInfo("sense"), # [sense.xml]
 'sense-02':nounInfo("sense"), # [sense.xml]
 'sensitization':nounInfo("sensitization"), # [sensitize.xml]
 'sentence-01':nounInfo("sentence"), # [sentence.xml]
 'sentence-02':nounInfo("sentence"), # [sentence.xml]
 'sentencing':nounInfo("sentencing"), # [sentence.xml]
 'separation':nounInfo("separation"), # [separate.xml]
 'sequencing':nounInfo("sequencing"), # [sequence.xml]
 'sequestering':nounInfo("sequestering"), # [sequester.xml]
 'serration':nounInfo("serration"), # [serrate.xml]
 'service':nounInfo("service"), # [serve.xml]
 'service-05':nounInfo("service"), # [serve.xml]
 'service-06':nounInfo("service"), # [serve.xml]
 'serving':nounInfo("serving"), # [serve.xml]
 'setting':nounInfo("setting"), # [set.xml]
 'settlement':nounInfo("settlement"), # [settle.xml]
 'sex-01':nounInfo("sex"), # [sex.xml]
 'shading':nounInfo("shading"), # [shade.xml]
 'shadowing':nounInfo("shadowing"), # [shadow.xml]
 'shaking':nounInfo("shaking"), # [shake.xml]
 'shame-02':nounInfo("shame"), # [shame.xml]
 'shaming':nounInfo("shaming"), # [shame.xml]
 'shape-01':nounInfo("shape"), # [shape.xml]
 'share-01':nounInfo("share"), # [share.xml]
 'sharing':nounInfo("sharing"), # [share.xml]
 'shark':nounInfo("shark"), # [jump.xml]
 'shaving':nounInfo("shaving"), # [shave.xml]
 'shift-01':nounInfo("shift"), # [shift.xml]
 'shipping':nounInfo("shipping"), # [ship.xml]
 'shock-01':nounInfo("shock"), # [shock.xml]
 'shoot-02':nounInfo("shoot"), # [shoot.xml]
 'shoot-03':nounInfo("shoot"), # [shoot.xml]
 'shootout-10':nounInfo("shootout"), # [shoot.xml]
 'shopping':nounInfo("shopping"), # [shop.xml]
 'shortage':nounInfo("shortage"), # [shorten.xml]
 'shortening':nounInfo("shortening"), # [shorten.xml]
 'shot':nounInfo("shot"), # [shoot.xml]
 'show-01':nounInfo("show"), # [show.xml]
 'show-04':nounInfo("show"), # [show.xml]
 'shower-01':nounInfo("shower"), # [shower.xml]
 'shower-02':nounInfo("shower"), # [shower.xml]
 'shunting':nounInfo("shunting"), # [shunt.xml]
 'side-01':nounInfo("side"), # [side.xml]
 'siege':nounInfo("siege"), # [besiege.xml]
 'sight-01':nounInfo("sight"), # [sight.xml]
 'sightseeing':nounInfo("sightseeing"), # [sightsee.xml]
 'signal-07':nounInfo("signal"), # [sign.xml]
 'signing':nounInfo("signing"), # [sign.xml]
 'simulation':nounInfo("simulation"), # [simulate.xml]
 'singing':nounInfo("singing"), # [sing.xml]
 'sink-01':nounInfo("sink"), # [sink.xml]
 'sinkex-02':nounInfo("sinkex"), # [sink.xml]
 'sitting':nounInfo("sitting"), # [sit.xml]
 'skateboarding':nounInfo("skateboarding"), # [skateboard.xml]
 'skiing':nounInfo("skiing"), # [ski.xml]
 'skimming':nounInfo("skimming"), # [skim.xml]
 'skip-01':nounInfo("skip"), # [skip.xml]
 'skirmish-01':nounInfo("skirmish"), # [skirmish.xml]
 'slash-01':nounInfo("slash"), # [slash.xml]
 'slaughter-01':nounInfo("slaughter"), # [slaughter.xml]
 'slaying':nounInfo("slaying"), # [slay.xml]
 'sleeping':nounInfo("sleeping"), # [sleep.xml]
 'slide-01':nounInfo("slide"), # [slide.xml]
 'slide-02':nounInfo("slide"), # [slide.xml]
 'slip-01':nounInfo("slip"), # [slip.xml]
 'slowing':nounInfo("slowing"), # [slow.xml]
 'smack-03':nounInfo("smack"), # [smack.xml]
 'smashing':nounInfo("smashing"), # [smash.xml]
 'smell-01':nounInfo("smell"), # [smell.xml]
 'smoke-01':nounInfo("smoke"), # [smoke.xml]
 'smoking':nounInfo("smoking"), # [smoke.xml]
 'smuggling':nounInfo("smuggling"), # [smuggle.xml]
 'snacking':nounInfo("snacking"), # [snack.xml]
 'sneezing':nounInfo("sneezing"), # [sneeze.xml]
 'snoring':nounInfo("snoring"), # [snore.xml]
 'sobbing':nounInfo("sobbing"), # [sob.xml]
 'socialization':nounInfo("socialization"), # [socialize.xml]
 'socializing':nounInfo("socializing"), # [socialize.xml]
 'softening':nounInfo("softening"), # [soften.xml]
 'soiling':nounInfo("soiling"), # [soil.xml]
 'solicitation':nounInfo("solicitation"), # [solicit.xml]
 'solution':nounInfo("solution"), # [solve.xml]
 'solving':nounInfo("solving"), # [solve.xml]
 'sound-02':nounInfo("sound"), # [sound.xml]
 'space-03':nounInfo("space"), # [space.xml]
 'span-01':nounInfo("span"), # [span.xml]
 'sparing':nounInfo("sparing"), # [spare.xml]
 'speaker-yy':nounInfo("speaker-yy"), # [speak.xml]
 'speaking':nounInfo("speaking"), # [speak.xml]
 'specification':nounInfo("specification"), # [specify.xml]
 'speculating':nounInfo("speculating"), # [speculate.xml]
 'speculation':nounInfo("speculation"), # [speculate.xml]
 'speech':nounInfo("speech"), # [speak.xml]
 'speeding':nounInfo("speeding"), # [speed.xml]
 'spelling':nounInfo("spelling"), # [spell.xml]
 'spending':nounInfo("spending"), # [spend.xml]
 'spike-04':nounInfo("spike"), # [spike.xml]
 'spin-01':nounInfo("spin"), # [spin.xml]
 'spin-03':nounInfo("spin"), # [spin.xml]
 'spinning':nounInfo("spinning"), # [spin.xml]
 'spinoff':nounInfo("spinoff"), # [spin.xml]
 'spite-01':nounInfo("spite"), # [spite.xml]
 'spitting':nounInfo("spitting"), # [spit.xml]
 'splaying':nounInfo("splaying"), # [splay.xml]
 'splinting':nounInfo("splinting"), # [splint.xml]
 'split-01':nounInfo("split"), # [split.xml]
 'spotlight-01':nounInfo("spotlight"), # [spotlight.xml]
 'spotting':nounInfo("spotting"), # [spot.xml]
 'spread-01':nounInfo("spread"), # [spread.xml]
 'spread-02':nounInfo("spread"), # [spread.xml]
 'spread-03':nounInfo("spread"), # [spread.xml]
 'spreading':nounInfo("spreading"), # [spread.xml]
 'spring-01':nounInfo("spring"), # [spring.xml]
 'spying':nounInfo("spying"), # [spy.xml]
 'squeeze-01':nounInfo("squeeze"), # [squeeze.xml]
 'squinting':nounInfo("squinting"), # [squint.xml]
 'stab-01':nounInfo("stab"), # [stab.xml]
 'stabilization':nounInfo("stabilization"), # [stabilize.xml]
 'stagflation':nounInfo("stagflation"), # [inflate.xml]
 'staging':nounInfo("staging"), # [stage.xml]
 'stagnation':nounInfo("stagnation"), # [stagnate.xml]
 'staining':nounInfo("staining"), # [stain.xml]
 'stalking':nounInfo("stalking"), # [stalk.xml]
 'stall-01':nounInfo("stall"), # [stall.xml]
 'stand-11':nounInfo("stand"), # [stand.xml]
 'stand-12':nounInfo("stand"), # [stand.xml]
 'staring':nounInfo("staring"), # [stare.xml]
 'start-01':nounInfo("start"), # [start.xml]
 'start-03':nounInfo("start"), # [start.xml]
 'start-09':nounInfo("start"), # [start.xml]
 'starvation':nounInfo("starvation"), # [starve.xml]
 'statement':nounInfo("statement"), # [state.xml]
 'statistical-test-91':nounInfo("statistical-test"), # [statistical-test.xml]
 'stay-01':nounInfo("stay"), # [stay.xml]
 'stay-03':nounInfo("stay"), # [stay.xml]
 'steering':nounInfo("steering"), # [steer.xml]
 'stem-01':nounInfo("stem"), # [stem.xml]
 'stem-02':nounInfo("stem"), # [stem.xml]
 'stem-03':nounInfo("stem"), # [stem.xml]
 'stenting':nounInfo("stenting"), # [stent.xml]
 'step':nounInfo("step"), # [step.xml]
 'step-01':nounInfo("step"), # [step.xml]
 'sterilization':nounInfo("sterilization"), # [sterilize.xml]
 'stiffening':nounInfo("stiffening"), # [stiffen.xml]
 'stiffing':nounInfo("stiffing"), # [stiffen.xml]
 'stimulation':nounInfo("stimulation"), # [stimulate.xml]
 'sting-01':nounInfo("sting"), # [sting.xml]
 'sting-02':nounInfo("sting"), # [sting.xml]
 'stinging':nounInfo("stinging"), # [sting.xml]
 'stipulation':nounInfo("stipulation"), # [stipulate.xml]
 'stocking':nounInfo("stocking"), # [stock.xml]
 'stop-01':nounInfo("stop"), # [stop.xml]
 'stopover':nounInfo("stopover"), # [stop.xml]
 'stoppage':nounInfo("stoppage"), # [stop.xml]
 'storage':nounInfo("storage"), # [store.xml]
 'straining':nounInfo("straining"), # [strain.xml]
 'stranding':nounInfo("stranding"), # [strand.xml]
 'strategizing':nounInfo("strategizing"), # [strategize.xml]
 'stratification':nounInfo("stratification"), # [stratify.xml]
 'stream-02':nounInfo("stream"), # [stream.xml]
 'streaming':nounInfo("streaming"), # [stream.xml]
 'street-address-91':nounInfo("street-address"), # [address.xml]
 'strength':nounInfo("strength"), # [strengthen.xml]
 'strengthening':nounInfo("strengthening"), # [strengthen.xml]
 'stressing':nounInfo("stressing"), # [stress.xml]
 'stretching':nounInfo("stretching"), # [stretch.xml]
 'stride-01':nounInfo("stride"), # [stride.xml]
 'strike-01':nounInfo("strike"), # [strike.xml]
 'strike-02':nounInfo("strike"), # [strike.xml]
 'strike-11':nounInfo("strike"), # [strike.xml]
 'stripping':nounInfo("stripping"), # [strip.xml]
 'striving':nounInfo("striving"), # [strive.xml]
 'stroke-01':nounInfo("stroke"), # [stroke.xml]
 'stroke-02':nounInfo("stroke"), # [stroke.xml]
 'stroll-01':nounInfo("stroll"), # [stroll.xml]
 'struggle-01':nounInfo("struggle"), # [struggle.xml]
 'struggle-02':nounInfo("struggle"), # [struggle.xml]
 'struggling':nounInfo("struggling"), # [struggle.xml]
 'study-01':nounInfo("study"), # [study.xml]
 'studying':nounInfo("studying"), # [study.xml]
 'stunt-02':nounInfo("stunt"), # [stunt.xml]
 'subclone-01':nounInfo("subclone"), # [subclone.xml]
 'subdivision':nounInfo("subdivision"), # [subdivide.xml]
 'subduction':nounInfo("subduction"), # [subduct.xml]
 'submission':nounInfo("submission"), # [submit.xml]
 'subscription':nounInfo("subscription"), # [subscribe.xml]
 'subset':nounInfo("subset"), # [include.xml]
 'subsidence':nounInfo("subsidence"), # [subside.xml]
 'subsidy':nounInfo("subsidy"), # [subsidize.xml]
 'substitution':nounInfo("substitution"), # [substitute.xml]
 'success':nounInfo("success"), # [succeed.xml]
 'succession':nounInfo("succession"), # [succeed.xml]
 'suction-05':nounInfo("suction"), # [suck.xml]
 'suffering':nounInfo("suffering"), # [suffer.xml]
 'suffocation':nounInfo("suffocation"), # [suffocate.xml]
 'suggestion':nounInfo("suggestion"), # [suggest.xml]
 'suit':nounInfo("suit"), # [suit.xml]
 'superset':nounInfo("superset"), # [include.xml]
 'supervision':nounInfo("supervision"), # [supervise.xml]
 'supination':nounInfo("supination"), # [supinate.xml]
 'supplementation':nounInfo("supplementation"), # [supplement.xml]
 'supply-01':nounInfo("supply"), # [supply.xml]
 'support-01':nounInfo("support"), # [support.xml]
 'suppression':nounInfo("suppression"), # [suppress.xml]
 'surge-01':nounInfo("surge"), # [surge.xml]
 'surgery-01':nounInfo("surgery"), # [surgery.xml]
 'surprise-01':nounInfo("surprise"), # [surprise.xml]
 'surrender-01':nounInfo("surrender"), # [surrender.xml]
 'surrounding':nounInfo("surrounding"), # [surround.xml]
 'survey-01':nounInfo("survey"), # [survey.xml]
 'survival':nounInfo("survival"), # [survive.xml]
 'suspension':nounInfo("suspension"), # [suspend.xml]
 'suspension-03':nounInfo("suspension"), # [suspend.xml]
 'suspicion':nounInfo("suspicion"), # [suspect.xml]
 'suspiciousness':nounInfo("suspiciousness"), # [suspect.xml]
 'swallowing':nounInfo("swallowing"), # [swallow.xml]
 'swat-01':nounInfo("swat"), # [swat.xml]
 'swearing':nounInfo("swearing"), # [swear.xml]
 'sweating':nounInfo("sweating"), # [sweat.xml]
 'sweep-01':nounInfo("sweep"), # [sweep.xml]
 'sweep-02':nounInfo("sweep"), # [sweep.xml]
 'sweep-05':nounInfo("sweep"), # [sweep.xml]
 'sweep-06':nounInfo("sweep"), # [sweep.xml]
 'sweeping':nounInfo("sweeping"), # [sweep.xml]
 'sweetness':nounInfo("sweetness"), # [sweeten.xml]
 'swelling':nounInfo("swelling"), # [swell.xml]
 'swim-01':nounInfo("swim"), # [swim.xml]
 'swing-02':nounInfo("swing"), # [swing.xml]
 'swing-03':nounInfo("swing"), # [swing.xml]
 'swipe-01':nounInfo("swipe"), # [swipe.xml]
 'swipe-02':nounInfo("swipe"), # [swipe.xml]
 'switch-01':nounInfo("switch"), # [switch.xml]
 'synchronization':nounInfo("synchronization"), # [synchronize.xml]
 'syndication':nounInfo("syndication"), # [syndicate.xml]
 'synergy':nounInfo("synergy"), # [synergize.xml]
 'tabling':nounInfo("tabling"), # [table.xml]
 'tabulation':nounInfo("tabulation"), # [tabulate.xml]
 'tackle-01':nounInfo("tackle"), # [tackle.xml]
 'tag-01':nounInfo("tag"), # [tag.xml]
 'take-34':nounInfo("take"), # [take.xml]
 'takeover':nounInfo("takeover"), # [take.xml]
 'taking':nounInfo("taking"), # [take.xml]
 'taking-29':nounInfo("taking"), # [take.xml]
 'talk-01':nounInfo("talk"), # [talk.xml]
 'tampering':nounInfo("tampering"), # [tamper.xml]
 'tangle-03':nounInfo("tangle"), # [tangle.xml]
 'tanning':nounInfo("tanning"), # [tan.xml]
 'tapering':nounInfo("tapering"), # [taper.xml]
 'tariff':nounInfo("tariff"), # [tax.xml]
 'task-01':nounInfo("task"), # [task.xml]
 'taste-01':nounInfo("taste"), # [taste.xml]
 'taste-02':nounInfo("taste"), # [taste.xml]
 'tattooing':nounInfo("tattooing"), # [tattoo.xml]
 'taxation':nounInfo("taxation"), # [tax.xml]
 'teaching':nounInfo("teaching"), # [teach.xml]
 'tearing':nounInfo("tearing"), # [tear.xml]
 'teasing':nounInfo("teasing"), # [tease.xml]
 'teething':nounInfo("teething"), # [teethe.xml]
 'telling':nounInfo("telling"), # [tell.xml]
 'temptation':nounInfo("temptation"), # [tempt.xml]
 'tender-01':nounInfo("tender"), # [tender.xml]
 'tension':nounInfo("tension"), # [tense.xml]
 'termination':nounInfo("termination"), # [terminate.xml]
 'terror-02':nounInfo("terror"), # [terrorize.xml]
 'terrorisation':nounInfo("terrorisation"), # [terrorize.xml]
 'terrorism':nounInfo("terrorism"), # [terrorize.xml]
 'terrorization':nounInfo("terrorization"), # [terrorize.xml]
 'test-01':nounInfo("test"), # [test.xml]
 'testimony':nounInfo("testimony"), # [testify.xml]
 'tetramerisation':nounInfo("tetramerisation"), # [tetramerize.xml]
 'tetramerization':nounInfo("tetramerization"), # [tetramerize.xml]
 'texting':nounInfo("texting"), # [text.xml]
 'thanks':nounInfo("thanks"), # [thank.xml]
 'thickening':nounInfo("thickening"), # [thicken.xml]
 'thinking':nounInfo("thinking"), # [think.xml]
 'thinning':nounInfo("thinning"), # [thin.xml]
 'thought':nounInfo("thought"), # [think.xml]
 'threat':nounInfo("threat"), # [threaten.xml]
 'thrill-01':nounInfo("thrill"), # [thrill.xml]
 'throw-01':nounInfo("throw"), # [throw.xml]
 'throwing':nounInfo("throwing"), # [throw.xml]
 'thrust-01':nounInfo("thrust"), # [thrust.xml]
 'tickling':nounInfo("tickling"), # [tickle.xml]
 'tightening':nounInfo("tightening"), # [tighten.xml]
 'tiling':nounInfo("tiling"), # [tile.xml]
 'timing':nounInfo("timing"), # [time.xml]
 'tingling':nounInfo("tingling"), # [tingle.xml]
 'tip-01':nounInfo("tip"), # [tip.xml]
 'tip-02':nounInfo("tip"), # [tip.xml]
 'tip-05':nounInfo("tip"), # [tip.xml]
 'tiptoeing':nounInfo("tiptoeing"), # [tiptoe.xml]
 'titration':nounInfo("titration"), # [titrate.xml]
 'tolerance':nounInfo("tolerance"), # [tolerate.xml]
 'toll-02':nounInfo("toll"), # [toll.xml]
 'torture-01':nounInfo("torture"), # [torture.xml]
 'toss-01':nounInfo("toss"), # [toss.xml]
 'tossing':nounInfo("tossing"), # [toss.xml]
 'touch':nounInfo("touch"), # [touch.xml]
 'touch-01':nounInfo("touch"), # [touch.xml]
 'touching':nounInfo("touching"), # [touch.xml]
 'tour-01':nounInfo("tour"), # [tour.xml]
 'tow-01':nounInfo("tow"), # [tow.xml]
 'towing':nounInfo("towing"), # [tow.xml]
 'tracing':nounInfo("tracing"), # [trace.xml]
 'track-01':nounInfo("track"), # [track.xml]
 'tracking':nounInfo("tracking"), # [track.xml]
 'trade-01':nounInfo("trade"), # [trade.xml]
 'tradeoff':nounInfo("tradeoff"), # [trade.xml]
 'trading':nounInfo("trading"), # [trade.xml]
 'traffic-01':nounInfo("traffic"), # [traffic.xml]
 'training':nounInfo("training"), # [train.xml]
 'transaction':nounInfo("transaction"), # [transact.xml]
 'transactivation':nounInfo("transactivation"), # [transactivate.xml]
 'transcription':nounInfo("transcription"), # [transcribe.xml]
 'transduction':nounInfo("transduction"), # [transduce.xml]
 'transfection':nounInfo("transfection"), # [transfect.xml]
 'transfer-01':nounInfo("transfer"), # [transfer.xml]
 'transformation':nounInfo("transformation"), # [transform.xml]
 'transfusion':nounInfo("transfusion"), # [transfuse.xml]
 'transit-01':nounInfo("transit"), # [transit.xml]
 'transition-01':nounInfo("transition"), # [transition.xml]
 'translation':nounInfo("translation"), # [translate.xml]
 'transliteration':nounInfo("transliteration"), # [transliterate.xml]
 'translocation':nounInfo("translocation"), # [translocate.xml]
 'transmigration':nounInfo("transmigration"), # [transmigrate.xml]
 'transmission':nounInfo("transmission"), # [transmit.xml]
 'transphosphorylation':nounInfo("transphosphorylation"), # [transphosphorylate.xml]
 'transplant-01':nounInfo("transplant"), # [transplant.xml]
 'transport-01':nounInfo("transport"), # [transport.xml]
 'transposition':nounInfo("transposition"), # [transpose.xml]
 'trapping':nounInfo("trapping"), # [trap.xml]
 'trauma':nounInfo("trauma"), # [traumatize.xml]
 'travel-01':nounInfo("travel"), # [travel.xml]
 'treating':nounInfo("treating"), # [treat.xml]
 'treatment':nounInfo("treatment"), # [treat.xml]
 'trending':nounInfo("trending"), # [tend.xml]
 'trespass-01':nounInfo("trespass"), # [trespass.xml]
 'trial':nounInfo("trial"), # [try.xml]
 'trial-06':nounInfo("trial"), # [try.xml]
 'trick-01':nounInfo("trick"), # [trick.xml]
 'trigger-01':nounInfo("trigger"), # [trigger.xml]
 'triggering':nounInfo("triggering"), # [trigger.xml]
 'trip-03':nounInfo("trip"), # [trip.xml]
 'triumph-01':nounInfo("triumph"), # [triumph.xml]
 'trouble':nounInfo("trouble"), # [trouble.xml]
 'trouble-05':nounInfo("trouble"), # [trouble.xml]
 'trypsinisation':nounInfo("trypsinisation"), # [trypsinize.xml]
 'trypsinization':nounInfo("trypsinization"), # [trypsinize.xml]
 'tubulation':nounInfo("tubulation"), # [tubulate.xml]
 'tunneling':nounInfo("tunneling"), # [tunnel.xml]
 'turn-01':nounInfo("turn"), # [turn.xml]
 'turn-02':nounInfo("turn"), # [turn.xml]
 'turning':nounInfo("turning"), # [turn.xml]
 'tutoring':nounInfo("tutoring"), # [tutor.xml]
 'tweet-01':nounInfo("tweet"), # [tweet.xml]
 'tweet-02':nounInfo("tweet"), # [tweet.xml]
 'twist-01':nounInfo("twist"), # [twist.xml]
 'typing':nounInfo("typing"), # [type.xml]
 'ubiquitination':nounInfo("ubiquitination"), # [ubiquitinate.xml]
 'ulceration':nounInfo("ulceration"), # [ulcerate.xml]
 'underestimation':nounInfo("underestimation"), # [underestimate.xml]
 'underfunding':nounInfo("underfunding"), # [underfund.xml]
 'undermining':nounInfo("undermining"), # [undermine.xml]
 'underpinning':nounInfo("underpinning"), # [underpin.xml]
 'understanding':nounInfo("understanding"), # [understand.xml]
 'understatement':nounInfo("understatement"), # [understate.xml]
 'undertaking':nounInfo("undertaking"), # [undertake.xml]
 'undoing':nounInfo("undoing"), # [undo.xml]
 'unification':nounInfo("unification"), # [unify.xml]
 'union-02':nounInfo("union"), # [unionize.xml]
 'uniqueness':nounInfo("uniqueness"), # [unique.xml]
 'unveiling':nounInfo("unveiling"), # [unveil.xml]
 'upbringing':nounInfo("upbringing"), # [bring.xml]
 'update-01':nounInfo("update"), # [update.xml]
 'update-02':nounInfo("update"), # [update.xml]
 'upgrade-02':nounInfo("upgrade"), # [upgrade.xml]
 'upregulation':nounInfo("upregulation"), # [upregulate.xml]
 'uprising':nounInfo("uprising"), # [rise.xml]
 'urbanization':nounInfo("urbanization"), # [urbanize.xml]
 'urination':nounInfo("urination"), # [urinate.xml]
 'use-01':nounInfo("use"), # [use.xml]
 'using':nounInfo("using"), # [use.xml]
 'utilization':nounInfo("utilization"), # [utilize.xml]
 'vacation-01':nounInfo("vacation"), # [vacation.xml]
 'vaccination':nounInfo("vaccination"), # [vaccinate.xml]
 'vacuuming':nounInfo("vacuuming"), # [vacuum.xml]
 'validation':nounInfo("validation"), # [validate.xml]
 'valuation':nounInfo("valuation"), # [value.xml]
 'vamping-02':nounInfo("vamping"), # [vamp.xml]
 'variance-02':nounInfo("variance"), # [vary.xml]
 'variation':nounInfo("variation"), # [vary.xml]
 'vascularisation':nounInfo("vascularisation"), # [vascularize.xml]
 'vascularization':nounInfo("vascularization"), # [vascularize.xml]
 'vault-01':nounInfo("vault"), # [vault.xml]
 'ventilation':nounInfo("ventilation"), # [ventilate.xml]
 'verification':nounInfo("verification"), # [verify.xml]
 'veto-01':nounInfo("veto"), # [veto.xml]
 'vexation':nounInfo("vexation"), # [vex.xml]
 'vibration':nounInfo("vibration"), # [vibrate.xml]
 'view-01':nounInfo("view"), # [view.xml]
 'view-02':nounInfo("view"), # [view.xml]
 'viewpoint':nounInfo("viewpoint"), # [point.xml]
 'vigilance':nounInfo("vigilance"), # [vigilant.xml]
 'violation':nounInfo("violation"), # [violate.xml]
 'visit-01':nounInfo("visit"), # [visit.xml]
 'visualization':nounInfo("visualization"), # [visualize.xml]
 'vocalization':nounInfo("vocalization"), # [vocalize.xml]
 'voice-01':nounInfo("voice"), # [voice.xml]
 'voiding':nounInfo("voiding"), # [void.xml]
 'vomiting':nounInfo("vomiting"), # [vomit.xml]
 'vote-01':nounInfo("vote"), # [vote.xml]
 'voting':nounInfo("voting"), # [vote.xml]
 'vow-01':nounInfo("vow"), # [vow.xml]
 'voyage-01':nounInfo("voyage"), # [voyage.xml]
 'vulnerability':nounInfo("vulnerability"), # [vulnerable.xml]
 'waiting':nounInfo("waiting"), # [wait.xml]
 'waiving':nounInfo("waiving"), # [waive.xml]
 'walk-01':nounInfo("walk"), # [walk.xml]
 'walk-02':nounInfo("walk"), # [walk.xml]
 'war-01':nounInfo("war"), # [war.xml]
 'warming':nounInfo("warming"), # [warm.xml]
 'warning':nounInfo("warning"), # [warn.xml]
 'washing':nounInfo("washing"), # [wash.xml]
 'waste-01':nounInfo("waste"), # [waste.xml]
 'wasting':nounInfo("wasting"), # [waste.xml]
 'watch-01':nounInfo("watch"), # [watch.xml]
 'watching':nounInfo("watching"), # [watch.xml]
 'wave-01':nounInfo("wave"), # [wave.xml]
 'wave-03':nounInfo("wave"), # [wave.xml]
 'wave-04':nounInfo("wave"), # [wave.xml]
 'waxing':nounInfo("waxing"), # [wax.xml]
 'weakening':nounInfo("weakening"), # [weaken.xml]
 'weaning':nounInfo("weaning"), # [wean.xml]
 'wedding':nounInfo("wedding"), # [wed.xml]
 'weeping':nounInfo("weeping"), # [weep.xml]
 'welcome-01':nounInfo("welcome"), # [welcome.xml]
 'wellbeing':nounInfo("wellbeing"), # [better.xml]
 'westernization':nounInfo("westernization"), # [westernize.xml]
 'wetting':nounInfo("wetting"), # [wet.xml]
 'whack-01':nounInfo("whack"), # [whack.xml]
 'wheezing':nounInfo("wheezing"), # [wheeze.xml]
 'whining':nounInfo("whining"), # [whine.xml]
 'whitewash-02':nounInfo("whitewash"), # [whitewash.xml]
 'whitewash-03':nounInfo("whitewash"), # [whitewash.xml]
 'wholesale-01':nounInfo("wholesale"), # [wholesale.xml]
 'whooping':nounInfo("whooping"), # [whoop.xml]
 'whooping-02':nounInfo("whooping"), # [whoop.xml]
 'whooshing':nounInfo("whooshing"), # [whoosh.xml]
 'widening':nounInfo("widening"), # [widen.xml]
 'width':nounInfo("width"), # [widen.xml]
 'win-01':nounInfo("win"), # [win.xml]
 'wining':nounInfo("wining"), # [wine.xml]
 'wish-01':nounInfo("wish"), # [wish.xml]
 'withdrawal':nounInfo("withdrawal"), # [withdraw.xml]
 'withdrawal-02':nounInfo("withdrawal"), # [withdraw.xml]
 'withholding':nounInfo("withholding"), # [withhold.xml]
 'womanizing':nounInfo("womanizing"), # [womanize.xml]
 'wonder-02':nounInfo("wonder"), # [wonder.xml]
 'wording':nounInfo("wording"), # [word.xml]
 'work-01':nounInfo("work"), # [work.xml]
 'work-11':nounInfo("work"), # [work.xml]
 'work-12':nounInfo("work"), # [work.xml]
 'work-13':nounInfo("work"), # [work.xml]
 'working':nounInfo("working"), # [work.xml]
 'works':nounInfo("works"), # [work.xml]
 'worrying':nounInfo("worrying"), # [worry.xml]
 'worsening':nounInfo("worsening"), # [worsen.xml]
 'wrap-04':nounInfo("wrap"), # [wrap.xml]
 'wreck-01':nounInfo("wreck"), # [wreck.xml]
 'wrestling':nounInfo("wrestling"), # [wrestle.xml]
 'wringing':nounInfo("wringing"), # [wring.xml]
 'write-01':nounInfo("write"), # [write.xml]
 'x-ray':nounInfo("x-ray"), # [xray.xml]
 'xray-01':nounInfo("xray"), # [xray.xml]
 'yapping':nounInfo("yapping"), # [yap.xml]
 'yawning':nounInfo("yawning"), # [yawn.xml]
 'yellowing':nounInfo("yellowing"), # [yellow.xml]
}

# ======== ADJECTIVES 
adjectives = {
 'ablaze':adjInfo("ablaze"), # [fire.xml]
 'abominable-02':adjInfo("abominable"), # [abominate.xml]
 'absent-01':adjInfo("absent"), # [absent.xml]
 'abusive':adjInfo("abusive"), # [abuse.xml]
 'acceptable-02':adjInfo("acceptable"), # [accept.xml]
 'accessible-02':adjInfo("accessible"), # [access.xml]
 'accountable-02':adjInfo("accountable"), # [account.xml]
 'accustomed':adjInfo("accustomed"), # [accustom.xml]
 'achy':adjInfo("achy"), # [ache.xml]
 'active':adjInfo("active"), # [act.xml]
 'actual-02':adjInfo("actual"), # [actualize.xml]
 'addicted':adjInfo("addicted"), # [addict.xml]
 'addictive-02':adjInfo("addictive"), # [addict.xml]
 'adherent':adjInfo("adherent"), # [adhere.xml]
 'admirable-02':adjInfo("admirable"), # [admire.xml]
 'adopted':adjInfo("adopted"), # [adopt.xml]
 'adorable-02':adjInfo("adorable"), # [adore.xml]
 'advanced-02':adjInfo("advanced"), # [advance.xml]
 'advantageous':adjInfo("advantageous"), # [advantage.xml]
 'advisable':adjInfo("advisable"), # [advise.xml]
 'advisable-02':adjInfo("advisable"), # [advise.xml]
 'affected':adjInfo("affected"), # [affect.xml]
 'affordable-03':adjInfo("affordable"), # [afford.xml]
 'afire':adjInfo("afire"), # [fire.xml]
 'afraid':adjInfo("afraid"), # [fear.xml]
 'african-02':adjInfo("african"), # [africanize.xml]
 'aged':adjInfo("aged"), # [age.xml]
 'aggravating':adjInfo("aggravating"), # [aggravate.xml]
 'agitated':adjInfo("agitated"), # [agitate.xml]
 'agreeable-02':adjInfo("agreeable"), # [agree.xml]
 'alarming':adjInfo("alarming"), # [alarm.xml]
 'alert-02':adjInfo("alert"), # [alert.xml]
 'alien-01':adjInfo("alien"), # [alien.xml]
 'aligned':adjInfo("aligned"), # [align.xml]
 'alike-05':adjInfo("alike"), # [liken.xml]
 'alive':adjInfo("alive"), # [live.xml]
 'alive-08':adjInfo("alive"), # [live.xml]
 'allergic-01':adjInfo("allergic"), # [allergic.xml]
 'allowable-04':adjInfo("allowable"), # [allow.xml]
 'amazed':adjInfo("amazed"), # [amaze.xml]
 'amazing':adjInfo("amazing"), # [amaze.xml]
 'amendable-02':adjInfo("amendable"), # [amend.xml]
 'american-02':adjInfo("american"), # [americanize.xml]
 'amplified':adjInfo("amplified"), # [amplify.xml]
 'amusing':adjInfo("amusing"), # [amuse.xml]
 'angry':adjInfo("angry"), # [anger.xml]
 'annoyed':adjInfo("annoyed"), # [annoy.xml]
 'annoying':adjInfo("annoying"), # [annoy.xml]
 'answerable-02':adjInfo("answerable"), # [answer.xml]
 'antagonistic':adjInfo("antagonistic"), # [antagonize.xml]
 'anticoagulated':adjInfo("anticoagulated"), # [anticoagulate.xml]
 'appalled':adjInfo("appalled"), # [appall.xml]
 'appalling':adjInfo("appalling"), # [appall.xml]
 'apparent':adjInfo("apparent"), # [appear.xml]
 'appealing':adjInfo("appealing"), # [appeal.xml]
 'appearing':adjInfo("appearing"), # [appear.xml]
 'applicable-05':adjInfo("applicable"), # [apply.xml]
 'appreciated':adjInfo("appreciated"), # [appreciate.xml]
 'appreciative':adjInfo("appreciative"), # [appreciate.xml]
 'apprehensive':adjInfo("apprehensive"), # [apprehend.xml]
 'approachable-03':adjInfo("approachable"), # [approach.xml]
 'appropriate-02':adjInfo("appropriate"), # [appropriate.xml]
 'apt-01':adjInfo("apt"), # [apt.xml]
 'apt-03':adjInfo("apt"), # [apt.xml]
 'apt-04':adjInfo("apt"), # [apt.xml]
 'arbitrary-02':adjInfo("arbitrary"), # [arbitrate.xml]
 'arguable-03':adjInfo("arguable"), # [argue.xml]
 'armored':adjInfo("armored"), # [armor.xml]
 'arousable-02':adjInfo("arousable"), # [arouse.xml]
 'articulate-02':adjInfo("articulate"), # [articulate.xml]
 'ascending':adjInfo("ascending"), # [ascend.xml]
 'ashamed':adjInfo("ashamed"), # [shame.xml]
 'asleep':adjInfo("asleep"), # [sleep.xml]
 'associated':adjInfo("associated"), # [associate.xml]
 'assured':adjInfo("assured"), # [assure.xml]
 'astonished':adjInfo("astonished"), # [astonish.xml]
 'astonishing':adjInfo("astonishing"), # [astonish.xml]
 'astounding':adjInfo("astounding"), # [astound.xml]
 'atrophic':adjInfo("atrophic"), # [atrophy.xml]
 'attached':adjInfo("attached"), # [attach.xml]
 'attainable':adjInfo("attainable"), # [attain.xml]
 'attainable-02':adjInfo("attainable"), # [attain.xml]
 'attentive':adjInfo("attentive"), # [attend.xml]
 'attenuated':adjInfo("attenuated"), # [attenuate.xml]
 'attracted':adjInfo("attracted"), # [attract.xml]
 'attractive':adjInfo("attractive"), # [attract.xml]
 'attributable':adjInfo("attributable"), # [attribute.xml]
 'attributable-02':adjInfo("attributable"), # [attribute.xml]
 'audible':adjInfo("audible"), # [hear.xml]
 'audible-02':adjInfo("audible"), # [audition.xml]
 'authentic-02':adjInfo("authentic"), # [authenticate.xml]
 'available-02':adjInfo("available"), # [avail.xml]
 'average-03':adjInfo("average"), # [average.xml]
 'average-04':adjInfo("average"), # [average.xml]
 'awake-03':adjInfo("awake"), # [wake.xml]
 'awesome':adjInfo("awesome"), # [awe.xml]
 'awesome-02':adjInfo("awesome"), # [awe.xml]
 'awesome-03':adjInfo("awesome"), # [awe.xml]
 'back-03':adjInfo("back"), # [back.xml]
 'bad-02':adjInfo("bad"), # [worsen.xml]
 'bad-03':adjInfo("bad"), # [worsen.xml]
 'bad-04':adjInfo("bad"), # [worsen.xml]
 'bad-05':adjInfo("bad"), # [worsen.xml]
 'bad-07':adjInfo("bad"), # [worsen.xml]
 'bankrupt-01':adjInfo("bankrupt"), # [bankrupt.xml]
 'bare-02':adjInfo("bare"), # [bare.xml]
 'based':adjInfo("based"), # [base.xml]
 'beautiful-02':adjInfo("beautiful"), # [beautify.xml]
 'becoming':adjInfo("becoming"), # [become.xml]
 'believable-02':adjInfo("believable"), # [believe.xml]
 'bendy-07':adjInfo("bendy"), # [bend.xml]
 'beneficial':adjInfo("beneficial"), # [benefit.xml]
 'bent':adjInfo("bent"), # [bend.xml]
 'bent-03':adjInfo("bent"), # [bend.xml]
 'bent-04':adjInfo("bent"), # [bend.xml]
 'bent-05':adjInfo("bent"), # [bend.xml]
 'bent-06':adjInfo("bent"), # [bend.xml]
 'better':adjInfo("better"), # [recommend.xml]
 'biased':adjInfo("biased"), # [bias.xml]
 'binding':adjInfo("binding"), # [bind.xml]
 'binding-07':adjInfo("binding"), # [bind.xml]
 'black-04':adjInfo("black"), # [blacken.xml]
 'black-05':adjInfo("black"), # [blacken.xml]
 'black-06':adjInfo("black"), # [blacken.xml]
 'black-07':adjInfo("black"), # [blacken.xml]
 'blackened':adjInfo("blackened"), # [blacken.xml]
 'blanchable-03':adjInfo("blanchable"), # [blanch.xml]
 'blind-02':adjInfo("blind"), # [blind.xml]
 'blinded':adjInfo("blinded"), # [blind.xml]
 'bloated':adjInfo("bloated"), # [bloat.xml]
 'blunt-01':adjInfo("blunt"), # [blunt.xml]
 'blunt-02':adjInfo("blunt"), # [blunt.xml]
 'blurry':adjInfo("blurry"), # [blur.xml]
 'bold-02':adjInfo("bold"), # [embolden.xml]
 'bold-03':adjInfo("bold"), # [embolden.xml]
 'booked':adjInfo("booked"), # [book.xml]
 'bored':adjInfo("bored"), # [bore.xml]
 'boring':adjInfo("boring"), # [bore.xml]
 'bossy':adjInfo("bossy"), # [boss.xml]
 'bothered':adjInfo("bothered"), # [bother.xml]
 'bothersome':adjInfo("bothersome"), # [bother.xml]
 'bound':adjInfo("bound"), # [bind.xml]
 'brainwashed':adjInfo("brainwashed"), # [brainwash.xml]
 'brave-02':adjInfo("brave"), # [brave.xml]
 'breaded':adjInfo("breaded"), # [bread.xml]
 'bright-02':adjInfo("bright"), # [brighten.xml]
 'bright-03':adjInfo("bright"), # [brighten.xml]
 'brilliant-01':adjInfo("brilliant"), # [brilliant.xml]
 'brilliant-02':adjInfo("brilliant"), # [brilliant.xml]
 'broad-02':adjInfo("broad"), # [broaden.xml]
 'broke-23':adjInfo("broke"), # [break.xml]
 'broken':adjInfo("broken"), # [break.xml]
 'brokenhearted':adjInfo("brokenhearted"), # [break.xml]
 'brutal-02':adjInfo("brutal"), # [brutalize.xml]
 'bulky-02':adjInfo("bulky"), # [bulk.xml]
 'bustling':adjInfo("bustling"), # [bustle.xml]
 'busy-01':adjInfo("busy"), # [busy.xml]
 'busy-02':adjInfo("busy"), # [busy.xml]
 'bypassable-02':adjInfo("bypassable"), # [bypass.xml]
 'calcified':adjInfo("calcified"), # [calcify.xml]
 'calculating':adjInfo("calculating"), # [calculate.xml]
 'calm-03':adjInfo("calm"), # [calm.xml]
 'capable-01':adjInfo("capable"), # [capable.xml]
 'careful':adjInfo("careful"), # [care.xml]
 'catching':adjInfo("catching"), # [catch.xml]
 'cautious-02':adjInfo("cautious"), # [caution.xml]
 'centered':adjInfo("centered"), # [center.xml]
 'centrist':adjInfo("centrist"), # [center.xml]
 'certified':adjInfo("certified"), # [certify.xml]
 'challenging':adjInfo("challenging"), # [challenge.xml]
 'characteristic-02':adjInfo("characteristic"), # [characterize.xml]
 'cheap-02':adjInfo("cheap"), # [cheapen.xml]
 'cheaper':adjInfo("cheaper"), # [cheapen.xml]
 'chill-03':adjInfo("chill"), # [chill.xml]
 'chilling':adjInfo("chilling"), # [chill.xml]
 'chilly-04':adjInfo("chilly"), # [chill.xml]
 'circumscribed':adjInfo("circumscribed"), # [circumscribe.xml]
 'civilized':adjInfo("civilized"), # [civilize.xml]
 'classy-02':adjInfo("classy"), # [class.xml]
 'clean-04':adjInfo("clean"), # [clean.xml]
 'clear-06':adjInfo("clear"), # [clear.xml]
 'clear-07':adjInfo("clear"), # [clear.xml]
 'clear-08':adjInfo("clear"), # [clear.xml]
 'clear-09':adjInfo("clear"), # [clear.xml]
 'clearer':adjInfo("clearer"), # [clear.xml]
 'clever-01':adjInfo("clever"), # [clever.xml]
 'clingy':adjInfo("clingy"), # [cling.xml]
 'close-10':adjInfo("close"), # [close.xml]
 'close-11':adjInfo("close"), # [close.xml]
 'close-12':adjInfo("close"), # [close.xml]
 'close-13':adjInfo("close"), # [close.xml]
 'closed':adjInfo("closed"), # [close.xml]
 'closer':adjInfo("closer"), # [close.xml]
 'cloudy-02':adjInfo("cloudy"), # [cloud.xml]
 'coercive':adjInfo("coercive"), # [coerce.xml]
 'coherent':adjInfo("coherent"), # [cohere.xml]
 'cold-01':adjInfo("cold"), # [cold.xml]
 'cold-02':adjInfo("cold"), # [cold.xml]
 'cold-03':adjInfo("cold"), # [cold.xml]
 'collusive':adjInfo("collusive"), # [collude.xml]
 'comfortable-02':adjInfo("comfortable"), # [comfort.xml]
 'commendable-02':adjInfo("commendable"), # [commend.xml]
 'committed':adjInfo("committed"), # [commit.xml]
 'comparable-02':adjInfo("comparable"), # [compare.xml]
 'comparable-03':adjInfo("comparable"), # [compare.xml]
 'competent-01':adjInfo("competent"), # [competent.xml]
 'competitive':adjInfo("competitive"), # [compete.xml]
 'complete-01':adjInfo("complete"), # [complete.xml]
 'complete-02':adjInfo("complete"), # [complete.xml]
 'complete-03':adjInfo("complete"), # [complete.xml]
 'compliant':adjInfo("compliant"), # [comply.xml]
 'complicated':adjInfo("complicated"), # [complicate.xml]
 'concealed':adjInfo("concealed"), # [conceal.xml]
 'concentrated':adjInfo("concentrated"), # [concentrate.xml]
 'concerned':adjInfo("concerned"), # [concern.xml]
 'concerning':adjInfo("concerning"), # [concern.xml]
 'concerning-03':adjInfo("concerning"), # [concern.xml]
 'conclusive':adjInfo("conclusive"), # [conclude.xml]
 'concrete-02':adjInfo("concrete"), # [concrete.xml]
 'concurrent-02':adjInfo("concurrent"), # [concur.xml]
 'conditioned':adjInfo("conditioned"), # [condition.xml]
 'conducive-01':adjInfo("conducive"), # [conducive.xml]
 'conductive':adjInfo("conductive"), # [conduct.xml]
 'confident-01':adjInfo("confident"), # [confident.xml]
 'conflicted':adjInfo("conflicted"), # [conflict.xml]
 'conflictive':adjInfo("conflictive"), # [conflict.xml]
 'confused':adjInfo("confused"), # [confuse.xml]
 'confusing':adjInfo("confusing"), # [confuse.xml]
 'congested':adjInfo("congested"), # [congest.xml]
 'connected':adjInfo("connected"), # [connect.xml]
 'consensual':adjInfo("consensual"), # [consent.xml]
 'consensual-02':adjInfo("consensual"), # [consent.xml]
 'consequential-01':adjInfo("consequential"), # [consequential.xml]
 'considered':adjInfo("considered"), # [consider.xml]
 'consistent-01':adjInfo("consistent"), # [consistent.xml]
 'consistent-02':adjInfo("consistent"), # [consistent.xml]
 'constipated':adjInfo("constipated"), # [constipate.xml]
 'constipating':adjInfo("constipating"), # [constipate.xml]
 'constructive-02':adjInfo("constructive"), # [construct.xml]
 'consuming':adjInfo("consuming"), # [consume.xml]
 'contained':adjInfo("contained"), # [contain.xml]
 'content-02':adjInfo("content"), # [content.xml]
 'contraindicated':adjInfo("contraindicated"), # [contraindicate.xml]
 'contrary-01':adjInfo("contrary"), # [contrary.xml]
 'contributive':adjInfo("contributive"), # [contribute.xml]
 'contributory':adjInfo("contributory"), # [contribute.xml]
 'controlled':adjInfo("controlled"), # [control.xml]
 'controlling':adjInfo("controlling"), # [control.xml]
 'conversant':adjInfo("conversant"), # [converse.xml]
 'conversant-02':adjInfo("conversant"), # [converse.xml]
 'convinced':adjInfo("convinced"), # [convince.xml]
 'convincing':adjInfo("convincing"), # [convince.xml]
 'cooked':adjInfo("cooked"), # [cook.xml]
 'cool-04':adjInfo("cool"), # [cool.xml]
 'cool-05':adjInfo("cool"), # [cool.xml]
 'cool-06':adjInfo("cool"), # [cool.xml]
 'cooperative':adjInfo("cooperative"), # [cooperate.xml]
 'coping':adjInfo("coping"), # [cope.xml]
 'correct-02':adjInfo("correct"), # [correct.xml]
 'corrupt-01':adjInfo("corrupt"), # [corrupt.xml]
 'crafty':adjInfo("crafty"), # [craft.xml]
 'crafty-02':adjInfo("crafty"), # [craft.xml]
 'crampy':adjInfo("crampy"), # [cramp.xml]
 'crappy-02':adjInfo("crappy"), # [crap.xml]
 'crappy-03':adjInfo("crappy"), # [crap.xml]
 'crappy-04':adjInfo("crappy"), # [crap.xml]
 'crazy-02':adjInfo("crazy"), # [craze.xml]
 'crazy-03':adjInfo("crazy"), # [craze.xml]
 'creepy-04':adjInfo("creepy"), # [creep.xml]
 'criminal-03':adjInfo("criminal"), # [criminalize.xml]
 'critical':adjInfo("critical"), # [criticize.xml]
 'critical-02':adjInfo("critical"), # [criticize.xml]
 'critical-03':adjInfo("critical"), # [criticize.xml]
 'crowded':adjInfo("crowded"), # [crowd.xml]
 'crushed':adjInfo("crushed"), # [crush.xml]
 'cuddly-02':adjInfo("cuddly"), # [cuddle.xml]
 'culpable-01':adjInfo("culpable"), # [culpable.xml]
 'curable':adjInfo("curable"), # [cure.xml]
 'curative':adjInfo("curative"), # [cure.xml]
 'curious-01':adjInfo("curious"), # [curious.xml]
 'curious-02':adjInfo("curious"), # [curious.xml]
 'curled':adjInfo("curled"), # [curl.xml]
 'damaged':adjInfo("damaged"), # [damage.xml]
 'damaging':adjInfo("damaging"), # [damage.xml]
 'damning':adjInfo("damning"), # [damn.xml]
 'damp-03':adjInfo("damp"), # [dampen.xml]
 'dampened':adjInfo("dampened"), # [dampen.xml]
 'dangerous':adjInfo("dangerous"), # [endanger.xml]
 'daring':adjInfo("daring"), # [dare.xml]
 'dark-02':adjInfo("dark"), # [darken.xml]
 'dark-03':adjInfo("dark"), # [darken.xml]
 'daunting':adjInfo("daunting"), # [daunt.xml]
 'deaf-02':adjInfo("deaf"), # [deafen.xml]
 'debatable-02':adjInfo("debatable"), # [debate.xml]
 'debilitating':adjInfo("debilitating"), # [debilitate.xml]
 'deceased':adjInfo("deceased"), # [decease.xml]
 'deceptive':adjInfo("deceptive"), # [deceive.xml]
 'decompressed':adjInfo("decompressed"), # [decompress.xml]
 'decreased':adjInfo("decreased"), # [decrease.xml]
 'decrypted':adjInfo("decrypted"), # [decrypt.xml]
 'dedicated':adjInfo("dedicated"), # [dedicate.xml]
 'deep-02':adjInfo("deep"), # [deepen.xml]
 'deep-03':adjInfo("deep"), # [deepen.xml]
 'deep-04':adjInfo("deep"), # [deepen.xml]
 'deep-05':adjInfo("deep"), # [deepen.xml]
 'defined':adjInfo("defined"), # [define.xml]
 'deformable-02':adjInfo("deformable"), # [deform.xml]
 'delayed':adjInfo("delayed"), # [delay.xml]
 'democratic-02':adjInfo("democratic"), # [democratize.xml]
 'deniable-02':adjInfo("deniable"), # [deny.xml]
 'dependent':adjInfo("dependent"), # [depend.xml]
 'deplorable-02':adjInfo("deplorable"), # [deplore.xml]
 'depressed':adjInfo("depressed"), # [depress.xml]
 'depressing':adjInfo("depressing"), # [depress.xml]
 'descended':adjInfo("descended"), # [descend.xml]
 'deserving':adjInfo("deserving"), # [deserve.xml]
 'desirable-02':adjInfo("desirable"), # [desire.xml]
 'desperate':adjInfo("desperate"), # [despair.xml]
 'desperate-02':adjInfo("desperate"), # [despair.xml]
 'destructive':adjInfo("destructive"), # [destroy.xml]
 'determined':adjInfo("determined"), # [determine.xml]
 'determined-02':adjInfo("determined"), # [determine.xml]
 'detestable-02':adjInfo("detestable"), # [detest.xml]
 'developed':adjInfo("developed"), # [develop.xml]
 'deviated':adjInfo("deviated"), # [deviate.xml]
 'diagnostic':adjInfo("diagnostic"), # [diagnose.xml]
 'different':adjInfo("different"), # [differ.xml]
 'differentiated':adjInfo("differentiated"), # [differentiate.xml]
 'diffuse-01':adjInfo("diffuse"), # [diffuse.xml]
 'diffusely-02':adjInfo("diffusely"), # [diffuse.xml]
 'digressing':adjInfo("digressing"), # [digress.xml]
 'dilated':adjInfo("dilated"), # [dilate.xml]
 'diminished':adjInfo("diminished"), # [diminish.xml]
 'direct-02':adjInfo("direct"), # [direct.xml]
 'dirty-02':adjInfo("dirty"), # [dirty.xml]
 'disappointed':adjInfo("disappointed"), # [disappoint.xml]
 'disappointing':adjInfo("disappointing"), # [disappoint.xml]
 'discernable':adjInfo("discernable"), # [discern.xml]
 'discernable-02':adjInfo("discernable"), # [discern.xml]
 'discolored':adjInfo("discolored"), # [discolor.xml]
 'discovered':adjInfo("discovered"), # [discover.xml]
 'discriminatory':adjInfo("discriminatory"), # [discriminate.xml]
 'disgraceful':adjInfo("disgraceful"), # [disgrace.xml]
 'disgruntled':adjInfo("disgruntled"), # [disgruntle.xml]
 'disgusted':adjInfo("disgusted"), # [disgust.xml]
 'disgusting':adjInfo("disgusting"), # [disgust.xml]
 'disheartened':adjInfo("disheartened"), # [dishearten.xml]
 'dispiriting':adjInfo("dispiriting"), # [dispirit.xml]
 'distant-02':adjInfo("distant"), # [distance.xml]
 'distended':adjInfo("distended"), # [distend.xml]
 'distorted':adjInfo("distorted"), # [distort.xml]
 'distracted':adjInfo("distracted"), # [distract.xml]
 'distracting':adjInfo("distracting"), # [distract.xml]
 'distressed':adjInfo("distressed"), # [distress.xml]
 'disturbing':adjInfo("disturbing"), # [disturb.xml]
 'divided':adjInfo("divided"), # [divide.xml]
 'divisive':adjInfo("divisive"), # [divide.xml]
 'divorced':adjInfo("divorced"), # [divorce.xml]
 'dizzy-02':adjInfo("dizzy"), # [dizzy.xml]
 'dizzying':adjInfo("dizzying"), # [dizzy.xml]
 'doable-10':adjInfo("doable"), # [do.xml]
 'dominant':adjInfo("dominant"), # [dominate.xml]
 'dominated':adjInfo("dominated"), # [dominate.xml]
 'done':adjInfo("done"), # [do.xml]
 'done-08':adjInfo("done"), # [do.xml]
 'done-09':adjInfo("done"), # [do.xml]
 'doomed':adjInfo("doomed"), # [doom.xml]
 'dope-04':adjInfo("dope"), # [dope.xml]
 'doubtful':adjInfo("doubtful"), # [doubt.xml]
 'down-03':adjInfo("down"), # [down.xml]
 'drained':adjInfo("drained"), # [drain.xml]
 'dreadful-02':adjInfo("dreadful"), # [dread.xml]
 'dreadful-03':adjInfo("dreadful"), # [dread.xml]
 'dreadful-04':adjInfo("dreadful"), # [dread.xml]
 'dressed':adjInfo("dressed"), # [dress.xml]
 'drippy':adjInfo("drippy"), # [drip.xml]
 'driven':adjInfo("driven"), # [drive.xml]
 'drowsy':adjInfo("drowsy"), # [drowse.xml]
 'dry-04':adjInfo("dry"), # [dry.xml]
 'dry-05':adjInfo("dry"), # [dry.xml]
 'dry-06':adjInfo("dry"), # [dry.xml]
 'dry-07':adjInfo("dry"), # [dry.xml]
 'dry-08':adjInfo("dry"), # [dry.xml]
 'dubious-02':adjInfo("dubious"), # [doubt.xml]
 'due-01':adjInfo("due"), # [due.xml]
 'due-02':adjInfo("due"), # [due.xml]
 'due-03':adjInfo("due"), # [due.xml]
 'dull-02':adjInfo("dull"), # [dull.xml]
 'dull-03':adjInfo("dull"), # [dull.xml]
 'dull-04':adjInfo("dull"), # [dull.xml]
 'dumpy-02':adjInfo("dumpy"), # [dump.xml]
 'dyed':adjInfo("dyed"), # [dye.xml]
 'eager-01':adjInfo("eager"), # [eager.xml]
 'earnest-01':adjInfo("earnest"), # [earnest.xml]
 'easy-05':adjInfo("easy"), # [ease.xml]
 'edgy-04':adjInfo("edgy"), # [edge.xml]
 'edgy-05':adjInfo("edgy"), # [edge.xml]
 'educated':adjInfo("educated"), # [educate.xml]
 'effective-04':adjInfo("effective"), # [affect.xml]
 'efficient-01':adjInfo("efficient"), # [efficient.xml]
 'electable-05':adjInfo("electable"), # [elect.xml]
 'electoral':adjInfo("electoral"), # [elect.xml]
 'electoral-03':adjInfo("electoral"), # [elect.xml]
 'electoral-04':adjInfo("electoral"), # [elect.xml]
 'elevated':adjInfo("elevated"), # [elevate.xml]
 'elusive':adjInfo("elusive"), # [elude.xml]
 'embarrassed':adjInfo("embarrassed"), # [embarrass.xml]
 'embarrassing':adjInfo("embarrassing"), # [embarrass.xml]
 'emotional-02':adjInfo("emotional"), # [emote.xml]
 'employed':adjInfo("employed"), # [employ.xml]
 'empty-02':adjInfo("empty"), # [empty.xml]
 'encouraging':adjInfo("encouraging"), # [encourage.xml]
 'endangered':adjInfo("endangered"), # [endanger.xml]
 'engaged':adjInfo("engaged"), # [engage.xml]
 'enhancing':adjInfo("enhancing"), # [enhance.xml]
 'enjoyable-02':adjInfo("enjoyable"), # [enjoy.xml]
 'enlarged':adjInfo("enlarged"), # [enlarge.xml]
 'enlightening':adjInfo("enlightening"), # [enlighten.xml]
 'entangled':adjInfo("entangled"), # [entangle.xml]
 'entertained':adjInfo("entertained"), # [entertain.xml]
 'enthusiastic-03':adjInfo("enthusiastic"), # [enthuse.xml]
 'equal-01':adjInfo("equal"), # [equal.xml]
 'equal-02':adjInfo("equal"), # [equal.xml]
 'equivocal':adjInfo("equivocal"), # [equivocate.xml]
 'european-02':adjInfo("european"), # [europeanize.xml]
 'even-02':adjInfo("even"), # [even.xml]
 'even-03':adjInfo("even"), # [even.xml]
 'evident':adjInfo("evident"), # [evidence.xml]
 'exalted':adjInfo("exalted"), # [exalt.xml]
 'excellent':adjInfo("excellent"), # [excel.xml]
 'excellent-02':adjInfo("excellent"), # [excel.xml]
 'excellent-03':adjInfo("excellent"), # [excel.xml]
 'excessive-02':adjInfo("excessive"), # [exceed.xml]
 'excited':adjInfo("excited"), # [excite.xml]
 'exciting':adjInfo("exciting"), # [excite.xml]
 'exclusive-02':adjInfo("exclusive"), # [exclude.xml]
 'exempt-01':adjInfo("exempt"), # [exempt.xml]
 'exhausted':adjInfo("exhausted"), # [exhaust.xml]
 'exhausting':adjInfo("exhausting"), # [exhaust.xml]
 'existent':adjInfo("existent"), # [exist.xml]
 'expanded':adjInfo("expanded"), # [expand.xml]
 'expectative':adjInfo("expectative"), # [expect.xml]
 'experienced':adjInfo("experienced"), # [experience.xml]
 'expert-01':adjInfo("expert"), # [expert.xml]
 'expired':adjInfo("expired"), # [expire.xml]
 'explicit-02':adjInfo("explicit"), # [explicate.xml]
 'explicit-03':adjInfo("explicit"), # [explicate.xml]
 'extensive-03':adjInfo("extensive"), # [extend.xml]
 'exudative':adjInfo("exudative"), # [exude.xml]
 'fair-01':adjInfo("fair"), # [fair.xml]
 'fair-02':adjInfo("fair"), # [fair.xml]
 'fair-03':adjInfo("fair"), # [fair.xml]
 'fair-04':adjInfo("fair"), # [fair.xml]
 'fake-02':adjInfo("fake"), # [fake.xml]
 'familiar':adjInfo("familiar"), # [familiarize.xml]
 'familiar-02':adjInfo("familiar"), # [familiarize.xml]
 'famous':adjInfo("famous"), # [fame.xml]
 'fantastic-02':adjInfo("fantastic"), # [fantasize.xml]
 'fantastic-03':adjInfo("fantastic"), # [fantasize.xml]
 'fantastic-04':adjInfo("fantastic"), # [fantasize.xml]
 'fascinating':adjInfo("fascinating"), # [fascinate.xml]
 'fashionable-02':adjInfo("fashionable"), # [fashion.xml]
 'fast-02':adjInfo("fast"), # [fast.xml]
 'fat-03':adjInfo("fat"), # [fatten.xml]
 'fatigued':adjInfo("fatigued"), # [fatigue.xml]
 'faulty':adjInfo("faulty"), # [fault.xml]
 'favorable':adjInfo("favorable"), # [favor.xml]
 'favourable':adjInfo("favourable"), # [favor.xml]
 'fearful':adjInfo("fearful"), # [fear.xml]
 'fiery-06':adjInfo("fiery"), # [fire.xml]
 'financial-03':adjInfo("financial"), # [finance.xml]
 'financing':adjInfo("financing"), # [finance.xml]
 'fine-02':adjInfo("fine"), # [fine.xml]
 'fine-03':adjInfo("fine"), # [fine.xml]
 'fine-04':adjInfo("fine"), # [fine.xml]
 'finished':adjInfo("finished"), # [finish.xml]
 'firm-03':adjInfo("firm"), # [firm.xml]
 'fit-03':adjInfo("fit"), # [fit.xml]
 'fit-05':adjInfo("fit"), # [fit.xml]
 'fit-06':adjInfo("fit"), # [fit.xml]
 'fitting':adjInfo("fitting"), # [fit.xml]
 'fixed':adjInfo("fixed"), # [fix.xml]
 'flat-03':adjInfo("flat"), # [flatten.xml]
 'flat-04':adjInfo("flat"), # [flatten.xml]
 'flat-05':adjInfo("flat"), # [flatten.xml]
 'flat-06':adjInfo("flat"), # [flatten.xml]
 'flawed':adjInfo("flawed"), # [flaw.xml]
 'flexible-03':adjInfo("flexible"), # [flex.xml]
 'flexible-04':adjInfo("flexible"), # [flex.xml]
 'fluctuant':adjInfo("fluctuant"), # [fluctuate.xml]
 'flustered':adjInfo("flustered"), # [fluster.xml]
 'focal-02':adjInfo("focal"), # [focalize.xml]
 'focused':adjInfo("focused"), # [focus.xml]
 'foggy-02':adjInfo("foggy"), # [fog.xml]
 'foggy-03':adjInfo("foggy"), # [fog.xml]
 'foreseeable':adjInfo("foreseeable"), # [foresee.xml]
 'foreseeable-02':adjInfo("foreseeable"), # [foresee.xml]
 'fortunate-01':adjInfo("fortunate"), # [fortunate.xml]
 'free-03':adjInfo("free"), # [free.xml]
 'free-04':adjInfo("free"), # [free.xml]
 'freezing':adjInfo("freezing"), # [freeze.xml]
 'frequent-02':adjInfo("frequent"), # [frequent.xml]
 'fresh-03':adjInfo("fresh"), # [freshen.xml]
 'fresh-04':adjInfo("fresh"), # [freshen.xml]
 'fried':adjInfo("fried"), # [fry.xml]
 'fried-02':adjInfo("fried"), # [fry.xml]
 'friendly-01':adjInfo("friendly"), # [friendly.xml]
 'frightening':adjInfo("frightening"), # [frighten.xml]
 'frustrated':adjInfo("frustrated"), # [frustrate.xml]
 'frustrating':adjInfo("frustrating"), # [frustrate.xml]
 'fucked':adjInfo("fucked"), # [fuck.xml]
 'fulfilled':adjInfo("fulfilled"), # [fulfill.xml]
 'fulfilling':adjInfo("fulfilling"), # [fulfill.xml]
 'full':adjInfo("full"), # [fill.xml]
 'full-09':adjInfo("full"), # [fill.xml]
 'full-10':adjInfo("full"), # [fill.xml]
 'fun-01':adjInfo("fun"), # [fun.xml]
 'functional':adjInfo("functional"), # [function.xml]
 'funnier':adjInfo("funnier"), # [fun.xml]
 'funny-02':adjInfo("funny"), # [fun.xml]
 'funny-03':adjInfo("funny"), # [fun.xml]
 'furious-02':adjInfo("furious"), # [infuriate.xml]
 'fussed':adjInfo("fussed"), # [fuss.xml]
 'fuzzy':adjInfo("fuzzy"), # [fuzz.xml]
 'gagworthy-02':adjInfo("gagworthy"), # [gag.xml]
 'gay-01':adjInfo("gay"), # [gay.xml]
 'gay-02':adjInfo("gay"), # [gay.xml]
 'gay-03':adjInfo("gay"), # [gay.xml]
 'general-02':adjInfo("general"), # [generalize.xml]
 'generous-01':adjInfo("generous"), # [generous.xml]
 'glad-02':adjInfo("glad"), # [gladden.xml]
 'glistening':adjInfo("glistening"), # [glisten.xml]
 'glorious':adjInfo("glorious"), # [glory.xml]
 'glossy':adjInfo("glossy"), # [gloss.xml]
 'gone':adjInfo("gone"), # [go.xml]
 'gone-33':adjInfo("gone"), # [go.xml]
 'good-02':adjInfo("good"), # [better.xml]
 'good-03':adjInfo("good"), # [better.xml]
 'good-04':adjInfo("good"), # [better.xml]
 'good-07':adjInfo("good"), # [better.xml]
 'good-08':adjInfo("good"), # [better.xml]
 'gracious-02':adjInfo("gracious"), # [grace.xml]
 'gray-02':adjInfo("gray"), # [gray.xml]
 'graying':adjInfo("graying"), # [gray.xml]
 'green-02':adjInfo("green"), # [green.xml]
 'green-03':adjInfo("green"), # [green.xml]
 'greying':adjInfo("greying"), # [gray.xml]
 'gross-03':adjInfo("gross"), # [gross.xml]
 'gross-04':adjInfo("gross"), # [gross.xml]
 'gross-05':adjInfo("gross"), # [gross.xml]
 'gross-06':adjInfo("gross"), # [gross.xml]
 'grounded':adjInfo("grounded"), # [ground.xml]
 'growing':adjInfo("growing"), # [grow.xml]
 'grown-05':adjInfo("grown"), # [grow.xml]
 'guilty-01':adjInfo("guilty"), # [guilty.xml]
 'hammered-06':adjInfo("hammered"), # [hammer.xml]
 'handy-01':adjInfo("handy"), # [handy.xml]
 'handy-02':adjInfo("handy"), # [handy.xml]
 'happy-01':adjInfo("happy"), # [happy.xml]
 'happy-02':adjInfo("happy"), # [happy.xml]
 'hard-02':adjInfo("hard"), # [harden.xml]
 'hard-03':adjInfo("hard"), # [harden.xml]
 'hard-04':adjInfo("hard"), # [harden.xml]
 'harder':adjInfo("harder"), # [harden.xml]
 'harmful-02':adjInfo("harmful"), # [harm.xml]
 'harsh-02':adjInfo("harsh"), # [harshen.xml]
 'hassly':adjInfo("hassly"), # [hassle.xml]
 'hateful':adjInfo("hateful"), # [hate.xml]
 'hazardous-02':adjInfo("hazardous"), # [hazard.xml]
 'healed':adjInfo("healed"), # [heal.xml]
 'heartbroken':adjInfo("heartbroken"), # [break.xml]
 'heated':adjInfo("heated"), # [heat.xml]
 'helpful-04':adjInfo("helpful"), # [help.xml]
 'hemorrhagic':adjInfo("hemorrhagic"), # [hemorrhage.xml]
 'hesitant':adjInfo("hesitant"), # [hesitate.xml]
 'high-02':adjInfo("high"), # [heighten.xml]
 'high-03':adjInfo("high"), # [heighten.xml]
 'high-04':adjInfo("high"), # [heighten.xml]
 'honest-01':adjInfo("honest"), # [honest.xml]
 'honorable-03':adjInfo("honorable"), # [honor.xml]
 'honored':adjInfo("honored"), # [honor.xml]
 'hopeful-02':adjInfo("hopeful"), # [hope.xml]
 'hopeful-03':adjInfo("hopeful"), # [hope.xml]
 'hopeless-01':adjInfo("hopeless"), # [hopeless.xml]
 'hopeless-02':adjInfo("hopeless"), # [hopeless.xml]
 'horriffic':adjInfo("horriffic"), # [horrify.xml]
 'hospitalized':adjInfo("hospitalized"), # [hospitalize.xml]
 'hot-03':adjInfo("hot"), # [heat.xml]
 'hot-04':adjInfo("hot"), # [heat.xml]
 'hot-05':adjInfo("hot"), # [heat.xml]
 'human-02':adjInfo("human"), # [humanize.xml]
 'humid-02':adjInfo("humid"), # [humidify.xml]
 'humiliated':adjInfo("humiliated"), # [humiliate.xml]
 'hungry':adjInfo("hungry"), # [hunger.xml]
 'hurtful-03':adjInfo("hurtful"), # [hurt.xml]
 'hydrated':adjInfo("hydrated"), # [hydrate.xml]
 'hypertrophic':adjInfo("hypertrophic"), # [hypertrophy.xml]
 'hypothetical-02':adjInfo("hypothetical"), # [hypothesize.xml]
 'ideal-02':adjInfo("ideal"), # [idealize.xml]
 'idealised':adjInfo("idealised"), # [idealize.xml]
 'idealized':adjInfo("idealized"), # [idealize.xml]
 'identical-01':adjInfo("identical"), # [identical.xml]
 'ignorant-02':adjInfo("ignorant"), # [ignore.xml]
 'ill-01':adjInfo("ill"), # [ill.xml]
 'ill-02':adjInfo("ill"), # [ill.xml]
 'imaginable-02':adjInfo("imaginable"), # [imagine.xml]
 'immortal-04':adjInfo("immortal"), # [immortalize.xml]
 'immortalized':adjInfo("immortalized"), # [immortalize.xml]
 'immortalizing':adjInfo("immortalizing"), # [immortalize.xml]
 'immune-02':adjInfo("immune"), # [immunize.xml]
 'immunoreactive':adjInfo("immunoreactive"), # [immunoreact.xml]
 'impaired':adjInfo("impaired"), # [impair.xml]
 'important-01':adjInfo("important"), # [important.xml]
 'impoverished':adjInfo("impoverished"), # [impoverish.xml]
 'impressed':adjInfo("impressed"), # [impress.xml]
 'impressive':adjInfo("impressive"), # [impress.xml]
 'improved':adjInfo("improved"), # [improve.xml]
 'inclined':adjInfo("inclined"), # [incline.xml]
 'inclined-02':adjInfo("inclined"), # [incline.xml]
 'inclusive':adjInfo("inclusive"), # [include.xml]
 'incumbent':adjInfo("incumbent"), # [incumbency.xml]
 'indicative':adjInfo("indicative"), # [indicate.xml]
 'indifferent-01':adjInfo("indifferent"), # [indifferent.xml]
 'indispensable-01':adjInfo("indispensable"), # [indispensable.xml]
 'individualistic-01':adjInfo("individualistic"), # [individualistic.xml]
 'individualized':adjInfo("individualized"), # [individualistic.xml]
 'indurated':adjInfo("indurated"), # [indurate.xml]
 'infected':adjInfo("infected"), # [infect.xml]
 'inferior-01':adjInfo("inferior"), # [inferior.xml]
 'inferior-02':adjInfo("inferior"), # [inferior.xml]
 'infested':adjInfo("infested"), # [infest.xml]
 'inflamed':adjInfo("inflamed"), # [inflame.xml]
 'inflammatory':adjInfo("inflammatory"), # [inflame.xml]
 'influential':adjInfo("influential"), # [influence.xml]
 'informative':adjInfo("informative"), # [inform.xml]
 'informed':adjInfo("informed"), # [inform.xml]
 'ingrained':adjInfo("ingrained"), # [ingrain.xml]
 'inhibitory':adjInfo("inhibitory"), # [inhibit.xml]
 'injured':adjInfo("injured"), # [injure.xml]
 'innocent-01':adjInfo("innocent"), # [innocent.xml]
 'innovative':adjInfo("innovative"), # [innovate.xml]
 'inspected':adjInfo("inspected"), # [inspect.xml]
 'inspirational':adjInfo("inspirational"), # [inspire.xml]
 'inspired':adjInfo("inspired"), # [inspire.xml]
 'inspiring':adjInfo("inspiring"), # [inspire.xml]
 'insulated':adjInfo("insulated"), # [insulate.xml]
 'insulting':adjInfo("insulting"), # [insult.xml]
 'intelligent-01':adjInfo("intelligent"), # [intelligent.xml]
 'intense-02':adjInfo("intense"), # [intensify.xml]
 'intent-02':adjInfo("intent"), # [intend.xml]
 'intentional':adjInfo("intentional"), # [intend.xml]
 'intentioned':adjInfo("intentioned"), # [intend.xml]
 'interactive':adjInfo("interactive"), # [interact.xml]
 'interested':adjInfo("interested"), # [interest.xml]
 'interesting':adjInfo("interesting"), # [interest.xml]
 'intermixed':adjInfo("intermixed"), # [intermix.xml]
 'internal-02':adjInfo("internal"), # [internalize.xml]
 'interspersed':adjInfo("interspersed"), # [intersperse.xml]
 'intimate-02':adjInfo("intimate"), # [intimate.xml]
 'intimidating':adjInfo("intimidating"), # [intimidate.xml]
 'intrigued':adjInfo("intrigued"), # [intrigue.xml]
 'intriguing':adjInfo("intriguing"), # [intrigue.xml]
 'invasive':adjInfo("invasive"), # [invade.xml]
 'invited':adjInfo("invited"), # [invite.xml]
 'involved':adjInfo("involved"), # [involve.xml]
 'involved-02':adjInfo("involved"), # [involve.xml]
 'irritable-02':adjInfo("irritable"), # [irritate.xml]
 'isolated':adjInfo("isolated"), # [isolate.xml]
 'itching':adjInfo("itching"), # [itch.xml]
 'itchy':adjInfo("itchy"), # [itch.xml]
 'jammed':adjInfo("jammed"), # [jam.xml]
 'jealous-01':adjInfo("jealous"), # [jealous.xml]
 'jealous-02':adjInfo("jealous"), # [jealous.xml]
 'just-02':adjInfo("just"), # [justify.xml]
 'justified':adjInfo("justified"), # [justify.xml]
 'keen-02':adjInfo("keen"), # [keen.xml]
 'kegstand':adjInfo("kegstand"), # [stand.xml]
 'key-02':adjInfo("key"), # [key.xml]
 'kind-01':adjInfo("kind"), # [kind.xml]
 'kind-of':adjInfo("kind-of"), # [kind.xml]
 'knowledgeable':adjInfo("knowledgeable"), # [know.xml]
 'known':adjInfo("known"), # [know.xml]
 'last-02':adjInfo("last"), # [last.xml]
 'late-01':adjInfo("late"), # [late.xml]
 'late-02':adjInfo("late"), # [late.xml]
 'late-03':adjInfo("late"), # [late.xml]
 'laughable-03':adjInfo("laughable"), # [laugh.xml]
 'lax-01':adjInfo("lax"), # [lax.xml]
 'left':adjInfo("left"), # [leave.xml]
 'left-19':adjInfo("left"), # [leave.xml]
 'left-20':adjInfo("left"), # [leave.xml]
 'legal-02':adjInfo("legal"), # [legalize.xml]
 'legitimate-02':adjInfo("legitimate"), # [legitimize.xml]
 'less-02':adjInfo("less"), # [lessen.xml]
 'less-03':adjInfo("less"), # [lessen.xml]
 'level-04':adjInfo("level"), # [level.xml]
 'liable-01':adjInfo("liable"), # [liable.xml]
 'liable-02':adjInfo("liable"), # [liable.xml]
 'liberal-02':adjInfo("liberal"), # [liberalize.xml]
 'liberal-03':adjInfo("liberal"), # [liberalize.xml]
 'light-05':adjInfo("light"), # [lighten.xml]
 'light-06':adjInfo("light"), # [lighten.xml]
 'light-07':adjInfo("light"), # [lighten.xml]
 'like-04':adjInfo("like"), # [liken.xml]
 'likely-01':adjInfo("likely"), # [likely.xml]
 'liking-06':adjInfo("liking"), # [liken.xml]
 'limited':adjInfo("limited"), # [limit.xml]
 'livable-07':adjInfo("livable"), # [live.xml]
 'lived':adjInfo("lived"), # [live.xml]
 'living':adjInfo("living"), # [live.xml]
 'local-02':adjInfo("local"), # [localize.xml]
 'locked':adjInfo("locked"), # [lock.xml]
 'lodged':adjInfo("lodged"), # [lodge.xml]
 'long':adjInfo("long"), # [jump.xml]
 'long-03':adjInfo("long"), # [lengthen.xml]
 'looking':adjInfo("looking"), # [look.xml]
 'loose-03':adjInfo("loose"), # [loosen.xml]
 'loose-04':adjInfo("loose"), # [loosen.xml]
 'looser':adjInfo("looser"), # [loosen.xml]
 'low-02':adjInfo("low"), # [low.xml]
 'low-03':adjInfo("low"), # [low.xml]
 'low-04':adjInfo("low"), # [low.xml]
 'loyal-01':adjInfo("loyal"), # [loyal.xml]
 'lying':adjInfo("lying"), # [lay.xml]
 'lytic':adjInfo("lytic"), # [lyse.xml]
 'mad-02':adjInfo("mad"), # [madden.xml]
 'mad-03':adjInfo("mad"), # [madden.xml]
 'mad-04':adjInfo("mad"), # [madden.xml]
 'maimed':adjInfo("maimed"), # [maim.xml]
 'mainstream-02':adjInfo("mainstream"), # [mainstream.xml]
 'major-02':adjInfo("major"), # [major.xml]
 'malignant-02':adjInfo("malignant"), # [malign.xml]
 'malnourished-01':adjInfo("malnourished"), # [malnourished.xml]
 'manageable-03':adjInfo("manageable"), # [manage.xml]
 'manageable-04':adjInfo("manageable"), # [manage.xml]
 'mandatory':adjInfo("mandatory"), # [mandate.xml]
 'manifest-01':adjInfo("manifest"), # [manifest.xml]
 'marginal-02':adjInfo("marginal"), # [marginalize.xml]
 'marginal-03':adjInfo("marginal"), # [marginalize.xml]
 'marked':adjInfo("marked"), # [mark.xml]
 'married':adjInfo("married"), # [marry.xml]
 'marveling':adjInfo("marveling"), # [marvel.xml]
 'mature-02':adjInfo("mature"), # [mature.xml]
 'mean-03':adjInfo("mean"), # [mean.xml]
 'mean-04':adjInfo("mean"), # [mean.xml]
 'meaningful-05':adjInfo("meaningful"), # [mean.xml]
 'measurable-03':adjInfo("measurable"), # [measure.xml]
 'metastatic':adjInfo("metastatic"), # [metastasize.xml]
 'minimal-02':adjInfo("minimal"), # [minimize.xml]
 'minor-01':adjInfo("minor"), # [minor.xml]
 'minor-02':adjInfo("minor"), # [minor.xml]
 'misguided':adjInfo("misguided"), # [misguide.xml]
 'misinformed':adjInfo("misinformed"), # [misinform.xml]
 'missed':adjInfo("missed"), # [miss.xml]
 'missing':adjInfo("missing"), # [miss.xml]
 'misunderstood':adjInfo("misunderstood"), # [misunderstand.xml]
 'mobile-02':adjInfo("mobile"), # [mobilize.xml]
 'mobilizing':adjInfo("mobilizing"), # [mobilize.xml]
 'moderate-03':adjInfo("moderate"), # [moderate.xml]
 'modern-02':adjInfo("modern"), # [modernize.xml]
 'moist-02':adjInfo("moist"), # [moisten.xml]
 'molten':adjInfo("molten"), # [melt.xml]
 'moral-02':adjInfo("moral"), # [moralize.xml]
 'mortified':adjInfo("mortified"), # [mortify.xml]
 'motivated':adjInfo("motivated"), # [motivate.xml]
 'moveable-06':adjInfo("moveable"), # [move.xml]
 'muddled':adjInfo("muddled"), # [muddle.xml]
 'muffled':adjInfo("muffled"), # [muffle.xml]
 'murdered':adjInfo("murdered"), # [murder.xml]
 'muted':adjInfo("muted"), # [mute.xml]
 'mutilated':adjInfo("mutilated"), # [mutilate.xml]
 'narrow-02':adjInfo("narrow"), # [narrow.xml]
 'narrowed':adjInfo("narrowed"), # [narrow.xml]
 'natural-02':adjInfo("natural"), # [naturalize.xml]
 'natural-03':adjInfo("natural"), # [naturalize.xml]
 'nauseated':adjInfo("nauseated"), # [nauseate.xml]
 'near-02':adjInfo("near"), # [near.xml]
 'necessary-02':adjInfo("necessary"), # [necessitate.xml]
 'necrotic':adjInfo("necrotic"), # [necrotize.xml]
 'needed':adjInfo("needed"), # [need.xml]
 'neg':adjInfo("neg"), # [negate.xml]
 'negative-01':adjInfo("negative"), # [negate.xml]
 'negative-02':adjInfo("negative"), # [negate.xml]
 'negative-03':adjInfo("negative"), # [negate.xml]
 'negative-05':adjInfo("negative"), # [negate.xml]
 'negative-06':adjInfo("negative"), # [negate.xml]
 'nervous-01':adjInfo("nervous"), # [nervous.xml]
 'neutral-02':adjInfo("neutral"), # [neutralize.xml]
 'new-01':adjInfo("new"), # [new.xml]
 'new-02':adjInfo("new"), # [new.xml]
 'nice-01':adjInfo("nice"), # [nice.xml]
 'nicer':adjInfo("nicer"), # [nice.xml]
 'normal-02':adjInfo("normal"), # [normalize.xml]
 'normalized':adjInfo("normalized"), # [normalize.xml]
 'nosy-02':adjInfo("nosy"), # [nose.xml]
 'notable-04':adjInfo("notable"), # [note.xml]
 'noted':adjInfo("noted"), # [note.xml]
 'noteworthy-03':adjInfo("noteworthy"), # [note.xml]
 'noticeable-02':adjInfo("noticeable"), # [notice.xml]
 'notorious-01':adjInfo("notorious"), # [notorious.xml]
 'nourished':adjInfo("nourished"), # [nourish.xml]
 'null-02':adjInfo("null"), # [nullify.xml]
 'obedient':adjInfo("obedient"), # [obey.xml]
 'objectionable-02':adjInfo("objectionable"), # [object.xml]
 'obscure-02':adjInfo("obscure"), # [obscure.xml]
 'obsessed':adjInfo("obsessed"), # [obsess.xml]
 'obsessional':adjInfo("obsessional"), # [obsess.xml]
 'obstructed':adjInfo("obstructed"), # [obstruct.xml]
 'obstructing':adjInfo("obstructing"), # [obstruct.xml]
 'obvious-01':adjInfo("obvious"), # [obvious.xml]
 'offended':adjInfo("offended"), # [offend.xml]
 'offensive':adjInfo("offensive"), # [offend.xml]
 'oily-03':adjInfo("oily"), # [oil.xml]
 'ok':adjInfo("ok"), # [okay.xml]
 'okay-01':adjInfo("okay"), # [okay.xml]
 'okay-02':adjInfo("okay"), # [okay.xml]
 'okay-03':adjInfo("okay"), # [okay.xml]
 'okay-04':adjInfo("okay"), # [okay.xml]
 'on':adjInfo("on"), # [on.xml]
 'on-01':adjInfo("on"), # [on.xml]
 'ongoing':adjInfo("ongoing"), # [go.xml]
 'onto':adjInfo("onto"), # [on.xml]
 'open-04':adjInfo("open"), # [open.xml]
 'open-05':adjInfo("open"), # [open.xml]
 'open-06':adjInfo("open"), # [open.xml]
 'open-07':adjInfo("open"), # [open.xml]
 'open-08':adjInfo("open"), # [open.xml]
 'open-09':adjInfo("open"), # [open.xml]
 'opening':adjInfo("opening"), # [open.xml]
 'operable-03':adjInfo("operable"), # [operate.xml]
 'opposed':adjInfo("opposed"), # [oppose.xml]
 'opposite-01':adjInfo("opposite"), # [opposite.xml]
 'optimized':adjInfo("optimized"), # [optimize.xml]
 'ordered':adjInfo("ordered"), # [order.xml]
 'orderly-04':adjInfo("orderly"), # [order.xml]
 'organized':adjInfo("organized"), # [organize.xml]
 'oriented':adjInfo("oriented"), # [orient.xml]
 'ossified':adjInfo("ossified"), # [ossify.xml]
 'out-02':adjInfo("out"), # [out.xml]
 'out-03':adjInfo("out"), # [out.xml]
 'out-04':adjInfo("out"), # [out.xml]
 'out-05':adjInfo("out"), # [out.xml]
 'out-06':adjInfo("out"), # [out.xml]
 'outraged':adjInfo("outraged"), # [outrage.xml]
 'outrageous':adjInfo("outrageous"), # [outrage.xml]
 'outrageous-02':adjInfo("outrageous"), # [outrage.xml]
 'over-01':adjInfo("over"), # [over.xml]
 'over-02':adjInfo("over"), # [over.xml]
 'overexpressed':adjInfo("overexpressed"), # [overexpress.xml]
 'overjoyed':adjInfo("overjoyed"), # [overjoy.xml]
 'overpriced':adjInfo("overpriced"), # [overprice.xml]
 'overwhelmed':adjInfo("overwhelmed"), # [overwhelm.xml]
 'overwhelming':adjInfo("overwhelming"), # [overwhelm.xml]
 'owned':adjInfo("owned"), # [own.xml]
 'paid':adjInfo("paid"), # [pay.xml]
 'pained':adjInfo("pained"), # [pain.xml]
 'painful':adjInfo("painful"), # [pain.xml]
 'pale-03':adjInfo("pale"), # [pale.xml]
 'partial-01':adjInfo("partial"), # [partial.xml]
 'passed':adjInfo("passed"), # [pass.xml]
 'patent-02':adjInfo("patent"), # [patent.xml]
 'patient-01':adjInfo("patient"), # [patient.xml]
 'peculiar-01':adjInfo("peculiar"), # [peculiar.xml]
 'pending':adjInfo("pending"), # [pend.xml]
 'perceptive-02':adjInfo("perceptive"), # [perceive.xml]
 'perfect-02':adjInfo("perfect"), # [perfect.xml]
 'perished':adjInfo("perished"), # [perish.xml]
 'permissible-03':adjInfo("permissible"), # [permit.xml]
 'permissive-02':adjInfo("permissive"), # [permit.xml]
 'persistent':adjInfo("persistent"), # [persist.xml]
 'personal-02':adjInfo("personal"), # [personalize.xml]
 'persuasive-02':adjInfo("persuasive"), # [persuade.xml]
 'pervasive':adjInfo("pervasive"), # [pervade.xml]
 'pink-04':adjInfo("pink"), # [pink.xml]
 'pissed':adjInfo("pissed"), # [piss.xml]
 'pissed-04':adjInfo("pissed"), # [piss.xml]
 'pissy-05':adjInfo("pissy"), # [piss.xml]
 'pitiful-02':adjInfo("pitiful"), # [pity.xml]
 'pleasant-02':adjInfo("pleasant"), # [please.xml]
 'pleased':adjInfo("pleased"), # [please.xml]
 'pleasing':adjInfo("pleasing"), # [please.xml]
 'pointless':adjInfo("pointless"), # [point.xml]
 'poised':adjInfo("poised"), # [poise.xml]
 'poisonous-03':adjInfo("poisonous"), # [poison.xml]
 'polite-01':adjInfo("polite"), # [polite.xml]
 'political-02':adjInfo("political"), # [politicize.xml]
 'politicized':adjInfo("politicized"), # [politicize.xml]
 'popular-02':adjInfo("popular"), # [popularize.xml]
 'possessive-02':adjInfo("possessive"), # [possess.xml]
 'possessive-03':adjInfo("possessive"), # [possess.xml]
 'possible-01':adjInfo("possible"), # [possible.xml]
 'powerful-02':adjInfo("powerful"), # [power.xml]
 'practical-02':adjInfo("practical"), # [practice.xml]
 'practical-03':adjInfo("practical"), # [practice.xml]
 'pre-emptive':adjInfo("pre-emptive"), # [preempt.xml]
 'pre-existing':adjInfo("pre-existing"), # [preexist.xml]
 'precautionary':adjInfo("precautionary"), # [precaution.xml]
 'precautious':adjInfo("precautious"), # [precaution.xml]
 'predictable-02':adjInfo("predictable"), # [predict.xml]
 'predominant':adjInfo("predominant"), # [predominate.xml]
 'preemptive':adjInfo("preemptive"), # [preempt.xml]
 'preexisting':adjInfo("preexisting"), # [preexist.xml]
 'preferable':adjInfo("preferable"), # [prefer.xml]
 'preferable-02':adjInfo("preferable"), # [prefer.xml]
 'preferential':adjInfo("preferential"), # [prefer.xml]
 'preferential-03':adjInfo("preferential"), # [prefer.xml]
 'pregnant':adjInfo("pregnant"), # [impregnate.xml]
 'prepared':adjInfo("prepared"), # [prepare.xml]
 'present-02':adjInfo("present"), # [present.xml]
 'presentable-03':adjInfo("presentable"), # [present.xml]
 'preserved':adjInfo("preserved"), # [preserve.xml]
 'pressed':adjInfo("pressed"), # [press.xml]
 'pressing':adjInfo("pressing"), # [press.xml]
 'presumptive':adjInfo("presumptive"), # [presume.xml]
 'presumptuous-02':adjInfo("presumptuous"), # [presume.xml]
 'private-02':adjInfo("private"), # [privatize.xml]
 'private-03':adjInfo("private"), # [privatize.xml]
 'productive-03':adjInfo("productive"), # [produce.xml]
 'proficient-01':adjInfo("proficient"), # [proficient.xml]
 'profitable-02':adjInfo("profitable"), # [profit.xml]
 'progressive':adjInfo("progressive"), # [progress.xml]
 'progressive-02':adjInfo("progressive"), # [progress.xml]
 'prohibitive':adjInfo("prohibitive"), # [prohibit.xml]
 'prohibitive-02':adjInfo("prohibitive"), # [prohibit.xml]
 'promising':adjInfo("promising"), # [promise.xml]
 'prone-01':adjInfo("prone"), # [prone.xml]
 'prone-02':adjInfo("prone"), # [prone.xml]
 'pronounced-02':adjInfo("pronounced"), # [pronounce.xml]
 'prosperous':adjInfo("prosperous"), # [prosper.xml]
 'protective':adjInfo("protective"), # [protect.xml]
 'protective-02':adjInfo("protective"), # [protect.xml]
 'proteolytic':adjInfo("proteolytic"), # [proteolyze.xml]
 'proteolytical':adjInfo("proteolytical"), # [proteolyze.xml]
 'proud':adjInfo("proud"), # [pride.xml]
 'proven':adjInfo("proven"), # [prove.xml]
 'provocative':adjInfo("provocative"), # [provoke.xml]
 'provoking':adjInfo("provoking"), # [provoke.xml]
 'public-02':adjInfo("public"), # [publicize.xml]
 'publicized':adjInfo("publicized"), # [publicize.xml]
 'punishable-02':adjInfo("punishable"), # [punish.xml]
 'pure-02':adjInfo("pure"), # [purify.xml]
 'purple-02':adjInfo("purple"), # [purple.xml]
 'puzzled':adjInfo("puzzled"), # [puzzle.xml]
 'puzzling':adjInfo("puzzling"), # [puzzle.xml]
 'qualified':adjInfo("qualified"), # [qualify.xml]
 'questionable':adjInfo("questionable"), # [question.xml]
 'quick-02':adjInfo("quick"), # [quicken.xml]
 'quicker':adjInfo("quicker"), # [quicken.xml]
 'quiet-04':adjInfo("quiet"), # [quieten.xml]
 'radical-02':adjInfo("radical"), # [radicalize.xml]
 'rare-02':adjInfo("rare"), # [rarefy.xml]
 'rare-03':adjInfo("rare"), # [rarefy.xml]
 'rational-02':adjInfo("rational"), # [rationalize.xml]
 'rational-03':adjInfo("rational"), # [rationalize.xml]
 'reaching':adjInfo("reaching"), # [reach.xml]
 'reactionary-02':adjInfo("reactionary"), # [react.xml]
 'reactive':adjInfo("reactive"), # [react.xml]
 'ready-02':adjInfo("ready"), # [ready.xml]
 'real-04':adjInfo("real"), # [realize.xml]
 'real-05':adjInfo("real"), # [realize.xml]
 'realistic-03':adjInfo("realistic"), # [realize.xml]
 'reasonable-02':adjInfo("reasonable"), # [reason.xml]
 'reassuring':adjInfo("reassuring"), # [reassure.xml]
 'received':adjInfo("received"), # [receive.xml]
 'reconstituted':adjInfo("reconstituted"), # [reconstitute.xml]
 'recyclable':adjInfo("recyclable"), # [recycle.xml]
 'recyclable-02':adjInfo("recyclable"), # [recycle.xml]
 'red-02':adjInfo("red"), # [redden.xml]
 'reddish-03':adjInfo("reddish"), # [redden.xml]
 'reduced':adjInfo("reduced"), # [reduce.xml]
 'referring':adjInfo("referring"), # [refer.xml]
 'regretful':adjInfo("regretful"), # [regret.xml]
 'regrettable-02':adjInfo("regrettable"), # [regret.xml]
 'regular-02':adjInfo("regular"), # [regularize.xml]
 'regular-03':adjInfo("regular"), # [regularize.xml]
 'regulated':adjInfo("regulated"), # [regulate.xml]
 'related':adjInfo("related"), # [relate.xml]
 'related-04':adjInfo("related"), # [relate.xml]
 'relative-05':adjInfo("relative"), # [relate.xml]
 'relaxing':adjInfo("relaxing"), # [relax.xml]
 'releasable-02':adjInfo("releasable"), # [release.xml]
 'relevant-01':adjInfo("relevant"), # [relevant.xml]
 'reliable-02':adjInfo("reliable"), # [rely.xml]
 'reliant':adjInfo("reliant"), # [rely.xml]
 'relieved':adjInfo("relieved"), # [relieve.xml]
 'relieving':adjInfo("relieving"), # [relieve.xml]
 'reluctant-01':adjInfo("reluctant"), # [reluctant.xml]
 'remarkable-02':adjInfo("remarkable"), # [remark.xml]
 'remarkable-03':adjInfo("remarkable"), # [remark.xml]
 'remarried':adjInfo("remarried"), # [remarry.xml]
 'removable-02':adjInfo("removable"), # [remove.xml]
 'renowned':adjInfo("renowned"), # [renown.xml]
 'replaced':adjInfo("replaced"), # [replace.xml]
 'replied':adjInfo("replied"), # [reply.xml]
 'representative':adjInfo("representative"), # [represent.xml]
 'reproducible':adjInfo("reproducible"), # [reproduce.xml]
 'reproducible-02':adjInfo("reproducible"), # [reproduce.xml]
 'resentful':adjInfo("resentful"), # [resent.xml]
 'reserved':adjInfo("reserved"), # [reserve.xml]
 'reserved-02':adjInfo("reserved"), # [reserve.xml]
 'resistant':adjInfo("resistant"), # [resist.xml]
 'resolved':adjInfo("resolved"), # [resolve.xml]
 'resonant':adjInfo("resonant"), # [resonate.xml]
 'respectful':adjInfo("respectful"), # [respect.xml]
 'respiratory':adjInfo("respiratory"), # [respire.xml]
 'respiratory-02':adjInfo("respiratory"), # [respire.xml]
 'responsible-01':adjInfo("responsible"), # [responsible.xml]
 'responsible-02':adjInfo("responsible"), # [responsible.xml]
 'responsible-03':adjInfo("responsible"), # [responsible.xml]
 'responsive-02':adjInfo("responsive"), # [respond.xml]
 'restrained':adjInfo("restrained"), # [restrain.xml]
 'resultant':adjInfo("resultant"), # [result.xml]
 'retarded':adjInfo("retarded"), # [retard.xml]
 'retentive-02':adjInfo("retentive"), # [retain.xml]
 'retired':adjInfo("retired"), # [retire.xml]
 'returnable-07':adjInfo("returnable"), # [return.xml]
 'revolutionary-04':adjInfo("revolutionary"), # [revolt.xml]
 'rewarding':adjInfo("rewarding"), # [reward.xml]
 'rid-01':adjInfo("rid"), # [rid.xml]
 'ridiculous-02':adjInfo("ridiculous"), # [ridicule.xml]
 'right':adjInfo("right"), # [request.xml]
 'right-02':adjInfo("right"), # [right.xml]
 'right-03':adjInfo("right"), # [right.xml]
 'right-04':adjInfo("right"), # [right.xml]
 'right-06':adjInfo("right"), # [right.xml]
 'right-08':adjInfo("right"), # [right.xml]
 'righteous-07':adjInfo("righteous"), # [right.xml]
 'ripe-02':adjInfo("ripe"), # [ripen.xml]
 'risky-02':adjInfo("risky"), # [risk.xml]
 'romantic-02':adjInfo("romantic"), # [romance.xml]
 'romantic-03':adjInfo("romantic"), # [romance.xml]
 'rooted':adjInfo("rooted"), # [root.xml]
 'rough-04':adjInfo("rough"), # [roughen.xml]
 'rough-05':adjInfo("rough"), # [roughen.xml]
 'round-06':adjInfo("round"), # [round.xml]
 'rounded':adjInfo("rounded"), # [round.xml]
 'rubbery-02':adjInfo("rubbery"), # [rubberize.xml]
 'rude-01':adjInfo("rude"), # [rude.xml]
 'rushed':adjInfo("rushed"), # [rush.xml]
 'sad-02':adjInfo("sad"), # [sadden.xml]
 'safe-01':adjInfo("safe"), # [safe.xml]
 'safer':adjInfo("safer"), # [safe.xml]
 'safest':adjInfo("safest"), # [safe.xml]
 'same-01':adjInfo("same"), # [same.xml]
 'sampled':adjInfo("sampled"), # [sample.xml]
 'satisfactory-03':adjInfo("satisfactory"), # [satisfy.xml]
 'satisfied':adjInfo("satisfied"), # [satisfy.xml]
 'saveable-05':adjInfo("saveable"), # [save.xml]
 'saveable-06':adjInfo("saveable"), # [save.xml]
 'saveable-07':adjInfo("saveable"), # [save.xml]
 'scant-02':adjInfo("scant"), # [scant.xml]
 'scared':adjInfo("scared"), # [scare.xml]
 'scary-03':adjInfo("scary"), # [scare.xml]
 'sclerotic':adjInfo("sclerotic"), # [sclerose.xml]
 'screwed':adjInfo("screwed"), # [screw.xml]
 'scrupulous':adjInfo("scrupulous"), # [scruple.xml]
 'scrupulous-02':adjInfo("scrupulous"), # [scruple.xml]
 'seasoned':adjInfo("seasoned"), # [season.xml]
 'secure-02':adjInfo("secure"), # [secure.xml]
 'sedated':adjInfo("sedated"), # [sedate.xml]
 'sensible':adjInfo("sensible"), # [sense.xml]
 'sensitive-03':adjInfo("sensitive"), # [sense.xml]
 'separate-02':adjInfo("separate"), # [separate.xml]
 'separated':adjInfo("separated"), # [separate.xml]
 'serious-01':adjInfo("serious"), # [serious.xml]
 'serious-02':adjInfo("serious"), # [serious.xml]
 'set-08':adjInfo("set"), # [set.xml]
 'set-16':adjInfo("set"), # [set.xml]
 'severable-02':adjInfo("severable"), # [sever.xml]
 'sexy-02':adjInfo("sexy"), # [sex.xml]
 'shameful':adjInfo("shameful"), # [shame.xml]
 'shaped':adjInfo("shaped"), # [shape.xml]
 'sharp-02':adjInfo("sharp"), # [sharpen.xml]
 'shocked':adjInfo("shocked"), # [shock.xml]
 'shocking':adjInfo("shocking"), # [shock.xml]
 'short-05':adjInfo("short"), # [shorten.xml]
 'short-06':adjInfo("short"), # [shorten.xml]
 'short-07':adjInfo("short"), # [shorten.xml]
 'short-08':adjInfo("short"), # [shorten.xml]
 'shorter':adjInfo("shorter"), # [shorten.xml]
 'shot-11':adjInfo("shot"), # [shoot.xml]
 'shy-03':adjInfo("shy"), # [shy.xml]
 'shy-04':adjInfo("shy"), # [shy.xml]
 'sick-02':adjInfo("sick"), # [sicken.xml]
 'sick-03':adjInfo("sick"), # [sicken.xml]
 'sick-04':adjInfo("sick"), # [sicken.xml]
 'sick-05':adjInfo("sick"), # [sicken.xml]
 'sickening':adjInfo("sickening"), # [sicken.xml]
 'significant':adjInfo("significant"), # [signify.xml]
 'significant-02':adjInfo("significant"), # [signify.xml]
 'simple-02':adjInfo("simple"), # [simplify.xml]
 'simple-03':adjInfo("simple"), # [simplify.xml]
 'single':adjInfo("single"), # [mind.xml]
 'single-02':adjInfo("single"), # [single.xml]
 'single-03':adjInfo("single"), # [single.xml]
 'single-minded':adjInfo("single-minded"), # [mind.xml]
 'singleminded':adjInfo("singleminded"), # [mind.xml]
 'skillful-01':adjInfo("skillful"), # [skillful.xml]
 'sleepy-06':adjInfo("sleepy"), # [sleep.xml]
 'slow-04':adjInfo("slow"), # [slow.xml]
 'slow-05':adjInfo("slow"), # [slow.xml]
 'slower':adjInfo("slower"), # [slow.xml]
 'smart-04':adjInfo("smart"), # [smarten.xml]
 'smart-05':adjInfo("smart"), # [smarten.xml]
 'smart-06':adjInfo("smart"), # [smarten.xml]
 'smooth-04':adjInfo("smooth"), # [smoothen.xml]
 'smooth-06':adjInfo("smooth"), # [smoothen.xml]
 'sneaky-03':adjInfo("sneaky"), # [sneak.xml]
 'snowy-02':adjInfo("snowy"), # [snow.xml]
 'sob-02':adjInfo("sob"), # [sob.xml]
 'sober-03':adjInfo("sober"), # [sober.xml]
 'social-03':adjInfo("social"), # [socialize.xml]
 'soft-02':adjInfo("soft"), # [soften.xml]
 'solid-02':adjInfo("solid"), # [solidify.xml]
 'sorrowful':adjInfo("sorrowful"), # [sorrow.xml]
 'sorry-01':adjInfo("sorry"), # [sorry.xml]
 'sounding':adjInfo("sounding"), # [sound.xml]
 'special-02':adjInfo("special"), # [specialize.xml]
 'specific':adjInfo("specific"), # [specify.xml]
 'specific-02':adjInfo("specific"), # [specify.xml]
 'speedy-03':adjInfo("speedy"), # [speed.xml]
 'spent':adjInfo("spent"), # [spend.xml]
 'split-01':adjInfo("split"), # [split.xml]
 'stable-03':adjInfo("stable"), # [stabilize.xml]
 'stanced':adjInfo("stanced"), # [stand.xml]
 'stanced-15':adjInfo("stanced"), # [stand.xml]
 'standard-02':adjInfo("standard"), # [standardize.xml]
 'startling':adjInfo("startling"), # [startle.xml]
 'starving':adjInfo("starving"), # [starve.xml]
 'steeped':adjInfo("steeped"), # [steep.xml]
 'stenotic':adjInfo("stenotic"), # [stenose.xml]
 'stereotypic-02':adjInfo("stereotypic"), # [stereotype.xml]
 'sterile-02':adjInfo("sterile"), # [sterilize.xml]
 'stiff-02':adjInfo("stiff"), # [stiffen.xml]
 'stiff-04':adjInfo("stiff"), # [stiffen.xml]
 'stifling':adjInfo("stifling"), # [stifle.xml]
 'stigmatizing':adjInfo("stigmatizing"), # [stigmatize.xml]
 'stoked-02':adjInfo("stoked"), # [stoke.xml]
 'stopped':adjInfo("stopped"), # [stop.xml]
 'straight-04':adjInfo("straight"), # [straighten.xml]
 'straight-05':adjInfo("straight"), # [straighten.xml]
 'straight-06':adjInfo("straight"), # [straighten.xml]
 'stranded':adjInfo("stranded"), # [strand.xml]
 'strappped':adjInfo("strappped"), # [strap.xml]
 'stressed':adjInfo("stressed"), # [stress.xml]
 'stressful':adjInfo("stressful"), # [stress.xml]
 'strong-02':adjInfo("strong"), # [strengthen.xml]
 'stunned':adjInfo("stunned"), # [stun.xml]
 'stunning':adjInfo("stunning"), # [stun.xml]
 'stupefied':adjInfo("stupefied"), # [stupefy.xml]
 'subject-01':adjInfo("subject"), # [subject.xml]
 'subject-02':adjInfo("subject"), # [subject.xml]
 'subjective-03':adjInfo("subjective"), # [subject.xml]
 'submissive':adjInfo("submissive"), # [submit.xml]
 'successful':adjInfo("successful"), # [succeed.xml]
 'sufficient':adjInfo("sufficient"), # [suffice.xml]
 'suggestive':adjInfo("suggestive"), # [suggest.xml]
 'suitable-04':adjInfo("suitable"), # [suit.xml]
 'suited':adjInfo("suited"), # [suit.xml]
 'superior-01':adjInfo("superior"), # [superior.xml]
 'supportive':adjInfo("supportive"), # [support.xml]
 'supposed':adjInfo("supposed"), # [suppose.xml]
 'suppressible-02':adjInfo("suppressible"), # [suppress.xml]
 'sure':adjInfo("sure"), # [ensure.xml]
 'sure-02':adjInfo("sure"), # [ensure.xml]
 'surgical':adjInfo("surgical"), # [surgery.xml]
 'surgical-02':adjInfo("surgical"), # [surgery.xml]
 'surprised':adjInfo("surprised"), # [surprise.xml]
 'surprising':adjInfo("surprising"), # [surprise.xml]
 'suspicious':adjInfo("suspicious"), # [suspect.xml]
 'suspicious-02':adjInfo("suspicious"), # [suspect.xml]
 'suspicious-03':adjInfo("suspicious"), # [suspect.xml]
 'sustainable-03':adjInfo("sustainable"), # [sustain.xml]
 'sustainable-04':adjInfo("sustainable"), # [sustain.xml]
 'swamped':adjInfo("swamped"), # [swamp.xml]
 'sweaty-05':adjInfo("sweaty"), # [sweat.xml]
 'sweet-03':adjInfo("sweet"), # [sweeten.xml]
 'sweet-04':adjInfo("sweet"), # [sweeten.xml]
 'sweet-05':adjInfo("sweet"), # [sweeten.xml]
 'swollen':adjInfo("swollen"), # [swell.xml]
 'sympathetic':adjInfo("sympathetic"), # [sympathize.xml]
 'synchronous-02':adjInfo("synchronous"), # [synchronize.xml]
 'synergistic':adjInfo("synergistic"), # [synergize.xml]
 'tabled':adjInfo("tabled"), # [table.xml]
 'tan-02':adjInfo("tan"), # [tan.xml]
 'tanned':adjInfo("tanned"), # [tan.xml]
 'targeted':adjInfo("targeted"), # [target.xml]
 'teary-06':adjInfo("teary"), # [tear.xml]
 'tempted':adjInfo("tempted"), # [tempt.xml]
 'tempting':adjInfo("tempting"), # [tempt.xml]
 'tender-02':adjInfo("tender"), # [tender.xml]
 'tense-03':adjInfo("tense"), # [tense.xml]
 'terrible-01':adjInfo("terrible"), # [terrible.xml]
 'terrible-02':adjInfo("terrible"), # [terrible.xml]
 'terrible-03':adjInfo("terrible"), # [terrible.xml]
 'terrified':adjInfo("terrified"), # [terrify.xml]
 'terrifying':adjInfo("terrifying"), # [terrify.xml]
 'thankful-02':adjInfo("thankful"), # [thank.xml]
 'thick-02':adjInfo("thick"), # [thicken.xml]
 'thick-03':adjInfo("thick"), # [thicken.xml]
 'thick-04':adjInfo("thick"), # [thicken.xml]
 'thick-05':adjInfo("thick"), # [thicken.xml]
 'thickened':adjInfo("thickened"), # [thicken.xml]
 'thin-03':adjInfo("thin"), # [thin.xml]
 'thinner':adjInfo("thinner"), # [thin.xml]
 'thirsty':adjInfo("thirsty"), # [thirst.xml]
 'threatening':adjInfo("threatening"), # [threaten.xml]
 'thrilled':adjInfo("thrilled"), # [thrill.xml]
 'thrilling':adjInfo("thrilling"), # [thrill.xml]
 'tight-03':adjInfo("tight"), # [tighten.xml]
 'tight-04':adjInfo("tight"), # [tighten.xml]
 'tight-05':adjInfo("tight"), # [tighten.xml]
 'tighter':adjInfo("tighter"), # [tighten.xml]
 'timely-03':adjInfo("timely"), # [time.xml]
 'tinged':adjInfo("tinged"), # [tinge.xml]
 'tired':adjInfo("tired"), # [tire.xml]
 'toilsome-02':adjInfo("toilsome"), # [toil.xml]
 'tolerable-02':adjInfo("tolerable"), # [tolerate.xml]
 'tolerant':adjInfo("tolerant"), # [tolerate.xml]
 'tolerated':adjInfo("tolerated"), # [tolerate.xml]
 'torn':adjInfo("torn"), # [tear.xml]
 'touchy-09':adjInfo("touchy"), # [touch.xml]
 'touchy-10':adjInfo("touchy"), # [touch.xml]
 'tough-02':adjInfo("tough"), # [toughen.xml]
 'tough-03':adjInfo("tough"), # [toughen.xml]
 'tough-04':adjInfo("tough"), # [toughen.xml]
 'tougher':adjInfo("tougher"), # [toughen.xml]
 'transient-02':adjInfo("transient"), # [transit.xml]
 'trapped':adjInfo("trapped"), # [trap.xml]
 'travelled':adjInfo("travelled"), # [travel.xml]
 'treatable-06':adjInfo("treatable"), # [treat.xml]
 'tricky-02':adjInfo("tricky"), # [trick.xml]
 'troubled':adjInfo("troubled"), # [trouble.xml]
 'true-01':adjInfo("true"), # [true.xml]
 'true-02':adjInfo("true"), # [true.xml]
 'true-03':adjInfo("true"), # [true.xml]
 'trustworthy-03':adjInfo("trustworthy"), # [trust.xml]
 'tunneling':adjInfo("tunneling"), # [tunnel.xml]
 'twisted-02':adjInfo("twisted"), # [twist.xml]
 'typical-02':adjInfo("typical"), # [typify.xml]
 'ulcerated':adjInfo("ulcerated"), # [ulcerate.xml]
 'understandable-02':adjInfo("understandable"), # [understand.xml]
 'understanding':adjInfo("understanding"), # [understand.xml]
 'uneasy-01':adjInfo("uneasy"), # [uneasy.xml]
 'unfrozen':adjInfo("unfrozen"), # [unfreeze.xml]
 'uniform-02':adjInfo("uniform"), # [uniform.xml]
 'unique-01':adjInfo("unique"), # [unique.xml]
 'united':adjInfo("united"), # [unite.xml]
 'unlocked':adjInfo("unlocked"), # [unlock.xml]
 'unpacked':adjInfo("unpacked"), # [unpack.xml]
 'unsettled':adjInfo("unsettled"), # [unsettle.xml]
 'unsettled-02':adjInfo("unsettled"), # [unsettle.xml]
 'unsettling':adjInfo("unsettling"), # [unsettle.xml]
 'up-02':adjInfo("up"), # [up.xml]
 'up-03':adjInfo("up"), # [up.xml]
 'up-04':adjInfo("up"), # [up.xml]
 'upset-01':adjInfo("upset"), # [upset.xml]
 'upsetting':adjInfo("upsetting"), # [upset.xml]
 'urban-02':adjInfo("urban"), # [urbanize.xml]
 'used':adjInfo("used"), # [use.xml]
 'useful-05':adjInfo("useful"), # [use.xml]
 'utilitarian-02':adjInfo("utilitarian"), # [utilize.xml]
 'utterly':adjInfo("utterly"), # [utter.xml]
 'valid-02':adjInfo("valid"), # [validate.xml]
 'valuable':adjInfo("valuable"), # [value.xml]
 'valuable-03':adjInfo("valuable"), # [value.xml]
 'variable':adjInfo("variable"), # [vary.xml]
 'variant':adjInfo("variant"), # [vary.xml]
 'varied':adjInfo("varied"), # [vary.xml]
 'ventilated':adjInfo("ventilated"), # [ventilate.xml]
 'vigilant-01':adjInfo("vigilant"), # [vigilant.xml]
 'vile-02':adjInfo("vile"), # [vilify.xml]
 'visible':adjInfo("visible"), # [see.xml]
 'void-02':adjInfo("void"), # [void.xml]
 'void-03':adjInfo("void"), # [void.xml]
 'voluntary-02':adjInfo("voluntary"), # [volunteer.xml]
 'vulnerable-01':adjInfo("vulnerable"), # [vulnerable.xml]
 'warm-06':adjInfo("warm"), # [warm.xml]
 'warm-07':adjInfo("warm"), # [warm.xml]
 'warmer':adjInfo("warmer"), # [warm.xml]
 'warranted':adjInfo("warranted"), # [warrant.xml]
 'wasted-03':adjInfo("wasted"), # [waste.xml]
 'wasteful-02':adjInfo("wasteful"), # [waste.xml]
 'watery-03':adjInfo("watery"), # [water.xml]
 'weak-02':adjInfo("weak"), # [weaken.xml]
 'weaker':adjInfo("weaker"), # [weaken.xml]
 'welcome-01':adjInfo("welcome"), # [welcome.xml]
 'welcomed':adjInfo("welcomed"), # [welcome.xml]
 'well-05':adjInfo("well"), # [better.xml]
 'well-09':adjInfo("well"), # [better.xml]
 'western-02':adjInfo("western"), # [westernize.xml]
 'western-03':adjInfo("western"), # [westernize.xml]
 'westernised':adjInfo("westernised"), # [westernize.xml]
 'white-02':adjInfo("white"), # [whiten.xml]
 'white-03':adjInfo("white"), # [whiten.xml]
 'wide-02':adjInfo("wide"), # [widen.xml]
 'wider':adjInfo("wider"), # [widen.xml]
 'widowed':adjInfo("widowed"), # [widow.xml]
 'willing':adjInfo("willing"), # [will.xml]
 'wonderful-03':adjInfo("wonderful"), # [wonder.xml]
 'wonderful-04':adjInfo("wonderful"), # [wonder.xml]
 'wonderful-05':adjInfo("wonderful"), # [wonder.xml]
 'worried':adjInfo("worried"), # [worry.xml]
 'worrisome':adjInfo("worrisome"), # [worry.xml]
 'worrisome-03':adjInfo("worrisome"), # [worry.xml]
 'worrying':adjInfo("worrying"), # [worry.xml]
 'worth-01':adjInfo("worth"), # [worth.xml]
 'worth-02':adjInfo("worth"), # [worth.xml]
 'worthy':adjInfo("worthy"), # [worth.xml]
 'wounded':adjInfo("wounded"), # [wound.xml]
 'wrong-02':adjInfo("wrong"), # [wrong.xml]
 'wrong-03':adjInfo("wrong"), # [wrong.xml]
 'wrong-04':adjInfo("wrong"), # [wrong.xml]
 'yellow-02':adjInfo("yellow"), # [yellow.xml]
 'yellow-03':adjInfo("yellow"), # [yellow.xml]
 'zealous-01':adjInfo("zealous"), # [zealous.xml]
}

# ======== ADVERBS 
adverbs = {
 'actually':"actually", # [actualize.xml]
 'at_once-01':"at_once", # [once.xml]
 'at_once-02':"at_once", # [once.xml]
 'completely':"completely", # [complete.xml]
 'fairly':"fairly", # [fair.xml]
 'intensely':"intensely", # [intensify.xml]
 'overly':"overly", # [over.xml]
 'practically':"practically", # [practice.xml]
 'practically-04':"practically", # [practice.xml]
 'rate-entity-91':"rate-entity", # [rate.xml]
 'relatively':"relatively", # [relate.xml]
 'strongly':"strongly", # [strengthen.xml]
 'truly':"truly", # [true.xml]
 'utter-02':"utter", # [utter.xml]
 'well':"well", # [request.xml]
}

# ======== VERBS 
verbs = {
 'abandon-01': # ARG0:abandoner / ARG1:thing abandoned, left behind / ARG2:attribute of arg1 [abandon.xml]
   LexSem("V","abandon",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("abandon"),arg1,pp("as",arg2)))),

 'abandon-02': # ARG0:abandoner / ARG1:thing abandoned, left behind / ARG2:preferred item [abandon.xml]
   LexSem("V","abandon",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("abandon"),arg1,pp("for",arg2)))),

 'abandon-03': # ARG0:entity abandoning something / ARG1:thing abandoned / ARG2:benefactive, abandoned-to [abandon.xml]
   LexSem("V","abandon",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("abandon"),arg1,pp("to",arg2)))),

 'abase-01': # ARG0:causer of humbling / ARG1:entity lowered, humbled / ARG2:instrument, if separate from arg 0 [abase.xml]
   LexSem("V","abase",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("abase"),arg1,pp("by",arg2)))),

 'abash-01': # ARG0:causer of shame / ARG1:abashed entity / ARG2:instrument, if separate from arg0 [abash.xml]
   LexSem("V","abash",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("abash"),arg1,arg2))),

 'abate-01': # ARG0:causer / ARG1:entity decreased [abate.xml]
   LexSem("V","abate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("abate"),arg1))),

 'abbreviate-01': # ARG0:causal agent / ARG1:thing becoming shorter / ARG2:EXT, arg1 is shortened by how much? / ARG3:start state of arg 1, original word when separate mention / ARG4:end state of arg1, new abbreviation [abbreviate.xml]
   LexSem("V","abbreviate",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("abbreviate"),arg1,arg2,arg3,arg4))),

 'abdicate-01': # ARG0:abdicator, agent / ARG1:responsibility [abdicate.xml]
   LexSem("V","abdicate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("abdicate"),arg1))),

 'abduct-01': # ARG0:agent / ARG1:person kidnapped [abduct.xml]
   LexSem("V","abduct",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("abduct"),arg1))),

 'abduct-02': # ARG0:mover / ARG1:thing moved [abduct.xml]
   LexSem("V","abduct",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("abduct"),pp("of",arg1)))),

 'abet-01': # ARG0:agent of abetting / ARG1:thing helped, action [abet.xml]
   LexSem("V","abet",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("abet"),pp("in",arg1)))),

 'abhor-01': # ARG0:despiser / ARG1:object of despisal [abhor.xml]
   LexSem("V","abhor",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("abhor"),arg1))),

 'abide-01': # ARG0:conformer / ARG1:thing conformed to [abide.xml]
   LexSem("V","abide",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("abide"),pp("by",arg1)))),

 'ablate-01': # ARG0:Agent, surgeon / ARG1:Material/body-part ablated / ARG2:Object/patient undergoing ablation, removed from / ARG3:instrument, incl. chemical substance [ablate.xml]
   LexSem("V","ablate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("ablate"),arg1,pp("from",arg2),arg3))),

 'abnegate-01': # ARG0:person giving something up / ARG1:entity given up, renounced / ARG2:Benefactive/ Malefactive, often reflexive [abnegate.xml]
   LexSem("V","abnegate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("abnegate"),arg1,arg2))),

 'abolish-01': # ARG0:entity getting rid of, outlawing something / ARG1:thing abolished [abolish.xml]
   LexSem("V","abolish",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("abolish"),arg1))),

 'abominate-01': # ARG0:despiser / ARG1:thing despised [abominate.xml]
   LexSem("V","abominate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("abominate"),arg1))),

 'abort-01': # ARG0:causer, agent / ARG1:entity aborted [abort.xml]
   LexSem("V","abort",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("abort"),pp("of",arg1)))),

 'abound-01': # ARG1:thing which is plentiful / ARG2:thing which has arg1 in great supply [abound.xml]
   LexSem("V","abound",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("abound"),arg2))),

 'aboutface-03': # ARG0:Person changing mind / ARG1:Regarding what issue [face.xml]
   LexSem("V","about-face",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("about-face"),pp("on",arg1)))),

 'abrade-01': # ARG0:agent, causing wearing / ARG1:thing wearing / ARG2:instrument [abrade.xml]
   LexSem("V","abrade",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("abrade"),arg1,pp("with",arg2)))),

 'abridge-01': # ARG0:causer / ARG1:thing abridged [abridge.xml]
   LexSem("V","abridge",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("abridge"),arg1))),

 'abrogate-01': # ARG0:intentional agent of abrogation (e.g. scientist) / ARG1:thing abrogated, blocked / ARG2:instrument [abrogate.xml]
   LexSem("V","abrogate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("abrogate"),arg1,arg2))),

 'absent-01': # ARG0:causer, agent / ARG1:absent entity / ARG2:absent from what [absent.xml]
   LexSem("V","absent",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("absent"),arg1,pp("from",arg2)))),

 'absolve-01': # ARG0:absolver, agent / ARG1:guilty party / ARG2:guilt [absolve.xml]
   LexSem("V","absolve",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("absolve"),arg1,pp("of",arg2)))),

 'absorb-01': # ARG0:absorber, cause or agent / ARG1:absorbed, us. liquid / ARG2:sponge, arg 1 is absorbed into this, when separate from cause / ARG3:Source of liquid, absorbed from what? [absorb.xml]
   LexSem("V","absorb",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("absorb"),arg1,pp("in",arg2),pp("from",arg3)))),

 'abstain-01': # ARG0:entity abstaining / ARG1:abstaining from [abstain.xml]
   LexSem("V","abstain",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("abstain"),pp("from",arg1)))),

 'abstract-01': # ARG0:entity abstracting / ARG1:thing being abstracted / ARG2:abstracted from [abstract.xml]
   LexSem("V","abstract",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("abstract"),arg1,pp("from",arg2)))),

 'abuse-01': # ARG0:abuser, agent / ARG1:entity abused [abuse.xml]
   LexSem("V","abuse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("abuse"),arg1))),

 'abuse-02': # ARG0:user / ARG1:thing misused [abuse.xml]
   LexSem("V","abuse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("abuse"),pp("of",arg1)))),

 'abuse-03': # ARG0:user of offensive language / ARG1:target of abuse / ARG2:the offensive language [abuse.xml]
   LexSem("V","abuse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("abuse"),arg1,arg2))),

 'abut-01': # ARG1:abutter / ARG2:abutted [abut.xml]
   LexSem("V","abut",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("abut"),arg2))),

 'accede-01': # ARG0:acceder, agent / ARG1:entity acceded to [accede.xml]
   LexSem("V","accede",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("accede"),pp("to",arg1)))),

 'accelerate-01': # ARG0:agent, causing acceleration / ARG1:thing accelerating / ARG2:EXT / ARG3:start point / ARG4:end point [accelerate.xml]
   LexSem("V","accelerate",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("accelerate"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'accent-01': # ARG0:decorator / ARG1:thing decorated / ARG2:decorations [accent.xml]
   LexSem("V","accent",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("accent"),arg1,pp("by",arg2)))),

 'accentuate-01': # ARG0:agent / ARG1:thing accentuated / ARG2:instrument [accentuate.xml]
   LexSem("V","accentuate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("accentuate"),arg1,arg2))),

 'accept-01': # ARG0:acceptor / ARG1:thing accepted / ARG2:accepted-from / ARG3:attribute [accept.xml]
   LexSem("V","accept",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("accept"),arg1,pp("from",arg2),pp("as",arg3)))),

 'access-01': # ARG0:accessor / ARG1:thing accessed [access.xml]
   LexSem("V","access",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("access"),arg1))),

 'accessorize-01': # ARG0:agent, furnishing entity / ARG1:entity furnished / ARG2:furnished with what [accessorize.xml]
   LexSem("V","accessorize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("accessorize"),arg1,arg2))),

 'acclaim-01': # ARG0:acclaimer / ARG1:acclaimed / ARG2:cause, acclaimed for what? [acclaim.xml]
   LexSem("V","acclaim",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("acclaim"),arg1,pp("for",arg2)))),

 'accommodate-01': # ARG0:accommodater / ARG1:thing accommodated [accommodate.xml]
   LexSem("V","accommodate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("accommodate"),arg1))),

 'accompany-01': # ARG0:subject accompanier / ARG1:object accompanied / ARG3:start point / ARG4:end point [accompany.xml]
   LexSem("V","accompany",[":ARG0",":ARG1",":ARG3",":ARG4"],lambda arg0,arg1,arg3,arg4:S(arg0,VP(V("accompany"),arg1,pp("from",arg3),pp("to",arg4)))),

 'accomplish-01': # ARG0:doer / ARG1:deed [accomplish.xml]
   LexSem("V","accomplish",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("accomplish"),arg1))),

 'accord-01': # ARG0:giver / ARG1:gift / ARG2:given-to [accord.xml]
   LexSem("V","accord",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("accord"),arg1,pp("to",arg2)))),

 'accord-02': # ARG0:follower of procedure / ARG1:action done / ARG2:regulations, procedure, or expectations accorded with [accord.xml]
   LexSem("V","accord",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("accord"),arg1,pp("with",arg2)))),

 'account-01': # ARG0:accounter / ARG1:thing accounted for, dealt with, explained / ARG2:instrumental, accounted for with or by [account.xml]
   LexSem("V","account",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("account"),pp("for",arg1),pp("with",arg2)))),

 'accredit-01': # ARG0:entity furnishing credentials / ARG1:entity credited / ARG2:attribute [accredit.xml]
   LexSem("V","accredit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("accredit"),arg1,pp("as",arg2)))),

 'accrete-01': # ARG0:accreting entity / ARG1:stuff gained [accrete.xml]
   LexSem("V","accrete",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("accrete"),arg1))),

 'accrue-01': # ARG0:agent, gatherer / ARG1:thing gathered, accrued [accrue.xml]
   LexSem("V","accrue",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("accrue"),arg1))),

 'accumulate-01': # ARG0:entity accumulating something / ARG1:thing/stuff accumulated / ARG3:price [accumulate.xml]
   LexSem("V","accumulate",[":ARG0",":ARG1",":ARG3"],lambda arg0,arg1,arg3:S(arg0,VP(V("accumulate"),arg1,pp("for",arg3)))),

 'accurse-01': # ARG0:speaker / ARG1:misery or evil / ARG2:person or thing accursed [accurse.xml]
   LexSem("V","accurse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("accurse"),arg1,arg2))),

 'accuse-01': # ARG0:accuser / ARG1:accused / ARG2:crime [accuse.xml]
   LexSem("V","accuse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("accuse"),arg1,pp("of",arg2)))),

 'accustom-01': # ARG0:cause or agent / ARG1:thing getting used to something / ARG2:thing getting used to [accustom.xml]
   LexSem("V","accustom",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("accustom"),arg1,pp("to",arg2)))),

 'ace-01': # ARG0:acer / ARG1:test [ace.xml]
   LexSem("V","ace",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ace"),arg1))),

 'acetify-01': # ARG0:cause of transformation / ARG1:entity made into silica / ARG2:instrument or manner if separate from arg 0 [acetify.xml]
   LexSem("V","acetify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("acetify"),arg1,pp("by",arg2)))),

 'acetylate-01': # ARG0:agent of acetylation (e.g. scientist) / ARG1:thing acetylated (material/source) / ARG2:instrument / ARG3:product of acetylation [acetylate.xml]
   LexSem("V","acetylate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("acetylate"),pp("from",arg1),pp("with",arg2),arg3))),

 'ache-01': # ARG0:body part aching [ache.xml]
   LexSem("V","ache",[":ARG0"],lambda arg0:S(arg0,VP(V("ache")))),

 'achieve-01': # ARG0:achiever / ARG1:thing achieved, gotten, accomplished [achieve.xml]
   LexSem("V","achieve",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("achieve"),arg1))),

 'acidify-01': # ARG0:causer of acidity, agent / ARG1:thing now acidic [acidify.xml]
   LexSem("V","acidify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("acidify"),arg1))),

 'acknowledge-01': # ARG0:admitter, claimer, speaker / ARG1:proposition, claim, utterance / ARG2:hearer / ARG3:secondary predication, attribute of arg 1 acknowledged [acknowledge.xml]
   LexSem("V","acknowledge",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("acknowledge"),arg1,pp("to",arg2),pp("as",arg3)))),

 'acquaint-01': # ARG0:rare agent / ARG1:knower / ARG2:acquaintance [acquaint.xml]
   LexSem("V","acquaint",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("acquaint"),arg1,pp("with",arg2)))),

 'acquiesce-01': # ARG0:acquiescer, complier / ARG1:thing complied to, in, or with [acquiesce.xml]
   LexSem("V","acquiesce",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("acquiesce"),pp("to",arg1)))),

 'acquire-01': # ARG0:agent, entity acquiring something / ARG1:thing acquired / ARG2:seller / ARG3:price paid / ARG4:benefactive [acquire.xml]
   LexSem("V","acquire",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("acquire"),arg1,pp("from",arg2),pp("for",arg3),arg4))),

 'acquit-01': # ARG0:remover of guilt / ARG1:(un)guilty party / ARG2:explicit mention of guilt [acquit.xml]
   LexSem("V","acquit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("acquit"),arg1,arg2))),

 'act-01': # ARG0:player / ARG1:role [act.xml]
   LexSem("V","act",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("act"),pp("as",arg1)))),

 'act-02': # ARG0:actor / ARG1:grounds for action [act.xml]
   LexSem("V","act",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("act"),pp("on",arg1)))),

 'act-out-03': # ARG0:actor, performer / ARG1:role, scenario enacted [act.xml]
   LexSem("V","act",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("act"),Adv("out"),arg1))),

 'act-up-04': # ARG0:trouble-maker [act.xml]
   LexSem("V","act",[":ARG0"],lambda arg0:S(arg0,VP(V("act"),Adv("up")))),

 'activate-01': # ARG0:activator / ARG1:thing now active [activate.xml]
   LexSem("V","activate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("activate"),arg1))),

 'actualize-01': # ARG0:agent / ARG1:thing actualized, theme [actualize.xml]
   LexSem("V","actualize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("actualize"),arg1))),

 'actuate-01': # ARG0:agent causing of actuation / ARG1:entity set into action or motion [actuate.xml]
   LexSem("V","actuate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("actuate"),arg1))),

 'adapt-01': # ARG0:agent, adaptor / ARG1:thing adapted / ARG2:adapted to / ARG3:adapted from [adapt.xml]
   LexSem("V","adapt",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("adapt"),arg1,pp("to",arg2),pp("from",arg3)))),

 'add-01': # ARG0:speaker / ARG1:utterance [add.xml]
   LexSem("V","add",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("add"),arg1))),

 'add-02': # ARG0:adder / ARG1:thing being added / ARG2:thing being added to / ARG3:resulting sum [add.xml]
   LexSem("V","add",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("add"),arg1,pp("to",arg2),pp("to",arg3)))),

 'add-03': # ARG1:Logical subject, patient, thing rising/gaining/being added to / ARG2:EXT, amount risen / ARG4:end point [add.xml]
   LexSem("V","add",[":ARG1",":ARG2",":ARG4"],lambda arg1,arg2,arg4:S(arg1,VP(V("add"),arg2,pp("to",arg4)))),

 'add-on-05': # ARG0:Agent adding on / ARG1:Thing added / ARG2:Added to what? [add.xml]
   LexSem("V","add",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("add"),Adv("on"),arg1,pp("to",arg2)))),

 'add-up-04': # ARG1:things added / ARG2:result / ARG0:agent adding items up [add.xml]
   LexSem("V","add",[":ARG1",":ARG2",":ARG0"],lambda arg1,arg2,arg0:S(arg0,VP(V("add"),Adv("up"),arg1,pp("to",arg2)))),

 'addict-01': # ARG0:causer of addiction / ARG1:addicted entity / ARG2:drug etc. [addict.xml]
   LexSem("V","addict",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("addict"),arg1,pp("to",arg2)))),

 'addle-01': # ARG0:agentive cause of confusion / ARG1:entity experiencing confusion / ARG2:confused about or confused with what? [addle.xml]
   LexSem("V","addle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("addle"),arg1,pp("with",arg2)))),

 'address-01': # ARG0:addresser / ARG1:item being addressed (letter, speech, etc) / ARG2:hearer/recipient / ARG3:address as [address.xml]
   LexSem("V","address",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("address"),arg1,pp("to",arg2),pp("as",arg3)))),

 'address-02': # ARG0:agent / ARG1:dealing with what / ARG2:answer, dealing how [address.xml]
   LexSem("V","address",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("address"),arg1,pp("with",arg2)))),

 'adhere-01': # ARG0:agent/causer of adhesion / ARG1:theme of adhesion / ARG2:thing stuck to [adhere.xml]
   LexSem("V","adhere",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("adhere"),arg1,pp("to",arg2)))),

 'adhere-02': # ARG0:follower / ARG1:policy, etc. [adhere.xml]
   LexSem("V","adhere",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("adhere"),pp("to",arg1)))),

 'adjoin-01': # ARG1:(first) thing(s) / ARG2:second thing, if separate [adjoin.xml]
   LexSem("V","adjoin",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("adjoin"),arg2))),

 'adjourn-01': # ARG0:closer, adjourner / ARG1:thing closed [adjourn.xml]
   LexSem("V","adjourn",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("adjourn"),arg1))),

 'adjourn-02': # ARG0:entity in motion / ARG1:destination [adjourn.xml]
   LexSem("V","adjourn",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("adjourn"),pp("to",arg1)))),

 'adjudicate-01': # ARG0:adjudicator / ARG1:decision or conflict [adjudicate.xml]
   LexSem("V","adjudicate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("adjudicate"),arg1))),

 'adjust-01': # ARG0:causer of transformation / ARG1:thing changing / ARG2:adjusted to; goal state; outside situation that arg1 is wanted to match / ARG3:start state / ARG4:purpose, reason for adjustment [adjust.xml]
   LexSem("V","adjust",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("adjust"),arg1,pp("to",arg2),arg3,pp("to",arg4)))),

 'administer-01': # ARG0:administrator, agent / ARG1:entity administered / ARG2:administered to/upon [administer.xml]
   LexSem("V","administer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("administer"),arg1,pp("upon",arg2)))),

 'administrate-01': # ARG0:agent, manager / ARG1:theme, process/thing being managed [administrate.xml]
   LexSem("V","administrate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("administrate"),arg1))),

 'admire-01': # ARG0:admirer / ARG1:admired [admire.xml]
   LexSem("V","admire",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("admire"),arg1))),

 'admit-01': # ARG0:admitter / ARG1:truth / ARG2:hearer [admit.xml]
   LexSem("V","admit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("admit"),arg1,pp("to",arg2)))),

 'admit-02': # ARG0:allower (ticket) / ARG1:enterer / ARG2:place entered [admit.xml]
   LexSem("V","admit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("admit"),arg1,pp("to",arg2)))),

 'admix-01': # ARG0:agent, mixer / ARG1:ingredient one / ARG2:ingredient two (if separate) / ARG3:end product [admix.xml]
   LexSem("V","admix",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("admix"),arg1,pp("to",arg2),arg3))),

 'admonish-01': # ARG0:persuader / ARG1:persuaded agent / ARG2:persuaded action [admonish.xml]
   LexSem("V","admonish",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("admonish"),arg1,pp("to",arg2)))),

 'admonish-02': # ARG0:chastiser / ARG1:chastised / ARG2:wrongdoing [admonish.xml]
   LexSem("V","admonish",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("admonish"),arg1,pp("for",arg2)))),

 'adopt-01': # ARG0:adopter / ARG1:thing adopted / ARG2:secondary attibute [adopt.xml]
   LexSem("V","adopt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("adopt"),arg1,pp("as",arg2)))),

 'adore-01': # ARG0:adorer / ARG1:thing adored [adore.xml]
   LexSem("V","adore",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("adore"),arg1))),

 'adorn-01': # ARG0:decorator, agent / ARG1:entity adorned / ARG2:ornaments [adorn.xml]
   LexSem("V","adorn",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("adorn"),arg1,arg2))),

 'advance-01': # ARG0:agent, causing advance / ARG1:thing advancing / ARG2:extent of advancement / ARG3:start point / ARG4:end point / ARG5:attribute of arg1, where this is advancing rather than whole [advance.xml]
   LexSem("V","advance",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg0,arg1,arg2,arg3,arg4,arg5:S(arg0,VP(V("advance"),arg1,arg2,pp("from",arg3),pp("to",arg4),arg5))),

 'advert-01': # ARG0:Attention getter / ARG1:Entity referred to, target of attention [advert.xml]
   LexSem("V","advert",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("advert"),pp("to",arg1)))),

 'advertise-01': # ARG0:advertiser / ARG1:thing being pitched, advertised [advertise.xml]
   LexSem("V","advertise",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("advertise"),arg1))),

 'advise-01': # ARG0:entity giving advice / ARG1:entity getting advice, impelled agent / ARG2:advice, impelled action [advise.xml]
   LexSem("V","advise",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("advise"),arg1,pp("on",arg2)))),

 'advocate-01': # ARG0:advocate, suggest / ARG1:suggestion / ARG2:recipient of advice [advocate.xml]
   LexSem("V","advocate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("advocate"),arg1,pp("to",arg2)))),

 'affect-01': # ARG0:thing affecting / ARG1:thing affected / ARG2:instrument, effect had [affect.xml]
   LexSem("V","affect",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("affect"),arg1,pp("of",arg2)))),

 'affect-02': # ARG0:agent, assumer / ARG1:characteristic [affect.xml]
   LexSem("V","affect",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("affect"),arg1))),

 'affiliate-01': # ARG0:causer of affiliation, agent / ARG1:entity affiliated / ARG2:affiliated with [affiliate.xml]
   LexSem("V","affiliate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("affiliate"),arg1,pp("with",arg2)))),

 'affirm-01': # ARG0:confirmer / ARG1:thing confirmed, statement or proposition / ARG2:benefactive, hearer [affirm.xml]
   LexSem("V","affirm",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("affirm"),arg1,pp("to",arg2)))),

 'affix-01': # ARG0:attacher, agent / ARG1:focus of attachment / ARG2:thing arg 1 is affixed to / ARG3:instrument of bonding, glue [affix.xml]
   LexSem("V","affix",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("affix"),arg1,pp("onto",arg2),arg3))),

 'afflict-01': # ARG0:causer of suffering / ARG1:entity suffering / ARG2:instrument, if separate from arg0 [afflict.xml]
   LexSem("V","afflict",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("afflict"),arg1,pp("with",arg2)))),

 'afford-01': # ARG0:haver of financial means, agent / ARG1:costly thing, theme [afford.xml]
   LexSem("V","afford",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("afford"),arg1))),

 'afford-02': # ARG0:provider, agent / ARG1:provided, theme / ARG2:recipient [afford.xml]
   LexSem("V","afford",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("afford"),arg1,arg2))),

 'affront-01': # ARG0:offender / ARG1:offended / ARG2:instrument, if separate from arg0 [affront.xml]
   LexSem("V","affront",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("affront"),arg1,arg2))),

 'africanize-01': # ARG0:agent, causer / ARG1:thing changing [africanize.xml]
   LexSem("V","africanize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("africanize"),arg1))),

 'age-01': # ARG0:causer of aging, agent / ARG1:entity getting old / ARG2:attribute (how old) [age.xml]
   LexSem("V","age",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("age"),arg1,arg2))),

 'age-out-02': # ARG0:entity determining what the age cap is / ARG1:entity getting older / ARG2:thing arg1 is too old for [age.xml]
   LexSem("V","age",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("age"),Adv("out"),arg1,arg2))),

 'agglomerate-01': # ARG0:agent, cause / ARG1:clustering thing / ARG2:instrument, method [agglomerate.xml]
   LexSem("V","agglomerate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("agglomerate"),arg1,pp("by",arg2)))),

 'aggravate-01': # ARG0:stimulus / ARG1:thing getting angry or getting worse / ARG2:instrument, if separate from arg0 [aggravate.xml]
   LexSem("V","aggravate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("aggravate"),arg1,pp("by",arg2)))),

 'aggregate-01': # ARG0:entity aggregating something / ARG1:thing/stuff aggregated / ARG2:attribute, descriptor of state where arg1 aggregates [aggregate.xml]
   LexSem("V","aggregate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("aggregate"),arg1,pp("at",arg2)))),

 'aggrieve-01': # ARG0:offender / ARG1:aggrieved / ARG2:instrument, if separate from arg0 [aggrieve.xml]
   LexSem("V","aggrieve",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("aggrieve"),arg1,pp("by",arg2)))),

 'agitate-01': # ARG0:causer / ARG1:experiencer [agitate.xml]
   LexSem("V","agitate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("agitate"),arg1))),

 'agonize-01': # ARG1:agonized entity / ARG2:cause of agony [agonize.xml]
   LexSem("V","agonize",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("agonize"),pp("over",arg2)))),

 'agree-01': # ARG0:agreer / ARG1:proposition / ARG2:other entity agreeing [agree.xml]
   LexSem("V","agree",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("agree"),arg1,arg2))),

 'ah-01': # ARG0:ah-er / ARG1:cause of awe (ah?) [ah.xml]
   LexSem("V","ah",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ah"),pp("over",arg1)))),

 'aid-01': # ARG0:helper / ARG1:project / ARG2:benefactor [aid.xml]
   LexSem("V","aid",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("aid"),pp("with",arg1),arg2))),

 'ail-01': # ARG0:illness / ARG1:sick entity [ail.xml]
   LexSem("V","ail",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ail"),arg1))),

 'aim-01': # ARG0:aimer / ARG1:action [aim.xml]
   LexSem("V","aim",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("aim"),arg1))),

 'aim-02': # ARG0:aimer / ARG1:thing in motion / ARG2:target [aim.xml]
   LexSem("V","aim",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("aim"),arg1,pp("at",arg2)))),

 'air-01': # ARG0:airer, agent / ARG1:thing aired / ARG2:audience [air.xml]
   LexSem("V","air",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("air"),arg1,arg2))),

 'airlift-01': # ARG0:agent, causer / ARG1:entity transported / ARG2:transported to / ARG3:transported from [airlift.xml]
   LexSem("V","airlift",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("airlift"),arg1,pp("to",arg2),pp("from",arg3)))),

 'airmail-01': # ARG0:mailer / ARG1:letter / ARG2:mailed-to [airmail.xml]
   LexSem("V","airmail",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("airmail"),arg1,pp("to",arg2)))),

 'alarm-01': # ARG0:warning / ARG1:entity alarmed [alarm.xml]
   LexSem("V","alarm",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("alarm"),arg1))),

 'alcoholize-01': # ARG0:Agent of saturation, conversion / ARG1:Entity saturated converted / ARG2:Resulting state after conversion, attribute of arg1 [alcoholize.xml]
   LexSem("V","alcoholize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("alcoholize"),arg1,arg2))),

 'alert-01': # ARG0:entity giving warning / ARG1:entity getting warning / ARG2:warning [alert.xml]
   LexSem("V","alert",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("alert"),arg1,pp("to",arg2)))),

 'alienate-01': # ARG0:causer of anger, agent / ARG1:entity getting angry / ARG2:alienated from what/whom, the insiders [alienate.xml]
   LexSem("V","alienate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("alienate"),arg1,pp("from",arg2)))),

 'align-01': # ARG0:arranger, agent/cause / ARG1:first or all things aligned / ARG2:second thing, standard of comparison, aligned-to / ARG3:subject matter, domain of alignment; issue aligned on [align.xml]
   LexSem("V","align",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("align"),arg1,pp("with",arg2),pp("on",arg3)))),

 'alkalify-01': # ARG0:agent, cause / ARG1:thing becoming alkaline / ARG2:instrument or  method [alkalify.xml]
   LexSem("V","alkalify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("alkalify"),arg1,pp("with",arg2)))),

 'alkylate-01': # ARG0:Agent / ARG1:Compound alkylated [alkylate.xml]
   LexSem("V","alkylate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("alkylate"),arg1))),

 'allay-01': # ARG0:agent, causer / ARG1:entity relieved [allay.xml]
   LexSem("V","allay",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("allay"),arg1))),

 'allege-01': # ARG0:speaker, alleger / ARG1:utterance, allegation / ARG2:hearer / ARG3:person against whom something is alleged [allege.xml]
   LexSem("V","allege",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("allege"),arg1,pp("to",arg2),pp("against",arg3)))),

 'alleviate-01': # ARG0:agent, causer / ARG1:problems [alleviate.xml]
   LexSem("V","alleviate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("alleviate"),arg1))),

 'alligator-01': # ARG0:alligatorer, Agent / ARG1:thing made scaly, Patient [alligator.xml]
   LexSem("V","alligator",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("alligator"),arg1))),

 'allocate-01': # ARG0:granter / ARG1:thing granted / ARG2:benefactive, granted-to [allocate.xml]
   LexSem("V","allocate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("allocate"),arg1,pp("to",arg2)))),

 'allot-01': # ARG0:giver / ARG1:thing alloted / ARG2:benefactive, allotted-to [allot.xml]
   LexSem("V","allot",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("allot"),arg1,pp("to",arg2)))),

 'allow-01': # ARG0:allower / ARG1:action allowed [allow.xml]
   LexSem("V","allow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("allow"),arg1))),

 'allow-02': # ARG0:allocator / ARG1:thing allocated (us. time) / ARG2:to some task [allow.xml]
   LexSem("V","allow",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("allow"),arg1,arg2))),

 'allow-03': # ARG0:admitter / ARG1:true proposition [allow.xml]
   LexSem("V","allow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("allow"),arg1))),

 'allude-01': # ARG0:alluder, agent / ARG1:entity alluded to [allude.xml]
   LexSem("V","allude",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("allude"),pp("to",arg1)))),

 'allure-01': # ARG0:allurer, agent / ARG1:allured thing(s) or person / ARG2:allured with, behavior or thing [allure.xml]
   LexSem("V","allure",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("allure"),arg1,pp("with",arg2)))),

 'ally-01': # ARG0:agent, causer / ARG1:entity united / ARG2:entity united with [ally.xml]
   LexSem("V","ally",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ally"),arg1,pp("with",arg2)))),

 'alter-01': # ARG0:causer of transformation / ARG1:thing changing / ARG2:end state / ARG3:start state [alter.xml]
   LexSem("V","alter",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("alter"),arg1,pp("to",arg2),pp("from",arg3)))),

 'alternate-01': # ARG0:causer of switch / ARG1:first or all things switching / ARG2:secondary possibilities [alternate.xml]
   LexSem("V","alternate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("alternate"),arg1,pp("between",arg2)))),

 'amalgamate-01': # ARG0:mixer, agent / ARG1:ingredient(s) [amalgamate.xml]
   LexSem("V","amalgamate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("amalgamate"),arg1))),

 'amass-01': # ARG0:entity accumulating something / ARG1:thing/stuff accumulated / ARG3:price [amass.xml]
   LexSem("V","amass",[":ARG0",":ARG1",":ARG3"],lambda arg0,arg1,arg3:S(arg0,VP(V("amass"),arg1,pp("at",arg3)))),

 'amaze-01': # ARG0:causer of amazement / ARG1:amazed entity [amaze.xml]
   LexSem("V","amaze",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("amaze"),arg1))),

 'amble-01': # ARG0:walker, agent [amble.xml]
   LexSem("V","amble",[":ARG0"],lambda arg0:S(arg0,VP(V("amble")))),

 'ambush-01': # ARG0:ambusher, agent / ARG1:entity ambushed [ambush.xml]
   LexSem("V","ambush",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ambush"),arg1))),

 'ameliorate-01': # ARG0:cause of improvement, agent / ARG1:entity becoming better / ARG2:instrument, if separate from agent [ameliorate.xml]
   LexSem("V","ameliorate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ameliorate"),arg1,pp("by",arg2)))),

 'amend-01': # ARG0:amender, corrector / ARG1:thing amended / ARG2:secondary predication on arg1 [amend.xml]
   LexSem("V","amend",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("amend"),arg1,pp("to",arg2)))),

 'americanize-01': # ARG0:causer, agent / ARG1:victim / ARG2:instrument [americanize.xml]
   LexSem("V","americanize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("americanize"),arg1,pp("with",arg2)))),

 'aminate-01': # ARG0:agent of amination (e.g. scientist) / ARG1:thing aminated / ARG2:instrument / ARG3:product of amination [aminate.xml]
   LexSem("V","aminate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("aminate"),arg1,pp("with",arg2),pp("to",arg3)))),

 'amortize-01': # ARG0:spreader of burden, agent / ARG1:burden (us. cost, debt) / ARG2:spread over what [amortize.xml]
   LexSem("V","amortize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("amortize"),arg1,pp("over",arg2)))),

 'amount-01': # ARG1:thing(s) being counted / ARG2:count, total [amount.xml]
   LexSem("V","amount",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("amount"),pp("to",arg2)))),

 'amount-02': # ARG1:focus / ARG2:ground, introduced by 'to' [amount.xml]
   LexSem("V","amount",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("amount"),pp("to",arg2)))),

 'amplify-01': # ARG0:causer of becoming louder / ARG1:thing becoming louder / ARG2:instrument, if separate from arg0 [amplify.xml]
   LexSem("V","amplify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("amplify"),arg1,pp("with",arg2)))),

 'amputate-01': # ARG0:amputator, agent / ARG1:part of body amputated [amputate.xml]
   LexSem("V","amputate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("amputate"),arg1))),

 'amuse-01': # ARG0:causer of mirth / ARG1:mirthful entity / ARG2:instrument [amuse.xml]
   LexSem("V","amuse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("amuse"),arg1,pp("with",arg2)))),

 'analyze-01': # ARG0:student / ARG1:subject [analyze.xml]
   LexSem("V","analyze",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("analyze"),arg1))),

 'anchor-01': # ARG0:causer of anchorment, agent / ARG1:thing anchored [anchor.xml]
   LexSem("V","anchor",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("anchor"),arg1))),

 'anesthetize-01': # ARG0:agent, doctor / ARG1:patient, patient / ARG2:anesthetic, instrument separate from arg 0 [anesthetize.xml]
   LexSem("V","anesthetize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("anesthetize"),arg1,arg2))),

 'anger-01': # ARG0:cause of anger / ARG1:experiencer [anger.xml]
   LexSem("V","anger",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("anger"),arg1))),

 'angle-01': # ARG0:entity in motion / ARG1:description of path [angle.xml]
   LexSem("V","angle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("angle"),pp("toward",arg1)))),

 'angle-02': # ARG0:Agent, cause / ARG1:Entity now in an angled position/path of motion / ARG2:Description of position/path [angle.xml]
   LexSem("V","angle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("angle"),arg1,arg2))),

 'anglicize-01': # ARG0:causer, agent / ARG1:entity anglicized / ARG2:instrument [anglicize.xml]
   LexSem("V","anglicize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("anglicize"),arg1,arg2))),

 'anguish-01': # ARG0:anguished one / ARG1:cause for anguish [anguish.xml]
   LexSem("V","anguish",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("anguish"),pp("over",arg1)))),

 'animalize-01': # ARG0:Agent, cause of animalization / ARG1:Entity made beast [animalize.xml]
   LexSem("V","animalize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("animalize"),arg1))),

 'animate-01': # ARG0:animator (prob. rare) / ARG1:cartoon [animate.xml]
   LexSem("V","animate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("animate"),arg1))),

 'animate-02': # ARG0:cause, emotion / ARG1:lively thing [animate.xml]
   LexSem("V","animate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("animate"),arg1))),

 'anneal-01': # ARG0:agent / ARG1:thing heated and cooled [anneal.xml]
   LexSem("V","anneal",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("anneal"),arg1))),

 'anneal-02': # ARG0:intentional agent of annealing (e.g. scientist) / ARG1:first single strand of nucleic acid to be paired / ARG2:second single strand of nucleic acid to be paired / ARG3:end product, resulting double strand of nucleic acid / ARG4:instrument (e.g. enzyme) [anneal.xml]
   LexSem("V","anneal",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("anneal"),arg1,pp("to",arg2),arg3,arg4))),

 'annex-01': # ARG0:annexer, agent / ARG1:thing annexed / ARG2:annexed from [annex.xml]
   LexSem("V","annex",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("annex"),arg1,arg2))),

 'annihilate-01': # ARG0:destroyer / ARG1:thing destroyed / ARG2:instrument of destruction [annihilate.xml]
   LexSem("V","annihilate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("annihilate"),arg1,arg2))),

 'annotate-01': # ARG0:commentor / ARG1:thing commented on [annotate.xml]
   LexSem("V","annotate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("annotate"),arg1))),

 'announce-01': # ARG0:announcer / ARG1:utterance / ARG2:hearer / ARG3:attribute of arg1 [announce.xml]
   LexSem("V","announce",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("announce"),arg1,pp("to",arg2),pp("of",arg3)))),

 'annoy-01': # ARG0:annoyer / ARG1:annoyed / ARG2:instrument, if separate from arg0 [annoy.xml]
   LexSem("V","annoy",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("annoy"),arg1,pp("by",arg2)))),

 'annul-01': # ARG0:entity making void or null / ARG1:thing made void [annul.xml]
   LexSem("V","annul",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("annul"),arg1))),

 'anoint-01': # ARG0:anointer, agent / ARG1:entity anointed [anoint.xml]
   LexSem("V","anoint",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("anoint"),arg1))),

 'answer-01': # ARG0:replier / ARG1:in response to / ARG2:answer [answer.xml]
   LexSem("V","answer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("answer"),arg1,arg2))),

 'antagonize-01': # ARG0:hostile entity / ARG1:entity antagonized [antagonize.xml]
   LexSem("V","antagonize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("antagonize"),arg1))),

 'antagonize-02': # ARG1:neutralizing, opposing entity / ARG2:neutralized, opposed entity [antagonize.xml]
   LexSem("V","antagonize",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("antagonize"),arg2))),

 'anticipate-01': # ARG0:anticipater / ARG1:thing anticipated [anticipate.xml]
   LexSem("V","anticipate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("anticipate"),arg1))),

 'anticipate-02': # ARG0:thing coming before / ARG1:thing coming after [anticipate.xml]
   LexSem("V","anticipate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("anticipate"),arg1))),

 'anticoagulate-101': # ARG0:Doctor / ARG1:Patient [anticoagulate.xml]
   LexSem("V","anticoagulate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("anticoagulate"),arg1))),

 'antique-01': # ARG0:shopper / ARG1:thing sought / ARG4:benefactive [antique.xml]
   LexSem("V","antique",[":ARG0",":ARG1",":ARG4"],lambda arg0,arg1,arg4:S(arg0,VP(V("antique"),arg1,arg4))),

 'apologize-01': # ARG0:apologist / ARG1:apologize for / ARG2:apologized to / ARG3:utterance, the apology itself [apologize.xml]
   LexSem("V","apologize",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("apologize"),pp("for",arg1),pp("to",arg2),arg3))),

 'apostatize-01': # ARG0:agent; the one willfully dissociating / ARG1:dissociated from [apostatize.xml]
   LexSem("V","apostatize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("apostatize"),pp("from",arg1)))),

 'appall-01': # ARG0:Stimulus of appallment / ARG1:appalled entity [appall.xml]
   LexSem("V","appall",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("appall"),arg1))),

 'appeal-01': # ARG0:appealer / ARG1:decision disagreed with / ARG2:appealed to [appeal.xml]
   LexSem("V","appeal",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("appeal"),arg1,pp("to",arg2)))),

 'appeal-02': # ARG0:begger, appealer / ARG1:appealed to, begged from / ARG2:begged/appealed for [appeal.xml]
   LexSem("V","appeal",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("appeal"),pp("to",arg1),pp("for",arg2)))),

 'appeal-03': # ARG0:appealing thing / ARG1:entity attracted [appeal.xml]
   LexSem("V","appeal",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("appeal"),pp("to",arg1)))),

 'appear-01': # ARG1:thing appearing [appear.xml]
   LexSem("V","appear",[":ARG1"],lambda arg1:S(arg1,VP(V("appear")))),

 'appear-02': # ARG1:thing seeming, often requires concatenation / ARG2:viewer, to whom does it seem like that? [appear.xml]
   LexSem("V","appear",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("appear"),pp("to",arg2)))),

 'appease-01': # ARG0:Stimulus, agent / ARG1:entity appeased [appease.xml]
   LexSem("V","appease",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("appease"),arg1))),

 'append-01': # ARG0:attacher / ARG1:attached / ARG2:attached to [append.xml]
   LexSem("V","append",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("append"),arg1,pp("to",arg2)))),

 'applaud-01': # ARG0:clapper / ARG1:thing approved of / ARG2:grounds, reason for approval [applaud.xml]
   LexSem("V","applaud",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("applaud"),arg1,pp("for",arg2)))),

 'applique-01': # ARG0:decorator / ARG1:thing decorated / ARG2:image [applique.xml]
   LexSem("V","applique",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("applique"),arg1,arg2))),

 'apply-01': # ARG0:applier / ARG1:thing applied for / ARG2:entity applied to [apply.xml]
   LexSem("V","apply",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("apply"),arg1,pp("to",arg2)))),

 'apply-02': # ARG0:applier / ARG1:thing applied, associated, worked / ARG2:applied to [apply.xml]
   LexSem("V","apply",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("apply"),arg1,pp("to",arg2)))),

 'apply-03': # ARG0:painter, agent / ARG1:paint / ARG2:surface / ARG3:instrument, brush [apply.xml]
   LexSem("V","apply",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("apply"),arg1,pp("to",arg2),pp("with",arg3)))),

 'apply-04': # ARG0:driver / ARG1:brakes [apply.xml]
   LexSem("V","apply",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("apply"),arg1))),

 'appoint-01': # ARG0:appointer, employer / ARG1:appointee, employee / ARG2:job, position [appoint.xml]
   LexSem("V","appoint",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("appoint"),arg1,arg2))),

 'apportion-01': # ARG0:divider / ARG1:thing divided / ARG2:benefactive [apportion.xml]
   LexSem("V","apportion",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("apportion"),arg1,arg2))),

 'appraise-01': # ARG0:seller / ARG1:commodity / ARG2:price [appraise.xml]
   LexSem("V","appraise",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("appraise"),arg1,pp("at",arg2)))),

 'appraise-02': # ARG0:understanding entity / ARG1:knowledge, topic [appraise.xml]
   LexSem("V","appraise",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("appraise"),arg1))),

 'appreciate-01': # ARG1:thing increasing / ARG2:EXT / ARG3:start point / ARG4:end point [appreciate.xml]
   LexSem("V","appreciate",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("appreciate"),arg2,arg3,arg4))),

 'appreciate-02': # ARG0:emoter / ARG1:thing appreciated [appreciate.xml]
   LexSem("V","appreciate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("appreciate"),arg1))),

 'appreciate-03': # ARG0:noticer / ARG1:thing noticed [appreciate.xml]
   LexSem("V","appreciate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("appreciate"),arg1))),

 'apprehend-01': # ARG0:agent, apprehendor / ARG1:criminal,entity seized / ARG2:crime, or attribute of arg 1 [apprehend.xml]
   LexSem("V","apprehend",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("apprehend"),arg1,arg2))),

 'apprentice-01': # ARG0:apprentice / ARG1:skill / ARG2:employer or craftsman [apprentice.xml]
   LexSem("V","apprentice",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("apprentice"),pp("to",arg1),arg2))),

 'apprise-01': # ARG0:informer / ARG1:informed / ARG2:information [apprise.xml]
   LexSem("V","apprise",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("apprise"),arg1,arg2))),

 'approach-01': # ARG1:entity in motion / ARG2:destination [approach.xml]
   LexSem("V","approach",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("approach"),arg2))),

 'approach-02': # ARG0:treater, dealer, agent / ARG1:thing / ARG2:attribute [approach.xml]
   LexSem("V","approach",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("approach"),arg1,pp("as",arg2)))),

 'appropriate-01': # ARG0:taker of possession, agent / ARG1:entity appropriated [appropriate.xml]
   LexSem("V","appropriate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("appropriate"),arg1))),

 'approve-01': # ARG0:approver / ARG1:thing approved / ARG2:secondary attribute [approve.xml]
   LexSem("V","approve",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("approve"),arg1,arg2))),

 'approximate-01': # ARG0:entity coming close / ARG1:entity coming close to [approximate.xml]
   LexSem("V","approximate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("approximate"),arg1))),

 'arbitrage-01': # ARG0:arbitrager, agent / ARG1:currency/stock/security exchanged [arbitrage.xml]
   LexSem("V","arbitrage",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("arbitrage"),pp("on",arg1)))),

 'arbitrate-01': # ARG0:agent / ARG1:conflict needing a decision / ARG2:decision itself, often in favor or against... [arbitrate.xml]
   LexSem("V","arbitrate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("arbitrate"),arg1,pp("in",arg2)))),

 'arch-01': # ARG0:causer of arching motion/state / ARG1:thing in arch-like configuration [arch.xml]
   LexSem("V","arch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("arch"),arg1))),

 'archive-01': # ARG0:storer / ARG1:thing stored / ARG2:building, location [archive.xml]
   LexSem("V","archive",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("archive"),arg1,pp("in",arg2)))),

 'argue-01': # ARG0:speaker / ARG1:argument / ARG2:listener [argue.xml]
   LexSem("V","argue",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("argue"),arg1,pp("to",arg2)))),

 'argue-02': # ARG0:first arguer / ARG1:second arguer / ARG2:topic [argue.xml]
   LexSem("V","argue",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("argue"),pp("with",arg1),pp("about",arg2)))),

 'arise-02': # ARG0:causer / ARG1:thing (state) arising [rise.xml]
   LexSem("V","arise",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("arise"),arg1))),

 'arm-01': # ARG0:equiper, provider, agent / ARG1:entity armed / ARG2:equipment [arm.xml]
   LexSem("V","arm",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("arm"),arg1,pp("with",arg2)))),

 'arm-up-02': # ARG0:equiper, provider, agent / ARG1:entity armed / ARG2:equipment [arm.xml]
   LexSem("V","arm",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("arm"),Adv("up"),arg1,arg2))),

 'armor-01': # ARG0:provider / ARG1:entity getting equipment / ARG2:equipment [armor.xml]
   LexSem("V","armor",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("armor"),arg1,pp("in",arg2)))),

 'aromatize-01': # ARG0:causer of aromitization / ARG1:destination, room, thing made aromatic / ARG2:aroma itself [aromatize.xml]
   LexSem("V","aromatize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("aromatize"),arg1,pp("with",arg2)))),

 'arouse-01': # ARG0:causer / ARG1:entity aroused [arouse.xml]
   LexSem("V","arouse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("arouse"),arg1))),

 'arraign-01': # ARG0:legal authority / ARG1:person arraigned / ARG2:crime [arraign.xml]
   LexSem("V","arraign",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("arraign"),arg1,pp("for",arg2)))),

 'arrange-01': # ARG0:builder / ARG1:construction, item/material being arranged / ARG2:start state / ARG3:benefactive / ARG4:end state [arrange.xml]
   LexSem("V","arrange",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("arrange"),arg1,pp("from",arg2),pp("for",arg3),pp("into",arg4)))),

 'array-01': # ARG0:agent / ARG1:thing aligned [array.xml]
   LexSem("V","array",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("array"),arg1))),

 'arrest-01': # ARG0:police / ARG1:criminal / ARG2:crime [arrest.xml]
   LexSem("V","arrest",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("arrest"),arg1,pp("on",arg2)))),

 'arrest-02': # ARG0:causer of stopping / ARG1:thing stopping [arrest.xml]
   LexSem("V","arrest",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("arrest"),arg1))),

 'arrive-01': # ARG1:entity in motion / 'comer' / ARG2:extent -- rare) / ARG3:start point -- also rare) / ARG4:end point, destination [arrive.xml]
   LexSem("V","arrive",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("arrive"),arg2,pp("from",arg3),pp("in",arg4)))),

 'arrogate-01': # ARG0:usurper / ARG1:Entity usurped / ARG2:Benefactive, whom is arg1 appropriated to? [arrogate.xml]
   LexSem("V","arrogate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("arrogate"),arg1,pp("to",arg2)))),

 'arson-01': # ARG0:fire-setter / ARG1:property burned [arson.xml]
   LexSem("V","commit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("commit"),arg1))),

 'art-01': # ARG1:topic / ARG2:comment [art.xml]
   LexSem("V","art",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("art"),pp("in",arg2)))),

 'articulate-01': # ARG0:speaker / ARG1:utterance / ARG2:hearer (in theory possible) [articulate.xml]
   LexSem("V","articulate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("articulate"),arg1,arg2))),

 'ascend-01': # ARG0:entity rising / ARG1:location [ascend.xml]
   LexSem("V","ascend",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ascend"),arg1))),

 'ascend-02': # ARG1:Rising entity / ARG2:EXT, amount risen / ARG3:Start point / ARG4:End point [ascend.xml]
   LexSem("V","ascend",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("ascend"),arg2,arg3,pp("to",arg4)))),

 'ascertain-01': # ARG0:ascertainer / ARG1:thing figured out [ascertain.xml]
   LexSem("V","ascertain",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ascertain"),arg1))),

 'ascribe-01': # ARG0:assigner / ARG1:thing assigned (attribute) / ARG2:assigned to [ascribe.xml]
   LexSem("V","ascribe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ascribe"),arg1,pp("to",arg2)))),

 'ask-01': # ARG0:asker / ARG1:question / ARG2:hearer / ARG3:attributive [ask.xml]
   LexSem("V","ask",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("ask"),arg1,arg2,arg3))),

 'ask-02': # ARG0:asker / ARG1:favor / ARG2:hearer [ask.xml]
   LexSem("V","ask",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ask"),pp("to",arg1),arg2))),

 'ask-03': # ARG0:seller / ARG1:commodity / ARG2:buyer / ARG3:asking price [ask.xml]
   LexSem("V","ask",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("ask"),pp("for",arg1),arg2,arg3))),

 'ask-out-04': # ARG0:inviter / ARG1:invitee / ARG2:the invitation (do what/go where) [ask.xml]
   LexSem("V","ask",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ask"),Adv("out"),arg1,pp("for",arg2)))),

 'asphalt-01': # ARG0:construction worker, person laying asphalt / ARG1:road, thing paved / ARG2:asphalt itself, type of pavement used [asphalt.xml]
   LexSem("V","asphalt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("asphalt"),arg1,pp("with",arg2)))),

 'asphalt-over-02': # ARG0:asphalt layer / ARG1:location, entity being covered in asphalt / ARG2:asphalt itself [asphalt.xml]
   LexSem("V","asphalt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("asphalt"),Adv("over"),arg1,arg2))),

 'asphyxiate-01': # ARG0:cause of not breathing / ARG1:entity not breathing / ARG2:instrument, if cause also present as arg0 / ARG3:aspect of arg1 actually suffocating [asphyxiate.xml]
   LexSem("V","asphyxiate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("asphyxiate"),arg1,arg2,pp("of",arg3)))),

 'aspirate-101': # ARG0:Doctor / ARG1:Substance / ARG2:Source [aspire.xml]
   LexSem("V","aspirate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("aspirate"),arg1,arg2))),

 'aspirate-102': # ARG0:Agent inhaling / ARG1:Substance or object / ARG2:Destination [aspire.xml]
   LexSem("V","aspirate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("aspirate"),arg1,pp("into",arg2)))),

 'aspire-01': # ARG0:hoper / ARG1:action hoped to [aspire.xml]
   LexSem("V","aspire",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("aspire"),pp("to",arg1)))),

 'assail-01': # ARG0:assailant, agent / ARG1:entity assailed / ARG2:assailed for [assail.xml]
   LexSem("V","assail",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("assail"),arg1,pp("for",arg2)))),

 'assassinate-01': # ARG0:assassin, agent / ARG1:person assassinated [assassinate.xml]
   LexSem("V","assassinate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("assassinate"),arg1))),

 'assault-01': # ARG0:assaulter / ARG1:entity assaulted [assault.xml]
   LexSem("V","assault",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("assault"),arg1))),

 'assay-01': # ARG0:intentional agent of assay (e.g. scientist) / ARG1:process, substance (analyte), or property of such process or substance that is being assayed [assay.xml]
   LexSem("V","assay",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("assay"),arg1))),

 'assemble-01': # ARG0:builder / ARG1:construction / ARG2:material, start state / ARG4:end state [assemble.xml]
   LexSem("V","assemble",[":ARG0",":ARG1",":ARG2",":ARG4"],lambda arg0,arg1,arg2,arg4:S(arg0,VP(V("assemble"),arg1,arg2,pp("into",arg4)))),

 'assemble-02': # ARG0:agent, entity causing some grouping / ARG1:theme, thing being included in some group / ARG2:group [assemble.xml]
   LexSem("V","assemble",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("assemble"),arg1,pp("into",arg2)))),

 'assert-01': # ARG0:asserter / ARG1:self [assert.xml]
   LexSem("V","assert",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("assert"),arg1))),

 'assert-02': # ARG0:speaker, asserter / ARG1:utterance, claim / ARG2:listener / ARG3:predication, arg1 is claimed to be what? [assert.xml]
   LexSem("V","assert",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("assert"),pp("to",arg1),pp("to",arg2),arg3))),

 'assert-03': # ARG0:speaker, asserter / ARG1:utterance, claim / ARG2:listener / ARG3:predication, arg1 is claimed to be what? [assert.xml]
   LexSem("V","assert",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("assert"),arg1,arg2,arg3))),

 'assess-01': # ARG0:assessor, agent / ARG1:entity assessed / ARG2:value or attribute [assess.xml]
   LexSem("V","assess",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("assess"),arg1,pp("at",arg2)))),

 'assess-02': # ARG0:entity fining/charging / ARG1:fine or money charged / ARG2:entity fined/taxed / ARG3:cause or misdeed [assess.xml]
   LexSem("V","assess",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("assess"),arg1,pp("against",arg2),arg3))),

 'assign-01': # ARG0:agent, assigner / ARG1:thing assigned / ARG2:assigned to [assign.xml]
   LexSem("V","assign",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("assign"),arg1,pp("to",arg2)))),

 'assimilate-01': # ARG0:causer of change / ARG1:thing changing / ARG2:target [assimilate.xml]
   LexSem("V","assimilate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("assimilate"),arg1,pp("into",arg2)))),

 'assist-01': # ARG0:assistant / ARG1:assisted / ARG2:project [assist.xml]
   LexSem("V","assist",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("assist"),arg1,pp("in",arg2)))),

 'associate-01': # ARG0:agent, entity causing some grouping, making an   association / ARG1:theme, thing being included in some group / ARG2:group, associated-with [associate.xml]
   LexSem("V","associate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("associate"),arg1,pp("with",arg2)))),

 'assuage-01': # ARG0:mender, Stimulus, agent / ARG1:hurt feelings, or person with hurt feelings [assuage.xml]
   LexSem("V","assuage",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("assuage"),arg1))),

 'assume-01': # ARG0:entity acquiring something / ARG1:thing being acquired / ARG2:acquired-from / ARG3:price paid / ARG4:benefactive [assume.xml]
   LexSem("V","assume",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("assume"),arg1,pp("from",arg2),arg3,arg4))),

 'assume-02': # ARG0:Thinker / ARG1:Thought / ARG2:Attributive (entity arg1 is assumed of/about) [assume.xml]
   LexSem("V","assume",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("assume"),arg1,pp("of",arg2)))),

 'assure-01': # ARG0:causer of assurance / ARG1:assured one / ARG2:assurance, utterance [assure.xml]
   LexSem("V","assure",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("assure"),arg1,arg2))),

 'astonish-01': # ARG0:causer of astonishment / ARG1:experiencer of astonishment / ARG2:instrument, if arg0 also present [astonish.xml]
   LexSem("V","astonish",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("astonish"),arg1,pp("by",arg2)))),

 'astound-01': # ARG0:causer / ARG1:experiencer [astound.xml]
   LexSem("V","astound",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("astound"),arg1))),

 'at_hand-14': # ARG1:near entity / ARG2:in relation to, near to what [hand.xml]
   LexSem("V","be",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("be"),arg2))),

 'atomize-01': # ARG0:agent, causing the dispersion / ARG1:thing dispersing / ARG2:instrument [atomize.xml]
   LexSem("V","atomize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("atomize"),arg1,arg2))),

 'atone-01': # ARG0:atoner, sinner, agent / ARG1:sins [atone.xml]
   LexSem("V","atone",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("atone"),pp("for",arg1)))),

 'atrophy-01': # ARG1:thing weakened [atrophy.xml]
   LexSem("V","atrophy",[":ARG1"],lambda arg1:S(arg1,VP(V("atrophy")))),

 'attach-01': # ARG0:agent, entity causing two objects to be attached / ARG1:patient, first thing being tied / ARG2:tied to; second item tied / ARG3:instrument [attach.xml]
   LexSem("V","attach",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("attach"),arg1,pp("to",arg2),pp("by",arg3)))),

 'attack-01': # ARG0:attacker / ARG1:entity attacked / ARG2:attribute [attack.xml]
   LexSem("V","attack",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("attack"),arg1,pp("as",arg2)))),

 'attain-01': # ARG0:reacher, agent / ARG1:entity attained [attain.xml]
   LexSem("V","attain",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("attain"),arg1))),

 'attempt-01': # ARG0:Agent/Entity Trying / ARG1:thing tried [attempt.xml]
   LexSem("V","attempt",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("attempt"),pp("to",arg1)))),

 'attend-01': # ARG0:thing attending / ARG1:thing attended [attend.xml]
   LexSem("V","attend",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("attend"),arg1))),

 'attend-02': # ARG0:entity paying attention / ARG1:to what [attend.xml]
   LexSem("V","attend",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("attend"),pp("to",arg1)))),

 'attenuate-01': # ARG0:agent, cause / ARG1:thing lessened [attenuate.xml]
   LexSem("V","attenuate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("attenuate"),arg1))),

 'attest-01': # ARG0:attestor, agent / ARG1:thing attested [attest.xml]
   LexSem("V","attest",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("attest"),arg1))),

 'attire-01': # ARG0:person putting on clothes / ARG1:person wearing clothes / ARG2:attribute [attire.xml]
   LexSem("V","attire",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("attire"),arg1,pp("in",arg2)))),

 'attract-01': # ARG0:attractor / ARG1:thing attracted / ARG2:thing attracted to, if separate from attractor / ARG3:instrument, if separate from attractor [attract.xml]
   LexSem("V","attract",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("attract"),arg1,pp("to",arg2),pp("with",arg3)))),

 'attribute-01': # ARG0:attributor / ARG1:thing attributed, attribute / ARG2:attributed to (benefactive?) [attribute.xml]
   LexSem("V","attribute",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("attribute"),arg1,pp("to",arg2)))),

 'attune-01': # ARG0:causer / ARG1:entity adjusted, attuned / ARG2:attuned to what? [attune.xml]
   LexSem("V","attune",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("attune"),arg1,pp("to",arg2)))),

 'auction-02': # ARG0:seller / ARG1:sold / ARG2:highest bidder (recipient) / ARG3:Price Paid / ARG4:Benefactive [auction.xml]
   LexSem("V","auction",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("auction"),arg1,arg2,arg3,arg4))),

 'auction-off-01': # ARG0:seller / ARG1:sold / ARG2:highest bidder (recipient) / ARG3:Price Paid / ARG4:Benefactive [auction.xml]
   LexSem("V","auction",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("auction"),Adv("off"),arg1,pp("to",arg2),pp("for",arg3),arg4))),

 'audit-01': # ARG0:auditor / ARG1:audited [audit.xml]
   LexSem("V","audit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("audit"),arg1))),

 'audition-01': # ARG0:auditionee / ARG1:role / ARG2:casting agency [audition.xml]
   LexSem("V","audition",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("audition"),pp("for",arg1),pp("with",arg2)))),

 'augment-01': # ARG0:augmentor, agent / ARG1:entity augmented / ARG2:augmented with/by; the augment itself [augment.xml]
   LexSem("V","augment",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("augment"),arg1,pp("by",arg2)))),

 'augur-01': # ARG0:omen, thing foretelling future event / ARG1:thing prophecied / ARG2:recipient, hearer [augur.xml]
   LexSem("V","augur",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("augur"),arg1,arg2))),

 'authenticate-01': # ARG0:verifier / ARG1:entity authenticated [authenticate.xml]
   LexSem("V","authenticate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("authenticate"),arg1))),

 'author-01': # ARG0:author, agent / ARG1:text authored [author.xml]
   LexSem("V","author",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("author"),arg1))),

 'authorize-01': # ARG0:allower / ARG1:action allowed / ARG2:explicit allowed-agent / ARG3:purpose [authorize.xml]
   LexSem("V","authorize",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("authorize"),arg1,arg2,pp("for",arg3)))),

 'autograph-01': # ARG0:celebrity, autographer, agent / ARG1:entity autographed [autograph.xml]
   LexSem("V","autograph",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("autograph"),arg1))),

 'automate-01': # ARG0:causer of automation, agent / ARG1:entity automated [automate.xml]
   LexSem("V","automate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("automate"),arg1))),

 'autopsy-01': # ARG0:agent, entity performing or responsible for autopsy / ARG1:the body / ARG2:in search of [autopsy.xml]
   LexSem("V","autopsy",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("autopsy"),arg1,pp("for",arg2)))),

 'avail-01': # ARG0:one providing, taking advantage, includes causes / ARG1:recipient / ARG2:thing provided, taken advantage of [avail.xml]
   LexSem("V","avail",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("avail"),arg1,pp("of",arg2)))),

 'avenge-01': # ARG0:avenger, agent / ARG1:a perceived wrong [avenge.xml]
   LexSem("V","avenge",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("avenge"),arg1))),

 'aver-01': # ARG0:agent, speaker / ARG1:proposition held to be true [aver.xml]
   LexSem("V","aver",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("aver"),arg1))),

 'average-01': # ARG0:agent, person computing the average / ARG1:average(d) entity / ARG2:numerical value of the average (or whatever final form it takes) / ARG3:scale [average.xml]
   LexSem("V","average",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("average"),arg1,arg2,pp("for",arg3)))),

 'avert-01': # ARG0:stopper, Agent / ARG1:Theme (action or object being prevented) / ARG2:thing being avoided / ARG3:instrument [avert.xml]
   LexSem("V","avert",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("avert"),arg1,pp("from",arg2),arg3))),

 'avoid-01': # ARG0:avoider / ARG1:thing avoided [avoid.xml]
   LexSem("V","avoid",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("avoid"),arg1))),

 'avulse-101': # ARG0:Agent / ARG1:Body part, object [avulse.xml]
   LexSem("V","avulse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("avulse"),arg1))),

 'await-01': # ARG1:wait-er (not waiter, that's a different sense) / ARG2:thing waited for [await.xml]
   LexSem("V","await",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("await"),arg2))),

 'award-01': # ARG0:giver / ARG1:award / ARG2:beneficiary / ARG3:reason [award.xml]
   LexSem("V","award",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("award"),arg1,pp("to",arg2),arg3))),

 'awe-01': # ARG0:cause of awe, stupefication / ARG1:awed entity / ARG2:instrument, if separate from arg0 [awe.xml]
   LexSem("V","awe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("awe"),arg1,pp("with",arg2)))),

 'baa-01': # ARG0:baa-er [baa.xml]
   LexSem("V","baa",[":ARG0"],lambda arg0:S(arg0,VP(V("baa")))),

 'babble-01': # ARG0:babbler / ARG1:utterance babbled, babbled about what? [babble.xml]
   LexSem("V","babble",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("babble"),arg1))),

 'babysit-01': # ARG0:babysitter / ARG1:thing being babysat / ARG2:person/entity seeking babyistter [babysit.xml]
   LexSem("V","babysit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("babysit"),pp("for",arg1),arg2))),

 'back-01': # ARG0:supporter / ARG1:thing being supported [back.xml]
   LexSem("V","back",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("back"),arg1))),

 'back-02': # ARG0:causer of backwards motion / ARG1:entity in motion [back.xml]
   LexSem("V","back",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("back"),arg1))),

 'back-03': # ARG0:looker, facer / ARG1:looked at, faced [back.xml]
   LexSem("V","back",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("back"),pp("onto",arg1)))),

 'back-off-11': # ARG0:retreator / ARG1:location or thing retreating from [back.xml]
   LexSem("V","back",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("back"),Adv("off"),arg1))),

 'back-up-04': # ARG0:supporter / ARG1:thing being supported [back.xml]
   LexSem("V","back",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("back"),Adv("up"),arg1))),

 'back-up-06': # ARG0:causer of backwards motion / ARG1:entity in motion [back.xml]
   LexSem("V","back",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("back"),Adv("up"),arg1))),

 'back-up-08': # ARG0:looker, facer / ARG1:looked at, faced [back.xml]
   LexSem("V","back",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("back"),Adv("up"),pp("to",arg1)))),

 'back-up-09': # ARG0:preserver, agent / ARG1:data / ARG2:permanent storage device [back.xml]
   LexSem("V","back",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("back"),Adv("up"),arg1,arg2))),

 'back-up-10': # ARG1:traffic [back.xml]
   LexSem("V","back",[":ARG1"],lambda arg1:S(arg1,VP(V("back"),Adv("up")))),

 'backbite-01': # ARG0:attacker, agent / ARG1:entity attacked / ARG2:attacked about [backbite.xml]
   LexSem("V","backbite",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("backbite"),arg1,arg2))),

 'backfire-01': # ARG1:thing with bad result / ARG2:'benefactive' [backfire.xml]
   LexSem("V","backfire",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("backfire"),pp("on",arg2)))),

 'backlash-01': # ARG0:agent, one lashing back / ARG1:about, backlash over, topic / ARG2:lashed at, beneficiary of lashing [backlash.xml]
   LexSem("V","lash back",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lash back"),pp("over",arg1),pp("against",arg2)))),

 'backpack-01': # ARG1:entity moving, backpacker(s) / ARG2:start point / ARG3:end point / ARG4:path [backpack.xml]
   LexSem("V","backpack",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("backpack"),pp("from",arg2),pp("to",arg3),pp("through",arg4)))),

 'backpedal-01': # ARG0:entity retreating, agent / ARG1:thing backpedaled on [backpedal.xml]
   LexSem("V","backpedal",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("backpedal"),pp("on",arg1)))),

 'backslap-01': # ARG0:backslapper [backslap.xml]
   LexSem("V","backslap",[":ARG0"],lambda arg0:S(arg0,VP(V("backslap")))),

 'backtrack-01': # ARG1:entity in motion / ARG2:(extent -- rare) / ARG3:start point / ARG4:end point [backtrack.xml]
   LexSem("V","backtrack",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("backtrack"),arg2,arg3,arg4))),

 'badger-01': # ARG0:harasser / ARG1:harrassed / ARG2:harassed for [badger.xml]
   LexSem("V","badger",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("badger"),arg1,arg2))),

 'badmouth-01': # ARG0:critic, badmouther / ARG1:entity being criticized, badmouthed / ARG2:arg1 is badmouthed for what? grounds of criticism [badmouth.xml]
   LexSem("V","badmouth",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("badmouth"),arg1,pp("for",arg2)))),

 'baffle-01': # ARG0:cause of bewilderment, stupefication / ARG1:baffled entity / ARG2:instrument, if separate from arg0 [baffle.xml]
   LexSem("V","baffle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("baffle"),arg1,pp("with",arg2)))),

 'bag-01': # ARG0:gainer/placer / ARG1:thing gained/placed / ARG2:bag, location [bag.xml]
   LexSem("V","bag",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bag"),arg1,arg2))),

 'bag-02': # ARG0:abandoner / ARG1:thing abandoned [bag.xml]
   LexSem("V","bag",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bag"),arg1))),

 'bail-out-01': # ARG0:abadoner, agent / ARG1:project or enterprise [bail.xml]
   LexSem("V","bail",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bail"),Adv("out"),pp("of",arg1)))),

 'bail-out-02': # ARG0:agent, causer / ARG1:entity extricated / ARG2:situation extricated from [bail.xml]
   LexSem("V","bail",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bail"),Adv("out"),arg1,pp("of",arg2)))),

 'bait-01': # ARG0:teaser / ARG1:person being teased / ARG2:teased about what? [bait.xml]
   LexSem("V","bait",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bait"),arg1,pp("about",arg2)))),

 'bait-02': # ARG0:agent, volitional entity enticing / ARG1:patient, entity lured, enticed, entrapped / ARG2:Trap, entity, action arg1 is lured towards or into / ARG3:bait itself, instrument [bait.xml]
   LexSem("V","bait",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("bait"),arg1,pp("into",arg2),pp("with",arg3)))),

 'bait-03': # ARG0:agent, entity putting bait on trap, hook / ARG1:entity baited, trap or hook itself / ARG2:instrument, bait itself [bait.xml]
   LexSem("V","bait",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bait"),arg1,pp("with",arg2)))),

 'bake-01': # ARG0:baker / ARG1:creation / ARG2:ingredients / ARG3:benefactive [bake.xml]
   LexSem("V","bake",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("bake"),pp("into",arg1),arg2,arg3))),

 'balance-01': # ARG0:balancer, agent / ARG1:thing balanced / ARG2:in comparison to [balance.xml]
   LexSem("V","balance",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("balance"),arg1,arg2))),

 'balance-out-02': # ARG0:balancer, agent doing balancing / ARG1:focus, first thing balanced / ARG2:arg1 balances out with what?  Point of comparison when separate mention [balance.xml]
   LexSem("V","balance",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("balance"),Adv("out"),arg1,arg2))),

 'balk-01': # ARG0:balker / ARG1:balk at, cause of hesitation [balk.xml]
   LexSem("V","balk",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("balk"),pp("at",arg1)))),

 'balkanize-01': # ARG0:causer, agent / ARG1:larger group/region divided, entity balkanized / ARG2:resulting state of arg1, secondary predication on arg1 [balkanize.xml]
   LexSem("V","balkanize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("balkanize"),arg1,pp("into",arg2)))),

 'ball-01': # ARG0:causal agent / ARG1:thing becoming ball-like / ARG2:end state [ball.xml]
   LexSem("V","ball",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ball"),arg1,pp("into",arg2)))),

 'balloon-01': # ARG0:balloonist, agent [balloon.xml]
   LexSem("V","balloon",[":ARG0"],lambda arg0:S(arg0,VP(V("balloon")))),

 'balloon-02': # ARG0:agent, causer / ARG1:entity increased / ARG2:endstate [balloon.xml]
   LexSem("V","balloon",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("balloon"),arg1,pp("to",arg2)))),

 'ballyhoo-01': # ARG0:advertiser / ARG1:ad [ballyhoo.xml]
   LexSem("V","ballyhoo",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ballyhoo"),arg1))),

 'bamboozle-01': # ARG0:bamboozler, agent / ARG1:bamboozled / ARG2:into what [bamboozle.xml]
   LexSem("V","bamboozle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bamboozle"),arg1,pp("into",arg2)))),

 'ban-01': # ARG0:lawgiver, usually / ARG1:activity/place/item not allowed; banned from / ARG2:secondary agent; entity banned from engaging in/entering arg1 [ban.xml]
   LexSem("V","ban",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ban"),arg1,arg2))),

 'band-01': # ARG0:causer of banding together, agent / ARG1:first (or all) thing(s) attached / ARG2:other things, if present/separate / ARG3:attribute of patients [band.xml]
   LexSem("V","band",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("band"),arg1,arg2,arg3))),

 'bandage-01': # ARG0:applier / ARG1:wound [bandage.xml]
   LexSem("V","bandage",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bandage"),arg1))),

 'bandage-up-03': # ARG0:bandager / ARG1:bandaged [bandage.xml]
   LexSem("V","bandage",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bandage"),Adv("up"),arg1))),

 'bandy-about-01': # ARG0:discusser(s), agent / ARG1:topic [bandy.xml]
   LexSem("V","bandy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bandy"),Adv("about"),arg1))),

 'bandy-around-02': # ARG0:discusser/agent(s) / ARG1:topic [bandy.xml]
   LexSem("V","bandy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bandy"),Adv("around"),arg1))),

 'bang-01': # ARG0:thing emitting noise [bang.xml]
   LexSem("V","bang",[":ARG0"],lambda arg0:S(arg0,VP(V("bang")))),

 'bang-02': # ARG0:striker, agent / ARG1:thing hit / ARG2:attribute of arg1 [bang.xml]
   LexSem("V","bang",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bang"),pp("on",arg1),arg2))),

 'bang-04': # ARG0:first party / ARG1:second party [bang.xml]
   LexSem("V","bang",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bang"),arg1))),

 'bang-on-03': # ARG0:talker / ARG1:topic, utterance / ARG2:audience [bang.xml]
   LexSem("V","bang",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bang"),Adv("on"),pp("about",arg1),arg2))),

 'banish-01': # ARG0:banisher, agent / ARG1:entity expelled / ARG2:expelled from [banish.xml]
   LexSem("V","banish",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("banish"),arg1,pp("from",arg2)))),

 'bank-01': # ARG0:putter, agent / ARG1:money / ARG2:bank [bank.xml]
   LexSem("V","bank",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bank"),arg1,pp("at",arg2)))),

 'bank-02': # ARG0:pilot / ARG1:aeroplane [bank.xml]
   LexSem("V","bank",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bank"),arg1))),

 'bank-04': # ARG0:relier, better / ARG1:thing depended, banked on / ARG2:for, in order to [bank.xml]
   LexSem("V","bank",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bank"),pp("on",arg1),arg2))),

 'bank-up-03': # ARG0:creator / ARG1:embankment or location / ARG2:substance of embankment [bank.xml]
   LexSem("V","bank",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bank"),Adv("up"),arg1,pp("with",arg2)))),

 'bankroll-01': # ARG0:financ(i)er / ARG1:thing financed / ARG2:money [bankroll.xml]
   LexSem("V","bankroll",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bankroll"),arg1,arg2))),

 'bankrupt-01': # ARG0:causer / ARG1:person bankrupt [bankrupt.xml]
   LexSem("V","bankrupt",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bankrupt"),arg1))),

 'banquet-01': # ARG0:eater / ARG1:eaten [banquet.xml]
   LexSem("V","banquet",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("banquet"),pp("on",arg1)))),

 'banter-01': # ARG0:first speaker (or all speakers if in one mention / ARG1:second speaker (when separate mention) / ARG2:topic, bantered about what? [banter.xml]
   LexSem("V","banter",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("banter"),pp("with",arg1),pp("about",arg2)))),

 'baptize-01': # ARG0:initiator / ARG1:initiatee / ARG2:thing being initiated in (a discipline, school of thought, society, etc.) [baptize.xml]
   LexSem("V","baptize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("baptize"),arg1,pp("in",arg2)))),

 'baptize-02': # ARG0:baptizer / ARG1:baptizee [baptize.xml]
   LexSem("V","baptize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("baptize"),arg1))),

 'bar-01': # ARG0:stopper, Agent / ARG1:action or object being prevented / ARG2:secondary predication on action / ARG3:instrument [bar.xml]
   LexSem("V","bar",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("bar"),arg1,pp("from",arg2),pp("under",arg3)))),

 'barb-01': # ARG0:causer of barbedness / ARG1:barbed thing [barb.xml]
   LexSem("V","barb",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("barb"),arg1))),

 'barbecue-01': # ARG0:cook, agent / ARG1:food,meaterial [barbecue.xml]
   LexSem("V","barbecue",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("barbecue"),arg1))),

 'barbeque-01': # ARG0:cook / ARG1:food [barbeque.xml]
   LexSem("V","barbeque",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("barbeque"),arg1))),

 'bare-01': # ARG0:causer, agent / ARG1:thing now uncovered [bare.xml]
   LexSem("V","bare",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bare"),arg1))),

 'bargain-01': # ARG0:negotiator, agent / ARG1:thing bargained (for) / ARG2:co-negotiator, bargained with [bargain.xml]
   LexSem("V","bargain",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bargain"),pp("for",arg1),pp("with",arg2)))),

 'barge-01': # ARG0:entity in motion / ARG1:path / ARG2:destination [barge.xml]
   LexSem("V","barge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("barge"),pp("through",arg1),pp("into",arg2)))),

 'bark-01': # ARG0:barker / ARG1:utterance / ARG2:hearer [bark.xml]
   LexSem("V","bark",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bark"),arg1,pp("to",arg2)))),

 'barnstorm-01': # ARG0:campaigner / ARG1:cause, goal [barnstorm.xml]
   LexSem("V","barnstorm",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("barnstorm"),arg1))),

 'barrack-01': # ARG0:Agent, builder of barracks / ARG1:Entity housed in barracks [barrack.xml]
   LexSem("V","barrack",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("barrack"),arg1))),

 'barrel-01': # ARG1:thing in motion / ARG2:direction, destination [barrel.xml]
   LexSem("V","barrel",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("barrel"),pp("into",arg2)))),

 'barricade-01': # ARG0:agent, entity doing the barricading / ARG1:patient, thing(s) being barricaded / ARG2:instrument, thing used to barricade / ARG3:location of patient (thing being barricaded) [barricade.xml]
   LexSem("V","barricade",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("barricade"),arg1,arg2,pp("inside",arg3)))),

 'barter-01': # ARG0:agent, entity trading / ARG1:thing being traded (away) / ARG2:other exchanger / ARG3:other item in exchange, price, or premium, traded for or at [barter.xml]
   LexSem("V","barter",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("barter"),arg1,pp("to",arg2),pp("for",arg3)))),

 'base-01': # ARG0:agent basing something somewhere / ARG1:institution [base.xml]
   LexSem("V","base",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("base"),arg1))),

 'base-02': # ARG0:justifier, agent (rarely seen) / ARG1:decision, whole / ARG2:justification, parts/ arg1 is made up of what? [base.xml]
   LexSem("V","base",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("base"),arg1,pp("on",arg2)))),

 'bash-01': # ARG0:critizer, hitter / ARG1:entity criticized/hit [bash.xml]
   LexSem("V","bash",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bash"),arg1))),

 'bask-01': # ARG0:basker / ARG1:basking in, cause of pleasure [bask.xml]
   LexSem("V","bask",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bask"),pp("in",arg1)))),

 'baste-01': # ARG0:agent, chef / ARG1:thing being moistened / ARG2:liquid [baste.xml]
   LexSem("V","baste",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("baste"),arg1,pp("with",arg2)))),

 'baste-02': # ARG0:agent, person doing the hitting / ARG1:patient, person being hit / ARG2:instrument [baste.xml]
   LexSem("V","baste",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("baste"),arg1,pp("with",arg2)))),

 'baste-03': # ARG0:agent, stitcher / ARG1:patient 1 (or all patients), thing(s) being stitched / ARG2:patient 2, thing being stitched to [baste.xml]
   LexSem("V","baste",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("baste"),arg1,pp("to",arg2)))),

 'bat-01': # ARG0:batter, agent / ARG1:eye(s) [bat.xml]
   LexSem("V","bat",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bat"),arg1))),

 'bat-02': # ARG0:batter / ARG1:ball or pitch hit / ARG2:position of batter in order, role of batter / ARG3:result, stats over many batting attempts / ARG4:team or employer [bat.xml]
   LexSem("V","bat",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("bat"),arg1,arg2,pp("for",arg3),arg4))),

 'bat-in-03': # ARG0:batter / ARG1:runs [bat.xml]
   LexSem("V","bat",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bat"),Adv("in"),arg1))),

 'bathe-01': # ARG0:Agent of bathing / ARG1:Thing washed, dirt, patient / ARG2:Liquid bathed in [bathe.xml]
   LexSem("V","bathe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bathe"),pp("of",arg1),pp("in",arg2)))),

 'batter-01': # ARG0:agent, hitter - animate only! / ARG1:thing hit / ARG2:instrument, thing hit by or with / ARG3:intensifier of action [batter.xml]
   LexSem("V","batter",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("batter"),arg1,pp("by",arg2),arg3))),

 'battle-01': # ARG0:combatant / ARG1:fight or other combatant, if separate / ARG2:spoils [battle.xml]
   LexSem("V","battle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("battle"),arg1,pp("over",arg2)))),

 'bawl-01': # ARG0:speaker / ARG1:utterance [bawl.xml]
   LexSem("V","bawl",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bawl"),arg1))),

 'bawl-02': # ARG0:peddler / ARG1:wares [bawl.xml]
   LexSem("V","bawl",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bawl"),arg1))),

 'bay-01': # ARG0:bay-er [bay.xml]
   LexSem("V","bay",[":ARG0"],lambda arg0:S(arg0,VP(V("bay")))),

 'bayonet-01': # ARG0:stabber / ARG1:victim [bayonet.xml]
   LexSem("V","bayonet",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bayonet"),arg1))),

 'be-01': # ARG1:topic / ARG2:comment [be.xml]
   LexSem("V","be",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("be"),arg2))),

 'be-02': # ARG1:thing that is [be.xml]
   LexSem("V","be",[":ARG1"],lambda arg1:S(arg1,VP(V("be")))),

 'be-03': #  [be.xml]
   LexSem("V","be",[],lambda :S(VP(V("be")))),

 'beach-01': # ARG0:beacher / ARG1:thing beached / ARG2:location [beach.xml]
   LexSem("V","beach",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("beach"),arg1,pp("in",arg2)))),

 'bead-01': # ARG0:agentive producer of liquid (may not occur) / ARG1:theme, liquid substance forming into drops / ARG2:source, non-agentive producer of liquid / ARG3:location of the beads [bead.xml]
   LexSem("V","bead",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("bead"),arg1,arg2,pp("on",arg3)))),

 'bead-02': # ARG0:agent, person doing the beading / ARG1:theme, beads / ARG2:thing being covered in beads, destination / ARG3:pattern/ design [bead.xml]
   LexSem("V","bead",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("bead"),arg1,pp("onto",arg2),pp("into",arg3)))),

 'bead-up-03': # ARG0:agentive producer of liquid (may not occur) / ARG1:theme, liquid substance forming into drops / ARG2:source, non-agentive producer of liquid / ARG3:location of the beads [bead.xml]
   LexSem("V","bead",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("bead"),Adv("up"),arg1,arg2,pp("on",arg3)))),

 'beam-01': # ARG0:transmitter, agent / ARG1:thing transmitted [beam.xml]
   LexSem("V","beam",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("beam"),arg1))),

 'beam-02': # ARG0:smiler, agent / ARG1:thing expressed [beam.xml]
   LexSem("V","beam",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("beam"),arg1))),

 'bear-01': # ARG0:holder / ARG1:thing held / ARG2:benefactive / ARG3:secondary attribute of thing held [bear.xml]
   LexSem("V","bear",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("bear"),arg1,arg2,pp("at",arg3)))),

 'bear-02': # ARG0:mother / ARG1:child [bear.xml]
   LexSem("V","bear",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bear"),arg1))),

 'bear-03': # ARG1:entity in motion [bear.xml]
   LexSem("V","bear",[":ARG1"],lambda arg1:S(arg1,VP(V("bear")))),

 'bear-06': # ARG1:topic / ARG2:related topic [bear.xml]
   LexSem("V","bear",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("bear"),pp("upon",arg2)))),

 'bear-out-05': # ARG0:confirmer, agent / ARG1:thing confirmed, patient [bear.xml]
   LexSem("V","bear",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bear"),Adv("out"),arg1))),

 'bear-up-04': # ARG1:entity existing [bear.xml]
   LexSem("V","bear",[":ARG1"],lambda arg1:S(arg1,VP(V("bear"),Adv("up")))),

 'beard-01': # ARG0:first locale / ARG1:second locale [beard.xml]
   LexSem("V","beard",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("beard"),arg1))),

 'beard-02': # ARG0:agent, bearder / ARG1:patient, entity given beard [beard.xml]
   LexSem("V","beard",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("beard"),arg1))),

 'beat-01': # ARG0:agent, hitter - animate only! / ARG1:thing hit / ARG2:instrument, thing hit by or with [beat.xml]
   LexSem("V","beat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("beat"),arg1,pp("with",arg2)))),

 'beat-02': # ARG0:causer of motion / ARG1:thing moving / ARG2:direction, destination [beat.xml]
   LexSem("V","beat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("beat"),arg1,arg2))),

 'beat-03': # ARG0:winner / ARG1:loser / ARG2:competition [beat.xml]
   LexSem("V","beat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("beat"),arg1,pp("in",arg2)))),

 'beat-out-04': # ARG0:winner / ARG1:loser / ARG2:competition [beat.xml]
   LexSem("V","beat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("beat"),Adv("out"),arg1,pp("for",arg2)))),

 'beat-up-05': # ARG0:agent, hitter - animate only! / ARG1:thing hit / ARG2:instrument, thing hit by or with [beat.xml]
   LexSem("V","beat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("beat"),Adv("up"),arg1,arg2))),

 'beatify-01': # ARG0:causer of elevation / ARG1:entity being elevated [beatify.xml]
   LexSem("V","beatify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("beatify"),arg1))),

 'beautify-01': # ARG0:decorator, agent / ARG1:entity adorned / ARG2:decoration;instrument [beautify.xml]
   LexSem("V","beautify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("beautify"),arg1,arg2))),

 'beckon-01': # ARG0:summoner / ARG1:summoned, distant entity [beckon.xml]
   LexSem("V","beckon",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("beckon"),pp("to",arg1)))),

 'become-01': # ARG1:entity changing / ARG2:new state [become.xml]
   LexSem("V","become",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("become"),arg2))),

 'become-02': # ARG1:appealing or fetching thing / ARG2:who or what it is become on/for? [become.xml]
   LexSem("V","become",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("become"),arg2))),

 'become-03': #  [become.xml]
   LexSem("V","become",[],lambda :S(VP(V("become")))),

 'bed-02': # ARG0:agent / ARG1:one/thing put to bed / ARG2:location [bed.xml]
   LexSem("V","bed",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bed"),arg1,pp("in",arg2)))),

 'bed-down-01': # ARG0:one in bed [bed.xml]
   LexSem("V","bed",[":ARG0"],lambda arg0:S(arg0,VP(V("bed"),Adv("down")))),

 'bedeck-01': # ARG0:decorator, agent / ARG1:entity bedecked / ARG2:decoration [bedeck.xml]
   LexSem("V","bedeck",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bedeck"),arg1,pp("in",arg2)))),

 'bedevil-01': # ARG0:botherer, devil, agent / ARG1:bothered / ARG2:bothered by, plagued with [bedevil.xml]
   LexSem("V","bedevil",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bedevil"),arg1,pp("with",arg2)))),

 'bedew-01': # ARG0:causer of bedewing / ARG1:thing bedewed / ARG2:dew, instrument [bedew.xml]
   LexSem("V","bedew",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bedew"),arg1,pp("with",arg2)))),

 'beef-up-01': # ARG0:entity causing beefiness, agent / ARG1:thing enhanced / ARG2:instrument / ARG3:enhanced by how much, EXT or MNR [beef.xml]
   LexSem("V","beef",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("beef"),Adv("up"),arg1,arg2,arg3))),

 'beep-01': # ARG0:causer, agent / ARG1:thing beeping [beep.xml]
   LexSem("V","beep",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("beep"),arg1))),

 'beep-02': # ARG0:notifier, agent / ARG1:notified person [beep.xml]
   LexSem("V","beep",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("beep"),arg1))),

 'beetle-01': # ARG0:Agent, pounder / ARG1:Entity pounded with beetle [beetle.xml]
   LexSem("V","beetle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("beetle"),arg1))),

 'beetle-02': # ARG1:Entity in motion [beetle.xml]
   LexSem("V","beetle",[":ARG1"],lambda arg1:S(arg1,VP(V("beetle")))),

 'befall-01': # ARG0:event / ARG1:experiencer [befall.xml]
   LexSem("V","befall",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("befall"),arg1))),

 'befit-01': # ARG1:thing(s) fitting / ARG2:befitting of [befit.xml]
   LexSem("V","befit",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("befit"),arg2))),

 'befriend-01': # ARG0:agentive friend / ARG1:new friend [befriend.xml]
   LexSem("V","befriend",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("befriend"),arg1))),

 'befuddle-01': # ARG0:Stimulus, agent / ARG1:entity experiencing confusion [befuddle.xml]
   LexSem("V","befuddle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("befuddle"),arg1))),

 'beg-01': # ARG0:begger, appealer / ARG1:appealed to, begged from / ARG2:begged/appealed for [beg.xml]
   LexSem("V","beg",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("beg"),arg1,pp("for",arg2)))),

 'beget-01': # ARG0:begetter / ARG1:begotten? [beget.xml]
   LexSem("V","beget",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("beget"),arg1))),

 'begin-01': # ARG0:beginner, agent / ARG1:thing begun / ARG2:subevent or thing that Arg1 begins with [begin.xml]
   LexSem("V","begin",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("begin"),arg1,pp("with",arg2)))),

 'begrudge-01': # ARG0:resenter / ARG1:thing or person begrudged / ARG2:because-of, why does arg 0 begrudge arg 1? [begrudge.xml]
   LexSem("V","begrudge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("begrudge"),arg1,arg2))),

 'beguile-01': # ARG0:causer of amusement / ARG1:amused entity / ARG2:instrument [beguile.xml]
   LexSem("V","beguile",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("beguile"),arg1,pp("with",arg2)))),

 'beguile-02': # ARG0:entity depriving / ARG1:thing taken by trickery / ARG2:taken from who? [beguile.xml]
   LexSem("V","beguile",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("beguile"),pp("of",arg1),arg2))),

 'beguile-03': # ARG0:liar / ARG1:deceived / ARG2:subject, deceived about [beguile.xml]
   LexSem("V","beguile",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("beguile"),arg1,pp("about",arg2)))),

 'behave-01': # ARG0:agent, entity behaving / ARG1:manner [behave.xml]
   LexSem("V","behave",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("behave"),pp("with",arg1)))),

 'behead-01': # ARG0:axeman, agent / ARG1:entity now without a head [behead.xml]
   LexSem("V","behead",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("behead"),arg1))),

 'behold-01': # ARG0:beholder / ARG1:beheld [behold.xml]
   LexSem("V","behold",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("behold"),arg1))),

 'behoove-01': # ARG1:Thing worthwhile/necessary / ARG2:benefactive [behoove.xml]
   LexSem("V","behoove",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("behoove"),arg2))),

 'belay-01': # ARG0:belayer, person securing something/someone else / ARG1:climber, rope being secured [belay.xml]
   LexSem("V","belay",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("belay"),arg1))),

 'belch-01': # ARG0:belcher / ARG1:cognate object or utterance [belch.xml]
   LexSem("V","belch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("belch"),arg1))),

 'belch-out-02': # ARG0:emitter / ARG1:emitted [belch.xml]
   LexSem("V","belch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("belch"),Adv("out"),arg1))),

 'beleaguer-01': # ARG0:agent, beleaguer-er / ARG1:harassed entity [beleaguer.xml]
   LexSem("V","beleaguer",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("beleaguer"),arg1))),

 'belie-01': # ARG0:demonstrator of falseness, agent / ARG1:entity shown to be false [belie.xml]
   LexSem("V","belie",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("belie"),arg1))),

 'believe-01': # ARG0:believer / ARG1:believed / ARG2:attribute, arg1 is believed to be what? [believe.xml]
   LexSem("V","believe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("believe"),arg1,arg2))),

 'belittle-01': # ARG0:causer of apparent insignificance, agent / ARG1:apparently insignificant thing [belittle.xml]
   LexSem("V","belittle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("belittle"),arg1))),

 'bellow-01': # ARG0:speaker / ARG1:utterance / ARG2:listener [bellow.xml]
   LexSem("V","bellow",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bellow"),arg1,pp("at",arg2)))),

 'belly-up-01': # ARG1:entity in motion / ARG2:destination [belly.xml]
   LexSem("V","belly",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("belly"),Adv("up"),pp("to",arg2)))),

 'bellyflop-01': # ARG1:thing failing [bellyflop.xml]
   LexSem("V","belly-flop",[":ARG1"],lambda arg1:S(arg1,VP(V("belly-flop")))),

 'belong-01': # ARG0:possession / ARG1:owner or group [belong.xml]
   LexSem("V","belong",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("belong"),pp("with",arg1)))),

 'belt-01': # ARG0:loud singer / ARG1:song / ARG2:audience [belt.xml]
   LexSem("V","belt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("belt"),arg1,pp("for",arg2)))),

 'belt-02': # ARG0:agent hitter / ARG1:patient, entity hit / ARG2:instrument [belt.xml]
   LexSem("V","belt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("belt"),arg1,pp("with",arg2)))),

 'belt-03': # ARG0:agent, person fastening the belt / ARG1:first (or all) thing(s) fastened with a belt / ARG2:additional thing(s), destination / ARG3:instrument, thing acting as a belt [belt.xml]
   LexSem("V","belt",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("belt"),arg1,pp("to",arg2),pp("with",arg3)))),

 'belt-out-05': # ARG0:loud singer / ARG1:song / ARG2:audience [belt.xml]
   LexSem("V","belt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("belt"),Adv("out"),arg1,pp("for",arg2)))),

 'bemoan-01': # ARG0:moaner, agent / ARG1:entity bemoaned [bemoan.xml]
   LexSem("V","bemoan",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bemoan"),arg1))),

 'bench-01': # ARG0:bencher / ARG1:person benched / ARG2:location [bench.xml]
   LexSem("V","bench",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bench"),arg1,arg2))),

 'bend-01': # ARG0:bender / ARG1:thing forming a curve [bend.xml]
   LexSem("V","bend",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bend"),arg1))),

 'bend-02': # ARG0:thing giving way / ARG1:thing that succeeded [bend.xml]
   LexSem("V","bend",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bend"),pp("to",arg1)))),

 'benefit-01': # ARG0:giver / ARG1:benefactive, given-to [benefit.xml]
   LexSem("V","benefit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("benefit"),arg1))),

 'bequeath-01': # ARG0:giver, agent / ARG1:entity bequeathed / ARG2:recipient [bequeath.xml]
   LexSem("V","bequeath",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bequeath"),arg1,arg2))),

 'berate-01': # ARG0:yeller / ARG1:yelled at / ARG2:cause [berate.xml]
   LexSem("V","berate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("berate"),arg1,pp("for",arg2)))),

 'bereave-01': # ARG0:entity removing / ARG1:thing being removed / ARG2:removed from [bereave.xml]
   LexSem("V","bereave",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bereave"),pp("of",arg1),arg2))),

 'berry-01': # ARG0:agent or causer / ARG1:entity gathered / ARG2:gathered into / ARG3:beneficiary [berry.xml]
   LexSem("V","berry",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("berry"),arg1,arg2,arg3))),

 'berth-01': # ARG0:docker / ARG1:docked (boat) / ARG2:shipyard, location [berth.xml]
   LexSem("V","berth",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("berth"),arg1,pp("in",arg2)))),

 'beseech-01': # ARG0:begger, person beseeching / ARG1:person arg 0 is imploring / ARG2:arg 1 is besought to do what? [beseech.xml]
   LexSem("V","beseech",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("beseech"),arg1,arg2))),

 'beset-01': # ARG0:attacker, agent / ARG1:attacked, theme [beset.xml]
   LexSem("V","beset",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("beset"),arg1))),

 'besiege-01': # ARG0:causer / ARG1:entity besieged / ARG2:entity besieged with [besiege.xml]
   LexSem("V","besiege",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("besiege"),arg1,pp("with",arg2)))),

 'besmirch-01': # ARG0:causer / ARG1:entity besmirched [besmirch.xml]
   LexSem("V","besmirch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("besmirch"),arg1))),

 'best-11': # ARG0:winner / ARG1:loser / ARG2:contest [better.xml]
   LexSem("V","best",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("best"),arg1,pp("in",arg2)))),

 'bestow-01': # ARG0:giver, agent / ARG1:gift, theme / ARG2:recipient, bestowed on [bestow.xml]
   LexSem("V","bestow",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bestow"),arg1,pp("on",arg2)))),

 'bestrew-01': # ARG0:scatterer / ARG1:surface bestrewn with something / ARG2:thing scattered, bestrewn on arg1 [bestrew.xml]
   LexSem("V","bestrew",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bestrew"),arg1,pp("with",arg2)))),

 'bestride-01': # ARG0:Straddler / ARG1:thing mounted, straddled [bestride.xml]
   LexSem("V","bestride",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bestride"),arg1))),

 'bet-01': # ARG0:better / ARG1:amount of bet / ARG2:basis, proposition, bet-on / ARG3:co-better [bet.xml]
   LexSem("V","bet",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("bet"),arg1,pp("on",arg2),arg3))),

 'betray-01': # ARG0:betrayer / ARG1:betrayed [betray.xml]
   LexSem("V","betray",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("betray"),arg1))),

 'betroth-01': # ARG0:agent / ARG1:person one / ARG2:person two [betroth.xml]
   LexSem("V","betroth",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("betroth"),arg1,arg2))),

 'better-01': # ARG0:causer of improvement, agent / ARG1:entity made better [better.xml]
   LexSem("V","better",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("better"),arg1))),

 'bewail-01': # ARG0:moaner, agent / ARG1:entity bemoaned [bewail.xml]
   LexSem("V","bewail",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bewail"),arg1))),

 'beware-01': # ARG0:wary entity / ARG1:thing wary of [beware.xml]
   LexSem("V","beware",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("beware"),arg1))),

 'bewilder-01': # ARG0:causer, agent / ARG1:entity experiencing confusion / ARG2:confused about or over what? [bewilder.xml]
   LexSem("V","bewilder",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bewilder"),arg1,pp("with",arg2)))),

 'bewitch-01': # ARG0:witch, agent / ARG1:victim / ARG2:instrument, when separate from arg0 [bewitch.xml]
   LexSem("V","bewitch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bewitch"),arg1,pp("with",arg2)))),

 'bias-01': # ARG0:causal agent / ARG1:biased entity / ARG2:in favor of / ARG3:against [bias.xml]
   LexSem("V","bias",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("bias"),arg1,arg2,pp("against",arg3)))),

 'bicker-01': # ARG0:1st bickerer / ARG1:topic of argument, bickered-over / ARG2:other arguer, when separate mention [bicker.xml]
   LexSem("V","bicker",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bicker"),pp("over",arg1),pp("with",arg2)))),

 'bicycle-01': # ARG0:bicycler / ARG1:path [bicycle.xml]
   LexSem("V","bicycle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bicycle"),arg1))),

 'bid-01': # ARG0:bidder / ARG1:the target, goods / ARG2:how much you're bidding, buying price [bid.xml]
   LexSem("V","bid",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bid"),pp("for",arg1),arg2))),

 'bid-02': # ARG0:bidder / ARG1:the target / ARG2:benefactive / ARG3:secondary predication on Arg1 [bid.xml]
   LexSem("V","bid",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("bid"),arg1,arg2,arg3))),

 'bid-03': # ARG0:speaker / ARG1:utterance / ARG2:listener [bid.xml]
   LexSem("V","bid",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bid"),arg1,pp("to",arg2)))),

 'bid-06': # ARG0:player / ARG1:suit [bid.xml]
   LexSem("V","bid",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bid"),pp("of",arg1)))),

 'bide-01': # ARG0:agent, person biding time / ARG1:time [bide.xml]
   LexSem("V","bide",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bide"),arg1))),

 'biff-01': # ARG0:hitter / ARG1:victim [biff.xml]
   LexSem("V","biff",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("biff"),arg1))),

 'bifurcate-01': # ARG0:splitter / ARG1:thing split [bifurcate.xml]
   LexSem("V","bifurcate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bifurcate"),arg1))),

 'bike-01': # ARG0:bicycler / ARG1:path [bike.xml]
   LexSem("V","bike",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bike"),arg1))),

 'bilk-01': # ARG0:cheater / ARG1:thing being removed / ARG2:removed from [bilk.xml]
   LexSem("V","bilk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bilk"),arg1,arg2))),

 'bill-01': # ARG0:seller, biller / ARG1:asking price, amount of bill / ARG2:buyer, billed / ARG3:commodity [bill.xml]
   LexSem("V","bill",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("bill"),arg1,arg2,pp("for",arg3)))),

 'bill-02': # ARG0:describer / ARG1:thing described / ARG2:secondary attribute, described-as [bill.xml]
   LexSem("V","bill",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bill"),arg1,pp("as",arg2)))),

 'billet-01': # ARG0:provider of housing / ARG1:entity housed / ARG2:location [billet.xml]
   LexSem("V","billet",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("billet"),arg1,pp("on",arg2)))),

 'billow-01': # ARG1:entity billowing / ARG2:direction [billow.xml]
   LexSem("V","billow",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("billow"),arg2))),

 'bin-01': # ARG0:storer / ARG1:thing stored / ARG2:bin, location [bin.xml]
   LexSem("V","bin",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bin"),arg1,arg2))),

 'bind-01': # ARG0:attacher, agent / ARG1:thing bound / ARG2:bound to what / ARG3:with what / ARG4:binding-affinity [bind.xml]
   LexSem("V","bind",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("bind"),arg1,arg2,pp("by",arg3),pp("with",arg4)))),

 'bind-02': # ARG1:thing that is likely [bind.xml]
   LexSem("V","bind",[":ARG1"],lambda arg1:S(arg1,VP(V("bind")))),

 'bind-03': # ARG1:thing destined / ARG2:destiny [bind.xml]
   LexSem("V","bound",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("bound"),pp("for",arg2)))),

 'bind-up-04': # ARG0:attacher, agent / ARG1:thing bound / ARG2:bound to what / ARG3:with what [bind.xml]
   LexSem("V","bind",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("bind"),Adv("up"),arg1,pp("with",arg2),arg3))),

 'biopsy-101': # ARG0:Doctor / ARG1:Tissue/Patient [biopsy.xml]
   LexSem("V","biopsy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("biopsy"),arg1))),

 'biotinylate-01': # ARG0:intentional agent of biotinylation (e.g. scientist) / ARG1:thing biotinylated (e.g. protein) / ARG2:instrument / ARG3:result of biotinylation [biotinylate.xml]
   LexSem("V","biotinylate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("biotinylate"),arg1,pp("with",arg2),arg3))),

 'birch-01': # ARG0:hitter / ARG1:victim [birch.xml]
   LexSem("V","birch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("birch"),arg1))),

 'birdnest-01': # ARG0:agent or causer / ARG1:entity gathered / ARG2:gathered into / ARG3:beneficiary [birdnest.xml]
   LexSem("V","birdnest",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("birdnest"),arg1,arg2,arg3))),

 'bisect-01': # ARG0:agent, cause of division / ARG1:thing divided / ARG2:divider,instrument [bisect.xml]
   LexSem("V","bisect",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bisect"),arg1,pp("with",arg2)))),

 'bitch-01': # ARG0:complainer / ARG1:cause, complain of or about / ARG2:hearer, complain to [bitch.xml]
   LexSem("V","bitch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bitch"),pp("about",arg1),pp("to",arg2)))),

 'bite-01': # ARG0:biter, agent / ARG1:entity bitten [bite.xml]
   LexSem("V","bite",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bite"),arg1))),

 'bivouac-01': # ARG0:entity camping / ARG1:location, made campsite [bivouac.xml]
   LexSem("V","bivouac",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bivouac"),pp("in",arg1)))),

 'blab-01': # ARG0:talker / ARG1:subject / ARG2:listener [blab.xml]
   LexSem("V","blab",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("blab"),pp("about",arg1),pp("to",arg2)))),

 'blabber-01': # ARG0:speaker / ARG1:utterance, blabber about / ARG2:listener [blabber.xml]
   LexSem("V","blabber",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("blabber"),arg1,arg2))),

 'black-out-02': # ARG0:fainter [blacken.xml]
   LexSem("V","black",[":ARG0"],lambda arg0:S(arg0,VP(V("black"),Adv("out")))),

 'black-out-03': # ARG0:causer of non-emission, agent / ARG1:non-emitter of light [blacken.xml]
   LexSem("V","black",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("black"),Adv("out"),arg1))),

 'blackberry-01': # ARG0:agent or causer / ARG1:entity gathered / ARG2:gathered into / ARG3:beneficiary [blackberry.xml]
   LexSem("V","blackberry",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("blackberry"),arg1,arg2,arg3))),

 'blacken-01': # ARG0:cause of blackness / ARG1:thing that is black in color [blacken.xml]
   LexSem("V","blacken",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("blacken"),arg1))),

 'blacklist-01': # ARG0:lister / ARG1:listed entity [blacklist.xml]
   LexSem("V","blacklist",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("blacklist"),arg1))),

 'blackmail-01': # ARG0:blackmailer, agent / ARG1:entity blackmailed [blackmail.xml]
   LexSem("V","blackmail",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("blackmail"),arg1))),

 'blame-01': # ARG0:blamer / ARG1:entity blamed / ARG2:blame [blame.xml]
   LexSem("V","blame",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("blame"),arg1,pp("for",arg2)))),

 'blanch-01': # ARG0:fainter [blanch.xml]
   LexSem("V","blanch",[":ARG0"],lambda arg0:S(arg0,VP(V("blanch")))),

 'blanch-02': # ARG0:cook / ARG1:food [blanch.xml]
   LexSem("V","blanch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("blanch"),arg1))),

 'blanket-01': # ARG0:coverer / ARG1:thing covered / ARG2:instrument, covered by [blanket.xml]
   LexSem("V","blanket",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("blanket"),arg1,pp("with",arg2)))),

 'blare-01': # ARG0:causer, agent / ARG1:source of loud noise [blare.xml]
   LexSem("V","blare",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("blare"),arg1))),

 'blaspheme-01': # ARG0:blasphemer / ARG1:thing being blasphemed [blaspheme.xml]
   LexSem("V","blaspheme",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("blaspheme"),arg1))),

 'blast-01': # ARG0:causer, agent / ARG1:source of loud noise, noise itself [blast.xml]
   LexSem("V","blast",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("blast"),arg1))),

 'blast-02': # ARG0:blamer / ARG1:blamed / ARG2:blamed for [blast.xml]
   LexSem("V","blast",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("blast"),arg1,pp("for",arg2)))),

 'blast-04': # ARG0:entity in motion [blast.xml]
   LexSem("V","blast",[":ARG0"],lambda arg0:S(arg0,VP(V("blast")))),

 'blast-05': # ARG0:agent / ARG1:explosive thing, fire / ARG2:target of explosion / ARG3:the resulting hole [blast.xml]
   LexSem("V","blast",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("blast"),arg1,arg2,arg3))),

 'blast-away-03': # ARG0:shooter / ARG1:target [blast.xml]
   LexSem("V","blast",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("blast"),Adv("away"),pp("at",arg1)))),

 'blast-off-06': # ARG0:thing taking off [blast.xml]
   LexSem("V","blast",[":ARG0"],lambda arg0:S(arg0,VP(V("blast"),Adv("off")))),

 'blat-01': # ARG0:blat-er [blat.xml]
   LexSem("V","blat",[":ARG0"],lambda arg0:S(arg0,VP(V("blat")))),

 'blather-01': # ARG0:blatherer / ARG1:utterance / ARG2:audience [blather.xml]
   LexSem("V","blather",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("blather"),arg1,arg2))),

 'blaze-01': # ARG1:thing burning [blaze.xml]
   LexSem("V","blaze",[":ARG1"],lambda arg1:S(arg1,VP(V("blaze")))),

 'blaze-02': # ARG0:trail blazer / ARG1:trail [blaze.xml]
   LexSem("V","blaze",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("blaze"),arg1))),

 'bleach-01': # ARG0:agent, bleacher / ARG1:patient, thing made lighter / ARG2:end state [bleach.xml]
   LexSem("V","bleach",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bleach"),arg1,arg2))),

 'bleat-01': # ARG0:bleat-er [bleat.xml]
   LexSem("V","bleat",[":ARG0"],lambda arg0:S(arg0,VP(V("bleat")))),

 'bleat-02': # ARG0:Thing making bleating sound while in motion / ARG1:Path of motion [bleat.xml]
   LexSem("V","bleat",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bleat"),pp("down",arg1)))),

 'bleat-03': # ARG0:sound emitter / ARG1:complaint; sound emitted [bleat.xml]
   LexSem("V","bleat",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bleat"),arg1))),

 'bleed-01': # ARG0:causer of bloodshed, agent / ARG1:entity bleeding [bleed.xml]
   LexSem("V","bleed",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bleed"),arg1))),

 'bleed-02': # ARG0:causer of bleeding, agent / ARG1:entity losing money [bleed.xml]
   LexSem("V","bleed",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bleed"),arg1))),

 'bleed-03': # ARG0:experiencer / ARG1:thing bleeding for [bleed.xml]
   LexSem("V","bleed",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bleed"),pp("for",arg1)))),

 'bleed-off-04': # ARG0:decreaser, agent / ARG1:stuff being removed [bleed.xml]
   LexSem("V","bleed",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bleed"),Adv("off"),arg1))),

 'bleed-out-05': # ARG1:one who is bleeding [bleed.xml]
   LexSem("V","bleed",[":ARG1"],lambda arg1:S(arg1,VP(V("bleed"),Adv("out")))),

 'blemish-01': # ARG0:causer / ARG1:entity disfigured [blemish.xml]
   LexSem("V","blemish",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("blemish"),arg1))),

 'blend-01': # ARG0:agent, mixer / ARG1:ingredient one / ARG2:ingredient two / ARG3:end product [blend.xml]
   LexSem("V","blend",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("blend"),arg1,pp("with",arg2),arg3))),

 'bless-01': # ARG0:entity giving blessing / ARG1:entity being blessed / ARG2:blessed with (gift) [bless.xml]
   LexSem("V","bless",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bless"),arg1,pp("with",arg2)))),

 'blight-01': # ARG0:spoiler (agent only) / ARG1:thing spoiled / ARG2:instrument [blight.xml]
   LexSem("V","blight",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("blight"),arg1,arg2))),

 'blindfold-01': # ARG0:coverer, agent / ARG1:entity with covered eyes / ARG2:explicit mention of blindfold [blindfold.xml]
   LexSem("V","blindfold",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("blindfold"),arg1,pp("with",arg2)))),

 'blindside-01': # ARG0:agent/cause of surprise / ARG1:surprised entity / ARG2:surprised with what? [blindside.xml]
   LexSem("V","blindside",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("blindside"),arg1,pp("with",arg2)))),

 'blink-01': # ARG0:blinker / ARG1:eyes, usually unstated [blink.xml]
   LexSem("V","blink",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("blink"),arg1))),

 'blister-01': # ARG0:agent/causer of blisters / ARG1:thing becoming blistered [blister.xml]
   LexSem("V","blister",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("blister"),arg1))),

 'blister-02': # ARG0:Scalder / ARG1:Recipient of scalding [blister.xml]
   LexSem("V","blister",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("blister"),arg1))),

 'blitz-01': # ARG0:destroyer / ARG1:thing destroyed / ARG2:instrument of destruction [blitz.xml]
   LexSem("V","blitz",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("blitz"),arg1,arg2))),

 'bloat-01': # ARG0:causer of expansion / ARG1:thing inflated / ARG2:substance [bloat.xml]
   LexSem("V","bloat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bloat"),arg1,pp("with",arg2)))),

 'block-01': # ARG0:blocker, Agent / ARG1:Theme (action or object being stopped) / ARG2:secondary predication, arg1 stopped from what, where relevant / ARG3:Instrument, blcked with what? stuff acting as block [block.xml]
   LexSem("V","block",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("block"),arg1,pp("from",arg2),arg3))),

 'block-up-02': # ARG0:blocker, Agent / ARG1:Theme (action or object being stopped) / ARG2:secondary predication / ARG3:Instrument [block.xml]
   LexSem("V","block",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("block"),Adv("up"),arg1,arg2,arg3))),

 'blockade-01': # ARG0:impeder, Agent / ARG1:impeded, Theme / ARG2:Instrument [blockade.xml]
   LexSem("V","blockade",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("blockade"),arg1,arg2))),

 'blog-01': # ARG0:writer / ARG1:thing written / ARG2:benefactive [blog.xml]
   LexSem("V","blog",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("blog"),arg1,arg2))),

 'blood-01': # ARG0:agent / ARG1:theme, one bled [blood.xml]
   LexSem("V","blood",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("blood"),arg1))),

 'blood-02': # ARG1:entity possessing blood / ARG2:characteristic of the blood [blood.xml]
   LexSem("V","blood",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("blood"),arg2))),

 'bloody-01': # ARG0:causer / ARG1:entity bloodied [bloody.xml]
   LexSem("V","bloody",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bloody"),arg1))),

 'bloom-01': # ARG0:bloom-v: bloomer (no, not like that!) [bloom.xml]
   LexSem("V","bloom",[":ARG0"],lambda arg0:S(arg0,VP(V("bloom")))),

 'blossom-01': # ARG1:entity blossoming [blossom.xml]
   LexSem("V","blossom",[":ARG1"],lambda arg1:S(arg1,VP(V("blossom")))),

 'blot-out-01': # ARG0:blotter, agent / ARG1:entity blotted [blot.xml]
   LexSem("V","blot",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("blot"),Adv("out"),arg1))),

 'blow-01': # ARG0:wind / ARG1:thing being moved [blow.xml]
   LexSem("V","blow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("blow"),arg1))),

 'blow-02': # ARG0:shaper / ARG1:thing worked on / ARG2:end state, if different from arg1 [blow.xml]
   LexSem("V","blow",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("blow"),arg1,pp("into",arg2)))),

 'blow-03': # ARG0:giver / ARG1:getter [blow.xml]
   LexSem("V","blow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("blow"),arg1))),

 'blow-04': # ARG1:wind [blow.xml]
   LexSem("V","blow",[":ARG1"],lambda arg1:S(arg1,VP(V("blow")))),

 'blow-08': # ARG0:cause of explosion / ARG1:thing exploding / ARG2:entity damaged, damage caused by explosion [blow.xml]
   LexSem("V","blow",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("blow"),arg1,arg2))),

 'blow-09': # ARG0:player / ARG1:trumpet [blow.xml]
   LexSem("V","blow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("blow"),arg1))),

 'blow-10': # ARG0:errer / ARG1:error [blow.xml]
   LexSem("V","blow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("blow"),arg1))),

 'blow-11': # ARG0:agent, one wasting stuff / ARG1:theme, stuff wasted / ARG2:recipient, what stuff was wasted on [blow.xml]
   LexSem("V","blow",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("blow"),arg1,pp("on",arg2)))),

 'blow-13': # ARG1:thing that is crappy [blow.xml]
   LexSem("V","blow",[":ARG1"],lambda arg1:S(arg1,VP(V("blow")))),

 'blow-out-07': # ARG0:air / ARG1:thing being moved [blow.xml]
   LexSem("V","blow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("blow"),Adv("out"),arg1))),

 'blow-over-12': # ARG1:thing that is passing, ending [blow.xml]
   LexSem("V","blow",[":ARG1"],lambda arg1:S(arg1,VP(V("blow"),Adv("over")))),

 'blow-up-05': # ARG0:inflater, agent / ARG1:thing grown / ARG2:amount increased by, EXT or MNR / ARG3:start point / ARG4:end point, end state of arg1 [blow.xml]
   LexSem("V","blow",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("blow"),Adv("up"),arg1,arg2,arg3,arg4))),

 'blow-up-06': # ARG0:causal agent / ARG1:thing exploding / ARG2:instrument (bomb) [blow.xml]
   LexSem("V","blow",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("blow"),Adv("up"),arg1,pp("with",arg2)))),

 'blubber-01': # ARG0:crier/child / ARG1:tears [blubber.xml]
   LexSem("V","blubber",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("blubber"),arg1))),

 'bludgeon-01': # ARG0:agent, hitter - animate only! / ARG1:thing hit / ARG2:instrument, thing hit by or with [bludgeon.xml]
   LexSem("V","bludgeon",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bludgeon"),arg1,pp("with",arg2)))),

 'bluff-01': # ARG0:misleader, agent / ARG1:entity misled / ARG2:mislead into [bluff.xml]
   LexSem("V","bluff",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bluff"),arg1,pp("into",arg2)))),

 'blunder-01': # ARG0:clumsy mover, agent / ARG1:direction [blunder.xml]
   LexSem("V","blunder",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("blunder"),pp("into",arg1)))),

 'blunder-02': # ARG0:maker of mistake / ARG1:mistake [blunder.xml]
   LexSem("V","blunder",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("blunder"),pp("in",arg1)))),

 'blunt-01': # ARG0:causer of bluntness, agent / ARG1:entity becoming blunt [blunt.xml]
   LexSem("V","blunt",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("blunt"),arg1))),

 'blur-01': # ARG0:causer of blurriness, agent / ARG1:entity blurred [blur.xml]
   LexSem("V","blur",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("blur"),arg1))),

 'blurt-out-01': # ARG0:speaker / ARG1:utterance / ARG2:hearer [blurt.xml]
   LexSem("V","blurt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("blurt"),Adv("out"),arg1,pp("to",arg2)))),

 'blush-01': # ARG0:blusher / ARG1:blushed-at, cause [blush.xml]
   LexSem("V","blush",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("blush"),pp("at",arg1)))),

 'bluster-01': # ARG0:speaker / ARG1:utterance / ARG2:hearer [bluster.xml]
   LexSem("V","bluster",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bluster"),arg1,arg2))),

 'board-01': # ARG0:passenger / ARG1:vehicle [board.xml]
   LexSem("V","board",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("board"),arg1))),

 'board-02': # ARG0:boarder / ARG1:location, house [board.xml]
   LexSem("V","board",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("board"),pp("in",arg1)))),

 'board-03': # ARG0:person placing board / ARG1:object getting attached to board [board.xml]
   LexSem("V","board",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("board"),arg1))),

 'board-05': # ARG0:skater / ARG1:path [board.xml]
   LexSem("V","board",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("board"),pp("off",arg1)))),

 'board-up-04': # ARG0:person placing board / ARG1:object getting attached to board [board.xml]
   LexSem("V","board",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("board"),Adv("up"),arg1))),

 'boast-01': # ARG0:boaster / ARG1:thing proud of / ARG2:hearer [boast.xml]
   LexSem("V","boast",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("boast"),pp("of",arg1),pp("to",arg2)))),

 'boat-01': # ARG0:boater, agent [boat.xml]
   LexSem("V","boat",[":ARG0"],lambda arg0:S(arg0,VP(V("boat")))),

 'bob-01': # ARG0:cause of motion / ARG1:thing in motion [bob.xml]
   LexSem("V","bob",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bob"),arg1))),

 'bobsled-01': # ARG0:agent, driver (transitive subject) / ARG1:thing moved (intransitive subject, transitive object) / ARG2:locations, or start point / ARG3:destination [bobsled.xml]
   LexSem("V","bobsled",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("bobsled"),arg1,pp("down",arg2),arg3))),

 'bode-01': # ARG0:omen / ARG1:good or bad / ARG2:benefactive [bode.xml]
   LexSem("V","bode",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bode"),arg1,pp("for",arg2)))),

 'bog-down-01': # ARG0:agent, causer / ARG1:entity bogged down [bog.xml]
   LexSem("V","bog",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bog"),Adv("down"),arg1))),

 'boggle-01': # ARG0:experiencer of confusion or wonder / ARG1:cause of confusion or wonder [boggle.xml]
   LexSem("V","boggle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("boggle"),arg1))),

 'boil-01': # ARG0:applier of heat / ARG1:water [boil.xml]
   LexSem("V","boil",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("boil"),arg1))),

 'boil-down-03': # ARG0:agent / ARG1:thing summarized / ARG2:source / ARG3:benefactive, summarized for [boil.xml]
   LexSem("V","boil",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("boil"),Adv("down"),pp("to",arg1),arg2,arg3))),

 'boil-over-02': # ARG1:thing boiling over (pot, etc) [boil.xml]
   LexSem("V","boil",[":ARG1"],lambda arg1:S(arg1,VP(V("boil"),Adv("over")))),

 'bolshevize-01': # ARG0:agent, bolshevizing entity / ARG1:entity bolshevized [bolshevize.xml]
   LexSem("V","bolshevize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bolshevize"),arg1))),

 'bolster-01': # ARG0:causer, agent / ARG1:thing increasing or strengthened / ARG2:amount increased, EXT [bolster.xml]
   LexSem("V","bolster",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bolster"),arg1,pp("by",arg2)))),

 'bolt-01': # ARG0:runner [bolt.xml]
   LexSem("V","bolt",[":ARG0"],lambda arg0:S(arg0,VP(V("bolt")))),

 'bolt-02': # ARG0:attacher, agent causing attachment / ARG1:first thing being clamped / ARG2:second thing, clamped to what [bolt.xml]
   LexSem("V","bolt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bolt"),arg1,pp("to",arg2)))),

 'bomb-01': # ARG0:attacker, agent / ARG1:entity bombed [bomb.xml]
   LexSem("V","bomb",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bomb"),arg1))),

 'bomb-02': # ARG1:entity failing / ARG2:task, test [bomb.xml]
   LexSem("V","bomb",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("bomb"),arg2))),

 'bombard-01': # ARG0:attacker, agent / ARG1:entity (e.g. region) bombarded [bombard.xml]
   LexSem("V","bombard",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bombard"),arg1))),

 'bond-01': # ARG0:attacher, agent / ARG1:focus of attachment / ARG2:thing bonded to / ARG3:instrument of bonding, glue [bond.xml]
   LexSem("V","bond",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("bond"),arg1,pp("to",arg2),pp("with",arg3)))),

 'bond-02': # ARG1:secured item [bond.xml]
   LexSem("V","bond",[":ARG1"],lambda arg1:S(arg1,VP(V("bond")))),

 'bone-01': # ARG0:remover / ARG1:thing which used to have bones [bone.xml]
   LexSem("V","bone",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bone"),arg1))),

 'bone-up-02': # ARG0:boner up / ARG1:subject [bone.xml]
   LexSem("V","bone",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bone"),Adv("up"),pp("on",arg1)))),

 'bonk-01': # ARG0:hitter / ARG1:victim [bonk.xml]
   LexSem("V","bonk",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bonk"),arg1))),

 'boo-01': # ARG0:boo-er / ARG1:boo-ed / ARG2:cause, misdeed [boo.xml]
   LexSem("V","boo",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("boo"),arg1,pp("for",arg2)))),

 'boogie-01': # ARG0:dancer / ARG1:theme, partner or body part made to dance, explicit mention of dance itself [boogie.xml]
   LexSem("V","boogie",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("boogie"),arg1))),

 'book-01': # ARG0:officer, agent doing booking / ARG1:criminal, person or value being booked / ARG2:crime, what you are booked for or as / ARG3:prison, place booked into [book.xml]
   LexSem("V","book",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("book"),arg1,pp("on",arg2),arg3))),

 'book-03': # ARG0:person buying/scheduling the activity/appointment / ARG1:activity/room booked; tickets / ARG2:schedule owner / ARG3:the schedule itself / ARG4:booking agent, if different from arg0 / ARG5:itinerary, time of activity [book.xml]
   LexSem("V","book",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg0,arg1,arg2,arg3,arg4,arg5:S(arg0,VP(V("book"),arg1,arg2,arg3,pp("through",arg4),pp("for",arg5)))),

 'book-up-02': # ARG0:booker, entity making reservation, etc / ARG1:booked, hotel, etc. [book.xml]
   LexSem("V","book",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("book"),Adv("up"),arg1))),

 'boom-01': # ARG0:causer of boom, agent / ARG1:loud noise / ARG2:source of loud noise [boom.xml]
   LexSem("V","boom",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("boom"),arg1,pp("from",arg2)))),

 'boom-02': # ARG0:successful thing / ARG1:specific aspect of arg0 growing [boom.xml]
   LexSem("V","boom",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("boom"),arg1))),

 'boom-out-03': # ARG0:introducer / ARG1:thing appearing [boom.xml]
   LexSem("V","boom",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("boom"),Adv("out"),arg1))),

 'boost-01': # ARG0:causer of upward motion, Agent / ARG1:Logical subject, thing moving upward / ARG2:EXT, amount risen / ARG3:start point / ARG4:end point [boost.xml]
   LexSem("V","boost",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("boost"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'boot-01': # ARG0:booting entity, agent / ARG1:booted entity, patient / ARG2:booted from (if relevant) [boot.xml]
   LexSem("V","boot",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("boot"),arg1,pp("from",arg2)))),

 'boot-02': # ARG0:unmentioned agent [boot.xml]
   LexSem("V","boot",[":ARG0"],lambda arg0:S(arg0,VP(V("boot")))),

 'bootleg-01': # ARG0:copier, agent / ARG1:commodity [bootleg.xml]
   LexSem("V","bootleg",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bootleg"),arg1))),

 'booze-01': # ARG0:drunk [booze.xml]
   LexSem("V","booze",[":ARG0"],lambda arg0:S(arg0,VP(V("booze")))),

 'bop-01': # ARG0:agent, dancer / ARG1:partner, body part made to dance, or explicit mention of dance itself [bop.xml]
   LexSem("V","bop",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bop"),arg1))),

 'border-01': # ARG0:causer, outside agent / ARG1:thing on the edge / ARG2:on the edge of what [border.xml]
   LexSem("V","border",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("border"),pp("with",arg1),arg2))),

 'bore-01': # ARG0:creator of hole, agent / ARG1:hole / ARG2:location of hole / ARG3:instrument [bore.xml]
   LexSem("V","bore",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("bore"),arg1,pp("into",arg2),pp("with",arg3)))),

 'bore-02': # ARG0:boring entity / ARG1:experiencer of boredom / ARG2:instrument / ARG3:intensifier (the heck, etc) [bore.xml]
   LexSem("V","bore",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("bore"),arg1,pp("with",arg2),arg3))),

 'borrow-01': # ARG0:borrower / ARG1:thing borrowed / ARG2:loaner / ARG3:collateral [borrow.xml]
   LexSem("V","borrow",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("borrow"),arg1,pp("from",arg2),pp("against",arg3)))),

 'boss-01': # ARG0:Boss / ARG1:Plebe, person bossed [boss.xml]
   LexSem("V","boss",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("boss"),arg1))),

 'boss-around-02': # ARG0:boss / ARG1:plebe, person bossed around [boss.xml]
   LexSem("V","boss",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("boss"),Adv("around"),arg1))),

 'botch-01': # ARG0:inept individual, agent / ARG1:entity botched [botch.xml]
   LexSem("V","botch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("botch"),arg1))),

 'bother-01': # ARG0:causer of bothering / ARG1:bothered / ARG2:instrument of bothering (if in addition to arg0) [bother.xml]
   LexSem("V","bother",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bother"),arg1,pp("with",arg2)))),

 'bother-02': # ARG0:botherer / ARG1:real action [bother.xml]
   LexSem("V","bother",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bother"),pp("to",arg1)))),

 'bottle-01': # ARG0:bottler, agent / ARG1:entity bottled [bottle.xml]
   LexSem("V","bottle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bottle"),arg1))),

 'bottle-up-02': # ARG0:suppressor, agent / ARG1:entity bottled up [bottle.xml]
   LexSem("V","bottle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bottle"),Adv("up"),arg1))),

 'bottlefeed-01': # ARG0:Feeder, agent / ARG1:Milk, food fed / ARG2:Baby, recipient of food [bottlefeed.xml]
   LexSem("V","bottlefeed",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bottlefeed"),arg1,arg2))),

 'bottleneck-01': # ARG0:cause of confinement / ARG1:entity confined, stuck in the bottleneck / ARG2:confined-to, thing acting as the bottleneck itself [bottleneck.xml]
   LexSem("V","bottleneck",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bottleneck"),arg1,pp("on",arg2)))),

 'bottom-out-01': # ARG0:thing reaching the bottom [bottom.xml]
   LexSem("V","bottom",[":ARG0"],lambda arg0:S(arg0,VP(V("bottom"),Adv("out")))),

 'bounce-01': # ARG0:causer of bouncing, agent / ARG1:thing bouncing, rubber ball / ARG2:extent / ARG3:start point / ARG4:end point [bounce.xml]
   LexSem("V","bounce",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("bounce"),arg1,arg2,arg3,pp("to",arg4)))),

 'bounce-back-02': # ARG1:thing recovering [bounce.xml]
   LexSem("V","bounce",[":ARG1"],lambda arg1:S(arg1,VP(V("bounce"),Adv("back")))),

 'bound-08': # ARG0:thing in motion [bind.xml]
   LexSem("V","bound",[":ARG0"],lambda arg0:S(arg0,VP(V("bound")))),

 'bound-09': # ARG0:boundary / ARG1:thing bounded [bind.xml]
   LexSem("V","bound",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bound"),arg1))),

 'bow-01': # ARG0:bower / ARG1:bowed to / ARG2:body part bowed [bow.xml]
   LexSem("V","bow",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bow"),pp("to",arg1),arg2))),

 'bow-02': # ARG1:thing bending [bow.xml]
   LexSem("V","bow",[":ARG1"],lambda arg1:S(arg1,VP(V("bow")))),

 'bow-03': # ARG1:thing failing [bow.xml]
   LexSem("V","bow",[":ARG1"],lambda arg1:S(arg1,VP(V("bow")))),

 'bow-down-04': # ARG0:bower / ARG1:bowed to [bow.xml]
   LexSem("V","bow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bow"),Adv("down"),pp("to",arg1)))),

 'bow-out-06': # ARG0:entity leaving / ARG1:place left [bow.xml]
   LexSem("V","bow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bow"),Adv("out"),pp("of",arg1)))),

 'bowl-01': # ARG0:bowler (not the hat) [bowl.xml]
   LexSem("V","bowl",[":ARG0"],lambda arg0:S(arg0,VP(V("bowl")))),

 'bowl-over-02': # ARG0:causer of astonishment / ARG1:astonished entity [bowl.xml]
   LexSem("V","bowl",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bowl"),Adv("over"),arg1))),

 'box-01': # ARG0:storer / ARG1:thing stored / ARG2:box [box.xml]
   LexSem("V","box",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("box"),arg1,pp("in",arg2)))),

 'box-02': # ARG0:cause / ARG1:entity forming a box / ARG2:enclosed area [box.xml]
   LexSem("V","box",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("box"),arg1,pp("around",arg2)))),

 'box-03': # ARG0:First fighter / ARG1:Second fighter [box.xml]
   LexSem("V","box",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("box"),arg1))),

 'box-in-04': # ARG0:agent/cause of entrapment / ARG1:the walls, trap (if separate from arg1) / ARG2:entity trapped, enclosed / ARG3:in regards to what [box.xml]
   LexSem("V","box",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("box"),Adv("in"),arg1,arg2,pp("on",arg3)))),

 'boycott-01': # ARG0:boycotter / ARG1:unpleasant thing [boycott.xml]
   LexSem("V","boycott",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("boycott"),arg1))),

 'brace-01': # ARG0:preparer, agent / ARG1:patient / ARG2:prepare for [brace.xml]
   LexSem("V","brace",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("brace"),arg1,pp("for",arg2)))),

 'brace-02': # ARG0:agent, cause of stability / ARG1:entity supported / ARG2:instrument, if seperate from arg 0 [brace.xml]
   LexSem("V","brace",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("brace"),pp("of",arg1),pp("with",arg2)))),

 'bracket-01': # ARG0:Agent, entity causing bracketing / ARG1:Entity bracketed / ARG2:Bracketed to, together with what? NOT instrument, other stuff in bracket / ARG3:Bracket itself, type of bracket [bracket.xml]
   LexSem("V","bracket",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("bracket"),arg1,pp("with",arg2),pp("with",arg3)))),

 'brag-01': # ARG0:boastful talker, agent / ARG1:topic bragged about [brag.xml]
   LexSem("V","brag",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("brag"),pp("about",arg1)))),

 'braid-01': # ARG0:agent / ARG1:hair / ARG2:end result [braid.xml]
   LexSem("V","braid",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("braid"),arg1,pp("into",arg2)))),

 'brain-01': # ARG0:hitter / ARG1:victim [brain.xml]
   LexSem("V","brain",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("brain"),arg1))),

 'brainwash-01': # ARG0:persuader / ARG1:impelled agent / ARG2:impelled action [brainwash.xml]
   LexSem("V","brainwash",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("brainwash"),arg1,pp("to",arg2)))),

 'braise-01': # ARG0:cooker, agent / ARG1:patient, thing braised / ARG2:braising liquid [braise.xml]
   LexSem("V","braise",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("braise"),arg1,pp("in",arg2)))),

 'brake-01': # ARG0:causer of slowing / ARG1:vehicle [brake.xml]
   LexSem("V","brake",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("brake"),arg1))),

 'branch-01': # ARG0:thing branching / ARG1:destination (into) [branch.xml]
   LexSem("V","branch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("branch"),pp("into",arg1)))),

 'branch-out-02': # ARG0:thing branching / ARG1:destination (into) [branch.xml]
   LexSem("V","branch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("branch"),Adv("out"),pp("into",arg1)))),

 'brand-01': # ARG0:caller / ARG1:item being labelled / ARG2:attribute [brand.xml]
   LexSem("V","brand",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("brand"),arg1,pp("as",arg2)))),

 'brandish-01': # ARG0:waver, agent / ARG1:weapon [brandish.xml]
   LexSem("V","brandish",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("brandish"),arg1))),

 'brave-01': # ARG0:courageous one / ARG1:challenge [brave.xml]
   LexSem("V","brave",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("brave"),arg1))),

 'brawl-01': # ARG0:first fighter / ARG1:second fighter, if separate / ARG2:over what? Cause or spoils [brawl.xml]
   LexSem("V","brawl",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("brawl"),pp("with",arg1),pp("over",arg2)))),

 'bray-01': # ARG0:bray-er [bray.xml]
   LexSem("V","bray",[":ARG0"],lambda arg0:S(arg0,VP(V("bray")))),

 'brazen-out-01': # ARG0:facer of adversity, agent / ARG1:adversity, theme [brazen.xml]
   LexSem("V","brazen",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("brazen"),Adv("out"),arg1))),

 'breach-01': # ARG0:breaker / ARG1:thing broken [breach.xml]
   LexSem("V","breach",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("breach"),arg1))),

 'bread-01': # ARG0:coverer, agent / ARG1:coated/covered thing / ARG2:bread, redundantly [bread.xml]
   LexSem("V","bread",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bread"),arg1,arg2))),

 'break-01': # ARG0:breaker / ARG1:thing broken / ARG2:instrument / ARG3:pieces / ARG4:arg1 broken away from what? [break.xml]
   LexSem("V","break",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("break"),arg1,arg2,pp("into",arg3),pp("with",arg4)))),

 'break-02': # ARG0:enterer / ARG1:place/domain broken into [break.xml]
   LexSem("V","break",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("break"),pp("into",arg1)))),

 'break-13': # ARG0:causal agent / ARG1:thing coming to light [break.xml]
   LexSem("V","break",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("break"),arg1))),

 'break-16': # ARG0:entity in motion / ARG1:movement away from what / ARG2:secondary predication on arg0 (free, loose, etc) [break.xml]
   LexSem("V","break",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("break"),pp("of",arg1),arg2))),

 'break-18': # ARG0:scofflaw, violator / ARG1:law, oath, trust, thing violated / ARG2:violation committed [break.xml]
   LexSem("V","break",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("break"),arg1,arg2))),

 'break-away-14': # ARG0:breaker / ARG1:break from [break.xml]
   LexSem("V","break",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("break"),Adv("away"),pp("from",arg1)))),

 'break-down-11': # ARG0:crier, entity suffering mental collapse / ARG1:theme, type of breakdown (ie mental, nervous) / ARG2:resulting state; tears [break.xml]
   LexSem("V","break",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("break"),Adv("down"),arg1,pp("in",arg2)))),

 'break-down-12': # ARG0:cause of breaking / ARG1:thing broken down [break.xml]
   LexSem("V","break",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("break"),Adv("down"),arg1))),

 'break-down-27': # ARG0:agent / ARG1:thing being analyzed, separated into manageable sections / ARG2:groups / ARG3:audience [break.xml]
   LexSem("V","break",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("break"),Adv("down"),arg1,pp("as",arg2),arg3))),

 'break-even-09': # ARG1:patient [break.xml]
   LexSem("V","break",[":ARG1"],lambda arg1:S(arg1,VP(V("break"),Adv("even")))),

 'break-off-03': # ARG0:causer, agent / ARG1:thing stopping [break.xml]
   LexSem("V","break",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("break"),Adv("off"),arg1))),

 'break-off-04': # ARG0:breaker / ARG1:piece(s) / ARG2:whole [break.xml]
   LexSem("V","break",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("break"),Adv("off"),arg1,pp("from",arg2)))),

 'break-out-06': # ARG0:introducer / ARG1:thing introduced [break.xml]
   LexSem("V","break",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("break"),Adv("out"),arg1))),

 'break-out-07': # ARG1:teenager [break.xml]
   LexSem("V","break",[":ARG1"],lambda arg1:S(arg1,VP(V("break"),Adv("out")))),

 'break-out-10': # ARG0:escapee / ARG1:prison, etc [break.xml]
   LexSem("V","break",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("break"),Adv("out"),pp("of",arg1)))),

 'break-out-30': # ARG1:thing arising [break.xml]
   LexSem("V","break",[":ARG1"],lambda arg1:S(arg1,VP(V("break"),Adv("out")))),

 'break-through-26': # ARG0:Agent, entity making breakthrough / ARG1:domain of breakthrough [break.xml]
   LexSem("V","break",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("break"),Adv("through"),pp("in",arg1)))),

 'break-up-08': # ARG0:external agent, not part of the broken group / ARG1:first (or all) party(ies) broken up / ARG2:pieces / ARG3:second party broken up [break.xml]
   LexSem("V","break",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("break"),Adv("up"),arg1,pp("into",arg2),pp("with",arg3)))),

 'break_heart-31': # ARG0:agent/cause/stimulus of heartbreak / ARG1:entity with a broken heart / ARG2:reason for heartbreak [break.xml]
   LexSem("V","break",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("break"),arg1,arg2))),

 'break_in-05': # ARG0:causative agent / ARG1:thing getting broken in [break.xml]
   LexSem("V","break-in",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("break-in"),arg1))),

 'break_in-17': # ARG0:speaker / ARG1:utterance [break.xml]
   LexSem("V","break-in",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("break-in"),arg1))),

 'break_through-22': # ARG0:Agent, entity making breakthrough / ARG1:barrier broken through [break.xml]
   LexSem("V","breakthrough",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("breakthrough"),arg1))),

 'breakfast-01': # ARG0:eater / ARG1:food [breakfast.xml]
   LexSem("V","breakfast",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("breakfast"),pp("on",arg1)))),

 'breast-01': # ARG1:Focus, entity in motion / ARG2:Entity arg1 moves abreast of [breast.xml]
   LexSem("V","breast",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("breast"),pp("against",arg2)))),

 'breastfeed-01': # ARG0:feeder / ARG1:milk (we hope...) / ARG2:baby, recipient [breastfeed.xml]
   LexSem("V","breastfeed",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("breastfeed"),arg1,arg2))),

 'breathe-01': # ARG0:breather / ARG1:air, we hope / ARG2:direction [breathe.xml]
   LexSem("V","breathe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("breathe"),arg1,pp("down",arg2)))),

 'breathe-02': # ARG0:speaker / ARG1:utterance breathed / ARG2:listener [breathe.xml]
   LexSem("V","breathe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("breathe"),arg1,arg2))),

 'breed-01': # ARG0:causer, agent / ARG1:entity bred [breed.xml]
   LexSem("V","breed",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("breed"),arg1))),

 'brew-01': # ARG0:creator, brewer / ARG1:creation, beer / ARG2:created-from, thing changed / ARG3:benefactive [brew.xml]
   LexSem("V","brew",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("brew"),arg1,arg2,arg3))),

 'bribe-01': # ARG0:briber, agent / ARG1:person  bribed / ARG2:favor / ARG3:amount exchanged [bribe.xml]
   LexSem("V","bribe",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("bribe"),arg1,arg2,arg3))),

 'brick-01': # ARG0:construction worker, bricklayer / ARG1:entity, location faced/covered with brick / ARG2:brick itself, type of brick [brick.xml]
   LexSem("V","brick",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("brick"),pp("with",arg1),arg2))),

 'brick-over-02': # ARG0:bricklayer / ARG1:location, entity being covered in brick / ARG2:brick itself [brick.xml]
   LexSem("V","brick",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("brick"),Adv("over"),arg1,arg2))),

 'bridge-01': # ARG0:connector, agent / ARG1:entity connected / ARG2:entity connected with [bridge.xml]
   LexSem("V","bridge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bridge"),arg1,pp("with",arg2)))),

 'bridge-02': # ARG0:doctor; entity replacing something / ARG1:patient / ARG2:long-term medicine / ARG3:short-term medicine to bridge a gap in treatment with long-term medicine (e.g. due to surgery) [bridge.xml]
   LexSem("V","bridge",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("bridge"),pp("of",arg1),arg2,arg3))),

 'bridle-01': # ARG0:Equestrian, causer of bridling / ARG1:Horse, entity constrained, bridled / ARG2:Bridle itself, headstall [bridle.xml]
   LexSem("V","bridle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bridle"),arg1,pp("with",arg2)))),

 'brief-01': # ARG0:giver / ARG1:receiver of information, entity briefed / ARG2:topic [brief.xml]
   LexSem("V","brief",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("brief"),arg1,pp("on",arg2)))),

 'brighten-01': # ARG0:causer, agent / ARG1:entity brightened [brighten.xml]
   LexSem("V","brighten",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("brighten"),arg1))),

 'brim-01': # ARG0:container / ARG1:contents [brim.xml]
   LexSem("V","brim",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("brim"),pp("with",arg1)))),

 'bring-01': # ARG0:bringer / ARG1:thing brought / ARG2:benefactive or destination brought-for, brought-to, / ARG3:attribute, state after bringing, secondary action / ARG4:ablative, brought-from [bring.xml]
   LexSem("V","bring",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("bring"),arg1,arg2,pp("to",arg3),pp("from",arg4)))),

 'bring-LV': #  [bring.xml]
   LexSem("V","bring",[],lambda :S(VP(V("bring")))),

 'bring-about-05': # ARG0:causer / ARG1:thing coming to be [bring.xml]
   LexSem("V","bring",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bring"),Adv("about"),arg1))),

 'bring-along-04': # ARG0:bringer / ARG1:thing brought / ARG2:benefactive, brought-for, brought-to / ARG3:attribute / ARG4:ablative, brought-from [bring.xml]
   LexSem("V","bring",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("bring"),Adv("along"),arg1,arg2,arg3,arg4))),

 'bring-down-03': # ARG0:causer of fall, Agent / ARG1:Logical subject, patient, thing falling / ARG2:EXT, amount fallen / ARG3:Start point / ARG4:End point [bring.xml]
   LexSem("V","bring",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("bring"),Adv("down"),arg1,arg2,arg3,arg4))),

 'bring-on-06': # ARG0:bringer / ARG1:thing beginning [bring.xml]
   LexSem("V","bring",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bring"),Adv("on"),arg1))),

 'bring-up-02': # ARG0:causer of rising, Agent / ARG1:Logical subject, patient, thing rising / ARG2:EXT, amount risen / ARG3:Start point / ARG4:End point [bring.xml]
   LexSem("V","bring",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("bring"),Adv("up"),arg1,arg2,arg3,arg4))),

 'bring-up-07': # ARG0:entity bringing the charges / ARG1:entity charged / ARG2:the charges [bring.xml]
   LexSem("V","bring",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bring"),Adv("up"),arg1,pp("on",arg2)))),

 'bring-up-08': # ARG0:parent figure, raiser / ARG1:child figure / ARG2:curriculum/tradition brought up in / ARG3:start state / ARG4:end state [bring.xml]
   LexSem("V","bring",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("bring"),Adv("up"),arg1,arg2,pp("from",arg3),arg4))),

 'bristle-01': # ARG0:entity reacting, agent / ARG1:bristle at [bristle.xml]
   LexSem("V","bristle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bristle"),pp("at",arg1)))),

 'broach-01': # ARG0:Causer / ARG1:Topic or theme / ARG2:Instrument [broach.xml]
   LexSem("V","broach",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("broach"),arg1,arg2))),

 'broadcast-01': # ARG0:transmitter, agent / ARG1:message / ARG2:audience / ARG3:source [broadcast.xml]
   LexSem("V","broadcast",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("broadcast"),arg1,pp("to",arg2),pp("from",arg3)))),

 'broaden-01': # ARG0:agent, causing broadening / ARG1:thing broadening / ARG2:EXT, amount broadened by / ARG3:start point / ARG4:end point [broaden.xml]
   LexSem("V","broaden",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("broaden"),arg1,pp("by",arg2),pp("from",arg3),pp("to",arg4)))),

 'brocade-01': # ARG0:artist,agent / ARG1:entity brocade / ARG2:entity brocade into [brocade.xml]
   LexSem("V","brocade",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("brocade"),arg1,pp("into",arg2)))),

 'broil-01': # ARG0:cook, agent / ARG1:food, product or source / ARG2:benefactive [broil.xml]
   LexSem("V","broil",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("broil"),arg1,arg2))),

 'broker-01': # ARG0:arranger, agent / ARG1:entity brokered / ARG2:beneficiary [broker.xml]
   LexSem("V","broker",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("broker"),arg1,pp("for",arg2)))),

 'bronze-01': # ARG0:metalsmith, bronzer / ARG1:location, entity being bronzed / ARG2:bronze itself, material used to cover [bronze.xml]
   LexSem("V","bronze",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bronze"),arg1,pp("with",arg2)))),

 'brood-01': # ARG0:brooder / ARG1:topics of thought [brood.xml]
   LexSem("V","brood",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("brood"),pp("over",arg1)))),

 'brook-01': # ARG0:entity suffering / ARG1:difficulty, unpleasant entity [brook.xml]
   LexSem("V","brook",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("brook"),arg1))),

 'browbeat-01': # ARG0:agent, Stimulus / ARG1:entity intimidated / ARG2:intimidated into [browbeat.xml]
   LexSem("V","browbeat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("browbeat"),arg1,pp("into",arg2)))),

 'brown-01': # ARG0:causer of browning (eg sun, cook) / ARG1:browned entity / ARG2:description of browning, attribute of arg1 [brown.xml]
   LexSem("V","brown",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("brown"),arg1,arg2))),

 'browse-01': # ARG0:brows-er / ARG1:thing browsed / ARG2:thing looked for, sought [browse.xml]
   LexSem("V","browse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("browse"),arg1,pp("for",arg2)))),

 'bruise-01': # ARG0:bruiser / ARG1:bruised [bruise.xml]
   LexSem("V","bruise",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bruise"),arg1))),

 'brunch-01': # ARG0:eater / ARG1:eaten [brunch.xml]
   LexSem("V","brunch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("brunch"),pp("on",arg1)))),

 'brush-01': # ARG0:entity with brush, agent / ARG1:entity brushed [brush.xml]
   LexSem("V","brush",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("brush"),arg1))),

 'brush-off-02': # ARG0:dismisser, agent / ARG1:entity dismissed [brush.xml]
   LexSem("V","brush",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("brush"),Adv("off"),arg1))),

 'brush-up-03': # ARG0:review, agent / ARG1:entity brushed up [brush.xml]
   LexSem("V","brush",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("brush"),Adv("up"),pp("on",arg1)))),

 'brush-up-05': # ARG0:toucher / ARG1:thing brushed up against [brush.xml]
   LexSem("V","brush",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("brush"),Adv("up"),pp("against",arg1)))),

 'brutalize-01': # ARG0:agent, brutalizer / ARG1:entity brutalized, mistreated / ARG2:instrument of brutalization / ARG3:resulting state of brutalization, predication on arg 1 [brutalize.xml]
   LexSem("V","brutalize",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("brutalize"),arg1,arg2,arg3))),

 'bubble-01': # ARG0:emitter / ARG1:thing emit / ARG2:particle describing motion of bubbles [bubble.xml]
   LexSem("V","bubble",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bubble"),arg1,arg2))),

 'buck-01': # ARG0:bucker / ARG1:trend [buck.xml]
   LexSem("V","buck",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("buck"),arg1))),

 'buck-02': # ARG0:striver / ARG1:thing to be attained [buck.xml]
   LexSem("V","buck",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("buck"),pp("for",arg1)))),

 'buckle-01': # ARG0:agent, entity causing two objects to be attached / ARG1:patient, thing(s) being tied / ARG2:instrument, buckle [buckle.xml]
   LexSem("V","buckle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("buckle"),arg1,arg2))),

 'buckle-04': # ARG1:thing collapsing / ARG2:pressure, weight, etc [buckle.xml]
   LexSem("V","buckle",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("buckle"),pp("under",arg2)))),

 'buckle-down-03': # ARG0:entity getting busy [buckle.xml]
   LexSem("V","buckle",[":ARG0"],lambda arg0:S(arg0,VP(V("buckle"),Adv("down")))),

 'buckle-up-02': # ARG0:preparer [buckle.xml]
   LexSem("V","buckle",[":ARG0"],lambda arg0:S(arg0,VP(V("buckle"),Adv("up")))),

 'bud-01': # ARG1:thing starting [bud.xml]
   LexSem("V","bud",[":ARG1"],lambda arg1:S(arg1,VP(V("bud")))),

 'budge-01': # ARG0:causer, agent / ARG1:entity budging / ARG2:position, budged from [budge.xml]
   LexSem("V","budge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("budge"),arg1,pp("from",arg2)))),

 'budget-01': # ARG0:allocator / ARG1:money / ARG2:purpose, project [budget.xml]
   LexSem("V","budget",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("budget"),pp("about",arg1),pp("for",arg2)))),

 'buff-01': # ARG0:polisher, agent / ARG1:entity buffed [buff.xml]
   LexSem("V","buff",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("buff"),arg1))),

 'buffalo-01': # ARG0:intimidator / ARG1:intimidatee / ARG2:intimidated into doing what / ARG3:intimidating behavior used [buffalo.xml]
   LexSem("V","buffalo",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("buffalo"),arg1,pp("into",arg2),arg3))),

 'buffer-01': # ARG0:protector / ARG1:protected / ARG2:danger [buffer.xml]
   LexSem("V","buffer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("buffer"),arg1,pp("from",arg2)))),

 'buffet-01': # ARG0:thrower / ARG1:victim / ARG2:things thrown [buffet.xml]
   LexSem("V","buffet",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("buffet"),arg1,pp("by",arg2)))),

 'bug-01': # ARG0:causer of bothering / ARG1:bothered / ARG2:instrument of bothering [bug.xml]
   LexSem("V","bug",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bug"),arg1,pp("about",arg2)))),

 'bug-02': # ARG0:person or institution planting the device / ARG1:person or institution being bugged [bug.xml]
   LexSem("V","bug",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bug"),arg1))),

 'build-01': # ARG0:builder / ARG1:construction / ARG2:material, start state / ARG4:end state [build.xml]
   LexSem("V","build",[":ARG0",":ARG1",":ARG2",":ARG4"],lambda arg0,arg1,arg2,arg4:S(arg0,VP(V("build"),arg1,pp("of",arg2),pp("into",arg4)))),

 'build-02': # ARG0:thing growing, building / ARG1:place grown, substrate, material / ARG2:amount increased by, EXT or MNR / ARG3:start point / ARG4:end point [build.xml]
   LexSem("V","build",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("build"),arg1,arg2,arg3,pp("into",arg4)))),

 'build-03': # ARG0:agent, entity causing some grouping / ARG1:theme, thing being included in some group / ARG2:group [build.xml]
   LexSem("V","build",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("build"),arg1,pp("into",arg2)))),

 'build-up-05': # ARG0:builder / ARG1:construction, bigger thing / ARG2:amount of change, EXT / ARG3:start point / ARG4:end point, end state of arg1 [build.xml]
   LexSem("V","build",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("build"),Adv("up"),arg1,arg2,arg3,pp("to",arg4)))),

 'bulge-01': # ARG0:causer, agent / ARG1:entity bulged / ARG2:entity bulged with [bulge.xml]
   LexSem("V","bulge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bulge"),arg1,pp("with",arg2)))),

 'bulk-01': # ARG1:theme, loomig thing [bulk.xml]
   LexSem("V","bulk",[":ARG1"],lambda arg1:S(arg1,VP(V("bulk")))),

 'bull-01': # ARG1:Entity in motion, moving like a bull / ARG2:Entity pushed through, past by arg1, the way of arg1 [bull.xml]
   LexSem("V","bull",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("bull"),arg2))),

 'bulldoze-01': # ARG0:agent of destruction / ARG1:thing destroyed [bulldoze.xml]
   LexSem("V","bulldoze",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bulldoze"),arg1))),

 'bullet-01': # ARG0:shooter / ARG1:projectile / ARG2:target [bullet.xml]
   LexSem("V","bullet",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bullet"),arg1,arg2))),

 'bullock-01': # ARG0:trickster, agent / ARG1:entity deceived / ARG2:proposition, deceived into believing/doing what? [bullock.xml]
   LexSem("V","bullock",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bullock"),arg1,pp("into",arg2)))),

 'bullock-02': # ARG0:Bull-like entity, pusher / ARG1:"way" or other thing pushed [bullock.xml]
   LexSem("V","bullock",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bullock"),arg1))),

 'bullshit-01': # ARG0:talker / ARG1:subject / ARG2:hearer [bullshit.xml]
   LexSem("V","bullshit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bullshit"),arg1,pp("with",arg2)))),

 'bully-01': # ARG0:bully / ARG1:victim, impelled agent / ARG2:impelled action (often unstated) [bully.xml]
   LexSem("V","bully",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bully"),arg1,pp("into",arg2)))),

 'bumble-01': # ARG0:confused mover / ARG1:path [bumble.xml]
   LexSem("V","bumble",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bumble"),arg1))),

 'bump-01': # ARG0:agent, hitter - animate only! / ARG1:thing hit / ARG2:instrument, thing hit by or with [bump.xml]
   LexSem("V","bump",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bump"),arg1,arg2))),

 'bump-02': # ARG0:causer of motion / ARG1:entity in motion / ARG2:EXT / ARG3:start point / ARG4:end point / ARG5:direction [bump.xml]
   LexSem("V","bump",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg0,arg1,arg2,arg3,arg4,arg5:S(arg0,VP(V("bump"),arg1,arg2,arg3,pp("to",arg4),arg5))),

 'bump-off-04': # ARG0:hit man / ARG1:unlucky person [bump.xml]
   LexSem("V","bump",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bump"),Adv("off"),arg1))),

 'bump-up-03': # ARG1:one thing in collision / ARG2:the other (usually prepositional) [bump.xml]
   LexSem("V","bump",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("bump"),Adv("up"),pp("against",arg2)))),

 'bunch-01': # ARG0:agent, buncher / ARG1:patient, thing bunched / ARG2:end state (a bunch) [bunch.xml]
   LexSem("V","bunch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bunch"),arg1,arg2))),

 'bunch-up-02': # ARG0:buncher / ARG1:thing bunched up / ARG2:end state [bunch.xml]
   LexSem("V","bunch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bunch"),Adv("up"),arg1,pp("in",arg2)))),

 'bundle-01': # ARG0:bundler (not bungler) / ARG1:items / ARG2:bundle [bundle.xml]
   LexSem("V","bundle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bundle"),arg1,pp("into",arg2)))),

 'bundle-02': # ARG0:causal agent of dressing / ARG1:entity dressed / ARG2:clothing [bundle.xml]
   LexSem("V","bundle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bundle"),arg1,pp("in",arg2)))),

 'bundle-up-03': # ARG0:causal agent of dressing / ARG1:entity dressed / ARG2:clothing [bundle.xml]
   LexSem("V","bundle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bundle"),Adv("up"),arg1,arg2))),

 'bungle-01': # ARG0:bungler / ARG1:thing tried [bungle.xml]
   LexSem("V","bungle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bungle"),arg1))),

 'bunk-02': # ARG0:agent / ARG1:one/thing bunking / ARG2:location [bunk.xml]
   LexSem("V","bunk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bunk"),arg1,pp("in",arg2)))),

 'bunt-01': # ARG0:Striker, batter / ARG1:Thing struck, ball / ARG2:Source location, struck from where? / ARG3:Destination, location or other player [bunt.xml]
   LexSem("V","bunt",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("bunt"),arg1,pp("from",arg2),arg3))),

 'buoy-01': # ARG0:causer, agent / ARG1:thing floating [buoy.xml]
   LexSem("V","buoy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("buoy"),arg1))),

 'buoy-up-02': # ARG0:cause / ARG1:floating thing [buoy.xml]
   LexSem("V","buoy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("buoy"),Adv("up"),arg1))),

 'burble-01': # ARG0:speaker, agent / ARG1:utterance [burble.xml]
   LexSem("V","burble",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("burble"),arg1))),

 'burden-01': # ARG0:loader / ARG1:carrier / ARG2:load [burden.xml]
   LexSem("V","burden",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("burden"),arg1,arg2))),

 'burgeon-01': # ARG1:thing increasing [burgeon.xml]
   LexSem("V","burgeon",[":ARG1"],lambda arg1:S(arg1,VP(V("burgeon")))),

 'burglarize-01': # ARG0:thief, burglar / ARG1:thing/place stolen from [burglarize.xml]
   LexSem("V","burglarize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("burglarize"),arg1))),

 'burgle-02': # ARG0:robber, thief / ARG1:person, entity burgled / ARG2:money or valuables, thing taken [burglarize.xml]
   LexSem("V","burgle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("burgle"),arg1,arg2))),

 'burl-01': # ARG0:burler / ARG1:knot/ lump/ loose thread / ARG2:fabric [burl.xml]
   LexSem("V","burl",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("burl"),arg1,pp("from",arg2)))),

 'burn-01': # ARG0:pyromaniac / ARG1:thing burning [burn.xml]
   LexSem("V","burn",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("burn"),arg1))),

 'burn-out-03': # ARG1:thing burning [burn.xml]
   LexSem("V","burn",[":ARG1"],lambda arg1:S(arg1,VP(V("burn"),Adv("out")))),

 'burn-out-04': # ARG1:experiencer / ARG2:psych instrument [burn.xml]
   LexSem("V","burn",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("burn"),Adv("out"),pp("on",arg2)))),

 'burn-up-02': # ARG0:causer, agent / ARG1:thing burning [burn.xml]
   LexSem("V","burn",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("burn"),Adv("up"),arg1))),

 'burnish-01': # ARG0:burnishing agent / ARG1:entity burnished [burnish.xml]
   LexSem("V","burnish",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("burnish"),arg1))),

 'burp-01': # ARG0:expeller / ARG1:cognate object, description of type of burp itself [burp.xml]
   LexSem("V","burp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("burp"),arg1))),

 'burr-01': # ARG0:Speaker, or thing making whirring sound [burr.xml]
   LexSem("V","burr",[":ARG0"],lambda arg0:S(arg0,VP(V("burr")))),

 'burrow-01': # ARG0:agent, burrower / ARG1:ground burrowed into, hole / ARG2:Goal of burrowing, thing burrrowed for [burrow.xml]
   LexSem("V","burrow",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("burrow"),pp("in",arg1),pp("for",arg2)))),

 'burst-01': # ARG1:thing appearing, topic / ARG2:further description [burst.xml]
   LexSem("V","burst",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("burst"),pp("into",arg2)))),

 'burst-02': # ARG0:causer of explosion / ARG1:thing exploding [burst.xml]
   LexSem("V","burst",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("burst"),arg1))),

 'burst-03': # ARG1:thing in motion / ARG2:EXT / ARG3:start point / ARG4:end point / ARG5:direction [burst.xml]
   LexSem("V","burst",[":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg1,arg2,arg3,arg4,arg5:S(arg1,VP(V("burst"),arg2,arg3,arg4,arg5))),

 'burst-out-04': # ARG0:explosive talker / ARG1:utterance / ARG2:hearer [burst.xml]
   LexSem("V","burst",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("burst"),Adv("out"),arg1,arg2))),

 'bury-01': # ARG0:burier / ARG1:buried / ARG2:ground (usually understood) [bury.xml]
   LexSem("V","bury",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bury"),arg1,arg2))),

 'bus-01': # ARG0:agent, driver (transitive subject) / ARG1:thing moved (intransitive subject, transitive object) / ARG2:locations, or start point / ARG3:destination [bus.xml]
   LexSem("V","bus",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("bus"),arg1,pp("from",arg2),pp("to",arg3)))),

 'bushwhack-01': # ARG0:bushwhacker / ARG1:entity being bushwhacked / ARG2:weapon [bushwhack.xml]
   LexSem("V","bushwhack",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bushwhack"),arg1,pp("with",arg2)))),

 'bushwhack-02': # ARG0:bush-whacker / ARG1:"his/her/their way" / ARG2:direction, location [bushwhack.xml]
   LexSem("V","bushwhack",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bushwhack"),arg1,pp("through",arg2)))),

 'bust-01': # ARG0:breaker / ARG1:thing broken / ARG2:instrument / ARG3:pieces [bust.xml]
   LexSem("V","bust",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("bust"),arg1,pp("with",arg2),pp("into",arg3)))),

 'bust-02': # ARG0:cop(s) / ARG1:criminal(s) / ARG2:crime [bust.xml]
   LexSem("V","bust",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bust"),arg1,arg2))),

 'bust-05': # ARG0:ghostbuster / ARG1:ghost [bust.xml]
   LexSem("V","bust",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bust"),arg1))),

 'bust-out-03': # ARG0:escapee / ARG1:escaped from [bust.xml]
   LexSem("V","bust",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bust"),Adv("out"),pp("of",arg1)))),

 'bust-up-04': # ARG0:causative agent / ARG1:thing in pieces [bust.xml]
   LexSem("V","bust",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bust"),Adv("up"),arg1))),

 'bustle-01': # ARG0:entity bustling, entity in motion / ARG1:location of bustling [bustle.xml]
   LexSem("V","bustle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bustle"),arg1))),

 'butcher-01': # ARG0:killer / ARG1:corpse(s) / ARG2:instrument, butcher knife [butcher.xml]
   LexSem("V","butcher",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("butcher"),arg1,arg2))),

 'butler-01': # ARG0:Butler / ARG1:Lucky person, org, event, with butler's services [butler.xml]
   LexSem("V","butler",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("butler"),pp("for",arg1)))),

 'butt-in-01': # ARG0:nosy individual, agent [butt.xml]
   LexSem("V","butt",[":ARG0"],lambda arg0:S(arg0,VP(V("butt"),Adv("in")))),

 'butter-01': # ARG0:Chef, butterer / ARG1:Bread, location/entity being covered in butter / ARG2:Butter itself, margarine [butter.xml]
   LexSem("V","butter",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("butter"),arg1,pp("with",arg2)))),

 'button-01': # ARG0:agent, buttoner / ARG1:theme, thing buttoned [button.xml]
   LexSem("V","button",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("button"),arg1))),

 'buttonhole-01': # ARG0:agent / ARG1:entity detained / ARG2:purpose of detainment [buttonhole.xml]
   LexSem("V","buttonhole",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("buttonhole"),arg1,arg2))),

 'buttress-01': # ARG0:supporter, agent / ARG1:entity buttressed [buttress.xml]
   LexSem("V","buttress",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("buttress"),arg1))),

 'buy-01': # ARG0:buyer / ARG1:thing bought / ARG2:seller / ARG3:price paid / ARG4:benefactive [buy.xml]
   LexSem("V","buy",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("buy"),arg1,pp("from",arg2),pp("of",arg3),arg4))),

 'buy-05': # ARG0:believer / ARG1:thing believed [buy.xml]
   LexSem("V","buy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("buy"),arg1))),

 'buy-into-04': # ARG0:entity buying in / ARG1:idea/fad [buy.xml]
   LexSem("V","buy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("buy"),Adv("into"),arg1))),

 'buy-off-06': # ARG0:briber / ARG1:entity bribed / ARG2:payment [buy.xml]
   LexSem("V","buy",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("buy"),Adv("off"),arg1,pp("for",arg2)))),

 'buy-out-03': # ARG0:buyer / ARG1:thing bought / ARG2:seller / ARG3:price paid / ARG4:benefactive [buy.xml]
   LexSem("V","buy",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("buy"),Adv("out"),arg1,arg2,arg3,arg4))),

 'buy-up-02': # ARG0:buyer / ARG1:thing bought / ARG2:seller / ARG3:price paid / ARG4:benefactive [buy.xml]
   LexSem("V","buy",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("buy"),Adv("up"),arg1,arg2,arg3,arg4))),

 'buzz-01': # ARG0:entity buzzing / ARG1:thing buzzing about [buzz.xml]
   LexSem("V","buzz",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("buzz"),pp("about",arg1)))),

 'buzz-02': # ARG0:entity buzzing / ARG1:entity buzzing with [buzz.xml]
   LexSem("V","buzz",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("buzz"),pp("with",arg1)))),

 'buzz-04': # ARG0:visitor / ARG1:destination [buzz.xml]
   LexSem("V","buzz",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("buzz"),arg1))),

 'buzz-off-03': # ARG0:entity leaving [buzz.xml]
   LexSem("V","buzz",[":ARG0"],lambda arg0:S(arg0,VP(V("buzz"),Adv("off")))),

 'byelect-01': # ARG0:Voters / ARG1:Candidate / ARG2:Office or Position [byelect.xml]
   LexSem("V","by-elect",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("by-elect"),arg1,arg2))),

 'bypass-01': # ARG0:thing going around / ARG1:thing gone around [bypass.xml]
   LexSem("V","bypass",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bypass"),arg1))),

 'cab-01': # ARG0:agent, driver or causer of cabbing / ARG1:passenger / ARG2:start point / ARG3:destination / ARG4:location, path [cab.xml]
   LexSem("V","cab",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("cab"),arg1,pp("from",arg2),arg3,pp("around",arg4)))),

 'cabbage-01': # ARG0:thief, agent / ARG1:thing stolen / ARG2:stolen from / ARG3:sloten for [cabbage.xml]
   LexSem("V","cabbage",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("cabbage"),arg1,arg2,arg3))),

 'cable-01': # ARG0:sender, agent / ARG1:message / ARG2:sent to, recipient [cable.xml]
   LexSem("V","cable",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cable"),arg1,pp("to",arg2)))),

 'cable-02': # ARG0:agent, linker / ARG1:thing cabled / ARG2:thing cabled to / ARG3:instrument [cable.xml]
   LexSem("V","cable",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("cable"),arg1,pp("to",arg2),arg3))),

 'cackle-01': # ARG0:cackler / ARG1:utterance / ARG2:hearer [cackle.xml]
   LexSem("V","cackle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cackle"),arg1,pp("at",arg2)))),

 'caddy-01': # ARG0:caddy / ARG1:player(s) / ARG2:game/course/play / ARG3:tours [caddy.xml]
   LexSem("V","caddy",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("caddy"),arg1,arg2,pp("on",arg3)))),

 'caddy-02': # ARG0:carrier / ARG1:entity carried [caddy.xml]
   LexSem("V","caddy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("caddy"),arg1))),

 'cadge-01': # ARG0:beggar, agent / ARG1:entity begged for, gotten [cadge.xml]
   LexSem("V","cadge",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cadge"),arg1))),

 'cage-01': # ARG0:cager / ARG1:thing caged / ARG2:cage, location [cage.xml]
   LexSem("V","cage",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cage"),arg1,pp("in",arg2)))),

 'cajole-01': # ARG0:cajoler / ARG1:persuaded agent / ARG2:persuaded action [cajole.xml]
   LexSem("V","cajole",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cajole"),arg1,pp("into",arg2)))),

 'cake-01': # ARG0:agent, causer / ARG1:entity covered / ARG2:cover, thick layer of what [cake.xml]
   LexSem("V","cake",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cake"),arg1,pp("with",arg2)))),

 'calcify-01': # ARG0:causal agent / ARG1:thing calcifying / ARG2:instrument or method [calcify.xml]
   LexSem("V","calcify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("calcify"),arg1,arg2))),

 'calculate-01': # ARG0:Thinker / ARG1:Thought/calculation / ARG2:the answer, result; attribute [calculate.xml]
   LexSem("V","calculate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("calculate"),arg1,pp("at",arg2)))),

 'calibrate-01': # ARG0:calibrator, agent / ARG1:thing calibrated [calibrate.xml]
   LexSem("V","calibrate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("calibrate"),arg1))),

 'calk-02': # ARG0:Blacksmith / ARG1:horseshoe [calk.xml]
   LexSem("V","calk",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("calk"),arg1))),

 'calk-03': # ARG0:Assailant / ARG1:Victim / ARG2:Weapon [calk.xml]
   LexSem("V","calk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("calk"),arg1,pp("with",arg2)))),

 'call-01': # ARG0:caller / ARG1:item being labelled / ARG2:name itself, attribute of arg1 [call.xml]
   LexSem("V","call",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("call"),arg1,arg2))),

 'call-02': # ARG0:caller / ARG1:entity summoned / ARG2:benefactive [call.xml]
   LexSem("V","call",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("call"),arg1,pp("for",arg2)))),

 'call-03': # ARG0:demander / ARG1:thing being demanded / ARG2:demandee, of whom is arg1 being demanded? [call.xml]
   LexSem("V","call",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("call"),pp("for",arg1),pp("to",arg2)))),

 'call-07': # ARG0:speaker / ARG1:utterance / ARG2:distant listener [call.xml]
   LexSem("V","call",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("call"),arg1,pp("to",arg2)))),

 'call-09': # ARG0:doubter / ARG1:thing doubted / ARG2:fixed: 'into question' [call.xml]
   LexSem("V","call",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("call"),arg1,pp("into",arg2)))),

 'call-10': # ARG0:predictor/decider / ARG1:domain, topic of the prediction/decision / ARG2:the actual prediction/decision itself [call.xml]
   LexSem("V","call",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("call"),pp("on",arg1),pp("for",arg2)))),

 'call-11': # ARG0:entity in charge, official decision maker / ARG1:'the shots' (or related) [call.xml]
   LexSem("V","call",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("call"),arg1))),

 'call-13': # ARG0:caller / ARG1:accusation, thing called out (bluff, foul, bullshit, etc) / ARG2:entity called out (accusee) [call.xml]
   LexSem("V","call",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("call"),arg1,arg2))),

 'call-14': # ARG0:claimer / ARG1:thing claimed (e.g. dibs, shotgun) / ARG2:opponent/competitor [call.xml]
   LexSem("V","call",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("call"),arg1,arg2))),

 'call-16': # ARG0:visitor / ARG1:recipient of visit / ARG2:location visited [call.xml]
   LexSem("V","call",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("call"),pp("on",arg1),arg2))),

 'call-in-04': # ARG0:caller / ARG1:thing being summoned / ARG2:benefactive [call.xml]
   LexSem("V","call",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("call"),Adv("in"),arg1,pp("for",arg2)))),

 'call-off-06': # ARG0:the Terminator / ARG1:the Terminated [call.xml]
   LexSem("V","call",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("call"),Adv("off"),arg1))),

 'call-on-05': # ARG0:caller / ARG1:thing being visited, used / ARG2:purpose, attribute of arg1 [call.xml]
   LexSem("V","call",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("call"),Adv("on"),arg1,arg2))),

 'call-out-15': # ARG0:caller, accuser / ARG1:accusation, what arg2 is called out on / ARG2:entity called out; accusee [call.xml]
   LexSem("V","call",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("call"),Adv("out"),arg1,arg2))),

 'call-up-08': # ARG0:caller / ARG1:thing being summoned / ARG2:benefactive [call.xml]
   LexSem("V","call",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("call"),Adv("up"),arg1,pp("for",arg2)))),

 'call-upon-12': # ARG0:caller / ARG1:entity called upon / ARG2:purpose of arg1, called upon to do what? [call.xml]
   LexSem("V","call",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("call"),Adv("upon"),arg1,arg2))),

 'calm-01': # ARG0:agent of calming / ARG1:entity becoming calm / ARG2:instrument of calming [calm.xml]
   LexSem("V","calm",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("calm"),arg1,pp("with",arg2)))),

 'calm-down-02': # ARG0:agent of calming / ARG1:entity becoming calm / ARG2:instrument of calming [calm.xml]
   LexSem("V","calm",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("calm"),Adv("down"),arg1,arg2))),

 'calumniate-01': # ARG0:false statement maker, agent / ARG1:entity calumniated [calumniate.xml]
   LexSem("V","calumniate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("calumniate"),arg1))),

 'calve-01': # ARG0:Mother cow / ARG1:Baby calf [calve.xml]
   LexSem("V","calve",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("calve"),pp("with",arg1)))),

 'camouflage-01': # ARG0:disguiser, agent / ARG1:thing disguised / ARG2:secondary predication [camouflage.xml]
   LexSem("V","camouflage",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("camouflage"),arg1,pp("as",arg2)))),

 'camp-02': # ARG0:camper / ARG1:location [camp.xml]
   LexSem("V","camp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("camp"),pp("in",arg1)))),

 'camp-out-01': # ARG0:camper, agent [camp.xml]
   LexSem("V","camp",[":ARG0"],lambda arg0:S(arg0,VP(V("camp"),Adv("out")))),

 'campaign-01': # ARG0:campaigner / ARG1:cause, goal [campaign.xml]
   LexSem("V","campaign",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("campaign"),pp("for",arg1)))),

 'can-01': # ARG0:canner, agent / ARG1:substance [can.xml]
   LexSem("V","can",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("can"),arg1))),

 'can-02': # ARG0:employer / ARG1:ex-employee (thing thrown away) / ARG2:job [can.xml]
   LexSem("V","can",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("can"),arg1,pp("from",arg2)))),

 'cancan-01': # ARG0:Dancer / ARG1:Body part made to dance, thing danced away/off [cancan.xml]
   LexSem("V","cancan",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cancan"),arg1))),

 'cancel-01': # ARG0:canceller / ARG1:cancelled [cancel.xml]
   LexSem("V","cancel",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cancel"),arg1))),

 'candy-01': # ARG0:coater, agent / ARG1:thing now candy-coated [candy.xml]
   LexSem("V","candy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("candy"),arg1))),

 'cane-01': # ARG0:hitter / ARG1:victim [cane.xml]
   LexSem("V","cane",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cane"),arg1))),

 'canoe-01': # ARG0:agent, driver (transitive subject) / ARG1:thing moved (intranstive subject, transitive object) / ARG2:locations, or start point / ARG3:destination [canoe.xml]
   LexSem("V","canoe",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("canoe"),arg1,arg2,arg3))),

 'canonize-01': # ARG0:entity declaring sainthood / ARG1:entity being sainted / ARG2:canonized as [canonize.xml]
   LexSem("V","canonize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("canonize"),arg1,pp("as",arg2)))),

 'canonize-02': # ARG0:glorifier / ARG1:glorified / ARG2:blessed with (gift) [canonize.xml]
   LexSem("V","canonize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("canonize"),arg1,pp("with",arg2)))),

 'canter-01': # ARG0:rider / ARG1:steed (entity actually running) [canter.xml]
   LexSem("V","canter",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("canter"),arg1))),

 'canvass-01': # ARG0:surveyor, agent / ARG1:entity canvassed [canvass.xml]
   LexSem("V","canvass",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("canvass"),arg1))),

 'cap-01': # ARG0:agent; one putting the top on / ARG1:thing topped / ARG2:top / ARG3:attribute of arg1 actually receiving a cap [cap.xml]
   LexSem("V","cap",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("cap"),arg1,pp("with",arg2),arg3))),

 'cap-02': # ARG0:causer of ending, agent / ARG1:Thing ending / ARG2:Explicit instrument, thing ended with [cap.xml]
   LexSem("V","cap",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cap"),arg1,pp("with",arg2)))),

 'capacitate-01': # ARG0:causal agent / ARG1:thing capacitated / ARG2:instrument [capacitate.xml]
   LexSem("V","capacitate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("capacitate"),arg1,arg2))),

 'capitalize-01': # ARG0:assigner / ARG1:assigned to / ARG2:value [capitalize.xml]
   LexSem("V","capitalize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("capitalize"),arg1,pp("at",arg2)))),

 'capitalize-02': # ARG0:exploiter / ARG1:thing exploited [capitalize.xml]
   LexSem("V","capitalize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("capitalize"),pp("on",arg1)))),

 'capitulate-01': # ARG0:entity giving in / ARG1:to whom/what [capitulate.xml]
   LexSem("V","capitulate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("capitulate"),pp("to",arg1)))),

 'capsize-01': # ARG0:causer of capsizing / ARG1:thing capsizing [capsize.xml]
   LexSem("V","capsize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("capsize"),arg1))),

 'captain-01': # ARG0:captain, agent / ARG1:entity directed [captain.xml]
   LexSem("V","captain",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("captain"),arg1))),

 'caption-01': # ARG0:captioner / ARG1:pictures / ARG2:text [caption.xml]
   LexSem("V","caption",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("caption"),arg1,pp("as",arg2)))),

 'captivate-01': # ARG0:Stimulus / ARG1:experiencer [captivate.xml]
   LexSem("V","captivate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("captivate"),arg1))),

 'capture-01': # ARG0:getter / ARG1:thing gotten [capture.xml]
   LexSem("V","capture",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("capture"),arg1))),

 'caramelize-01': # ARG0:causer of caramelization / ARG1:entity caramelized / ARG2:Instrument or Manner if separate from arg 0 [caramelize.xml]
   LexSem("V","caramelize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("caramelize"),arg1,arg2))),

 'caravan-01': # ARG0:agent, driver / ARG1:thing moved / ARG2:locations, or start point / ARG3:destination [caravan.xml]
   LexSem("V","caravan",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("caravan"),arg1,arg2,pp("to",arg3)))),

 'carbonify-01': # ARG0:Agent, cause of conversion / ARG1:entity now Carbon [carbonify.xml]
   LexSem("V","carbonify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("carbonify"),arg1))),

 'carbonize-01': # ARG0:Agent, cause of conversion / ARG1:entity now Carbon [carbonize.xml]
   LexSem("V","carbonize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("carbonize"),arg1))),

 'care-01': # ARG0:entity who has an opinion, cares / ARG1:entity cared for/about [care.xml]
   LexSem("V","care",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("care"),pp("for",arg1)))),

 'care-02': # ARG0:liker, wanter / ARG1:what arg0 does or doesn't want/like (to do) [care.xml]
   LexSem("V","care",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("care"),pp("for",arg1)))),

 'care-03': # ARG0:care-giver / ARG1:entity tended, taken care of [care.xml]
   LexSem("V","care",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("care"),pp("for",arg1)))),

 'careen-01': # ARG0:entity moving / ARG1:path [careen.xml]
   LexSem("V","careen",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("careen"),arg1))),

 'caress-01': # ARG0:caresser / ARG1:caressed [caress.xml]
   LexSem("V","caress",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("caress"),arg1))),

 'caricature-01': # ARG0:caricaturist / ARG1:entity caricatured / ARG2:secondary predicate [caricature.xml]
   LexSem("V","caricature",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("caricature"),arg1,pp("as",arg2)))),

 'carjack-01': # ARG0:carjacker, agent / ARG1:car, entity hijacked / ARG2:people, carjacked from [carjack.xml]
   LexSem("V","carjack",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("carjack"),arg1,arg2))),

 'carol-01': # ARG0:caroler / ARG1:song / ARG2:audience [carol.xml]
   LexSem("V","carol",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("carol"),arg1,arg2))),

 'carom-01': # ARG1:entity moving, thing caroming / ARG2:start point / ARG3:end point / ARG4:path [carom.xml]
   LexSem("V","carom",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("carom"),pp("off",arg2),pp("into",arg3),pp("across",arg4)))),

 'carouse-01': # ARG0:first carouser / ARG1:other party carousing, carousing with [carouse.xml]
   LexSem("V","carouse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("carouse"),pp("with",arg1)))),

 'carp-01': # ARG0:carper (carp?) / ARG1:complaining at/about [carp.xml]
   LexSem("V","carp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("carp"),pp("at",arg1)))),

 'carpet-01': # ARG0:coverer, agent / ARG1:bare floor [carpet.xml]
   LexSem("V","carpet",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("carpet"),arg1))),

 'carry-01': # ARG0:carrier / ARG1:thing carried / ARG2:instrument / ARG3:'with' reflecting back on arg0 / ARG4:benefactive (predicted but not seen) [carry.xml]
   LexSem("V","carry",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("carry"),arg1,pp("on",arg2),pp("with",arg3),arg4))),

 'carry-off-05': # ARG0:accomplisher / ARG1:deed [carry.xml]
   LexSem("V","carry",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("carry"),Adv("off"),arg1))),

 'carry-on-02': # ARG0:continuer / ARG1:thing continuing / ARG2:comitative, thing kept together / ARG3:attributive of arg1 [carry.xml]
   LexSem("V","carry",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("carry"),Adv("on"),pp("with",arg1),arg2,arg3))),

 'carry-out-03': # ARG0:implementer / ARG1:thing implemented [carry.xml]
   LexSem("V","carry",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("carry"),Adv("out"),arg1))),

 'carry-over-04': # ARG0:carrier / ARG1:thing continuing / ARG2:(from) whence? / ARG3:(to) whither? [carry.xml]
   LexSem("V","carry",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("carry"),Adv("over"),arg1,pp("from",arg2),pp("into",arg3)))),

 'cart-01': # ARG0:conveyor, agent / ARG1:entity transported [cart.xml]
   LexSem("V","cart",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cart"),arg1))),

 'cart-off-02': # ARG0:transporter, agent / ARG1:entity transported / ARG2:entity transported from [cart.xml]
   LexSem("V","cart",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cart"),Adv("off"),arg1,pp("from",arg2)))),

 'carve-01': # ARG0:carver / ARG1:thing carved / ARG2:instrument [carve.xml]
   LexSem("V","carve",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("carve"),arg1,pp("with",arg2)))),

 'carve-02': # ARG0:builder / ARG1:construction / ARG2:material, start state [carve.xml]
   LexSem("V","carve",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("carve"),pp("into",arg1),arg2))),

 'carve-out-03': # ARG0:builder / ARG1:construction / ARG2:material, start state / ARG3:benefactive / ARG4:end state [carve.xml]
   LexSem("V","carve",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("carve"),Adv("out"),arg1,pp("of",arg2),arg3,pp("as",arg4)))),

 'cascade-01': # ARG1:water-ish [cascade.xml]
   LexSem("V","cascade",[":ARG1"],lambda arg1:S(arg1,VP(V("cascade")))),

 'case-01': # ARG0:packer / ARG1:thing packed / ARG2:case, location [case.xml]
   LexSem("V","case",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("case"),arg1,arg2))),

 'case-02': # ARG0:Thief or spy / ARG1:Place being observed [case.xml]
   LexSem("V","case",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("case"),arg1))),

 'cash-01': # ARG0:casher / ARG1:check [cash.xml]
   LexSem("V","cash",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cash"),arg1))),

 'cash-in-02': # ARG0:quitter / ARG1:chips [cash.xml]
   LexSem("V","cash",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cash"),Adv("in"),arg1))),

 'cash-in-03': # ARG0:taker of advantage / ARG1:thing exploited [cash.xml]
   LexSem("V","cash",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cash"),Adv("in"),pp("on",arg1)))),

 'cast-01': # ARG0:thrower / ARG1:thing thrown / ARG2:destination [cast.xml]
   LexSem("V","cast",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cast"),arg1,pp("over",arg2)))),

 'cast-02': # ARG0:namer, assigner of a role / ARG1:entity playing the role / ARG2:role [cast.xml]
   LexSem("V","cast",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cast"),arg1,pp("as",arg2)))),

 'cast-03': # ARG0:foundry worker, agent / ARG1:final product / ARG2:material used [cast.xml]
   LexSem("V","cast",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cast"),arg1,pp("of",arg2)))),

 'cast-04': # ARG0:doctor / ARG1:patient, bone set / ARG2:material used [cast.xml]
   LexSem("V","cast",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cast"),arg1,pp("in",arg2)))),

 'castigate-01': # ARG0:assigner of blame / ARG1:guilty party / ARG2:crime [castigate.xml]
   LexSem("V","castigate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("castigate"),arg1,pp("for",arg2)))),

 'castle-01': # ARG0:chess player [castle.xml]
   LexSem("V","castle",[":ARG0"],lambda arg0:S(arg0,VP(V("castle")))),

 'castrate-01': # ARG0:causer of weakening / ARG1:thing weakened [castrate.xml]
   LexSem("V","castrate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("castrate"),arg1))),

 'castrate-02': # ARG0:editor / ARG1:Thing edited [castrate.xml]
   LexSem("V","castrate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("castrate"),arg1))),

 'castrate-03': # ARG0:Castrator / ARG1:Spayed/neutered entity [castrate.xml]
   LexSem("V","castrate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("castrate"),arg1))),

 'catalogue-01': # ARG0:creator of catalog, agent / ARG1:thing cataloged, entry / ARG2:catalog itself, or category arg1 is placed in [catalogue.xml]
   LexSem("V","catalog",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("catalog"),arg1,pp("into",arg2)))),

 'catalyze-01': # ARG0:agent / ARG1:resultant state [catalyze.xml]
   LexSem("V","catalyze",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("catalyze"),arg1))),

 'catapult-01': # ARG0:thrower / ARG1:thing thrown / ARG2:thrown at, to, over, etc [catapult.xml]
   LexSem("V","catapult",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("catapult"),arg1,pp("into",arg2)))),

 'catch-01': # ARG0:receiver / ARG1:thing gotten / ARG2:giver [catch.xml]
   LexSem("V","catch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("catch"),arg1,pp("from",arg2)))),

 'catch-02': # ARG0:events, usually / ARG1:entity / ARG2:attribute [catch.xml]
   LexSem("V","catch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("catch"),arg1,arg2))),

 'catch-03': # ARG0:trapper / ARG1:trapped / ARG2:trap, either place or instrument [catch.xml]
   LexSem("V","catch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("catch"),arg1,pp("in",arg2)))),

 'catch-on-05': # ARG1:thing becoming popular / ARG2:popular with whom? [catch.xml]
   LexSem("V","catch",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("catch"),Adv("on"),pp("with",arg2)))),

 'catch-on-06': # ARG0:aware entity / ARG1:aware of what? [catch.xml]
   LexSem("V","catch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("catch"),Adv("on"),pp("to",arg1)))),

 'catch-up-04': # ARG1:entity in motion / ARG2:goal [catch.xml]
   LexSem("V","catch",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("catch"),Adv("up"),pp("with",arg2)))),

 'catch-up-07': # ARG0:causer / ARG1:entity becomeing caught / ARG2:trap [catch.xml]
   LexSem("V","catch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("catch"),Adv("up"),arg1,pp("into",arg2)))),

 'catch_up-04': # ARG1:entity in motion / ARG2:goal [catch.xml]
   LexSem("V","ketchup",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("ketchup"),pp("with",arg2)))),

 'catechize-01': # ARG0:questioner / ARG1:one being questioned [catechize.xml]
   LexSem("V","catechize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("catechize"),arg1))),

 'categorize-01': # ARG0:assigner / ARG1:thing assigned / ARG2:category [categorize.xml]
   LexSem("V","categorize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("categorize"),arg1,pp("as",arg2)))),

 'cater-01': # ARG0:caterer / ARG1:thing (event?) catered / ARG2:benefactive [cater.xml]
   LexSem("V","cater",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cater"),arg1,pp("to",arg2)))),

 'catheterize-101': # ARG0:Doctor / ARG1:Patient/Body part [catheterize.xml]
   LexSem("V","catheterize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("catheterize"),arg1))),

 'catholicize-01': # ARG0:agent, catholicizing entity / ARG1:entity catholicized [catholicize.xml]
   LexSem("V","catholicize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("catholicize"),arg1))),

 'catnap-01': # ARG0:Napper / ARG1:Cognate object, mention of sleep itself (probably rare) [catnap.xml]
   LexSem("V","catnap",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("catnap"),arg1))),

 'caulk-01': # ARG0:Handyman, caulker / ARG1:Location, entity being caulked / ARG2:Caulk itself [calk.xml]
   LexSem("V","caulk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("caulk"),arg1,pp("with",arg2)))),

 'cause-01': # ARG0:forcer, causer / ARG1:impelled action [cause.xml]
   LexSem("V","cause",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cause"),arg1))),

 'cauterize-01': # ARG0:agent, cause / ARG1:entity being cauterized / ARG2:instrument [cauterize.xml]
   LexSem("V","cauterize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cauterize"),arg1,pp("with",arg2)))),

 'caution-01': # ARG0:Sayer / ARG1:Utterance / ARG2:Hearer [caution.xml]
   LexSem("V","caution",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("caution"),arg1,arg2))),

 'cave-01': # ARG1:thing caving [cave.xml]
   LexSem("V","cave",[":ARG1"],lambda arg1:S(arg1,VP(V("cave")))),

 'cave-in-02': # ARG1:thing caving in [cave.xml]
   LexSem("V","cave",[":ARG1"],lambda arg1:S(arg1,VP(V("cave"),Adv("in")))),

 'cavort-01': # ARG1:entity moving, cavorter / ARG2:start point / ARG3:end point / ARG4:location, path [cavort.xml]
   LexSem("V","cavort",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("cavort"),pp("from",arg2),arg3,pp("in",arg4)))),

 'caw-01': # ARG0:cawer [caw.xml]
   LexSem("V","caw",[":ARG0"],lambda arg0:S(arg0,VP(V("caw")))),

 'cease-01': # ARG0:causer of ceasing, Agent / ARG1:Theme (action or object being stopped) / ARG2:Instrument [cease.xml]
   LexSem("V","cease",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cease"),arg1,pp("with",arg2)))),

 'cede-01': # ARG0:giver / ARG1:gift / ARG2:recipient [cede.xml]
   LexSem("V","cede",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cede"),arg1,pp("to",arg2)))),

 'celebrate-01': # ARG0:honorer / ARG1:honored / ARG2:for what reason [celebrate.xml]
   LexSem("V","celebrate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("celebrate"),arg1,pp("for",arg2)))),

 'celebrate-02': # ARG0:celebrator(s) / ARG1:party, occasion [celebrate.xml]
   LexSem("V","celebrate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("celebrate"),arg1))),

 'cellar-01': # ARG0:storer / ARG1:thing stored / ARG2:cellar, location [cellar.xml]
   LexSem("V","cellar",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cellar"),arg1,pp("in",arg2)))),

 'cement-01': # ARG0:causer of connection, agent / ARG1:entity cemented [cement.xml]
   LexSem("V","cement",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cement"),arg1))),

 'censor-01': # ARG0:censor / ARG1:entity censored [censor.xml]
   LexSem("V","censor",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("censor"),arg1))),

 'censure-01': # ARG0:condemner / ARG1:entity censured / ARG2:for what [censure.xml]
   LexSem("V","censure",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("censure"),arg1,arg2))),

 'center-01': # ARG0:agent, focuser / ARG1:thing focused / ARG2:focused-on [center.xml]
   LexSem("V","center",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("center"),arg1,pp("on",arg2)))),

 'centralize-01': # ARG0:collector / ARG1:thing(s) collected [centralize.xml]
   LexSem("V","centralize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("centralize"),arg1))),

 'certify-01': # ARG0:confirmer, declarer, agent / ARG1:entity certified / ARG2:secondary predicate [certify.xml]
   LexSem("V","certify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("certify"),arg1,pp("as",arg2)))),

 'chafe-01': # ARG0:experiencer / ARG1:target of emotion [chafe.xml]
   LexSem("V","chafe",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("chafe"),pp("at",arg1)))),

 'chaff-01': # ARG0:agent, chaffer / ARG1:patient, entity chaffed [chaff.xml]
   LexSem("V","chaff",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("chaff"),arg1))),

 'chagrin-01': # ARG0:causer of embarrassment / ARG1:chagrined entity / ARG2:instrument, if separate from arg0 [chagrin.xml]
   LexSem("V","chagrin",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("chagrin"),arg1,arg2))),

 'chain-01': # ARG0:causer of connection, agent / ARG1:(first) thing being chained / ARG2:subsequent things, if separate / ARG3:attribute on arg1 [chain.xml]
   LexSem("V","chain",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("chain"),arg1,pp("to",arg2),arg3))),

 'chair-01': # ARG0:chair / ARG1:institution [chair.xml]
   LexSem("V","chair",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("chair"),arg1))),

 'chalk-up-01': # ARG0:earner, agent / ARG1:thing earned [chalk.xml]
   LexSem("V","chalk",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("chalk"),Adv("up"),arg1))),

 'chalk-up-02': # ARG0:attributer / ARG1:thing attributed / ARG2:attributed to whom/what [chalk.xml]
   LexSem("V","chalk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("chalk"),Adv("up"),arg1,pp("to",arg2)))),

 'challenge-01': # ARG0:challenger / ARG1:challenged (champion?) / ARG2:challenged-to, heroic task [challenge.xml]
   LexSem("V","challenge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("challenge"),arg1,pp("to",arg2)))),

 'champion-01': # ARG0:helper / ARG1:person or project being supported [champion.xml]
   LexSem("V","champion",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("champion"),arg1))),

 'chance-01': # ARG0:taker of risk, agent / ARG1:risk taken [chance.xml]
   LexSem("V","chance",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("chance"),arg1))),

 'change-01': # ARG0:causer of transformation / ARG1:thing changing / ARG2:end state / ARG3:start state [change.xml]
   LexSem("V","change",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("change"),arg1,pp("to",arg2),pp("from",arg3)))),

 'change_hands-06': # ARG1:thing changing hands / ARG2:giver / ARG3:getter [hand.xml]
   LexSem("V","change",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("change"),pp("between",arg2),arg3))),

 'channel-01': # ARG0:director / ARG1:thing directed / ARG2:direction, towards what / ARG3:source [channel.xml]
   LexSem("V","channel",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("channel"),arg1,pp("into",arg2),pp("from",arg3)))),

 'chant-01': # ARG0:reciter, agent / ARG1:utterance [chant.xml]
   LexSem("V","chant",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("chant"),arg1))),

 'chaperone-01': # ARG0:entity acting as a chaperone / ARG1:person chaperoned, the chaperoned-for [chaperone.xml]
   LexSem("V","chaperone",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("chaperone"),arg1))),

 'char-01': # ARG0:bad cook, agent / ARG1:partially-burnt thing [char.xml]
   LexSem("V","char",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("char"),arg1))),

 'characterize-01': # ARG0:describer / ARG1:thing described / ARG2:secondary attribute, described-as [characterize.xml]
   LexSem("V","characterize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("characterize"),arg1,pp("as",arg2)))),

 'charbroil-01': # ARG0:cook / ARG1:food [charbroil.xml]
   LexSem("V","charbroil",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("charbroil"),arg1))),

 'charcoal-01': # ARG0:artist / ARG1:thing drawn / ARG2:destination [charcoal.xml]
   LexSem("V","charcoal",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("charcoal"),arg1,pp("on",arg2)))),

 'charge-01': # ARG0:seller / ARG1:asking price / ARG2:buyer / ARG3:commodity [charge.xml]
   LexSem("V","charge",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("charge"),arg1,pp("for",arg2),pp("for",arg3)))),

 'charge-02': # ARG0:entity in motion / ARG1:path / ARG2:deep agent (if different from arg0) [charge.xml]
   LexSem("V","charge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("charge"),pp("down",arg1),arg2))),

 'charge-03': # ARG0:supplier / ARG1:battery, usually / ARG2:instrument (defaults to electricity) [charge.xml]
   LexSem("V","charge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("charge"),arg1,pp("with",arg2)))),

 'charge-04': # ARG0:buyer / ARG1:thing charged (amount, item) / ARG2:credit [charge.xml]
   LexSem("V","charge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("charge"),pp("about",arg1),pp("against",arg2)))),

 'charge-05': # ARG0:assigner / ARG1:assigned / ARG2:role or crime [charge.xml]
   LexSem("V","charge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("charge"),arg1,pp("with",arg2)))),

 'charge-06': # ARG0:speaker / ARG1:utterance [charge.xml]
   LexSem("V","charge",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("charge"),arg1))),

 'charge-off-07': # ARG0:sender / ARG1:thing sent [charge.xml]
   LexSem("V","charge",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("charge"),Adv("off"),arg1))),

 'chariot-01': # ARG0:agent, charioteer (transitive subject) / ARG1:thing moved (intransitive subject, transitive object) / ARG2:locations, or start point / ARG3:destination [chariot.xml]
   LexSem("V","chariot",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("chariot"),arg1,arg2,pp("to",arg3)))),

 'charm-01': # ARG0:charmer / ARG1:charmed thing(s) or person [charm.xml]
   LexSem("V","charm",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("charm"),arg1))),

 'chart-01': # ARG0:chart-maker / ARG1:thing being charted [chart.xml]
   LexSem("V","chart",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("chart"),arg1))),

 'chart-out-02': # ARG0:chart-maker / ARG1:thing being charted [chart.xml]
   LexSem("V","chart",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("chart"),Adv("out"),arg1))),

 'charter-01': # ARG0:hirer, leaser, agent / ARG1:entity chartered / ARG2:task [charter.xml]
   LexSem("V","charter",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("charter"),arg1,arg2))),

 'chase-01': # ARG0:follower / ARG1:thing followed [chase.xml]
   LexSem("V","chase",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("chase"),arg1))),

 'chasten-01': # ARG0:admonisher, agent / ARG1:entity become chaste (really) [chasten.xml]
   LexSem("V","chasten",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("chasten"),arg1))),

 'chastise-01': # ARG0:chastiser, agent / ARG1:entity being chastised / ARG2:cause [chastise.xml]
   LexSem("V","chastise",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("chastise"),arg1,pp("for",arg2)))),

 'chat-01': # ARG0:talker / ARG1:subject / ARG2:hearer [chat.xml]
   LexSem("V","chat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("chat"),pp("about",arg1),pp("with",arg2)))),

 'chatter-01': # ARG0:emitter of noise, speaker / ARG1:topic, if arg0 is speaker [chatter.xml]
   LexSem("V","chatter",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("chatter"),pp("about",arg1)))),

 'chatter-away-02': # ARG0:chatterer / ARG1:subject matter [chatter.xml]
   LexSem("V","chatter",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("chatter"),Adv("away"),arg1))),

 'chauffeur-01': # ARG0:driver / ARG1:person chauffeured [chauffeur.xml]
   LexSem("V","chauffeur",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("chauffeur"),arg1))),

 'cheapen-01': # ARG0:causer, agent / ARG1:thing losing value / ARG2:instrument [cheapen.xml]
   LexSem("V","cheapen",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cheapen"),arg1,pp("by",arg2)))),

 'cheat-01': # ARG0:entity removing / ARG1:thing being removed / ARG2:removed from [cheat.xml]
   LexSem("V","cheat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cheat"),pp("of",arg1),arg2))),

 'cheat-02': # ARG0:cheater / ARG1:domain in which the cheating occurs [cheat.xml]
   LexSem("V","cheat",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cheat"),pp("on",arg1)))),

 'cheat-03': # ARG0:cheater / ARG1:partner cheated on / ARG2:home-wrecker [cheat.xml]
   LexSem("V","cheat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cheat"),pp("on",arg1),pp("with",arg2)))),

 'check-01': # ARG0:checker / ARG1:thing checked / ARG2:checked for [check.xml]
   LexSem("V","check",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("check"),arg1,pp("for",arg2)))),

 'check-03': # ARG0:agent, person with pen / ARG1:option, box, etc [check.xml]
   LexSem("V","check",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("check"),arg1))),

 'check-07': # ARG0:controller / ARG1:thing that would be uncontrolled otherwise [check.xml]
   LexSem("V","check",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("check"),arg1))),

 'check-in-02': # ARG0:staff member or other entity enabling the checking in / ARG1:entity being checked in; future resident / ARG2:place checked into [check.xml]
   LexSem("V","check",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("check"),Adv("into"),arg1,pp("into",arg2)))),

 'check-in-04': # ARG0:confirmer, agent / ARG1:check in with whom [check.xml]
   LexSem("V","check",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("check"),Adv("in"),pp("with",arg1)))),

 'check-out-05': # ARG0:checker / ARG1:thing checked / ARG2:checked for [check.xml]
   LexSem("V","check",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("check"),Adv("out"),arg1,arg2))),

 'check-out-09': # ARG0:staff member or other entity enabling the checkout; person being paid / ARG1:entity being checked out; person leaving / ARG2:place checked out of [check.xml]
   LexSem("V","check",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("check"),Adv("out"),arg1,arg2))),

 'check-up-06': # ARG0:checker / ARG1:thing checked / ARG2:checked for [check.xml]
   LexSem("V","check",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("check"),Adv("up"),pp("on",arg1),arg2))),

 'check_in-02': # ARG0:staff member or other entity enabling the checking in / ARG1:entity being checked in; future resident / ARG2:place checked into [check.xml]
   LexSem("V","check",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("check"),arg1,pp("into",arg2)))),

 'check_out-09': # ARG0:staff member or other entity enabling the checkout; person being paid / ARG1:entity being checked out; person leaving / ARG2:place checked out of [check.xml]
   LexSem("V","check",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("check"),arg1,arg2))),

 'cheep-01': # ARG0:cheep-er [cheep.xml]
   LexSem("V","cheep",[":ARG0"],lambda arg0:S(arg0,VP(V("cheep")))),

 'cheer-01': # ARG0:causer of cheer, agent / ARG1:patient, made cheerful / ARG2:instrument or manner, only when separate  from agent [cheer.xml]
   LexSem("V","cheer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cheer"),arg1,pp("with",arg2)))),

 'cheer-02': # ARG0:clapper / ARG1:thing approved of / ARG2:grounds, reason for approval [cheer.xml]
   LexSem("V","cheer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cheer"),pp("for",arg1),arg2))),

 'cheer-on-04': # ARG0:encourager / ARG1:thing encouraged [cheer.xml]
   LexSem("V","cheer",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cheer"),Adv("on"),arg1))),

 'cheer-up-03': # ARG0:comforter / ARG1:patient, comforted / ARG2:instrument or manner [cheer.xml]
   LexSem("V","cheer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cheer"),Adv("up"),arg1,pp("with",arg2)))),

 'cheerlead-01': # ARG0:cheerleader / ARG1:event, team, etc. [cheerlead.xml]
   LexSem("V","cheerlead",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cheerlead"),arg1))),

 'cherish-01': # ARG0:cherisher / ARG1:cherished [cherish.xml]
   LexSem("V","cherish",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cherish"),arg1))),

 'cherrypick-01': # ARG0:picker / ARG1:entity picked / ARG2:group or source / ARG3:benefactive [cherrypick.xml]
   LexSem("V","cherrypick",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("cherrypick"),arg1,pp("from",arg2),arg3))),

 'chew-01': # ARG0:chewer / ARG1:food [chew.xml]
   LexSem("V","chew",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("chew"),arg1))),

 'chew-up-02': # ARG0:chewer / ARG1:food [chew.xml]
   LexSem("V","chew",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("chew"),Adv("up"),arg1))),

 'chicken-out-01': # ARG0:chicken / ARG1:chickened out of [chicken.xml]
   LexSem("V","chicken",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("chicken"),Adv("out"),pp("of",arg1)))),

 'chide-01': # ARG0:chider, agent / ARG1:recipient of chiding / ARG2:cause [chide.xml]
   LexSem("V","chide",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("chide"),arg1,pp("for",arg2)))),

 'chill-01': # ARG0:causer of cooling, agent / ARG1:entity chilled [chill.xml]
   LexSem("V","chill",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("chill"),arg1))),

 'chill-02': # ARG0:relaxer / ARG1:relaxing activity [chill.xml]
   LexSem("V","chill",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("chill"),arg1))),

 'chime-01': # ARG0:maker of sounds [chime.xml]
   LexSem("V","chime",[":ARG0"],lambda arg0:S(arg0,VP(V("chime")))),

 'chime-02': # ARG0:speaker / ARG1:utterance / ARG2:listener [chime.xml]
   LexSem("V","chime",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("chime"),arg1,arg2))),

 'chink-01': # ARG0:agent / ARG1:container / ARG2:subtance [chink.xml]
   LexSem("V","chink",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("chink"),arg1,pp("with",arg2)))),

 'chip-01': # ARG0:breaker / ARG1:thing broken / ARG2:instrument / ARG3:pieces [chip.xml]
   LexSem("V","chip",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("chip"),pp("at",arg1),pp("with",arg2),arg3))),

 'chip-in-02': # ARG0:contributor / ARG1:thing contributed / ARG2:contributed to [chip.xml]
   LexSem("V","chip",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("chip"),Adv("in"),arg1,arg2))),

 'chir-01': # ARG0:thing making chir sound [chir.xml]
   LexSem("V","chir",[":ARG0"],lambda arg0:S(arg0,VP(V("chir")))),

 'chirp-01': # ARG0:chirp-er [chirp.xml]
   LexSem("V","chirp",[":ARG0"],lambda arg0:S(arg0,VP(V("chirp")))),

 'chirp-02': # ARG0:chirp=er [chirp.xml]
   LexSem("V","chirp",[":ARG0"],lambda arg0:S(arg0,VP(V("chirp")))),

 'chirrup-01': # ARG0:chirrup-er [chirrup.xml]
   LexSem("V","chirrup",[":ARG0"],lambda arg0:S(arg0,VP(V("chirrup")))),

 'chisel-01': # ARG0:builder / ARG1:construction / ARG2:material, start state / ARG4:end state of arg1 [chisel.xml]
   LexSem("V","chisel",[":ARG0",":ARG1",":ARG2",":ARG4"],lambda arg0,arg1,arg2,arg4:S(arg0,VP(V("chisel"),arg1,arg2,arg4))),

 'chitchat-01': # ARG0:First or all speakers (where one constituent) / ARG1:topic of chitchat / ARG2:Second chatter (where separate constituents), or hearer [chitchat.xml]
   LexSem("V","chitchat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("chitchat"),pp("about",arg1),pp("with",arg2)))),

 'chitter-01': # ARG0:chitter-er [chitter.xml]
   LexSem("V","chitter",[":ARG0"],lambda arg0:S(arg0,VP(V("chitter")))),

 'chlorinate-01': # ARG0:agent, cause / ARG1:thing chlorinated / ARG2:chlorine [chlorinate.xml]
   LexSem("V","chlorinate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("chlorinate"),arg1,arg2))),

 'choke-01': # ARG0:causer of choking, agent / ARG1:entity choked / ARG2:thing choked on [choke.xml]
   LexSem("V","choke",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("choke"),arg1,pp("on",arg2)))),

 'choke-02': # ARG0:causer of filling, agent / ARG1:entity choked [choke.xml]
   LexSem("V","choke",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("choke"),arg1))),

 'choke-off-03': # ARG0:causer of end, agent / ARG1:entity choked off [choke.xml]
   LexSem("V","choke",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("choke"),Adv("off"),arg1))),

 'choke-up-04': # ARG0:emotion / ARG1:experiencer [choke.xml]
   LexSem("V","choke",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("choke"),Adv("up"),arg1))),

 'chomp-01': # ARG0:consumer, eater / ARG1:meal [chomp.xml]
   LexSem("V","chomp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("chomp"),pp("at",arg1)))),

 'choose-01': # ARG0:picker / ARG1:thing picked / ARG2:group or source / ARG3:benefactive / ARG4:secondary attribute on arg1 [choose.xml]
   LexSem("V","choose",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("choose"),arg1,pp("from",arg2),arg3,pp("to",arg4)))),

 'chop-01': # ARG0:chopper / ARG1:chopped / ARG2:instrument [chop.xml]
   LexSem("V","chop",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("chop"),arg1,pp("with",arg2)))),

 'chop-down-02': # ARG0:chopper / ARG1:chopped / ARG2:instrument [chop.xml]
   LexSem("V","chop",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("chop"),Adv("down"),arg1,arg2))),

 'chop-up-03': # ARG0:chopper / ARG1:chopped / ARG2:instrument [chop.xml]
   LexSem("V","chop",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("chop"),Adv("up"),arg1,arg2))),

 'choreograph-01': # ARG0:creator / ARG1:dance / ARG2:created for, beneficiary [choreograph.xml]
   LexSem("V","choreograph",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("choreograph"),arg1,arg2))),

 'chortle-01': # ARG0:chortler (the jabberwocky) / ARG1:utterance, theme / ARG2:hearer [chortle.xml]
   LexSem("V","chortle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("chortle"),arg1,arg2))),

 'chortle-02': # ARG0:chortler / ARG1:path [chortle.xml]
   LexSem("V","chortle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("chortle"),arg1))),

 'christen-01': # ARG0:assigner of name, agent / ARG1:thing named / ARG2:name [christen.xml]
   LexSem("V","christen",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("christen"),arg1,arg2))),

 'christianize-01': # ARG0:agent, christianizing entity / ARG1:entity christianized [christianize.xml]
   LexSem("V","christianize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("christianize"),arg1))),

 'chrome-01': # ARG0:applier of chrome / ARG1:thing made chrome / ARG2:Chrome itself, type of chrome [chrome.xml]
   LexSem("V","chrome",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("chrome"),arg1,pp("with",arg2)))),

 'chronicle-01': # ARG0:recorder, agent / ARG1:thing recorded [chronicle.xml]
   LexSem("V","chronicle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("chronicle"),arg1))),

 'chuck-01': # ARG0:entity getting rid of something, agent / ARG1:entity chucked [chuck.xml]
   LexSem("V","chuck",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("chuck"),arg1))),

 'chuckle-01': # ARG0:chuckler [chuckle.xml]
   LexSem("V","chuckle",[":ARG0"],lambda arg0:S(arg0,VP(V("chuckle")))),

 'chuckle-02': # ARG0:speaker / ARG1:utterance / ARG2:hearer [chuckle.xml]
   LexSem("V","chuckle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("chuckle"),arg1,arg2))),

 'chug-01': # ARG0:maker of sounds [chug.xml]
   LexSem("V","chug",[":ARG0"],lambda arg0:S(arg0,VP(V("chug")))),

 'chug-02': # ARG0:drinker / ARG1:beverage [chug.xml]
   LexSem("V","chug",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("chug"),arg1))),

 'chug-03': # ARG1:thing in motion / ARG2:path; swamp/terrain chugged through / ARG3:destination [chug.xml]
   LexSem("V","chug",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("chug"),arg2,pp("to",arg3)))),

 'chunk-01': # ARG0:agent chunking / ARG1:entity put into chunk / ARG2:chunk itself, group arg1 is chunked into [chunk.xml]
   LexSem("V","chunk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("chunk"),arg1,pp("into",arg2)))),

 'churn-01': # ARG0:causer of violent motion, agent / ARG1:liquid, thing in motion / ARG2:end product [churn.xml]
   LexSem("V","churn",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("churn"),arg1,pp("into",arg2)))),

 'cinch-01': # ARG0:manipulator of belt, agent / ARG1:belt [cinch.xml]
   LexSem("V","cinch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cinch"),arg1))),

 'cinch-02': # ARG0:attacher / ARG1:thing(s) attached / ARG2:'together' or other attribute of arg1 [cinch.xml]
   LexSem("V","cinch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cinch"),arg1,pp("down",arg2)))),

 'cinch-03': # ARG0:cause of sureness / ARG1:sure thing [cinch.xml]
   LexSem("V","cinch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cinch"),arg1))),

 'circle-01': # ARG0:entity moving [circle.xml]
   LexSem("V","circle",[":ARG0"],lambda arg0:S(arg0,VP(V("circle")))),

 'circle-02': # ARG0:causer / ARG1:entity forming a circle / ARG2:entity within a circle [circle.xml]
   LexSem("V","circle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("circle"),arg1,arg2))),

 'circularize-01': # ARG0:agent, cause of dissemination / ARG1:theme, information/ literature disseminated / ARG2:recipient of information [circularize.xml]
   LexSem("V","circularize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("circularize"),arg1,pp("to",arg2)))),

 'circularize-02': # ARG0:Pollster, person/org distrubiting questionnaires, info. / ARG1:Person polled, sometimes expressed as a location or household / ARG2:Theme, questionnaire or thing distributed [circularize.xml]
   LexSem("V","circularize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("circularize"),arg1,pp("with",arg2)))),

 'circulate-01': # ARG0:causer / ARG1:thing going 'round [circulate.xml]
   LexSem("V","circulate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("circulate"),arg1))),

 'circumcise-01': # ARG0:agent, cause / ARG1:thing circumcised [circumcise.xml]
   LexSem("V","circumcise",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("circumcise"),arg1))),

 'circumscribe-01': # ARG0:agent, entity imposing limits / ARG1:thing limited, confined / ARG2:mention of limit on arg1, confined to what? [circumscribe.xml]
   LexSem("V","circumscribe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("circumscribe"),arg1,arg2))),

 'circumvent-01': # ARG0:avoider / ARG1:thing avoided [circumvent.xml]
   LexSem("V","circumvent",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("circumvent"),arg1))),

 'cite-01': # ARG0:citer / ARG1:thing cited / ARG2:secondary attribute, cited-as [cite.xml]
   LexSem("V","cite",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cite"),arg1,pp("as",arg2)))),

 'cite-02': # ARG0:giver of ticket / ARG1:entity receiving citation / ARG2:criminal misdeed [cite.xml]
   LexSem("V","cite",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cite"),arg1,pp("for",arg2)))),

 'civilize-01': # ARG0:agent causing civilization / ARG1:entity becoming civil [civilize.xml]
   LexSem("V","civilize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("civilize"),arg1))),

 'clack-01': # ARG0:causal agent / ARG1:thing actually clacking / ARG2:location of clacking [clack.xml]
   LexSem("V","clack",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("clack"),arg1,pp("on",arg2)))),

 'clack-02': # ARG0:clacking-maker / ARG1:the clack sound / ARG2:hearer [clack.xml]
   LexSem("V","clack",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("clack"),arg1,pp("at",arg2)))),

 'clack-03': # ARG0:speaker / ARG1:his/her tongue / ARG2:topic/ utterance / ARG3:hearer [clack.xml]
   LexSem("V","clack",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("clack"),arg1,pp("about",arg2),arg3))),

 'clad-01': # ARG0:person putting on clothes / ARG1:person wearing clothes, when separate from agent / ARG2:clothes themselves [clad.xml]
   LexSem("V","clad",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("clad"),arg1,pp("in",arg2)))),

 'claim-01': # ARG0:claimer, asserter / ARG1:thing claimed, asserted / ARG2:hearer [claim.xml]
   LexSem("V","claim",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("claim"),arg1,pp("to",arg2)))),

 'claim-02': # ARG0:claim staker / ARG1:property / ARG2:beneficiary [claim.xml]
   LexSem("V","claim",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("claim"),arg1,pp("for",arg2)))),

 'clam-01': # ARG0:agent or causer / ARG1:entity gathered / ARG2:gathered into / ARG3:beneficiary [clam.xml]
   LexSem("V","clam",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("clam"),arg1,arg2,arg3))),

 'clamber-01': # ARG0:awkward climber, agent [clamber.xml]
   LexSem("V","clamber",[":ARG0"],lambda arg0:S(arg0,VP(V("clamber")))),

 'clamor-01': # ARG0:demander / ARG1:demanded [clamor.xml]
   LexSem("V","clamor",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("clamor"),arg1))),

 'clamp-01': # ARG0:attacher, agent causing attachment / ARG1:first thing being clamped / ARG2:second thing, clamped to what [clamp.xml]
   LexSem("V","clamp",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("clamp"),pp("on",arg1),pp("to",arg2)))),

 'clang-01': # ARG0:agent, causer / ARG1:entity clanging [clang.xml]
   LexSem("V","clang",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("clang"),arg1))),

 'clank-01': # ARG1:emitter of noise [clank.xml]
   LexSem("V","clank",[":ARG1"],lambda arg1:S(arg1,VP(V("clank")))),

 'clank-02': # ARG0:entity in motion / ARG1:path [clank.xml]
   LexSem("V","clank",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("clank"),pp("in",arg1)))),

 'clap-01': # ARG0:clapper / ARG1:thing(s) struck / ARG2:other thing struck, location [clap.xml]
   LexSem("V","clap",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("clap"),arg1,pp("over",arg2)))),

 'clarify-10': # ARG0:causer of clarification, agent / ARG1:thing becoming clearer / ARG2:benefactive [clear.xml]
   LexSem("V","clarify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("clarify"),arg1,pp("to",arg2)))),

 'clash-01': # ARG0:1st, all in one mention, or agentive clasher / ARG1:entity clashed with when separat constituent / ARG2:entity clashed over [clash.xml]
   LexSem("V","clash",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("clash"),pp("with",arg1),pp("over",arg2)))),

 'clash-02': # ARG0:agent, one causing a clashing noise / ARG1:theme, thing clashing into something / ARG2:location, thing that the theme clashes against [clash.xml]
   LexSem("V","clash",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("clash"),arg1,pp("against",arg2)))),

 'clasp-01': # ARG0:holder / ARG1:thing held, canonically hands / ARG2:second thing held, or attribute of arg1 [clasp.xml]
   LexSem("V","clasp",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("clasp"),arg1,arg2))),

 'class-01': # ARG0:describer / ARG1:thing defined / ARG2:secondary attribute, described-as, definition [class.xml]
   LexSem("V","class",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("class"),arg1,pp("as",arg2)))),

 'classify-01': # ARG0:describer / ARG1:thing defined / ARG2:secondary attribute, described-as, definition [classify.xml]
   LexSem("V","classify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("classify"),arg1,pp("as",arg2)))),

 'classify-02': # ARG0:secret-keeper / ARG1:secret [classify.xml]
   LexSem("V","classify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("classify"),arg1))),

 'clatter-01': # ARG0:noisy thing [clatter.xml]
   LexSem("V","clatter",[":ARG0"],lambda arg0:S(arg0,VP(V("clatter")))),

 'clatter-02': # ARG0:thing in motion / ARG1:path [clatter.xml]
   LexSem("V","clatter",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("clatter"),pp("down",arg1)))),

 'claw-02': # ARG0:cutter, cat-like creature / ARG1:thing cut, clawed / ARG2:medium, source (clawed-off from what? ) / ARG3:instrument [claw.xml]
   LexSem("V","claw",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("claw"),arg1,pp("off",arg2),pp("with",arg3)))),

 'clay-01': # ARG0:agent, handler of clay / ARG1:location/entity being covered with clay / ARG2:Clay, type of clay itself [clay.xml]
   LexSem("V","clay",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("clay"),arg1,arg2))),

 'clean-01': # ARG0:cleaner, agent / ARG1:thing cleaned / ARG2:beneficiary, cost:  clean for [clean.xml]
   LexSem("V","clean",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("clean"),arg1,pp("for",arg2)))),

 'clean-out-03': # ARG0:emptier, agent / ARG1:entity cleaned out [clean.xml]
   LexSem("V","clean",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("clean"),Adv("out"),arg1))),

 'clean-up-02': # ARG0:cleaner, agent / ARG1:thing cleaned up [clean.xml]
   LexSem("V","clean",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("clean"),Adv("up"),arg1))),

 'cleanse-01': # ARG0:agent, cleaner / ARG1:dirt / ARG2:dirty thing, now clean [cleanse.xml]
   LexSem("V","cleanse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cleanse"),pp("of",arg1),arg2))),

 'clear-01': # ARG0:cleaner / ARG1:thing made clean / ARG2:dirt [clear.xml]
   LexSem("V","clear",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("clear"),arg1,pp("of",arg2)))),

 'clear-02': # ARG0:agent, approver / ARG1:thing approved / ARG2:semi-idiomatic: 'the way' / ARG3:entity given permission for arg1 [clear.xml]
   LexSem("V","clear",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("clear"),arg1,arg2,arg3))),

 'clear-03': # ARG0:escaper / ARG1:thing escaped [clear.xml]
   LexSem("V","clear",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("clear"),arg1))),

 'clear-out-05': # ARG0:clearer, causer of leaving / ARG1:entity leaving or removed / ARG2:place left [clear.xml]
   LexSem("V","clear",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("clear"),Adv("out"),arg1,arg2))),

 'clear-up-04': # ARG0:cleaner / ARG1:thing becoming clean [clear.xml]
   LexSem("V","clear",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("clear"),Adv("up"),arg1))),

 'cleave-01': # ARG0:agent, cleaver / ARG1:patient, thing cleaved / ARG2:result of cleaving / ARG3:benefactive [cleave.xml]
   LexSem("V","cleave",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("cleave"),arg1,arg2,pp("for",arg3)))),

 'clench-01': # ARG0:holder / ARG1:clenched thing [clench.xml]
   LexSem("V","clench",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("clench"),arg1))),

 'clerk-01': # ARG0:clerk / ARG1:person, organization, event arg0 is acting as clerk for [clerk.xml]
   LexSem("V","clerk",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("clerk"),pp("for",arg1)))),

 'click-01': # ARG0:causer of clicking noise / ARG1:thing emitting clicks [click.xml]
   LexSem("V","click",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("click"),arg1))),

 'click-02': # ARG1:entity 1 / ARG2:entity 2 [click.xml]
   LexSem("V","click",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("click"),pp("with",arg2)))),

 'climax-01': # ARG1:thing being described / ARG2:maximum / ARG3:benefactive [climax.xml]
   LexSem("V","climax",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("climax"),arg2,arg3))),

 'climb-01': # ARG0:climber / ARG1:thing climbed (clomb?) [climb.xml]
   LexSem("V","climb",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("climb"),arg1))),

 'climb-02': # ARG1:climber / ARG2:ext, amount risen / ARG3:start point / ARG4:end point / ARG5:attribute, when attribute of item is climbing rather than the whole [climb.xml]
   LexSem("V","climb",[":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg1,arg2,arg3,arg4,arg5:S(arg1,VP(V("climb"),arg2,pp("from",arg3),pp("to",arg4),arg5))),

 'clinch-01': # ARG0:causer of sureness / ARG1:sure thing [clinch.xml]
   LexSem("V","clinch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("clinch"),arg1))),

 'cling-01': # ARG0:clingy thing / ARG1:clung to [cling.xml]
   LexSem("V","cling",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cling"),pp("to",arg1)))),

 'cling-02': # ARG1:small bell [cling.xml]
   LexSem("V","cling",[":ARG1"],lambda arg1:S(arg1,VP(V("cling")))),

 'clink-01': # ARG1:emitter of sound / ARG0:causal agent [clink.xml]
   LexSem("V","clink",[":ARG1",":ARG0"],lambda arg1,arg0:S(arg0,VP(V("clink"),arg1))),

 'clip-01': # ARG0:clipper, agent / ARG1:thing clipped / ARG2:clipped from, source [clip.xml]
   LexSem("V","clip",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("clip"),arg1,pp("from",arg2)))),

 'clip-03': # ARG0:hitter (agent) / ARG1:entity hit / ARG2:thing in motion [clip.xml]
   LexSem("V","clip",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("clip"),arg1,arg2))),

 'clip-off-02': # ARG0:clipper, agent / ARG1:thing clipped / ARG2:clipped from [clip.xml]
   LexSem("V","clip",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("clip"),Adv("off"),arg1,arg2))),

 'cloak-01': # ARG0:agent of covering / ARG1:thing covered / ARG2:cloak [cloak.xml]
   LexSem("V","cloak",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cloak"),arg1,pp("in",arg2)))),

 'clobber-01': # ARG0:agent, hitter - animate only! / ARG1:thing hit / ARG2:instrument, thing hit by or with [clobber.xml]
   LexSem("V","clobber",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("clobber"),arg1,pp("with",arg2)))),

 'clock-01': # ARG0:measurer / ARG1:thing measured / ARG2:yardstick, standard of measurement (clock) / ARG3:measurement [clock.xml]
   LexSem("V","clock",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("clock"),arg1,arg2,pp("at",arg3)))),

 'clock-02': # ARG0:agent, hitter - animate only! / ARG1:thing hit / ARG2:instrument, thing hit by or with [clock.xml]
   LexSem("V","clock",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("clock"),arg1,arg2))),

 'clog-01': # ARG0:dancer [clog.xml]
   LexSem("V","clog",[":ARG0"],lambda arg0:S(arg0,VP(V("clog")))),

 'clog-02': # ARG0:agent (only!) / ARG1:passage / ARG2:substance blocking passage, clog itself [clog.xml]
   LexSem("V","clog",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("clog"),arg1,pp("with",arg2)))),

 'clog-up-03': # ARG0:agent (only!) / ARG1:passage / ARG2:substance blocking passage, clog itself [clog.xml]
   LexSem("V","clog",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("clog"),Adv("up"),arg1,pp("with",arg2)))),

 'cloister-01': # ARG0:stabler / ARG1:thing stabled / ARG2:stable, location [cloister.xml]
   LexSem("V","cloister",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cloister"),arg1,arg2))),

 'clomp-01': # ARG1:theme. entity in motion / ARG2:destination [clomp.xml]
   LexSem("V","clomp",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("clomp"),pp("up",arg2)))),

 'clone-01': # ARG0:cloner, agent / ARG1:original [clone.xml]
   LexSem("V","clone",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("clone"),arg1))),

 'close-01': # ARG0:person doing the closing / ARG1:thing closing / ARG2:anti-beneficiary [close.xml]
   LexSem("V","close",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("close"),arg1,pp("to",arg2)))),

 'close-02': # ARG1:thing closing [close.xml]
   LexSem("V","close",[":ARG1"],lambda arg1:S(arg1,VP(V("close")))),

 'close-03': # ARG0:entity making the deal / ARG1:the deal [close.xml]
   LexSem("V","close",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("close"),arg1))),

 'close-06': # ARG1:entity in motion / ARG2:target [close.xml]
   LexSem("V","close",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("close"),arg2))),

 'close-down-04': # ARG0:person doing the closing / ARG1:thing closing [close.xml]
   LexSem("V","close",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("close"),Adv("down"),arg1))),

 'close-in-07': # ARG1:entity in motion / ARG2:target [close.xml]
   LexSem("V","close",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("close"),Adv("in"),pp("on",arg2)))),

 'close-off-05': # ARG0:person doing the closing / ARG1:thing closing / ARG2:anti-beneficiary [close.xml]
   LexSem("V","close",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("close"),Adv("off"),arg1,pp("from",arg2)))),

 'close-over-08': # ARG0:agent / ARG1:thing becoming sealed [close.xml]
   LexSem("V","close",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("close"),Adv("over"),arg1))),

 'close-up-09': # ARG0:closer / ARG1:place/thing being closed up [close.xml]
   LexSem("V","close",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("close"),Adv("up"),arg1))),

 'clothe-01': # ARG0:causer of non-nudity, agent / ARG1:person dressed / ARG2:clothes [clothe.xml]
   LexSem("V","clothe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("clothe"),arg1,pp("in",arg2)))),

 'cloud-01': # ARG0:causer, agent / ARG1:thing be(com)ing cloudy / ARG2:cloud, instrument [cloud.xml]
   LexSem("V","cloud",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cloud"),arg1,arg2))),

 'clout-01': # ARG0:hitter / ARG1:victim or ball [clout.xml]
   LexSem("V","clout",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("clout"),arg1))),

 'clown-01': # ARG0:clown / ARG1:other party clowning, clown with / ARG2:subject, joke, clowning about what [clown.xml]
   LexSem("V","clown",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("clown"),pp("with",arg1),arg2))),

 'clown-around-02': # ARG0:first joker / ARG1:other joker, clowned-around-with / ARG2:clowning around about what? subject, joke [clown.xml]
   LexSem("V","clown",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("clown"),Adv("around"),arg1,arg2))),

 'cloy-01': # ARG0:causer of cloying sensation / ARG1:experiencer of cloying sensation / ARG2:instrument, when separate from arg0 [cloy.xml]
   LexSem("V","cloy",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cloy"),pp("on",arg1),pp("with",arg2)))),

 'club-01': # ARG0:striker, agent / ARG1:entity clubbed [club.xml]
   LexSem("V","club",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("club"),arg1))),

 'club-02': # ARG1:thing becoming thicker [club.xml]
   LexSem("V","club",[":ARG1"],lambda arg1:S(arg1,VP(V("club")))),

 'cluck-01': # ARG0:cluck [cluck.xml]
   LexSem("V","cluck",[":ARG0"],lambda arg0:S(arg0,VP(V("cluck")))),

 'clump-02': # ARG0:causal agent / ARG1:thing becoming clumped / ARG2:end state (the clump) [clump.xml]
   LexSem("V","clump",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("clump"),arg1,pp("into",arg2)))),

 'clump-03': # ARG0:clomper / ARG1:clomped / ARG2:location or path / ARG3:direction [clump.xml]
   LexSem("V","clump",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("clump"),arg1,pp("through",arg2),arg3))),

 'clunk-01': # ARG0:Agent causing clunking / ARG1:Thing making clunking sound [clunk.xml]
   LexSem("V","clunk",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("clunk"),arg1))),

 'cluster-01': # ARG0:clusterer, agent / ARG1:things clustered / ARG2:explicit mention of cluster [cluster.xml]
   LexSem("V","cluster",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cluster"),arg1,pp("around",arg2)))),

 'clutch-01': # ARG0:grasper, agent / ARG1:entity clutched [clutch.xml]
   LexSem("V","clutch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("clutch"),arg1))),

 'clutch-on-02': # ARG0:grasper, agent / ARG1:entity clutched [clutch.xml]
   LexSem("V","clutch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("clutch"),Adv("on"),arg1))),

 'clutter-01': # ARG0:agent of cluttering / ARG1:container, space / ARG2:random junk [clutter.xml]
   LexSem("V","clutter",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("clutter"),arg1,pp("with",arg2)))),

 'coach-01': # ARG0:leader, coach / ARG1:team / ARG2:sport, endeavor, purpose [coach.xml]
   LexSem("V","coach",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("coach"),arg1,pp("in",arg2)))),

 'coactivate-01': # ARG0:activator protein(s) / ARG1:entity now active [coactivate.xml]
   LexSem("V","coactivate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("coactivate"),arg1))),

 'coadminister-02': # ARG0:coadministrator, agent / ARG1:entities coadministered / ARG2:coadministered to/upon [administer.xml]
   LexSem("V","coadminister",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("coadminister"),pp("of",arg1),arg2))),

 'coagulate-01': # ARG0:cause of coagulation / ARG1:entity coagulated / ARG2:instrument or manner, if separate from arg 0 [coagulate.xml]
   LexSem("V","coagulate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("coagulate"),arg1,pp("by",arg2)))),

 'coal-01': # ARG0:agent or cause of transformation / ARG1:thing becomeing coal [coal.xml]
   LexSem("V","coal",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("coal"),arg1))),

 'coal-02': # ARG0:Agent, entity supplying the coal / ARG1:Vessel taking on coal / ARG2:the coal [coal.xml]
   LexSem("V","coal",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("coal"),arg1,pp("with",arg2)))),

 'coalesce-01': # ARG0:agent, mixer / ARG1:ingredient one / ARG2:ingredient two-1 / ARG3:end product [coalesce.xml]
   LexSem("V","coalesce",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("coalesce"),arg1,arg2,arg3))),

 'coarsen-01': # ARG0:causer of coarseness / ARG1:thing getting coarse / ARG2:instrument or manner if separate from arg 0 [coarsen.xml]
   LexSem("V","coarsen",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("coarsen"),arg1,pp("with",arg2)))),

 'coast-01': # ARG0:entity in motion / ARG1:path [coast.xml]
   LexSem("V","coast",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("coast"),pp("on",arg1)))),

 'coat-01': # ARG0:entity causing covering, agent / ARG1:covered / ARG2:covering, coat [coat.xml]
   LexSem("V","coat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("coat"),arg1,pp("with",arg2)))),

 'coauthor-01': # ARG0:one or all authors / ARG1:text authored / ARG2:additional authors [coauthor.xml]
   LexSem("V","co-author",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("co-author"),arg1,arg2))),

 'coax-01': # ARG0:coaxer / ARG1:induced agent / ARG2:induced action [coax.xml]
   LexSem("V","coax",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("coax"),arg1,pp("into",arg2)))),

 'cobble-01': # ARG0:builder / ARG1:built, creation, end state / ARG2:material, start state [cobble.xml]
   LexSem("V","cobble",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cobble"),arg1,arg2))),

 'cochair-01': # ARG0:Focus, first or plural mention of person/s serving as chair / ARG1:institution that arg0 chair/s / ARG2:Second chairperson when separate mention, arg0 chairs with whom? [cochair.xml]
   LexSem("V","co-chair",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("co-chair"),arg1,pp("with",arg2)))),

 'cock-01': # ARG0:setter at upward angle / ARG1:angled thing [cock.xml]
   LexSem("V","cock",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cock"),arg1))),

 'coculture-01': # ARG0:intentional agent of coculture (e.g. scientist) / ARG1:cocultured entities (e.g. cells) [coculture.xml]
   LexSem("V","coculture",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("coculture"),arg1))),

 'coddle-01': # ARG0:coddler / ARG1:coddled [coddle.xml]
   LexSem("V","coddle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("coddle"),arg1))),

 'coddle-02': # ARG0:cook / ARG1:food / ARG2:beneficiary [coddle.xml]
   LexSem("V","coddle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("coddle"),arg1,pp("for",arg2)))),

 'code-01': # ARG0:codemaker, agent / ARG1:message etc. [code.xml]
   LexSem("V","code",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("code"),arg1))),

 'code-02': # ARG0:programmer / ARG1:software [code.xml]
   LexSem("V","code",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("code"),arg1))),

 'code-101': # ARG1:Patient [code.xml]
   LexSem("V","code",[":ARG1"],lambda arg1:S(arg1,VP(V("code")))),

 'codify-01': # ARG0:arranger / ARG1:thing being codified / ARG2:end state [codify.xml]
   LexSem("V","codify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("codify"),arg1,pp("into",arg2)))),

 'coerce-01': # ARG0:persuasive entity, agent / ARG1:impelled person / ARG2:action or Result [coerce.xml]
   LexSem("V","coerce",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("coerce"),arg1,pp("into",arg2)))),

 'coevolve-01': # ARG1:first or all things changing / ARG2:end state / ARG3:start state / ARG4:other thing changed with, when separate mention [coevolve.xml]
   LexSem("V","co-evolve",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("co-evolve"),pp("into",arg2),arg3,arg4))),

 'coexist-01': # ARG1:first entity co-existing / ARG2:second entity co-existing [coexist.xml]
   LexSem("V","co-exist",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("co-exist"),pp("with",arg2)))),

 'coexpress-01': # ARG1:gene(s), expressor(s) / ARG2:protein(s), expressed material / ARG3:cell, organ, location [coexpress.xml]
   LexSem("V","coexpress",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("coexpress"),arg2,arg3))),

 'cofound-01': # ARG0:agent(s), co-founder(s) / ARG1:thing founded / ARG2:second co-founder if separate from ARG 0 [cofound.xml]
   LexSem("V","co-found",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("co-found"),arg1,arg2))),

 'cohabit-01': # ARG0:focus, first or plural resident mention / ARG1:place of residence / ARG2:second inhabitant, when separate mention [cohabit.xml]
   LexSem("V","cohabit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cohabit"),pp("in",arg1),arg2))),

 'cohere-01': # ARG0:agent, causer of coherence / ARG1:coherent bits [cohere.xml]
   LexSem("V","cohere",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cohere"),arg1))),

 'cohost-01': # ARG0:co-host(s) / ARG1:event hosted [cohost.xml]
   LexSem("V","cohost",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cohost"),arg1))),

 'coil-01': # ARG0:causer of coiling / ARG1:coiled thing / ARG2:secondary attribute, coiled around what [coil.xml]
   LexSem("V","coil",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("coil"),arg1,pp("around",arg2)))),

 'coil-up-02': # ARG1:coiled entity [coil.xml]
   LexSem("V","coil",[":ARG1"],lambda arg1:S(arg1,VP(V("coil"),Adv("up")))),

 'coimmunoprecipitate-01': # ARG0:intentional agent of coimmunoprecipitation (e.g. scientist) / ARG1:antigen(s) (e.g. protein) / ARG2:second chemical / ARG3:instrument, antibody / ARG4:coimmunoprecipitated from, solution [coimmunoprecipitate.xml]
   LexSem("V","coimmunoprecipitate",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("coimmunoprecipitate"),arg1,arg2,arg3,arg4))),

 'coin-01': # ARG0:coiner / ARG1:thing coined (rarely a coin) [coin.xml]
   LexSem("V","coin",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("coin"),arg1))),

 'coincide-01': # ARG1:first thing happening / ARG2:second thing, at the same time as what [coincide.xml]
   LexSem("V","coincide",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("coincide"),pp("with",arg2)))),

 'coldcream-01': # ARG0:applier / ARG1:applied area [coldcream.xml]
   LexSem("V","coldcream",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("coldcream"),arg1))),

 'collaborate-01': # ARG0:focussed party, agent / ARG1:second party / ARG2:shared task [collaborate.xml]
   LexSem("V","collaborate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("collaborate"),pp("with",arg1),pp("on",arg2)))),

 'collapse-01': # ARG0:agent, outside causer of collapse / ARG1:thing collapsing / ARG2:extent of collapse / ARG3:starting point / ARG4:ending point [collapse.xml]
   LexSem("V","collapse",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("collapse"),arg1,arg2,pp("from",arg3),pp("onto",arg4)))),

 'collapse-02': # ARG0:agent, outside causer of collapse / ARG1:thing collapsing / ARG2:extent of collapse / ARG3:starting point / ARG4:ending point [collapse.xml]
   LexSem("V","collapse",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("collapse"),arg1,arg2,arg3,pp("to",arg4)))),

 'collar-01': # ARG0:entity doing the apprehending / ARG1:person nabbed / ARG2:accusations, crimes, for what [collar.xml]
   LexSem("V","collar",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("collar"),arg1,pp("for",arg2)))),

 'collate-01': # ARG0:organizer / ARG1:thing organized / ARG2:end state, collated into what, if separate from arg 1 [collate.xml]
   LexSem("V","collate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("collate"),arg1,pp("into",arg2)))),

 'collect-01': # ARG0:agent, entity acquiring something / ARG1:thing acquired / ARG2:source / ARG3:more specific attribute of arg1 being collected / ARG4:benefactive [collect.xml]
   LexSem("V","collect",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("collect"),arg1,pp("from",arg2),arg3,pp("for",arg4)))),

 'collide-01': # ARG0:theme, thing in motion, 1st colliders or all colliders in one constituent / ARG1:thing hit, 2nd collider where separate mention / ARG2:Topic collided over in metaphorical case, cause of disagreement [collide.xml]
   LexSem("V","collide",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("collide"),pp("with",arg1),pp("over",arg2)))),

 'collude-01': # ARG0:focussed party, agent / ARG1:second party / ARG2:conspiracy [collude.xml]
   LexSem("V","collude",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("collude"),pp("with",arg1),arg2))),

 'colocalize-01': # ARG1:local entities / ARG2:common area (cell) [colocalize.xml]
   LexSem("V","colocalize",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("colocalize"),arg2))),

 'colonize-01': # ARG0:colonizer, imperial power / ARG1:territory colonized [colonize.xml]
   LexSem("V","colonize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("colonize"),arg1))),

 'color-01': # ARG0:causer of coloration / ARG1:thing with color / ARG2:the color itself [color.xml]
   LexSem("V","color",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("color"),arg1,arg2))),

 'color-in-02': # ARG0:colorer / ARG1:image/surface colored in / ARG2:the color [color.xml]
   LexSem("V","color",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("color"),Adv("in"),arg1,arg2))),

 'comb-01': # ARG0:searcher, agent / ARG1:area searched, combed through / ARG2:combed for [comb.xml]
   LexSem("V","comb",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("comb"),arg1,pp("for",arg2)))),

 'comb-02': # ARG0:comber, agent / ARG1:hair [comb.xml]
   LexSem("V","comb",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("comb"),arg1))),

 'combat-01': # ARG0:first fighter / ARG1:second fighter, if separate / ARG2:spoils [combat.xml]
   LexSem("V","combat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("combat"),arg1,pp("for",arg2)))),

 'combine-01': # ARG0:agent, mixer / ARG1:ingredient one / ARG2:ingredient two / ARG3:end product [combine.xml]
   LexSem("V","combine",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("combine"),arg1,pp("with",arg2),pp("into",arg3)))),

 'combust-01': # ARG0:agent/cause of combustion / ARG1:thing combusting / ARG2:instrument [combust.xml]
   LexSem("V","combust",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("combust"),arg1,pp("with",arg2)))),

 'come-01': # ARG1:entity in motion / 'comer' / ARG2:extent -- rare / ARG3:start point / ARG4:end point [come.xml]
   LexSem("V","come",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("come"),arg2,pp("from",arg3),pp("to",arg4)))),

 'come-02': # ARG0:pursuer / ARG1:goal [come.xml]
   LexSem("V","come",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("come"),pp("after",arg1)))),

 'come-03': # ARG1:thing (often state) arising / ARG2:source, basis on which arg1 comes to be  (not start point of motion!) [come.xml]
   LexSem("V","come",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("come"),pp("in",arg2)))),

 'come-04': # ARG1:object / ARG2:attribute on arg1 [come.xml]
   LexSem("V","come",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("come"),arg2))),

 'come-05': # ARG1:commodity / ARG2:buyer / ARG3:price [come.xml]
   LexSem("V","come",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("come"),arg2,arg3))),

 'come-12': # ARG1:topic [come.xml]
   LexSem("V","come",[":ARG1"],lambda arg1:S(arg1,VP(V("come")))),

 'come-16': # ARG1:thing(s) being counted / ARG2:sum, total, amount [come.xml]
   LexSem("V","come",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("come"),pp("to",arg2)))),

 'come-28': # ARG0:subject / ARG1:subsequent action [come.xml]
   LexSem("V","come",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("come"),arg1))),

 'come-about-06': # ARG1:object / ARG2:attribute on arg1 [come.xml]
   LexSem("V","come",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("come"),Adv("about"),arg2))),

 'come-across-15': # ARG1:thing coming across / ARG2:viewer / ARG3:attribute- come across how/as what [come.xml]
   LexSem("V","come",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("come"),Adv("over"),arg2,arg3))),

 'come-across-21': # ARG0:finder / ARG1:thing found [come.xml]
   LexSem("V","come",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("come"),Adv("across"),arg1))),

 'come-along-19': # ARG1:thing progressing [come.xml]
   LexSem("V","come",[":ARG1"],lambda arg1:S(arg1,VP(V("come"),Adv("along")))),

 'come-around-32': # ARG0:entity changing mind / ARG1:new idea / ARG2:old idea [come.xml]
   LexSem("V","come",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("come"),Adv("around"),arg1,arg2))),

 'come-by-20': # ARG0:acquirer / ARG1:acquired [come.xml]
   LexSem("V","come",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("come"),Adv("by"),arg1))),

 'come-down-22': # ARG1:patient / ARG2:illness [come.xml]
   LexSem("V","come",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("come"),Adv("down"),pp("with",arg2)))),

 'come-down-23': # ARG1:it, thing coming down / ARG2:person/summerization (what it comes down to) [come.xml]
   LexSem("V","come",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("come"),Adv("down"),pp("to",arg2)))),

 'come-forward-31': # ARG0:volunteer / ARG1:for what activity, cause [come.xml]
   LexSem("V","come",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("come"),Adv("forward"),pp("to",arg1)))),

 'come-in-07': # ARG1:thing being described / ARG2:state, attribute [come.xml]
   LexSem("V","come",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("come"),Adv("in"),arg2))),

 'come-off-33': # ARG1:Thing getting separated / ARG2:Separated from what [come.xml]
   LexSem("V","come",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("come"),Adv("off"),arg2))),

 'come-on-08': # ARG1:thing being turned on [come.xml]
   LexSem("V","come",[":ARG1"],lambda arg1:S(arg1,VP(V("come"),Adv("on")))),

 'come-on-25': # ARG1:entity who needs to get with the program (and maybe move) [come.xml]
   LexSem("V","come",[":ARG1"],lambda arg1:S(arg1,VP(V("come"),Adv("on")))),

 'come-on-29': # ARG1:thing progressing, coming on / ARG2:attribute of arg1 [come.xml]
   LexSem("V","come",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("come"),Adv("on"),arg2))),

 'come-out-09': # ARG0:agent, originator of arg1 / ARG1:thing appearing / ARG2:attribute of arg1 [come.xml]
   LexSem("V","come",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("come"),Adv("out"),arg1,pp("in",arg2)))),

 'come-out-10': # ARG0:person coming out / ARG1:the "closet" [come.xml]
   LexSem("V","come",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("come"),Adv("out"),pp("of",arg1)))),

 'come-through-17': # ARG0:fulfuller, agent / ARG1:plans,promises, etc [come.xml]
   LexSem("V","come",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("come"),Adv("through"),pp("on",arg1)))),

 'come-through-18': # ARG1:thing becoming apparent [come.xml]
   LexSem("V","come",[":ARG1"],lambda arg1:S(arg1,VP(V("come"),Adv("through")))),

 'come-to-27': # ARG1:entity regaining consciousness [come.xml]
   LexSem("V","come",[":ARG1"],lambda arg1:S(arg1,VP(V("come"),Adv("to")))),

 'come-up-11': # ARG0:deviser / ARG1:thing devised, brought forth, come up with [come.xml]
   LexSem("V","come",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("come"),Adv("up"),pp("with",arg1)))),

 'come-up-13': # ARG1:thing arising / ARG2:attribute of arg1 [come.xml]
   LexSem("V","come",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("come"),Adv("up"),pp("for",arg2)))),

 'come-upon-26': # ARG0:finder / ARG1:thing found [come.xml]
   LexSem("V","come",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("come"),Adv("upon"),arg1))),

 'come_to_mind-09': # ARG0:causal agent / ARG1:thinker / ARG2:thought [mind.xml]
   LexSem("V","bring",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bring"),arg1,arg2))),

 'comfort-01': # ARG0:comforter / ARG1:patient, comforted / ARG2:instrument or manner [comfort.xml]
   LexSem("V","comfort",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("comfort"),arg1,pp("by",arg2)))),

 'command-01': # ARG0:getter / ARG1:gotten [command.xml]
   LexSem("V","command",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("command"),arg1))),

 'command-02': # ARG0:commander / ARG1:impelled agent / ARG2:impelled action [command.xml]
   LexSem("V","command",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("command"),arg1,pp("to",arg2)))),

 'commandeer-01': # ARG0:agent, entity acquiring something / ARG1:thing acquired / ARG2:acquired-from [commandeer.xml]
   LexSem("V","commandeer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("commandeer"),arg1,arg2))),

 'commemorate-01': # ARG0:agent, honorer / ARG1:thing remembered / ARG2:memorial, how commemorated [commemorate.xml]
   LexSem("V","commemorate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("commemorate"),arg1,arg2))),

 'commence-01': # ARG0:beginner, Agent / ARG1:Theme(-Creation) / ARG2:Instrument [commence.xml]
   LexSem("V","commence",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("commence"),arg1,arg2))),

 'commend-01': # ARG0:entity giving praise / ARG1:entity being praised / ARG2:praised for what (if in addition to arg1) [commend.xml]
   LexSem("V","commend",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("commend"),arg1,pp("for",arg2)))),

 'comment-01': # ARG0:commenter / ARG1:utterance / ARG2:hearer / ARG3:attributive (comment on/about what) [comment.xml]
   LexSem("V","comment",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("comment"),arg1,pp("to",arg2),pp("of",arg3)))),

 'commercialize-01': # ARG0:causer, agent / ARG1:thing commercialized / ARG2:instrument [commercialize.xml]
   LexSem("V","commercialize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("commercialize"),arg1,arg2))),

 'commingle-01': # ARG0:agent, mixer / ARG1:ingredient one / ARG2:ingredient two / ARG3:end product [commingle.xml]
   LexSem("V","commingle",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("commingle"),arg1,arg2,arg3))),

 'commiserate-01': # ARG0:focussed party, agent / ARG1:second party / ARG2:shared subject of misery [commiserate.xml]
   LexSem("V","commiserate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("commiserate"),pp("with",arg1),arg2))),

 'commission-01': # ARG0:granter, agent / ARG1:task / ARG2:recepient [commission.xml]
   LexSem("V","commission",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("commission"),arg1,arg2))),

 'commit-01': # ARG0:causal agent / ARG1:entity committed / ARG2:committed to [commit.xml]
   LexSem("V","commit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("commit"),arg1,pp("to",arg2)))),

 'commit-02': # ARG0:criminal / ARG1:crime [commit.xml]
   LexSem("V","commit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("commit"),arg1))),

 'commodify-01': # ARG0:causer, agent / ARG1:thing commodified / ARG2:instrument, if separate from arg 0 [commodify.xml]
   LexSem("V","commodify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("commodify"),arg1,pp("with",arg2)))),

 'communicate-01': # ARG0:first (or all) communicator(s) / ARG1:utterance / ARG2:other communicator(s), communicated with or to [communicate.xml]
   LexSem("V","communicate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("communicate"),arg1,arg2))),

 'commute-01': # ARG0:commuter / ARG1:one (or both) location(s), start point / ARG2:other location, destination [commute.xml]
   LexSem("V","commute",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("commute"),pp("from",arg1),pp("to",arg2)))),

 'commute-02': # ARG0:judge / ARG1:old sentence / ARG2:new sentence [commute.xml]
   LexSem("V","commute",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("commute"),arg1,pp("to",arg2)))),

 'compact-01': # ARG0:causer of compaction / ARG1:thing getting compacted [compact.xml]
   LexSem("V","compact",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("compact"),arg1))),

 'compare-01': # ARG0:entity making comparison / ARG1:first item in comparison / ARG2:second item in comparison, usually prepositional [compare.xml]
   LexSem("V","compare",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("compare"),arg1,pp("with",arg2)))),

 'compel-01': # ARG0:causer / ARG1:impelled agent / ARG2:impelled action [compel.xml]
   LexSem("V","compel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("compel"),arg1,pp("to",arg2)))),

 'compensate-01': # ARG0:payer or buyer / ARG1:thing bought or paid for, compensated for what? / ARG2:seller or person being paid / ARG3:price paid (unlikely) [compensate.xml]
   LexSem("V","compensate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("compensate"),pp("for",arg1),arg2,arg3))),

 'compete-01': # ARG0:competitor / ARG1:opponent / ARG2:prize / ARG3:subject matter of the competition [compete.xml]
   LexSem("V","compete",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("compete"),pp("with",arg1),pp("for",arg2),arg3))),

 'compete-02': # ARG0:competitor / ARG1:opponent / ARG3:domain of the competition [compete.xml]
   LexSem("V","compete",[":ARG0",":ARG1",":ARG3"],lambda arg0,arg1,arg3:S(arg0,VP(V("compete"),pp("with",arg1),pp("in",arg3)))),

 'compile-01': # ARG0:agent, entity acquiring something / ARG1:thing acquired / ARG4:benefactive [compile.xml]
   LexSem("V","compile",[":ARG0",":ARG1",":ARG4"],lambda arg0,arg1,arg4:S(arg0,VP(V("compile"),arg1,pp("for",arg4)))),

 'complain-01': # ARG0:complainer / ARG1:cause, complain of or about / ARG2:hearer, complain to [complain.xml]
   LexSem("V","complain",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("complain"),pp("about",arg1),pp("to",arg2)))),

 'complement-01': # ARG1:thing complementing / ARG2:thing complemented [complement.xml]
   LexSem("V","complement",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("complement"),arg2))),

 'complete-01': # ARG0:finisher / ARG1:task, action coming to an end [complete.xml]
   LexSem("V","complete",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("complete"),arg1))),

 'complicate-01': # ARG0:agent, entity causing something to become complicated / ARG1:thing becoming complicated / ARG2:benefactive [complicate.xml]
   LexSem("V","complicate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("complicate"),arg1,pp("for",arg2)))),

 'compliment-01': # ARG0:giver of compliment / ARG1:recipient / ARG2:reason [compliment.xml]
   LexSem("V","compliment",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("compliment"),arg1,pp("on",arg2)))),

 'comply-01': # ARG0:complier / ARG1:complied-with (ie, rule) [comply.xml]
   LexSem("V","comply",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("comply"),pp("with",arg1)))),

 'compose-01': # ARG0:causer of group, agent / ARG1:entity composed / ARG2:composed of [compose.xml]
   LexSem("V","compose",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("compose"),arg1,pp("of",arg2)))),

 'compose-02': # ARG0:artist, agent / ARG1:entity composed / ARG2:beneficiary [compose.xml]
   LexSem("V","compose",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("compose"),arg1,pp("for",arg2)))),

 'compost-01': # ARG0:composter / ARG1:organic waste composted [compost.xml]
   LexSem("V","compost",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("compost"),arg1))),

 'compound-01': # ARG0:increaser, agent / ARG1:thing increasing, theme [compound.xml]
   LexSem("V","compound",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("compound"),arg1))),

 'comprehend-01': # ARG0:UNDERSTANDER / ARG1:UNDERSTOOD [comprehend.xml]
   LexSem("V","comprehend",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("comprehend"),arg1))),

 'compress-01': # ARG0:compressor, agent / ARG1:entity compressed / ARG2:entity compressed into [compress.xml]
   LexSem("V","compress",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("compress"),arg1,pp("to",arg2)))),

 'comprise-01': # ARG1:group / ARG2:parts or members [comprise.xml]
   LexSem("V","comprise",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("comprise"),arg2))),

 'compromise-01': # ARG0:agreer / ARG1:proposition / ARG2:other entity agreeing [compromise.xml]
   LexSem("V","compromise",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("compromise"),pp("on",arg1),pp("with",arg2)))),

 'compromise-02': # ARG0:causer of loss / ARG1:thing losing security [compromise.xml]
   LexSem("V","compromise",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("compromise"),arg1))),

 'compute-01': # ARG0:calculator, agent / ARG1:entity calculated / ARG2:value [compute.xml]
   LexSem("V","compute",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("compute"),arg1,pp("to",arg2)))),

 'computerize-01': # ARG0:causer, agent / ARG1:thing now working on computer [computerize.xml]
   LexSem("V","computerize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("computerize"),arg1))),

 'con-01': # ARG0:con artist / ARG1:victim [con.xml]
   LexSem("V","con",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("con"),arg1))),

 'con-02': # ARG0:con artist / ARG1:ill-gotten booty / ARG2:victim [con.xml]
   LexSem("V","con",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("con"),arg1,arg2))),

 'con-03': # ARG0:con artist / ARG1:induced agent / ARG2:induced action [con.xml]
   LexSem("V","con",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("con"),arg1,pp("into",arg2)))),

 'concatenate-01': # ARG0:causer of connection, agent / ARG1:first (or all) thing(s) fastened (together) / ARG2:additional thing(s), destination / ARG3:fastener, instrument [concatenate.xml]
   LexSem("V","concatenate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("concatenate"),arg1,pp("to",arg2),arg3))),

 'conceal-01': # ARG0:agent, concealer / ARG1:thing hidden / ARG2:seeker [conceal.xml]
   LexSem("V","conceal",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("conceal"),arg1,pp("from",arg2)))),

 'concede-01': # ARG0:entity admitting/giving something / ARG1:thing admitted or given / ARG2:recipient or listener, admitted or given to [concede.xml]
   LexSem("V","concede",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("concede"),arg1,pp("to",arg2)))),

 'concede-02': # ARG0:Loser / ARG1:Contest lost / ARG2:Winner, conceded to whom? [concede.xml]
   LexSem("V","concede",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("concede"),arg1,pp("to",arg2)))),

 'concede-03': # ARG0:Giver / ARG1:Thing given / ARG2:Given to whom? Recipient [concede.xml]
   LexSem("V","concede",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("concede"),arg1,pp("to",arg2)))),

 'conceive-01': # ARG0:conceiver, thinker / ARG1:thought / ARG2:attribute [conceive.xml]
   LexSem("V","conceive",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("conceive"),arg1,pp("as",arg2)))),

 'conceive-02': # ARG0:parent(s) / ARG1:baby [conceive.xml]
   LexSem("V","conceive",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("conceive"),arg1))),

 'concentrate-01': # ARG0:agent, contrentrater / ARG1:contrentrated-on / ARG2:thing contrentrated, if separate from agent [concentrate.xml]
   LexSem("V","concentrate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("concentrate"),pp("on",arg1),arg2))),

 'concentrate-02': # ARG0:causer / ARG1:liquid [concentrate.xml]
   LexSem("V","concentrate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("concentrate"),arg1))),

 'concern-01': # ARG0:causer of concern / ARG1:worried entity / ARG2:instrument, if separate from arg0 [concern.xml]
   LexSem("V","concern",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("concern"),arg1,pp("with",arg2)))),

 'concern-02': # ARG0:entity dealing with something / ARG1:thing dealt with [concern.xml]
   LexSem("V","concern",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("concern"),arg1))),

 'conciliate-01': # ARG0:cause of conciliation, agent / ARG1:entity becoming agreeable / ARG2:instrument, if separate from agent [conciliate.xml]
   LexSem("V","conciliate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("conciliate"),arg1,pp("with",arg2)))),

 'conclude-01': # ARG0:decider / ARG1:decision made / ARG2:question answered / ARG3:evidence [conclude.xml]
   LexSem("V","conclude",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("conclude"),arg1,pp("on",arg2),arg3))),

 'conclude-02': # ARG0:Intentional agent / ARG1:Thing ending / ARG2:Explicit instrument, thing ended with [conclude.xml]
   LexSem("V","conclude",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("conclude"),arg1,pp("with",arg2)))),

 'concoct-01': # ARG0:creator / ARG1:thing created / ARG2:source / ARG3:benefactive / ARG4:attribute, secondary predication [concoct.xml]
   LexSem("V","concoct",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("concoct"),arg1,pp("from",arg2),arg3,arg4))),

 'concrete-over-01': # ARG0:agent, concrete layer / ARG1:thing now covered in concrete [concrete.xml]
   LexSem("V","concrete",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("concrete"),Adv("over"),arg1))),

 'concur-01': # ARG0:agreer(s), agent(s) / ARG1:thing concurred (with) [concur.xml]
   LexSem("V","concur",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("concur"),pp("with",arg1)))),

 'condemn-01': # ARG0:condemner / ARG1:condemned / ARG2:grounds for condemnation, condemned as / ARG3:destination [condemn.xml]
   LexSem("V","condemn",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("condemn"),arg1,pp("as",arg2),pp("to",arg3)))),

 'condense-01': # ARG0:agent, condenser / ARG1:patient, entity being compacted / ARG2:instrument [condense.xml]
   LexSem("V","condense",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("condense"),arg1,pp("with",arg2)))),

 'condescend-01': # ARG0:agent, person condescending / ARG1:level or action condescended to [condescend.xml]
   LexSem("V","condescend",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("condescend"),pp("to",arg1)))),

 'condition-01': # ARG0:causer of dependence, agent / ARG1:entity made dependent / ARG2:dependent on [condition.xml]
   LexSem("V","condition",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("condition"),arg1,pp("on",arg2)))),

 'condition-02': # ARG0:causer of adaptation, agent / ARG1:entity adapted / ARG2:adapted to [condition.xml]
   LexSem("V","condition",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("condition"),arg1,arg2))),

 'condone-01': # ARG0:excuser, agent / ARG1:thing condoned [condone.xml]
   LexSem("V","condone",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("condone"),arg1))),

 'conduct-01': # ARG0:conductor / ARG1:thing led [conduct.xml]
   LexSem("V","conduct",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("conduct"),arg1))),

 'conduct-02': # ARG0:agent / ARG1:manner [conduct.xml]
   LexSem("V","conduct",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("conduct"),arg1))),

 'conduct-03': # ARG1:transmitter / ARG2:transmitted [conduct.xml]
   LexSem("V","conduct",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("conduct"),arg2))),

 'conduct-LV': #  [conduct.xml]
   LexSem("V","conduct",[],lambda :S(VP(V("conduct")))),

 'cone-down-101': # ARG0:X-ray technician / ARG1:Machine [cone.xml]
   LexSem("V","cone",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cone"),Adv("down"),arg1))),

 'cone_down-101': # ARG0:X-ray technician / ARG1:Machine [cone.xml]
   LexSem("V","cone-down",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cone-down"),arg1))),

 'confabulate-01': # ARG0:Speakers or first speaking partner / ARG1:Second speaking partner / ARG2:Confabulated about or on [confabulate.xml]
   LexSem("V","confabulate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("confabulate"),pp("with",arg1),pp("on",arg2)))),

 'confabulate-02': # ARG0:Confabulator / ARG1:Memory or thing changed [confabulate.xml]
   LexSem("V","confabulate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("confabulate"),arg1))),

 'confederate-01': # ARG0:causer / ARG1:first thing united / ARG2:second thing, united with what [confederate.xml]
   LexSem("V","confederate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("confederate"),arg1,pp("with",arg2)))),

 'confer-01': # ARG0:one party / ARG1:other party [confer.xml]
   LexSem("V","confer",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("confer"),pp("with",arg1)))),

 'confer-02': # ARG0:giver / ARG1:gift / ARG2:given to [confer.xml]
   LexSem("V","confer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("confer"),arg1,pp("on",arg2)))),

 'confess-01': # ARG0:speaker / ARG1:utterance / ARG2:hearer [confess.xml]
   LexSem("V","confess",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("confess"),arg1,pp("to",arg2)))),

 'confide-01': # ARG0:speaker, agent / ARG1:utterance / ARG2:person confided to [confide.xml]
   LexSem("V","confide",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("confide"),arg1,pp("to",arg2)))),

 'configure-01': # ARG0:agent, builder / ARG1:construction, item/material being configured / ARG2:start state, material from which arg1 is configured / ARG3:benefactive, configured for whom? / ARG4:end state, product of configuration when separate mention from arg 1 [configure.xml]
   LexSem("V","configure",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("configure"),arg1,arg2,arg3,arg4))),

 'confine-01': # ARG0:agent, confiner / ARG1:entity confined, restricted / ARG2:confined-to [confine.xml]
   LexSem("V","confine",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("confine"),arg1,pp("to",arg2)))),

 'confirm-01': # ARG0:confirmer / ARG1:thing confirmed, statement or proposition / ARG2:benefactive, hearer [confirm.xml]
   LexSem("V","confirm",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("confirm"),arg1,pp("to",arg2)))),

 'confiscate-01': # ARG0:Taker / ARG1:thing taken / ARG2:entity taken from [confiscate.xml]
   LexSem("V","confiscate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("confiscate"),arg1,pp("from",arg2)))),

 'conflict-01': # ARG0:agentive clasher, or all clashers in one constituent / ARG1:entity clashed with / ARG2:entity clashed over [conflict.xml]
   LexSem("V","conflict",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("conflict"),pp("with",arg1),pp("over",arg2)))),

 'conform-01': # ARG0:causer of similarity / ARG1:entity conforming / ARG2:entity conforming to [conform.xml]
   LexSem("V","conform",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("conform"),arg1,pp("to",arg2)))),

 'confound-01': # ARG0:cause, confounder / ARG1:experiencer, entity confused / ARG2:instrument [confound.xml]
   LexSem("V","confound",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("confound"),arg1,pp("with",arg2)))),

 'confront-01': # ARG0:confrontational entity, agent / ARG1:entity confronted / ARG2:confronted with [confront.xml]
   LexSem("V","confront",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("confront"),arg1,pp("with",arg2)))),

 'confuse-01': # ARG0:agentive cause of confusion / ARG1:entity experiencing confusion / ARG2:confused about or over what? (first or all things) / ARG3:second thing, confused arg2 with what [confuse.xml]
   LexSem("V","confuse",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("confuse"),arg1,pp("about",arg2),pp("with",arg3)))),

 'conga-01': # ARG0:Dancer / ARG1:Feet, partner, etc. made to dance/move [conga.xml]
   LexSem("V","conga",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("conga"),arg1))),

 'congeal-01': # ARG0:cause of solidification / ARG1:entity congealed / ARG2:instrument of congealing when separate from arg 0 / ARG3:start material, when separate mention from arg 1 (unlikely to occur) / ARG4:end state, congealed into what? when separate mention from arg 1 [congeal.xml]
   LexSem("V","congeal",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("congeal"),arg1,pp("with",arg2),arg3,pp("into",arg4)))),

 'congest-01': # ARG0:causal agent / ARG1:passage / ARG2:substance blocking passage, instrument [congest.xml]
   LexSem("V","congest",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("congest"),arg1,pp("with",arg2)))),

 'congratulate-01': # ARG0:expresser, agent / ARG1:person congratulated / ARG2:achievement [congratulate.xml]
   LexSem("V","congratulate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("congratulate"),arg1,pp("on",arg2)))),

 'congregate-01': # ARG0:agent or causer / ARG1:entity congregated [congregate.xml]
   LexSem("V","congregate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("congregate"),arg1))),

 'conjecture-01': # ARG0:conjecturer / ARG1:belief [conjecture.xml]
   LexSem("V","conjecture",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("conjecture"),arg1))),

 'conjoin-01': # ARG0:causer / ARG1:one half / ARG2:second half [conjoin.xml]
   LexSem("V","conjoin",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("conjoin"),arg1,pp("with",arg2)))),

 'conjugate-01': # ARG0:Language student, conjugator / ARG1:verb, word inflected / ARG2:inflection, arg1 is conjugated into the...? [conjugate.xml]
   LexSem("V","conjugate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("conjugate"),arg1,pp("to",arg2)))),

 'conjugate-02': # ARG0:intentional agent of conjugation (e.g. scientist) / ARG1:first compound / ARG2:second compound / ARG3:resulting conjugate [conjugate.xml]
   LexSem("V","conjugate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("conjugate"),arg1,pp("with",arg2),arg3))),

 'conjure-up-01': # ARG0:creator, magician / ARG1:creation [conjure.xml]
   LexSem("V","conjure",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("conjure"),Adv("up"),arg1))),

 'conk-01': # ARG0:hitter / ARG1:victim [conk.xml]
   LexSem("V","conk",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("conk"),arg1))),

 'connect-01': # ARG0:agent, entity doing the tying / ARG1:first thing being tied / ARG2:second thing, tied to what / ARG3:instrument, string [connect.xml]
   LexSem("V","connect",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("connect"),arg1,pp("with",arg2),pp("with",arg3)))),

 'connote-01': # ARG0:entity implying / ARG1:entity implied [connote.xml]
   LexSem("V","connote",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("connote"),arg1))),

 'conquer-01': # ARG0:conquering hero, agent / ARG1:entity conquered, spoils (if unclear whether the spoils or the loser, use this arg) / ARG2:defeated entity; loser; former owner of arg1 [conquer.xml]
   LexSem("V","conquer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("conquer"),arg1,pp("from",arg2)))),

 'consecrate-01': # ARG0:Agent, appointer / ARG1:Person being ordained, appointed / ARG2:Position, clerical post appointed to [consecrate.xml]
   LexSem("V","consecrate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("consecrate"),arg1,arg2))),

 'consecrate-02': # ARG0:Sacrificer, person giving to a cause / ARG1:Thing given, often reflexive / ARG2:Recipient, religion or cause [consecrate.xml]
   LexSem("V","consecrate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("consecrate"),arg1,pp("to",arg2)))),

 'consecrate-03': # ARG0:entity dedicating the object / ARG1:object dedicated, made holy [consecrate.xml]
   LexSem("V","consecrate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("consecrate"),arg1))),

 'consent-01': # ARG0:agreer, consenter / ARG1:thing consented to [consent.xml]
   LexSem("V","consent",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("consent"),pp("to",arg1)))),

 'consequence-02': # ARG0:punisher / ARG1:punished / ARG2:punishment / ARG3:crime [consequential.xml]
   LexSem("V","consequence",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("consequence"),arg1,arg2,pp("for",arg3)))),

 'conserve-01': # ARG0:causer / ARG1:entity conserved [conserve.xml]
   LexSem("V","conserve",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("conserve"),arg1))),

 'consider-01': # ARG0:thinker / ARG1:belief [consider.xml]
   LexSem("V","consider",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("consider"),arg1))),

 'consider-02': # ARG0:agent / ARG1:entity under consideration / ARG2:for what/secondary predicate [consider.xml]
   LexSem("V","consider",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("consider"),arg1,pp("for",arg2)))),

 'consign-01': # ARG0:sender, agent / ARG1:trash / ARG2:lesser status [consign.xml]
   LexSem("V","consign",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("consign"),arg1,pp("to",arg2)))),

 'consist-01': # ARG1:whole / ARG2:parts [consist.xml]
   LexSem("V","consist",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("consist"),pp("of",arg2)))),

 'console-01': # ARG0:consoler / ARG1:consoled / ARG2:consolation, instrument (if separate from arg0) [console.xml]
   LexSem("V","console",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("console"),arg1,pp("with",arg2)))),

 'consolidate-01': # ARG0:mixer, integrater / ARG1:figure, theme, topic / ARG2:ground (into X) / ARG3:explicit source [consolidate.xml]
   LexSem("V","consolidate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("consolidate"),arg1,pp("into",arg2),pp("from",arg3)))),

 'consort-01': # ARG0:person whose behavior we care about / ARG1:entity consorted with [consort.xml]
   LexSem("V","consort",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("consort"),pp("with",arg1)))),

 'conspire-01': # ARG0:conspirator / ARG1:job, project / ARG2:co-conspirator [conspire.xml]
   LexSem("V","conspire",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("conspire"),pp("to",arg1),pp("with",arg2)))),

 'constellate-01': # ARG0:causal agent / ARG1:destination, place speckled with stars / ARG2:stars [constellate.xml]
   LexSem("V","constellate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("constellate"),arg1,arg2))),

 'constellate-02': # ARG0:agent / ARG1:things grouped together / ARG2:the group / ARG3:constellated as what [constellate.xml]
   LexSem("V","constellate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("constellate"),arg1,pp("into",arg2),pp("as",arg3)))),

 'constipate-01': # ARG0:causer of constipation / ARG1:experiencer of constipation / ARG2:constipated with what? [constipate.xml]
   LexSem("V","constipate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("constipate"),arg1,arg2))),

 'constitute-01': # ARG0:components (almost always plural) / ARG1:whole [constitute.xml]
   LexSem("V","constitute",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("constitute"),arg1))),

 'constitutionalize-03': # ARG0:legistlative body, agent / ARG1:newly constitutional thing [constitute.xml]
   LexSem("V","constitutionalize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("constitutionalize"),arg1))),

 'constitutionalize-04': # ARG0:Person going for a walk [constitute.xml]
   LexSem("V","constitutionalize",[":ARG0"],lambda arg0:S(arg0,VP(V("constitutionalize")))),

 'constitutionalize-05': # ARG0:group providing constitution / ARG1:group receiving constitution [constitute.xml]
   LexSem("V","constitutionalize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("constitutionalize"),arg1))),

 'constrain-01': # ARG0:preventer, hinderer, Agent / ARG1:Theme (action or object being prevented) / ARG2:secondary predication or action / ARG3:instrument [constrain.xml]
   LexSem("V","constrain",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("constrain"),arg1,pp("from",arg2),arg3))),

 'constrict-01': # ARG0:causal agent / ARG1:thing becoming narrower / ARG2:EXT, amount narrowed by / ARG3:start point / ARG4:end point [constrict.xml]
   LexSem("V","constrict",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("constrict"),arg1,arg2,arg3,arg4))),

 'constringe-01': # ARG0:causal agent / ARG1:thing becoming narrower / ARG2:EXT, amount narrowed by / ARG3:start point / ARG4:end point [constringe.xml]
   LexSem("V","constringe",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("constringe"),arg1,arg2,arg3,pp("to",arg4)))),

 'construct-01': # ARG0:builder / ARG1:construction / ARG2:material, start state / ARG4:end state of arg1 [construct.xml]
   LexSem("V","construct",[":ARG0",":ARG1",":ARG2",":ARG4"],lambda arg0,arg1,arg2,arg4:S(arg0,VP(V("construct"),arg1,arg2,pp("into",arg4)))),

 'construe-01': # ARG0:interpreter, agent / ARG1:entity construed [construe.xml]
   LexSem("V","construe",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("construe"),arg1))),

 'consult-01': # ARG0:consulter / ARG1:consulted with / ARG2:in regards to... [consult.xml]
   LexSem("V","consult",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("consult"),arg1,pp("about",arg2)))),

 'consume-01': # ARG0:consumer / ARG1:consumed [consume.xml]
   LexSem("V","consume",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("consume"),arg1))),

 'consummate-01': # ARG0:entity/entities completing something / ARG1:thing consumated [consummate.xml]
   LexSem("V","consummate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("consummate"),arg1))),

 'contact-01': # ARG0:contactor, agent / ARG1:entity contacted [contact.xml]
   LexSem("V","contact",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("contact"),arg1))),

 'contain-01': # ARG0:container / ARG1:contents [contain.xml]
   LexSem("V","contain",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("contain"),arg1))),

 'contain-02': # ARG0:entity restraining arg1 / ARG1:thing being restrained, halted [contain.xml]
   LexSem("V","contain",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("contain"),arg1))),

 'contaminate-01': # ARG0:causer of contamination / ARG1:thing becoming contaminated / ARG2:contaminant [contaminate.xml]
   LexSem("V","contaminate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("contaminate"),arg1,pp("with",arg2)))),

 'contemplate-01': # ARG0:thinker / ARG1:thought / ARG2:attribute [contemplate.xml]
   LexSem("V","contemplate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("contemplate"),arg1,pp("as",arg2)))),

 'contemporize-01': # ARG0:agent / ARG1:thing stuck in the past [contemporize.xml]
   LexSem("V","contemporize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("contemporize"),arg1))),

 'contend-01': # ARG0:agent, entity uttering a belief / ARG1:contension, belief / ARG2:hearer [contend.xml]
   LexSem("V","contend",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("contend"),arg1,arg2))),

 'contend-02': # ARG0:contender / ARG1:thing dealt with [contend.xml]
   LexSem("V","contend",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("contend"),pp("with",arg1)))),

 'content-01': # ARG0:causer of contentment / ARG1:contented entity, us REC / ARG2:with what, how, if in addition to arg0 [content.xml]
   LexSem("V","content",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("content"),arg1,pp("with",arg2)))),

 'contest-01': # ARG0:challenger / ARG1:challenged [contest.xml]
   LexSem("V","contest",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("contest"),arg1))),

 'contextualize-01': # ARG0:cause of contextualization, agent / ARG1:entity now in context / ARG2:instrument or manner if separate from arg 0 [contextualize.xml]
   LexSem("V","contextualize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("contextualize"),arg1,arg2))),

 'continue-01': # ARG0:causer of continuation / ARG1:thing continuing [continue.xml]
   LexSem("V","continue",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("continue"),arg1))),

 'continue-02': # ARG0:sayer / ARG1:utterance / ARG2:hearer / ARG3:attributive [continue.xml]
   LexSem("V","continue",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("continue"),arg1,pp("to",arg2),pp("about",arg3)))),

 'contort-01': # ARG0:causer of contortion / ARG1:material contorted / ARG2:resulting shape that arg1 is contorted into [contort.xml]
   LexSem("V","contort",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("contort"),arg1,pp("into",arg2)))),

 'contract-01': # ARG1:thing getting smaller / ARG2:EXT / ARG3:start point / ARG4:end point [contract.xml]
   LexSem("V","contract",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("contract"),arg2,pp("from",arg3),pp("to",arg4)))),

 'contract-02': # ARG0:causer of contract / ARG1:reason, purpose / ARG2:contracted with [contract.xml]
   LexSem("V","contract",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("contract"),pp("to",arg1),pp("with",arg2)))),

 'contract-04': # ARG1:sick person, patient / ARG2:disease / ARG3:source of disease [contract.xml]
   LexSem("V","contract",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("contract"),arg2,pp("from",arg3)))),

 'contract-out-03': # ARG0:causer of contract / ARG1:reason, purpose / ARG2:contract out with/to whom? [contract.xml]
   LexSem("V","contract",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("contract"),Adv("out"),arg1,pp("to",arg2)))),

 'contradict-01': # ARG0:entity contradicting / ARG1:entity denied or opposed to [contradict.xml]
   LexSem("V","contradict",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("contradict"),arg1))),

 'contraindicate-101': # ARG1:contraindicating item/symptom/situation / ARG2:contraindicated item/treatment/action/medication [contraindicate.xml]
   LexSem("V","contraindicate",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("contraindicate"),arg2))),

 'contrast-01': # ARG0:entity making comparison / ARG1:first item in comparison / ARG2:second item in comparison, usually prepositional [contrast.xml]
   LexSem("V","contrast",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("contrast"),arg1,pp("with",arg2)))),

 'contravene-01': # ARG0:breaker of rules / ARG1:rules [contravene.xml]
   LexSem("V","contravene",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("contravene"),arg1))),

 'contribute-01': # ARG0:giver / ARG1:thing given / ARG2:entity given to [contribute.xml]
   LexSem("V","contribute",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("contribute"),arg1,pp("to",arg2)))),

 'contrive-01': # ARG0:Planner, contriver / ARG1:Action or event planned, caused [contrive.xml]
   LexSem("V","contrive",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("contrive"),pp("to",arg1)))),

 'contrive-02': # ARG0:inventor / ARG1:thing invented / ARG2:source material, contrived from what? / ARG3:benefactive, contrived for whom? [contrive.xml]
   LexSem("V","contrive",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("contrive"),arg1,arg2,pp("for",arg3)))),

 'control-01': # ARG0:controller / ARG1:controlled / ARG2:instrumental, controlled with [control.xml]
   LexSem("V","control",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("control"),pp("about",arg1),pp("with",arg2)))),

 'convene-01': # ARG0:agent, entity calling the meeting / ARG1:theme, the meeting itself [convene.xml]
   LexSem("V","convene",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("convene"),arg1))),

 'converge-01': # ARG0:first (or all, in plural mention) things converging / ARG1:Other converger, converged-with / ARG2:Thing converged-on, often a topic of agreement [converge.xml]
   LexSem("V","converge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("converge"),pp("with",arg1),pp("on",arg2)))),

 'converse-01': # ARG0:talker / ARG1:subject or language / ARG2:hearer [converse.xml]
   LexSem("V","converse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("converse"),pp("in",arg1),pp("with",arg2)))),

 'convert-01': # ARG0:causer of transformation / ARG1:thing changing / ARG2:end state / ARG3:start state [convert.xml]
   LexSem("V","convert",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("convert"),arg1,pp("to",arg2),pp("from",arg3)))),

 'convey-01': # ARG0:sender, speaker / ARG1:thing sent, utterance / ARG2:recipient, hearer [convey.xml]
   LexSem("V","convey",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("convey"),arg1,pp("to",arg2)))),

 'convict-01': # ARG0:judge, jury, agent / ARG1:person convicted / ARG2:convicted of [convict.xml]
   LexSem("V","convict",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("convict"),arg1,pp("of",arg2)))),

 'convince-01': # ARG0:convincer / ARG1:impelled agent / ARG2:impelled action/belief [convince.xml]
   LexSem("V","convince",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("convince"),arg1,pp("to",arg2)))),

 'convoke-01': # ARG0:agent, entity calling the meeting / ARG1:theme, meeting or those summoned to be part of the meeting [convoke.xml]
   LexSem("V","convoke",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("convoke"),arg1))),

 'convolute-01': # ARG1:complicated thing [convolute.xml]
   LexSem("V","convolute",[":ARG1"],lambda arg1:S(arg1,VP(V("convolute")))),

 'convulse-01': # ARG0:cause of convulsion / ARG1:entity convulsing [convulse.xml]
   LexSem("V","convulse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("convulse"),arg1))),

 'coo-01': # ARG0:cooer (dove, perhaps) / ARG1:utterance / ARG2:listener, cooed-to [coo.xml]
   LexSem("V","coo",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("coo"),arg1,arg2))),

 'cook-01': # ARG0:cook, agent / ARG1:food [cook.xml]
   LexSem("V","cook",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cook"),arg1))),

 'cook-02': # ARG1:event / ARG2:cooking with [cook.xml]
   LexSem("V","cook",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("cook"),pp("with",arg2)))),

 'cook-up-03': # ARG0:fabricator, agent / ARG1:thing cooked up [cook.xml]
   LexSem("V","cook",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cook"),Adv("up"),arg1))),

 'cool-01': # ARG0:person doing the cooling / ARG1:thing cooling [cool.xml]
   LexSem("V","cool",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cool"),arg1))),

 'cool-down-02': # ARG0:person doing the cooling / ARG1:thing cooling [cool.xml]
   LexSem("V","cool",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cool"),Adv("down"),arg1))),

 'cool-off-03': # ARG0:person doing the cooling / ARG1:thing cooling / ARG3:start point [cool.xml]
   LexSem("V","cool",[":ARG0",":ARG1",":ARG3"],lambda arg0,arg1,arg3:S(arg0,VP(V("cool"),Adv("off"),arg1,pp("from",arg3)))),

 'coop-01': # ARG0:cooper / ARG1:entity cooped [coop.xml]
   LexSem("V","coop",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("coop"),arg1))),

 'coop-up-02': # ARG0:cooper / ARG1:entity cooped [coop.xml]
   LexSem("V","coop",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("coop"),Adv("up"),arg1))),

 'cooperate-01': # ARG0:one cooperator / ARG1:other cooperator(s) / ARG2:shared task [cooperate.xml]
   LexSem("V","cooperate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cooperate"),pp("with",arg1),pp("in",arg2)))),

 'coopt-01': # ARG0:agent, elector, appointer, ect. / ARG1:the thing chosen / ARG2:office, task, purpose [coopt.xml]
   LexSem("V","co-opt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("co-opt"),arg1,pp("for",arg2)))),

 'coordinate-01': # ARG0:organizer, agent / ARG1:entity coordinated / ARG2:entity coordinated with [coordinate.xml]
   LexSem("V","coordinate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("coordinate"),arg1,pp("with",arg2)))),

 'cop-01': # ARG0:thief, agent / ARG1:thing taken / ARG2:taken from [cop.xml]
   LexSem("V","cop",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cop"),arg1,arg2))),

 'cope-01': # ARG0:entity coping / ARG1:coping with [cope.xml]
   LexSem("V","cope",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cope"),pp("with",arg1)))),

 'coprecipitate-01': # ARG0:intentional agent of coprecipitation (e.g. scientist) / ARG1:antigen(s) (e.g. protein) / ARG2:coprecipitated from, solution / ARG3:instrument, antibody [coprecipitate.xml]
   LexSem("V","coprecipitate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("coprecipitate"),arg1,pp("from",arg2),pp("with",arg3)))),

 'copy-01': # ARG0:copyist, agent / ARG1:original / ARG2:copy [copy.xml]
   LexSem("V","copy",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("copy"),arg1,pp("into",arg2)))),

 'copy-03': # ARG0:sender / ARG1:thing sent / ARG2:recipient [copy.xml]
   LexSem("V","copy",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("copy"),pp("on",arg1),arg2))),

 'copy-out-02': # ARG0:copyist, agent / ARG1:original [copy.xml]
   LexSem("V","copy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("copy"),Adv("out"),arg1))),

 'copyright-01': # ARG0:copyrighter / ARG1:printed material [copyright.xml]
   LexSem("V","copyright",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("copyright"),arg1))),

 'cordon-01': # ARG0:entity causing separation / ARG1:thing being divided / ARG2:source, area arg 1 is separated from [cordon.xml]
   LexSem("V","cordon",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cordon"),arg1,pp("from",arg2)))),

 'core-01': # ARG0:remover / ARG1:entity from which something is removed, what is being cored / ARG2:thing removed [core.xml]
   LexSem("V","core",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("core"),arg1,arg2))),

 'core-02': # ARG1:thing that is cored / ARG2:cored on [core.xml]
   LexSem("V","core",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("core"),pp("on",arg2)))),

 'core-out-03': # ARG0:remover / ARG1:entity from which something is removed, what is being cored / ARG2:thing removed [core.xml]
   LexSem("V","core",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("core"),Adv("out"),arg1,arg2))),

 'cork-01': # ARG0:corker / ARG1:thing corked [cork.xml]
   LexSem("V","cork",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cork"),arg1))),

 'corner-01': # ARG0:monopolist / ARG1:thing monopolized [corner.xml]
   LexSem("V","corner",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("corner"),arg1))),

 'cornify-01': # ARG0:cause of cornification / ARG1:hardened tissue [cornify.xml]
   LexSem("V","cornify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cornify"),arg1))),

 'corral-01': # ARG0:cowboy, agent / ARG1:animal [corral.xml]
   LexSem("V","corral",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("corral"),arg1))),

 'correct-01': # ARG0:corrector / ARG1:thing that was wrong [correct.xml]
   LexSem("V","correct",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("correct"),arg1))),

 'correlate-01': # ARG0:causer of relation / ARG1:topic, first entity in relation / ARG2:with what? second entity in relation [correlate.xml]
   LexSem("V","correlate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("correlate"),arg1,pp("with",arg2)))),

 'correlate-91': # ARG1:X; first item changing in relation to another / ARG2:Y; second item ARG1 is changing in relation to [correlate.xml]
   LexSem("V","correlate",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("correlate"),arg2))),

 'correspond-01': # ARG0:first (or all) correspondent(s) / ARG1:additional correspondent / ARG2:subject matter of correspondence [correspond.xml]
   LexSem("V","correspond",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("correspond"),pp("with",arg1),arg2))),

 'correspond-02': # ARG1:topic, theme / ARG2:compared with [correspond.xml]
   LexSem("V","correspond",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("correspond"),pp("to",arg2)))),

 'corroborate-01': # ARG0:confirmation of truth, supporting evidence / ARG1:statement [corroborate.xml]
   LexSem("V","corroborate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("corroborate"),arg1))),

 'corrode-01': # ARG0:agent, causing fading / ARG1:thing fading / ARG2:end point [corrode.xml]
   LexSem("V","corrode",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("corrode"),arg1,pp("into",arg2)))),

 'corrugate-01': # ARG0:agent/cause of corrugation / ARG1:patient, entity wrinkled [corrugate.xml]
   LexSem("V","corrugate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("corrugate"),arg1))),

 'corrupt-01': # ARG0:agent/cause / ARG1:entity corrupted / ARG2:instrument / ARG3:specific aspect of arg1 being corrupted [corrupt.xml]
   LexSem("V","corrupt",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("corrupt"),arg1,arg2,arg3))),

 'cosh-01': # ARG0:hitter / ARG1:victim [cosh.xml]
   LexSem("V","cosh",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cosh"),arg1))),

 'cosponsor-01': # ARG0:additional sponsor / ARG1:entity sponsored [cosponsor.xml]
   LexSem("V","co-sponsor",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("co-sponsor"),arg1))),

 'cosset-01': # ARG0:guardian, pamperer / ARG1:pampered pet [cosset.xml]
   LexSem("V","cosset",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cosset"),arg1))),

 'cost-01': # ARG1:commodity / ARG2:price / ARG3:buyer [cost.xml]
   LexSem("V","cost",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("cost"),arg2,arg3))),

 'costume-01': # ARG0:costumer, wardrobe designer / ARG1:person wearing costume / ARG2:costume [costume.xml]
   LexSem("V","costume",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("costume"),arg1,pp("as",arg2)))),

 'cotransfect-01': # ARG0:intentional agent of cotransfection (e.g. scientist) / ARG1:recipient of cotransfection (e.g. cell) / ARG2:nucleic acid(s) inserted into the cell [cotransfect.xml]
   LexSem("V","cotransfect",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cotransfect"),arg1,arg2))),

 'couch-01': # ARG0:speaker, agent / ARG1:utterance / ARG2:manner [couch.xml]
   LexSem("V","couch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("couch"),arg1,pp("in",arg2)))),

 'cough-01': # ARG0:cougher [cough.xml]
   LexSem("V","cough",[":ARG0"],lambda arg0:S(arg0,VP(V("cough")))),

 'cough-02': # ARG0:speaker / ARG1:utterance / ARG2:hearer [cough.xml]
   LexSem("V","cough",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cough"),arg1,arg2))),

 'cough-up-03': # ARG0:giver / ARG1:thing given [cough.xml]
   LexSem("V","cough",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cough"),Adv("up"),arg1))),

 'counsel-01': # ARG0:advisor / ARG1:entity advised / ARG2:advice [counsel.xml]
   LexSem("V","counsel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("counsel"),arg1,pp("on",arg2)))),

 'count-01': # ARG0:counter / ARG1:thing counted / ARG2:Count itself (measure, amount, extent) [count.xml]
   LexSem("V","count",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("count"),arg1,arg2))),

 'count-02': # ARG0:agent, entity causing some grouping / ARG1:theme, thing being included in some group / ARG2:group [count.xml]
   LexSem("V","count",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("count"),arg1,pp("among",arg2)))),

 'count-03': # ARG0:depender / ARG1:depended on / ARG2:secondary predication on arg1 [count.xml]
   LexSem("V","count",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("count"),pp("on",arg1),pp("to",arg2)))),

 'count-04': # ARG1:important thing [count.xml]
   LexSem("V","count",[":ARG1"],lambda arg1:S(arg1,VP(V("count")))),

 'countenance-01': # ARG0:agent, causer / ARG1:thing approved [countenance.xml]
   LexSem("V","countenance",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("countenance"),arg1))),

 'counter-01': # ARG0:reactor / ARG1:in reaction to / ARG2:reaction [counter.xml]
   LexSem("V","counter",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("counter"),arg1,pp("with",arg2)))),

 'counteract-01': # ARG0:worker, Agent / ARG1:action or object being prevented / ARG3:instrument [counteract.xml]
   LexSem("V","counteract",[":ARG0",":ARG1",":ARG3"],lambda arg0,arg1,arg3:S(arg0,VP(V("counteract"),arg1,pp("by",arg3)))),

 'counterattack-01': # ARG0:attacker, agent / ARG1:entity attacked / ARG2:instrument [counterattack.xml]
   LexSem("V","counterattack",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("counterattack"),arg1,pp("with",arg2)))),

 'counterbalance-01': # ARG0:opposer / ARG1:entity counterbalanced [counterbalance.xml]
   LexSem("V","counterbalance",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("counterbalance"),arg1))),

 'counterchallenge-01': # ARG0:challenger / ARG1:challenged (champion?) / ARG2:challenged-to, heroic task [counterchallenge.xml]
   LexSem("V","counterchallenge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("counterchallenge"),arg1,arg2))),

 'counterfeit-01': # ARG0:copyist, agent / ARG1:original, entity counterfeited [counterfeit.xml]
   LexSem("V","counterfeit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("counterfeit"),arg1))),

 'countersue-01': # ARG0:litigant / ARG1:defender / ARG2:crime / ARG3:intended prize [countersue.xml]
   LexSem("V","countersue",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("countersue"),arg1,pp("for",arg2),pp("for",arg3)))),

 'countervail-01': # ARG0:countervailer / ARG1:thing acted against [countervail.xml]
   LexSem("V","countervail",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("countervail"),arg1))),

 'coup-01': # ARG0:new leading party, coup stager / ARG1:overthrown government [coup.xml]
   LexSem("V","coup",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("coup"),pp("against",arg1)))),

 'couple-01': # ARG0:joiner / ARG1:first thing / ARG2:second thing [couple.xml]
   LexSem("V","couple",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("couple"),arg1,pp("with",arg2)))),

 'course-01': # ARG0:liquid / ARG1:channel [course.xml]
   LexSem("V","course",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("course"),pp("through",arg1)))),

 'court-01': # ARG0:suitor / ARG1:courted [court.xml]
   LexSem("V","court",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("court"),arg1))),

 'cover-01': # ARG0:agent / ARG1:thing, entity covered / ARG2:covered with, value / ARG3:danger, insured against [cover.xml]
   LexSem("V","cover",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("cover"),arg1,arg2,arg3))),

 'cover-02': # ARG0:causer of covering / ARG1:thing covered / ARG2:covered with [cover.xml]
   LexSem("V","cover",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cover"),arg1,pp("with",arg2)))),

 'cover-03': # ARG0:news organization, media / ARG1:event, thing covered [cover.xml]
   LexSem("V","cover",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cover"),arg1))),

 'cover-over-05': # ARG0:agent / ARG1:thing being covered / ARG2:the cover itself [cover.xml]
   LexSem("V","cover",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cover"),Adv("over"),arg1,pp("with",arg2)))),

 'cover-up-04': # ARG0:coverer / ARG1:thing covered [cover.xml]
   LexSem("V","cover",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cover"),Adv("up"),arg1))),

 'covet-01': # ARG0:agent / ARG1:entity wished for [covet.xml]
   LexSem("V","covet",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("covet"),arg1))),

 'cow-01': # ARG0:intimidating entity / ARG1:entity intimidated / ARG2:Manner or Instrument if separate from Arg 0 [cow.xml]
   LexSem("V","cow",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cow"),arg1,pp("with",arg2)))),

 'cower-01': # ARG0:afraid entity [cower.xml]
   LexSem("V","cower",[":ARG0"],lambda arg0:S(arg0,VP(V("cower")))),

 'cowrite-01': # ARG0:first writer / ARG1:thing written / ARG2:second author, if separate mnetion / ARG3:benefactive [cowrite.xml]
   LexSem("V","cowrite",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("cowrite"),arg1,arg2,arg3))),

 'cox-01': # ARG0:coxswain / ARG1:ship, crew [cox.xml]
   LexSem("V","cox",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cox"),arg1))),

 'cozen-01': # ARG0:Cheater, deceiver / ARG1:Theme, money or possession being taken through trickery / ARG2:Entity tricked, person/source of thing taken [cozen.xml]
   LexSem("V","cozen",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cozen"),arg1,arg2))),

 'cozen-02': # ARG0:Deceiver / ARG1:Person deceived / ARG2:Arg1 is deceived into doing, thinking what? [cozen.xml]
   LexSem("V","cozen",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cozen"),arg1,pp("into",arg2)))),

 'crab-01': # ARG0:agent or causer / ARG1:entity gathered / ARG2:gathered into / ARG3:beneficiary [crab.xml]
   LexSem("V","crab",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("crab"),arg1,arg2,arg3))),

 'crack-01': # ARG0:shaker / ARG1:thing shaking [crack.xml]
   LexSem("V","crack",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crack"),arg1))),

 'crack-02': # ARG0:breaker / ARG1:thing broken / ARG2:instrument [crack.xml]
   LexSem("V","crack",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("crack"),arg1,pp("with",arg2)))),

 'crack-05': # ARG0:hitter / ARG1:hit / ARG2:instrument of hitting / ARG3:location, usually with 'across' [crack.xml]
   LexSem("V","crack",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("crack"),arg1,pp("with",arg2),pp("across",arg3)))),

 'crack-down-06': # ARG0:punisher, enforcer / ARG1:crime/entity being suppressed, punished [crack.xml]
   LexSem("V","crack",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crack"),Adv("down"),pp("on",arg1)))),

 'crack-up-03': # ARG0:joker / ARG1:laugher / ARG2:joke [crack.xml]
   LexSem("V","crack",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("crack"),Adv("up"),arg1,pp("with",arg2)))),

 'crack-up-04': # ARG1:lunatic [crack.xml]
   LexSem("V","crack",[":ARG1"],lambda arg1:S(arg1,VP(V("crack"),Adv("up")))),

 'crackle-01': # ARG0:thing crackling [crackle.xml]
   LexSem("V","crackle",[":ARG0"],lambda arg0:S(arg0,VP(V("crackle")))),

 'cradle-01': # ARG0:agent, cradler / ARG1:theme, thing cradled [cradle.xml]
   LexSem("V","cradle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cradle"),arg1))),

 'craft-01': # ARG0:crafts(wo)man, agent / ARG1:theme [craft.xml]
   LexSem("V","craft",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("craft"),arg1))),

 'cram-01': # ARG0:crammer / ARG1:stuff being put in / ARG2:container [cram.xml]
   LexSem("V","cram",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cram"),arg1,pp("on",arg2)))),

 'cram-02': # ARG0:student / ARG1:subject [cram.xml]
   LexSem("V","cram",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cram"),arg1))),

 'cramp-01': # ARG0:causer of cramping / ARG1:entity being cramped, experiencer / ARG2:cramped with what, instrument if separate from arg 0 [cramp.xml]
   LexSem("V","cramp",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cramp"),arg1,pp("with",arg2)))),

 'crane-01': # ARG0:stretcher, agent / ARG1:neck [crane.xml]
   LexSem("V","crane",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crane"),arg1))),

 'crank-out-02': # ARG0:producer, creator / ARG1:product [crank.xml]
   LexSem("V","crank",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crank"),Adv("out"),arg1))),

 'crank-up-01': # ARG0:cranker / ARG1:what's gotten more intense [crank.xml]
   LexSem("V","crank",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crank"),Adv("up"),arg1))),

 'crap-01': # ARG0:Agent of crapping / ARG1:the crap itself [crap.xml]
   LexSem("V","crap",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crap"),arg1))),

 'crash-01': # ARG0:causer of damage, agent / ARG1:entity crashed [crash.xml]
   LexSem("V","crash",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crash"),arg1))),

 'crash-02': # ARG0:entity entering / ARG1:party [crash.xml]
   LexSem("V","crash",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crash"),arg1))),

 'crash-04': # ARG0:sleeper / ARG1:location [crash.xml]
   LexSem("V","crash",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crash"),arg1))),

 'crash-out-03': # ARG0:creator / ARG1:entity created [crash.xml]
   LexSem("V","crash",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crash"),Adv("out"),arg1))),

 'crate-01': # ARG0:packer / ARG1:thing packed / ARG2:crate, location [crate.xml]
   LexSem("V","crate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("crate"),arg1,arg2))),

 'crave-01': # ARG0:Wanter / ARG1:thing wanted [crave.xml]
   LexSem("V","crave",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crave"),arg1))),

 'crawl-01': # ARG0:agent, entity crawling / ARG1:direction [crawl.xml]
   LexSem("V","crawl",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crawl"),pp("down",arg1)))),

 'crayon-01': # ARG0:artist / ARG1:thing drawn / ARG2:destination [crayon.xml]
   LexSem("V","crayon",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("crayon"),arg1,pp("on",arg2)))),

 'craze-01': # ARG0:agent, cause / ARG1:experiencer, thing made crazy / ARG2:instrument [craze.xml]
   LexSem("V","craze",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("craze"),arg1,arg2))),

 'creak-01': # ARG0:entity creaking [creak.xml]
   LexSem("V","creak",[":ARG0"],lambda arg0:S(arg0,VP(V("creak")))),

 'cream-01': # ARG0:beater / ARG1:beaten [cream.xml]
   LexSem("V","cream",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cream"),arg1))),

 'cream-02': # ARG0:cook / ARG1:food [cream.xml]
   LexSem("V","cream",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cream"),arg1))),

 'crease-01': # ARG0:agent, causer of creasing / ARG1:entity being creased [crease.xml]
   LexSem("V","crease",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crease"),arg1))),

 'create-01': # ARG0:creator / ARG1:thing created / ARG2:materials used / ARG3:benefactive / ARG4:attribute of arg1 [create.xml]
   LexSem("V","create",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("create"),arg1,arg2,pp("for",arg3),pp("as",arg4)))),

 'credential-01': # ARG0:granter of license / ARG1:licensed thing / ARG2:attribute of arg1 [credential.xml]
   LexSem("V","credential",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("credential"),arg1,pp("as",arg2)))),

 'credit-01': # ARG0:giver of credit / ARG1:entity credited / ARG2:credited for [credit.xml]
   LexSem("V","credit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("credit"),arg1,pp("for",arg2)))),

 'credit-02': # ARG0:bookkeeper, agent / ARG1:amount credited / ARG2:account, credited to [credit.xml]
   LexSem("V","credit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("credit"),arg1,pp("to",arg2)))),

 'creep-01': # ARG0:creeper / ARG1:path [creep.xml]
   LexSem("V","creep",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("creep"),pp("up",arg1)))),

 'creep-out-03': # ARG0:scary entity / ARG1:scared entity / ARG2:instrument (if seperate from arg0) / ARG3:intensifier, extent [creep.xml]
   LexSem("V","creep",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("creep"),Adv("out"),pp("of",arg1),arg2,arg3))),

 'creep-up-02': # ARG0:creeper / ARG1:target [creep.xml]
   LexSem("V","creep",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("creep"),Adv("up"),pp("on",arg1)))),

 'cremate-01': # ARG0:causer of cremation / ARG1:entity cremated / ARG2:Instrument or Manner if separate from arg 0 [cremate.xml]
   LexSem("V","cremate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cremate"),arg1,pp("in",arg2)))),

 'crepitate-01': # ARG1:snapping thing [crepitate.xml]
   LexSem("V","crepitate",[":ARG1"],lambda arg1:S(arg1,VP(V("crepitate")))),

 'crest-01': # ARG0:entity in motion / ARG1:hill [crest.xml]
   LexSem("V","crest",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crest"),arg1))),

 'crew-01': # ARG0:crew, agent / ARG1:ship, crewed what? [crew.xml]
   LexSem("V","crew",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crew"),arg1))),

 'criminalize-01': # ARG0:agent, legislative body / ARG1:crime / ARG2:criminal [criminalize.xml]
   LexSem("V","criminalize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("criminalize"),arg1,arg2))),

 'crimp-01': # ARG0:agent, causer / ARG1:thing crimped [crimp.xml]
   LexSem("V","crimp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crimp"),arg1))),

 'crimson-01': # ARG0:causer of red coloration / ARG1:thing becoming red [crimson.xml]
   LexSem("V","crimson",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crimson"),arg1))),

 'cringe-01': # ARG0:fearful entity [cringe.xml]
   LexSem("V","cringe",[":ARG0"],lambda arg0:S(arg0,VP(V("cringe")))),

 'crinkle-01': # ARG0:crinkler / ARG1:thing crinkled [crinkle.xml]
   LexSem("V","crinkle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crinkle"),arg1))),

 'cripple-01': # ARG0:causer, agent / ARG1:victim / ARG2:instrument [cripple.xml]
   LexSem("V","cripple",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cripple"),arg1,pp("with",arg2)))),

 'crisp-01': # ARG0:cook / ARG1:food [crisp.xml]
   LexSem("V","crisp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crisp"),arg1))),

 'crisp-up-02': # ARG0:cook / ARG1:food [crisp.xml]
   LexSem("V","crisp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crisp"),Adv("up"),arg1))),

 'crisscross-01': # ARG0:entity in motion / ARG1:barrier, thing criss-crossed [crisscross.xml]
   LexSem("V","crisscross",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crisscross"),arg1))),

 'criticize-01': # ARG0:critic / ARG1:entity being criticized / ARG2:on what grounds? [criticize.xml]
   LexSem("V","criticize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("criticize"),arg1,pp("for",arg2)))),

 'critique-01': # ARG0:critiquer / ARG1:entity being critiqued [critique.xml]
   LexSem("V","critique",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("critique"),arg1))),

 'croak-01': # ARG1:corpse [croak.xml]
   LexSem("V","croak",[":ARG1"],lambda arg1:S(arg1,VP(V("croak")))),

 'crochet-01': # ARG0:maker, agent / ARG1:entity fashioned / ARG2:Material [crochet.xml]
   LexSem("V","crochet",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("crochet"),arg1,pp("from",arg2)))),

 'crook-01': # ARG0:agent / ARG1:finger [crook.xml]
   LexSem("V","crook",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crook"),arg1))),

 'croon-01': # ARG0:singer / ARG1:song [croon.xml]
   LexSem("V","croon",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("croon"),arg1))),

 'crop-01': # ARG0:cutter, agent / ARG1:entity cropped / ARG2:extend / ARG3:start point / ARG4:end point [crop.xml]
   LexSem("V","crop",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("crop"),arg1,pp("by",arg2),arg3,pp("to",arg4)))),

 'crop-up-02': # ARG1:entity cropped [crop.xml]
   LexSem("V","crop",[":ARG1"],lambda arg1:S(arg1,VP(V("crop"),Adv("up")))),

 'cross-01': # ARG0:crosser / ARG1:two things [cross.xml]
   LexSem("V","cross",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cross"),arg1))),

 'cross-02': # ARG0:entity in motion / ARG1:barrier [cross.xml]
   LexSem("V","cross",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cross"),arg1))),

 'cross-04': # ARG0:crosser / ARG1:item / ARG2:list [cross.xml]
   LexSem("V","cross",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cross"),arg1,pp("off",arg2)))),

 'cross-05': # ARG0:maker / ARG1:angry entity [cross.xml]
   LexSem("V","cross",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cross"),arg1))),

 'cross-out-03': # ARG0:eliminator / ARG1:eliminated [cross.xml]
   LexSem("V","cross",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cross"),Adv("out"),arg1))),

 'crossexamine-01': # ARG0:interrogator / ARG1:witness / ARG2:subject-matter of interrogation / ARG3:witness's role in the proceedings [crossexamine.xml]
   LexSem("V","cross-examine",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("cross-examine"),arg1,pp("on",arg2),pp("as",arg3)))),

 'crosspollinate-01': # ARG0:farmer, bees, agent / ARG1:plants [crosspollinate.xml]
   LexSem("V","cross-pollinate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cross-pollinate"),arg1))),

 'crouch-01': # ARG0:entity crouching [crouch.xml]
   LexSem("V","crouch",[":ARG0"],lambda arg0:S(arg0,VP(V("crouch")))),

 'crow-01': # ARG0:gloater, agent / ARG1:entity crowed about [crow.xml]
   LexSem("V","crow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crow"),pp("about",arg1)))),

 'crowd-01': # ARG0:agent, causer / ARG1:container / ARG2:substance [crowd.xml]
   LexSem("V","crowd",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("crowd"),arg1,pp("with",arg2)))),

 'crowd-02': # ARG0:agentive thing too close / ARG1:thing too close to [crowd.xml]
   LexSem("V","crowd",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crowd"),arg1))),

 'crown-01': # ARG0:putter of crown / ARG1:receiver of crown / ARG2:crown, or attribute of arg1 [crown.xml]
   LexSem("V","crown",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("crown"),arg1,pp("with",arg2)))),

 'crown-02': # ARG0:agent/ owner of culmination/achievment / ARG1:crowned event / ARG2:crowning event/achievment [crown.xml]
   LexSem("V","crown",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("crown"),arg1,arg2))),

 'crown-03': # ARG1:Highest point / ARG2:Foundation/support [crown.xml]
   LexSem("V","crown",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("crown"),arg2))),

 'crown-04': # ARG0:Dentist / ARG1:Tooth / ARG2:Cover [crown.xml]
   LexSem("V","crown",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("crown"),arg1,pp("with",arg2)))),

 'crucify-01': # ARG0:agent, crucifier / ARG1:person being crucified [crucify.xml]
   LexSem("V","crucify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crucify"),arg1))),

 'crucify-02': # ARG0:agent, mistreater / ARG1:person being mistreated [crucify.xml]
   LexSem("V","crucify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crucify"),arg1))),

 'cruise-01': # ARG0:traveller [cruise.xml]
   LexSem("V","cruise",[":ARG0"],lambda arg0:S(arg0,VP(V("cruise")))),

 'cruise-02': # ARG0:seeker / ARG1:public place [cruise.xml]
   LexSem("V","cruise",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cruise"),arg1))),

 'crumb-01': # ARG0:Chef, coater / ARG1:Meat, entity coated in bread crumbs / ARG2:Bread crumbs themselves, usually specifies type of crumb [crumb.xml]
   LexSem("V","crumb",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("crumb"),arg1,pp("with",arg2)))),

 'crumb-02': # ARG0:Volitional agent breaking up arg1 / ARG1:bread, entity broken up into crumbs / ARG2:Instrument [crumb.xml]
   LexSem("V","crumb",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("crumb"),arg1,arg2))),

 'crumb-03': # ARG0:Waiter, busboy cleaning crumbs / ARG1:table [crumb.xml]
   LexSem("V","crumb",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crumb"),arg1))),

 'crumble-01': # ARG0:causer of crumbling / ARG1:thing crumbling [crumble.xml]
   LexSem("V","crumble",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crumble"),arg1))),

 'crump-01': # ARG1:engine, sound emitter [crump.xml]
   LexSem("V","crump",[":ARG1"],lambda arg1:S(arg1,VP(V("crump")))),

 'crumple-01': # ARG0:causer of damage / ARG1:thing crumpled [crumple.xml]
   LexSem("V","crumple",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crumple"),arg1))),

 'crunch-01': # ARG0:causer of damage / ARG1:thing crunched / ARG2:endstate [crunch.xml]
   LexSem("V","crunch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("crunch"),arg1,pp("to",arg2)))),

 'crush-01': # ARG0:agent, causer / ARG1:thing crushed / ARG2:instrument, if separate from arg0 / ARG3:crushed from or upon [crush.xml]
   LexSem("V","crush",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("crush"),arg1,arg2,pp("upon",arg3)))),

 'crush-02': # ARG0:liker / ARG1:object of affection [crush.xml]
   LexSem("V","crush",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("crush"),pp("on",arg1)))),

 'cry-01': # ARG0:speaker / ARG1:utterance, demand / ARG2:hearer [cry.xml]
   LexSem("V","cry",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cry"),arg1,arg2))),

 'cry-02': # ARG0:cryer / ARG1:cognate object [cry.xml]
   LexSem("V","cry",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cry"),arg1))),

 'cry-down-04': # ARG0:agent, decrier / ARG1:devalued entity / ARG2:reason for low opinion [cry.xml]
   LexSem("V","cry",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cry"),Adv("down"),arg1,pp("for",arg2)))),

 'cry-out-03': # ARG0:speaker / ARG1:utterance, demand / ARG2:hearer [cry.xml]
   LexSem("V","cry",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cry"),Adv("out"),arg1,arg2))),

 'cry-out-05': # ARG0:crier / ARG1:fixed: arg0's 'eyes' / ARG2:over what / ARG3:to whom [cry.xml]
   LexSem("V","cry",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("cry"),Adv("out"),arg1,arg2,arg3))),

 'crystallize-01': # ARG0:agent / ARG1:patient / ARG2:source, materials [crystallize.xml]
   LexSem("V","crystallize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("crystallize"),arg1,arg2))),

 'cub-01': # ARG0:Mother bear / ARG1:Baby bear [cub.xml]
   LexSem("V","cub",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cub"),arg1))),

 'cube-01': # ARG0:Agent/cause of cubing / ARG1:entity becoming cubes / ARG2:Instrument used / ARG3:resulting state of arg1, often prepositional [cube.xml]
   LexSem("V","cube",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("cube"),arg1,pp("with",arg2),pp("into",arg3)))),

 'cuckold-01': # ARG0:unfaithful wife, agent / ARG1:husband [cuckold.xml]
   LexSem("V","cuckold",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cuckold"),arg1))),

 'cuckoo-01': # ARG0:cuckoo-er [cuckoo.xml]
   LexSem("V","cuckoo",[":ARG0"],lambda arg0:S(arg0,VP(V("cuckoo")))),

 'cuckoo-02': # ARG0:cuckoo-er [cuckoo.xml]
   LexSem("V","cuckoo",[":ARG0"],lambda arg0:S(arg0,VP(V("cuckoo")))),

 'cuddle-01': # ARG1:one half / ARG2:second half [cuddle.xml]
   LexSem("V","cuddle",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("cuddle"),arg2))),

 'cudgel-01': # ARG0:hitter / ARG1:victim / ARG2:resulting state [cudgel.xml]
   LexSem("V","cudgel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cudgel"),arg1,pp("into",arg2)))),

 'cuff-01': # ARG0:hitter / ARG1:victim [cuff.xml]
   LexSem("V","cuff",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cuff"),arg1))),

 'cull-01': # ARG0:collector / ARG1:collected / ARG2:group or source [cull.xml]
   LexSem("V","cull",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cull"),arg1,arg2))),

 'culminate-01': # ARG1:entity ending / ARG2:culmination point [culminate.xml]
   LexSem("V","culminate",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("culminate"),pp("in",arg2)))),

 'cultivate-01': # ARG0:grower, developer, agent / ARG1:thing prospering, theme [cultivate.xml]
   LexSem("V","cultivate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cultivate"),arg1))),

 'culture-01': # ARG0:agent / ARG1:patient [culture.xml]
   LexSem("V","culture",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("culture"),arg1))),

 'cum-01': # ARG0:experiencer of ejaculation, orgasm / ARG1:cognate object, mention of cum itself [cum.xml]
   LexSem("V","cum",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cum"),arg1))),

 'cup-01': # ARG0:Shaper, creator of cup / ARG1:Entity, material shaped into cup [cup.xml]
   LexSem("V","cup",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cup"),arg1))),

 'cup-02': # ARG0:agent placing something in cup / ARG1:liquid, entity placed in cup [cup.xml]
   LexSem("V","cup",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cup"),arg1))),

 'cup-03': # ARG0:agent, cupper / ARG1:customer, entity receiving treatment / ARG2:body part cupped [cup.xml]
   LexSem("V","cup",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cup"),arg1,arg2))),

 'curb-01': # ARG0:causer of reduction, Agent / ARG1:Logical subject, patient, thing falling / ARG2:EXT, amount fallen / ARG3:Start point / ARG4:End point, end state of arg1 [curb.xml]
   LexSem("V","curb",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("curb"),arg1,arg2,arg3,arg4))),

 'curdle-01': # ARG0:causer / ARG1:patient, thing curdling [curdle.xml]
   LexSem("V","curdle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("curdle"),arg1))),

 'cure-01': # ARG0:doctor (etc) / ARG1:patient / ARG2:illness or injury / ARG3:instrument, treatment [cure.xml]
   LexSem("V","cure",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("cure"),arg1,arg2,arg3))),

 'cure-02': # ARG0:agent / ARG1:patient [cure.xml]
   LexSem("V","cure",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cure"),arg1))),

 'curl-01': # ARG0:causer of coiling / ARG1:coiled thing / ARG2:secondary attribute [curl.xml]
   LexSem("V","curl",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("curl"),arg1,pp("into",arg2)))),

 'curl-up-02': # ARG1:curved entity [curl.xml]
   LexSem("V","curl",[":ARG1"],lambda arg1:S(arg1,VP(V("curl"),Adv("up")))),

 'curry-01': # ARG0:agent, brusher, currier / ARG1:horse / ARG2:brush, instrument [curry.xml]
   LexSem("V","curry",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("curry"),arg1,pp("with",arg2)))),

 'curry-02': # ARG0:entity seeking favor, agent / ARG1:fixed: favor / ARG2:with whom [curry.xml]
   LexSem("V","curry",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("curry"),arg1,pp("with",arg2)))),

 'curry-03': # ARG0:cook / ARG1:food [curry.xml]
   LexSem("V","curry",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("curry"),arg1))),

 'curse-01': # ARG0:speaker / ARG1:utterance, four letter words / ARG2:listener [curse.xml]
   LexSem("V","curse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("curse"),arg1,pp("at",arg2)))),

 'curtail-01': # ARG0:logical subject, thing causing limitation / ARG1:thing limited [curtail.xml]
   LexSem("V","curtail",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("curtail"),arg1))),

 'curtain-01': # ARG0:hider / ARG1:thing hidden / ARG2:hidden from [curtain.xml]
   LexSem("V","curtain",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("curtain"),arg1,pp("from",arg2)))),

 'curtsey-01': # ARG0:bower / ARG1:bowed to [curtsey.xml]
   LexSem("V","curtsey",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("curtsey"),pp("to",arg1)))),

 'curve-01': # ARG1:thing curving [curve.xml]
   LexSem("V","curve",[":ARG1"],lambda arg1:S(arg1,VP(V("curve")))),

 'cushion-01': # ARG0:protector, agent / ARG1:entity cushioned / ARG2:cushioned for/from/against [cushion.xml]
   LexSem("V","cushion",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cushion"),arg1,pp("for",arg2)))),

 'customize-01': # ARG0:adaptor, agent / ARG1:thing customized / ARG2:purpose/beneficiary/target [customize.xml]
   LexSem("V","customize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("customize"),arg1,pp("to",arg2)))),

 'cut-01': # ARG0:intentional cutter / ARG1:thing cut / ARG2:medium, source / ARG3:instrument, unintentional cutter / ARG4:beneficiary [cut.xml]
   LexSem("V","cut",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("cut"),pp("through",arg1),pp("off",arg2),pp("with",arg3),pp("for",arg4)))),

 'cut-02': # ARG0:cutter / ARG1:thing reduced / ARG2:amount reduced by / ARG3:start point / ARG4:end point [cut.xml]
   LexSem("V","cut",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("cut"),arg1,pp("in",arg2),pp("from",arg3),pp("to",arg4)))),

 'cut-03': # ARG0:cutter / ARG1:thing cut (deal, corners, class, etc) [cut.xml]
   LexSem("V","cut",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cut"),arg1))),

 'cut-back-05': # ARG0:cutter / ARG1:thing reduced / ARG2:amount reduced by / ARG3:start point / ARG4:end point [cut.xml]
   LexSem("V","cut",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("cut"),Adv("back"),arg1,arg2,arg3,arg4))),

 'cut-down-11': # ARG0:cutter / ARG1:thing reduced / ARG2:amount reduced by / ARG3:start point / ARG4:end point [cut.xml]
   LexSem("V","cut",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("cut"),Adv("down"),pp("on",arg1),arg2,arg3,arg4))),

 'cut-off-04': # ARG0:cutter / ARG1:thing cut / ARG2:medium, source / ARG3:instrument / ARG4:beneficiary [cut.xml]
   LexSem("V","cut",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("cut"),Adv("off"),arg1,arg2,arg3,arg4))),

 'cut-out-06': # ARG0:eliminator / ARG1:thing eliminated / ARG2:source [cut.xml]
   LexSem("V","cut",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cut"),Adv("out"),arg1,arg2))),

 'cut-out-09': # ARG1:thing arranged / ARG2:arranged for whom [cut.xml]
   LexSem("V","cut",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("cut"),Adv("out"),pp("for",arg2)))),

 'cut-up-08': # ARG0:cutter / ARG1:thing now in pieces [cut.xml]
   LexSem("V","cut",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cut"),Adv("up"),arg1))),

 'cut-up-10': # ARG0:first or all jokers / ARG1:other entity cutting up with / ARG2:joke, cutting up about what? [cut.xml]
   LexSem("V","cut",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cut"),Adv("up"),arg1,arg2))),

 'cut_and_run-24': # ARG0:person fleeing, cutter and runner / ARG1:topic/entity abandoned / ARG2:danger; in the face of what [cut.xml]
   LexSem("V","cut",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cut"),pp("from",arg1),arg2))),

 'cut_it-19': # ARG0:Entity hoping to measure up / ARG1:domain of achievement [cut.xml]
   LexSem("V","cut",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("cut"),pp("in",arg1)))),

 'cut_slack-21': # ARG0:entity giving leeway / ARG1:entity receivin leeway / ARG2:amount of slack / ARG3:subject matter (or rope) [cut.xml]
   LexSem("V","cut",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("cut"),arg1,arg2,pp("on",arg3)))),

 'cycle-01': # ARG0:cyclist, agent [cycle.xml]
   LexSem("V","cycle",[":ARG0"],lambda arg0:S(arg0,VP(V("cycle")))),

 'cycle-02': # ARG1:Thing going through cycle / ARG2:EXT or MNR / ARG3:low point / ARG4:high point [cycle.xml]
   LexSem("V","cycle",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("cycle"),arg2,pp("between",arg3),arg4))),

 'dab-01': # ARG0:toucher, agent / ARG1:thing hit, touched / ARG2:paint,etc. dabbed with what? [dab.xml]
   LexSem("V","dab",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dab"),arg1,pp("with",arg2)))),

 'dabble-01': # ARG0:dabbler / ARG1:pasttime [dabble.xml]
   LexSem("V","dabble",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dabble"),pp("in",arg1)))),

 'dally-01': # ARG0:one who dallies / ARG1:thing dallied over [dally.xml]
   LexSem("V","dally",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dally"),pp("over",arg1)))),

 'dam-01': # ARG0:agent / ARG1:location of the dam [dam.xml]
   LexSem("V","dam",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dam"),arg1))),

 'damage-01': # ARG0:agent, causer / ARG1:entity damaged / ARG2:instrument / ARG3:monetary quantification of damage [damage.xml]
   LexSem("V","damage",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("damage"),arg1,pp("with",arg2),arg3))),

 'damn-01': # ARG0:damner, God / ARG1:damned, sinner [damn.xml]
   LexSem("V","damn",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("damn"),arg1))),

 'damp-04': # ARG0:restrainer, agent / ARG1:thing damped [dampen.xml]
   LexSem("V","damp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("damp"),arg1))),

 'dampen-01': # ARG0:causer of wetness, agent / ARG1:thing becoming damp / ARG2:liquid [dampen.xml]
   LexSem("V","dampen",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dampen"),arg1,pp("with",arg2)))),

 'dampen-02': # ARG0:causer of non-vibration, agent / ARG1:thing vibrating [dampen.xml]
   LexSem("V","dampen",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dampen"),arg1))),

 'dance-01': # ARG0:dancer / ARG1:dance / ARG2:partner [dance.xml]
   LexSem("V","dance",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dance"),arg1,pp("with",arg2)))),

 'dance-02': # ARG0:mover / ARG1:path [dance.xml]
   LexSem("V","dance",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dance"),pp("across",arg1)))),

 'dandle-01': # ARG0:dandler / ARG1:dandled [dandle.xml]
   LexSem("V","dandle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dandle"),arg1))),

 'dangle-01': # ARG0:causer of dangling, agent / ARG1:entity dangling [dangle.xml]
   LexSem("V","dangle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dangle"),arg1))),

 'dapple-01': # ARG0:dappler / ARG1:thing dappled / ARG2:spots [dapple.xml]
   LexSem("V","dapple",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dapple"),arg1,pp("with",arg2)))),

 'dare-01': # ARG0:urger / ARG1:impelled agent / ARG2:impelled action [dare.xml]
   LexSem("V","dare",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dare"),arg1,arg2))),

 'darken-01': # ARG0:causer of darkening / ARG1:thing becoming dark [darken.xml]
   LexSem("V","darken",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("darken"),arg1))),

 'darn-01': # ARG0:agent, repairer / ARG1:patient, thing(s) being darned / ARG2:instrument, thread [darn.xml]
   LexSem("V","darn",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("darn"),arg1,arg2))),

 'dart-01': # ARG0:agent of motion (includes volitional intransitive subjects) / ARG1:entity being moved around (includes non-volitional intransitive subjects) / ARG2:path of darting / ARG3:source / ARG4:destination [dart.xml]
   LexSem("V","dart",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("dart"),arg1,pp("in",arg2),pp("from",arg3),pp("to",arg4)))),

 'dart-02': # ARG0:shooter / ARG1:wild animal / ARG2:with what [dart.xml]
   LexSem("V","dart",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dart"),arg1,pp("with",arg2)))),

 'dart-03': # ARG0:Tailor / ARG1:garment (or other fabric item) [dart.xml]
   LexSem("V","dart",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dart"),arg1))),

 'dash-01': # ARG0:hitter / ARG1:thing hit, dashed [dash.xml]
   LexSem("V","dash",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dash"),arg1))),

 'dash-02': # ARG0:runner / ARG1:path / ARG2:destination [dash.xml]
   LexSem("V","dash",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dash"),arg1,arg2))),

 'dash-off-03': # ARG0:hurried producer / ARG1:thing produced / ARG2:benefactive [dash.xml]
   LexSem("V","dash",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dash"),Adv("off"),arg1,arg2))),

 'date-01': # ARG0:assigner of date / ARG1:item being labelled / ARG2:date [date.xml]
   LexSem("V","date",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("date"),arg1,arg2))),

 'date-02': # ARG0:dater / ARG1:dated [date.xml]
   LexSem("V","date",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("date"),arg1))),

 'daub-01': # ARG0:dauber, agent / ARG1:thing touched,daubed / ARG2:daubed with what? [daub.xml]
   LexSem("V","daub",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("daub"),pp("over",arg1),pp("with",arg2)))),

 'daunt-01': # ARG0:Stimulus / ARG1:momentarily courageless entity [daunt.xml]
   LexSem("V","daunt",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("daunt"),arg1))),

 'dawdle-01': # ARG0:dawdler [dawdle.xml]
   LexSem("V","dawdle",[":ARG0"],lambda arg0:S(arg0,VP(V("dawdle")))),

 'dawn-01': # ARG1:thing becoming known / ARG2:experiencer [dawn.xml]
   LexSem("V","dawn",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("dawn"),pp("on",arg2)))),

 'dawn-02': # ARG1:day dawning, thing beginning [dawn.xml]
   LexSem("V","dawn",[":ARG1"],lambda arg1:S(arg1,VP(V("dawn")))),

 'daze-01': # ARG0:Causer of daze / ARG1:Dazed entity / ARG2:instrument, if separate from cause [daze.xml]
   LexSem("V","daze",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("daze"),arg1,pp("with",arg2)))),

 'dazzle-01': # ARG0:Stimulus of amazement / ARG1:bedazzled entity / ARG2:instrument, if separate from arg0 [dazzle.xml]
   LexSem("V","dazzle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dazzle"),arg1,pp("with",arg2)))),

 'deaccent-01': # ARG0:remover / ARG1:thing removed from / ARG2:thing removed [deaccent.xml]
   LexSem("V","deaccent",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deaccent"),arg1,arg2))),

 'deacetylate-01': # ARG0:agent of deacetylation (e.g. scientist) / ARG1:thing deacetylated / ARG2:instrument / ARG3:product of deacetylation [deacetylate.xml]
   LexSem("V","deacetylate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("deacetylate"),arg1,pp("with",arg2),pp("to",arg3)))),

 'deactivate-01': # ARG0:deactivator, agent / ARG1:entity deactivated [deactivate.xml]
   LexSem("V","deactivate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("deactivate"),arg1))),

 'deaden-01': # ARG0:agent / ARG1:patient, entity being deadened / ARG2:instrument [deaden.xml]
   LexSem("V","deaden",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deaden"),arg1,arg2))),

 'deadlock-01': # ARG1:thing(s) deadlocking [deadlock.xml]
   LexSem("V","deadlock",[":ARG1"],lambda arg1:S(arg1,VP(V("deadlock")))),

 'deafen-01': # ARG0:causer of deafness / ARG1:now-deaf entity [deafen.xml]
   LexSem("V","deafen",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("deafen"),arg1))),

 'deal-01': # ARG0:dealer (or all dealers) / ARG1:co-dealer / ARG2:subject/type of transaction / ARG3:value of transaction [deal.xml]
   LexSem("V","deal",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("deal"),pp("with",arg1),pp("with",arg2),arg3))),

 'deal-02': # ARG0:dealer, distributor / ARG1:cards, thing distributed / ARG2:other player(s), distributed-to [deal.xml]
   LexSem("V","deal",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deal"),arg1,pp("to",arg2)))),

 'deaminate-01': # ARG0:intentional agent of deamination (e.g. scientist) / ARG1:thing deaminated (e.g. amino-acid) / ARG2:instrument (e.g enzyme) / ARG3:product of deamination (not the ammonia molecule) [deaminate.xml]
   LexSem("V","deaminate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("deaminate"),arg1,arg2,arg3))),

 'debark-01': # ARG0:remover / ARG1:debarked entity / ARG2:thing removed [debark.xml]
   LexSem("V","debark",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("debark"),arg1,arg2))),

 'debate-01': # ARG0:discussant(s), debater(s) / ARG1:thing discussed / ARG2:person debated against [debate.xml]
   LexSem("V","debate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("debate"),arg1,arg2))),

 'debauch-01': # ARG0:causer of corruption / ARG1:entity corrupted / ARG2:corrupted with what? instrument if separate from arg 0 (unlikely) [debauch.xml]
   LexSem("V","debauch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("debauch"),arg1,arg2))),

 'debilitate-01': # ARG0:Cause of weakening / ARG1:Patient, thing becoming weaker [debilitate.xml]
   LexSem("V","debilitate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("debilitate"),arg1))),

 'debone-01': # ARG0:remover / ARG1:removed flesh from / ARG2:thing removed [debone.xml]
   LexSem("V","debone",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("debone"),arg1,pp("of",arg2)))),

 'debowel-01': # ARG0:remover / ARG1:victim / ARG2:thing removed [debowel.xml]
   LexSem("V","debowel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("debowel"),arg1,arg2))),

 'debug-01': # ARG0:debugger / ARG1:software, machine [debug.xml]
   LexSem("V","debug",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("debug"),arg1))),

 'debunk-01': # ARG0:agent of truth / ARG1:subject of falsehoods [debunk.xml]
   LexSem("V","debunk",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("debunk"),arg1))),

 'deburr-01': # ARG0:remover / ARG1:victim / ARG2:burr, thing removed [deburr.xml]
   LexSem("V","deburr",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deburr"),arg1,arg2))),

 'debut-01': # ARG0:causer of appearance / ARG1:thing appearing [debut.xml]
   LexSem("V","debut",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("debut"),arg1))),

 'decamp-01': # ARG0:entity leaving, agent / ARG1:place leaving / ARG2:destination [decamp.xml]
   LexSem("V","decamp",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("decamp"),arg1,pp("to",arg2)))),

 'decant-01': # ARG0:pourer, decanter / ARG1:liquid [decant.xml]
   LexSem("V","decant",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("decant"),arg1))),

 'decapitate-01': # ARG0:agent / ARG1:entity now without a head [decapitate.xml]
   LexSem("V","decapitate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("decapitate"),arg1))),

 'decay-01': # ARG0:thing decaying [decay.xml]
   LexSem("V","decay",[":ARG0"],lambda arg0:S(arg0,VP(V("decay")))),

 'decease-01': # ARG1:corpse [decease.xml]
   LexSem("V","decease",[":ARG1"],lambda arg1:S(arg1,VP(V("decease")))),

 'deceive-01': # ARG0:liar / ARG1:lied to / ARG2:lied about [deceive.xml]
   LexSem("V","deceive",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deceive"),arg1,pp("about",arg2)))),

 'decelerate-01': # ARG0:agent, causer of slowing / ARG1:entity slowing down [decelerate.xml]
   LexSem("V","decelerate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("decelerate"),arg1))),

 'decentralize-01': # ARG0:causer, agent / ARG1:decentralized thing [decentralize.xml]
   LexSem("V","decentralize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("decentralize"),arg1))),

 'decide-01': # ARG0:decider / ARG1:the decision itself / ARG2:beneficiary / ARG3:topic of decision [decide.xml]
   LexSem("V","decide",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("decide"),arg1,pp("for",arg2),pp("on",arg3)))),

 'decimate-01': # ARG0:destroyer / ARG1:thing destroyed / ARG2:instrument of destruction [decimate.xml]
   LexSem("V","decimate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("decimate"),arg1,pp("with",arg2)))),

 'decipher-01': # ARG0:code-breaker / ARG1:encrypted data / ARG2:decoded data [decipher.xml]
   LexSem("V","decipher",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("decipher"),arg1,arg2))),

 'deck-01': # ARG0:decorator, agent / ARG1:entity decked / ARG2:decoration [deck.xml]
   LexSem("V","deck",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deck"),arg1,pp("in",arg2)))),

 'deck-out-02': # ARG0:person putting on clothes / ARG1:person wearing clothes / ARG2:clothes [deck.xml]
   LexSem("V","deck",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deck"),Adv("out"),arg1,pp("in",arg2)))),

 'declaim-01': # ARG0:speaker / ARG1:utterance [declaim.xml]
   LexSem("V","declaim",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("declaim"),arg1))),

 'declare-01': # ARG0:judge / ARG1:entity judged / ARG2:judgment [declare.xml]
   LexSem("V","declare",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("declare"),arg1,arg2))),

 'declare-02': # ARG0:announcer / ARG1:utterance / ARG2:hearer / ARG3:attributive [declare.xml]
   LexSem("V","declare",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("declare"),arg1,pp("to",arg2),pp("of",arg3)))),

 'declassify-01': # ARG0:secret-keeper / ARG1:secret [declassify.xml]
   LexSem("V","declassify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("declassify"),arg1))),

 'declaw-01': # ARG0:remover / ARG1:victim / ARG2:claw, thing removed [declaw.xml]
   LexSem("V","declaw",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("declaw"),arg1,arg2))),

 'decline-01': # ARG1:Logical subject, patient, thing declining / ARG2:EXT, amount declined by / ARG3:start point / ARG4:end point, end state of arg1 / ARG5:specific aspect of arg1 in decline [decline.xml]
   LexSem("V","decline",[":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg1,arg2,arg3,arg4,arg5:S(arg1,VP(V("decline"),arg2,pp("from",arg3),pp("to",arg4),arg5))),

 'decline-02': # ARG0:entity turning down / ARG1:thing turned down [decline.xml]
   LexSem("V","decline",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("decline"),arg1))),

 'decoct-01': # ARG0:agent, entity doing the decocting / ARG1:first or all ingredients / ARG2:additional ingredients, water / ARG3:end state [decoct.xml]
   LexSem("V","decoct",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("decoct"),pp("from",arg1),pp("into",arg2),arg3))),

 'decode-01': # ARG0:causer of transformation, decoder / ARG1:message decoded / ARG2:end state, translation when separate mention from arg 1 / ARG3:start state, code [decode.xml]
   LexSem("V","decode",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("decode"),arg1,pp("into",arg2),pp("from",arg3)))),

 'decommission-01': # ARG0:revoker, agent / ARG1:task / ARG2:recepient [decommission.xml]
   LexSem("V","decommission",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("decommission"),arg1,arg2))),

 'decompose-01': # ARG0:cause of decomposition / ARG1:thing undergoing decomposition [decompose.xml]
   LexSem("V","decompose",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("decompose"),arg1))),

 'decompress-01': # ARG0:Entity (person, computer or program) doing the decompressing / ARG1:file being decompressed / ARG2:tool used in decompression [decompress.xml]
   LexSem("V","decompress",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("decompress"),arg1,pp("with",arg2)))),

 'decompress-02': # ARG0:agent or cause of decompression / ARG1:entity in which the pressure is being reduced / ARG2:tool used to aid in decompression [decompress.xml]
   LexSem("V","decompress",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("decompress"),arg1,pp("with",arg2)))),

 'decompress-03': # ARG1:entity recovering from an affliction / ARG2:the affliction [decompress.xml]
   LexSem("V","decompress",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("decompress"),pp("from",arg2)))),

 'decontaminate-01': # ARG0:cleaner / ARG1:dirty thing, now clean [decontaminate.xml]
   LexSem("V","decontaminate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("decontaminate"),arg1))),

 'decorate-01': # ARG0:decorator / ARG1:thing decorated / ARG2:decorations [decorate.xml]
   LexSem("V","decorate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("decorate"),arg1,pp("with",arg2)))),

 'decouple-01': # ARG0:Agent, cause of separation / ARG1:First or all (where one constituent) things being separated / ARG2:Thing being separated from (when separate constituent) [decouple.xml]
   LexSem("V","decouple",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("decouple"),arg1,pp("from",arg2)))),

 'decrease-01': # ARG0:causer of decline, agent / ARG1:thing decreasing / ARG2:amount decreased by, EXT or MNR / ARG3:start point / ARG4:end point [decrease.xml]
   LexSem("V","decrease",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("decrease"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'decree-01': # ARG0:ruler, issuer of decree / ARG1:entity decreed / ARG2:listener [decree.xml]
   LexSem("V","decree",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("decree"),arg1,arg2))),

 'decry-01': # ARG0:agent, decrier / ARG1:thing with low value / ARG2:reason [decry.xml]
   LexSem("V","decry",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("decry"),arg1,pp("as",arg2)))),

 'decrypt-01': # ARG0:decoder / ARG1:thing decoded [decrypt.xml]
   LexSem("V","decrypt",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("decrypt"),arg1))),

 'dedicate-01': # ARG0:agent, dedicator / ARG1:thing dedicated / ARG2:to what [dedicate.xml]
   LexSem("V","dedicate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dedicate"),arg1,pp("to",arg2)))),

 'deduce-01': # ARG0:agent, entity now believing something / ARG1:belief / ARG2:source of belief [deduce.xml]
   LexSem("V","deduce",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deduce"),arg1,arg2))),

 'deduct-01': # ARG0:subtracter / ARG1:thing being subtracted / ARG2:thing being subtracted from [deduct.xml]
   LexSem("V","deduct",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deduct"),arg1,pp("from",arg2)))),

 'deem-01': # ARG0:assigner / ARG1:object, thing under consideration [deem.xml]
   LexSem("V","deem",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("deem"),arg1))),

 'deemphasize-01': # ARG0:causer of deemphasis / ARG1:entity  deemphasized [deemphasize.xml]
   LexSem("V","deemphasize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("deemphasize"),arg1))),

 'deepen-01': # ARG0:agent, causer of deepening / ARG1:thing getting deeper [deepen.xml]
   LexSem("V","deepen",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("deepen"),arg1))),

 'deepfry-01': # ARG0:frier / ARG1:fried / ARG2:Instrument of frying [deepfry.xml]
   LexSem("V","deepfry",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deepfry"),arg1,arg2))),

 'deescalate-01': # ARG0:causer / ARG1:thing decreasing [deescalate.xml]
   LexSem("V","deescalate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("deescalate"),arg1))),

 'deface-01': # ARG0:agent, causer / ARG1:entity defaced / ARG2:instrument [deface.xml]
   LexSem("V","deface",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deface"),arg1,pp("with",arg2)))),

 'defame-01': # ARG0:speaker / ARG1:subject / ARG2:reason [defame.xml]
   LexSem("V","defame",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("defame"),arg1,arg2))),

 'defang-01': # ARG0:remover / ARG1:victim / ARG2:thing removed [defang.xml]
   LexSem("V","defang",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("defang"),arg1,pp("of",arg2)))),

 'defarnesylate-01': # ARG0:intentional agent of defarnesylation (e.g. scientist) / ARG1:thing defarnesylated / ARG2:instrument / ARG3:result of defarnesylation [defarnesylate.xml]
   LexSem("V","defarnesylate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("defarnesylate"),arg1,arg2,arg3))),

 'defat-01': # ARG0:remover / ARG1:remove fat from / ARG2:thing removed [defat.xml]
   LexSem("V","defat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("defat"),arg1,pp("of",arg2)))),

 'default-01': # ARG1:group/entity unable to pay / ARG2:what they can't pay for / ARG3:loaner of money / ARG4:amount of money [default.xml]
   LexSem("V","default",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("default"),pp("on",arg2),pp("to",arg3),arg4))),

 'defeat-01': # ARG0:entity victorious / ARG1:entity defeated [defeat.xml]
   LexSem("V","defeat",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("defeat"),arg1))),

 'defeather-01': # ARG0:remover / ARG1:victim / ARG2:feather, thing removed [defeather.xml]
   LexSem("V","defeather",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("defeather"),arg1,arg2))),

 'defecate-01': # ARG0:person in the bathroom [defecate.xml]
   LexSem("V","defecate",[":ARG0"],lambda arg0:S(arg0,VP(V("defecate")))),

 'defect-01': # ARG0:double agent, defector / ARG1:entity defected from / ARG2:entity defected to [defect.xml]
   LexSem("V","defect",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("defect"),arg1,pp("to",arg2)))),

 'defend-01': # ARG0:defender / ARG1:defended / ARG2:instrument / ARG3:entity defended against [defend.xml]
   LexSem("V","defend",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("defend"),arg1,pp("with",arg2),pp("from",arg3)))),

 'defer-01': # ARG0:agent, causer of delay / ARG1:event delayed / ARG2:delay itself, EXT, or new time [defer.xml]
   LexSem("V","defer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("defer"),arg1,pp("until",arg2)))),

 'defer-02': # ARG0:inferior thing / ARG1:superior thing [defer.xml]
   LexSem("V","defer",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("defer"),pp("to",arg1)))),

 'defer-03': # ARG0:Agent, passer / ARG1:thing passed off / ARG2:passed to, beneficiary [defer.xml]
   LexSem("V","defer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("defer"),arg1,pp("to",arg2)))),

 'defile-01': # ARG0:cause/source of defilement / ARG1:thing becoming defiled / ARG2:instrument if separate from ARG 0 [defile.xml]
   LexSem("V","defile",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("defile"),arg1,arg2))),

 'define-01': # ARG0:describer / ARG1:thing defined / ARG2:secondary attribute, described-as, definition [define.xml]
   LexSem("V","define",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("define"),arg1,pp("as",arg2)))),

 'deflate-01': # ARG0:causer of deflation, agent / ARG1:balloon, etc. [deflate.xml]
   LexSem("V","deflate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("deflate"),arg1))),

 'deflea-01': # ARG0:remover / ARG1:victim / ARG2:flea, thing removed [deflea.xml]
   LexSem("V","deflea",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deflea"),arg1,arg2))),

 'deflect-01': # ARG0:deflector / ARG1:thing deflected [deflect.xml]
   LexSem("V","deflect",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("deflect"),arg1))),

 'deflesh-01': # ARG0:remover / ARG1:victim / ARG2:flesh, thing removed [deflesh.xml]
   LexSem("V","deflesh",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deflesh"),arg1,arg2))),

 'deflower-01': # ARG0:remover / ARG1:victim / ARG2:flower, thing removed [deflower.xml]
   LexSem("V","deflower",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deflower"),arg1,pp("of",arg2)))),

 'defoam-01': # ARG0:remover / ARG1:thing defoamed / ARG2:foam, thing removed [defoam.xml]
   LexSem("V","defoam",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("defoam"),arg1,arg2))),

 'defog-01': # ARG0:remover / ARG1:thing defogged / ARG2:fog, thing removed [defog.xml]
   LexSem("V","defog",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("defog"),arg1,pp("of",arg2)))),

 'deforest-01': # ARG0:remover / ARG1:victim / ARG2:trees, forest, thing removed [deforest.xml]
   LexSem("V","deforest",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deforest"),arg1,arg2))),

 'deform-01': # ARG0:causer of bad form, agent / ARG1:thing being deformed, patient [deform.xml]
   LexSem("V","deform",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("deform"),arg1))),

 'defraud-01': # ARG0:thief, fraud, agent / ARG1:entity defrauded / ARG2:contract / ARG3:amount [defraud.xml]
   LexSem("V","defraud",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("defraud"),arg1,pp("on",arg2),pp("of",arg3)))),

 'defray-01': # ARG0:supplier, agent / ARG1:entity furnished, usually expenses/money / ARG2:expenses costs of what? entity purchased when separate mention from arg 1. [defray.xml]
   LexSem("V","defray",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("defray"),arg1,arg2))),

 'defrost-01': # ARG0:agent / ARG1:patient, item being defrosted / ARG2:instrument [defrost.xml]
   LexSem("V","defrost",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("defrost"),arg1,arg2))),

 'defuse-01': # ARG0:defuser / ARG1:bomb [defuse.xml]
   LexSem("V","defuse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("defuse"),arg1))),

 'defuzz-01': # ARG0:remover / ARG1:thing defuzzed / ARG2:fuzz, thing removed [defuzz.xml]
   LexSem("V","defuzz",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("defuzz"),arg1,arg2))),

 'defy-01': # ARG0:defiant one, agent / ARG1:entity defied [defy.xml]
   LexSem("V","defy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("defy"),arg1))),

 'degas-01': # ARG0:remover / ARG1:degassed thing / ARG2:gas, thing removed [degas.xml]
   LexSem("V","degas",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("degas"),arg1,arg2))),

 'degenerate-01': # ARG0:causer of something becoming bad (rarely or never occuring) / ARG1:thing getting worse / ARG2:EXT / ARG3:start point / ARG4:end point [degenerate.xml]
   LexSem("V","degenerate",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("degenerate"),arg1,arg2,pp("from",arg3),pp("into",arg4)))),

 'degerm-01': # ARG0:remover / ARG1:degermed entity / ARG2:germ,thing removed [degerm.xml]
   LexSem("V","degerm",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("degerm"),arg1,arg2))),

 'deglaze-01': # ARG0:remover / ARG1:deglazed entity / ARG2:thing removed [deglaze.xml]
   LexSem("V","deglaze",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deglaze"),arg1,arg2))),

 'deglycosylate-01': # ARG0:intentional agent of deglycosylation (e.g. scientist) / ARG1:thing deglycosylated (e.g. protein) / ARG2:instrument / ARG3:result of deglycosylation [deglycosylate.xml]
   LexSem("V","deglycosylate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("deglycosylate"),arg1,arg2,arg3))),

 'degrade-01': # ARG0:causer of degradation / ARG1:entity degraded / ARG2:instrument, if separate from arg 0 [degrade.xml]
   LexSem("V","degrade",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("degrade"),arg1,pp("with",arg2)))),

 'degrease-01': # ARG0:remover / ARG1:degreased entity / ARG2:grease,thing removed [degrease.xml]
   LexSem("V","degrease",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("degrease"),arg1,arg2))),

 'degrit-01': # ARG0:remover / ARG1:entity degritted / ARG2:grit, thing removed [degrit.xml]
   LexSem("V","degrit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("degrit"),arg1,arg2))),

 'degum-01': # ARG0:remover / ARG1:victim / ARG2:gum, thing removed [degum.xml]
   LexSem("V","degum",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("degum"),arg1,arg2))),

 'degut-01': # ARG0:remover / ARG1:victim / ARG2:thing removed [degut.xml]
   LexSem("V","degut",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("degut"),arg1,pp("of",arg2)))),

 'dehair-01': # ARG0:remover / ARG1:victim [dehair.xml]
   LexSem("V","dehair",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dehair"),arg1))),

 'dehead-01': # ARG0:remover / ARG1:victim [dehead.xml]
   LexSem("V","dehead",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dehead"),arg1))),

 'dehorn-01': # ARG0:remover / ARG1:victim [dehorn.xml]
   LexSem("V","dehorn",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dehorn"),arg1))),

 'dehull-01': # ARG0:remover / ARG1:seed / ARG2:husk, thing removed [dehull.xml]
   LexSem("V","dehull",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dehull"),arg1,arg2))),

 'dehumidify-01': # ARG0:agent, causing fading / ARG1:thing fading / ARG2:instrument or method [dehumidify.xml]
   LexSem("V","dehumidify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dehumidify"),arg1,arg2))),

 'dehusk-01': # ARG0:remover / ARG1:victim [dehusk.xml]
   LexSem("V","dehusk",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dehusk"),arg1))),

 'dehydrate-01': # ARG0:agent, causer of loss of moisture / ARG1:patient, thing losing moisture [dehydrate.xml]
   LexSem("V","dehydrate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dehydrate"),arg1))),

 'deice-01': # ARG0:remover / ARG1:thing deiced [deice.xml]
   LexSem("V","deice",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("deice"),arg1))),

 'deify-01': # ARG0:deifier / ARG1:deified [deify.xml]
   LexSem("V","deify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("deify"),arg1))),

 'deign-01': # ARG0:haughty agent / ARG1:action condescended to [deign.xml]
   LexSem("V","deign",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("deign"),arg1))),

 'deink-01': # ARG0:remover / ARG1:place ink is remove from / ARG2:ink; thing removed [deink.xml]
   LexSem("V","deink",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deink"),arg1,arg2))),

 'deject-01': # ARG0:Causer of dejection / ARG1:Entity dejected [deject.xml]
   LexSem("V","deject",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("deject"),arg1))),

 'delay-01': # ARG0:agent, causer of delay / ARG1:event delayed / ARG2:delay itself, EXT, time period [delay.xml]
   LexSem("V","delay",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("delay"),arg1,arg2))),

 'delegate-01': # ARG0:delegator / ARG1:thing given out (ie authority) / ARG2:to whom [delegate.xml]
   LexSem("V","delegate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("delegate"),arg1,pp("to",arg2)))),

 'delete-01': # ARG0:entity removing / ARG1:thing being removed / ARG2:removed from [delete.xml]
   LexSem("V","delete",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("delete"),arg1,pp("from",arg2)))),

 'deliberate-01': # ARG0:thinker / ARG1:thought, thing deliberated on; usually: on/upon/about [deliberate.xml]
   LexSem("V","deliberate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("deliberate"),pp("on",arg1)))),

 'delight-01': # ARG0:agent, pleaser, pleasing thing / ARG1:patient, entity pleased / ARG2:instrumental (if in addition to arg0) [delight.xml]
   LexSem("V","delight",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("delight"),arg1,pp("by",arg2)))),

 'delight-02': # ARG0:speaker / ARG1:utterance / ARG2:listener [delight.xml]
   LexSem("V","delight",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("delight"),arg1,arg2))),

 'delight-03': # ARG0:happy entity / ARG1:prepositional object [delight.xml]
   LexSem("V","delight",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("delight"),pp("in",arg1)))),

 'delimit-01': # ARG0:causer of boundary divide / ARG1:boundary marker / ARG2:item being defined [delimit.xml]
   LexSem("V","delimit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("delimit"),arg1,arg2))),

 'delineate-01': # ARG0:defining entity / ARG1:entity whose features are being outlined, define [delineate.xml]
   LexSem("V","delineate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("delineate"),arg1))),

 'delint-01': # ARG0:remover / ARG1:thing delinted [delint.xml]
   LexSem("V","delint",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("delint"),arg1))),

 'delist-01': # ARG0:lister / ARG1:item / ARG2:list [delist.xml]
   LexSem("V","delist",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("delist"),arg1,pp("from",arg2)))),

 'deliver-01': # ARG0:sender / ARG1:sent / ARG2:sent-to [deliver.xml]
   LexSem("V","deliver",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deliver"),arg1,pp("to",arg2)))),

 'deliver-101': # ARG0:Person delivering baby / ARG1:Baby [deliver.xml]
   LexSem("V","deliver",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("deliver"),arg1))),

 'deliver-LV': #  [deliver.xml]
   LexSem("V","deliver",[],lambda :S(VP(V("deliver")))),

 'delocalize-01': # ARG0:agent of delocalization (e.g. molecular process) / ARG1:thing delocalized / ARG2:delocalized from, source [delocalize.xml]
   LexSem("V","delocalize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("delocalize"),arg1,arg2))),

 'delouse-01': # ARG0:remover of lice, agent / ARG1:lousy thing [delouse.xml]
   LexSem("V","delouse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("delouse"),arg1))),

 'delude-01': # ARG0:misleader / ARG1:misled to / ARG2:misled about [delude.xml]
   LexSem("V","delude",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("delude"),arg1,pp("into",arg2)))),

 'deluge-01': # ARG0:flood-er, overwhelmer / ARG1:thing or place flooded / ARG2:flood, liquid [deluge.xml]
   LexSem("V","deluge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deluge"),arg1,pp("with",arg2)))),

 'deluster-01': # ARG0:remover / ARG1:thing delustered [deluster.xml]
   LexSem("V","deluster",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("deluster"),arg1))),

 'delve-01': # ARG0:digger, delver / ARG1:dug, delved into [delve.xml]
   LexSem("V","delve",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("delve"),pp("into",arg1)))),

 'demagnetize-01': # ARG0:causer of loss of magnetism, agent / ARG1:patient, thing getting demagnetized [demagnetize.xml]
   LexSem("V","demagnetize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("demagnetize"),arg1))),

 'demagogue-01': # ARG0:person stirring up emotions / ARG1:issue, thing being made emotionally charged [demagogue.xml]
   LexSem("V","demagogue",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("demagogue"),arg1))),

 'demand-01': # ARG0:asker / ARG1:favor / ARG2:hearer [demand.xml]
   LexSem("V","demand",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("demand"),arg1,pp("on",arg2)))),

 'demarcate-01': # ARG0:declarer / ARG1:demarcated entity [demarcate.xml]
   LexSem("V","demarcate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("demarcate"),arg1))),

 'demast-01': # ARG0:remover / ARG1:thing demasted (such as ship) [demast.xml]
   LexSem("V","demast",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("demast"),arg1))),

 'demean-01': # ARG0:causer of disgrace, agent / ARG1:entity demeaned [demean.xml]
   LexSem("V","demean",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("demean"),arg1))),

 'demethylate-01': # ARG0:agent of demethylation (e.g. scientist) / ARG1:thing demethylated / ARG2:instrument / ARG3:product of demethylation [demethylate.xml]
   LexSem("V","demethylate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("demethylate"),arg1,arg2,pp("to",arg3)))),

 'demilitarize-01': # ARG0:agent / ARG1:military presence (troops, weapons, etc) / ARG2:location removed from [demilitarize.xml]
   LexSem("V","demilitarize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("demilitarize"),pp("of",arg1),arg2))),

 'demobilize-01': # ARG0:supreme commander, agent / ARG1:person demobilized [demobilize.xml]
   LexSem("V","demobilize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("demobilize"),arg1))),

 'democratize-01': # ARG0:causer of democracy, agent / ARG1:thing now a democracy [democratize.xml]
   LexSem("V","democratize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("democratize"),arg1))),

 'demolish-01': # ARG0:destroyer / ARG1:thing destroyed / ARG2:instrument of destruction [demolish.xml]
   LexSem("V","demolish",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("demolish"),arg1,pp("with",arg2)))),

 'demonize-01': # ARG0:portrayer, agent / ARG1:demonic entity [demonize.xml]
   LexSem("V","demonize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("demonize"),arg1))),

 'demonstrate-01': # ARG0:demonstrator / ARG1:thing demonstrated / ARG2:watcher [demonstrate.xml]
   LexSem("V","demonstrate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("demonstrate"),arg1,arg2))),

 'demoralize-01': # ARG0:agent, causer / ARG1:entity demoralized / ARG2:instrument if separate from ARG 0 [demoralize.xml]
   LexSem("V","demoralize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("demoralize"),arg1,arg2))),

 'demote-01': # ARG0:causer of motion, employer / ARG1:thing in motion, employee / ARG2:destination, new job / ARG3:source, old job [demote.xml]
   LexSem("V","demote",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("demote"),arg1,pp("to",arg2),pp("from",arg3)))),

 'demur-01': # ARG0:objector, agent / ARG1:objection [demur.xml]
   LexSem("V","demur",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("demur"),arg1))),

 'demyelinate-101': # ARG0:Causer of demyelination / ARG1:Demyelinated thing [demyelinate.xml]
   LexSem("V","demyelinate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("demyelinate"),arg1))),

 'denationalize-01': # ARG0:government, usually / ARG1:property, usually industry [denationalize.xml]
   LexSem("V","denationalize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("denationalize"),arg1))),

 'denature-01': # ARG0:intentional agent of denaturation (e.g. scientist) / ARG1:thing denatured / ARG2:end state / ARG3:start state / ARG4:instrument, denaturant [denature.xml]
   LexSem("V","denature",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("denature"),arg1,arg2,arg3,arg4))),

 'denigrate-01': # ARG0:speaker / ARG1:subject / ARG2:grounds, reason [denigrate.xml]
   LexSem("V","denigrate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("denigrate"),arg1,arg2))),

 'denominate-01': # ARG0:assigner of name/value, agent / ARG1:entity named / ARG2:name, attribute [denominate.xml]
   LexSem("V","denominate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("denominate"),arg1,pp("in",arg2)))),

 'denote-01': # ARG0:thing denoting / ARG1:thing denoted / ARG2:intrument [denote.xml]
   LexSem("V","denote",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("denote"),arg1,arg2))),

 'denounce-01': # ARG0:speaker / ARG1:subject / ARG2:grounds, reason [denounce.xml]
   LexSem("V","denounce",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("denounce"),arg1,pp("for",arg2)))),

 'dent-01': # ARG0:debter, agent / ARG1:thing dented, patient / ARG2:instrument [dent.xml]
   LexSem("V","dent",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dent"),arg1,pp("into",arg2)))),

 'denuclearize-01': # ARG0:causer of de-nuclearization / ARG1:entity, institution de-nuclearized  [denuclearize.xml]
   LexSem("V","de-nuclearize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("de-nuclearize"),arg1))),

 'denude-01': # ARG0:uncoverer, agent / ARG1:thing now uncovered / ARG2:covering [denude.xml]
   LexSem("V","denude",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("denude"),arg1,pp("of",arg2)))),

 'deny-01': # ARG0:denier / ARG1:thing denied / ARG2:anti-benefactive: entity being denied arg1 [deny.xml]
   LexSem("V","deny",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deny"),arg1,arg2))),

 'depalmitoylate-01': # ARG0:intentional agent of depalmitoylation (e.g. scientist) / ARG1:thing depalmitoylated (e.g. protein) / ARG2:instrument / ARG3:result of depalmitoylation [depalmitoylate.xml]
   LexSem("V","depalmitoylate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("depalmitoylate"),arg1,arg2,arg3))),

 'depart-01': # ARG0:entity leaving, agent / ARG1:departed from / ARG2:departed for, destination [depart.xml]
   LexSem("V","depart",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("depart"),pp("from",arg1),pp("for",arg2)))),

 'depend-01': # ARG0:depender / ARG1:depended on [depend.xml]
   LexSem("V","depend",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("depend"),pp("on",arg1)))),

 'dephosphorylate-01': # ARG0:intentional agent of dephosphorylation (e.g. scientist) / ARG1:thing dephosphorylated / ARG2:instrument / ARG3:product of dephosphorylation [dephosphorylate.xml]
   LexSem("V","dephosphorylate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("dephosphorylate"),pp("from",arg1),pp("by",arg2),arg3))),

 'depict-01': # ARG0:agent, depictor / ARG1:thing described / ARG2:attribute [depict.xml]
   LexSem("V","depict",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("depict"),arg1,pp("as",arg2)))),

 'deplete-01': # ARG0:user, emptier, agent / ARG1:source depleted / ARG2:depleted of, thing removed [deplete.xml]
   LexSem("V","deplete",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deplete"),arg1,pp("of",arg2)))),

 'deplore-01': # ARG0:despiser / ARG1:thing despised [deplore.xml]
   LexSem("V","deplore",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("deplore"),arg1))),

 'deploy-01': # ARG0:Deployer / ARG1:Deployed / ARG2:deployed where [deploy.xml]
   LexSem("V","deploy",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deploy"),arg1,pp("to",arg2)))),

 'depolymerize-01': # ARG0:External agent of depolymerization, e.g. scientest / ARG1:Substance undergoing depolymerization (polymer) / ARG2:Depolymerizing catalyst, e.g. an enzyme or small molecule / ARG3:Resulting substance (monomer) / ARG4:ceiling temperature, at which point depolymerization occurs [depolymerize.xml]
   LexSem("V","depolymerize",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("depolymerize"),arg1,arg2,arg3,pp("at",arg4)))),

 'depopulate-01': # ARG0:Agent / ARG1:area / ARG2:former population [depopulate.xml]
   LexSem("V","depopulate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("depopulate"),arg1,arg2))),

 'deport-01': # ARG0:causer / ARG1:entity deported / ARG2:country  deported from [deport.xml]
   LexSem("V","deport",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deport"),arg1,arg2))),

 'depose-03': # ARG0:Causer of removal / ARG1:Thing being removed / ARG2:Source: Arg1 is removed from where? [deposit.xml]
   LexSem("V","depose",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("depose"),arg1,pp("from",arg2)))),

 'deposit-01': # ARG0:depositor, agent / ARG1:thing deposited / ARG2:where [deposit.xml]
   LexSem("V","deposit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deposit"),arg1,pp("in",arg2)))),

 'deprecate-01': # ARG0:causer of apparent disapproval, agent / ARG1:disaproved thing [deprecate.xml]
   LexSem("V","deprecate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("deprecate"),arg1))),

 'depreciate-01': # ARG1:thing losing value [depreciate.xml]
   LexSem("V","depreciate",[":ARG1"],lambda arg1:S(arg1,VP(V("depreciate")))),

 'depress-01': # ARG0:causer of depression / ARG1:entity getting depressed / ARG2:instrument, if causer also present [depress.xml]
   LexSem("V","depress",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("depress"),arg1,pp("with",arg2)))),

 'depress-02': # ARG0:causer of depression (agent or instrument) / ARG1:stock / ARG2:EXT / ARG3:start point / ARG4:end point [depress.xml]
   LexSem("V","depress",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("depress"),arg1,arg2,arg3,pp("to",arg4)))),

 'depressurize-01': # ARG0:causer of depressurization, agent / ARG1:entity losing pressure [depressurize.xml]
   LexSem("V","depressurize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("depressurize"),arg1))),

 'deprive-01': # ARG0:entity removing / ARG1:thing being removed / ARG2:removed from [deprive.xml]
   LexSem("V","deprive",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deprive"),pp("of",arg1),arg2))),

 'derail-01': # ARG0:agent, causer / ARG1:entity derailed [derail.xml]
   LexSem("V","derail",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("derail"),arg1))),

 'derange-01': # ARG0:agent, cause / ARG1:experiencer, thing deranged / ARG2:instrument when separate mention from arg 0 [derange.xml]
   LexSem("V","derange",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("derange"),arg1,arg2))),

 'derat-01': # ARG0:remover / ARG1:location [derat.xml]
   LexSem("V","derat",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("derat"),arg1))),

 'deregulate-01': # ARG0:deregulator / ARG1:thing deregulated / ARG2:start state / ARG3:end state [deregulate.xml]
   LexSem("V","deregulate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("deregulate"),arg1,pp("from",arg2),arg3))),

 'derib-01': # ARG0:remover / ARG1:thing deribbed / ARG2:thing removed [derib.xml]
   LexSem("V","derib",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("derib"),arg1,arg2))),

 'deride-01': # ARG0:treater, speaker, agent / ARG1:entity derided / ARG2:derided for what [deride.xml]
   LexSem("V","deride",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deride"),arg1,arg2))),

 'derind-01': # ARG0:remover / ARG1:victim [derind.xml]
   LexSem("V","derind",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("derind"),arg1))),

 'derive-01': # ARG0:creator / ARG1:thing created / ARG2:source / ARG3:benefactive / ARG4:attribute, secondary predication [derive.xml]
   LexSem("V","derive",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("derive"),arg1,pp("from",arg2),arg3,pp("as",arg4)))),

 'desalinate-01': # ARG0:cause of loss of salt, agent / ARG1:patient, thing losing salt [desalinate.xml]
   LexSem("V","desalinate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("desalinate"),arg1))),

 'desalt-01': # ARG0:remover / ARG1:victim [desalt.xml]
   LexSem("V","desalt",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("desalt"),arg1))),

 'descale-01': # ARG0:remover / ARG1:victim [descale.xml]
   LexSem("V","descale",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("descale"),arg1))),

 'descend-01': # ARG0:entity descending / ARG1:location/goal, descend on or to [descend.xml]
   LexSem("V","descend",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("descend"),pp("on",arg1)))),

 'describe-01': # ARG0:describer / ARG1:thing described / ARG2:secondary attribute, described-as [describe.xml]
   LexSem("V","describe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("describe"),arg1,pp("as",arg2)))),

 'descry-01': # ARG0:Viewer / ARG1:thing discerned / ARG2:secondary attribute, described-as [descry.xml]
   LexSem("V","descry",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("descry"),arg1,arg2))),

 'desecrate-01': # ARG0:causer of desecration / ARG1:entity desecrated [desecrate.xml]
   LexSem("V","desecrate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("desecrate"),arg1))),

 'desensitize-01': # ARG0:cause of loss of sensitivity, agent / ARG1:patient, thing becoming less sensitive / ARG2:becoming less sensitive to what? stimulus of arg 1 [desensitize.xml]
   LexSem("V","desensitize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("desensitize"),arg1,pp("towards",arg2)))),

 'desert-01': # ARG0:entity leaving / ARG1:entity deserted [desert.xml]
   LexSem("V","desert",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("desert"),arg1))),

 'deserve-01': # ARG0:deserving entity (entity who is owed) / ARG1:thing deserved / ARG2:in-exhange-for [deserve.xml]
   LexSem("V","deserve",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deserve"),pp("to",arg1),pp("for",arg2)))),

 'desex-01': # ARG0:remover / ARG1:victim / ARG2:thing removed [desex.xml]
   LexSem("V","desex",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("desex"),arg1,arg2))),

 'desiccate-01': # ARG0:cause of transformation / ARG1:entity dried / ARG2:instrument or manner if separate from arg 0 [desiccate.xml]
   LexSem("V","desiccate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("desiccate"),arg1,arg2))),

 'design-01': # ARG0:designer / ARG1:thing designed / ARG2:benefactive / ARG3:purpose [design.xml]
   LexSem("V","design",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("design"),arg1,pp("for",arg2),pp("to",arg3)))),

 'designate-01': # ARG0:designator / ARG1:designated / ARG2:role of arg1 [designate.xml]
   LexSem("V","designate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("designate"),arg1,pp("as",arg2)))),

 'desire-01': # ARG0:wanter / ARG1:wanted [desire.xml]
   LexSem("V","desire",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("desire"),arg1))),

 'desist-01': # ARG0:stopper [desist.xml]
   LexSem("V","desist",[":ARG0"],lambda arg0:S(arg0,VP(V("desist")))),

 'despair-01': # ARG0:experiencer / ARG1:entity despaired of [despair.xml]
   LexSem("V","despair",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("despair"),pp("over",arg1)))),

 'despise-01': # ARG0:despiser / ARG1:thing despised [despise.xml]
   LexSem("V","despise",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("despise"),arg1))),

 'despoil-01': # ARG0:entity removing / ARG1:thing being removed / ARG2:removed from [despoil.xml]
   LexSem("V","despoil",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("despoil"),arg1,arg2))),

 'desprout-01': # ARG0:remover / ARG1:victim [desprout.xml]
   LexSem("V","desprout",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("desprout"),arg1))),

 'destabilize-01': # ARG0:agent, causer / ARG1:entity destabilized [destabilize.xml]
   LexSem("V","destabilize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("destabilize"),arg1))),

 'destarch-01': # ARG0:remover / ARG1:victim [destarch.xml]
   LexSem("V","destarch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("destarch"),arg1))),

 'destigmatize-01': # ARG0:agent/cause / ARG1:destigmatized entity / ARG2:attribute [destigmatize.xml]
   LexSem("V","destigmatize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("destigmatize"),arg1,arg2))),

 'destine-01': # ARG1:entity destined / ARG2:purpose [destine.xml]
   LexSem("V","destine",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("destine"),arg2))),

 'destress-01': # ARG0:remover / ARG1:thing destressed / ARG2:stress, thing removed [destress.xml]
   LexSem("V","destress",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("destress"),arg1,arg2))),

 'destroy-01': # ARG0:destroyer / ARG1:thing destroyed / ARG2:instrument of destruction [destroy.xml]
   LexSem("V","destroy",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("destroy"),arg1,pp("with",arg2)))),

 'destruct-01': # ARG0:agent (predicted but not observed) / ARG1:thing being destroyed [destruct.xml]
   LexSem("V","destruct",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("destruct"),arg1))),

 'detach-01': # ARG0:entity removing, agent / ARG1:thing removed / ARG2:whole, source [detach.xml]
   LexSem("V","detach",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("detach"),arg1,pp("from",arg2)))),

 'detail-01': # ARG0:describer / ARG1:details [detail.xml]
   LexSem("V","detail",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("detail"),arg1))),

 'detain-01': # ARG0:police, etc. / ARG1:entity detained / ARG2:detained for what? [detain.xml]
   LexSem("V","detain",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("detain"),arg1,pp("for",arg2)))),

 'detassel-01': # ARG0:remover / ARG1:corn [detassel.xml]
   LexSem("V","detassel",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("detassel"),arg1))),

 'detect-01': # ARG0:detector / ARG1:detected / ARG2:instrument(al process), if separate from arg0 [detect.xml]
   LexSem("V","detect",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("detect"),arg1,pp("through",arg2)))),

 'deter-01': # ARG0:agent, deterer / ARG1:patient, entity deterred / ARG2:secondary action (deter from X) / ARG3:instrument, if separate from arg0 [deter.xml]
   LexSem("V","deter",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("deter"),arg1,arg2,pp("with",arg3)))),

 'deteriorate-01': # ARG0:causer / ARG1:entity deteriorating / ARG2:endstate [deteriorate.xml]
   LexSem("V","deteriorate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deteriorate"),arg1,pp("into",arg2)))),

 'determine-01': # ARG0:decider / ARG1:thing determined / ARG2:grounds / ARG3:attribute of arg1 [determine.xml]
   LexSem("V","determine",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("determine"),arg1,arg2,pp("to",arg3)))),

 'detest-01': # ARG0:experiencer / ARG1:target or hatred [detest.xml]
   LexSem("V","detest",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("detest"),arg1))),

 'dethrone-01': # ARG0:usurper, revolutionary force, agent / ARG1:king / ARG2:kingdom, role [dethrone.xml]
   LexSem("V","dethrone",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dethrone"),arg1,pp("as",arg2)))),

 'detonate-01': # ARG0:bomber, agent / ARG1:bomb [detonate.xml]
   LexSem("V","detonate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("detonate"),arg1))),

 'detract-01': # ARG0:causer of diversion, agent / ARG1:entity detracted / ARG2:entity detracted from [detract.xml]
   LexSem("V","detract",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("detract"),arg1,pp("from",arg2)))),

 'detusk-01': # ARG0:remover / ARG1:victim [detusk.xml]
   LexSem("V","detusk",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("detusk"),arg1))),

 'devalue-01': # ARG0:causer of lower value, agent / ARG1:thing with lower value / ARG2:original state [devalue.xml]
   LexSem("V","devalue",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("devalue"),arg1,pp("from",arg2)))),

 'devastate-01': # ARG0:destroyer / ARG1:thing destroyed / ARG2:instrument of destruction / ARG3:specific aspect of arg1 devastated [devastate.xml]
   LexSem("V","devastate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("devastate"),arg1,pp("with",arg2),arg3))),

 'devein-01': # ARG0:remover / ARG1:deveined entity / ARG2:thing removed [devein.xml]
   LexSem("V","devein",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("devein"),arg1,arg2))),

 'develop-01': # ARG1:location / ARG2:theme [develop.xml]
   LexSem("V","develop",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("develop"),arg2))),

 'develop-02': # ARG0:creator / ARG1:thing created / ARG2:source / ARG3:benefactive / ARG4:attribute, secondary predication / ARG5:specific aspect of arg1 being developed, if in addition to arg1 [develop.xml]
   LexSem("V","develop",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg0,arg1,arg2,arg3,arg4,arg5:S(arg0,VP(V("develop"),arg1,pp("from",arg2),pp("for",arg3),pp("to",arg4),arg5))),

 'deviate-01': # ARG0:entity in motion / ARG1:path [deviate.xml]
   LexSem("V","deviate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("deviate"),pp("from",arg1)))),

 'devise-01': # ARG0:deviser / ARG1:thing dreamed up / ARG2:secondary predication on arg1 [devise.xml]
   LexSem("V","devise",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("devise"),arg1,pp("as",arg2)))),

 'devolve-01': # ARG0:giver, agent / ARG1:thing given / ARG2:recipient [devolve.xml]
   LexSem("V","devolve",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("devolve"),arg1,pp("to",arg2)))),

 'devolve-02': # ARG0:agent, causer of devolution / ARG1:patient, thing growing worse / ARG2:start state / ARG3:end state [devolve.xml]
   LexSem("V","devolve",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("devolve"),arg1,pp("from",arg2),pp("into",arg3)))),

 'devote-01': # ARG0:causer of devotion / ARG1:thing devoted / ARG2:devoted to [devote.xml]
   LexSem("V","devote",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("devote"),arg1,pp("to",arg2)))),

 'devour-01': # ARG0:eater / ARG1:thing eaten [devour.xml]
   LexSem("V","devour",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("devour"),arg1))),

 'dewater-01': # ARG0:remover / ARG1:thing removed water from / ARG2:water, thing removed [dewater.xml]
   LexSem("V","dewater",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dewater"),arg1,arg2))),

 'dewax-01': # ARG0:remover / ARG1:dewaxed entity / ARG2:wax, thing removed [dewax.xml]
   LexSem("V","dewax",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dewax"),arg1,arg2))),

 'deworm-01': # ARG0:remover / ARG1:dewormed entity / ARG2:worm, thing removed [deworm.xml]
   LexSem("V","deworm",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("deworm"),arg1,arg2))),

 'diagnose-01': # ARG0:doctor / ARG1:patient / ARG2:illness [diagnose.xml]
   LexSem("V","diagnose",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("diagnose"),arg1,arg2))),

 'diagram-01': # ARG0:diagrammer, agent / ARG1:entity diagrammed [diagram.xml]
   LexSem("V","diagram",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("diagram"),arg1))),

 'dial-01': # ARG0:entity dialing, agent / ARG1:dialed number [dial.xml]
   LexSem("V","dial",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dial"),arg1))),

 'dialogue-01': # ARG0:agent/discussant / ARG1:theme/topic / ARG2:second actor [dialogue.xml]
   LexSem("V","dialogue",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dialogue"),arg1,pp("with",arg2)))),

 'diaper-01': # ARG0:Care-taker / ARG1:baby / ARG2:diapers themselves, type of diaper [diaper.xml]
   LexSem("V","diaper",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("diaper"),arg1,pp("in",arg2)))),

 'dice-01': # ARG0:Agent/cause of dicing / ARG1:entity being diced / ARG2:Instrument used / ARG3:resulting state of arg1, often prepositional [dice.xml]
   LexSem("V","dice",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("dice"),arg1,arg2,pp("into",arg3)))),

 'dicker-01': # ARG0:first arguer / ARG1:second arguer / ARG2:topic [dicker.xml]
   LexSem("V","dicker",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dicker"),pp("with",arg1),pp("over",arg2)))),

 'dictate-01': # ARG0:dictator, agent / ARG1:message, command dictated / ARG2:listener, dictated-to [dictate.xml]
   LexSem("V","dictate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dictate"),arg1,pp("to",arg2)))),

 'dictate-02': # ARG0:Speaker / ARG1:Utterance / ARG2:Hearer, recorder [dictate.xml]
   LexSem("V","dictate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dictate"),pp("of",arg1),arg2))),

 'die-01': # ARG1:the deceased / ARG2:cognate object [die.xml]
   LexSem("V","die",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("die"),arg2))),

 'die-05': # ARG0:entity who really wants to / ARG1:action wanted (dying to what) [die.xml]
   LexSem("V","die",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("die"),pp("to",arg1)))),

 'die-down-02': # ARG1:thing subsiding [die.xml]
   LexSem("V","die",[":ARG1"],lambda arg1:S(arg1,VP(V("die"),Adv("down")))),

 'die-off-04': # ARG1:dying thing [die.xml]
   LexSem("V","die",[":ARG1"],lambda arg1:S(arg1,VP(V("die"),Adv("off")))),

 'die-out-03': # ARG1:dying thing [die.xml]
   LexSem("V","die",[":ARG1"],lambda arg1:S(arg1,VP(V("die"),Adv("out")))),

 'differ-01': # ARG0:first arguer / ARG1:second arguer / ARG2:topic [differ.xml]
   LexSem("V","differ",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("differ"),pp("with",arg1),pp("over",arg2)))),

 'differ-02': # ARG1:first thing that is different / ARG2:from what / ARG3:domain in which args 1 and 2 are different [differ.xml]
   LexSem("V","differ",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("differ"),pp("from",arg2),pp("in",arg3)))),

 'differentiate-01': # ARG0:causer of difference / ARG1:different thing(s) / ARG2:instrument, when separate from arg0 [differentiate.xml]
   LexSem("V","differentiate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("differentiate"),pp("between",arg1),pp("by",arg2)))),

 'differentiate-101': # ARG0:Agent discerning a difference / ARG1:First thing differentiated / ARG2:Second thing differentiated (if a separate argument from first thing) / ARG3:Characteristics that differentiate [differentiate.xml]
   LexSem("V","differentiate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("differentiate"),arg1,pp("from",arg2),arg3))),

 'diffract-01': # ARG0:agent, cause / ARG1:thing diffracted / ARG2:end point [diffract.xml]
   LexSem("V","diffract",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("diffract"),arg1,pp("into",arg2)))),

 'diffuse-01': # ARG0:agent or cause / ARG1:theme, thing diffused [diffuse.xml]
   LexSem("V","diffuse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("diffuse"),arg1))),

 'dig-01': # ARG0:digger / ARG1:hole / ARG2:in what / ARG3:in search of [dig.xml]
   LexSem("V","dig",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("dig"),arg1,arg2,pp("for",arg3)))),

 'dig-04': # ARG0:liker / ARG1:thing liked [dig.xml]
   LexSem("V","dig",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dig"),arg1))),

 'dig-out-03': # ARG0:digger, agent / ARG1:entity removed [dig.xml]
   LexSem("V","dig",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dig"),Adv("out"),arg1))),

 'dig-up-02': # ARG0:digger, agent / ARG1:entity turned up [dig.xml]
   LexSem("V","dig",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dig"),Adv("up"),arg1))),

 'digest-01': # ARG0:eater / ARG1:nutrients [digest.xml]
   LexSem("V","digest",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("digest"),arg1))),

 'dignify-01': # ARG0:giver of worth / ARG1:recipient / ARG2:how [dignify.xml]
   LexSem("V","dignify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dignify"),arg1,pp("by",arg2)))),

 'digress-01': # ARG0:entity digressing, agent / ARG1:digressing from / ARG2:digressing for, destination [digress.xml]
   LexSem("V","digress",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("digress"),pp("from",arg1),arg2))),

 'dilate-01': # ARG0:cause / ARG1:wide thing (usually eyes) [dilate.xml]
   LexSem("V","dilate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dilate"),arg1))),

 'dilute-01': # ARG0:causal agent / ARG1:thing weakening / ARG2:EXT / ARG3:start point / ARG4:end point / ARG5:instrument [dilute.xml]
   LexSem("V","dilute",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg0,arg1,arg2,arg3,arg4,arg5:S(arg0,VP(V("dilute"),arg1,pp("by",arg2),arg3,arg4,pp("with",arg5)))),

 'dim-01': # ARG0:agent / ARG1:patient [dim.xml]
   LexSem("V","dim",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dim"),arg1))),

 'dime-01': # ARG0:agent / ARG1:patient [dime.xml]
   LexSem("V","dime",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dime"),arg1))),

 'dimerize-01': # ARG0:agent of dimerization, dimerizer / ARG1:first component of the dimer / ARG2:second component of the dimer / ARG3:result, dimer [dimerize.xml]
   LexSem("V","dimerize",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("dimerize"),arg1,arg2,arg3))),

 'diminish-01': # ARG0:causer of smallness, agent / ARG1:thing becoming smaller / ARG2:EXT / ARG3:start point / ARG4:end point [diminish.xml]
   LexSem("V","diminish",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("diminish"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'din-01': # ARG0:eater, diner [din.xml]
   LexSem("V","din",[":ARG0"],lambda arg0:S(arg0,VP(V("din")))),

 'din-out-02': # ARG0:eater, diner [din.xml]
   LexSem("V","din",[":ARG0"],lambda arg0:S(arg0,VP(V("din"),Adv("out")))),

 'dine-01': # ARG0:eater / ARG1:meal [dine.xml]
   LexSem("V","dine",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dine"),pp("on",arg1)))),

 'dine-out-02': # ARG0:eater, diner [dine.xml]
   LexSem("V","dine",[":ARG0"],lambda arg0:S(arg0,VP(V("dine"),Adv("out")))),

 'ding-01': # ARG0:one who dings / ARG1:the dinged thing [ding.xml]
   LexSem("V","ding",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ding"),arg1))),

 'dip-01': # ARG1:thing falling / ARG2:EXT / ARG3:start point / ARG4:end point [dip.xml]
   LexSem("V","dip",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("dip"),arg2,pp("from",arg3),pp("to",arg4)))),

 'dip-02': # ARG0:agent, dipper / ARG1:thing dipped / ARG2:dipped into [dip.xml]
   LexSem("V","dip",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dip"),arg1,pp("into",arg2)))),

 'direct-01': # ARG0:director / ARG1:thing directed / ARG2:direction, towards what [direct.xml]
   LexSem("V","direct",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("direct"),arg1,pp("toward",arg2)))),

 'dirty-01': # ARG0:agent, cause / ARG1:thing dirtied / ARG2:dirt [dirty.xml]
   LexSem("V","dirty",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dirty"),arg1,pp("with",arg2)))),

 'disable-01': # ARG0:disabler / ARG1:thing not working [disable.xml]
   LexSem("V","disable",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("disable"),arg1))),

 'disabuse-01': # ARG0:entity freeing / ARG1:thing being freed / ARG2:freed from [disabuse.xml]
   LexSem("V","disabuse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("disabuse"),arg1,pp("of",arg2)))),

 'disagree-01': # ARG0:first arguer / ARG1:second arguer / ARG2:topic [disagree.xml]
   LexSem("V","disagree",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("disagree"),pp("with",arg1),arg2))),

 'disallow-01': # ARG0:entity to set boundaries, agent / ARG1:forbidden action or thing [disallow.xml]
   LexSem("V","disallow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("disallow"),arg1))),

 'disappear-01': # ARG0:causal agent / ARG1:the disappeared [disappear.xml]
   LexSem("V","disappear",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("disappear"),arg1))),

 'disappoint-01': # ARG0:disappointer / ARG1:disappointed / ARG2:instrument [disappoint.xml]
   LexSem("V","disappoint",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("disappoint"),arg1,pp("with",arg2)))),

 'disapprove-01': # ARG0:disapprover / ARG1:thing disapproved [disapprove.xml]
   LexSem("V","disapprove",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("disapprove"),arg1))),

 'disarm-01': # ARG0:entity removing weapons, agent / ARG1:entity disarmed of weapons / ARG2:weapons removed [disarm.xml]
   LexSem("V","disarm",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("disarm"),arg1,pp("of",arg2)))),

 'disassemble-01': # ARG0:agent, disassembler / ARG1:thing disassembled [disassemble.xml]
   LexSem("V","disassemble",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("disassemble"),arg1))),

 'disassociate-01': # ARG0:causer of non-association, agent / ARG1:thing not associated / ARG2:separated from [disassociate.xml]
   LexSem("V","disassociate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("disassociate"),arg1,pp("from",arg2)))),

 'disavow-01': # ARG0:disavower / ARG1:thing disavowed / ARG2:listener to statement of disavowal [disavow.xml]
   LexSem("V","disavow",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("disavow"),arg1,pp("to",arg2)))),

 'disband-01': # ARG0:causer of not-together-ness, agent / ARG1:thing coming apart [disband.xml]
   LexSem("V","disband",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("disband"),arg1))),

 'disbelieve-01': # ARG0:non-believer / ARG1:thing not believed (in) [disbelieve.xml]
   LexSem("V","disbelieve",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("disbelieve"),arg1))),

 'disburse-01': # ARG0:bursar / ARG1:money / ARG2:recipient / ARG3:source of money [disburse.xml]
   LexSem("V","disburse",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("disburse"),arg1,pp("to",arg2),pp("from",arg3)))),

 'discard-01': # ARG0:discarder, remover / ARG1:thing discarded / ARG2:removed from, source [discard.xml]
   LexSem("V","discard",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("discard"),arg1,arg2))),

 'discern-01': # ARG0:perceiver / ARG1:entity perceived [discern.xml]
   LexSem("V","discern",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("discern"),arg1))),

 'discharge-01': # ARG0:supplier / ARG1:supply [discharge.xml]
   LexSem("V","discharge",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("discharge"),arg1))),

 'discharge-101': # ARG0:releaser / ARG1:patient / ARG2:place released from (often implied) [discharge.xml]
   LexSem("V","discharge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("discharge"),arg1,pp("from",arg2)))),

 'discipline-01': # ARG0:discipliner / ARG1:disciplined / ARG2:cause [discipline.xml]
   LexSem("V","discipline",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("discipline"),arg1,pp("for",arg2)))),

 'disclaim-01': # ARG0:agent, non-claimer / ARG1:topic, thing not claimed [disclaim.xml]
   LexSem("V","disclaim",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("disclaim"),arg1))),

 'disclose-01': # ARG0:Sayer / ARG1:Utterance / ARG2:Hearer / ARG3:Attributive [disclose.xml]
   LexSem("V","disclose",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("disclose"),arg1,pp("to",arg2),arg3))),

 'discolor-01': # ARG0:causer of bad color / ARG1:thing discolored / ARG2:bad color [discolor.xml]
   LexSem("V","discolor",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("discolor"),arg1,arg2))),

 'discombobulate-01': # ARG0:causer of nervousness / ARG1:nervous person / ARG2:Manner or instrument if separate from arg 0 [discombobulate.xml]
   LexSem("V","discombobulate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("discombobulate"),arg1,arg2))),

 'discomfit-01': # ARG0:Stimulus / ARG1:discomforted entity [discomfit.xml]
   LexSem("V","discomfit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("discomfit"),arg1))),

 'discompose-01': # ARG0:causer of nervousness / ARG1:nervous person / ARG2:Manner or instrument if separate from arg 0 [discompose.xml]
   LexSem("V","discompose",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("discompose"),arg1,arg2))),

 'disconcert-01': # ARG0:cause of lost composure / ARG1:victim [disconcert.xml]
   LexSem("V","disconcert",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("disconcert"),arg1))),

 'disconnect-01': # ARG0:entity causing separation / ARG1:thing being divided / ARG2:divided among/between, if separate from arg0 [disconnect.xml]
   LexSem("V","disconnect",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("disconnect"),arg1,pp("from",arg2)))),

 'discontinue-01': # ARG0:entity ending something, agent / ARG1:thing discontinued [discontinue.xml]
   LexSem("V","discontinue",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("discontinue"),arg1))),

 'discount-01': # ARG0:discounter / ARG1:commodity / ARG2:EXT, amount of reduction / ARG3:start point / ARG4:end point [discount.xml]
   LexSem("V","discount",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("discount"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'discount-02': # ARG0:identifier / ARG1:unimportant thing / ARG2:secondary attribute [discount.xml]
   LexSem("V","discount",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("discount"),arg1,pp("as",arg2)))),

 'discourage-01': # ARG0:entity removing confidence, agent / ARG1:entity discouraged / ARG2:discouraged from [discourage.xml]
   LexSem("V","discourage",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("discourage"),arg1,pp("from",arg2)))),

 'discourse-01': # ARG0:speaker / ARG1:subject / ARG2:hearer [discourse.xml]
   LexSem("V","discourse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("discourse"),pp("on",arg1),arg2))),

 'discover-01': # ARG0:finder / ARG1:thing found, discovery / ARG2:benefactive, found for / ARG3:attribute on arg1 (found out to be/as what) [discover.xml]
   LexSem("V","discover",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("discover"),arg1,pp("for",arg2),pp("to",arg3)))),

 'discredit-01': # ARG0:causal agent / ARG1:thing losing prestige [discredit.xml]
   LexSem("V","discredit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("discredit"),arg1))),

 'discriminate-01': # ARG0:agent, person with keen taste / ARG1:choices [discriminate.xml]
   LexSem("V","discriminate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("discriminate"),pp("in",arg1)))),

 'discriminate-02': # ARG0:bigot / ARG1:victim (discriminated against) / ARG2:beneficiary (discriminated in favor of) [discriminate.xml]
   LexSem("V","discriminate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("discriminate"),pp("against",arg1),pp("in",arg2)))),

 'discuss-01': # ARG0:discussant / ARG1:topic / ARG2:conversation partner, if explicit [discuss.xml]
   LexSem("V","discuss",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("discuss"),arg1,pp("with",arg2)))),

 'disdain-01': # ARG0:disdainer / ARG1:disdained [disdain.xml]
   LexSem("V","disdain",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("disdain"),arg1))),

 'disembark-01': # ARG0:passenger(s) / ARG1:vehicle(s) [disembark.xml]
   LexSem("V","disembark",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("disembark"),pp("from",arg1)))),

 'disembowel-01': # ARG0:remover / ARG1:victim / ARG2:bowel, thing removed / ARG3:instrument [disembowel.xml]
   LexSem("V","disembowel",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("disembowel"),arg1,pp("of",arg2),arg3))),

 'disenchant-01': # ARG0:causer of lack of interest, agent / ARG1:entity no longer interested / ARG2:interested in what [disenchant.xml]
   LexSem("V","disenchant",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("disenchant"),arg1,pp("with",arg2)))),

 'disencumber-01': # ARG0:entity freeing / ARG1:thing being freed / ARG2:freed from [disencumber.xml]
   LexSem("V","disencumber",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("disencumber"),arg1,pp("of",arg2)))),

 'disenfranchise-01': # ARG0:oppressor / ARG1:oppressed [disenfranchise.xml]
   LexSem("V","disenfranchise",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("disenfranchise"),arg1))),

 'disengage-01': # ARG0:remover, agent / ARG1:thing removed, disengaged / ARG2:from what [disengage.xml]
   LexSem("V","disengage",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("disengage"),arg1,pp("from",arg2)))),

 'disentangle-01': # ARG0:causer of separation / ARG1:First (or all when one constituent) thing disentangled / ARG2:Second thing arg1 is disentangled from (when separate constituent) [disentangle.xml]
   LexSem("V","disentangle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("disentangle"),arg1,pp("from",arg2)))),

 'disfigure-01': # ARG0:agent / ARG1:entity mutilated [disfigure.xml]
   LexSem("V","disfigure",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("disfigure"),arg1))),

 'disgorge-01': # ARG0:disgorger / ARG1:thing removed / ARG2:source [disgorge.xml]
   LexSem("V","disgorge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("disgorge"),arg1,pp("from",arg2)))),

 'disgrace-01': # ARG0:causer of disgrace / ARG1:entity disgraced / ARG2:Instrument or Manner if separate from Arg 0 [disgrace.xml]
   LexSem("V","disgrace",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("disgrace"),arg1,pp("by",arg2)))),

 'disgruntle-01': # ARG0:causer of disgruntlement / ARG1:disgruntled entity [disgruntle.xml]
   LexSem("V","disgruntle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("disgruntle"),arg1))),

 'disguise-01': # ARG0:causer of disguise, agent / ARG1:entity disguised / ARG2:attribute [disguise.xml]
   LexSem("V","disguise",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("disguise"),pp("as",arg1),pp("as",arg2)))),

 'disgust-01': # ARG0:Stimulus / ARG1:experiencer [disgust.xml]
   LexSem("V","disgust",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("disgust"),arg1))),

 'dish-01': # ARG0:disher / ARG1:food [dish.xml]
   LexSem("V","dish",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dish"),arg1))),

 'dish-out-02': # ARG0:distributor / ARG1:thing distributed / ARG2:distributed to [dish.xml]
   LexSem("V","dish",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dish"),Adv("out"),arg1,arg2))),

 'dish-up-03': # ARG0:server / ARG1:thing served / ARG2:served to [dish.xml]
   LexSem("V","dish",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dish"),Adv("up"),arg1,pp("for",arg2)))),

 'dishearten-01': # ARG0:entity removing confidence, cause / ARG1:entity disheartened [dishearten.xml]
   LexSem("V","dishearten",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dishearten"),arg1))),

 'dishonor-01': # ARG0:causer of disgrace / ARG1:entity dishonored [dishonor.xml]
   LexSem("V","dishonor",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dishonor"),arg1))),

 'dishonor-02': # ARG0:one rejecting / ARG1:unexcepted item [dishonor.xml]
   LexSem("V","dishonor",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dishonor"),arg1))),

 'dishonor-03': # ARG0:assailant / ARG1:victim [dishonor.xml]
   LexSem("V","dishonor",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dishonor"),arg1))),

 'disillusion-01': # ARG0:causer of disillusionment / ARG1:entity without illusions / ARG2:Concerning what? [disillusion.xml]
   LexSem("V","disillusion",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("disillusion"),arg1,pp("with",arg2)))),

 'disincline-01': # ARG0:not wanter / ARG1:action not wanted [disincline.xml]
   LexSem("V","disincline",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("disincline"),pp("to",arg1)))),

 'disinform-01': # ARG0:disinformer / ARG1:disinformed / ARG2:disinformation [disinform.xml]
   LexSem("V","disinform",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("disinform"),arg1,arg2))),

 'disinherit-01': # ARG0:entity denying inheritance / ARG1:deprived inheritance / ARG2:entity no longer receiving inheritance [disinherit.xml]
   LexSem("V","disinherit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("disinherit"),pp("from",arg1),arg2))),

 'disintegrate-01': # ARG0:causer of disintegration / ARG1:thing disintegating [disintegrate.xml]
   LexSem("V","disintegrate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("disintegrate"),arg1))),

 'disinvite-01': # ARG0:disinviter / ARG1:entity disinvited / ARG2:disinvited-to [disinvite.xml]
   LexSem("V","disinvite",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("disinvite"),arg1,pp("to",arg2)))),

 'dislike-01': # ARG0:disliker / ARG1:object of disaffection [dislike.xml]
   LexSem("V","dislike",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dislike"),arg1))),

 'dislocate-01': # ARG0:agent / ARG1:thing dislocated [dislocate.xml]
   LexSem("V","dislocate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dislocate"),arg1))),

 'dislodge-01': # ARG0:agent or cause / ARG1:theme / ARG2:source, place dislodged from [dislodge.xml]
   LexSem("V","dislodge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dislodge"),arg1,arg2))),

 'dismantle-01': # ARG0:taker apart, agent / ARG1:entity dismantled [dismantle.xml]
   LexSem("V","dismantle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dismantle"),arg1))),

 'dismay-01': # ARG0:agent, causer / ARG1:entity dismayed / ARG2:entity dismayed at [dismay.xml]
   LexSem("V","dismay",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dismay"),arg1,pp("at",arg2)))),

 'dismember-01': # ARG0:agent, butcher / ARG1:victim [dismember.xml]
   LexSem("V","dismember",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dismember"),arg1))),

 'dismiss-01': # ARG0:entity removing / ARG1:thing being removed / ARG2:removed from, former position [dismiss.xml]
   LexSem("V","dismiss",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dismiss"),arg1,pp("as",arg2)))),

 'dismiss-02': # ARG0:labeller / ARG1:labelled / ARG2:labelled as [dismiss.xml]
   LexSem("V","dismiss",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dismiss"),arg1,pp("as",arg2)))),

 'dismount-01': # ARG0:former rider / ARG1:horse (or other vehicle) [dismount.xml]
   LexSem("V","dismount",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dismount"),pp("from",arg1)))),

 'disobey-01': # ARG0:disobeyer / ARG1:rule or rule-giver [disobey.xml]
   LexSem("V","disobey",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("disobey"),arg1))),

 'disorganize-01': # ARG0:causer, agent / ARG1:entity disorganized / ARG2:result, attribute of arg 1 [disorganize.xml]
   LexSem("V","disorganize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("disorganize"),arg1,pp("into",arg2)))),

 'disown-01': # ARG0:agent, disowner / ARG1:theme, thing disowned [disown.xml]
   LexSem("V","disown",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("disown"),arg1))),

 'disparage-01': # ARG0:talker, agent / ARG1:victim [disparage.xml]
   LexSem("V","disparage",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("disparage"),arg1))),

 'dispatch-01': # ARG0:sender, agent / ARG1:entity dispatched / ARG2:dispatched to [dispatch.xml]
   LexSem("V","dispatch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dispatch"),arg1,pp("to",arg2)))),

 'dispel-01': # ARG0:agent, causer / ARG1:entity dispelled [dispel.xml]
   LexSem("V","dispel",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dispel"),arg1))),

 'dispense-01': # ARG0:agent, entity causing something to end / ARG1:thing ending [dispense.xml]
   LexSem("V","dispense",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dispense"),pp("with",arg1)))),

 'dispense-02': # ARG0:dispenser / ARG1:thing dispensed / ARG2:dispensed to [dispense.xml]
   LexSem("V","dispense",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dispense"),arg1,pp("to",arg2)))),

 'disperse-01': # ARG0:scatterer, agent / ARG1:entity dispersed [disperse.xml]
   LexSem("V","disperse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("disperse"),pp("about",arg1)))),

 'dispirit-01': # ARG0:causer of depression / ARG1:entity getting depressed / ARG2:instrument, if causer also present [dispirit.xml]
   LexSem("V","dispirit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dispirit"),arg1,arg2))),

 'displace-01': # ARG0:mover / ARG1:moved / ARG2:place [displace.xml]
   LexSem("V","displace",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("displace"),arg1,pp("in",arg2)))),

 'display-01': # ARG0:displayer, agent / ARG1:entity displayed / ARG2:location / ARG3:displayed to whom? Seer of thing displayed [display.xml]
   LexSem("V","display",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("display"),arg1,pp("on",arg2),arg3))),

 'displease-01': # ARG0:Stimulus / ARG1:experiencer [displease.xml]
   LexSem("V","displease",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("displease"),arg1))),

 'dispose-01': # ARG0:agent, entity getting rid of something / ARG1:thing gotten rid of / ARG2:instrument or manner, if separate from agent [dispose.xml]
   LexSem("V","dispose",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dispose"),pp("of",arg1),pp("with",arg2)))),

 'dispose-02': # ARG0:causer of disposition / ARG1:one prepared, with a disposition / ARG2:prepared for what, kind of disposition [dispose.xml]
   LexSem("V","dispose",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dispose"),arg1,pp("to",arg2)))),

 'dispossess-01': # ARG0:entity depriving / ARG1:thing being deprived / ARG2:possession; deprived from [dispossess.xml]
   LexSem("V","dispossess",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dispossess"),arg1,pp("of",arg2)))),

 'disprove-01': # ARG0:demonstrator of falseness, agent / ARG1:false thing [disprove.xml]
   LexSem("V","disprove",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("disprove"),arg1))),

 'dispute-01': # ARG0:first (or all) arguer(s) / ARG1:second arguer / ARG2:topic [dispute.xml]
   LexSem("V","dispute",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dispute"),pp("with",arg1),arg2))),

 'disqualify-01': # ARG0:declarer, agent / ARG1:entity disqualified / ARG2:entity disqualified from [disqualify.xml]
   LexSem("V","disqualify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("disqualify"),arg1,pp("from",arg2)))),

 'disquiet-01': # ARG0:causer of disquiet / ARG1:disquieted / ARG2:instrument or manner if separate from arg 0 [disquiet.xml]
   LexSem("V","disquiet",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("disquiet"),arg1,pp("by",arg2)))),

 'disregard-01': # ARG0:entity not paying attention / ARG1:non-focus [disregard.xml]
   LexSem("V","disregard",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("disregard"),arg1))),

 'disrespect-01': # ARG0:agent / ARG1:theme, thing no respect shown for [disrespect.xml]
   LexSem("V","disrespect",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("disrespect"),arg1))),

 'disrobe-01': # ARG0:person removing clothes / ARG1:person wearing clothes / ARG2:attribute [disrobe.xml]
   LexSem("V","disrobe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("disrobe"),arg1,arg2))),

 'disrupt-01': # ARG0:disrupter, agent / ARG1:entity disrupted [disrupt.xml]
   LexSem("V","disrupt",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("disrupt"),arg1))),

 'dissatisfy-01': # ARG0:Stimulus of dissatisfaction / ARG1:dissatisfied party [dissatisfy.xml]
   LexSem("V","dissatisfy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dissatisfy"),arg1))),

 'dissect-01': # ARG0:mad scientist, agent / ARG1:entity dissected [dissect.xml]
   LexSem("V","dissect",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dissect"),arg1))),

 'dissemble-01': # ARG0:person feigning [dissemble.xml]
   LexSem("V","dissemble",[":ARG0"],lambda arg0:S(arg0,VP(V("dissemble")))),

 'disseminate-01': # ARG0:scatterer, agent / ARG1:thing spread [disseminate.xml]
   LexSem("V","disseminate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("disseminate"),arg1))),

 'dissent-01': # ARG0:disagreer, agent / ARG1:disagreement, dissent from [dissent.xml]
   LexSem("V","dissent",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dissent"),pp("from",arg1)))),

 'dissimilate-01': # ARG0:causal agent / ARG1:entity made less similar / ARG2:entity arg 1 is made less similar from [dissimilate.xml]
   LexSem("V","dissimilate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dissimilate"),arg1,arg2))),

 'dissimulate-01': # ARG0:person feigning / ARG1:motives, feelings, etc. hidden by arg 0 [dissimulate.xml]
   LexSem("V","dissimulate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dissimulate"),arg1))),

 'dissipate-01': # ARG0:cause of dissipation / ARG1:thing becoming undense [dissipate.xml]
   LexSem("V","dissipate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dissipate"),arg1))),

 'dissociate-01': # ARG0:causer of non-association, agent / ARG1:thing not associated / ARG2:separated from [dissociate.xml]
   LexSem("V","dissociate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dissociate"),arg1,pp("from",arg2)))),

 'dissolve-01': # ARG0:causer, agent / ARG1:thing dissolving / ARG2:medium, such as water / ARG3:into components [dissolve.xml]
   LexSem("V","dissolve",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("dissolve"),arg1,pp("in",arg2),pp("into",arg3)))),

 'dissuade-01': # ARG0:convincer / ARG1:impelled (non)agent / ARG2:impelled (non)action [dissuade.xml]
   LexSem("V","dissuade",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dissuade"),arg1,pp("from",arg2)))),

 'distance-01': # ARG0:causer of distance / ARG1:first thing / ARG2:second thing [distance.xml]
   LexSem("V","distance",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("distance"),arg1,pp("from",arg2)))),

 'distemper-01': # ARG0:causer of pigmentation / ARG1:thing pigmented, colored / ARG2:the color itself [distemper.xml]
   LexSem("V","distemper",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("distemper"),arg1,arg2))),

 'distend-01': # ARG0:expander / ARG1:distended thing [distend.xml]
   LexSem("V","distend",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("distend"),arg1))),

 'distill-01': # ARG0:remover of impurities, agent / ARG1:impurities / ARG2:source, pure substance [distill.xml]
   LexSem("V","distill",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("distill"),arg1,arg2))),

 'distinguish-01': # ARG0:entity causing separation / ARG1:thing(s) being divided / ARG2:source, separated from, if separate from arg1 [distinguish.xml]
   LexSem("V","distinguish",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("distinguish"),arg1,pp("from",arg2)))),

 'distort-01': # ARG0:alterer, agent / ARG1:thing distorted [distort.xml]
   LexSem("V","distort",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("distort"),arg1))),

 'distract-01': # ARG0:agent or Stimulus / ARG1:entity distracted / ARG2:entity distracted from [distract.xml]
   LexSem("V","distract",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("distract"),arg1,pp("from",arg2)))),

 'distrain-01': # ARG0:agent, confiscator / ARG1:Commodity taken [distrain.xml]
   LexSem("V","distrain",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("distrain"),arg1))),

 'distress-01': # ARG0:cause / ARG1:distressed entity / ARG2:instrument, if separate from arg0 [distress.xml]
   LexSem("V","distress",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("distress"),arg1,arg2))),

 'distribute-01': # ARG0:distributor / ARG1:thing distributed / ARG2:distributed to [distribute.xml]
   LexSem("V","distribute",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("distribute"),arg1,pp("to",arg2)))),

 'distrust-01': # ARG0:distruster, Experiencer / ARG1:something / ARG2:attribute [distrust.xml]
   LexSem("V","distrust",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("distrust"),arg1,arg2))),

 'disturb-01': # ARG0:disturber / ARG1:disturbed / ARG2:instrument, if separate from arg0 [disturb.xml]
   LexSem("V","disturb",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("disturb"),arg1,arg2))),

 'ditch-01': # ARG0:ditcher / ARG1:entity left behind, run out on [ditch.xml]
   LexSem("V","ditch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ditch"),arg1))),

 'dither-01': # ARG0:ditherer [dither.xml]
   LexSem("V","dither",[":ARG0"],lambda arg0:S(arg0,VP(V("dither")))),

 'dive-01': # ARG0:diver / ARG1:area / ARG2:dive for [dive.xml]
   LexSem("V","dive",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dive"),arg1,pp("for",arg2)))),

 'dive-02': # ARG1:thing falling / ARG2:extent / ARG3:start point / ARG4:end point [dive.xml]
   LexSem("V","dive",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("dive"),arg2,pp("from",arg3),pp("to",arg4)))),

 'diverge-01': # ARG0:entities diverging / ARG1:second entity, diverged from [diverge.xml]
   LexSem("V","diverge",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("diverge"),pp("of",arg1)))),

 'diversify-01': # ARG0:causal agent / ARG1:thing becoming diverse / ARG2:destination / ARG3:source, start point [diversify.xml]
   LexSem("V","diversify",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("diversify"),arg1,pp("into",arg2),pp("beyond",arg3)))),

 'divert-01': # ARG0:Stimulus of turning / ARG1:thing turning / ARG2:from / ARG3:to [divert.xml]
   LexSem("V","divert",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("divert"),arg1,pp("from",arg2),pp("to",arg3)))),

 'divest-01': # ARG0:entity removing / ARG1:thing being removed / ARG2:removed from [divest.xml]
   LexSem("V","divest",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("divest"),arg1,arg2))),

 'divide-01': # ARG0:entity performing calculation / ARG1:first operand / ARG2:second operand, divided-by / ARG3:resulting quantity, answer to math problem [divide.xml]
   LexSem("V","divide",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("divide"),arg1,pp("by",arg2),pp("to",arg3)))),

 'divide-02': # ARG0:topic/causer/agent of division / ARG1:separated entity / ARG2:divided among/ between / ARG3:other entity separated from [divide.xml]
   LexSem("V","divide",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("divide"),arg1,pp("into",arg2),arg3))),

 'divide-up-03': # ARG0:agent, divider / ARG1:entity divided up 2 / ARG2:smaller units arg 1 is divided into/among [divide.xml]
   LexSem("V","divide",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("divide"),Adv("up"),arg1,pp("into",arg2)))),

 'divorce-01': # ARG0:initiator of end of marriage, agent / ARG1:ex-spouse [divorce.xml]
   LexSem("V","divorce",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("divorce"),arg1))),

 'divorce-02': # ARG0:causer of separation, agent / ARG1:entity separated / ARG2:entity separated from [divorce.xml]
   LexSem("V","divorce",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("divorce"),arg1,pp("from",arg2)))),

 'divulge-01': # ARG0:Sayer / ARG1:Utterance / ARG2:Hearer [divulge.xml]
   LexSem("V","divulge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("divulge"),arg1,arg2))),

 'divvy-up-01': # ARG0:divider, agent / ARG1:thing divided / ARG2:portions, recipients [divvy.xml]
   LexSem("V","divvy",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("divvy"),Adv("up"),arg1,pp("to",arg2)))),

 'dizzy-01': # ARG0:causer of dizziness / ARG1:dizzy entity [dizzy.xml]
   LexSem("V","dizzy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dizzy"),arg1))),

 'do-01': #  [do.xml]
   LexSem("V","do",[],lambda :S(VP(V("do")))),

 'do-02': # ARG0:agent, doer / ARG1:thing done / ARG2:benefactive, done for or about / ARG3:instrumental / ARG4:comitative, companion while doing [do.xml]
   LexSem("V","do",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("do"),arg1,pp("with",arg2),arg3,arg4))),

 'do-04': # ARG0:doer, usually  *PRO* / ARG1:thing with which something has to do, "with..." phrase / ARG2:thing done, usually "nothing" "something" quantitative phrase [do.xml]
   LexSem("V","do",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("do"),pp("with",arg1),arg2))),

 'do-06': # ARG1:doomed entity [do.xml]
   LexSem("V","do",[":ARG1"],lambda arg1:S(arg1,VP(V("do")))),

 'do-LV': #  [do.xml]
   LexSem("V","do",[],lambda :S(VP(V("do")))),

 'do-away-05': # ARG0:eliminator / ARG1:eliminated [do.xml]
   LexSem("V","do",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("do"),Adv("away"),pp("with",arg1)))),

 'do-in-03': # ARG0:killer / ARG1:corpse [do.xml]
   LexSem("V","do",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("do"),Adv("in"),arg1))),

 'dock-01': # ARG0:agent, docker / ARG1:thing docked, ship / ARG2:Destination (the dock) [dock.xml]
   LexSem("V","dock",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dock"),arg1,pp("in",arg2)))),

 'doctor-01': # ARG0:causer of change, agent / ARG1:entity doctored [doctor.xml]
   LexSem("V","doctor",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("doctor"),arg1))),

 'document-01': # ARG0:provider of evidence, agent / ARG1:thing documented [document.xml]
   LexSem("V","document",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("document"),arg1))),

 'dodder-01': # ARG1:entity moving, dodderer / ARG2:start point / ARG3:end point / ARG4:path [dodder.xml]
   LexSem("V","dodder",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("dodder"),arg2,arg3,arg4))),

 'dodge-01': # ARG0:avoider / ARG1:thing avoided [dodge.xml]
   LexSem("V","dodge",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dodge"),arg1))),

 'doff-01': # ARG0:remover / ARG1:clothing removed / ARG2:removed from / ARG3:in exchange for, clothing put on instead [doff.xml]
   LexSem("V","doff",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("doff"),arg1,arg2,pp("for",arg3)))),

 'dog-01': # ARG0:thing following and harassing / ARG1:thing followed and harassed [dog.xml]
   LexSem("V","dog",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dog"),arg1))),

 'dogsled-01': # ARG0:agent (transitive subject) / ARG1:thing moved (intransitive subject, transitive object) / ARG2:locations, or start point / ARG3:destination [dogsled.xml]
   LexSem("V","dogsled",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("dogsled"),arg1,arg2,pp("to",arg3)))),

 'dole-out-01': # ARG0:distributor / ARG1:thing distributed / ARG2:distributed to [dole.xml]
   LexSem("V","dole",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dole"),Adv("out"),arg1,arg2))),

 'doll-01': # ARG0:entity putting on clothes / ARG1:entity dressed up, decorated, wearing clothes / ARG2:clothing itself or attribute; dressed up as what? [doll.xml]
   LexSem("V","doll",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("doll"),arg1,pp("in",arg2)))),

 'doll-up-02': # ARG0:entity putting on clothes / ARG1:entity dressed up, decorated, wearing clothes / ARG2:clothing itself or attribute; dressed up as what? [doll.xml]
   LexSem("V","doll",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("doll"),Adv("up"),arg1,pp("in",arg2)))),

 'dollarize-01': # ARG0:introducer / ARG1:introduced to [dollarize.xml]
   LexSem("V","dollarize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dollarize"),arg1))),

 'domesticate-01': # ARG0:tamer / ARG1:formerly wild beast / ARG2:instrument [domesticate.xml]
   LexSem("V","domesticate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("domesticate"),arg1,pp("with",arg2)))),

 'dominate-01': # ARG0:dominator / ARG1:entity dominated [dominate.xml]
   LexSem("V","dominate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dominate"),arg1))),

 'don-01': # ARG0:wearer / ARG1:clothing [don.xml]
   LexSem("V","don",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("don"),arg1))),

 'donate-01': # ARG0:giver / ARG1:thing given / ARG2:entity given to [donate.xml]
   LexSem("V","donate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("donate"),pp("over",arg1),pp("to",arg2)))),

 'done-08': # ARG0:AGENT only / ARG1:thing completed (NOT an S-node) [do.xml]
   LexSem("V","done",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("done"),pp("with",arg1)))),

 'dong-01': # ARG1:doiging thing [dong.xml]
   LexSem("V","dong",[":ARG1"],lambda arg1:S(arg1,VP(V("dong")))),

 'doodle-01': # ARG0:artist / ARG1:doodle / ARG2:destination [doodle.xml]
   LexSem("V","doodle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("doodle"),arg1,pp("on",arg2)))),

 'doom-01': # ARG0:condemner, agent / ARG1:entity doomed / ARG2:doomed to [doom.xml]
   LexSem("V","doom",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("doom"),arg1,pp("to",arg2)))),

 'dope-01': # ARG0:agent, person doing the doping / ARG1:patient/destination, what/who the dope is being put into / ARG2:the dope, substance that is being added [dope.xml]
   LexSem("V","dope",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dope"),arg1,pp("with",arg2)))),

 'dope-02': # ARG0:agent, smearer / ARG1:destination, thing being slathered with liquid substance / ARG2:liquid substance [dope.xml]
   LexSem("V","dope",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dope"),arg1,pp("with",arg2)))),

 'dope-up-03': # ARG0:agent, administerer of dope / ARG1:patient/destination, thing/person the dope is being put into / ARG2:the dope [dope.xml]
   LexSem("V","dope",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dope"),Adv("up"),arg1,pp("on",arg2)))),

 'dose-01': # ARG0:Doser / ARG1:Thing dosed / ARG2:Dosed with [dose.xml]
   LexSem("V","dose",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dose"),arg1,pp("with",arg2)))),

 'dot-01': # ARG0:who put the dots there / ARG1:entity dotted / ARG2:dots [dot.xml]
   LexSem("V","dot",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dot"),arg1,arg2))),

 'double-01': # ARG0:causer of increase / ARG1:thing increasing, rising / ARG2:attribute of arg 1 / ARG3:start point / ARG4:end point [double.xml]
   LexSem("V","double",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("double"),arg1,pp("in",arg2),pp("from",arg3),pp("to",arg4)))),

 'double-02': # ARG0:actor / ARG1:role [double.xml]
   LexSem("V","double",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("double"),pp("as",arg1)))),

 'doublecross-01': # ARG0:deceiver / ARG1:deceived [doublecross.xml]
   LexSem("V","double-cross",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("double-cross"),arg1))),

 'doublewrap-01': # ARG0:cause of wrapping / ARG1:thing wrapped (ie, gift) / ARG2:wrapper (ie, paper) [doublewrap.xml]
   LexSem("V","double-wrap",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("double-wrap"),arg1,arg2))),

 'doubt-01': # ARG0:disbeliever / ARG1:disbelief [doubt.xml]
   LexSem("V","doubt",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("doubt"),arg1))),

 'douse-01': # ARG0:douser / ARG1:thing doused / ARG2:liquid, doused with what? [douse.xml]
   LexSem("V","douse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("douse"),arg1,pp("in",arg2)))),

 'dovetail-01': # ARG1:thing dovetailing / ARG2:with what [dovetail.xml]
   LexSem("V","dovetail",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("dovetail"),pp("with",arg2)))),

 'down-01': # ARG0:causer / ARG1:faller [down.xml]
   LexSem("V","down",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("down"),arg1))),

 'down-02': # ARG0:eater / ARG1:eaten [down.xml]
   LexSem("V","down",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("down"),arg1))),

 'downgrade-01': # ARG0:replacer / ARG1:old thing / ARG2:new thing [downgrade.xml]
   LexSem("V","downgrade",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("downgrade"),arg1,pp("to",arg2)))),

 'downgrade-02': # ARG0:causer of worsening, agent / ARG1:thing worsening / ARG2:amount, EXT / ARG3:start point / ARG4:end point [downgrade.xml]
   LexSem("V","downgrade",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("downgrade"),arg1,arg2,arg3,arg4))),

 'downlink-01': # ARG0:downlinker, agent / ARG1:program downlinked / ARG2:Initial_Location / ARG3:destination [downlink.xml]
   LexSem("V","downlink",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("downlink"),arg1,pp("from",arg2),arg3))),

 'download-01': # ARG0:downloader, agent / ARG1:file or program downloaded / ARG2:storage device, downloaded to where? [download.xml]
   LexSem("V","download",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("download"),arg1,pp("onto",arg2)))),

 'downmodulate-01': # ARG0:intentional agent of downmodulation / ARG1:thing downmodulated (e.g. process) / ARG2:instrument / ARG3:start state, initial level / ARG4:end state, resulting level [downmodulate.xml]
   LexSem("V","downmodulate",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("downmodulate"),arg1,arg2,arg3,arg4))),

 'downplay-01': # ARG0:downplayer, agent / ARG1:thing which is being downplayed [downplay.xml]
   LexSem("V","downplay",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("downplay"),arg1))),

 'downregulate-01': # ARG0:intentional agent of downregulation (e.g. scientist) / ARG1:thing downregulated (e.g. protein or another molecule) / ARG2:instrument (e.g. enzyme) [downregulate.xml]
   LexSem("V","downregulate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("downregulate"),arg1,arg2))),

 'downsize-01': # ARG0:agent, evil corporate monolith / ARG1:theme, peon or company [downsize.xml]
   LexSem("V","downsize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("downsize"),arg1))),

 'doze-01': # ARG0:sleeper [doze.xml]
   LexSem("V","doze",[":ARG0"],lambda arg0:S(arg0,VP(V("doze")))),

 'doze-off-02': # ARG0:sleeper [doze.xml]
   LexSem("V","doze",[":ARG0"],lambda arg0:S(arg0,VP(V("doze"),Adv("off")))),

 'draft-01': # ARG0:drafter, agent / ARG1:plan, entity drafted / ARG2:beneficiary / ARG3:other participant [draft.xml]
   LexSem("V","draft",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("draft"),arg1,pp("for",arg2),pp("with",arg3)))),

 'draft-02': # ARG0:entity doing the choosing, agent / ARG1:entity chosen / ARG2:job or service to be performed / ARG3:source [draft.xml]
   LexSem("V","draft",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("draft"),arg1,pp("to",arg2),pp("from",arg3)))),

 'drag-01': # ARG0:dragger / ARG1:thing dragged / ARG2:direction [drag.xml]
   LexSem("V","drag",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("drag"),arg1,pp("down",arg2)))),

 'drag-on-02': # ARG0:dragger / ARG1:thing dragged / ARG2:direction or path [drag.xml]
   LexSem("V","drag",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("drag"),Adv("on"),arg1,arg2))),

 'drain-01': # ARG0:causative agent / ARG1:container / ARG2:substance [drain.xml]
   LexSem("V","drain",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("drain"),pp("from",arg1),arg2))),

 'drape-01': # ARG0:draper / ARG1:draped, thing covered / ARG2:drapes, cloth [drape.xml]
   LexSem("V","drape",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("drape"),arg1,pp("in",arg2)))),

 'draw-01': # ARG0:artist / ARG1:art / ARG2:benefactive [draw.xml]
   LexSem("V","draw",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("draw"),arg1,pp("for",arg2)))),

 'draw-02': # ARG0:puller / ARG1:thing pulled / ARG2:source [draw.xml]
   LexSem("V","draw",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("draw"),arg1,pp("from",arg2)))),

 'draw-05': # ARG0:armed one / ARG1:weapon / ARG2:adversary [draw.xml]
   LexSem("V","draw",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("draw"),arg1,pp("on",arg2)))),

 'draw-up-03': # ARG0:artist / ARG1:thing drawn / ARG2:benefactive [draw.xml]
   LexSem("V","draw",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("draw"),Adv("up"),arg1,arg2))),

 'draw-up-04': # ARG1:entity in motion [draw.xml]
   LexSem("V","draw",[":ARG1"],lambda arg1:S(arg1,VP(V("draw"),Adv("up")))),

 'draw_line-07': # ARG0:boundary enforcer / ARG1:characteristic of the line / ARG2:first (or all) things on one (or both, if together) side of boundary / ARG3:thing on other side of boundary, if separate [line.xml]
   LexSem("V","draw",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("draw"),arg1,pp("between",arg2),arg3))),

 'drawl-01': # ARG0:speaker / ARG1:utterance / ARG2:listener [drawl.xml]
   LexSem("V","drawl",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("drawl"),arg1,arg2))),

 'dread-01': # ARG0:afraid entity / ARG1:what you're afraid of [dread.xml]
   LexSem("V","dread",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dread"),arg1))),

 'dream-01': # ARG0:dreamer / ARG1:dream [dream.xml]
   LexSem("V","dream",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dream"),pp("about",arg1)))),

 'dream-on-03': # ARG0:dreamer [dream.xml]
   LexSem("V","dream",[":ARG0"],lambda arg0:S(arg0,VP(V("dream"),Adv("on")))),

 'dream-up-02': # ARG0:dreamer / ARG1:thing dreamed up [dream.xml]
   LexSem("V","dream",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dream"),Adv("up"),arg1))),

 'dredge-01': # ARG0:agent, dredger / ARG1:location dredged / ARG2:entity dredged up [dredge.xml]
   LexSem("V","dredge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dredge"),arg1,arg2))),

 'dredge-up-02': # ARG0:Agent, dredger / ARG1:Location dredged, dug / ARG2:Entity dredged up from ground (arg1) [dredge.xml]
   LexSem("V","dredge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dredge"),Adv("up"),pp("from",arg1),arg2))),

 'drench-01': # ARG0:agent, causer of drenching / ARG1:entity drenched / ARG2:liquid, drenched with what? [drench.xml]
   LexSem("V","drench",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("drench"),arg1,pp("in",arg2)))),

 'dress-01': # ARG0:person putting on clothes / ARG1:person wearing clothes / ARG2:attribute [dress.xml]
   LexSem("V","dress",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dress"),arg1,pp("in",arg2)))),

 'dress-down-03': # ARG0:angry entity, agent / ARG1:entity dressed down / ARG2:dress down for [dress.xml]
   LexSem("V","dress",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dress"),Adv("down"),arg1,pp("for",arg2)))),

 'dress-up-02': # ARG0:entity putting on clothes / ARG1:entity dressed up, decorated, wearing clothes / ARG2:clothing itself or attribute; dressed up as what? [dress.xml]
   LexSem("V","dress",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dress"),Adv("up"),arg1,arg2))),

 'dribble-01': # ARG0:dribbler / ARG1:thing being dribbled [dribble.xml]
   LexSem("V","dribble",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dribble"),arg1))),

 'dribble-02': # ARG0:Causer of bouncing, basketball player / ARG1:Thing bouncing, basketball / ARG2:Extent / ARG3:Start point / ARG4:End point [dribble.xml]
   LexSem("V","dribble",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("dribble"),arg1,arg2,arg3,pp("down",arg4)))),

 'drift-01': # ARG1:object in motion [drift.xml]
   LexSem("V","drift",[":ARG1"],lambda arg1:S(arg1,VP(V("drift")))),

 'drill-01': # ARG0:driller, agent / ARG1:thing drilled, gaining holes / ARG2:drill / ARG3:seeking (oil) / ARG4:holes [drill.xml]
   LexSem("V","drill",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("drill"),pp("in",arg1),arg2,pp("for",arg3),arg4))),

 'drill-02': # ARG0:drill sargeant / ARG1:recruits / ARG2:action [drill.xml]
   LexSem("V","drill",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("drill"),arg1,pp("in",arg2)))),

 'drink-01': # ARG0:drinker / ARG1:liquid / ARG2:source of liquid [drink.xml]
   LexSem("V","drink",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("drink"),arg1,pp("from",arg2)))),

 'drink-02': # ARG0:drinker / ARG1:thing saluted [drink.xml]
   LexSem("V","drink",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("drink"),pp("to",arg1)))),

 'drink-up-03': # ARG0:drinker / ARG1:drink [drink.xml]
   LexSem("V","drink",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("drink"),Adv("up"),arg1))),

 'drip-01': # ARG0:causal agent / ARG1:thing dripping, liquid / ARG2:source / ARG3:destination [drip.xml]
   LexSem("V","drip",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("drip"),arg1,pp("from",arg2),pp("into",arg3)))),

 'drip-02': # ARG1:thing dripping / ARG2:descriptor [drip.xml]
   LexSem("V","drip",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("drip"),pp("with",arg2)))),

 'drive-01': # ARG0:driver / ARG1:vehicle or path [drive.xml]
   LexSem("V","drive",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("drive"),arg1))),

 'drive-02': # ARG0:driver / ARG1:thing in motion / ARG2:secondary predication on arg1 [drive.xml]
   LexSem("V","drive",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("drive"),arg1,arg2))),

 'drive-03': # ARG0:Desirer, driven person / ARG1:desired thing, driven to/for what? [drive.xml]
   LexSem("V","drive",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("drive"),pp("to",arg1)))),

 'drizzle-01': # ARG0:loader, agent / ARG1:beast of burden / ARG2:things that gets loaded [drizzle.xml]
   LexSem("V","drizzle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("drizzle"),pp("over",arg1),arg2))),

 'drone-01': # ARG0:droner [drone.xml]
   LexSem("V","drone",[":ARG0"],lambda arg0:S(arg0,VP(V("drone")))),

 'drool-01': # ARG0:drooler / ARG1:drool (cognate object) / ARG2:destination of drool [drool.xml]
   LexSem("V","drool",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("drool"),arg1,pp("on",arg2)))),

 'drool-02': # ARG0:drooler / ARG1:thing lusted after [drool.xml]
   LexSem("V","drool",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("drool"),pp("over",arg1)))),

 'droop-01': # ARG0:agent, causer (predicted) / ARG1:theme [droop.xml]
   LexSem("V","droop",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("droop"),arg1))),

 'drop-01': # ARG0:entity doing the dropping / ARG1:Logical subject, patient, thing falling / ARG2:EXT, amount fallen / ARG3:start point / ARG4:end point, end state of arg1 [drop.xml]
   LexSem("V","drop",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("drop"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'drop-05': # ARG0:remover / ARG1:removed / ARG2:source [drop.xml]
   LexSem("V","drop",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("drop"),arg1,pp("from",arg2)))),

 'drop-06': # ARG0:sycophant, giver / ARG1:names, thing given [drop.xml]
   LexSem("V","drop",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("drop"),arg1))),

 'drop-07': # ARG0:big spender / ARG1:amount of money / ARG2:commodity [drop.xml]
   LexSem("V","drop",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("drop"),arg1,pp("on",arg2)))),

 'drop-by-02': # ARG1:visitor / ARG3:visiting from / ARG4:place visited [drop.xml]
   LexSem("V","drop",[":ARG1",":ARG3",":ARG4"],lambda arg1,arg3,arg4:S(arg1,VP(V("drop"),Adv("by"),arg3,pp("at",arg4)))),

 'drop-off-03': # ARG0:entity doing the dropping / ARG1:entity being dropped off / ARG2:destination, end state [drop.xml]
   LexSem("V","drop",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("drop"),Adv("off"),arg1,pp("at",arg2)))),

 'drop-out-04': # ARG0:quitter / ARG1:thing quit (usually of-phrase) [drop.xml]
   LexSem("V","drop",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("drop"),Adv("out"),pp("of",arg1)))),

 'drown-01': # ARG0:entity covering / ARG1:entity covered [drown.xml]
   LexSem("V","drown",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("drown"),arg1))),

 'drown-02': # ARG0:killer / ARG1:person drowned [drown.xml]
   LexSem("V","drown",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("drown"),arg1))),

 'drown-out-03': # ARG0:a louder sound / ARG1:an imperceptible sound [drown.xml]
   LexSem("V","drown",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("drown"),Adv("out"),arg1))),

 'drowse-01': # ARG0:drowsy entity [drowse.xml]
   LexSem("V","drowse",[":ARG0"],lambda arg0:S(arg0,VP(V("drowse")))),

 'drug-01': # ARG0:applier of drugs / ARG1:druggie / ARG2:drug [drug.xml]
   LexSem("V","drug",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("drug"),arg1,pp("with",arg2)))),

 'drug_up-02': # ARG0:drugger / ARG1:patient/victim / ARG2:drug [drug.xml]
   LexSem("V","drug-up",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("drug-up"),arg1,pp("on",arg2)))),

 'drum-02': # ARG0:agentive drummer / ARG1:instrument / ARG2:drum surface [drum.xml]
   LexSem("V","drum",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("drum"),arg1,pp("on",arg2)))),

 'drum-up-01': # ARG0:gatherer, agent / ARG1:thing brought about [drum.xml]
   LexSem("V","drum",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("drum"),Adv("up"),arg1))),

 'dry-02': # ARG0:cause of dryness / ARG1:moistureless thing / ARG2:liquid/moisture that is lacking [dry.xml]
   LexSem("V","dry",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dry"),arg1,arg2))),

 'dry-out-03': # ARG0:agent or cause, dry-er / ARG1:thing losing moisture [dry.xml]
   LexSem("V","dry",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dry"),Adv("out"),arg1))),

 'dry-up-01': # ARG0:entity causing unproductivity, agent / ARG1:entity dried up [dry.xml]
   LexSem("V","dry",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dry"),Adv("up"),arg1))),

 'drydock-01': # ARG0:docker / ARG1:docked (boat) / ARG2:drydock, location [drydock.xml]
   LexSem("V","drydock",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("drydock"),arg1,arg2))),

 'dub-01': # ARG0:assigner of name, agent / ARG1:thing named / ARG2:name [dub.xml]
   LexSem("V","dub",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dub"),arg1,arg2))),

 'duck-01': # ARG0:evader / ARG1:responsibility [duck.xml]
   LexSem("V","duck",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("duck"),arg1))),

 'duel-01': # ARG0:first dueler / ARG1:second dueler / ARG2:spoils or point of contention [duel.xml]
   LexSem("V","duel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("duel"),arg1,pp("over",arg2)))),

 'dull-01': # ARG0:causer of dullness / ARG1:thing getting dull [dull.xml]
   LexSem("V","dull",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dull"),arg1))),

 'dumbfound-01': # ARG0:cause of shock / ARG1:shocked / ARG2:Manner or Instrument if separate from arg 0 [dumbfound.xml]
   LexSem("V","dumbfound",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dumbfound"),arg1,pp("with",arg2)))),

 'dump-01': # ARG0:agent, entity getting rid of something / ARG1:thing gotten rid of / ARG2:instrument or manner, if separate from agent [dump.xml]
   LexSem("V","dump",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dump"),arg1,arg2))),

 'dunk-01': # ARG0:dunker / ARG1:thing dunked / ARG2:destination (dunked in) [dunk.xml]
   LexSem("V","dunk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dunk"),arg1,pp("in",arg2)))),

 'dunk-02': # ARG0:basketball player / ARG1:ball [dunk.xml]
   LexSem("V","dunk",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dunk"),arg1))),

 'dupe-01': # ARG0:tricker / ARG1:tricked / ARG2:trick, induced action [dupe.xml]
   LexSem("V","dupe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dupe"),arg1,pp("into",arg2)))),

 'duplicate-01': # ARG0:copyist, agent / ARG1:original [duplicate.xml]
   LexSem("V","duplicate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("duplicate"),arg1))),

 'dust-01': # ARG0:agent, sprinkler / ARG1:dustlike substance / ARG2:sprinkled-upon [dust.xml]
   LexSem("V","dust",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dust"),pp("with",arg1),arg2))),

 'dust-02': # ARG0:remover of dust, agent / ARG1:surface [dust.xml]
   LexSem("V","dust",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dust"),arg1))),

 'dust-off-03': # ARG0:agent / ARG1:surface [dust.xml]
   LexSem("V","dust",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dust"),Adv("off"),arg1))),

 'dwarf-01': # ARG0:larger thing / ARG1:smaller thing [dwarf.xml]
   LexSem("V","dwarf",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dwarf"),arg1))),

 'dwell-01': # ARG0:dweller, inhabitant, entity in discourse / ARG1:location, place, dwelling, topic [dwell.xml]
   LexSem("V","dwell",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dwell"),pp("on",arg1)))),

 'dwindle-01': # ARG1:thing becoming less / ARG2:EXT or MNR / ARG3:start point / ARG4:end point [dwindle.xml]
   LexSem("V","dwindle",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("dwindle"),arg2,arg3,arg4))),

 'dye-01': # ARG0:causer of coloration / ARG1:thing with color / ARG2:the color itself [dye.xml]
   LexSem("V","dye",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dye"),arg1,arg2))),

 'dyke-01': # ARG0:causative agent, digger of dyke / ARG1:thing enclosed by dyke [dyke.xml]
   LexSem("V","dyke",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("dyke"),arg1))),

 'dysregulate-01': # ARG0:agent of dysregulation (e.g. scientist) / ARG1:thing dysregulated (e.g. signaling) / ARG2:instrument (e.g. protein, drug) [dysregulate.xml]
   LexSem("V","dysregulate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("dysregulate"),arg1,arg2))),

 'earmark-01': # ARG0:setter aside, agent / ARG1:entity earmarked / ARG2:earmarked for [earmark.xml]
   LexSem("V","earmark",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("earmark"),arg1,pp("for",arg2)))),

 'earn-01': # ARG0:earner / ARG1:wages / ARG2:benefactive / ARG3:source [earn.xml]
   LexSem("V","earn",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("earn"),arg1,arg2,pp("from",arg3)))),

 'ease-01': # ARG1:Logical subject, patient, thing declining / ARG2:EXT, amount declined by / ARG3:start point / ARG4:end point, end state [ease.xml]
   LexSem("V","ease",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("ease"),arg2,pp("from",arg3),pp("to",arg4)))),

 'ease-02': # ARG0:thing helping / ARG1:thing being helped [ease.xml]
   LexSem("V","ease",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ease"),arg1))),

 'ease-03': # ARG0:causer of motion, agent / ARG1:entity in motion / ARG3:start point / ARG4:end point [ease.xml]
   LexSem("V","ease",[":ARG0",":ARG1",":ARG3",":ARG4"],lambda arg0,arg1,arg3,arg4:S(arg0,VP(V("ease"),arg1,arg3,pp("into",arg4)))),

 'ease-06': # ARG0:agent, monetary authority responsible for QE / ARG1:monetary amount [ease.xml]
   LexSem("V","ease",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ease"),pp("of",arg1)))),

 'ease-up-04': # ARG0:thing helping / ARG1:thing being helped [ease.xml]
   LexSem("V","ease",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ease"),Adv("up"),pp("on",arg1)))),

 'eat-01': # ARG0:consumer, eater / ARG1:meal [eat.xml]
   LexSem("V","eat",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("eat"),arg1))),

 'eat-away-03': # ARG0:consumer, eater / ARG1:meal [eat.xml]
   LexSem("V","eat",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("eat"),Adv("away"),arg1))),

 'eat-up-02': # ARG0:consumer, eater / ARG1:meal [eat.xml]
   LexSem("V","eat",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("eat"),Adv("up"),arg1))),

 'eavesdrop-01': # ARG0:listener / ARG1:listened-to [eavesdrop.xml]
   LexSem("V","eavesdrop",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("eavesdrop"),pp("on",arg1)))),

 'ebb-01': # ARG1:thing getting smaller [ebb.xml]
   LexSem("V","ebb",[":ARG1"],lambda arg1:S(arg1,VP(V("ebb")))),

 'echo-01': # ARG0:repeater, imitator / ARG1:original [echo.xml]
   LexSem("V","echo",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("echo"),arg1))),

 'eclipse-01': # ARG0:eclipser / ARG1:eclipsed [eclipse.xml]
   LexSem("V","eclipse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("eclipse"),arg1))),

 'economize-01': # ARG0:entity strapped for cash, agent / ARG1:domain of expenditures [economize.xml]
   LexSem("V","economize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("economize"),pp("on",arg1)))),

 'eddy-01': # ARG1:Water, liquid in motion [eddy.xml]
   LexSem("V","eddy",[":ARG1"],lambda arg1:S(arg1,VP(V("eddy")))),

 'edge-01': # ARG1:Logical subject, patient, thing moving / ARG2:EXT, amount moved / ARG3:start point / ARG4:end point / ARG5:direction--REQUIRED [edge.xml]
   LexSem("V","edge",[":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg1,arg2,arg3,arg4,arg5:S(arg1,VP(V("edge"),arg2,pp("from",arg3),pp("to",arg4),pp("up",arg5)))),

 'edge-03': # ARG0:decorator, edger / ARG1:object edged / ARG2:edged with what? [edge.xml]
   LexSem("V","edge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("edge"),arg1,pp("with",arg2)))),

 'edge-out-02': # ARG0:winner / ARG1:loser / ARG2:for what, prize [edge.xml]
   LexSem("V","edge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("edge"),Adv("out"),arg1,pp("for",arg2)))),

 'edify-01': # ARG0:builder / ARG1:entity built up / ARG2:subject matter enlightened about, topic / ARG3:instrument [edify.xml]
   LexSem("V","edify",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("edify"),arg1,pp("as",arg2),pp("by",arg3)))),

 'edit-01': # ARG0:editor / ARG1:text [edit.xml]
   LexSem("V","edit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("edit"),arg1))),

 'editorialize-01': # ARG0:author / ARG1:opinion / ARG2:subject/source of opinion [editorialize.xml]
   LexSem("V","editorialize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("editorialize"),arg1,arg2))),

 'educate-01': # ARG0:teacher / ARG1:student(s) / ARG2:subject [educate.xml]
   LexSem("V","educate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("educate"),arg1,arg2))),

 'eek-01': # ARG0:entity in motion / ARG1:destination / ARG2:source, point of departure [eek.xml]
   LexSem("V","eek",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("eek"),arg1,arg2))),

 'efface-01': # ARG0:Causer of erasing / ARG1:Thing erased / ARG2:Instrument [efface.xml]
   LexSem("V","efface",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("efface"),arg1,pp("with",arg2)))),

 'efface-02': # ARG0:remover / ARG1:thing removed [efface.xml]
   LexSem("V","efface",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("efface"),arg1))),

 'efface-03': # ARG0:Causer of inconspicuousness / ARG1:Entity made inconspicuous [efface.xml]
   LexSem("V","efface",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("efface"),arg1))),

 'effect-03': # ARG0:cause / ARG1:effect, usually a change [affect.xml]
   LexSem("V","effect",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("effect"),arg1))),

 'effectuate-01': # ARG0:cause / ARG1:thing brought about or accomplished [effectuate.xml]
   LexSem("V","effectuate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("effectuate"),arg1))),

 'effeminate-01': # ARG0:agent, cause / ARG1:thing effeminiated [effeminate.xml]
   LexSem("V","effeminate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("effeminate"),arg1))),

 'effervesce-01': # ARG1:patient, thing effervescing [effervesce.xml]
   LexSem("V","effervesce",[":ARG1"],lambda arg1:S(arg1,VP(V("effervesce")))),

 'effort-01': # ARG0:Agent/Entity Trying / ARG1:thing tried [effort.xml]
   LexSem("V","make-an-effort",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("make-an-effort"),pp("to",arg1)))),

 'effuse-01': # ARG0:cause or source of what is given off / ARG1:substance given off, radiated [effuse.xml]
   LexSem("V","effuse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("effuse"),arg1))),

 'effuse-02': # ARG0:speaker / ARG1:utterance / ARG2:listener [effuse.xml]
   LexSem("V","effuse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("effuse"),pp("over",arg1),arg2))),

 'ejaculate-01': # ARG0:speaker / ARG1:utterance [ejaculate.xml]
   LexSem("V","ejaculate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ejaculate"),arg1))),

 'ejaculate-02': # ARG0:Experiencer of orgasm / ARG1:Cognate object (mention of ejaculate itself) [ejaculate.xml]
   LexSem("V","ejaculate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ejaculate"),arg1))),

 'eject-01': # ARG0:thrower out, agent / ARG1:thing thrown / ARG2:ejected from [eject.xml]
   LexSem("V","eject",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("eject"),arg1,pp("from",arg2)))),

 'elaborate-01': # ARG0:speaker / ARG1:subject gone into detail on [elaborate.xml]
   LexSem("V","elaborate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("elaborate"),pp("on",arg1)))),

 'elapse-01': # ARG1:time gone by [elapse.xml]
   LexSem("V","elapse",[":ARG1"],lambda arg1:S(arg1,VP(V("elapse")))),

 'elate-01': # ARG0:agent or causer / ARG1:experiencer / ARG2:instrument, if diff from cause in Arg0 [elate.xml]
   LexSem("V","elate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("elate"),arg1,arg2))),

 'elbow-01': # ARG0:elbower / ARG1:entity being elbowed [elbow.xml]
   LexSem("V","elbow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("elbow"),arg1))),

 'elect-01': # ARG0:voters / ARG1:candidate / ARG2:office or position [elect.xml]
   LexSem("V","elect",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("elect"),arg1,arg2))),

 'elect-02': # ARG0:Chooser / ARG1:Thing chosen / ARG2:Group or source chosen from / ARG3:Benefactive / ARG4:Secondary attribute of Arg1 [elect.xml]
   LexSem("V","elect",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("elect"),pp("to",arg1),arg2,arg3,arg4))),

 'electrify-01': # ARG0:entity adding electricity, agent / ARG1:electrified entity [electrify.xml]
   LexSem("V","electrify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("electrify"),arg1))),

 'electrocute-01': # ARG0:Causer of electrocution / ARG1:electrocuted entity / ARG2:instrument, electrocuted with what device? [electrocute.xml]
   LexSem("V","electrocute",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("electrocute"),arg1,pp("with",arg2)))),

 'electroplate-01': # ARG0:causer of electroplating / ARG1:thing plated / ARG2:plated with what? [electroplate.xml]
   LexSem("V","electroplate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("electroplate"),arg1,pp("with",arg2)))),

 'elevate-01': # ARG0:causer of upward motion, agent / ARG1:entity elevated / ARG2:endpoint [elevate.xml]
   LexSem("V","elevate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("elevate"),arg1,pp("to",arg2)))),

 'elicit-01': # ARG0:cause / elicitor / ARG1:thing elicited / ARG2:source, what elicited from [elicit.xml]
   LexSem("V","elicit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("elicit"),arg1,arg2))),

 'eliminate-01': # ARG0:entity removing / ARG1:thing being removed / ARG2:removed from [eliminate.xml]
   LexSem("V","eliminate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("eliminate"),arg1,arg2))),

 'elongate-01': # ARG0:causer, agent / ARG1:thing getting longer [elongate.xml]
   LexSem("V","elongate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("elongate"),arg1))),

 'elucidate-01': # ARG0:causer of clarification / ARG1:thing becoming clearer / ARG2:explained to [elucidate.xml]
   LexSem("V","elucidate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("elucidate"),arg1,arg2))),

 'elude-01': # ARG0:avoider / ARG1:thing avoided [elude.xml]
   LexSem("V","elude",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("elude"),arg1))),

 'elute-01': # ARG0:agent; causer of extraction (e.g. scientist) / ARG1:thing extracted, eluate / ARG2:extracted from, eluent / ARG3:instrument of elution, solvent [elute.xml]
   LexSem("V","elute",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("elute"),arg1,arg2,arg3))),

 'emaciate-01': # ARG0:Causer of starvation, agent / ARG1:thing starving / ARG2:instrument or manner if separate from arg 0 [emaciate.xml]
   LexSem("V","emaciate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("emaciate"),arg1,arg2))),

 'email-01': # ARG0:emailer / ARG1:message, email / ARG2:recipient, mailed-to [email.xml]
   LexSem("V","email",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("email"),arg1,arg2))),

 'emanate-01': # ARG0:Cause, agent of emission / ARG1:entity issuing forth / ARG2:source, where substance is emanating from / ARG3:location, where substance is emanating into [emanate.xml]
   LexSem("V","emanate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("emanate"),arg1,pp("from",arg2),arg3))),

 'emancipate-01': # ARG0:cause of freedom, agent / ARG1:entity liberated / ARG2:entity liberated from [emancipate.xml]
   LexSem("V","emancipate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("emancipate"),arg1,arg2))),

 'emasculate-01': # ARG0:causer, agent / ARG1:entity emasculated [emasculate.xml]
   LexSem("V","emasculate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("emasculate"),arg1))),

 'embalm-01': # ARG0:causer of preservation, embalmer / ARG1:thing preserved, embalmed / ARG2:Preserved in or with what? Instrument or Manner [embalm.xml]
   LexSem("V","embalm",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("embalm"),arg1,pp("in",arg2)))),

 'embargo-01': # ARG0:blocker / ARG1:foiled (destination of) trade [embargo.xml]
   LexSem("V","embargo",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("embargo"),arg1))),

 'embark-01': # ARG0:beginner / ARG1:thing begun [embark.xml]
   LexSem("V","embark",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("embark"),pp("on",arg1)))),

 'embarrass-01': # ARG0:causer of shame / ARG1:embarrassed entity / ARG2:instrument, if separate from arg0 [embarrass.xml]
   LexSem("V","embarrass",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("embarrass"),arg1,pp("by",arg2)))),

 'embattle-01': # ARG0:causal agent / ARG1:thing preparing / ARG2:EXT / ARG3:start point / ARG4:end point [embattle.xml]
   LexSem("V","embattle",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("embattle"),arg1,arg2,arg3,arg4))),

 'embed-01': # ARG0:causer, agent / ARG1:entity embedded / ARG2:embedded into [embed.xml]
   LexSem("V","embed",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("embed"),arg1,pp("in",arg2)))),

 'embellish-01': # ARG0:decorator, agent / ARG1:thing decorated, embellished / ARG2:with what [embellish.xml]
   LexSem("V","embellish",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("embellish"),arg1,pp("with",arg2)))),

 'embezzle-01': # ARG0:thief, embezzler / ARG1:money / ARG2:source [embezzle.xml]
   LexSem("V","embezzle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("embezzle"),arg1,pp("from",arg2)))),

 'embitter-01': # ARG0:agent, cause of bitterness / ARG1:thing becoming bitter / ARG2:instrument or manner if separate from arg 0 [embitter.xml]
   LexSem("V","embitter",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("embitter"),arg1,pp("with",arg2)))),

 'emblazon-01': # ARG0:artisan, decorator / ARG1:words emblazoned / ARG2:location, surface emblazoned [emblazon.xml]
   LexSem("V","emblazon",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("emblazon"),arg1,pp("across",arg2)))),

 'embody-01': # ARG1:entity embodied / ARG2:embodied in [embody.xml]
   LexSem("V","embody",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("embody"),arg2))),

 'embolden-01': # ARG0:thing causing boldness / ARG1:thing becoming bold / ARG2:instrument [embolden.xml]
   LexSem("V","embolden",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("embolden"),arg1,arg2))),

 'emboss-01': # ARG0:agent, embosser / ARG1:destination, document / ARG2:theme, signature [emboss.xml]
   LexSem("V","emboss",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("emboss"),arg1,arg2))),

 'embrace-01': # ARG0:includer, agent / ARG1:entity embraced / ARG2:embraced as [embrace.xml]
   LexSem("V","embrace",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("embrace"),arg1,pp("as",arg2)))),

 'embrace-02': # ARG0:hugger / ARG1:person hugged [embrace.xml]
   LexSem("V","embrace",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("embrace"),arg1))),

 'embrocate-01': # ARG0:causer of embrocation, agent / ARG1:entity rubbed / ARG2:rubbed with what? oil or liniment [embrocate.xml]
   LexSem("V","embrocate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("embrocate"),arg1,pp("with",arg2)))),

 'embroider-01': # ARG0:decorator / ARG1:thing decorated / ARG2:image [embroider.xml]
   LexSem("V","embroider",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("embroider"),pp("onto",arg1),arg2))),

 'embroil-01': # ARG0:causer of contention, agent (rare) / ARG1:thing involved in contention / ARG2:contention [embroil.xml]
   LexSem("V","embroil",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("embroil"),arg1,pp("in",arg2)))),

 'emcee-01': # ARG0:MC / ARG1:ceremony [emcee.xml]
   LexSem("V","emcee",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("emcee"),arg1))),

 'emerge-01': # ARG0:thing exiting / ARG1:thing/place exited from [emerge.xml]
   LexSem("V","emerge",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("emerge"),pp("from",arg1)))),

 'emerge-02': # ARG0:thing emerging / ARG1:as what [emerge.xml]
   LexSem("V","emerge",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("emerge"),pp("as",arg1)))),

 'emigrate-01': # ARG0:population / ARG1:source / ARG2:destination [emigrate.xml]
   LexSem("V","emigrate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("emigrate"),pp("from",arg1),pp("to",arg2)))),

 'emit-01': # ARG0:emitting entity / ARG1:thing emitted [emit.xml]
   LexSem("V","emit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("emit"),arg1))),

 'emote-01': # ARG0:expresser [emote.xml]
   LexSem("V","emote",[":ARG0"],lambda arg0:S(arg0,VP(V("emote")))),

 'empathize-01': # ARG0:empathizer / ARG1:empathized with [empathize.xml]
   LexSem("V","empathize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("empathize"),pp("with",arg1)))),

 'emphasize-01': # ARG0:emphasizer / ARG1:utterance / ARG2:hearer [emphasize.xml]
   LexSem("V","emphasize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("emphasize"),arg1,pp("to",arg2)))),

 'emplace-01': # ARG0:putter / ARG1:thing put / ARG2:where put [emplace.xml]
   LexSem("V","emplace",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("emplace"),arg1,arg2))),

 'employ-01': # ARG0:employer / ARG1:employee / ARG2:job [employ.xml]
   LexSem("V","employ",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("employ"),arg1,pp("as",arg2)))),

 'employ-02': # ARG0:user / ARG1:used / ARG2:job, purpose [employ.xml]
   LexSem("V","employ",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("employ"),arg1,pp("to",arg2)))),

 'empower-01': # ARG0:giver of power / ARG1:empowered entity / ARG2:use of power [empower.xml]
   LexSem("V","empower",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("empower"),arg1,pp("to",arg2)))),

 'empty-01': # ARG0:causal agent / ARG1:container / ARG2:substance [empty.xml]
   LexSem("V","empty",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("empty"),arg1,pp("of",arg2)))),

 'emulate-01': # ARG0:agent or entity competing / ARG1:entity emulated [emulate.xml]
   LexSem("V","emulate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("emulate"),arg1))),

 'emulsify-01': # ARG0:agent, causal entity / ARG1:thing made into emulsion / ARG2:instrument or method [emulsify.xml]
   LexSem("V","emulsify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("emulsify"),arg1,arg2))),

 'enable-01': # ARG0:allower / ARG1:action allowed / ARG2:allowed agent [enable.xml]
   LexSem("V","enable",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("enable"),pp("to",arg1),arg2))),

 'enact-01': # ARG0:legislative body, enactor / ARG1:thing enacted / ARG2:redundant mention of law [enact.xml]
   LexSem("V","enact",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("enact"),arg1,pp("into",arg2)))),

 'enamel-01': # ARG0:agent, coverer / ARG1:entity covered in enamel / ARG2:the color, enamel itself [enamel.xml]
   LexSem("V","enamel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("enamel"),arg1,pp("in",arg2)))),

 'encapsulate-01': # ARG0:encaser, agent / ARG1:entity encapsulated [encapsulate.xml]
   LexSem("V","encapsulate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("encapsulate"),arg1))),

 'encase-01': # ARG0:putter / ARG1:thing in a case / ARG2:case [encase.xml]
   LexSem("V","encase",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("encase"),arg1,pp("with",arg2)))),

 'enchain-01': # ARG0:causer of enchainment / ARG1:entity in chains [enchain.xml]
   LexSem("V","enchain",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("enchain"),arg1))),

 'enchant-01': # ARG0:cause, agent / ARG1:enchanted one / ARG2:instrument, if agent is also present [enchant.xml]
   LexSem("V","enchant",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("enchant"),arg1,arg2))),

 'encircle-01': # ARG0:causer of encirclement / ARG1:thing encircling, being around / ARG2:thing surrounded [encircle.xml]
   LexSem("V","encircle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("encircle"),arg1,arg2))),

 'enclose-01': # ARG0:causative agent / ARG1:thing surrounding / ARG2:thing surrounded [enclose.xml]
   LexSem("V","enclose",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("enclose"),arg1,arg2))),

 'encode-01': # ARG0:codemaker, agent / ARG1:message etc. [encode.xml]
   LexSem("V","encode",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("encode"),arg1))),

 'encompass-01': # ARG0:entity encompassing / ARG1:entity encompassed [encompass.xml]
   LexSem("V","encompass",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("encompass"),arg1))),

 'encounter-01': # ARG0:entity encountering something / ARG1:entity encountered [encounter.xml]
   LexSem("V","encounter",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("encounter"),arg1))),

 'encourage-01': # ARG0:convincer / ARG1:impelled agent / ARG2:impelled action [encourage.xml]
   LexSem("V","encourage",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("encourage"),arg1,pp("to",arg2)))),

 'encourage-02': # ARG0:outside agent / ARG1:thing favored / ARG2:instrument [encourage.xml]
   LexSem("V","encourage",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("encourage"),arg1,pp("with",arg2)))),

 'encroach-01': # ARG0:encroacher / ARG1:encroached-(up)on [encroach.xml]
   LexSem("V","encroach",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("encroach"),pp("upon",arg1)))),

 'encrust-01': # ARG0:entity adding crust, agent / ARG1:thing with crust / ARG2:crust [encrust.xml]
   LexSem("V","encrust",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("encrust"),arg1,pp("in",arg2)))),

 'encrypt-01': # ARG0:scrambler, agent / ARG1:information [encrypt.xml]
   LexSem("V","encrypt",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("encrypt"),arg1))),

 'encumber-01': # ARG0:loader, agent of encumberment / ARG1:thing loaded / ARG2:cargo [encumber.xml]
   LexSem("V","encumber",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("encumber"),arg1,pp("with",arg2)))),

 'end-01': # ARG0:Agent/cause of ending / ARG1:Thing ending / ARG2:Subevent or thing that Arg1 ends with [end.xml]
   LexSem("V","end",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("end"),arg1,pp("with",arg2)))),

 'end-02': # ARG1:thing closing / ARG2:EXT, amount-changed-by / ARG3:start point / ARG4:end point [end.xml]
   LexSem("V","end",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("end"),pp("about",arg2),arg3,pp("at",arg4)))),

 'end-up-03': # ARG1:entity changing / ARG2:new state [end.xml]
   LexSem("V","end",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("end"),Adv("up"),pp("with",arg2)))),

 'endanger-01': # ARG0:exposer to danger, agent / ARG1:entity endangered [endanger.xml]
   LexSem("V","endanger",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("endanger"),arg1))),

 'endear-01': # ARG0:Cause of attraction / ARG1:beloved entity / ARG2:endeared by [endear.xml]
   LexSem("V","endear",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("endear"),arg1,pp("to",arg2)))),

 'endeavor-01': # ARG0:tryer, agent / ARG1:proposition [endeavor.xml]
   LexSem("V","endeavor",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("endeavor"),arg1))),

 'endorse-01': # ARG0:supporter / ARG1:thing/person supported / ARG2:for what [endorse.xml]
   LexSem("V","endorse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("endorse"),arg1,pp("for",arg2)))),

 'endorse-02': # ARG0:signer / ARG1:thing signed [endorse.xml]
   LexSem("V","endorse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("endorse"),arg1))),

 'endow-01': # ARG0:giver / ARG1:gift / ARG2:given-to [endow.xml]
   LexSem("V","endow",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("endow"),pp("with",arg1),arg2))),

 'endure-01': # ARG1:experiencer / ARG2:thing endured or period of time [endure.xml]
   LexSem("V","endure",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("endure"),arg2))),

 'energize-01': # ARG0:giver of energy / ARG1:recipient / ARG2:source of energy [energize.xml]
   LexSem("V","energize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("energize"),arg1,pp("with",arg2)))),

 'enervate-01': # ARG0:Stimulus of weakening / ARG1:entity becoming weak [enervate.xml]
   LexSem("V","enervate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("enervate"),arg1))),

 'enflame-01': # ARG0:Stimulus of flame / ARG1:entity flaming [enflame.xml]
   LexSem("V","enflame",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("enflame"),arg1))),

 'enforce-01': # ARG0:enforcer / ARG1:rule(s) [enforce.xml]
   LexSem("V","enforce",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("enforce"),arg1))),

 'engage-01': # ARG0:causer of engagement / ARG1:entity sucked in / ARG2:thing involved in [engage.xml]
   LexSem("V","engage",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("engage"),arg1,pp("in",arg2)))),

 'engender-01': # ARG0:creator, cause / ARG1:creation, effect [engender.xml]
   LexSem("V","engender",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("engender"),arg1))),

 'engineer-01': # ARG0:engineer / ARG1:engineered / ARG2:specific aspect of arg1 being engineered, if in addition to arg1 / ARG3:source material, if in addition to arg1 / ARG4:attribute/purpose of arg1 [engineer.xml]
   LexSem("V","engineer",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("engineer"),arg1,arg2,arg3,pp("to",arg4)))),

 'engrave-01': # ARG0:engraver / ARG1:thing engraved / ARG2:inscription [engrave.xml]
   LexSem("V","engrave",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("engrave"),arg1,pp("with",arg2)))),

 'engross-01': # ARG0:Engrosser / ARG1:Engrossed / ARG2:instrument, when separate from arg0 [engross.xml]
   LexSem("V","engross",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("engross"),arg1,pp("with",arg2)))),

 'engulf-01': # ARG0:entity causing engulfing / ARG1:entity engulfed / ARG2:engulfed in what? actual liquid/entity surrounding arg1 [engulf.xml]
   LexSem("V","engulf",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("engulf"),arg1,pp("with",arg2)))),

 'enhance-01': # ARG0:causer of greatness, agent / ARG1:thing enhanced / ARG2:instrument / ARG3:enhanced by how much [enhance.xml]
   LexSem("V","enhance",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("enhance"),arg1,pp("by",arg2),pp("by",arg3)))),

 'enjoin-01': # ARG0:prohibiter, Agent / ARG1:Theme (action or object being prevented) / ARG2:secondary predication on arg1 or action / ARG3:instrument [enjoin.xml]
   LexSem("V","enjoin",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("enjoin"),arg1,arg2,arg3))),

 'enjoy-01': # ARG0:enjoyer / ARG1:thing enjoyed [enjoy.xml]
   LexSem("V","enjoy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("enjoy"),arg1))),

 'enlarge-01': # ARG0:causer of biggenment / ARG1:thing getting bigger / ARG2:EXT / ARG3:start point / ARG4:end point [enlarge.xml]
   LexSem("V","enlarge",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("enlarge"),arg1,pp("by",arg2),pp("from",arg3),pp("to",arg4)))),

 'enlighten-01': # ARG0:Stimulus of knowledge / ARG1:enlightened entity / ARG2:knowledge itself, topic / ARG3:instrument [enlighten.xml]
   LexSem("V","enlighten",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("enlighten"),arg1,pp("about",arg2),pp("by",arg3)))),

 'enlist-01': # ARG0:signer / ARG1:impelled agent (often subsumed into arg0 / ARG2:impelled action [enlist.xml]
   LexSem("V","enlist",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("enlist"),arg1,pp("in",arg2)))),

 'enliven-01': # ARG0:Stimulus / ARG1:entity animated [enliven.xml]
   LexSem("V","enliven",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("enliven"),arg1))),

 'enquire-01': # ARG0:Inquirer / ARG1:Topic asked about [enquire.xml]
   LexSem("V","enquire",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("enquire"),pp("after",arg1)))),

 'enrage-01': # ARG0:causer of anger, agent / ARG1:angry entity / ARG2:instrument, if separate from arg0 [enrage.xml]
   LexSem("V","enrage",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("enrage"),arg1,pp("with",arg2)))),

 'enrapture-01': # ARG0:cause of rapture, agent / ARG1:Rapt entity / ARG2:instrument, when separate from arg0 [enrapture.xml]
   LexSem("V","enrapture",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("enrapture"),arg1,pp("with",arg2)))),

 'enrich-01': # ARG0:entity adding value, agent / ARG1:thing becoming enriched / ARG2:vitamins (eg) [enrich.xml]
   LexSem("V","enrich",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("enrich"),arg1,pp("with",arg2)))),

 'enroll-01': # ARG0:causer of enrollment, agent / ARG1:entity enrolled / ARG2:enrolled in what [enroll.xml]
   LexSem("V","enroll",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("enroll"),arg1,pp("in",arg2)))),

 'ensconce-01': # ARG0:who put what where, agent / ARG1:entity ensconced / ARG2:place [ensconce.xml]
   LexSem("V","ensconce",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ensconce"),arg1,pp("in",arg2)))),

 'enshrine-01': # ARG0:agent who enshrines / ARG1:entity enshrined / ARG2:shrine itself, enshrined in what? [enshrine.xml]
   LexSem("V","enshrine",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("enshrine"),arg1,pp("in",arg2)))),

 'enslave-01': # ARG0:causer, agent / ARG1:entity enslaved [enslave.xml]
   LexSem("V","enslave",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("enslave"),arg1))),

 'ensnare-01': # ARG0:catcher, agent / ARG1:captured entity [ensnare.xml]
   LexSem("V","ensnare",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ensnare"),arg1))),

 'ensnarl-01': # ARG0:causer of tangle, agent / ARG1:thing getting tangled / ARG2:explicit mention of tangle [ensnarl.xml]
   LexSem("V","ensnarl",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ensnarl"),arg1,pp("in",arg2)))),

 'ensue-01': # ARG1:event / ARG2:other action, cause [ensue.xml]
   LexSem("V","ensue",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("ensue"),pp("from",arg2)))),

 'ensure-01': # ARG0:agent/cause / ARG1:to what (may require concatenation) / ARG2:benefactive [ensure.xml]
   LexSem("V","ensure",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ensure"),arg1,arg2))),

 'entail-01': # ARG0:antecedent / ARG1:consequence [entail.xml]
   LexSem("V","entail",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("entail"),arg1))),

 'entangle-01': # ARG0:causer / ARG1:patient / ARG2:trap, etc [entangle.xml]
   LexSem("V","entangle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("entangle"),arg1,pp("in",arg2)))),

 'enter-01': # ARG0:entity entering / ARG1:place or thing entered [enter.xml]
   LexSem("V","enter",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("enter"),arg1))),

 'enter-02': # ARG0:submitter / ARG1:thing submitted / ARG2:submitted to / ARG3:benefactive [enter.xml]
   LexSem("V","enter",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("enter"),arg1,pp("into",arg2),pp("for",arg3)))),

 'entertain-01': # ARG0:entertainer / ARG1:entertained / ARG2:instrument [entertain.xml]
   LexSem("V","entertain",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("entertain"),arg1,pp("with",arg2)))),

 'entertain-02': # ARG0:considerer / ARG1:considered [entertain.xml]
   LexSem("V","entertain",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("entertain"),arg1))),

 'enthrall-01': # ARG0:agent, causer of interest / ARG1:interested entity / ARG2:Manner or Instrument if separate from arg 0 [enthrall.xml]
   LexSem("V","enthrall",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("enthrall"),arg1,arg2))),

 'enthuse-01': # ARG0:encourager / ARG1:encouraged agent / ARG2:encouraged action [enthuse.xml]
   LexSem("V","enthuse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("enthuse"),arg1,pp("toward",arg2)))),

 'enthuse-02': # ARG0:Inspiration of enthusiasm / ARG1:Enthusiastic entity / ARG2:instrument, if separate from cause [enthuse.xml]
   LexSem("V","enthuse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("enthuse"),arg1,pp("with",arg2)))),

 'entice-01': # ARG0:attractor / ARG1:thing attracted / ARG2:thing attracted to, if separate from attractor / ARG3:instrument, if separate from attractor [entice.xml]
   LexSem("V","entice",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("entice"),arg1,pp("into",arg2),pp("with",arg3)))),

 'entitle-01': # ARG0:allower / ARG1:action allowed / ARG2:explicit allowed-agent [entitle.xml]
   LexSem("V","entitle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("entitle"),pp("to",arg1),arg2))),

 'entitle-02': # ARG0:namer / ARG1:named / ARG2:name [entitle.xml]
   LexSem("V","entitle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("entitle"),arg1,arg2))),

 'entomb-01': # ARG0:who put what where, agent / ARG1:corpse (I hope) / ARG2:tomb [entomb.xml]
   LexSem("V","entomb",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("entomb"),arg1,pp("in",arg2)))),

 'entrance-03': # ARG0:causer of trance, agent / ARG1:victim / ARG2:instrument, when separate from arg 0 [enter.xml]
   LexSem("V","entrance",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("entrance"),arg1,pp("with",arg2)))),

 'entrap-01': # ARG0:trapper / ARG1:thing trapped [entrap.xml]
   LexSem("V","entrap",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("entrap"),arg1))),

 'entreat-01': # ARG0:begger / ARG1:begged / ARG2:begged for [entreat.xml]
   LexSem("V","entreat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("entreat"),arg1,pp("to",arg2)))),

 'entrench-01': # ARG0:thing causing entrenchment / ARG1:entity becoming more firm in its position / ARG2:position [entrench.xml]
   LexSem("V","entrench",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("entrench"),arg1,arg2))),

 'entrust-01': # ARG0:entity giving up control, agent / ARG1:entity entrusted / ARG2:entity entrusted to [entrust.xml]
   LexSem("V","entrust",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("entrust"),arg1,pp("to",arg2)))),

 'entwine-01': # ARG0:causer of mixture / ARG1:first ingredient / ARG2:other(s) [entwine.xml]
   LexSem("V","entwine",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("entwine"),arg1,arg2))),

 'enumerate-01': # ARG0:agent, lister / ARG1:item enumerated / ARG2:enumerated in what group/list [enumerate.xml]
   LexSem("V","enumerate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("enumerate"),arg1,pp("in",arg2)))),

 'enunciate-01': # ARG0:person speaking / ARG1:speech [enunciate.xml]
   LexSem("V","enunciate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("enunciate"),arg1))),

 'envelop-01': # ARG0:causer of covering / ARG1:entity being covered / ARG2:actual cover [envelop.xml]
   LexSem("V","envelop",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("envelop"),arg1,pp("with",arg2)))),

 'envisage-01': # ARG0:thinker / ARG1:object, thing under consideration / ARG2:attribute [envisage.xml]
   LexSem("V","envisage",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("envisage"),arg1,pp("as",arg2)))),

 'envision-01': # ARG0:imaginer / ARG1:imagined [envision.xml]
   LexSem("V","envision",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("envision"),arg1))),

 'envy-01': # ARG0:envier / ARG1:envied / ARG2:cause [envy.xml]
   LexSem("V","envy",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("envy"),arg1,arg2))),

 'epitomize-01': # ARG0:entity epitomizing / ARG1:entity epitomized [epitomize.xml]
   LexSem("V","epitomize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("epitomize"),arg1))),

 'epoxy-01': # ARG0:agent, linker / ARG1:thing linked / ARG2:thing linked to / ARG3:explicit mention of epoxy [epoxy.xml]
   LexSem("V","epoxy",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("epoxy"),arg1,pp("to",arg2),arg3))),

 'equal-01': # ARG1:focus of equation / ARG2:other side of equation / ARG3:attribute, quality, domain in which two things are equal [equal.xml]
   LexSem("V","equal",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("equal"),arg2,pp("in",arg3)))),

 'equalize-03': # ARG0:agent, equalizer / ARG1:equalized / ARG2:Instrument, method [equal.xml]
   LexSem("V","equalize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("equalize"),arg1,arg2))),

 'equate-01': # ARG0:agent, declarer / ARG1:first equal thing (or both) / ARG2:second equal thing [equate.xml]
   LexSem("V","equate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("equate"),arg1,pp("with",arg2)))),

 'equilibrate-01': # ARG0:agent, cause / ARG1:thing coming to equilibrium / ARG2:instrument [equilibrate.xml]
   LexSem("V","equilibrate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("equilibrate"),arg1,pp("with",arg2)))),

 'equip-01': # ARG0:provider / ARG1:entity getting equipment / ARG2:equipment [equip.xml]
   LexSem("V","equip",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("equip"),arg1,pp("with",arg2)))),

 'equivocate-01': # ARG0:one who equivocates / ARG1:thing equivocated over [equivocate.xml]
   LexSem("V","equivocate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("equivocate"),pp("over",arg1)))),

 'eradicate-01': # ARG0:eliminator, agent / ARG1:thing eliminate [eradicate.xml]
   LexSem("V","eradicate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("eradicate"),arg1))),

 'erase-01': # ARG0:eraser / ARG1:thing erased, mark / ARG2:medium, surface / ARG3:instrument, if separate from arg0 [erase.xml]
   LexSem("V","erase",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("erase"),arg1,pp("from",arg2),pp("with",arg3)))),

 'erect-01': # ARG0:constructor, agent / ARG1:entity erected [erect.xml]
   LexSem("V","erect",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("erect"),arg1))),

 'erode-01': # ARG0:water or wind / ARG1:substance worn away [erode.xml]
   LexSem("V","erode",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("erode"),arg1))),

 'err-01': # ARG0:entity making mistake / ARG1:thing messed up [err.xml]
   LexSem("V","err",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("err"),pp("on",arg1)))),

 'eruct-01': # ARG0:belcher / ARG1:cognate object, belch itself [eruct.xml]
   LexSem("V","eruct",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("eruct"),arg1))),

 'erupt-01': # ARG1:thing erupting / ARG2:substance spewing forth [erupt.xml]
   LexSem("V","erupt",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("erupt"),pp("into",arg2)))),

 'erupt-02': # ARG0:speaker / ARG1:utterance / ARG2:hearer [erupt.xml]
   LexSem("V","erupt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("erupt"),arg1,pp("at",arg2)))),

 'escalate-01': # ARG0:causer / ARG1:thing becoming higher [escalate.xml]
   LexSem("V","escalate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("escalate"),arg1))),

 'escape-01': # ARG0:entity escaping / ARG1:place or thing escaped [escape.xml]
   LexSem("V","escape",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("escape"),arg1))),

 'eschew-01': # ARG0:avoider / ARG1:thing avoided [eschew.xml]
   LexSem("V","eschew",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("eschew"),arg1))),

 'escort-01': # ARG0:subject accompanier / ARG1:object accompanied / ARG3:start point / ARG4:end point [escort.xml]
   LexSem("V","escort",[":ARG0",":ARG1",":ARG3",":ARG4"],lambda arg0,arg1,arg3,arg4:S(arg0,VP(V("escort"),arg1,pp("past",arg3),arg4))),

 'espouse-01': # ARG0:haver of belief / ARG1:belief [espouse.xml]
   LexSem("V","espouse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("espouse"),arg1))),

 'espy-01': # ARG0:viewer / ARG1:thing discerned / ARG2:secondary attribute, described-as [espy.xml]
   LexSem("V","espy",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("espy"),arg1,arg2))),

 'essay-01': # ARG0:tester / ARG1:thing being attempted/tested [essay.xml]
   LexSem("V","essay",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("essay"),arg1))),

 'establish-01': # ARG0:agent, setter / ARG1:thing set / ARG2:attribute / ARG3:benefactive [establish.xml]
   LexSem("V","establish",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("establish"),arg1,pp("as",arg2),pp("for",arg3)))),

 'esteem-01': # ARG0:experiencer, esteemer / ARG1:theme, thing esteemed / ARG2:attribute [esteem.xml]
   LexSem("V","esteem",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("esteem"),arg1,arg2))),

 'estimate-01': # ARG0:estimator / ARG1:thing estimated / ARG2:estimated-to-be, attribute of arg1 [estimate.xml]
   LexSem("V","estimate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("estimate"),arg1,pp("at",arg2)))),

 'estrange-01': # ARG1:focussed party / ARG2:prepositional party [estrange.xml]
   LexSem("V","estrange",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("estrange"),pp("from",arg2)))),

 'etch-01': # ARG0:etcher / ARG1:surface / ARG2:image [etch.xml]
   LexSem("V","etch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("etch"),arg1,arg2))),

 'eternalize-01': # ARG0:agent, eternalizer / ARG1:eternalized [eternalize.xml]
   LexSem("V","eternalize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("eternalize"),arg1))),

 'etiolate-01': # ARG0:agent, cause of bleaching, weakening / ARG1:entity becoming pale, weak [etiolate.xml]
   LexSem("V","etiolate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("etiolate"),arg1))),

 'eulogize-01': # ARG0:agent, honorer / ARG1:entity eulogized / ARG2:for what,as what [eulogize.xml]
   LexSem("V","eulogize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("eulogize"),arg1,arg2))),

 'europeanize-01': # ARG0:agent, cause / ARG1:thing changing [europeanize.xml]
   LexSem("V","europeanize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("europeanize"),arg1))),

 'evacuate-01': # ARG0:causer of emptiness / ARG1:enclosure, building, etc / ARG2:people [evacuate.xml]
   LexSem("V","evacuate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("evacuate"),arg1,arg2))),

 'evade-01': # ARG0:avoider / ARG1:thing avoided [evade.xml]
   LexSem("V","evade",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("evade"),arg1))),

 'evaluate-01': # ARG0:evaluator / ARG1:thing evaluated / ARG2:the assessment itself [evaluate.xml]
   LexSem("V","evaluate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("evaluate"),arg1,arg2))),

 'evaluate-101': # ARG0:Monitorer / ARG1:Patient / ARG2:Condition [evaluate.xml]
   LexSem("V","evaluate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("evaluate"),arg1,pp("for",arg2)))),

 'evangelize-01': # ARG0:evangelist / ARG1:Christianity (or other new faith/cause) / ARG2:entity preached to [evangelize.xml]
   LexSem("V","evangelize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("evangelize"),arg1,pp("to",arg2)))),

 'evaporate-01': # ARG0:heat source / ARG1:liquid, now vapor [evaporate.xml]
   LexSem("V","evaporate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("evaporate"),arg1))),

 'even-02': # ARG1:first equal/unvaried thing / ARG2:second equal thing, even in comparison to what / ARG3:domain of evenness [even.xml]
   LexSem("V","even",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("even"),pp("with",arg2),pp("in",arg3)))),

 'even-out-01': # ARG0:causer of evenness, agent / ARG1:entity evened [even.xml]
   LexSem("V","even",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("even"),Adv("out"),arg1))),

 'eventuate-01': # ARG1:event transpiring / ARG2:results of event, eventuated in what? [eventuate.xml]
   LexSem("V","eventuate",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("eventuate"),pp("in",arg2)))),

 'evict-01': # ARG0:landlord / ARG1:tennant / ARG2:domicile [evict.xml]
   LexSem("V","evict",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("evict"),arg1,arg2))),

 'evidence-01': # ARG0:proof / ARG1:thing proved [evidence.xml]
   LexSem("V","evidence",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("evidence"),arg1))),

 'evince-01': # ARG0:shower, agent / ARG1:thing shown [evince.xml]
   LexSem("V","evince",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("evince"),arg1))),

 'eviscerate-01': # ARG0:remover / ARG1:victim [eviscerate.xml]
   LexSem("V","eviscerate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("eviscerate"),arg1))),

 'evoke-01': # ARG0:evoker / ARG1:thing evoked / ARG2:instrument [evoke.xml]
   LexSem("V","evoke",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("evoke"),arg1,pp("with",arg2)))),

 'evolve-01': # ARG1:thing changing / ARG2:end state / ARG3:start state [evolve.xml]
   LexSem("V","evolve",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("evolve"),pp("into",arg2),pp("to",arg3)))),

 'evolve-02': # ARG0:agent, causing the evolutionary change / ARG1:thing acquiring / ARG2:characteristics acquired [evolve.xml]
   LexSem("V","evolve",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("evolve"),arg1,arg2))),

 'exacerbate-01': # ARG0:causer / ARG1:thing getting worse [exacerbate.xml]
   LexSem("V","exacerbate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("exacerbate"),arg1))),

 'exact-01': # ARG0:receiver, exactor / ARG1:thing obtained / ARG2:received from [exact.xml]
   LexSem("V","exact",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("exact"),arg1,pp("from",arg2)))),

 'exaggerate-01': # ARG0:liar liar, agent / ARG1:thing exaggerated [exaggerate.xml]
   LexSem("V","exaggerate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("exaggerate"),arg1))),

 'exalt-01': # ARG0:causer of elevation / ARG1:entity being elevated [exalt.xml]
   LexSem("V","exalt",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("exalt"),arg1))),

 'examine-01': # ARG0:examiner / ARG1:thing examined / ARG2:in search of what [examine.xml]
   LexSem("V","examine",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("examine"),arg1,pp("for",arg2)))),

 'exasperate-01': # ARG0:annoyer / ARG1:annoyed / ARG2:instrument, if separate from arg0 [exasperate.xml]
   LexSem("V","exasperate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("exasperate"),arg1,arg2))),

 'excavate-01': # ARG0:excavator, digger / ARG1:hole [excavate.xml]
   LexSem("V","excavate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("excavate"),arg1))),

 'exceed-01': # ARG0:thing that's more / ARG1:thing that's less / ARG2:margin, difference [exceed.xml]
   LexSem("V","exceed",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("exceed"),arg1,pp("by",arg2)))),

 'excel-01': # ARG0:very good entity / ARG1:domain [excel.xml]
   LexSem("V","excel",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("excel"),arg1))),

 'except-01': # ARG0:Entity causing/making exception / ARG1:Entity excepted, excluded / ARG2:Excluded/excepted from what? [except.xml]
   LexSem("V","except",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("except"),arg1,pp("from",arg2)))),

 'except-02': # ARG0:Lawyer, entity objecting / ARG1:Thing objected-to [except.xml]
   LexSem("V","except",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("except"),pp("to",arg1)))),

 'excerpt-01': # ARG0:remover, agent / ARG1:thing extracted / ARG2:entity extracted from [excerpt.xml]
   LexSem("V","excerpt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("excerpt"),arg1,arg2))),

 'exchange-01': # ARG0:agent, entity trading / ARG1:thing being traded (away) / ARG2:other exchanger / ARG3:other item in exchange, price, or premium, traded for or at / ARG4:benefactive [exchange.xml]
   LexSem("V","exchange",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("exchange"),arg1,pp("with",arg2),pp("for",arg3),arg4))),

 'excise-01': # ARG0:remover, agent / ARG1:entity excised / ARG2:excised from [excise.xml]
   LexSem("V","excise",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("excise"),arg1,pp("from",arg2)))),

 'excite-01': # ARG0:Stimulus of excitement / ARG1:excited entity / ARG2:instrument, if separate from arg0 [excite.xml]
   LexSem("V","excite",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("excite"),arg1,pp("with",arg2)))),

 'exclaim-01': # ARG0:speaker / ARG1:utterance / ARG2:hearer [exclaim.xml]
   LexSem("V","exclaim",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("exclaim"),arg1,pp("to",arg2)))),

 'exclude-01': # ARG0:agent, excluder / ARG1:patient, thing excluded / ARG2:excluded-from [exclude.xml]
   LexSem("V","exclude",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("exclude"),arg1,pp("from",arg2)))),

 'excommunicate-01': # ARG0:sentencer, excluder, agent / ARG1:entity excluded / ARG2:excluded from [excommunicate.xml]
   LexSem("V","excommunicate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("excommunicate"),arg1,arg2))),

 'excoriate-01': # ARG0:speaker / ARG1:subject / ARG2:grounds, reason [excoriate.xml]
   LexSem("V","excoriate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("excoriate"),arg1,pp("as",arg2)))),

 'excoriate-02': # ARG0:agent, damager / ARG1:thing damaged / ARG2:instrument [excoriate.xml]
   LexSem("V","excoriate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("excoriate"),arg1,arg2))),

 'excruciate-01': # ARG0:Torturer / ARG1:Entity Tormented [excruciate.xml]
   LexSem("V","excruciate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("excruciate"),arg1))),

 'excuse-01': # ARG0:excuser / ARG1:excused / ARG2:crime [excuse.xml]
   LexSem("V","excuse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("excuse"),arg1,pp("from",arg2)))),

 'execrate-01': # ARG0:hater / ARG1:thing hated [execrate.xml]
   LexSem("V","execrate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("execrate"),arg1))),

 'execute-01': # ARG0:killer / ARG1:corpse / ARG2:instrument [execute.xml]
   LexSem("V","execute",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("execute"),arg1,pp("with",arg2)))),

 'execute-02': # ARG0:agent, doer / ARG1:thing done / ARG2:benefactive, done for or about / ARG3:instrumental [execute.xml]
   LexSem("V","execute",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("execute"),arg1,pp("for",arg2),arg3))),

 'exemplify-01': # ARG0:example / ARG1:of what [exemplify.xml]
   LexSem("V","exemplify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("exemplify"),arg1))),

 'exempt-01': # ARG0:releaser, agent / ARG1:entity exempted / ARG2:entity exempted from [exempt.xml]
   LexSem("V","exempt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("exempt"),arg1,pp("from",arg2)))),

 'exercise-01': # ARG0:user / ARG1:thing used, thing exercised [exercise.xml]
   LexSem("V","exercise",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("exercise"),arg1))),

 'exercise-02': # ARG0:athlete / ARG1:thing being exercised ("muscle") [exercise.xml]
   LexSem("V","exercise",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("exercise"),arg1))),

 'exert-01': # ARG0:exerciser, agent / ARG1:entity exerted / ARG2:exerted over [exert.xml]
   LexSem("V","exert",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("exert"),arg1,pp("over",arg2)))),

 'exfoliate-01': # ARG0:agent / ARG1:patient, source, thing the layer is removed from / ARG2:the removed layer / ARG3:instrument [exfoliate.xml]
   LexSem("V","exfoliate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("exfoliate"),pp("from",arg1),arg2,pp("by",arg3)))),

 'exhale-01': # ARG0:emitter, agent / ARG1:air or vapor exhaled [exhale.xml]
   LexSem("V","exhale",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("exhale"),arg1))),

 'exhaust-01': # ARG0:agent/cause of depletion / ARG1:entity exhausted, depleted [exhaust.xml]
   LexSem("V","exhaust",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("exhaust"),arg1))),

 'exhibit-01': # ARG0:exhibiter / ARG1:thing seen/exhibition / ARG2:seer [exhibit.xml]
   LexSem("V","exhibit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("exhibit"),arg1,pp("to",arg2)))),

 'exhilarate-01': # ARG0:agent, pleaser / ARG1:patient, entity pleased / ARG2:instrumental [exhilarate.xml]
   LexSem("V","exhilarate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("exhilarate"),arg1,arg2))),

 'exhort-01': # ARG0:urger / ARG1:impelled agent / ARG2:impelled action [exhort.xml]
   LexSem("V","exhort",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("exhort"),arg1,pp("to",arg2)))),

 'exhume-01': # ARG0:digger, agent / ARG1:entity exhumed [exhume.xml]
   LexSem("V","exhume",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("exhume"),arg1))),

 'exile-01': # ARG0:sender away, agent / ARG1:exile / ARG2:exiled from, homeland etc [exile.xml]
   LexSem("V","exile",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("exile"),arg1,pp("from",arg2)))),

 'exist-01': # ARG1:thing existing / ARG2:secondary attribute of arg1 [exist.xml]
   LexSem("V","exist",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("exist"),pp("as",arg2)))),

 'exit-01': # ARG0:departed entity / ARG1:place exited [exit.xml]
   LexSem("V","exit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("exit"),arg1))),

 'exonerate-01': # ARG0:freer from blame, agent / ARG1:entity exonerated / ARG2:responsibility or blame [exonerate.xml]
   LexSem("V","exonerate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("exonerate"),arg1,pp("as",arg2)))),

 'exorcise-01': # ARG0:exorcist / ARG1:evil spirits / ARG2:place haunted [exorcise.xml]
   LexSem("V","exorcise",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("exorcise"),arg1,arg2))),

 'expand-01': # ARG0:causer of growth, agent / ARG1:thing grown / ARG2:amount increased by, EXT or MNR / ARG3:start point / ARG4:end point [expand.xml]
   LexSem("V","expand",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("expand"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'expect-01': # ARG0:expecter / ARG1:thing expected [expect.xml]
   LexSem("V","expect",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("expect"),arg1))),

 'expectorate-01': # ARG0:spitter / ARG1:loogey [expectorate.xml]
   LexSem("V","expectorate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("expectorate"),arg1))),

 'expedite-01': # ARG0:causer of greater speed, agent / ARG1:entity expedited [expedite.xml]
   LexSem("V","expedite",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("expedite"),arg1))),

 'expel-01': # ARG0:expeller, agent / ARG1:entity expelled / ARG2:expelled from [expel.xml]
   LexSem("V","expel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("expel"),arg1,pp("from",arg2)))),

 'expend-01': # ARG0:spender, agent / ARG1:entity expended / ARG2:entity expended on [expend.xml]
   LexSem("V","expend",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("expend"),arg1,pp("on",arg2)))),

 'experience-01': # ARG0:experiencer / ARG1:experienced [experience.xml]
   LexSem("V","experience",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("experience"),arg1))),

 'experiment-01': # ARG0:scientist, agent / ARG1:experimental subject / ARG2:experimental method [experiment.xml]
   LexSem("V","experiment",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("experiment"),pp("on",arg1),pp("with",arg2)))),

 'expiate-01': # ARG0:sinner / ARG1:sin [expiate.xml]
   LexSem("V","expiate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("expiate"),arg1))),

 'expire-01': # ARG1:commodity, thing expiring [expire.xml]
   LexSem("V","expire",[":ARG1"],lambda arg1:S(arg1,VP(V("expire")))),

 'expire-02': # ARG0:Exhaler / ARG1:Air exhaled [expire.xml]
   LexSem("V","expire",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("expire"),pp("of",arg1)))),

 'explain-01': # ARG0:explainer / ARG1:thing explained / ARG2:explained to [explain.xml]
   LexSem("V","explain",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("explain"),arg1,pp("to",arg2)))),

 'explicate-01': # ARG0:causer of clarification / ARG1:thing becoming clearer / ARG2:explained to [explicate.xml]
   LexSem("V","explicate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("explicate"),arg1,pp("to",arg2)))),

 'explode-01': # ARG0:bomber, agent/cause / ARG1:bomb, thing exploding / ARG2:attribute, end state [explode.xml]
   LexSem("V","explode",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("explode"),arg1,pp("into",arg2)))),

 'explode-02': # ARG0:causer of rapid growth, agent (rare) / ARG1:thing getting bigger / ARG2:amount increased by, EXT or MNR / ARG3:start point / ARG4:end point [explode.xml]
   LexSem("V","explode",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("explode"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'explode-03': # ARG0:agent / ARG1:the container / ARG2:the substance [explode.xml]
   LexSem("V","explode",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("explode"),arg1,pp("with",arg2)))),

 'exploit-01': # ARG0:User / ARG1:thing used / ARG2:purpose [exploit.xml]
   LexSem("V","exploit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("exploit"),arg1,pp("for",arg2)))),

 'explore-01': # ARG0:explorer / ARG1:place explored / ARG2:in search of what [explore.xml]
   LexSem("V","explore",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("explore"),arg1,arg2))),

 'export-01': # ARG0:exporter / ARG1:product / ARG2:importer [export.xml]
   LexSem("V","export",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("export"),pp("about",arg1),pp("to",arg2)))),

 'expose-01': # ARG0:exposer / ARG1:exposed entity / ARG2:exposed to (second entity) [expose.xml]
   LexSem("V","expose",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("expose"),arg1,pp("to",arg2)))),

 'expound-01': # ARG0:expounder, speaker / ARG1:thing explained, topic [expound.xml]
   LexSem("V","expound",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("expound"),arg1))),

 'express-01': # ARG0:speaker / ARG1:utterance / ARG2:hearer [express.xml]
   LexSem("V","express",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("express"),arg1,arg2))),

 'express-02': # ARG0:sender / ARG1:thing sent / ARG2:sent-to [express.xml]
   LexSem("V","express",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("express"),arg1,pp("to",arg2)))),

 'express-03': # ARG1:gene, expressor / ARG2:protein, expressed material / ARG3:cell, organ, location [express.xml]
   LexSem("V","express",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("express"),arg2,pp("in",arg3)))),

 'expunge-01': # ARG0:entity removing / ARG1:thing being removed / ARG2:removed from [expunge.xml]
   LexSem("V","expunge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("expunge"),arg1,pp("from",arg2)))),

 'expurgate-01': # ARG0:Censor, person deleting/removing objectionable material / ARG1:Objectionable material being removed / ARG2:Source, entity arg 1 is removed from [expurgate.xml]
   LexSem("V","expurgate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("expurgate"),arg1,pp("from",arg2)))),

 'extend-01': # ARG0:agent, entity making something be longer / ARG1:patient, thing getting longer / ARG2:EXT or TMP, by how much or until when / ARG3:start point / ARG4:end point [extend.xml]
   LexSem("V","extend",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("extend"),arg1,pp("until",arg2),pp("from",arg3),pp("to",arg4)))),

 'extend-02': # ARG0:giver, offerer / ARG1:thing offered / ARG2:offered-to [extend.xml]
   LexSem("V","extend",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("extend"),arg1,pp("to",arg2)))),

 'exterminate-01': # ARG0:destroyer / ARG1:thing destroyed / ARG2:instrument of destruction [exterminate.xml]
   LexSem("V","exterminate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("exterminate"),arg1,arg2))),

 'extinguish-01': # ARG0:extinguisher, agent / ARG1:fire / ARG2:instrument, if separate from arg0 / ARG3:location of the former flame [extinguish.xml]
   LexSem("V","extinguish",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("extinguish"),arg1,pp("with",arg2),pp("from",arg3)))),

 'extirpate-01': # ARG0:destroyer, agent / ARG1:thing destoryed / ARG2:destroyed from [extirpate.xml]
   LexSem("V","extirpate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("extirpate"),arg1,pp("from",arg2)))),

 'extol-01': # ARG0:agent, honorer / ARG1:entity extolled / ARG2:for what,as what [extol.xml]
   LexSem("V","extol",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("extol"),arg1,pp("as",arg2)))),

 'extort-01': # ARG0:agent, extorter / ARG1:money / ARG2:source [extort.xml]
   LexSem("V","extort",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("extort"),arg1,pp("from",arg2)))),

 'extract-01': # ARG0:remover, agent / ARG1:thing extracted / ARG2:entity extracted from [extract.xml]
   LexSem("V","extract",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("extract"),arg1,pp("from",arg2)))),

 'extradite-01': # ARG0:expeller, agent / ARG1:entity expelled / ARG2:expelled from / ARG3:expelled to [extradite.xml]
   LexSem("V","extradite",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("extradite"),arg1,pp("from",arg2),pp("to",arg3)))),

 'extrapolate-01': # ARG0:thinker, agent / ARG1:known information / ARG2:new information [extrapolate.xml]
   LexSem("V","extrapolate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("extrapolate"),arg1,pp("to",arg2)))),

 'extricate-01': # ARG0:agent of removing / ARG1:thing removed / ARG2:from where [extricate.xml]
   LexSem("V","extricate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("extricate"),arg1,pp("from",arg2)))),

 'extrude-01': # ARG0:extruder, agent / ARG1:entity extruded / ARG2:extruded from [extrude.xml]
   LexSem("V","extrude",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("extrude"),arg1,pp("from",arg2)))),

 'exude-01': # ARG0:oozer / ARG1:ooze [exude.xml]
   LexSem("V","exude",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("exude"),arg1))),

 'exult-01': # ARG0:entity feeling joy / ARG1:joyful of what? [exult.xml]
   LexSem("V","exult",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("exult"),pp("over",arg1)))),

 'eye-01': # ARG0:watcher / ARG1:entity eyed [eye.xml]
   LexSem("V","eye",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("eye"),arg1))),

 'eyeball-01': # ARG0:looker / ARG1:looked at [eyeball.xml]
   LexSem("V","eyeball",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("eyeball"),arg1))),

 'fabricate-01': # ARG0:creator / ARG1:creation / ARG2:created-from, thing changed / ARG3:benefactive [fabricate.xml]
   LexSem("V","fabricate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("fabricate"),arg1,arg2,arg3))),

 'face-01': # ARG0:looker, facer / ARG1:looked at, faced [face.xml]
   LexSem("V","face",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("face"),arg1))),

 'face-off-02': # ARG0:first opponent / ARG1:second opponent [face.xml]
   LexSem("V","face",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("face"),Adv("off"),arg1))),

 'facilitate-01': # ARG0:thing helping / ARG1:thing being helped [facilitate.xml]
   LexSem("V","facilitate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("facilitate"),arg1))),

 'factor-01': # ARG0:factorer / ARG1:thing included / ARG2:calculation, or particle of direction [factor.xml]
   LexSem("V","factor",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("factor"),arg1,pp("into",arg2)))),

 'fade-01': # ARG0:agent, causing fading / ARG1:thing fading / ARG2:EXT, amount faded by / ARG3:start point / ARG4:end point [fade.xml]
   LexSem("V","fade",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("fade"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'fail-01': # ARG0:assessor of not failing / ARG1:thing failing / ARG2:task / ARG3:benefactive [fail.xml]
   LexSem("V","fail",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("fail"),arg1,pp("to",arg2),pp("on",arg3)))),

 'fail-02': # ARG0:teacher / ARG1:student [fail.xml]
   LexSem("V","fail",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fail"),arg1))),

 'faint-01': # ARG0:fainter [faint.xml]
   LexSem("V","faint",[":ARG0"],lambda arg0:S(arg0,VP(V("faint")))),

 'fake-01': # ARG0:faker, agent / ARG1:entity faked [fake.xml]
   LexSem("V","fake",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fake"),arg1))),

 'fall-01': # ARG1:Logical subject, patient, thing falling / ARG2:EXT, amount fallen / ARG3:start point / ARG4:end point, end state of arg1 [fall.xml]
   LexSem("V","fall",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("fall"),arg2,pp("from",arg3),pp("to",arg4)))),

 'fall-04': # ARG1:thing occurring / ARG2:when/where [fall.xml]
   LexSem("V","fall",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("fall"),pp("on",arg2)))),

 'fall-05': # ARG1:loser / ARG2:winner or instrument of destruction [fall.xml]
   LexSem("V","fall",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("fall"),pp("to",arg2)))),

 'fall-07': # ARG1:Person undergoing change / ARG2:End state [fall.xml]
   LexSem("V","fall",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("fall"),pp("in",arg2)))),

 'fall-10': # ARG1:the fool / ARG2:the trick [fall.xml]
   LexSem("V","fall",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("fall"),pp("for",arg2)))),

 'fall-apart-09': # ARG1:thing in peices [fall.xml]
   LexSem("V","fall",[":ARG1"],lambda arg1:S(arg1,VP(V("fall"),Adv("apart")))),

 'fall-back-08': # ARG0:thing falling back / ARG1:thing fallen back on [fall.xml]
   LexSem("V","fall",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fall"),Adv("back"),pp("on",arg1)))),

 'fall-off-02': # ARG1:Logical subject, patient, thing falling / ARG2:EXT, amount fallen [fall.xml]
   LexSem("V","fall",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("fall"),Adv("off"),arg2))),

 'fall-out-03': # ARG1:parties on bad terms [fall.xml]
   LexSem("V","fall",[":ARG1"],lambda arg1:S(arg1,VP(V("fall"),Adv("out")))),

 'fall-over-11': # ARG1:entity falling [fall.xml]
   LexSem("V","fall",[":ARG1"],lambda arg1:S(arg1,VP(V("fall"),Adv("over")))),

 'fall-through-06': # ARG1:non-event [fall.xml]
   LexSem("V","fall",[":ARG1"],lambda arg1:S(arg1,VP(V("fall"),Adv("through")))),

 'falsify-01': # ARG0:faker, agent / ARG1:entity falsified [falsify.xml]
   LexSem("V","falsify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("falsify"),arg1))),

 'falter-01': # ARG1:thing faltering [falter.xml]
   LexSem("V","falter",[":ARG1"],lambda arg1:S(arg1,VP(V("falter")))),

 'fame-01': # ARG0:honorer / ARG1:famous entity / ARG2:for what reason [fame.xml]
   LexSem("V","fame",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fame"),arg1,pp("for",arg2)))),

 'familiarize-01': # ARG0:agent, causer of familiarity / ARG1:recognizer / ARG2:recognizable thing, familiar with [familiarize.xml]
   LexSem("V","familiarize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("familiarize"),arg1,pp("with",arg2)))),

 'famish-01': # ARG0:Causer of starvation, agent / ARG1:thing starving / ARG2:starved for/of what [famish.xml]
   LexSem("V","famish",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("famish"),arg1,pp("of",arg2)))),

 'fan-01': # ARG0:causer, agent / ARG1:entity fanned [fan.xml]
   LexSem("V","fan",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fan"),arg1))),

 'fanaticize-01': # ARG0:causer of fanaticism / ARG1:entity becoming fanatical / ARG2:instrument, if separate from agent [fanaticize.xml]
   LexSem("V","fanaticize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fanaticize"),arg1,arg2))),

 'fancy-01': # ARG0:supposer / ARG1:sentential arg [fancy.xml]
   LexSem("V","fancy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fancy"),arg1))),

 'fancy-02': # ARG0:wanter / ARG1:wanted [fancy.xml]
   LexSem("V","fancy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fancy"),arg1))),

 'fantasize-01': # ARG0:dreamer / ARG1:dream [fantasize.xml]
   LexSem("V","fantasize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fantasize"),pp("about",arg1)))),

 'fare-01': # ARG0:thing faring, managing [fare.xml]
   LexSem("V","fare",[":ARG0"],lambda arg0:S(arg0,VP(V("fare")))),

 'farm-01': # ARG0:farmer / ARG1:land / ARG2:crop, thing produced [farm.xml]
   LexSem("V","farm",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("farm"),arg1,arg2))),

 'farm-out-02': # ARG0:distributor of work, agent / ARG1:work / ARG2:contractor [farm.xml]
   LexSem("V","farm",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("farm"),Adv("out"),arg1,pp("to",arg2)))),

 'farnesylate-01': # ARG0:intentional agent of farnesylation (e.g. scientist) / ARG1:thing farnesylated / ARG2:instrument / ARG3:result of farnesylation [farnesylate.xml]
   LexSem("V","farnesylate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("farnesylate"),arg1,pp("with",arg2),arg3))),

 'fart-01': # ARG0:expeller / ARG1:gas [fart.xml]
   LexSem("V","fart",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fart"),arg1))),

 'fart-around-02': # ARG0:entity playing around / ARG1:playing with [fart.xml]
   LexSem("V","fart",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fart"),Adv("around"),arg1))),

 'fascinate-01': # ARG0:Stimulus of fascination / ARG1:fascinated entity / ARG2:instrument, if separate from arg0 [fascinate.xml]
   LexSem("V","fascinate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fascinate"),arg1,pp("with",arg2)))),

 'fashion-01': # ARG0:maker, agent / ARG1:entity fashioned [fashion.xml]
   LexSem("V","fashion",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fashion"),arg1))),

 'fast-01': # ARG0:Agent, faster [fast.xml]
   LexSem("V","fast",[":ARG0"],lambda arg0:S(arg0,VP(V("fast")))),

 'fasten-01': # ARG0:causer of connection, agent / ARG1:first (or all) thing(s) fastened (together) / ARG2:additional thing(s), destination / ARG3:fastener [fasten.xml]
   LexSem("V","fasten",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("fasten"),arg1,pp("on",arg2),pp("with",arg3)))),

 'fastforward-01': # ARG0:fast forwarder / ARG1:medium moved forward / ARG2:amount moved forward / ARG3:start point / ARG4:end point [fastforward.xml]
   LexSem("V","fastforward",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("fastforward"),arg1,pp("about",arg2),arg3,arg4))),

 'fate-01': # ARG1:entity destined / ARG2:purpose [fate.xml]
   LexSem("V","fate",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("fate"),arg2))),

 'father-01': # ARG0:father / ARG1:child [father.xml]
   LexSem("V","father",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("father"),arg1))),

 'fathom-01': # ARG0:understander / ARG1:understood [fathom.xml]
   LexSem("V","fathom",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fathom"),arg1))),

 'fatigue-01': # ARG0:causer of tiredness / ARG1:thing becoming exhausted [fatigue.xml]
   LexSem("V","fatigue",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fatigue"),arg1))),

 'fatten-01': # ARG0:causal agent / ARG1:thing getting fatter [fatten.xml]
   LexSem("V","fatten",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fatten"),arg1))),

 'fatten-up-02': # ARG0:Wicked witch in a candy house / ARG1:Hansel and/or Gretel [fatten.xml]
   LexSem("V","fatten",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fatten"),Adv("up"),arg1))),

 'fault-01': # ARG0:blamer / ARG1:entity blamed / ARG2:blamed for what? [fault.xml]
   LexSem("V","fault",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fault"),arg1,pp("for",arg2)))),

 'fault-02': # ARG1:flawed thing / ARG2:specific aspect of arg1 that is flawed [fault.xml]
   LexSem("V","fault",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("fault"),pp("in",arg2)))),

 'favor-01': # ARG0:liker / ARG1:thing preferred, favored / ARG2:instrument (the favor itself) / ARG3:favored over; less favorable alternative [favor.xml]
   LexSem("V","favor",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("favor"),arg1,pp("with",arg2),pp("to",arg3)))),

 'favor-02': # ARG0:entity with an injured body part / ARG1:injured body part [favor.xml]
   LexSem("V","favor",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("favor"),arg1))),

 'favor-03': # ARG1:resembler / ARG2:resembled [favor.xml]
   LexSem("V","favor",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("favor"),arg2))),

 'fawn-01': # ARG0:seeker / ARG1:with whom, fawned-over [fawn.xml]
   LexSem("V","fawn",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fawn"),pp("over",arg1)))),

 'fax-01': # ARG0:sender, agent / ARG1:entity sent, faxed / ARG2:sent to, recipient [fax.xml]
   LexSem("V","fax",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fax"),arg1,arg2))),

 'faze-01': # ARG0:Cause, fazer / ARG1:fazed / ARG2:instrument, if separate from arg0 [faze.xml]
   LexSem("V","faze",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("faze"),arg1,arg2))),

 'fear-01': # ARG0:scaredy cat / ARG1:afraid of / ARG2:afraid for [fear.xml]
   LexSem("V","fear",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fear"),arg1,pp("for",arg2)))),

 'feast-01': # ARG0:eater / ARG1:eaten [feast.xml]
   LexSem("V","feast",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("feast"),pp("on",arg1)))),

 'feather-01': # ARG0:causer of feathering / ARG1:recipient of feathering [feather.xml]
   LexSem("V","feather",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("feather"),arg1))),

 'feature-01': # ARG0:cause of prominence / ARG1:thing featured / ARG2:featured in [feature.xml]
   LexSem("V","feature",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("feature"),arg1,pp("in",arg2)))),

 'federalize-01': # ARG0:causer of change to government control / ARG1:issue now under governmental control [federalize.xml]
   LexSem("V","federalize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("federalize"),arg1))),

 'federalize-02': # ARG0:uniter / ARG1:republics joined / ARG2:second republic if listed separately [federalize.xml]
   LexSem("V","federalize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("federalize"),arg1,arg2))),

 'federate-01': # ARG0:causer of federation,and/or first entity uniting / ARG1:entity united with / ARG2:other entities united with, if separate mention / ARG3:resulting federation [federate.xml]
   LexSem("V","federate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("federate"),arg1,arg2,pp("into",arg3)))),

 'fedex-01': # ARG0:mailer / ARG1:letter / ARG2:mailed-to [fedex.xml]
   LexSem("V","fedex",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fedex"),arg1,arg2))),

 'feed-01': # ARG0:causal agent / ARG1:food / ARG2:eater [feed.xml]
   LexSem("V","feed",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("feed"),arg1,arg2))),

 'feed-02': # ARG0:cause of increase / ARG1:thing increasing [feed.xml]
   LexSem("V","feed",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("feed"),arg1))),

 'feed-up-03': # ARG1:fed up entity, experiencer / ARG2:causer of fed-up-ed-ness [feed.xml]
   LexSem("V","feed",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("feed"),Adv("up"),pp("with",arg2)))),

 'feel-01': # ARG0:feeler, person experiencing emotion / ARG1:emotion or sensation / ARG2:entity towards or for whom the emotion is directed [feel.xml]
   LexSem("V","feel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("feel"),arg1,pp("for",arg2)))),

 'feel-02': # ARG0:believer / ARG1:belief / ARG2:attributive (whom/what the feeling is about) [feel.xml]
   LexSem("V","feel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("feel"),arg1,arg2))),

 'feel-03': # ARG0:feeler / ARG1:thing felt / ARG2:instrument [feel.xml]
   LexSem("V","feel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("feel"),arg1,arg2))),

 'feel-05': # ARG1:stimulus / ARG2:characteristic [feel.xml]
   LexSem("V","feel",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("feel"),pp("as",arg2)))),

 'feel-06': # ARG0:wanter / ARG1:like what: thing or action arg0 is inclined towards [feel.xml]
   LexSem("V","feel",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("feel"),pp("like",arg1)))),

 'feel-up-04': # ARG0:feeler / ARG1:thing felt / ARG2:instrument [feel.xml]
   LexSem("V","feel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("feel"),Adv("up"),arg1,arg2))),

 'feign-01': # ARG0:pretender, agent / ARG1:entity faked, simulated [feign.xml]
   LexSem("V","feign",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("feign"),arg1))),

 'feint-01': # ARG0:Person feinting / ARG1:Mock action [feint.xml]
   LexSem("V","feint",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("feint"),pp("to",arg1)))),

 'felicitate-01': # ARG0:expresser, agent / ARG1:person congratulated / ARG2:achievement [felicitate.xml]
   LexSem("V","felicitate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("felicitate"),arg1,arg2))),

 'fell-01': # ARG0:causer / ARG1:faller (us. trees) [fell.xml]
   LexSem("V","fell",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fell"),arg1))),

 'feminize-01': # ARG0:agent, feminizer / ARG1:entity feminized [feminize.xml]
   LexSem("V","feminize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("feminize"),arg1))),

 'fence-02': # ARG0:fencer [fence.xml]
   LexSem("V","fence",[":ARG0"],lambda arg0:S(arg0,VP(V("fence")))),

 'fence-off-01': # ARG0:causal agent / ARG1:thing or area being enclosed / ARG2:thing being enclosed from [fence.xml]
   LexSem("V","fence",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fence"),Adv("off"),arg1,arg2))),

 'fend-01': # ARG0:entity getting by, surviving / ARG1:REC [fend.xml]
   LexSem("V","fend",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fend"),pp("for",arg1)))),

 'fend-off-02': # ARG0:avoider, warder / ARG1:thing avoided, warded off / ARG2:explicit instrument [fend.xml]
   LexSem("V","fend",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fend"),Adv("off"),arg1,pp("by",arg2)))),

 'ferment-01': # ARG0:cause, agent / ARG1:patient, thing undergoing fermentation / ARG2:end state [ferment.xml]
   LexSem("V","ferment",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ferment"),arg1,arg2))),

 'ferret-out-01': # ARG0:entity exploring, searching, agent / ARG1:thing discovered [ferret.xml]
   LexSem("V","ferret",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ferret"),Adv("out"),arg1))),

 'ferry-01': # ARG0:agent, driver / ARG1:thing moved / ARG2:locations, or start point / ARG3:destination [ferry.xml]
   LexSem("V","ferry",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("ferry"),arg1,pp("from",arg2),pp("to",arg3)))),

 'fertilize-01': # ARG0:male part, fertilizer / ARG1:female part, fertilized [fertilize.xml]
   LexSem("V","fertilize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fertilize"),arg1))),

 'fess-up-01': # ARG0:speaker / ARG1:utterance / ARG2:hearer [fess.xml]
   LexSem("V","fess",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fess"),Adv("up"),pp("to",arg1),arg2))),

 'fester-01': # ARG1:entity festering [fester.xml]
   LexSem("V","fester",[":ARG1"],lambda arg1:S(arg1,VP(V("fester")))),

 'festoon-01': # ARG0:decorator / ARG1:thing decorated / ARG2:decorations [festoon.xml]
   LexSem("V","festoon",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("festoon"),arg1,pp("with",arg2)))),

 'fetch-01': # ARG0:bringer / ARG1:thing brought / ARG2:benefactive, brought-for, brought-to / ARG3:attribute / ARG4:ablative, brought-from [fetch.xml]
   LexSem("V","fetch",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("fetch"),arg1,pp("to",arg2),arg3,arg4))),

 'fetter-01': # ARG0:causer of restraint / ARG1:entity restrained / ARG2:restrained to / ARG3:explicit mention of fetters [fetter.xml]
   LexSem("V","fetter",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("fetter"),arg1,pp("to",arg2),pp("with",arg3)))),

 'feud-01': # ARG0:first fighter / ARG1:second fighter, if separate / ARG2:spoils or point of contention [feud.xml]
   LexSem("V","feud",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("feud"),pp("with",arg1),pp("over",arg2)))),

 'fiddle-01': # ARG0:player / ARG1:thing fiddled with [fiddle.xml]
   LexSem("V","fiddle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fiddle"),pp("with",arg1)))),

 'fidget-01': # ARG0:restless entity, agent / ARG1:thing fidgeting with [fidget.xml]
   LexSem("V","fidget",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fidget"),pp("with",arg1)))),

 'field-01': # ARG0:fielder, agent / ARG1:question, proposal, thing put into action [field.xml]
   LexSem("V","field",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("field"),arg1))),

 'fight-01': # ARG0:first fighter / ARG1:second fighter, if separate / ARG2:spoils, over what, explicit mention of the battle [fight.xml]
   LexSem("V","fight",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fight"),arg1,pp("for",arg2)))),

 'fight-back-04': # ARG0:first fighter / ARG1:second fighter, if separate / ARG2:spoils [fight.xml]
   LexSem("V","fight",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fight"),Adv("back"),arg1,arg2))),

 'fight-off-02': # ARG0:fighter / ARG1:thing repelled / ARG2:instrument [fight.xml]
   LexSem("V","fight",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fight"),Adv("off"),arg1,pp("with",arg2)))),

 'fight-on-03': # ARG0:first fighter / ARG1:second fighter, if separate [fight.xml]
   LexSem("V","fight",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fight"),Adv("on"),arg1))),

 'figure-01': # ARG0:thinker / ARG1:thought [figure.xml]
   LexSem("V","figure",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("figure"),arg1))),

 'figure-02': # ARG0:planner / ARG1:thing planned / ARG2:grounds for planning [figure.xml]
   LexSem("V","figure",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("figure"),pp("to",arg1),arg2))),

 'figure-03': # ARG0:thing figuring in / ARG1:role or event, act, what arg0 figures into [figure.xml]
   LexSem("V","figure",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("figure"),pp("in",arg1)))),

 'figure-04': # ARG0:decider / ARG1:thing determined / ARG2:grounds / ARG3:attribute of arg1 [figure.xml]
   LexSem("V","figure",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("figure"),arg1,arg2,arg3))),

 'figure-06': # ARG1:thing that is expected [figure.xml]
   LexSem("V","figure",[":ARG1"],lambda arg1:S(arg1,VP(V("figure")))),

 'figure-out-05': # ARG0:decider / ARG1:thing determined / ARG2:grounds / ARG3:attribute of arg1 [figure.xml]
   LexSem("V","figure",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("figure"),Adv("out"),arg1,arg2,arg3))),

 'filch-01': # ARG0:agent, stealer / ARG1:thing stolen / ARG2:stolen from, source [filch.xml]
   LexSem("V","filch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("filch"),arg1,pp("from",arg2)))),

 'file-01': # ARG0:filer / ARG1:file / ARG2:filed-with / ARG3:filed against / ARG4:purpose of filing [file.xml]
   LexSem("V","file",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("file"),arg1,pp("in",arg2),pp("against",arg3),pp("for",arg4)))),

 'file-03': # ARG0:walker [file.xml]
   LexSem("V","file",[":ARG0"],lambda arg0:S(arg0,VP(V("file")))),

 'filibuster-01': # ARG0:blocker, agent / ARG1:thing blocked, legislation [filibuster.xml]
   LexSem("V","filibuster",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("filibuster"),arg1))),

 'fill-01': # ARG0:agent, causer / ARG1:container / ARG2:substance [fill.xml]
   LexSem("V","fill",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fill"),arg1,pp("with",arg2)))),

 'fill-06': # ARG0:satisfier, (order) filler / ARG1:order, thing satisfied / ARG2:secondary predication [fill.xml]
   LexSem("V","fill",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fill"),arg1,pp("at",arg2)))),

 'fill-in-05': # ARG0:agent, poor schmuck with a pen / ARG1:forms to be filled in / ARG2:information put in [fill.xml]
   LexSem("V","fill",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fill"),Adv("in"),arg1,arg2))),

 'fill-in-07': # ARG1:person, thing acting as something else / ARG2:thing being substituted [fill.xml]
   LexSem("V","fill",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("fill"),Adv("in"),pp("for",arg2)))),

 'fill-in-08': # ARG0:info giver / ARG1:entity filled in / ARG2:subject matter [fill.xml]
   LexSem("V","fill",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fill"),Adv("in"),arg1,pp("on",arg2)))),

 'fill-out-03': # ARG0:agent, poor schmuck with a pen / ARG1:forms to be filled out [fill.xml]
   LexSem("V","fill",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fill"),Adv("out"),arg1))),

 'fill-out-04': # ARG0:causer of completion / ARG1:thing becoming complete [fill.xml]
   LexSem("V","fill",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fill"),Adv("out"),arg1))),

 'fill-up-02': # ARG0:agent, causer of fullness / ARG1:container / ARG2:substance [fill.xml]
   LexSem("V","fill",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fill"),Adv("up"),arg1,arg2))),

 'fillet-01': # ARG0:Agent/cause of cutting / ARG1:entity becoming cut / ARG2:Instrument used / ARG3:resulting state of arg1, often prepositional [fillet.xml]
   LexSem("V","fillet",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("fillet"),arg1,arg2,pp("into",arg3)))),

 'film-01': # ARG0:recorder, filmer / ARG1:thing recorded, filmed [film.xml]
   LexSem("V","film",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("film"),arg1))),

 'filter-02': # ARG0:filterer, agent or instrument / ARG1:solids, thing removed / ARG2:liquid, source, removed-from [filter.xml]
   LexSem("V","filter",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("filter"),arg1,pp("from",arg2)))),

 'filter-03': # ARG1:moved / ARG2:destination [filter.xml]
   LexSem("V","filter",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("filter"),pp("into",arg2)))),

 'finagle-01': # ARG0:getter / ARG1:thing got / ARG2:got from [finagle.xml]
   LexSem("V","finagle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("finagle"),arg1,pp("from",arg2)))),

 'finalize-01': # ARG0:agent, entity finalizing something / ARG1:thing finalized [finalize.xml]
   LexSem("V","finalize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("finalize"),arg1))),

 'finance-01': # ARG0:financ(i)er / ARG1:thing financed / ARG2:money / ARG3:interest rate, price of financing [finance.xml]
   LexSem("V","finance",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("finance"),arg1,pp("with",arg2),pp("as",arg3)))),

 'finance-02': # ARG0:buyer / ARG1:thing bought / ARG2:money or provider of money [finance.xml]
   LexSem("V","finance",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("finance"),arg1,pp("through",arg2)))),

 'find-01': # ARG0:finder / ARG1:thing found / ARG2:benefactive, found for [find.xml]
   LexSem("V","find",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("find"),arg1,arg2))),

 'find-02': # ARG0:finder / ARG1:thing found [find.xml]
   LexSem("V","find",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("find"),arg1))),

 'find-out-03': # ARG0:finder / ARG1:thing found / ARG2:source [find.xml]
   LexSem("V","find",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("find"),Adv("out"),pp("about",arg1),arg2))),

 'fine-01': # ARG0:finer, receiver of money / ARG1:fine, money / ARG2:fined, giver of money / ARG3:cause, misdeed [fine.xml]
   LexSem("V","fine",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("fine"),arg1,arg2,pp("for",arg3)))),

 'finesse-01': # ARG0:finessor, agent / ARG1:entity finessed [finesse.xml]
   LexSem("V","finesse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("finesse"),arg1))),

 'finetune-01': # ARG0:adjuster, agent / ARG1:entity fine-tuned [finetune.xml]
   LexSem("V","fine-tune",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fine-tune"),arg1))),

 'finger-01': # ARG0:toucher, agent / ARG1:entity fingered [finger.xml]
   LexSem("V","finger",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("finger"),arg1))),

 'finger-02': # ARG0:agent / ARG1:entity fingered [finger.xml]
   LexSem("V","finger",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("finger"),arg1))),

 'finger-03': # ARG0:assigner of blame, agent / ARG1:entity fingered / ARG2:action fingered for [finger.xml]
   LexSem("V","finger",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("finger"),arg1,pp("on",arg2)))),

 'finish-01': # ARG0:Intentional agent / ARG1:Thing finishing / ARG2:Explicit instrument, thing finished with [finish.xml]
   LexSem("V","finish",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("finish"),arg1,arg2))),

 'finish-02': # ARG1:thing closing [finish.xml]
   LexSem("V","finish",[":ARG1"],lambda arg1:S(arg1,VP(V("finish")))),

 'finish-03': # ARG0:painter, agent / ARG1:surface / ARG2:finish itself, stain or varnish [finish.xml]
   LexSem("V","finish",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("finish"),arg1,pp("in",arg2)))),

 'finish-off-05': # ARG0:agent, cause of finishing / ARG1:theme, entity coming to completion / ARG2:instrument [finish.xml]
   LexSem("V","finish",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("finish"),Adv("off"),arg1,arg2))),

 'finish-out-06': # ARG0:finisher, agent of finishing / ARG1:thing finished / ARG2:Instrument, thing finished out with / ARG3:point at which arg1 ends [finish.xml]
   LexSem("V","finish",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("finish"),Adv("out"),arg1,arg2,arg3))),

 'finish-up-04': # ARG0:intentional agent / ARG1:thing finishing / ARG2:explicit instrument / ARG3:point at which thing finishes [finish.xml]
   LexSem("V","finish",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("finish"),Adv("up"),arg1,arg2,arg3))),

 'fire-01': # ARG0:shooter / ARG1:gun/projectile [fire.xml]
   LexSem("V","fire",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fire"),arg1))),

 'fire-02': # ARG0:employer / ARG1:ex-employee / ARG2:job [fire.xml]
   LexSem("V","fire",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fire"),arg1,pp("from",arg2)))),

 'fire-03': # ARG0:baker, agent / ARG1:thing burning or baking [fire.xml]
   LexSem("V","fire",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fire"),arg1))),

 'fire-04': # ARG0:ignitor, agent / ARG1:thing ignited [fire.xml]
   LexSem("V","fire",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fire"),arg1))),

 'fireproof-01': # ARG0:fireproofer, agent or instrument/substance / ARG1:thing now fireproof [fireproof.xml]
   LexSem("V","fireproof",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fireproof"),arg1))),

 'firm-01': # ARG0:agent, entity making something else become firm / ARG1:thing becoming firm / ARG2:EXT, amount risen / ARG3:start point / ARG4:end point [firm.xml]
   LexSem("V","firm",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("firm"),arg1,arg2,arg3,pp("to",arg4)))),

 'firm-up-02': # ARG0:agent, entity making something else become firm / ARG1:thing becoming firm [firm.xml]
   LexSem("V","firm",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("firm"),Adv("up"),arg1))),

 'fish-01': # ARG0:fisherman, agent / ARG1:fish [fish.xml]
   LexSem("V","fish",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fish"),pp("for",arg1)))),

 'fissure-101': # ARG0:Causer of fissuring / ARG1:Entity cracking [fissure.xml]
   LexSem("V","fissure",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fissure"),arg1))),

 'fit-01': # ARG0:agent, causer of fitting; must be present for this sense to apply / ARG1:thing that fits / ARG2:fits whom, what, where [fit.xml]
   LexSem("V","fit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fit"),arg1,pp("for",arg2)))),

 'fit-06': # ARG1:thing that fits / ARG2:fits what, where [fit.xml]
   LexSem("V","fit",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("fit"),pp("in",arg2)))),

 'fit-in-02': # ARG1:first or all things fitting in / ARG2:second thing, fitting in with what [fit.xml]
   LexSem("V","fit",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("fit"),Adv("in"),pp("with",arg2)))),

 'fix-01': # ARG0:maker, preparer / ARG1:thing made / ARG3:benefactive [fix.xml]
   LexSem("V","fix",[":ARG0",":ARG1",":ARG3"],lambda arg0,arg1,arg3:S(arg0,VP(V("fix"),arg1,pp("for",arg3)))),

 'fix-02': # ARG0:repairer / ARG1:thing repaired / ARG2:benefactive [fix.xml]
   LexSem("V","fix",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fix"),arg1,pp("for",arg2)))),

 'fix-03': # ARG0:agent, setter / ARG1:thing set / ARG2:location, position, attribute [fix.xml]
   LexSem("V","fix",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fix"),arg1,pp("at",arg2)))),

 'fix-up-04': # ARG0:agent / ARG1:person fixed up / ARG2:fixed up with [fix.xml]
   LexSem("V","fix",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fix"),Adv("up"),arg1,pp("with",arg2)))),

 'fixate-01': # ARG0:agent, entity doing the fixating / ARG1:thing being affixed, attention / ARG2:fixated on [fixate.xml]
   LexSem("V","fixate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fixate"),arg1,pp("on",arg2)))),

 'fizz-01': # ARG0:fizzy thing [fizz.xml]
   LexSem("V","fizz",[":ARG0"],lambda arg0:S(arg0,VP(V("fizz")))),

 'fizzle-01': # ARG1:entity failed [fizzle.xml]
   LexSem("V","fizzle",[":ARG1"],lambda arg1:S(arg1,VP(V("fizzle")))),

 'flabbergast-01': # ARG0:Stimulus / ARG1:experiencer [flabbergast.xml]
   LexSem("V","flabbergast",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("flabbergast"),arg1))),

 'flag-01': # ARG0:entity doing the dropping / ARG1:Logical subject, patient, thing falling / ARG2:EXT, amount fallen / ARG3:start point / ARG4:end point, end state of arg1 [flag.xml]
   LexSem("V","flag",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("flag"),arg1,arg2,arg3,arg4))),

 'flag-02': # ARG0:signaler / ARG1:signaled [flag.xml]
   LexSem("V","flag",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("flag"),arg1))),

 'flagellate-01': # ARG0:hitter / ARG1:victim / ARG2:resulting state [flagellate.xml]
   LexSem("V","flagellate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("flagellate"),arg1,pp("into",arg2)))),

 'flail-01': # ARG0:hitter / ARG1:thing hit / ARG2:instrument of hitting [flail.xml]
   LexSem("V","flail",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("flail"),pp("at",arg1),arg2))),

 'flake-01': # ARG0:agent/cause of flaking / ARG1:entity becoming flakes / ARG2:instrument used / ARG3:resulting state of arg1, often prepositional [flake.xml]
   LexSem("V","flake",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("flake"),arg1,pp("with",arg2),pp("into",arg3)))),

 'flake-02': # ARG0:person failing to meet obligations / ARG1:obligation, event, coparticipant arg0 fails, often with 'on' [flake.xml]
   LexSem("V","flake",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("flake"),pp("on",arg1)))),

 'flake-out-03': # ARG0:agent, person failing obligations / ARG1:obligations shirked, often with 'on' [flake.xml]
   LexSem("V","flake",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("flake"),Adv("out"),pp("on",arg1)))),

 'flame-01': # ARG1:entity flaming [flame.xml]
   LexSem("V","flame",[":ARG1"],lambda arg1:S(arg1,VP(V("flame")))),

 'flank-01': # ARG0:things on the side / ARG1:thing in the middle [flank.xml]
   LexSem("V","flank",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("flank"),arg1))),

 'flap-01': # ARG0:causer of motion / ARG1:thing flapping [flap.xml]
   LexSem("V","flap",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("flap"),arg1))),

 'flare-02': # ARG0:agent of flaring (sometimes a speaker) / ARG1:thing burning/thing said/anger [flare.xml]
   LexSem("V","flare",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("flare"),arg1))),

 'flare-03': # ARG0:Causer of flaring / ARG1:Thing flared [flare.xml]
   LexSem("V","flare",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("flare"),arg1))),

 'flare-up-01': # ARG1:thing starting [flare.xml]
   LexSem("V","flare",[":ARG1"],lambda arg1:S(arg1,VP(V("flare"),Adv("up")))),

 'flash-01': # ARG0:shower, agent / ARG1:thing shining / ARG2:location, such as screen [flash.xml]
   LexSem("V","flash",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("flash"),arg1,pp("on",arg2)))),

 'flash-02': # ARG0:causer of motion, agent / ARG1:thing moving [flash.xml]
   LexSem("V","flash",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("flash"),arg1))),

 'flash-back-03': # ARG1:entity returning / ARG2:returning to [flash.xml]
   LexSem("V","flash",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("flash"),Adv("back"),pp("to",arg2)))),

 'flatten-01': # ARG0:causer of flatness, agent / ARG1:flat thing [flatten.xml]
   LexSem("V","flatten",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("flatten"),arg1))),

 'flatten-out-02': # ARG0:causer of flatness, agent / ARG1:flat thing [flatten.xml]
   LexSem("V","flatten",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("flatten"),Adv("out"),pp("of",arg1)))),

 'flatter-01': # ARG0:Stimulus of gratification / ARG1:target of gratification [flatter.xml]
   LexSem("V","flatter",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("flatter"),arg1))),

 'flaunt-01': # ARG0:shower, exhibitor, agent / ARG1:entity flaunted [flaunt.xml]
   LexSem("V","flaunt",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("flaunt"),arg1))),

 'flaw-01': # ARG0:causer of flaw, agent (rare) / ARG1:entity flawed [flaw.xml]
   LexSem("V","flaw",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("flaw"),arg1))),

 'flay-01': # ARG0:remover of skin, agent / ARG1:thing beaten / ARG2:instrument [flay.xml]
   LexSem("V","flay",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("flay"),arg1,pp("with",arg2)))),

 'fleck-01': # ARG0:causer of spots / ARG1:(newly) spotted thing / ARG2:spots [fleck.xml]
   LexSem("V","fleck",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fleck"),arg1,pp("with",arg2)))),

 'fledge-01': # ARG0:preparer / ARG1:thing made ready / ARG2:feathers, fledge with what? [fledge.xml]
   LexSem("V","fledge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fledge"),arg1,pp("with",arg2)))),

 'flee-05': # ARG0:entity fleeing / ARG1:person/place/condition fled from / ARG2:destination [fly.xml]
   LexSem("V","flee",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("flee"),arg1,arg2))),

 'fleece-01': # ARG0:entity removing / ARG1:thing being removed / ARG2:removed from [fleece.xml]
   LexSem("V","fleece",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fleece"),arg1,arg2))),

 'flesh-out-01': # ARG0:agent, cause of fleshing out, planner / ARG1:thing now planned more fully / ARG2:source, arg1 is fleshed out from what idea? [flesh.xml]
   LexSem("V","flesh",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("flesh"),Adv("out"),arg1,pp("from",arg2)))),

 'flex-01': # ARG0:agent, entity with muscles / ARG1:bulging muscle [flex.xml]
   LexSem("V","flex",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("flex"),arg1))),

 'flex-02': # ARG0:causal agent / ARG1:thing being bent / ARG2:instrumet / ARG3:end shape [flex.xml]
   LexSem("V","flex",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("flex"),arg1,pp("with",arg2),pp("into",arg3)))),

 'flick-01': # ARG0:cause of motion / ARG1:thing in motion / ARG2:path [flick.xml]
   LexSem("V","flick",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("flick"),arg1,pp("up",arg2)))),

 'flick-02': # ARG0:toucher / ARG1:touched / ARG2:instrument [flick.xml]
   LexSem("V","flick",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("flick"),arg1,pp("with",arg2)))),

 'flick-03': # ARG0:causer of effect / ARG1:thing effected / ARG2:effect [flick.xml]
   LexSem("V","flick",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("flick"),arg1,pp("off",arg2)))),

 'flicker-01': # ARG1:source of light [flicker.xml]
   LexSem("V","flicker",[":ARG1"],lambda arg1:S(arg1,VP(V("flicker")))),

 'flinch-01': # ARG0:entity flinching [flinch.xml]
   LexSem("V","flinch",[":ARG0"],lambda arg0:S(arg0,VP(V("flinch")))),

 'fling-01': # ARG0:thrower / ARG1:thing thrown / ARG2:thrown at, to, over, etc [fling.xml]
   LexSem("V","fling",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fling"),arg1,pp("up",arg2)))),

 'flip-01': # ARG0:flipper, agent / ARG1:thing flipped / ARG2:flipped to/into [flip.xml]
   LexSem("V","flip",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("flip"),arg1,pp("to",arg2)))),

 'flip-out-02': # ARG0:entity going crazy / ARG1:flipping out about [flip.xml]
   LexSem("V","flip",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("flip"),Adv("out"),pp("over",arg1)))),

 'flipflop-01': # ARG0:causer of change / ARG1:thing changing, issue flip-floped on / ARG2:end state, attribute of arg 1 / ARG3:start state [flipflop.xml]
   LexSem("V","flip-flop",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("flip-flop"),arg1,arg2,arg3))),

 'flirt-01': # ARG0:flirt, agent / ARG1:entity flirted with [flirt.xml]
   LexSem("V","flirt",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("flirt"),pp("with",arg1)))),

 'flit-01': # ARG1:entity moving, flitter / ARG2:path / ARG3:start point / ARG4:end point [flit.xml]
   LexSem("V","flit",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("flit"),pp("amid",arg2),arg3,pp("to",arg4)))),

 'float-01': # ARG0:causative agent / ARG1:thing floating / ARG2:benefactive, destination [float.xml]
   LexSem("V","float",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("float"),arg1,pp("to",arg2)))),

 'float-02': # ARG0:giver / ARG1:thing given / ARG2:recipient / ARG3:in exchange for/ purpose of loan [float.xml]
   LexSem("V","float",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("float"),arg1,arg2,pp("for",arg3)))),

 'flock-01': # ARG0:entity coming together [flock.xml]
   LexSem("V","flock",[":ARG0"],lambda arg0:S(arg0,VP(V("flock")))),

 'flock-02': # ARG0:birds of a feather, entity in motion / ARG1:direction [flock.xml]
   LexSem("V","flock",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("flock"),pp("to",arg1)))),

 'flog-01': # ARG0:hitter / ARG1:victim [flog.xml]
   LexSem("V","flog",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("flog"),arg1))),

 'flood-01': # ARG0:causer / ARG1:location flooded / ARG2:liquid [flood.xml]
   LexSem("V","flood",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("flood"),arg1,pp("with",arg2)))),

 'floor-01': # ARG0:cause of flooring / ARG1:floored entity / ARG2:Instrument or Manner if separate from Arg 0 [floor.xml]
   LexSem("V","floor",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("floor"),arg1,pp("with",arg2)))),

 'floor-02': # ARG0:Causer of covering, flooring / ARG1:Ground covered / ARG2:Covered with what, floor material [floor.xml]
   LexSem("V","floor",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("floor"),arg1,pp("with",arg2)))),

 'flop-01': # ARG0:agent, causer / ARG1:entity dropped [flop.xml]
   LexSem("V","flop",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("flop"),arg1))),

 'floss-01': # ARG0:Flosser / ARG1:Teeth, gums / ARG2:Floss itself, instrument [floss.xml]
   LexSem("V","floss",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("floss"),arg1,pp("with",arg2)))),

 'flounce-01': # ARG0:walker [flounce.xml]
   LexSem("V","flounce",[":ARG0"],lambda arg0:S(arg0,VP(V("flounce")))),

 'flounder-01': # ARG0:thing like a fish [flounder.xml]
   LexSem("V","flounder",[":ARG0"],lambda arg0:S(arg0,VP(V("flounder")))),

 'flour-01': # ARG0:chef, entity causing coating / ARG1:meat, entity coated in flour / ARG2:flour itself, type of flour [flour.xml]
   LexSem("V","flour",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("flour"),arg1,pp("in",arg2)))),

 'flourish-01': # ARG1:thing flourishing / ARG2:secondary attribute [flourish.xml]
   LexSem("V","flourish",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("flourish"),pp("as",arg2)))),

 'flout-01': # ARG0:contemptuous entity, agent / ARG1:entity flouted [flout.xml]
   LexSem("V","flout",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("flout"),arg1))),

 'flow-01': # ARG1:substance (ie, water) [flow.xml]
   LexSem("V","flow",[":ARG1"],lambda arg1:S(arg1,VP(V("flow")))),

 'flower-01': # ARG1:patient, flowering entity [flower.xml]
   LexSem("V","flower",[":ARG1"],lambda arg1:S(arg1,VP(V("flower")))),

 'fluctuate-01': # ARG1:thing moving / ARG2:EXT or MNR / ARG3:start point / ARG4:end point / ARG5:medium [fluctuate.xml]
   LexSem("V","fluctuate",[":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg1,arg2,arg3,arg4,arg5:S(arg1,VP(V("fluctuate"),arg2,pp("from",arg3),pp("to",arg4),pp("between",arg5)))),

 'flunk-01': # ARG0:assessor of not failing (professor) / ARG1:thing failing / ARG2:task [flunk.xml]
   LexSem("V","flunk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("flunk"),arg1,arg2))),

 'fluoresce-01': # ARG1:entity fluorescing / ARG2:Color fluoresced [fluoresce.xml]
   LexSem("V","fluoresce",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("fluoresce"),arg2))),

 'fluoridate-01': # ARG0:agent, entity adding fluoride / ARG1:added to [fluoridate.xml]
   LexSem("V","fluoridate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fluoridate"),arg1))),

 'flush-01': # ARG0:flusher / ARG1:removed material / ARG2:container, source [flush.xml]
   LexSem("V","flush",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("flush"),arg1,arg2))),

 'flush-03': # ARG0:causer of color change / ARG1:entity turning red / ARG2:eventual color [flush.xml]
   LexSem("V","flush",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("flush"),arg1,arg2))),

 'flush-out-02': # ARG0:flusher / ARG1:thing found [flush.xml]
   LexSem("V","flush",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("flush"),Adv("out"),arg1))),

 'fluster-01': # ARG0:Stimulus of nervousness / ARG1:nervous person [fluster.xml]
   LexSem("V","fluster",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fluster"),arg1))),

 'flutter-01': # ARG0:butterflyish entity / ARG1:path [flutter.xml]
   LexSem("V","flutter",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("flutter"),pp("to",arg1)))),

 'flux-01': # ARG1:Mover, entity flowing [flux.xml]
   LexSem("V","flux",[":ARG1"],lambda arg1:S(arg1,VP(V("flux")))),

 'flux-02': # ARG0:Agent, cause of melting / ARG1:Entity becoming liquid / ARG2:Resulting liquid [flux.xml]
   LexSem("V","flux",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("flux"),arg1,pp("into",arg2)))),

 'flux-03': # ARG0:agent, cause of mixing / ARG1:First or all (if together in single constituent) ingredients mixed / ARG2:Second ingredient when separate mention / ARG3:End product [flux.xml]
   LexSem("V","flux",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("flux"),arg1,arg2,pp("into",arg3)))),

 'fly-01': # ARG0:pilot, agentive entity capable of flight (like a bird) / ARG1:passenger, cargo / ARG2:aircraft flown, flight number, steed, non-agentive thing in motion / ARG3:type of flight plan, mission, cognate object (like 'a flight' or 'sorties') / ARG4:airline [fly.xml]
   LexSem("V","fly",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("fly"),arg1,pp("in",arg2),arg3,pp("for",arg4)))),

 'fly-02': # ARG0:flouter / ARG1:"in the face of __" [fly.xml]
   LexSem("V","fly",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fly"),pp("in",arg1)))),

 'fly-03': # ARG0:hitter / ARG1:bases / ARG2:where player moves to after hitting fly ball [fly.xml]
   LexSem("V","fly",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fly"),arg1,pp("to",arg2)))),

 'fly-06': # ARG0:causal agent / ARG1:thing suspended in the air [fly.xml]
   LexSem("V","fly",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fly"),arg1))),

 'fly-out-04': # ARG0:hitter / ARG1:bases / ARG2:where the player moves to after hitting fly ball [fly.xml]
   LexSem("V","fly",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fly"),Adv("out"),arg1,pp("to",arg2)))),

 'foal-01': # ARG0:Mother / ARG1:Baby [foal.xml]
   LexSem("V","foal",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("foal"),arg1))),

 'foam-01': # ARG0:causer of foaminess / ARG1:foamy thing [foam.xml]
   LexSem("V","foam",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("foam"),arg1))),

 'focalize-01': # ARG0:agent, causer of focussing / ARG1:experiencer of focussing, thing focussed / ARG2:thing focussed-on [focalize.xml]
   LexSem("V","focalize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("focalize"),arg1,pp("on",arg2)))),

 'focus-01': # ARG0:agent, focuser / ARG1:thing focused / ARG2:focused-on [focus.xml]
   LexSem("V","focus",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("focus"),arg1,pp("on",arg2)))),

 'fog-01': # ARG0:causer of fog / ARG1:thing covered with fog [fog.xml]
   LexSem("V","fog",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fog"),arg1))),

 'foil-01': # ARG0:preventer, agent / ARG1:bad guy / ARG2:foiled in, nefarious plot [foil.xml]
   LexSem("V","foil",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("foil"),arg1,pp("in",arg2)))),

 'foist-01': # ARG0:forcer / ARG1:thing forced / ARG2:benefactive, foisted-on [foist.xml]
   LexSem("V","foist",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("foist"),arg1,pp("on",arg2)))),

 'fold-01': # ARG0:mixer / ARG1:new ingredient / ARG2:medium [fold.xml]
   LexSem("V","fold",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fold"),arg1,pp("into",arg2)))),

 'fold-02': # ARG0:person / ARG1:hands [fold.xml]
   LexSem("V","fold",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fold"),arg1))),

 'fold-03': # ARG0:builder / ARG1:construction / ARG2:material, start state / ARG3:benefactive / ARG4:end state [fold.xml]
   LexSem("V","fold",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("fold"),pp("into",arg1),arg2,pp("for",arg3),arg4))),

 'fold-04': # ARG0:cardplayer [fold.xml]
   LexSem("V","fold",[":ARG0"],lambda arg0:S(arg0,VP(V("fold")))),

 'fold-06': # ARG0:business owner / ARG1:failing business [fold.xml]
   LexSem("V","fold",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fold"),arg1))),

 'fold-up-05': # ARG0:builder / ARG1:construction / ARG2:material, start state / ARG3:benefactive / ARG4:end state [fold.xml]
   LexSem("V","fold",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("fold"),Adv("up"),arg1,arg2,arg3,arg4))),

 'foliate-01': # ARG0:agent, numberer / ARG1:book, pages numbered / ARG2:attribute, numbers themselves [foliate.xml]
   LexSem("V","foliate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("foliate"),arg1,pp("with",arg2)))),

 'foliate-02': # ARG1:plant growing / ARG2:leaves themselves [foliate.xml]
   LexSem("V","foliate",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("foliate"),arg2))),

 'follow-01': # ARG0:causal agent / ARG1:thing following, coming after / ARG2:thing followed, coming before [follow.xml]
   LexSem("V","follow",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("follow"),arg1,arg2))),

 'follow-02': # ARG0:acceptor, pursuer / ARG1:thing followed / ARG2:benefactive [follow.xml]
   LexSem("V","follow",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("follow"),arg1,pp("for",arg2)))),

 'follow-04': # ARG1:described [follow.xml]
   LexSem("V","follow",[":ARG1"],lambda arg1:S(arg1,VP(V("follow")))),

 'follow-05': # ARG1:conclusion / ARG2:thesis [follow.xml]
   LexSem("V","follow",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("follow"),pp("from",arg2)))),

 'follow-through-07': # ARG0:fulfiller / ARG1:promise, plans, etc [follow.xml]
   LexSem("V","follow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("follow"),Adv("through"),pp("on",arg1)))),

 'follow-up-03': # ARG0:causal agent / ARG1:thing followed up on, coming before [follow.xml]
   LexSem("V","follow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("follow"),Adv("up"),pp("on",arg1)))),

 'foment-01': # ARG0:encourager / ARG1:revolution [foment.xml]
   LexSem("V","foment",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("foment"),arg1))),

 'fondle-01': # ARG0:fondler, agent / ARG1:thing fondled, patient / ARG2:instrument of fondling (rare) [fondle.xml]
   LexSem("V","fondle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fondle"),arg1,arg2))),

 'fool-01': # ARG0:trickster, agent / ARG1:entity deceived [fool.xml]
   LexSem("V","fool",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fool"),arg1))),

 'fool-around-02': # ARG0:entity fooling around [fool.xml]
   LexSem("V","fool",[":ARG0"],lambda arg0:S(arg0,VP(V("fool"),Adv("around")))),

 'foot-01': # ARG0:payer / ARG1:some variation on 'the bill' [foot.xml]
   LexSem("V","foot",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("foot"),arg1))),

 'forage-01': # ARG0:searcher / ARG1:area foraged / ARG2:thing(s) searched for [forage.xml]
   LexSem("V","forage",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("forage"),arg1,pp("for",arg2)))),

 'forbid-01': # ARG0:disallower, agent / ARG1:forbidden action / ARG2:recipient [forbid.xml]
   LexSem("V","forbid",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("forbid"),arg1,arg2))),

 'force-01': # ARG0:forcer / ARG1:impelled agent / ARG2:impelled action [force.xml]
   LexSem("V","force",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("force"),arg1,pp("to",arg2)))),

 'force-02': # ARG0:forcer / ARG1:thing forced / ARG2:benefactive, forced-on [force.xml]
   LexSem("V","force",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("force"),arg1,pp("on",arg2)))),

 'force-03': # ARG0:put-er, not putter / ARG1:thing put / ARG2:where put [force.xml]
   LexSem("V","force",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("force"),arg1,pp("into",arg2)))),

 'ford-01': # ARG0:entity in motion / ARG1:barrier [ford.xml]
   LexSem("V","ford",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ford"),arg1))),

 'forecast-01': # ARG0:fortune teller / ARG1:prediction / ARG2:secondary predication [forecast.xml]
   LexSem("V","forecast",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("forecast"),arg1,arg2))),

 'foreclose-01': # ARG0:bank / ARG1:property [foreclose.xml]
   LexSem("V","foreclose",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("foreclose"),pp("on",arg1)))),

 'forego-01': # ARG0:abstainer / ARG1:thing foregone [forego.xml]
   LexSem("V","forego",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("forego"),arg1))),

 'foreknow-01': # ARG0:Seer / ARG1:Future foreseen / ARG2:attribute of future [foreknow.xml]
   LexSem("V","foreknow",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("foreknow"),arg1,pp("as",arg2)))),

 'foresee-01': # ARG0:seer / ARG1:thing seen [foresee.xml]
   LexSem("V","foresee",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("foresee"),arg1))),

 'foreshadow-01': # ARG0:predictor of future / ARG1:prediction / ARG2:means of prediction [foreshadow.xml]
   LexSem("V","foreshadow",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("foreshadow"),arg1,pp("by",arg2)))),

 'forest-01': # ARG0:Gardener, cause of forestation / ARG1:area covered in forest / ARG2:trees, forest itself, type of forest [forest.xml]
   LexSem("V","forest",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("forest"),arg1,pp("with",arg2)))),

 'forestall-01': # ARG0:cause of delay / ARG1:awaited event [forestall.xml]
   LexSem("V","forestall",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("forestall"),arg1))),

 'foretell-01': # ARG0:speaker / ARG1:thing prophecied / ARG2:recipient, hearer [foretell.xml]
   LexSem("V","foretell",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("foretell"),arg1,arg2))),

 'forfeit-01': # ARG0:giver / ARG1:thing given / ARG2:entity given to [forfeit.xml]
   LexSem("V","forfeit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("forfeit"),arg1,pp("to",arg2)))),

 'forge-01': # ARG0:counterfeiter / ARG1:copied [forge.xml]
   LexSem("V","forge",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("forge"),arg1))),

 'forge-02': # ARG0:builder / ARG1:construction / ARG2:material, start state / ARG4:end state [forge.xml]
   LexSem("V","forge",[":ARG0",":ARG1",":ARG2",":ARG4"],lambda arg0,arg1,arg2,arg4:S(arg0,VP(V("forge"),arg1,pp("from",arg2),pp("into",arg4)))),

 'forget-01': # ARG0:forgetter / ARG1:thing forgotten [forget.xml]
   LexSem("V","forget",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("forget"),arg1))),

 'forgive-01': # ARG0:forgiver / ARG1:entity forgiven / ARG2:for what [forgive.xml]
   LexSem("V","forgive",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("forgive"),arg1,pp("for",arg2)))),

 'forgo-01': # ARG0:entity going without / ARG1:thing given up or avoided / ARG2:in exchange for / ARG3:recipient [forgo.xml]
   LexSem("V","forgo",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("forgo"),arg1,pp("for",arg2),pp("to",arg3)))),

 'forgo-02': # ARG1:thing going before / ARG2:thing going after [forgo.xml]
   LexSem("V","forgo",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("forgo"),arg2))),

 'fork-out-02': # ARG0:payer, agent / ARG1:thing paid for / ARG2:person paid / ARG3:price [fork.xml]
   LexSem("V","fork",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("fork"),Adv("out"),pp("for",arg1),arg2,arg3))),

 'fork-over-01': # ARG0:payer, agent / ARG1:thing paid for / ARG2:person paid / ARG3:price [fork.xml]
   LexSem("V","fork",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("fork"),Adv("over"),arg1,arg2,arg3))),

 'form-01': # ARG0:creator / ARG1:thing created / ARG2:source / ARG3:benefactive / ARG4:attribute of arg1 [form.xml]
   LexSem("V","form",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("form"),arg1,pp("from",arg2),arg3,arg4))),

 'form-02': # ARG0:components / ARG1:whole [form.xml]
   LexSem("V","form",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("form"),arg1))),

 'formalize-01': # ARG0:causer of formalization, agent / ARG1:entity formalized [formalize.xml]
   LexSem("V","formalize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("formalize"),arg1))),

 'formulate-01': # ARG0:creator / ARG1:thing created / ARG2:source / ARG3:benefactive / ARG4:attribute, secondary predication [formulate.xml]
   LexSem("V","formulate",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("formulate"),arg1,arg2,arg3,arg4))),

 'forsake-01': # ARG0:abandoner, agent / ARG1:entity forsaken [forsake.xml]
   LexSem("V","forsake",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("forsake"),arg1))),

 'fort-up-01': # ARG0:fortifier [fort.xml]
   LexSem("V","fort",[":ARG0"],lambda arg0:S(arg0,VP(V("fort"),Adv("up")))),

 'fortify-01': # ARG0:causal agent / ARG1:thing being fortified / ARG3:fortified with what [fortify.xml]
   LexSem("V","fortify",[":ARG0",":ARG1",":ARG3"],lambda arg0,arg1,arg3:S(arg0,VP(V("fortify"),arg1,pp("with",arg3)))),

 'fortify-02': # ARG0:fort builders / ARG1:thing becoming a fort / ARG2:materials used [fortify.xml]
   LexSem("V","fortify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fortify"),arg1,arg2))),

 'forward-01': # ARG0:sender, agent / ARG1:entity forwarded / ARG2:destination [forward.xml]
   LexSem("V","forward",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("forward"),arg1,arg2))),

 'fossilize-01': # ARG0:cause of fossilization / ARG1:entity made into fossil / ARG2:result, attribe of arg 1 [fossilize.xml]
   LexSem("V","fossilize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fossilize"),arg1,pp("in",arg2)))),

 'foster-01': # ARG0:promoter of growth, agent / ARG1:thing growing [foster.xml]
   LexSem("V","foster",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("foster"),arg1))),

 'foul-01': # ARG0:causer of wrongness, agent / ARG1:thing gone wrong / ARG2:mode-specific description of act of going wrong [foul.xml]
   LexSem("V","foul",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("foul"),arg1,pp("on",arg2)))),

 'found-01': # ARG0:agent, setter / ARG1:thing set, based / ARG2:attribute (founded on, as), base [found.xml]
   LexSem("V","found",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("found"),arg1,pp("as",arg2)))),

 'founder-01': # ARG1:thing sinking / ARG2:prepositional cause [founder.xml]
   LexSem("V","founder",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("founder"),pp("under",arg2)))),

 'fowl-01': # ARG0:agent or causer / ARG1:entity gathered / ARG2:gathered into / ARG3:beneficiary [fowl.xml]
   LexSem("V","fowl",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("fowl"),arg1,arg2,arg3))),

 'fox-01': # ARG0:confounding factor / ARG1:confused entity [fox.xml]
   LexSem("V","fox",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fox"),arg1))),

 'fox-02': # ARG0:cause / ARG1:discolored item [fox.xml]
   LexSem("V","fox",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fox"),arg1))),

 'foxtrot-01': # ARG0:Dancer (or dancers in one constituent) / ARG1:Entity made to dance, move (feet, partner, etc) [foxtrot.xml]
   LexSem("V","foxtrot",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("foxtrot"),arg1))),

 'fraction-01': # ARG0:causer, agent / ARG1:whole [fraction.xml]
   LexSem("V","fraction",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fraction"),arg1))),

 'fracture-01': # ARG0:breaker / ARG1:broken [fracture.xml]
   LexSem("V","fracture",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fracture"),arg1))),

 'fragment-01': # ARG0:causer, agent / ARG1:fragmented thing [fragment.xml]
   LexSem("V","fragment",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fragment"),arg1))),

 'frame-01': # ARG0:decorator / ARG1:thing decorated / ARG2:decorations [frame.xml]
   LexSem("V","frame",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("frame"),arg1,pp("with",arg2)))),

 'frame-02': # ARG0:accuser / ARG1:criminal / ARG2:crime [frame.xml]
   LexSem("V","frame",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("frame"),arg1,pp("for",arg2)))),

 'frame-03': # ARG0:thing being around / ARG1:thing surrounded [frame.xml]
   LexSem("V","frame",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("frame"),arg1))),

 'frame-04': # ARG0:framer / ARG1:verb [frame.xml]
   LexSem("V","frame",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("frame"),pp("over",arg1)))),

 'frame-05': # ARG0:legislator / ARG1:potential law [frame.xml]
   LexSem("V","frame",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("frame"),arg1))),

 'frame-06': # ARG0:describer / ARG1:topic or issue / ARG2:desired attribute of arg 1 [frame.xml]
   LexSem("V","frame",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("frame"),arg1,pp("as",arg2)))),

 'franchise-01': # ARG0:franchiser / ARG1:example of chain / ARG2:franchisee [franchise.xml]
   LexSem("V","franchise",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("franchise"),pp("about",arg1),pp("to",arg2)))),

 'fray-01': # ARG0:causer of wear, agent / ARG1:entity frayed [fray.xml]
   LexSem("V","fray",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fray"),arg1))),

 'freak-01': # ARG1:freaked entity [freak.xml]
   LexSem("V","freak",[":ARG1"],lambda arg1:S(arg1,VP(V("freak")))),

 'freak-out-02': # ARG0:causer / ARG1:freaked entity [freak.xml]
   LexSem("V","freak",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("freak"),Adv("out"),arg1))),

 'free-01': # ARG0:entity providing freedom, agent / ARG1:entity made free / ARG2:freed from / ARG3:beneficiary/purpose [free.xml]
   LexSem("V","free",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("free"),arg1,pp("from",arg2),pp("for",arg3)))),

 'free-up-02': # ARG0:agent, free-er upper / ARG1:resource made available / ARG2:old use / ARG3:new use [free.xml]
   LexSem("V","free",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("free"),Adv("up"),arg1,arg2,arg3))),

 'freeze-01': # ARG0:causer of freezing / ARG1:thing freezing / ARG2:secondary predication on arg1 [freeze.xml]
   LexSem("V","freeze",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("freeze"),arg1,arg2))),

 'freeze-02': # ARG0:blocker, Agent / ARG1:Theme (action or object being stopped) / ARG2:attribute of arg1 / ARG3:Instrument [freeze.xml]
   LexSem("V","freeze",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("freeze"),arg1,arg2,pp("by",arg3)))),

 'freeze-over-03': # ARG1:thing freezing over [freeze.xml]
   LexSem("V","freeze",[":ARG1"],lambda arg1:S(arg1,VP(V("freeze"),Adv("over")))),

 'frequent-01': # ARG0:visitor, agent / ARG1:place visited [frequent.xml]
   LexSem("V","frequent",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("frequent"),arg1))),

 'freshen-01': # ARG0:the fresh-maker, causer of freshness / ARG1:fresh entity / ARG2:Instrument or Manner if separate from arg 0 [freshen.xml]
   LexSem("V","freshen",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("freshen"),arg1,pp("with",arg2)))),

 'freshen-up-02': # ARG0:the fresh-maker, agent / ARG1:entity now fresh / ARG2:Instrument or Manner if separate from arg 0 [freshen.xml]
   LexSem("V","freshen",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("freshen"),Adv("up"),arg1,arg2))),

 'fret-01': # ARG0:fretter, worrier / ARG1:cause [fret.xml]
   LexSem("V","fret",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fret"),pp("about",arg1)))),

 'fried-02': # ARG0:causer / ARG1:fried, unusable entity [fry.xml]
   LexSem("V","fry",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fry"),arg1))),

 'frighten-01': # ARG0:cause of fear / ARG1:frightened entity / ARG2:instrument, if separate from arg0 / ARG3:intensifier [frighten.xml]
   LexSem("V","frighten",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("frighten"),arg1,arg2,arg3))),

 'frighten-away-03': # ARG0:causer of fear / ARG1:frightened entity / ARG2:instrument, if separate from arg0 [frighten.xml]
   LexSem("V","frighten",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("frighten"),Adv("away"),arg1,arg2))),

 'frighten-off-02': # ARG0:cause of fear / ARG1:frightened entity / ARG2:instrument, if separate from arg0 [frighten.xml]
   LexSem("V","frighten",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("frighten"),Adv("off"),arg1,arg2))),

 'frisk-01': # ARG0:searcher / ARG1:thing searched / ARG2:looking for what? [frisk.xml]
   LexSem("V","frisk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("frisk"),arg1,arg2))),

 'fritter-away-01': # ARG0:spender, agent / ARG1:money, resources, entity frittered [fritter.xml]
   LexSem("V","fritter",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fritter"),Adv("away"),arg1))),

 'frock-01': # ARG0:causer of non-nudity, agent / ARG1:person dressed / ARG2:clothes [frock.xml]
   LexSem("V","frock",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("frock"),arg1,arg2))),

 'frogwalk-01': # ARG0:subject accompanier / ARG1:object accompanied / ARG3:start point / ARG4:end point [frogwalk.xml]
   LexSem("V","frog-walk",[":ARG0",":ARG1",":ARG3",":ARG4"],lambda arg0,arg1,arg3,arg4:S(arg0,VP(V("frog-walk"),arg1,arg3,arg4))),

 'frolic-01': # ARG0:frolicker, playful entity [frolic.xml]
   LexSem("V","frolic",[":ARG0"],lambda arg0:S(arg0,VP(V("frolic")))),

 'frost-01': # ARG0:causer of frosting / ARG1:thing frosted / ARG2:with what [frost.xml]
   LexSem("V","frost",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("frost"),arg1,pp("with",arg2)))),

 'frost-02': # ARG0:Pastry chef / ARG1:pastry, or thing being covered in frosting / ARG2:the frosting [frost.xml]
   LexSem("V","frost",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("frost"),arg1,pp("with",arg2)))),

 'frost-over-04': # ARG1:thing becoming covered in frost / ARG2:frosty substance [frost.xml]
   LexSem("V","frost",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("frost"),Adv("over"),pp("with",arg2)))),

 'frost-up-03': # ARG0:agent or cause of frostiness / ARG1:thing becoming obscurred with frost / ARG2:instrument/frost itself [frost.xml]
   LexSem("V","frost",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("frost"),Adv("up"),arg1,pp("with",arg2)))),

 'froth-01': # ARG1:entity frothing [froth.xml]
   LexSem("V","froth",[":ARG1"],lambda arg1:S(arg1,VP(V("froth")))),

 'frown-01': # ARG0:frowner [frown.xml]
   LexSem("V","frown",[":ARG0"],lambda arg0:S(arg0,VP(V("frown")))),

 'frown-02': # ARG0:disapprover / ARG1:disapproved action [frown.xml]
   LexSem("V","frown",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("frown"),pp("upon",arg1)))),

 'fructify-01': # ARG1:cause of fruitfulness / ARG2:fruitful thing [fructify.xml]
   LexSem("V","fructify",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("fructify"),arg2))),

 'frustrate-01': # ARG0:Stimulus, frustrater / ARG1:entity frustrated / ARG2:target of frustration (if in addition to arg0) [frustrate.xml]
   LexSem("V","frustrate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("frustrate"),arg1,arg2))),

 'fry-01': # ARG0:cook / ARG1:food [fry.xml]
   LexSem("V","fry",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fry"),arg1))),

 'fuck-01': # ARG0:party the first / ARG1:party the second [fuck.xml]
   LexSem("V","fuck",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fuck"),arg1))),

 'fuck-around-04': # ARG0:entity screwing around / ARG1:entity screwed around with, non-serious activity [fuck.xml]
   LexSem("V","fuck",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fuck"),Adv("around"),arg1))),

 'fuck-off-03': # ARG0:one who should go away [fuck.xml]
   LexSem("V","fuck",[":ARG0"],lambda arg0:S(arg0,VP(V("fuck"),Adv("off")))),

 'fuck-up-02': # ARG0:cause, agent / ARG1:big mistake [fuck.xml]
   LexSem("V","eff",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("eff"),Adv("up"),arg1))),

 'fuddle-01': # ARG0:agent/cause of confusion / ARG1:confused party [fuddle.xml]
   LexSem("V","fuddle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fuddle"),arg1))),

 'fudge-01': # ARG0:fudger / ARG1:thing fudged (on) [fudge.xml]
   LexSem("V","fudge",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fudge"),pp("on",arg1)))),

 'fudge-over-02': # ARG0:concealer, agent / ARG1:thing concealed [fudge.xml]
   LexSem("V","fudge",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fudge"),Adv("over"),arg1))),

 'fuel-01': # ARG0:intentional agent / ARG1:fire / ARG2:fuel, gasoline [fuel.xml]
   LexSem("V","fuel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fuel"),arg1,arg2))),

 'fulfill-01': # ARG0:fulfiller / ARG1:promise, contract, unresolved issue [fulfill.xml]
   LexSem("V","fulfill",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fulfill"),arg1))),

 'fumble-01': # ARG0:entity in motion / ARG1:path [fumble.xml]
   LexSem("V","fumble",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fumble"),pp("across",arg1)))),

 'fume-01': # ARG0:angry entity / ARG1:source of anger [fume.xml]
   LexSem("V","fume",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fume"),pp("at",arg1)))),

 'fume-02': # ARG0:speaker / ARG1:utterance / ARG2:hearer [fume.xml]
   LexSem("V","fume",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fume"),arg1,arg2))),

 'fun-01': # ARG0:Experiencer of fun / ARG1:Stimulus, what was fun/enjoyed? [fun.xml]
   LexSem("V","have-fun",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("have-fun"),arg1))),

 'function-01': # ARG0:worker / ARG1:job, project [function.xml]
   LexSem("V","function",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("function"),pp("as",arg1)))),

 'fund-01': # ARG0:financier / ARG1:project, whom/what is being funded? / ARG2:funds [fund.xml]
   LexSem("V","fund",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fund"),arg1,pp("by",arg2)))),

 'fundraise-04': # ARG0:raiser of funds / ARG1:amount raised / ARG2:beneficiary [raise.xml]
   LexSem("V","fundraise",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fundraise"),pp("of",arg1),pp("for",arg2)))),

 'funnel-01': # ARG0:causer of motion, agent / ARG1:thing moved / ARG2:destination / ARG3:source [funnel.xml]
   LexSem("V","funnel",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("funnel"),arg1,pp("to",arg2),pp("from",arg3)))),

 'furlough-01': # ARG0:employer / ARG1:worker [furlough.xml]
   LexSem("V","furlough",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("furlough"),arg1))),

 'furnish-01': # ARG0:supplier, agent / ARG1:entity furnished / ARG2:recipient [furnish.xml]
   LexSem("V","furnish",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("furnish"),arg1,pp("to",arg2)))),

 'furrow-01': # ARG1:brow, usually [furrow.xml]
   LexSem("V","furrow",[":ARG1"],lambda arg1:S(arg1,VP(V("furrow")))),

 'further-01': # ARG0:causer of advancement, agent / ARG1:entity furthered [further.xml]
   LexSem("V","further",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("further"),arg1))),

 'fuse-01': # ARG0:causer of fusing / ARG1:ingredient one / ARG2:ingredient two / ARG3:end product [fuse.xml]
   LexSem("V","fuse",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("fuse"),arg1,arg2,pp("to",arg3)))),

 'fuss-01': # ARG0:fusser, agent / ARG1:fussed over, target of emotion [fuss.xml]
   LexSem("V","fuss",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("fuss"),pp("over",arg1)))),

 'fuzz-01': # ARG0:causer of fuzziness / ARG1:fuzzy thing / ARG2:specific aspect of arg1 that is fuzzy [fuzz.xml]
   LexSem("V","fuzz",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("fuzz"),arg1,arg2))),

 'gab-01': # ARG0:First (or all if in one constituent) gabber / ARG1:gossip about / ARG2:Second gossiper, hearer (when separate constituent) [gab.xml]
   LexSem("V","gab",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("gab"),pp("about",arg1),pp("with",arg2)))),

 'gabble-01': # ARG0:gabbler / ARG1:utterance,sound / ARG2:listener,recipient [gabble.xml]
   LexSem("V","gabble",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("gabble"),arg1,pp("after",arg2)))),

 'gag-01': # ARG0:causer of gagging, agent / ARG1:entity gagged / ARG2:instrument, object in mouth [gag.xml]
   LexSem("V","gag",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("gag"),arg1,pp("with",arg2)))),

 'gain-01': # ARG1:Logical subject, patient, thing rising / ARG2:EXT, amount risen / ARG3:start point / ARG4:end point / ARG5:specific aspect of arg1 gaining [gain.xml]
   LexSem("V","gain",[":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg1,arg2,arg3,arg4,arg5:S(arg1,VP(V("gain"),arg2,pp("from",arg3),pp("to",arg4),arg5))),

 'gain-02': # ARG0:agent, entity acquiring something / ARG1:thing acquired / ARG2:source, gained from / ARG3:benefactive, gained for [gain.xml]
   LexSem("V","gain",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("gain"),arg1,pp("through",arg2),pp("for",arg3)))),

 'gall-01': # ARG0:causer of irritation / ARG1:galled entity / ARG2:Instrument or Manner if separate from arg 0 [gall.xml]
   LexSem("V","gall",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("gall"),arg1,arg2))),

 'gallop-01': # ARG0:galloping entity; horse / ARG1:path [gallop.xml]
   LexSem("V","gallop",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gallop"),pp("down",arg1)))),

 'galvanize-01': # ARG0:agent, galvanizer / ARG1:impelled agent / ARG2:impelled action [galvanize.xml]
   LexSem("V","galvanize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("galvanize"),arg1,pp("to",arg2)))),

 'galvanize-02': # ARG0:action / ARG1:reaction [galvanize.xml]
   LexSem("V","galvanize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("galvanize"),arg1))),

 'galvanize-03': # ARG0:galvanizer / ARG1:iron/steel thing [galvanize.xml]
   LexSem("V","galvanize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("galvanize"),arg1))),

 'gamble-01': # ARG0:gambler / ARG1:the stakes (money, etc.) / ARG2:thing bet on [gamble.xml]
   LexSem("V","gamble",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("gamble"),pp("with",arg1),pp("on",arg2)))),

 'gambol-01': # ARG1:entity moved, gamboler / ARG2:path / ARG3:start point / ARG4:end point [gambol.xml]
   LexSem("V","gambol",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("gambol"),pp("down",arg2),arg3,arg4))),

 'gape-01': # ARG0:gaper / ARG1:thing looked at [gape.xml]
   LexSem("V","gape",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gape"),pp("at",arg1)))),

 'garage-01': # ARG0:storer / ARG1:stored / ARG2:garage, location [garage.xml]
   LexSem("V","garage",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("garage"),arg1,arg2))),

 'garb-01': # ARG0:person putting on clothes / ARG1:person wearing clothes / ARG2:clothing [garb.xml]
   LexSem("V","garb",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("garb"),arg1,pp("in",arg2)))),

 'garble-01': # ARG0:distorter / ARG1:message [garble.xml]
   LexSem("V","garble",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("garble"),arg1))),

 'garden-01': # ARG0:gardener [garden.xml]
   LexSem("V","garden",[":ARG0"],lambda arg0:S(arg0,VP(V("garden")))),

 'garland-01': # ARG0:agent, garland-placer / ARG1:entity ornamented by garland, where placed / ARG2:garland itself, type of garland [garland.xml]
   LexSem("V","garland",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("garland"),arg1,pp("in",arg2)))),

 'garner-01': # ARG0:getter, garnerer, agent / ARG1:entity garnered [garner.xml]
   LexSem("V","garner",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("garner"),pp("as",arg1)))),

 'garnish-01': # ARG0:decorator / ARG1:thing decorated / ARG2:decorations [garnish.xml]
   LexSem("V","garnish",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("garnish"),arg1,pp("with",arg2)))),

 'garnish-02': # ARG0:witholder or extorter / ARG1:thing withheld or extorted / ARG2:withheld or extorted from [garnish.xml]
   LexSem("V","garnish",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("garnish"),arg1,arg2))),

 'garrotte-01': # ARG0:Causer of strangling / ARG1:strangled entity / ARG2:instrument, strangled with what device? [garrotte.xml]
   LexSem("V","garrotte",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("garrotte"),arg1,pp("with",arg2)))),

 'gas-01': # ARG0:provider / ARG1:fuel / ARG2:entity provided for (destination) [gas.xml]
   LexSem("V","gas",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("gas"),arg1,arg2))),

 'gas-03': # ARG0:killer / ARG1:victim / ARG2:explicit mention of type of gas [gas.xml]
   LexSem("V","gas",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("gas"),arg1,pp("with",arg2)))),

 'gas-up-02': # ARG0:provider / ARG1:fuel / ARG2:entity provided for (destination) [gas.xml]
   LexSem("V","gas",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("gas"),Adv("up"),arg1,arg2))),

 'gash-01': # ARG0:agent/cause of gashing / ARG1:entity becoming gashed / ARG2:instrument used / ARG3:resulting state of arg1, often prepositional [gash.xml]
   LexSem("V","gash",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("gash"),arg1,arg2,arg3))),

 'gasify-01': # ARG0:cause of gasification / ARG1:entity made into gas [gasify.xml]
   LexSem("V","gasify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gasify"),arg1))),

 'gasp-01': # ARG0:breather / ARG1:air, hopefully [gasp.xml]
   LexSem("V","gasp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gasp"),pp("for",arg1)))),

 'gasp-02': # ARG0:speaker / ARG1:utterance / ARG2:hearer [gasp.xml]
   LexSem("V","gasp",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("gasp"),arg1,arg2))),

 'gastrulate-01': # ARG1:embryo/organism/cells under devlopment / ARG2:start state (blastula) / ARG3:end state (gastrula) [gastrulate.xml]
   LexSem("V","gastrulate",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("gastrulate"),arg2,arg3))),

 'gate-01': # ARG0:causal agent / ARG1:thing or area being enclosed by a gate [gate.xml]
   LexSem("V","gate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gate"),arg1))),

 'gather-01': # ARG0:agent or causer / ARG1:entity gathered / ARG2:gathered into / ARG3:beneficiary [gather.xml]
   LexSem("V","gather",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("gather"),arg1,pp("into",arg2),pp("for",arg3)))),

 'gather-02': # ARG0:understander / ARG1:understood / ARG2:source, evidence [gather.xml]
   LexSem("V","gather",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("gather"),arg1,arg2))),

 'gather-03': # ARG0:entities coming together, meeting particpants / ARG1:purpose/type of gathering [gather.xml]
   LexSem("V","gather",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gather"),arg1))),

 'gauge-01': # ARG0:measurer / ARG1:thing measured / ARG2:ruler, standard of measurement / ARG3:estimated value [gauge.xml]
   LexSem("V","gauge",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("gauge"),arg1,arg2,pp("as",arg3)))),

 'gawk-01': # ARG0:gawker / ARG1:gawk at [gawk.xml]
   LexSem("V","gawk",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gawk"),pp("at",arg1)))),

 'gaze-01': # ARG0:looker / ARG1:looked at [gaze.xml]
   LexSem("V","gaze",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gaze"),pp("at",arg1)))),

 'gear-01': # ARG0:aimer, designer, agent / ARG1:thing under consideration / ARG2:target [gear.xml]
   LexSem("V","gear",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("gear"),arg1,pp("toward",arg2)))),

 'gear-up-02': # ARG0:preparer / ARG1:thing/entity prepared / ARG2:purpose [gear.xml]
   LexSem("V","gear",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("gear"),Adv("up"),arg1,pp("for",arg2)))),

 'gelatinize-01': # ARG0:cause of transformation / ARG1:entity made into gelatin / ARG2:instrument, when separate from arg 0 [gelatinize.xml]
   LexSem("V","gelatinize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("gelatinize"),arg1,pp("with",arg2)))),

 'geminate-01': # ARG0:arranger / ARG1:paired item [geminate.xml]
   LexSem("V","geminate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("geminate"),arg1))),

 'generalize-01': # ARG0:entity making a generalization; agent / ARG1:thing becoming generalized / ARG2:entities sharing arg 1, common to [generalize.xml]
   LexSem("V","generalize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("generalize"),pp("about",arg1),pp("to",arg2)))),

 'generate-01': # ARG0:creator / ARG1:thing created / ARG2:source / ARG3:benefactive / ARG4:attribute, secondary predication [generate.xml]
   LexSem("V","generate",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("generate"),arg1,pp("from",arg2),arg3,arg4))),

 'genocide-01': # ARG0:agent, cause of genocide / ARG1:entity/people undergoing genocide / ARG2:instrument of genocide [genocide.xml]
   LexSem("V","genocide",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("genocide"),arg1,arg2))),

 'gentle-01': # ARG0:Agent, cause of gentling / ARG1:Entity soothed, becoming gentle [gentle.xml]
   LexSem("V","gentle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gentle"),arg1))),

 'genuflect-01': # ARG0:bower / ARG1:bowed to [genuflect.xml]
   LexSem("V","genuflect",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("genuflect"),pp("to",arg1)))),

 'geranylgeranylate-01': # ARG0:intentional agent of geranylgeranylation (e.g. scientist) / ARG1:thing geranylgeranylated / ARG2:instrument / ARG3:result of geranylgeranylation [geranylgeranylate.xml]
   LexSem("V","geranylgeranylate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("geranylgeranylate"),arg1,arg2,arg3))),

 'germanize-01': # ARG0:causer, agent / ARG1:entity germanized / ARG2:instrument [germanize.xml]
   LexSem("V","germanize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("germanize"),arg1,pp("with",arg2)))),

 'germinate-01': # ARG0:farmer / ARG1:plant / ARG2:field or medium [germinate.xml]
   LexSem("V","germinate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("germinate"),arg1,pp("in",arg2)))),

 'gestate-01': # ARG0:agent, mother / ARG1:offspring [gestate.xml]
   LexSem("V","gestate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gestate"),arg1))),

 'gesticulate-01': # ARG0:expresser [gesticulate.xml]
   LexSem("V","gesticulate",[":ARG0"],lambda arg0:S(arg0,VP(V("gesticulate")))),

 'gesture-01': # ARG0:agent / ARG1:theme / ARG2:hearer [gesture.xml]
   LexSem("V","gesture",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("gesture"),arg1,pp("at",arg2)))),

 'get-01': # ARG0:receiver / ARG1:thing gotten / ARG2:giver / ARG3:price paid, in-exchange-for / ARG4:benefactive [get.xml]
   LexSem("V","get",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("get"),arg1,pp("from",arg2),pp("for",arg3),pp("for",arg4)))),

 'get-02': # ARG0:haver, possessor / ARG1:thing had, possessed [get.xml]
   LexSem("V","get",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("get"),arg1))),

 'get-03': # ARG1:thing / ARG2:attribute of arg1 (not a VP node) [get.xml]
   LexSem("V","get",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("get"),arg2))),

 'get-04': # ARG0:instigator / ARG1:a clause -- action done or descriptive small clause [get.xml]
   LexSem("V","get",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("get"),arg1))),

 'get-05': # ARG0:causer of motion / ARG1:thing in motion / ARG2:destination [get.xml]
   LexSem("V","get",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("get"),arg1,pp("to",arg2)))),

 'get-06': # ARG0:Subject / ARG1:Complement [get.xml]
   LexSem("V","get",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("get"),pp("to",arg1)))),

 'get-22': # ARG0:Benefactive, partaker in desired action / ARG1:Action done, S-node or clause [get.xml]
   LexSem("V","get",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("get"),arg1))),

 'get-24': #  [get.xml]
   LexSem("V","get",[],lambda :S(VP(V("get")))),

 'get-28': # ARG0:aggravator / ARG1:aggravated [get.xml]
   LexSem("V","get",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("get"),pp("to",arg1)))),

 'get-30': # ARG0:understander / ARG1:thing understood / ARG2:source of understood thing, perhaps another communicator [get.xml]
   LexSem("V","get",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("get"),arg1,arg2))),

 'get-along-18': # ARG1:entity 1 / ARG2:with entity 2 [get.xml]
   LexSem("V","get",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("get"),Adv("along"),pp("with",arg2)))),

 'get-around-31': # ARG0:agent / ARG1:obstacle [get.xml]
   LexSem("V","get",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("get"),Adv("around"),arg1))),

 'get-around-32': # ARG0:agent / ARG1:task [get.xml]
   LexSem("V","get",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("get"),Adv("around"),arg1))),

 'get-around-33': # ARG0:agent [get.xml]
   LexSem("V","get",[":ARG0"],lambda arg0:S(arg0,VP(V("get"),Adv("around")))),

 'get-away-08': # ARG0:entity attempting some deed / ARG1:the deed [get.xml]
   LexSem("V","get",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("get"),Adv("away"),pp("with",arg1)))),

 'get-back-09': # ARG0:recoverer / ARG1:thing regained / ARG2:who had it before [get.xml]
   LexSem("V","get",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("get"),Adv("back"),arg1,arg2))),

 'get-back-10': # ARG1:thing / ARG2:original state [get.xml]
   LexSem("V","get",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("get"),Adv("back"),pp("to",arg2)))),

 'get-back-19': # ARG0:revenger / ARG1:committer of prior offense / ARG2:prior offense [get.xml]
   LexSem("V","get",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("get"),Adv("back"),pp("at",arg1),pp("for",arg2)))),

 'get-back-25': # ARG0:entity responding to correspondence / ARG1:entity responded to, original caller / ARG2:subject matter [get.xml]
   LexSem("V","get",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("get"),Adv("back"),pp("to",arg1),arg2))),

 'get-by-17': # ARG0:agent / ARG1:what getting by with or without [get.xml]
   LexSem("V","get",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("get"),Adv("by"),pp("without",arg1)))),

 'get-down-15': # ARG1:beginner / ARG2:thing begun, task [get.xml]
   LexSem("V","get",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("get"),Adv("down"),pp("to",arg2)))),

 'get-down-27': # ARG0:entity jamming out, getting down, boogying / ARG1:to/with what-- inspiration, mood setter, music, stimulus [get.xml]
   LexSem("V","get",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("get"),Adv("down"),pp("with",arg1)))),

 'get-even-16': # ARG0:revenger / ARG1:committer of prior offense / ARG2:prior offense [get.xml]
   LexSem("V","get",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("get"),Adv("even"),pp("with",arg1),pp("for",arg2)))),

 'get-off-11': # ARG1:thing beginning / ARG2:manner? [get.xml]
   LexSem("V","get",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("get"),Adv("off"),pp("to",arg2)))),

 'get-off-23': # ARG0:Outside causal agent, usually lawyer / ARG1:Person getting away with something / ARG2:Deed gotten away with [get.xml]
   LexSem("V","get",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("get"),Adv("off"),arg1,arg2))),

 'get-off-29': # ARG0:outside agent / ARG1:entity experiencing euphoria / ARG2:pleasure-giving stimulus [get.xml]
   LexSem("V","get",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("get"),Adv("off"),arg1,pp("on",arg2)))),

 'get-on-20': # ARG1:entity 1 / ARG2:with entity 2 (if specified) [get.xml]
   LexSem("V","get",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("get"),Adv("on"),arg2))),

 'get-on-21': # ARG0:causer of continuation / ARG1:thing continuing [get.xml]
   LexSem("V","get",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("get"),Adv("on"),pp("with",arg1)))),

 'get-out-07': # ARG0:creator / ARG1:creation / ARG2:created-from, thing changed / ARG3:benefactive [get.xml]
   LexSem("V","get",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("get"),Adv("out"),arg1,arg2,arg3))),

 'get-through-12': # ARG0:entity trying to get through / ARG1:entity trying to be contacted [get.xml]
   LexSem("V","get",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("get"),Adv("through"),pp("to",arg1)))),

 'get-through-13': # ARG0:perseverer / ARG1:troubles [get.xml]
   LexSem("V","get",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("get"),Adv("through"),arg1))),

 'get-up-26': # ARG0:agent, alarm clock / ARG1:entity waking up / ARG2:time of waking/arising [get.xml]
   LexSem("V","get",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("get"),Adv("up"),arg1,pp("at",arg2)))),

 'ghost-01': # ARG0:Moving entity / ARG1:path or location [ghost.xml]
   LexSem("V","ghost",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ghost"),pp("through",arg1)))),

 'ghost-02': # ARG0:ghost / ARG1:haunted entity [ghost.xml]
   LexSem("V","ghost",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ghost"),arg1))),

 'ghost-03': # ARG0:ghost writer / ARG1:story [ghost.xml]
   LexSem("V","ghost",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ghost"),arg1))),

 'gibber-01': # ARG0:speaker / ARG1:utterance,sound / ARG2:listener,recipient [gibber.xml]
   LexSem("V","gibber",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("gibber"),arg1,arg2))),

 'gibe-01': # ARG0:taunter, agent / ARG1:entity taunted [gibe.xml]
   LexSem("V","gibe",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gibe"),arg1))),

 'gift-01': # ARG0:giver / ARG1:thing given / ARG2:entity given to [gift.xml]
   LexSem("V","gift",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("gift"),arg1,pp("with",arg2)))),

 'giggle-01': # ARG0:giggler [giggle.xml]
   LexSem("V","giggle",[":ARG0"],lambda arg0:S(arg0,VP(V("giggle")))),

 'gild-01': # ARG0:decorator / ARG1:thing decorated / ARG2:decoration [gild.xml]
   LexSem("V","gild",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("gild"),arg1,pp("with",arg2)))),

 'gill-01': # ARG0:gutter / ARG1:entity being gutted / ARG2:what is removed (usually guts or entrails) / ARG3:instrument (usually a knife) [gill.xml]
   LexSem("V","gill",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("gill"),arg1,arg2,pp("with",arg3)))),

 'gird-01': # ARG0:entity putting something around something else / ARG1:thing encircled / ARG2:thing going around [gird.xml]
   LexSem("V","gird",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("gird"),arg1,pp("with",arg2)))),

 'gird-02': # ARG0:preparer / ARG1:thing made ready / ARG2:ready for [gird.xml]
   LexSem("V","gird",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("gird"),arg1,pp("for",arg2)))),

 'give-01': # ARG0:giver / ARG1:thing given / ARG2:entity given to [give.xml]
   LexSem("V","give",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("give"),arg1,arg2))),

 'give-14': # ARG1:Person entity likely to do/be a certain way / ARG2:Thing which arg1 is likely to do/be [give.xml]
   LexSem("V","give",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("give"),pp("to",arg2)))),

 'give-16': # ARG0:giver/carer / ARG1:crap/shit/poopoo, ect / ARG2:about what [give.xml]
   LexSem("V","give",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("give"),arg1,pp("about",arg2)))),

 'give-17': # ARG1:thing yielding / ARG2:to what [give.xml]
   LexSem("V","give",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("give"),pp("to",arg2)))),

 'give-LV': #  [give.xml]
   LexSem("V","give",[],lambda :S(VP(V("give")))),

 'give-away-02': # ARG0:giver / ARG1:thing given / ARG2:entity given to [give.xml]
   LexSem("V","give",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("give"),Adv("away"),arg1,arg2))),

 'give-away-15': # ARG0:agent, entity revealing true state / ARG1:thing revealed, given away / ARG2:audience, truth shown to who? / ARG3:what arg1 is revealed to be, true state itself [give.xml]
   LexSem("V","give",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("give"),Adv("away"),arg1,arg2,pp("as",arg3)))),

 'give-back-03': # ARG0:giver / ARG1:thing given / ARG2:entity given to [give.xml]
   LexSem("V","give",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("give"),Adv("back"),arg1,arg2))),

 'give-in-09': # ARG0:entity giving way / ARG1:entity winning [give.xml]
   LexSem("V","give",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("give"),Adv("in"),pp("to",arg1)))),

 'give-off-04': # ARG0:emitter / ARG1:thing emit(ted) [give.xml]
   LexSem("V","give",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("give"),Adv("off"),arg1))),

 'give-out-05': # ARG1:thing dying [give.xml]
   LexSem("V","give",[":ARG1"],lambda arg1:S(arg1,VP(V("give"),Adv("out")))),

 'give-out-06': # ARG0:distributor / ARG1:thing distributed / ARG2:distributed to [give.xml]
   LexSem("V","give",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("give"),Adv("out"),arg1,pp("to",arg2)))),

 'give-over-13': # ARG0:giver / ARG1:thing given / ARG2:entity or activity given to [give.xml]
   LexSem("V","give",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("give"),Adv("over"),arg1,pp("to",arg2)))),

 'give-up-07': # ARG0:abandoner / ARG1:project [give.xml]
   LexSem("V","give",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("give"),Adv("up"),pp("on",arg1)))),

 'give-up-08': # ARG0:giver / ARG1:gift / ARG2:given-to [give.xml]
   LexSem("V","give",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("give"),Adv("up"),arg1,pp("to",arg2)))),

 'give_hand-16': # ARG0:helper / ARG1:project / ARG2:benefactive, secondary agent  (when separate from arg1) [hand.xml]
   LexSem("V","give",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("give"),arg1,pp("to",arg2)))),

 'gladden-01': # ARG0:agent, pleaser / ARG1:patient, entity pleased / ARG2:instrumental [gladden.xml]
   LexSem("V","gladden",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("gladden"),arg1,pp("with",arg2)))),

 'glamorize-01': # ARG0:causer of glamour, agent / ARG1:glamorous thing / ARG2:adornment, instrument [glamorize.xml]
   LexSem("V","glamorize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("glamorize"),arg1,pp("with",arg2)))),

 'glance-01': # ARG0:looker / ARG1:looked-at [glance.xml]
   LexSem("V","glance",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("glance"),pp("at",arg1)))),

 'glare-01': # ARG0:glarer, agent / ARG1:entity glared at [glare.xml]
   LexSem("V","glare",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("glare"),pp("at",arg1)))),

 'glass-01': # ARG0:agent, person covering / ARG1:thing covered in glass / ARG2:glass itself, type of glass [glass.xml]
   LexSem("V","glass",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("glass"),arg1,arg2))),

 'glass-02': # ARG0:Looker, scanner / ARG1:Scene watched / ARG2:Scanned for what? thing searched for [glass.xml]
   LexSem("V","glass",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("glass"),arg1,pp("for",arg2)))),

 'glass-over-03': # ARG1:thing becoming glass-like [glass.xml]
   LexSem("V","glass",[":ARG1"],lambda arg1:S(arg1,VP(V("glass"),Adv("over")))),

 'glaze-01': # ARG0:glazer, agent / ARG1:thing now shiny [glaze.xml]
   LexSem("V","glaze",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("glaze"),arg1))),

 'glaze-over-02': # ARG1:thing now glazed [glaze.xml]
   LexSem("V","glaze",[":ARG1"],lambda arg1:S(arg1,VP(V("glaze"),Adv("over")))),

 'gleam-01': # ARG0:gleaming thing [gleam.xml]
   LexSem("V","gleam",[":ARG0"],lambda arg0:S(arg0,VP(V("gleam")))),

 'glean-01': # ARG0:collector, agent / ARG1:entity gleaned / ARG2:entity gleaned from [glean.xml]
   LexSem("V","glean",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("glean"),arg1,pp("from",arg2)))),

 'glide-01': # ARG0:entity gliding [glide.xml]
   LexSem("V","glide",[":ARG0"],lambda arg0:S(arg0,VP(V("glide")))),

 'glide-02': # ARG0:Pilot / ARG1:Plane [glide.xml]
   LexSem("V","glide",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("glide"),arg1))),

 'glimmer-01': # ARG1:entity glimmering [glimmer.xml]
   LexSem("V","glimmer",[":ARG1"],lambda arg1:S(arg1,VP(V("glimmer")))),

 'glimpse-01': # ARG0:looker / ARG1:thing looked at [glimpse.xml]
   LexSem("V","glimpse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("glimpse"),arg1))),

 'glint-01': # ARG0:thing emitting light [glint.xml]
   LexSem("V","glint",[":ARG0"],lambda arg0:S(arg0,VP(V("glint")))),

 'glint-02': # ARG0:looker / ARG1:sight [glint.xml]
   LexSem("V","glint",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("glint"),pp("at",arg1)))),

 'glisten-01': # ARG0:thing glistening [glisten.xml]
   LexSem("V","glisten",[":ARG0"],lambda arg0:S(arg0,VP(V("glisten")))),

 'glitter-01': # ARG0:glittering thing [glitter.xml]
   LexSem("V","glitter",[":ARG0"],lambda arg0:S(arg0,VP(V("glitter")))),

 'gloat-01': # ARG0:person gloating / ARG1:topic/cause of gloating [gloat.xml]
   LexSem("V","gloat",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gloat"),arg1))),

 'globalize-01': # ARG0:agent / ARG1:entity made global [globalize.xml]
   LexSem("V","globalize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("globalize"),arg1))),

 'globetrot-01': # ARG0:trotter / ARG1:path [globetrot.xml]
   LexSem("V","globetrot",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("globetrot"),arg1))),

 'glom-01': # ARG0:causer of connection, agent / ARG1:first (or all) thing(s) fastened (together) / ARG2:additional thing(s), destination / ARG3:fastener [glom.xml]
   LexSem("V","glom",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("glom"),arg1,pp("onto",arg2),pp("with",arg3)))),

 'glorify-01': # ARG0:glorifier / ARG1:really, really great thing / ARG2:glorified as what? [glorify.xml]
   LexSem("V","glorify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("glorify"),arg1,pp("as",arg2)))),

 'glory-01': # ARG0:entity experiencing awe, glory / ARG1:glorious thing, thing gloried in [glory.xml]
   LexSem("V","glory",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("glory"),pp("over",arg1)))),

 'gloss-over-01': # ARG0:glosser over / ARG1:thing glossed over [gloss.xml]
   LexSem("V","gloss",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gloss"),Adv("over"),arg1))),

 'glove-01': # ARG0:agentive glover / ARG1:thing gloved / ARG2:instrument [glove.xml]
   LexSem("V","glove",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("glove"),arg1,arg2))),

 'glow-01': # ARG0:entity glowing / ARG1:fixed phrase: in the dark [glow.xml]
   LexSem("V","glow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("glow"),pp("in",arg1)))),

 'glower-01': # ARG0:glowerer / ARG1:target of unapproval [glower.xml]
   LexSem("V","glower",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("glower"),pp("at",arg1)))),

 'glue-01': # ARG0:causer of attachment, agent / ARG1:entity glued / ARG2:entity glued to [glue.xml]
   LexSem("V","glue",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("glue"),arg1,pp("to",arg2)))),

 'glut-01': # ARG0:causer of glut, agent / ARG1:container / ARG2:substance [glut.xml]
   LexSem("V","glut",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("glut"),arg1,pp("with",arg2)))),

 'glutenize-01': # ARG0:agent, cause / ARG1:glutenized entity [glutenize.xml]
   LexSem("V","glutenize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("glutenize"),arg1))),

 'glycosylate-01': # ARG0:Intentional agent / ARG1:Protein glycosylated / ARG2:Instrument, drug / ARG3:Result of glycosylation [glycosylate.xml]
   LexSem("V","glycosylate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("glycosylate"),arg1,arg2,arg3))),

 'gnash-01': # ARG0:causer of grinding / ARG1:thing being ground [gnash.xml]
   LexSem("V","gnash",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gnash"),arg1))),

 'gnash-02': # ARG0:causer of removal / ARG1:thing being removed / ARG2:source of arg1 [gnash.xml]
   LexSem("V","gnash",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("gnash"),arg1,arg2))),

 'gnaw-01': # ARG0:gnawer / ARG1:thing chewed [gnaw.xml]
   LexSem("V","gnaw",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gnaw"),pp("on",arg1)))),

 'gnaw-02': # ARG0:causer / ARG1:gnawed at [gnaw.xml]
   LexSem("V","gnaw",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gnaw"),pp("at",arg1)))),

 'go-01': # ARG1:entity in motion/goer / ARG2:extent / ARG3:start point / ARG4:end point, end state of arg1 [go.xml]
   LexSem("V","go",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("go"),arg2,pp("from",arg3),pp("to",arg4)))),

 'go-02': # ARG0:goer / ARG1:journey / ARG3:start point / ARG4:end point [go.xml]
   LexSem("V","go",[":ARG0",":ARG1",":ARG3",":ARG4"],lambda arg0,arg1,arg3,arg4:S(arg0,VP(V("go"),pp("on",arg1),pp("from",arg3),pp("to",arg4)))),

 'go-03': # ARG0:pursuer / ARG1:goal [go.xml]
   LexSem("V","go",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("go"),pp("after",arg1)))),

 'go-04': #  [go.xml]
   LexSem("V","go",[],lambda :S(VP(V("go")))),

 'go-05': # ARG0:subject / ARG1:subsequent action [go.xml]
   LexSem("V","go",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("go"),arg1))),

 'go-06': # ARG0:entity proceeding / ARG1:project / ARG2:direction, usually a particle [go.xml]
   LexSem("V","go",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("go"),pp("with",arg1),arg2))),

 'go-07': # ARG1:commodity / ARG2:buyer / ARG3:price [go.xml]
   LexSem("V","go",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("go"),arg2,pp("for",arg3)))),

 'go-08': # ARG1:object / ARG2:attribute of arg1 / ARG3:with reference to what [go.xml]
   LexSem("V","go",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("go"),arg2,pp("with",arg3)))),

 'go-09': # ARG1:thing going [go.xml]
   LexSem("V","go",[":ARG1"],lambda arg1:S(arg1,VP(V("go")))),

 'go-10': # ARG1:thing going / ARG2:receiver [go.xml]
   LexSem("V","go",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("go"),pp("to",arg2)))),

 'go-11': # ARG1:thing going / ARG2:purpose [go.xml]
   LexSem("V","go",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("go"),pp("to",arg2)))),

 'go-12': # ARG1:experiencer / ARG2:experienced [go.xml]
   LexSem("V","go",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("go"),pp("through",arg2)))),

 'go-14': # ARG1:thing left [go.xml]
   LexSem("V","go",[":ARG1"],lambda arg1:S(arg1,VP(V("go")))),

 'go-21': # ARG1:thing on your side, supporter / ARG2:beneficiary, supported [go.xml]
   LexSem("V","go",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("go"),pp("for",arg2)))),

 'go-22': # ARG1:topic / ARG2:what you get for free, matching thing [go.xml]
   LexSem("V","go",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("go"),pp("along",arg2)))),

 'go-23': # ARG0:Sayer / ARG1:Utterance / ARG2:Hearer [go.xml]
   LexSem("V","go",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("go"),arg1,arg2))),

 'go-24': # ARG1:fixed: you [go.xml]
   LexSem("V","go",[":ARG1"],lambda arg1:S(arg1,VP(V("go")))),

 'go-29': # ARG0:potty-er / ARG1:duty done [go.xml]
   LexSem("V","go",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("go"),arg1))),

 'go-LV': #  [go.xml]
   LexSem("V","go",[],lambda :S(VP(V("go")))),

 'go-back-19': # ARG1:thing going back to previous state / ARG2:previous state [go.xml]
   LexSem("V","go",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("go"),Adv("back"),pp("to",arg2)))),

 'go-down-27': # ARG1:thing happening [go.xml]
   LexSem("V","go",[":ARG1"],lambda arg1:S(arg1,VP(V("go"),Adv("down")))),

 'go-off-16': # ARG1:thing becoming on, exploding [go.xml]
   LexSem("V","go",[":ARG1"],lambda arg1:S(arg1,VP(V("go"),Adv("off")))),

 'go-on-15': # ARG1:thing/entity continuing/ occuring [go.xml]
   LexSem("V","go",[":ARG1"],lambda arg1:S(arg1,VP(V("go"),Adv("on")))),

 'go-on-25': # ARG0:speaker / ARG1:utterance / ARG2:listener, audience spoken to [go.xml]
   LexSem("V","go",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("go"),Adv("on"),arg1,arg2))),

 'go-out-17': # ARG0:entity leaving / ARG1:place left [go.xml]
   LexSem("V","go",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("go"),Adv("out"),arg1))),

 'go-out-18': # ARG1:thing being extinguished [go.xml]
   LexSem("V","go",[":ARG1"],lambda arg1:S(arg1,VP(V("go"),Adv("out")))),

 'go-out-34': # ARG0:First dater / ARG1:Second dater [go.xml]
   LexSem("V","go",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("go"),Adv("out"),pp("with",arg1)))),

 'go-over-26': # ARG0:reviewer / ARG1:thing reviewed, gone over / ARG2:attribute [go.xml]
   LexSem("V","go",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("go"),Adv("over"),arg1,arg2))),

 'go-over-30': # ARG1:thing being received [go.xml]
   LexSem("V","go",[":ARG1"],lambda arg1:S(arg1,VP(V("go"),Adv("over")))),

 'go-through-20': # ARG0:agent / ARG1:thing coming to completion [go.xml]
   LexSem("V","go",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("go"),Adv("through"),arg1))),

 'goad-01': # ARG0:Urger, bully / ARG1:Person goaded, urged / ARG2:Persuaded action, goaded into doing what? [goad.xml]
   LexSem("V","goad",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("goad"),arg1,pp("into",arg2)))),

 'gobble-01': # ARG0:eater / ARG1:food [gobble.xml]
   LexSem("V","gobble",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gobble"),arg1))),

 'gobble-02': # ARG0:turkey [gobble.xml]
   LexSem("V","gobble",[":ARG0"],lambda arg0:S(arg0,VP(V("gobble")))),

 'gobble-up-03': # ARG0:eater / ARG1:food [gobble.xml]
   LexSem("V","gobble",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gobble"),Adv("up"),arg1))),

 'goggle-01': # ARG0:goggler / ARG1:goggled at [goggle.xml]
   LexSem("V","goggle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("goggle"),pp("at",arg1)))),

 'golf-01': # ARG0:golfer [golf.xml]
   LexSem("V","golf",[":ARG0"],lambda arg0:S(arg0,VP(V("golf")))),

 'gondola-01': # ARG0:agent (transitive subject) / ARG1:thing gondolaed, theme (intransitive object, transitive object) / ARG2:locations, or start point / ARG3:destination [gondola.xml]
   LexSem("V","gondola",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("gondola"),arg1,arg2,arg3))),

 'goof-01': # ARG0:goofer [goof.xml]
   LexSem("V","goof",[":ARG0"],lambda arg0:S(arg0,VP(V("goof")))),

 'goof-02': # ARG0:goofy one / ARG1:entity played with [goof.xml]
   LexSem("V","goof",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("goof"),pp("with",arg1)))),

 'google-01': # ARG0:agent of search / ARG1:target of search [google.xml]
   LexSem("V","google",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("google"),arg1))),

 'goosestep-01': # ARG1:entity moving, goose-stepper / ARG2:start point / ARG3:end point / ARG4:path [goosestep.xml]
   LexSem("V","goosestep",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("goosestep"),arg2,pp("into",arg3),pp("through",arg4)))),

 'gore-01': # ARG0:agent, gorer / ARG1:victim, entity gored / ARG2:instrument, by default 'horn' [gore.xml]
   LexSem("V","gore",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("gore"),arg1,arg2))),

 'gorge-01': # ARG1:entity eating / ARG2:eaten thing [gorge.xml]
   LexSem("V","gorge",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("gorge"),pp("on",arg2)))),

 'gossip-01': # ARG0:gossiper(s) / ARG1:gossip about [gossip.xml]
   LexSem("V","gossip",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gossip"),arg1))),

 'gouge-01': # ARG0:causer of gouges / ARG1:surface [gouge.xml]
   LexSem("V","gouge",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gouge"),pp("at",arg1)))),

 'gouge-02': # ARG0:petty crook / ARG1:money / ARG2:source [gouge.xml]
   LexSem("V","gouge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("gouge"),arg1,pp("off",arg2)))),

 'govern-01': # ARG0:governor / ARG1:governed / ARG2:specific domain, aspect of arg1 being governed [govern.xml]
   LexSem("V","govern",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("govern"),arg1,arg2))),

 'grab-01': # ARG0:grabber / ARG1:entity grabbed [grab.xml]
   LexSem("V","grab",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("grab"),arg1))),

 'grace-01': # ARG0:entity beautifying / ARG1:entity beautified [grace.xml]
   LexSem("V","grace",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("grace"),arg1))),

 'grade-01': # ARG0:grader / ARG1:thing graded / ARG2:secondary attribute [grade.xml]
   LexSem("V","grade",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("grade"),arg1,pp("as",arg2)))),

 'grade-02': # ARG0:agent, entity causing gradation / ARG1:thing becoming gradiant / ARG2:instrument [grade.xml]
   LexSem("V","grade",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("grade"),arg1,arg2))),

 'graduate-01': # ARG0:causal agent / ARG1:graduate / ARG2:old level / ARG3:new level [graduate.xml]
   LexSem("V","graduate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("graduate"),arg1,pp("from",arg2),arg3))),

 'graffiti-01': # ARG0:punk artist / ARG1:wall / ARG2:art, type of graffiti [graffiti.xml]
   LexSem("V","graffiti",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("graffiti"),pp("on",arg1),arg2))),

 'graft-01': # ARG0:attacher, agent / ARG1:thing attached / ARG2:attached to [graft.xml]
   LexSem("V","graft",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("graft"),pp("with",arg1),arg2))),

 'grandstand-01': # ARG0:performer / ARG1:performance, thing performed / ARG2:instrument [grandstand.xml]
   LexSem("V","grandstand",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("grandstand"),arg1,arg2))),

 'grant-01': # ARG0:granter / ARG1:thing granted / ARG2:benefactive, granted-to [grant.xml]
   LexSem("V","grant",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("grant"),arg1,arg2))),

 'granulate-01': # ARG0:agent,cause / ARG1:thing granulated / ARG2:instrument [granulate.xml]
   LexSem("V","granulate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("granulate"),arg1,pp("with",arg2)))),

 'grapple-01': # ARG0:entity grappling / ARG1:grappling with what [grapple.xml]
   LexSem("V","grapple",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("grapple"),pp("with",arg1)))),

 'grasp-01': # ARG0:grasper / ARG1:thing grasped [grasp.xml]
   LexSem("V","grasp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("grasp"),arg1))),

 'grass-01': # ARG0:grass-layer / ARG1:area covered with grass / ARG2:grass itself, type of grass [grass.xml]
   LexSem("V","grass",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("grass"),arg1,pp("with",arg2)))),

 'grate-01': # ARG0:agent/cause of grating / ARG1:entity being grated / ARG2:instrument used [grate.xml]
   LexSem("V","grate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("grate"),arg1,pp("with",arg2)))),

 'grate-02': # ARG1:thing that grates / ARG2:entity grated [grate.xml]
   LexSem("V","grate",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("grate"),arg2))),

 'gratify-01': # ARG0:satisfier / ARG1:thing satisfied [gratify.xml]
   LexSem("V","gratify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gratify"),arg1))),

 'gravel-01': # ARG0:Landscaper, causer of gravel-covering / ARG1:land covered in gravel / ARG2:gravel itself, type of gravel [gravel.xml]
   LexSem("V","gravel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("gravel"),arg1,pp("with",arg2)))),

 'gravitate-01': # ARG0:Thing moving toward another / ARG1:Magnetic source [gravitate.xml]
   LexSem("V","gravitate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gravitate"),pp("to",arg1)))),

 'gray-01': # ARG0:causer / ARG1:thing becoming gray [gray.xml]
   LexSem("V","gray",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gray"),arg1))),

 'graze-01': # ARG0:rancher / ARG1:cow / ARG2:grass, pasture [graze.xml]
   LexSem("V","graze",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("graze"),arg1,pp("on",arg2)))),

 'grease-01': # ARG0:agent, greaser / ARG1:car, mechanical device, thing greased / ARG2:grease itself, type of grease [grease.xml]
   LexSem("V","grease",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("grease"),arg1,pp("with",arg2)))),

 'green-01': # ARG0:causer of greenness / ARG1:green thing [green.xml]
   LexSem("V","green",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("green"),arg1))),

 'greet-01': # ARG0:greeter / ARG1:thing greeted / ARG2:secondary attribute, greeted as / ARG3:specific reaction [greet.xml]
   LexSem("V","greet",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("greet"),arg1,pp("as",arg2),pp("with",arg3)))),

 'grieve-01': # ARG0:causer of grief / ARG1:saddened entity / ARG2:instrument or manner if separate from arg 0 [grieve.xml]
   LexSem("V","grieve",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("grieve"),arg1,pp("by",arg2)))),

 'grill-01': # ARG0:cook, agent / ARG1:food, material [grill.xml]
   LexSem("V","grill",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("grill"),arg1))),

 'grill-02': # ARG0:questioner / ARG1:entity questioned / ARG2:about what [grill.xml]
   LexSem("V","grill",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("grill"),arg1,pp("about",arg2)))),

 'grimace-01': # ARG0:grimacer / ARG1:source of pain [grimace.xml]
   LexSem("V","grimace",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("grimace"),pp("at",arg1)))),

 'grin-01': # ARG0:grinner [grin.xml]
   LexSem("V","grin",[":ARG0"],lambda arg0:S(arg0,VP(V("grin")))),

 'grin-02': # ARG0:grinner / ARG1:utterance / ARG2:listener [grin.xml]
   LexSem("V","grin",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("grin"),arg1,arg2))),

 'grind-01': # ARG0:grinder / ARG1:thing crushed / ARG2:end state [grind.xml]
   LexSem("V","grind",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("grind"),arg1,pp("into",arg2)))),

 'grind-03': # ARG1:thing making sound [grind.xml]
   LexSem("V","grind",[":ARG1"],lambda arg1:S(arg1,VP(V("grind")))),

 'grind-04': # ARG0:causer of stopping / ARG1:thing stopping / ARG2:stop, halt, etc [grind.xml]
   LexSem("V","grind",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("grind"),arg1,pp("to",arg2)))),

 'grind-05': # ARG0:mover / ARG1:moved / ARG2:destination [grind.xml]
   LexSem("V","grind",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("grind"),arg1,pp("up",arg2)))),

 'grind-up-02': # ARG0:agent / ARG1:thing crushed / ARG2:end state [grind.xml]
   LexSem("V","grind",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("grind"),Adv("up"),arg1,arg2))),

 'grip-01': # ARG0:holder / ARG1:thing held / ARG2:benefactive / ARG3:secondary attribute of thing held [grip.xml]
   LexSem("V","grip",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("grip"),arg1,arg2,arg3))),

 'gripe-01': # ARG0:complainer / ARG1:complaint [gripe.xml]
   LexSem("V","gripe",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gripe"),arg1))),

 'grit-01': # ARG0:causer of grinding / ARG1:thing being ground [grit.xml]
   LexSem("V","grit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("grit"),arg1))),

 'groan-01': # ARG0:groaner / ARG1:groaned utterance / ARG2:groan at [groan.xml]
   LexSem("V","groan",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("groan"),arg1,pp("at",arg2)))),

 'grok-01': # ARG0:grokker / ARG1:grokked [grok.xml]
   LexSem("V","grok",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("grok"),arg1))),

 'groom-01': # ARG0:agent, groom / ARG1:thing groomed / ARG2:instrument [groom.xml]
   LexSem("V","groom",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("groom"),arg1,pp("with",arg2)))),

 'groom-02': # ARG0:agent / ARG1:entity being groomed / ARG2:for what [groom.xml]
   LexSem("V","groom",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("groom"),arg1,pp("for",arg2)))),

 'groove-01': # ARG0:agent, person making grooves / ARG1:material getting grooves / ARG2:grooves themselves, type of groove [groove.xml]
   LexSem("V","groove",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("groove"),arg1,pp("with",arg2)))),

 'groove-02': # ARG0:entity experiencing groovy feelings / ARG1:cause of groovy feeling, what arg0 is "grooving on" [groove.xml]
   LexSem("V","groove",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("groove"),pp("on",arg1)))),

 'grope-01': # ARG0:groper / ARG1:groped (at) [grope.xml]
   LexSem("V","grope",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("grope"),arg1))),

 'gross-01': # ARG0:earner / ARG1:gross profits (not net) [gross.xml]
   LexSem("V","gross",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gross"),arg1))),

 'gross-02': # ARG0:Doctor/ pathologist / ARG1:tissue studied [gross.xml]
   LexSem("V","gross",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gross"),arg1))),

 'grouch-01': # ARG0:complainer / ARG1:cause, complain of or about / ARG2:hearer, complain to [grouch.xml]
   LexSem("V","grouch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("grouch"),pp("about",arg1),pp("to",arg2)))),

 'ground-01': # ARG0:entity enforcing grounding / ARG1:thing grounded [ground.xml]
   LexSem("V","ground",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ground"),arg1))),

 'ground-02': # ARG0:agent / ARG1:thing having a basis / ARG2:the grounds [ground.xml]
   LexSem("V","ground",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ground"),arg1,pp("in",arg2)))),

 'group-01': # ARG0:agent, entity causing some grouping / ARG1:theme, thing being included in some group / ARG2:group [group.xml]
   LexSem("V","group",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("group"),arg1,pp("under",arg2)))),

 'grouse-01': # ARG0:complainer / ARG1:cause, complain of or about / ARG2:hearer, complain to [grouse.xml]
   LexSem("V","grouse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("grouse"),arg1,arg2))),

 'grovel-01': # ARG0:groveler [grovel.xml]
   LexSem("V","grovel",[":ARG0"],lambda arg0:S(arg0,VP(V("grovel")))),

 'grow-01': # ARG0:[causer of growth - should be possible] / ARG1:thing grown / ARG2:amount increased by, EXT or MNR / ARG3:start point / ARG4:end point, end state of arg1 [grow.xml]
   LexSem("V","grow",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("grow"),arg1,pp("by",arg2),arg3,pp("to",arg4)))),

 'grow-02': # ARG1:thing becoming / ARG2:thing become = end state of arg1 / ARG3:source, start point [grow.xml]
   LexSem("V","grow",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("grow"),arg2,pp("of",arg3)))),

 'grow-03': # ARG0:grower / ARG1:crop / ARG2:source [grow.xml]
   LexSem("V","grow",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("grow"),arg1,pp("from",arg2)))),

 'grow-up-04': # ARG1:person aging [grow.xml]
   LexSem("V","grow",[":ARG1"],lambda arg1:S(arg1,VP(V("grow"),Adv("up")))),

 'growl-01': # ARG0:growler / ARG1:utterance [growl.xml]
   LexSem("V","growl",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("growl"),arg1))),

 'grudge-01': # ARG0:grudger / ARG1:thing grudged / ARG3:secondary attribute of thing grudged [grudge.xml]
   LexSem("V","grudge",[":ARG0",":ARG1",":ARG3"],lambda arg0,arg1,arg3:S(arg0,VP(V("grudge"),arg1,arg3))),

 'grumble-01': # ARG0:grumbler / ARG1:utterance / ARG2:hearer [grumble.xml]
   LexSem("V","grumble",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("grumble"),arg1,pp("in",arg2)))),

 'grunt-02': # ARG0:speaker / ARG1:utterance / ARG2:listener [grunt.xml]
   LexSem("V","grunt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("grunt"),arg1,pp("to",arg2)))),

 'guarantee-01': # ARG0:entity making guarantee / ARG1:guarantee / ARG2:benefactive, guaranteed-to [guarantee.xml]
   LexSem("V","guarantee",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("guarantee"),arg1,arg2))),

 'guard-01': # ARG0:guard / ARG1:guarded / ARG2:instrument / ARG3:guard against what? [guard.xml]
   LexSem("V","guard",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("guard"),arg1,arg2,arg3))),

 'guess-01': # ARG0:guesser / ARG1:guess [guess.xml]
   LexSem("V","guess",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("guess"),arg1))),

 'guesstimate-01': # ARG0:estimater / ARG1:thing estimated / ARG2:value/amount of guesstimation [guesstimate.xml]
   LexSem("V","guesstimate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("guesstimate"),arg1,pp("at",arg2)))),

 'guffaw-01': # ARG0:laugh-er / ARG1:laughed at [guffaw.xml]
   LexSem("V","guffaw",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("guffaw"),pp("at",arg1)))),

 'guide-01': # ARG0:guide, agent / ARG1:entity guided / ARG2:guided in/through / ARG3:signposts along the way [guide.xml]
   LexSem("V","guide",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("guide"),arg1,pp("through",arg2),pp("on",arg3)))),

 'gull-01': # ARG0:trickster / ARG1:tricked entity / ARG2:trick [gull.xml]
   LexSem("V","gull",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("gull"),arg1,pp("into",arg2)))),

 'gulp-01': # ARG0:drinker / ARG1:drink [gulp.xml]
   LexSem("V","gulp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gulp"),arg1))),

 'gulp-down-02': # ARG0:drinker / ARG1:drink [gulp.xml]
   LexSem("V","gulp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gulp"),Adv("down"),arg1))),

 'gum-01': # ARG0:Fixer / ARG1:First (or all in one constituent) thing gummed / ARG2:Thing arg1 is attached to with gum (when separate constituent) / ARG3:Gum itself, type of gum used, instrument [gum.xml]
   LexSem("V","gum",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("gum"),arg1,pp("to",arg2),pp("with",arg3)))),

 'gum-02': # ARG0:chewer / ARG1:food [gum.xml]
   LexSem("V","gum",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gum"),arg1))),

 'gum-up-03': # ARG0:Cause of things becoming sticky / ARG2:Entity, situation made sticky [gum.xml]
   LexSem("V","gum",[":ARG0",":ARG2"],lambda arg0,arg2:S(arg0,VP(V("gum"),Adv("up"),arg2))),

 'gun-02': # ARG0:shooter / ARG1:entity shot [gun.xml]
   LexSem("V","gun",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gun"),arg1))),

 'gun-down-01': # ARG0:shooter / ARG1:entity shot [gun.xml]
   LexSem("V","gun",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gun"),Adv("down"),arg1))),

 'gurgle-01': # ARG0:noise maker / ARG1:utterance,sound / ARG2:listener,recipient [gurgle.xml]
   LexSem("V","gurgle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("gurgle"),arg1,arg2))),

 'gush-01': # ARG0:agent / ARG1:topic, utterance [gush.xml]
   LexSem("V","gush",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gush"),pp("about",arg1)))),

 'gush-02': # ARG0:causer of flowing / ARG1:entity flowing [gush.xml]
   LexSem("V","gush",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gush"),arg1))),

 'gust-01': # ARG0:causer of gust / ARG1:thing gusting [gust.xml]
   LexSem("V","gust",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gust"),arg1))),

 'gut-01': # ARG0:gutter (hmmmm) / ARG1:victim [gut.xml]
   LexSem("V","gut",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gut"),arg1))),

 'gutter-01': # ARG1:flame [gutter.xml]
   LexSem("V","gutter",[":ARG1"],lambda arg1:S(arg1,VP(V("gutter")))),

 'guzzle-01': # ARG0:drinker / ARG1:liquid [guzzle.xml]
   LexSem("V","guzzle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("guzzle"),arg1))),

 'gyrate-01': # ARG0:causer of gyration / ARG1:thing gyrating [gyrate.xml]
   LexSem("V","gyrate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("gyrate"),arg1))),

 'hack-01': # ARG0:chopper / ARG1:chopped / ARG2:instrument (ax, etc) [hack.xml]
   LexSem("V","hack",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hack"),pp("at",arg1),pp("with",arg2)))),

 'hack-03': # ARG0:cutter / ARG1:thing cut / ARG2:medium, source / ARG3:instrument [hack.xml]
   LexSem("V","hack",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("hack"),arg1,pp("from",arg2),pp("with",arg3)))),

 'hack-04': # ARG0:hacker / ARG1:target or project [hack.xml]
   LexSem("V","hack",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hack"),arg1))),

 'hack-05': # ARG0:cougher [hack.xml]
   LexSem("V","hack",[":ARG0"],lambda arg0:S(arg0,VP(V("hack")))),

 'hack-away-02': # ARG0:chopper / ARG1:chopped / ARG2:instrument (ax, etc) [hack.xml]
   LexSem("V","hack",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hack"),Adv("away"),pp("at",arg1),arg2))),

 'haggle-01': # ARG0:subject haggler / ARG1:other haggler / ARG2:topic of argument [haggle.xml]
   LexSem("V","haggle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("haggle"),pp("with",arg1),pp("over",arg2)))),

 'hail-01': # ARG1:the hail itself [hail.xml]
   LexSem("V","hail",[":ARG1"],lambda arg1:S(arg1,VP(V("hail")))),

 'hail-02': # ARG0:entity giving recognition / ARG1:entity being recognized / ARG2:hailed as [hail.xml]
   LexSem("V","hail",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hail"),arg1,pp("as",arg2)))),

 'hail-04': # ARG0:person in question / ARG1:source, home [hail.xml]
   LexSem("V","hail",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hail"),pp("from",arg1)))),

 'hail-05': # ARG0:summoner / ARG1:entity being summoned / ARG2:hailed to do what (proposition not destination) [hail.xml]
   LexSem("V","hail",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hail"),arg1,arg2))),

 'hail-down-03': # ARG1:hard things [hail.xml]
   LexSem("V","hail",[":ARG1"],lambda arg1:S(arg1,VP(V("hail"),Adv("down")))),

 'hallucinate-01': # ARG0:hallucinator / ARG1:hallucination [hallucinate.xml]
   LexSem("V","hallucinate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hallucinate"),arg1))),

 'halt-01': # ARG0:causer of stopping / ARG1:Theme (action or object being stopped) / ARG2:Instrument, if separate from arg0 [halt.xml]
   LexSem("V","halt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("halt"),arg1,arg2))),

 'halt-02': # ARG0:primary agent, preventer / ARG1:secondary agent, entity coming to to a halt / ARG2:action secondary agent is kept from [halt.xml]
   LexSem("V","halt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("halt"),arg1,pp("from",arg2)))),

 'halter-01': # ARG0:causer of haltering / ARG1:halter, headstall itself / ARG2:horse, entity restrained by halter [halter.xml]
   LexSem("V","halter",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("halter"),arg1,arg2))),

 'halve-01': # ARG0:cutter / ARG1:thing cut in half [halve.xml]
   LexSem("V","halve",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("halve"),arg1))),

 'ham-up-01': # ARG0:overactor / ARG1:fixed: it [ham.xml]
   LexSem("V","ham",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ham"),Adv("up"),arg1))),

 'hammer-01': # ARG0:hammerer / ARG1:nail / ARG2:wood [hammer.xml]
   LexSem("V","hammer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hammer"),arg1,pp("into",arg2)))),

 'hammer-02': # ARG0:agent, hitter - animate only! / ARG1:thing hit / ARG2:instrument, hammer [hammer.xml]
   LexSem("V","hammer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hammer"),arg1,pp("by",arg2)))),

 'hammer-03': # ARG0:builder / ARG1:construction / ARG2:material, start state / ARG3:benefactive / ARG4:end state [hammer.xml]
   LexSem("V","hammer",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("hammer"),pp("into",arg1),arg2,arg3,arg4))),

 'hammer-away-05': # ARG0:hammerer / ARG1:Usually prepositional complement, hammer away at what? [hammer.xml]
   LexSem("V","hammer",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hammer"),Adv("away"),pp("on",arg1)))),

 'hammer-out-04': # ARG0:arranger / ARG1:scheme / ARG2:collaborator [hammer.xml]
   LexSem("V","hammer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hammer"),Adv("out"),arg1,arg2))),

 'hamper-01': # ARG0:obstruction / ARG1:effort / ARG2:secondary agent, agent of arg1 [hamper.xml]
   LexSem("V","hamper",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hamper"),arg1,arg2))),

 'hamstring-01': # ARG0:causer of ineffectiveness, agent / ARG1:entity made powerless [hamstring.xml]
   LexSem("V","hamstring",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hamstring"),arg1))),

 'hand-01': # ARG0:giver / ARG1:thing given / ARG2:entity given to [hand.xml]
   LexSem("V","hand",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hand"),arg1,arg2))),

 'hand-out-03': # ARG0:giver / ARG1:thing given / ARG2:entity given to [hand.xml]
   LexSem("V","hand",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hand"),Adv("out"),arg1,arg2))),

 'hand-over-02': # ARG0:giver / ARG1:thing given / ARG2:entity given to [hand.xml]
   LexSem("V","hand",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hand"),Adv("over"),arg1,pp("to",arg2)))),

 'handcount-01': # ARG0:counter / ARG1:thing counted [handcount.xml]
   LexSem("V","hand-count",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hand-count"),arg1))),

 'handcuff-01': # ARG0:cop / ARG1:criminal, first thing being hancuffed / ARG2:second thing, handcuffed to what / ARG3:handcuffs [handcuff.xml]
   LexSem("V","handcuff",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("handcuff"),arg1,pp("to",arg2),arg3))),

 'handdeliver-01': # ARG0:deliverer / ARG1:package / ARG2:sent-to [handdeliver.xml]
   LexSem("V","hand-deliver",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hand-deliver"),arg1,pp("to",arg2)))),

 'handfeed-01': # ARG0:Feeder, agent / ARG1:Milk, food fed / ARG2:Baby, recipient of food [handfeed.xml]
   LexSem("V","handfeed",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("handfeed"),arg1,arg2))),

 'handicap-01': # ARG0:causer of difficulty / ARG1:entity made difficult [handicap.xml]
   LexSem("V","handicap",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("handicap"),arg1))),

 'handle-01': # ARG0:handler / ARG1:thing handled / ARG2:handled for / ARG3:handled with [handle.xml]
   LexSem("V","handle",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("handle"),arg1,pp("for",arg2),pp("with",arg3)))),

 'handpaint-01': # ARG0:agent, painter / ARG1:surface / ARG2:explicit mention of paint [handpaint.xml]
   LexSem("V","hand-paint",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hand-paint"),pp("about",arg1),arg2))),

 'hang-01': # ARG0:agent, entity causing something to be suspended / ARG1:thing suspended / ARG2:suspended from [hang.xml]
   LexSem("V","hang",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hang"),arg1,pp("from",arg2)))),

 'hang-02': # ARG1:entity in the position / ARG2:location [hang.xml]
   LexSem("V","hang",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("hang"),arg2))),

 'hang-on-04': # ARG1:person waiting / ARG2:what arg 1 is waiting for [hang.xml]
   LexSem("V","hang",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("hang"),Adv("on"),pp("for",arg2)))),

 'hang-on-05': # ARG0:holder / ARG1:thing holding on to / ARG2:benefactive [hang.xml]
   LexSem("V","hang",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hang"),Adv("on"),pp("to",arg1),pp("for",arg2)))),

 'hang-out-06': # ARG1:Focus person kickin' it, or all persons in one mention / ARG2:Other person that arg 1 is kickin' it with, when separate mention [hang.xml]
   LexSem("V","hang",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("hang"),Adv("out"),pp("with",arg2)))),

 'hang-up-03': # ARG0:call terminator / ARG1:phone / ARG2:other conversant [hang.xml]
   LexSem("V","hang",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hang"),Adv("up"),arg1,pp("on",arg2)))),

 'hangar-01': # ARG0:storer / ARG1:stored (aircraft) / ARG2:hangar, location [hangar.xml]
   LexSem("V","hangar",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hangar"),arg1,arg2))),

 'hanker-01': # ARG0:desirer / ARG1:desired [hanker.xml]
   LexSem("V","hanker",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hanker"),pp("for",arg1)))),

 'happen-01': # ARG1:event / ARG2:benefactive [happen.xml]
   LexSem("V","happen",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("happen"),pp("with",arg2)))),

 'happen-02': # ARG1:coincidence [happen.xml]
   LexSem("V","happen",[":ARG1"],lambda arg1:S(arg1,VP(V("happen")))),

 'happen-03': # ARG0:finder / ARG1:thing found [happen.xml]
   LexSem("V","happen",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("happen"),pp("upon",arg1)))),

 'harangue-01': # ARG0:speaker of harangue / ARG1:intended audience [harangue.xml]
   LexSem("V","harangue",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("harangue"),arg1))),

 'harass-01': # ARG0:botherer, causer of annoyance / ARG1:harassed / ARG2:instrument, if separate from arg0 [harass.xml]
   LexSem("V","harass",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("harass"),arg1,pp("with",arg2)))),

 'harass-02': # ARG0:causal agent, harasser / ARG1:impelled agent / ARG2:impelled action [harass.xml]
   LexSem("V","harass",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("harass"),arg1,pp("into",arg2)))),

 'harbor-01': # ARG0:holder / ARG1:thing held [harbor.xml]
   LexSem("V","harbor",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("harbor"),arg1))),

 'hardboil-01': # ARG0:cook / ARG1:food [hardboil.xml]
   LexSem("V","hardboil",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hardboil"),arg1))),

 'harden-01': # ARG0:causer of hardness, agent / ARG1:thing becoming hard / ARG2:hardened to what? conditions that arg1 is hardening towards [harden.xml]
   LexSem("V","harden",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("harden"),arg1,pp("to",arg2)))),

 'harm-01': # ARG0:agent, Stimulus / ARG1:entity damaged / ARG2:instrument [harm.xml]
   LexSem("V","harm",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("harm"),arg1,pp("by",arg2)))),

 'harmonize-01': # ARG0:Agent, cause of harmonizing / ARG1:First or all things (when one constituent) brought into harmony; or harmonious agreement / ARG2:Second thing brought into harmony, arg1 in harmony with what? [harmonize.xml]
   LexSem("V","harmonize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("harmonize"),arg1,pp("with",arg2)))),

 'harness-01': # ARG0:controller / ARG1:controlled [harness.xml]
   LexSem("V","harness",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("harness"),arg1))),

 'harp-01': # ARG0:entity who just can't let it go / ARG1:thing harped on / ARG2:listener, who is arg0 harping to? [harp.xml]
   LexSem("V","harp",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("harp"),pp("on",arg1),pp("to",arg2)))),

 'harry-01': # ARG0:botherer / ARG1:bothered [harry.xml]
   LexSem("V","harry",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("harry"),arg1))),

 'harshen-01': # ARG0:agent, cause of harshening / ARG1:thing harshened [harshen.xml]
   LexSem("V","harshen",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("harshen"),arg1))),

 'harvest-01': # ARG0:harvester / ARG1:substance harvested [harvest.xml]
   LexSem("V","harvest",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("harvest"),arg1))),

 'hash-out-01': # ARG0:discussants / ARG1:entity hashed out [hash.xml]
   LexSem("V","hash",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hash"),Adv("out"),arg1))),

 'hassle-01': # ARG0:hassler / ARG1:entity being hassled / ARG2:about what [hassle.xml]
   LexSem("V","hassle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hassle"),arg1,pp("about",arg2)))),

 'hasten-01': # ARG0:agent, causer / ARG1:thing hastened [hasten.xml]
   LexSem("V","hasten",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hasten"),arg1))),

 'hat-01': # ARG0:entity placing the hat / ARG1:destination of the hat / ARG2:the hat [hat.xml]
   LexSem("V","hat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hat"),arg1,pp("with",arg2)))),

 'hatch-01': # ARG0:causal agent / ARG1:thing hatching: plan, egg, etc [hatch.xml]
   LexSem("V","hatch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hatch"),arg1))),

 'hate-01': # ARG0:experiencer / ARG1:target or hatred / ARG2:medium of hatred [hate.xml]
   LexSem("V","hate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hate"),arg1,arg2))),

 'haul-01': # ARG0:carrier / ARG1:thing carried / ARG2:instrument / ARG3:'with' reflecting back on arg0 / ARG4:benefactive (predicted but not seen) [haul.xml]
   LexSem("V","haul",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("haul"),arg1,arg2,pp("with",arg3),arg4))),

 'haul-in-02': # ARG0:acquirer / ARG1:thing acquired / ARG2:from [haul.xml]
   LexSem("V","haul",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("haul"),Adv("in"),arg1,pp("from",arg2)))),

 'haul-out-03': # ARG0:causer / ARG1:thing appearing [haul.xml]
   LexSem("V","haul",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("haul"),Adv("out"),arg1))),

 'haunt-01': # ARG0:ghost / ARG1:haunted house (eg) [haunt.xml]
   LexSem("V","haunt",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("haunt"),arg1))),

 'have-01': #  [have.xml]
   LexSem("V","have",[],lambda :S(VP(V("have")))),

 'have-02': #  [have.xml]
   LexSem("V","have",[],lambda :S(VP(V("have")))),

 'have-03': # ARG0:owner / ARG1:possession [have.xml]
   LexSem("V","have",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("have"),arg1))),

 'have-04': # ARG0:causer / ARG1:action [have.xml]
   LexSem("V","have",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("have"),arg1))),

 'have-05': # ARG0:entity giving birth to something / ARG1:entity birthed [have.xml]
   LexSem("V","have",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("have"),arg1))),

 'have-06': # ARG0:true subject / ARG1:true predicate [have.xml]
   LexSem("V","have",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("have"),arg1))),

 'have-07': # ARG0:entity that should / ARG1:fixed: better/best / ARG2:what arg0 had better/best do (main verb clause) [have.xml]
   LexSem("V","have",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("have"),arg1,arg2))),

 'have-08': # ARG0:agent, tackler / ARG1:thing tackled ('at' what) [have.xml]
   LexSem("V","have",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("have"),pp("at",arg1)))),

 'have-09': # ARG0:agent, agressor / ARG1:fixed: (arg0's) way / ARG2:victim/patient [have.xml]
   LexSem("V","have",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("have"),arg1,pp("with",arg2)))),

 'have-10': # ARG0:agent / ARG1:action attempted. "a go at __" [have.xml]
   LexSem("V","have",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("have"),arg1))),

 'have-11': # ARG0:subject, entity having not yet done arg2 / ARG1:fixed: 'yet' / ARG2:have yet to what (infinitival S-node complement) [have.xml]
   LexSem("V","have",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("have"),arg1,arg2))),

 'have-org-role-91': # ARG0:office holder / ARG1:organization / ARG2:title of office held / ARG3:description of responsibility [have-role.xml]
   LexSem("V","have-org-role",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("have-org-role"),arg1,arg2,arg3))),

 'have-rel-role-91': # ARG0:entity A / ARG1:entity B / ARG2:role of entity A (must be specified) / ARG3:role of entity B (often left unspecified) / ARG4:relationship basis (contract, case; rarely used) [have-role.xml]
   LexSem("V","have-rel-role",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("have-rel-role"),arg1,arg2,arg3,arg4))),

 'have_eye_on-05': # ARG0:watcher / ARG1:watched / ARG2:number of eyes [eye.xml]
   LexSem("V","have",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("have"),pp("on",arg1),arg2))),

 'have_hand_in-17': # ARG0:entity involved, agent / ARG1:activity / ARG2:participation event [hand.xml]
   LexSem("V","have",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("have"),pp("in",arg1),arg2))),

 'have_in_mind-13': # ARG0:intender / ARG1:intention [mind.xml]
   LexSem("V","have",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("have"),pp("to",arg1)))),

 'have_trouble-04': # ARG0:person attempting act / ARG1:activity that is difficult [trouble.xml]
   LexSem("V","have",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("have"),arg1))),

 'hawk-01': # ARG0:seller, salesperson / ARG1:goods / ARG2:(potential) buyer [hawk.xml]
   LexSem("V","hawk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hawk"),arg1,arg2))),

 'hawk-02': # ARG0:hawker / ARG1:mucus [hawk.xml]
   LexSem("V","hawk",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hawk"),arg1))),

 'hay-01': # ARG0:agent or causer / ARG1:entity gathered; hay / ARG2:gathered into / ARG3:beneficiary [hay.xml]
   LexSem("V","hay",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("hay"),arg1,arg2,arg3))),

 'hazard-01': # ARG0:entity risking, at risk / ARG1:thing risked [hazard.xml]
   LexSem("V","hazard",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hazard"),arg1))),

 'head-01': # ARG0:leader / ARG1:organization [head.xml]
   LexSem("V","head",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("head"),arg1))),

 'head-02': # ARG0:mover / ARG1:destination [head.xml]
   LexSem("V","head",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("head"),pp("for",arg1)))),

 'head-off-03': # ARG0:pursuer / ARG1:pursued / ARG2:location to end pursuit [head.xml]
   LexSem("V","head",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("head"),Adv("off"),arg1,pp("at",arg2)))),

 'head-up-04': # ARG0:leader / ARG1:organization [head.xml]
   LexSem("V","head",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("head"),Adv("up"),arg1))),

 'headline-01': # ARG0:provider of headline / ARG1:thing headlined, article, movie, etc / ARG2:headline itself [headline.xml]
   LexSem("V","headline",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("headline"),arg1,arg2))),

 'headquarter-01': # ARG0:causer of basing / ARG1:organization [headquarter.xml]
   LexSem("V","headquarter",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("headquarter"),arg1))),

 'headquarters-yy': #  [headquarter.xml]
   LexSem("V","headquarter",[],lambda :S(VP(V("headquarter")))),

 'heal-01': # ARG0:entity causing cure / ARG1:entity healed / ARG2:healed of what? illness [heal.xml]
   LexSem("V","heal",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("heal"),arg1,pp("from",arg2)))),

 'heap-01': # ARG0:distributor / ARG1:constituents of the heap / ARG2:placement of the heap [heap.xml]
   LexSem("V","heap",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("heap"),arg1,pp("on",arg2)))),

 'hear-01': # ARG0:hearer / ARG1:utterance, sound / ARG2:speaker, source of sound [hear.xml]
   LexSem("V","hear",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hear"),arg1,pp("from",arg2)))),

 'hearten-01': # ARG0:causer of feeling better / ARG1:entity feeling better [hearten.xml]
   LexSem("V","hearten",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hearten"),arg1))),

 'heat-01': # ARG0:agent, causer / ARG1:entity heated / ARG2:instrument [heat.xml]
   LexSem("V","heat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("heat"),arg1,pp("with",arg2)))),

 'heat-up-02': # ARG0:agent, causer / ARG1:entity heated up [heat.xml]
   LexSem("V","heat",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("heat"),Adv("up"),arg1))),

 'heave-01': # ARG0:heaver, agent / ARG1:thing moved / ARG2:destination [heave.xml]
   LexSem("V","heave",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("heave"),arg1,arg2))),

 'heave-02': # ARG0:heaver, sigher / ARG1:sigh [heave.xml]
   LexSem("V","heave",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("heave"),arg1))),

 'heave-03': # ARG1:thing moving [heave.xml]
   LexSem("V","heave",[":ARG1"],lambda arg1:S(arg1,VP(V("heave")))),

 'heckle-01': # ARG0:heckler / ARG1:performer [heckle.xml]
   LexSem("V","heckle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("heckle"),arg1))),

 'hedge-01': # ARG0:entity seeking to minimize a loss / ARG1:thing protected / ARG2:protected from / ARG3:instrument [hedge.xml]
   LexSem("V","hedge",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("hedge"),arg1,pp("against",arg2),arg3))),

 'heed-01': # ARG0:attentive entity / ARG1:entity considered [heed.xml]
   LexSem("V","heed",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("heed"),arg1))),

 'heel-01': # ARG0:agent / ARG1:thing tilting / ARG2:direction, path [heel.xml]
   LexSem("V","heel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("heel"),arg1,pp("over",arg2)))),

 'heel-02': # ARG0:obeying animal / ARG1:master [heel.xml]
   LexSem("V","heel",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("heel"),pp("to",arg1)))),

 'heel-03': # ARG0:dancer / ARG1:dance / ARG2:audience [heel.xml]
   LexSem("V","heel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("heel"),arg1,arg2))),

 'heel-04': # ARG0:agent, hitter / ARG1:entity hit / ARG2:destination, location [heel.xml]
   LexSem("V","heel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("heel"),arg1,pp("in",arg2)))),

 'heel-05': # ARG0:cobbler / ARG1:shoe / ARG2:the heel itself [heel.xml]
   LexSem("V","heel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("heel"),arg1,pp("with",arg2)))),

 'heft-01': # ARG0:hefter / ARG1:thing hefted [heft.xml]
   LexSem("V","heft",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("heft"),arg1))),

 'heighten-01': # ARG0:causal agent / ARG1:thing becoming higher [heighten.xml]
   LexSem("V","heighten",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("heighten"),arg1))),

 'helicopter-01': # ARG0:causal agent / ARG1:thing actually doing the flying / ARG2:benefactive [helicopter.xml]
   LexSem("V","helicopter",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("helicopter"),arg1,arg2))),

 'hellenize-01': # ARG0:agent, hellenizing entity / ARG1:entity hellenized [hellenize.xml]
   LexSem("V","hellenize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hellenize"),arg1))),

 'help-01': # ARG0:helper / ARG1:project / ARG2:benefactive, secondary agent  (when separate from arg1) [help.xml]
   LexSem("V","help",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("help"),arg1,arg2))),

 'help-02': # ARG0:agent / ARG1:thing (not) avoided [help.xml]
   LexSem("V","help",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("help"),arg1))),

 'help-out-03': # ARG0:helper / ARG1:project / ARG2:benefactive [help.xml]
   LexSem("V","help",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("help"),Adv("out"),arg1,arg2))),

 'hem-01': # ARG0:agent, entity doing the sewing / ARG1:fabric being given a hem / ARG2:description of the hem [hem.xml]
   LexSem("V","hem",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hem"),arg1,pp("with",arg2)))),

 'hem-in-02': # ARG1:surrounding entity / ARG2:entity being surrounded [hem.xml]
   LexSem("V","hem",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("hem"),Adv("in"),arg2))),

 'hemorrhage-01': # ARG0:bleeder / ARG1:blood (or metaphorical) [hemorrhage.xml]
   LexSem("V","hemorrhage",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hemorrhage"),arg1))),

 'henna-01': # ARG0:agent / ARG1:location of henna drawing [henna.xml]
   LexSem("V","henna",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("henna"),arg1))),

 'herald-01': # ARG0:announcer / ARG1:thing announced / ARG2:attribute, announced as [herald.xml]
   LexSem("V","herald",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("herald"),arg1,pp("as",arg2)))),

 'herd-01': # ARG0:agent, entity causing some grouping / ARG1:theme, thing being included in some group / ARG2:group [herd.xml]
   LexSem("V","herd",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("herd"),arg1,pp("into",arg2)))),

 'hesitate-01': # ARG0:hesitator / ARG1:secondary action [hesitate.xml]
   LexSem("V","hesitate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hesitate"),pp("to",arg1)))),

 'heterodimerize-01': # ARG0:agent of heterodimerization / ARG1:monomer 1 / ARG2:monomer 2 / ARG3:result, heterodimer [heterodimerize.xml]
   LexSem("V","heterodimerize",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("heterodimerize"),arg1,arg2,arg3))),

 'hew-01': # ARG0:chopper / ARG1:wood / ARG2:instrument (eg axe) [hew.xml]
   LexSem("V","hew",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hew"),pp("at",arg1),pp("with",arg2)))),

 'hew-02': # ARG0:adherer / ARG1:thing adhered to [hew.xml]
   LexSem("V","hew",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hew"),pp("to",arg1)))),

 'hiccup-01': # ARG0:hiccup-er / ARG1:cognate object, thing expelled, usually only mentioned when weird [hiccup.xml]
   LexSem("V","hiccup",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hiccup"),arg1))),

 'hide-01': # ARG0:hider / ARG1:thing hidden / ARG2:hidden from [hide.xml]
   LexSem("V","hide",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hide"),arg1,pp("from",arg2)))),

 'hide-out-02': # ARG0:entity in hiding [hide.xml]
   LexSem("V","hide",[":ARG0"],lambda arg0:S(arg0,VP(V("hide"),Adv("out")))),

 'highfive-01': # ARG0:saluter / ARG1:entity saluted / ARG2:attribute of arg1 [highfive.xml]
   LexSem("V","high-five",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("high-five"),arg1,arg2))),

 'highlight-01': # ARG0:emphasizer / ARG1:thing highlighted / ARG2:hearer (rare) [highlight.xml]
   LexSem("V","highlight",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("highlight"),arg1,arg2))),

 'hightail-01': # ARG0:entity leaving / ARG1:place left / ARG2:fixed: 'it' [hightail.xml]
   LexSem("V","hightail",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hightail"),arg1,arg2))),

 'hijack-01': # ARG0:hijacker, agent / ARG1:airplane, entity hijacked / ARG2:pilot, hijacked from [hijack.xml]
   LexSem("V","hijack",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hijack"),arg1,arg2))),

 'hike-01': # ARG0:causer of motion / ARG1:path of motion; location [hike.xml]
   LexSem("V","hike",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hike"),pp("on",arg1)))),

 'hike-02': # ARG0:agent, cause of motion / ARG1:thing being moved / ARG2:location/destination of movement [hike.xml]
   LexSem("V","hike",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hike"),arg1,pp("over",arg2)))),

 'hinder-01': # ARG0:stopper, preventer / ARG1:Theme (action or object being prevented) / ARG2:secondary predication on arg1 or action / ARG3:instrument, if separate from arg0 [hinder.xml]
   LexSem("V","hinder",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("hinder"),arg1,pp("from",arg2),pp("with",arg3)))),

 'hinge-01': # ARG1:thing dependent, hinging / ARG2:dependent on, hinged on [hinge.xml]
   LexSem("V","hinge",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("hinge"),pp("on",arg2)))),

 'hint-01': # ARG0:Sayer / ARG1:Utterance (hint) / ARG2:Hearer [hint.xml]
   LexSem("V","hint",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hint"),arg1,pp("to",arg2)))),

 'hire-01': # ARG0:employer / ARG1:new employee / ARG2:job [hire.xml]
   LexSem("V","hire",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hire"),arg1,pp("to",arg2)))),

 'hiss-01': # ARG0:speaker / ARG1:utterance [hiss.xml]
   LexSem("V","hiss",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hiss"),arg1))),

 'hit-01': # ARG0:agent, hitter - animate only! / ARG1:thing hit / ARG2:instrument, thing hit by or with [hit.xml]
   LexSem("V","hit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hit"),arg1,pp("by",arg2)))),

 'hit-02': # ARG0:thing hitting / reaching / ARG1:thing hit [hit.xml]
   LexSem("V","hit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hit"),arg1))),

 'hit-03': # ARG0:entity turning to a new hobby / ARG1:thing hit [hit.xml]
   LexSem("V","hit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hit"),arg1))),

 'hit-on-04': # ARG0:agent / ARG1:person hit on [hit.xml]
   LexSem("V","hit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hit"),Adv("on"),arg1))),

 'hit-up-05': # ARG0:person making request / ARG1:request / ARG2:requested from [hit.xml]
   LexSem("V","hit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hit"),Adv("up"),pp("for",arg1),arg2))),

 'hitch-01': # ARG0:causer of attachment / ARG1:thing hitched / ARG2:entity hitched to [hitch.xml]
   LexSem("V","hitch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hitch"),arg1,pp("to",arg2)))),

 'hive-01': # ARG0:Bee / ARG1:honey [hive.xml]
   LexSem("V","hive",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hive"),arg1))),

 'hive-02': # ARG0:Agent causing movement, gathering into hive / ARG1:Entity moving/gathering as a hive [hive.xml]
   LexSem("V","hive",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hive"),arg1))),

 'hoard-01': # ARG0:entity accumulating / ARG1:substance accumulated [hoard.xml]
   LexSem("V","hoard",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hoard"),arg1))),

 'hoax-01': # ARG0:hoaxer / ARG1:target, entity fooled / ARG2:the ruse / ARG3:subject-matter of the hoax [hoax.xml]
   LexSem("V","hoax",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("hoax"),arg1,pp("into",arg2),arg3))),

 'hobble-01': # ARG0:walker / ARG1:path / ARG2:destination [hobble.xml]
   LexSem("V","hobble",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hobble"),pp("across",arg1),pp("for",arg2)))),

 'hobble-02': # ARG0:tier, hinderer / ARG1:tied, hindered / ARG2:rope, instrument [hobble.xml]
   LexSem("V","hobble",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hobble"),arg1,pp("with",arg2)))),

 'hobnob-01': # ARG0:First (or all if in one constituent) talker / ARG1:Other hobnobber (when separate constituent) / ARG2:Topic, hobnobbed-about [hobnob.xml]
   LexSem("V","hobnob",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hobnob"),pp("with",arg1),pp("about",arg2)))),

 'hobnob-around-02': # ARG0:first talker / ARG1:talked with, when separate mention / ARG2:topic of discussion [hobnob.xml]
   LexSem("V","hobnob",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hobnob"),Adv("around"),pp("with",arg1),arg2))),

 'hock-01': # ARG0:person pawning items / ARG1:items being pawned [hock.xml]
   LexSem("V","hock",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hock"),arg1))),

 'hoe-01': # ARG0:hoer (heheheh) / ARG1:entity hoed [hoe.xml]
   LexSem("V","hoe",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hoe"),arg1))),

 'hoist-01': # ARG0:lifter, raiser / ARG1:thing going up / ARG2:path [hoist.xml]
   LexSem("V","hoist",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hoist"),arg1,pp("over",arg2)))),

 'hold-01': # ARG0:holder / ARG1:thing held / ARG2:benefactive / ARG3:secondary attribute of arg1 [hold.xml]
   LexSem("V","hold",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("hold"),arg1,pp("against",arg2),pp("as",arg3)))),

 'hold-02': # ARG0:holder / thinker / ARG1:thing held [hold.xml]
   LexSem("V","hold",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hold"),arg1))),

 'hold-03': # ARG0:agent / ARG1:thing lasting / ARG2:attribute of arg1 (usually a PP) [hold.xml]
   LexSem("V","hold",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hold"),arg1,pp("at",arg2)))),

 'hold-04': # ARG0:conductor / ARG1:thing held / ARG2:with whom [hold.xml]
   LexSem("V","hold",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hold"),arg1,pp("with",arg2)))),

 'hold-13': # ARG0:container, possessor, influencer / ARG1:contents, attribute [hold.xml]
   LexSem("V","hold",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hold"),arg1))),

 'hold-14': # ARG0:Follower / ARG1:Policy/rule/given path [hold.xml]
   LexSem("V","hold",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hold"),pp("to",arg1)))),

 'hold-back-07': # ARG0:restrainer / ARG1:thing being restrained / ARG2:thing being held back from [hold.xml]
   LexSem("V","hold",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hold"),Adv("back"),arg1,arg2))),

 'hold-off-08': # ARG0:waiter, delayer / ARG1:thing delayed [hold.xml]
   LexSem("V","hold",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hold"),Adv("off"),pp("on",arg1)))),

 'hold-on-05': # ARG1:entity waiting [hold.xml]
   LexSem("V","hold",[":ARG1"],lambda arg1:S(arg1,VP(V("hold"),Adv("on")))),

 'hold-on-06': # ARG0:holder / ARG1:thing held / ARG2:benefactive [hold.xml]
   LexSem("V","hold",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hold"),Adv("on"),pp("to",arg1),arg2))),

 'hold-out-09': # ARG1:wait-er (not waiter, that's the other sense) / ARG2:thing waited for [hold.xml]
   LexSem("V","hold",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("hold"),Adv("out"),pp("for",arg2)))),

 'hold-out-15': # ARG0:Agent, causer of continuation / ARG1:Thing continued / ARG2:Termination point, continued/waited for what? [hold.xml]
   LexSem("V","hold",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hold"),Adv("out"),arg1,pp("for",arg2)))),

 'hold-over-16': # ARG0:causer of stay / ARG1:entity remaining / ARG2:kept where [hold.xml]
   LexSem("V","hold",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hold"),Adv("over"),arg1,arg2))),

 'hold-up-10': # ARG0:restrainer / ARG1:thing being restrained / ARG2:thing being held back from [hold.xml]
   LexSem("V","hold",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hold"),Adv("up"),arg1,arg2))),

 'hold-up-11': # ARG1:thing lasting [hold.xml]
   LexSem("V","hold",[":ARG1"],lambda arg1:S(arg1,VP(V("hold"),Adv("up")))),

 'hole-up-01': # ARG0:entity needing shelter / ARG1:shelter [hole.xml]
   LexSem("V","hole",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hole"),Adv("up"),pp("in",arg1)))),

 'holiday-01': # ARG0:vacationer / ARG1:locaction / ARG2:holiday away from what / ARG3:holiday commemorating what [holiday.xml]
   LexSem("V","holiday",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("holiday"),pp("in",arg1),arg2,arg3))),

 'holler-01': # ARG0:speaker / ARG1:utterance, holler about [holler.xml]
   LexSem("V","holler",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("holler"),arg1))),

 'hollow-02': # ARG0:causal agent / ARG1:container / ARG2:substance removed [hollow.xml]
   LexSem("V","hollow",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hollow"),arg1,pp("of",arg2)))),

 'hollow-out-01': # ARG0:causal agent / ARG1:container [hollow.xml]
   LexSem("V","hollow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hollow"),Adv("out"),arg1))),

 'holster-01': # ARG0:holster-er / ARG1:holstered [holster.xml]
   LexSem("V","holster",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("holster"),arg1))),

 'homer-01': # ARG0:baseball player, slugger [homer.xml]
   LexSem("V","homer",[":ARG0"],lambda arg0:S(arg0,VP(V("homer")))),

 'homeschool-01': # ARG0:teacher / ARG1:student [homeschool.xml]
   LexSem("V","home-school",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("home-school"),arg1))),

 'homodimerize-01': # ARG0:agent of homodimerization / ARG1:first component of the dimer / ARG2:second component of the dimer / ARG3:result, dimer [homodimerize.xml]
   LexSem("V","homodimerize",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("homodimerize"),arg1,arg2,arg3))),

 'hone-01': # ARG0:causer of sharpness / ARG1:thing becoming sharp / ARG2:whetstone, instrument [hone.xml]
   LexSem("V","hone",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hone"),arg1,pp("in",arg2)))),

 'honeycomb-01': # ARG0:maker of holes / ARG1:thing full of cavities / ARG2:the holes themselves [honeycomb.xml]
   LexSem("V","honeycomb",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("honeycomb"),arg1,arg2))),

 'honeymoon-01': # ARG0:honeymooners / ARG1:location/theme of the honeymoon [honeymoon.xml]
   LexSem("V","honeymoon",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("honeymoon"),pp("in",arg1)))),

 'honk-01': # ARG0:causer, agent / ARG1:thing honking / ARG2:entity honked at [honk.xml]
   LexSem("V","honk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("honk"),arg1,pp("at",arg2)))),

 'honor-01': # ARG0:agentive giver of honor (rare) / ARG1:honoree / ARG2:for what, reason honored / ARG3:the honor itself, thing that is an honor [honor.xml]
   LexSem("V","honor",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("honor"),arg1,pp("for",arg2),pp("of",arg3)))),

 'honor-02': # ARG0:honorer / ARG1:thing honored [honor.xml]
   LexSem("V","honor",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("honor"),arg1))),

 'hoodwink-01': # ARG0:agent, causer / ARG1:entity decieved / ARG2:action deceived into [hoodwink.xml]
   LexSem("V","hoodwink",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hoodwink"),arg1,pp("into",arg2)))),

 'hook-01': # ARG0:causer of attachment / ARG1:thing now attached, first or all things hooked / ARG2:hook, thing arg1 is attached to / ARG3:attribute of arg1 [hook.xml]
   LexSem("V","hook",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("hook"),arg1,pp("on",arg2),arg3))),

 'hook-03': # ARG0:agent, causer of hook shape / ARG1:thing in hook shape / ARG2:hooked around what [hook.xml]
   LexSem("V","hook",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hook"),arg1,pp("around",arg2)))),

 'hook-up-02': # ARG0:causer of attachment / ARG1:thing now attached / ARG2:hook [hook.xml]
   LexSem("V","hook",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hook"),Adv("up"),arg1,pp("to",arg2)))),

 'hoot-01': # ARG0:emitter of hoot [hoot.xml]
   LexSem("V","hoot",[":ARG0"],lambda arg0:S(arg0,VP(V("hoot")))),

 'hoover-01': # ARG0:Agent vacuuming / ARG1:dirt, thing vacuumed up / ARG2:surface (ie, floor) / ARG3:instrument (defaults to 'Hoover vacuum') [hoover.xml]
   LexSem("V","hoover",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("hoover"),arg1,pp("from",arg2),pp("with",arg3)))),

 'hop-01': # ARG0:hopper / ARG3:Source / ARG4:Destination [hop.xml]
   LexSem("V","hop",[":ARG0",":ARG3",":ARG4"],lambda arg0,arg3,arg4:S(arg0,VP(V("hop"),pp("from",arg3),pp("onto",arg4)))),

 'hop-02': # ARG0:entity catching a ride / ARG1:the ride [hop.xml]
   LexSem("V","hop",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hop"),arg1))),

 'hope-01': # ARG0:hoper / ARG1:thing hoped (for) [hope.xml]
   LexSem("V","hope",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hope"),pp("for",arg1)))),

 'hopscotch-01': # ARG0:hopscotcher [hopscotch.xml]
   LexSem("V","hopscotch",[":ARG0"],lambda arg0:S(arg0,VP(V("hopscotch")))),

 'horrify-01': # ARG0:Stimulus of horror / ARG1:horrified entity / ARG2:horrified at what, if separate from arg 0 [horrify.xml]
   LexSem("V","horrify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("horrify"),arg1,arg2))),

 'hose-01': # ARG0:Hoser, cleaner / ARG1:Dirt, thing cleaned off of surface / ARG2:surface (ie, floor, car, etc) / ARG3:instrument (defaults to 'hose') [hose.xml]
   LexSem("V","hose",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("hose"),arg1,pp("from",arg2),arg3))),

 'hospitalize-01': # ARG0:sender / ARG1:injured/ill entity [hospitalize.xml]
   LexSem("V","hospitalize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hospitalize"),arg1))),

 'host-01': # ARG0:a host / ARG1:guests, social event [host.xml]
   LexSem("V","host",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("host"),arg1))),

 'hound-01': # ARG0:harasser / ARG1:entity hounded [hound.xml]
   LexSem("V","hound",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hound"),arg1))),

 'house-01': # ARG0:provider of housing / ARG1:entity housed / ARG2:location [house.xml]
   LexSem("V","house",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("house"),arg1,pp("in",arg2)))),

 'hover-01': # ARG1:thing hovering / ARG2:location or position [hover.xml]
   LexSem("V","hover",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("hover"),pp("around",arg2)))),

 'howl-01': # ARG0:howler / ARG1:utterance, cognate object / ARG2:listener [howl.xml]
   LexSem("V","howl",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("howl"),arg1,pp("at",arg2)))),

 'howl-02': # ARG0:entity in motion / ARG1:path [howl.xml]
   LexSem("V","howl",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("howl"),pp("through",arg1)))),

 'howl-03': # ARG0:wind, etc. / ARG1:cognate object (gusts, a gale, etc.) [howl.xml]
   LexSem("V","howl",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("howl"),arg1))),

 'huckster-01': # ARG0:seller / ARG1:entity huckstering for [huckster.xml]
   LexSem("V","huckster",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("huckster"),pp("for",arg1)))),

 'huddle-01': # ARG0:huddler [huddle.xml]
   LexSem("V","huddle",[":ARG0"],lambda arg0:S(arg0,VP(V("huddle")))),

 'huddle-02': # ARG0:one party / ARG1:other party [huddle.xml]
   LexSem("V","huddle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("huddle"),pp("with",arg1)))),

 'hug-01': # ARG0:hugger / ARG1:hugged [hug.xml]
   LexSem("V","hug",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hug"),arg1))),

 'hulk-01': # ARG1:large thing [hulk.xml]
   LexSem("V","hulk",[":ARG1"],lambda arg1:S(arg1,VP(V("hulk")))),

 'hull-01': # ARG0:remover / ARG1:the thing that is having its outer covering removed / ARG2:the outer covering (rare) / ARG3:instrument [hull.xml]
   LexSem("V","hull",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("hull"),arg1,arg2,pp("with",arg3)))),

 'hull-02': # ARG0:attacker / ARG1:entity being attacked / ARG2:weapon (usually cannon shot) [hull.xml]
   LexSem("V","hull",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hull"),arg1,arg2))),

 'hum-02': # ARG0:entity humming / ARG1:song or sound [hum.xml]
   LexSem("V","hum",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hum"),arg1))),

 'hum-along-01': # ARG0:entity in motion [hum.xml]
   LexSem("V","hum",[":ARG0"],lambda arg0:S(arg0,VP(V("hum"),Adv("along")))),

 'humanize-01': # ARG0:causer of kinder gentler thing / ARG1:thing now seeming (fit for) human(s) [humanize.xml]
   LexSem("V","humanize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("humanize"),arg1))),

 'humble-01': # ARG0:Stimulus of humility / ARG1:humbled entity [humble.xml]
   LexSem("V","humble",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("humble"),arg1))),

 'humidify-01': # ARG0:causer of humidity / ARG1:humid entity / ARG2:instrument or method [humidify.xml]
   LexSem("V","humidify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("humidify"),arg1,arg2))),

 'humiliate-01': # ARG0:Stimulus of humiliation / ARG1:humiliated entity [humiliate.xml]
   LexSem("V","humiliate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("humiliate"),arg1))),

 'humor-01': # ARG0:humor / ARG1:person humored [humor.xml]
   LexSem("V","humor",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("humor"),arg1))),

 'hunch-01': # ARG0:huncher [hunch.xml]
   LexSem("V","hunch",[":ARG0"],lambda arg0:S(arg0,VP(V("hunch")))),

 'hunger-01': # ARG0:hungry entity / ARG1:hungry for [hunger.xml]
   LexSem("V","hunger",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hunger"),pp("for",arg1)))),

 'hunker-01': # ARG0:entity hunkering / ARG1:on what, where [hunker.xml]
   LexSem("V","hunker",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hunker"),arg1))),

 'hunt-01': # ARG0:hunter / ARG1:entity hunted for [hunt.xml]
   LexSem("V","hunt",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hunt"),pp("for",arg1)))),

 'hurl-01': # ARG0:hurler / ARG1:entity hurled / ARG2:entity hurled at [hurl.xml]
   LexSem("V","hurl",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hurl"),arg1,pp("at",arg2)))),

 'hurry-01': # ARG0:causer / ARG1:entity in motion / ARG2:secondary predicate, purpose [hurry.xml]
   LexSem("V","hurry",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hurry"),arg1,arg2))),

 'hurt-01': # ARG0:agent, entity causing damage / ARG1:patient, entity experiencing hurt/damage / ARG2:instrument (if in addition to arg0) / ARG3:benefactive [hurt.xml]
   LexSem("V","hurt",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("hurt"),arg1,pp("by",arg2),pp("for",arg3)))),

 'hurt-02': # ARG1:patient, entity experiencing pain [hurt.xml]
   LexSem("V","hurt",[":ARG1"],lambda arg1:S(arg1,VP(V("hurt")))),

 'hurtle-01': # ARG0:entity in motion / ARG1:path [hurtle.xml]
   LexSem("V","hurtle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hurtle"),pp("down",arg1)))),

 'hush-01': # ARG0:agent / ARG1:patient [hush.xml]
   LexSem("V","hush",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hush"),arg1))),

 'husk-01': # ARG0:remover of the husk / ARG1:thing husk is being removed from [husk.xml]
   LexSem("V","husk",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("husk"),arg1))),

 'hustle-01': # ARG0:agentive hustler / ARG1:entity being sent in a hustle (if in addition to arg0) / ARG2:hustled to/into [hustle.xml]
   LexSem("V","hustle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hustle"),arg1,pp("to",arg2)))),

 'hybridize-01': # ARG0:cause of hybridization / ARG1:entity now a hybrid / ARG2:hybridized with what? If separate [hybridize.xml]
   LexSem("V","hybridize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hybridize"),arg1,pp("with",arg2)))),

 'hydrate-01': # ARG0:agent, entity adding the moisture / ARG1:patient, thing becoming moist / ARG2:liquid [hydrate.xml]
   LexSem("V","hydrate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hydrate"),arg1,pp("with",arg2)))),

 'hydrogenate-01': # ARG0:Causer of hydrogenation agent / ARG1:substance undergoing hydrogenation / ARG2:Instrument or manner if separate from arg 0 / ARG3:Resulting substance [hydrogenate.xml]
   LexSem("V","hydrogenate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("hydrogenate"),arg1,arg2,arg3))),

 'hydrolyze-01': # ARG0:agent of hydrolysis (e.g. scientist) / ARG1:entity undergoing hydrolysis (e.g. small molecule) / ARG2:instrument (e.g. enzyme) / ARG3:result of hydrolysis (e.g. small molecule) [hydrolyze.xml]
   LexSem("V","hydrolyze",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("hydrolyze"),arg1,pp("with",arg2),pp("to",arg3)))),

 'hype-01': # ARG0:publicist / ARG1:topic / ARG2:secondary predication [hype.xml]
   LexSem("V","hype",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hype"),arg1,arg2))),

 'hype-up-02': # ARG0:publicist / ARG1:topic / ARG2:secondary predication [hype.xml]
   LexSem("V","hype",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hype"),Adv("up"),arg1,arg2))),

 'hyperacetylate-01': # ARG0:agent of hyperacetylation (e.g. scientist) / ARG1:thing hyperacetylated (material/source) / ARG2:catalyst, e.g. enzyme / ARG3:product of hyperacetylation [hyperacetylate.xml]
   LexSem("V","hyperacetylate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("hyperacetylate"),arg1,arg2,arg3))),

 'hyperbolize-01': # ARG0:hyperbolizer / ARG1:thing hyperbolized / ARG2:attribute of arg1 [hyperbolize.xml]
   LexSem("V","hyperbolize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hyperbolize"),arg1,pp("as",arg2)))),

 'hypercontrol-01': # ARG0:controller / ARG1:controlled / ARG2:instrumental, controlled with [hypercontrol.xml]
   LexSem("V","hypercontrol",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hypercontrol"),arg1,arg2))),

 'hyperlink-01': # ARG0:agent, entity providing hyperlink / ARG1:focus of linking, document containing the hyperlink / ARG2:site hyperlink leads to / ARG3:hyperlink itself, URL (probably unlikely?) [hyperlink.xml]
   LexSem("V","hyperlink",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("hyperlink"),arg1,arg2,arg3))),

 'hyperlink-91': # ARG1:text being hyperlinked / ARG3:url-entity [hyperlink.xml]
   LexSem("V","hyperlink",[":ARG1",":ARG3"],lambda arg1,arg3:S(arg1,VP(V("hyperlink"),arg3))),

 'hypermethylate-01': # ARG0:cause of increase / ARG1:experiencer/recepient / ARG2:result of epigenetic modification; DNA/protein underexpressed [hypermethylate.xml]
   LexSem("V","hypermethylate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hypermethylate"),pp("in",arg1),arg2))),

 'hyperphosphorylate-01': # ARG0:intentional agent of hyperphosphorylation (e.g. scientist) / ARG1:thing hyperphosphorylated (e.g. protein or another organic molecule) / ARG2:instrument (e.g. enzyme) / ARG3:result of hyperphosphorylation [hyperphosphorylate.xml]
   LexSem("V","hyperphosphorylate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("hyperphosphorylate"),arg1,arg2,arg3))),

 'hyperproliferate-01': # ARG0:thing that hyperproliferates (e.g. cell) [hyperproliferate.xml]
   LexSem("V","hyperproliferate",[":ARG0"],lambda arg0:S(arg0,VP(V("hyperproliferate")))),

 'hypertrophy-01': # ARG0:Causer of enlargement / ARG1:Thing enlarged [hypertrophy.xml]
   LexSem("V","hypertrophy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hypertrophy"),arg1))),

 'hyperventilate-01': # ARG0:breather / ARG1:air, we hope / ARG2:direction [hyperventilate.xml]
   LexSem("V","hyperventilate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("hyperventilate"),arg1,arg2))),

 'hypnotize-01': # ARG0:hypnotist / ARG1:subject, victim [hypnotize.xml]
   LexSem("V","hypnotize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hypnotize"),arg1))),

 'hypophosphorylate-01': # ARG0:intentional agent of hypophosphorylation (e.g. scientist) / ARG1:thing hypophosphorylated (e.g. protein or another organic molecule) / ARG2:instrument (e.g. enzyme) / ARG3:result of hypophosphorylation / ARG4:phosphoryl group added / ARG5:phosphatase, dephosphorylating enzyme [hypophosphorylate.xml]
   LexSem("V","hypophosphorylate",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg0,arg1,arg2,arg3,arg4,arg5:S(arg0,VP(V("hypophosphorylate"),arg1,arg2,arg3,arg4,arg5))),

 'hypothesize-01': # ARG0:guesser / ARG1:hypothesis [hypothesize.xml]
   LexSem("V","hypothesize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hypothesize"),arg1))),

 'ice-01': # ARG0:pastry chef / ARG1:the cake / ARG2:the frosting [ice.xml]
   LexSem("V","ice",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ice"),arg1,pp("with",arg2)))),

 'ice-02': # ARG0:agent, person holding the ice / ARG1:patient, thing being made icy / ARG2:the ice [ice.xml]
   LexSem("V","ice",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ice"),arg1,arg2))),

 'idealize-01': # ARG0:entity idealizing something / ARG1:entity idealized [idealize.xml]
   LexSem("V","idealize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("idealize"),arg1))),

 'identify-01': # ARG0:caller / ARG1:item being labelled / ARG2:attribute [identify.xml]
   LexSem("V","identify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("identify"),arg1,pp("as",arg2)))),

 'identify-02': # ARG0:feeler / ARG1:thing being identified with / ARG2:attribute [identify.xml]
   LexSem("V","identify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("identify"),pp("with",arg1),arg2))),

 'idle-01': # ARG0:causer of inactivity / ARG1:entity becoming idle [idle.xml]
   LexSem("V","idle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("idle"),arg1))),

 'idolize-01': # ARG0:admirer / ARG1:admired [idolize.xml]
   LexSem("V","idolize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("idolize"),arg1))),

 'ignite-01': # ARG0:agent, firestarter / ARG1:thing now burning [ignite.xml]
   LexSem("V","ignite",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ignite"),arg1))),

 'ignore-01': # ARG0:ignorer / ARG1:thing ignored [ignore.xml]
   LexSem("V","ignore",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ignore"),arg1))),

 'illuminate-01': # ARG0:causer / ARG1:entity illuminated [illuminate.xml]
   LexSem("V","illuminate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("illuminate"),arg1))),

 'illumine-01': # ARG0:agent / ARG1:thing made lighter [illumine.xml]
   LexSem("V","illumine",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("illumine"),arg1))),

 'illustrate-01': # ARG0:illustrator / ARG1:item being explained / ARG2:explained to [illustrate.xml]
   LexSem("V","illustrate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("illustrate"),arg1,pp("to",arg2)))),

 'illustrate-02': # ARG0:artist / ARG1:art / ARG2:benefactive [illustrate.xml]
   LexSem("V","illustrate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("illustrate"),arg1,pp("for",arg2)))),

 'image-101': # ARG0:Doctor / ARG1:Patient/ Anatomical part [image.xml]
   LexSem("V","image",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("image"),arg1))),

 'imagine-01': # ARG0:thinker / ARG1:object, thing under consideration / ARG2:attribute [imagine.xml]
   LexSem("V","imagine",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("imagine"),arg1,pp("as",arg2)))),

 'imbed-01': # ARG0:causer, agent / ARG1:entity embedded / ARG2:embedded into [imbed.xml]
   LexSem("V","imbed",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("imbed"),arg1,pp("in",arg2)))),

 'imbibe-01': # ARG0:drinker / ARG1:thing drunk / ARG2:source [imbibe.xml]
   LexSem("V","imbibe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("imbibe"),arg1,pp("from",arg2)))),

 'imbue-01': # ARG0:imbuer / ARG1:thing soaked or filled / ARG2:content; thing imbued with [imbue.xml]
   LexSem("V","imbue",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("imbue"),arg1,pp("with",arg2)))),

 'imitate-01': # ARG0:imitator / ARG1:entity imitated [imitate.xml]
   LexSem("V","imitate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("imitate"),arg1))),

 'immerse-01': # ARG0:causer of immersion / ARG1:entity immersed / ARG2:entity immersed into [immerse.xml]
   LexSem("V","immerse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("immerse"),arg1,pp("in",arg2)))),

 'immigrate-01': # ARG0:population / ARG1:destination / ARG2:source [immigrate.xml]
   LexSem("V","immigrate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("immigrate"),pp("to",arg1),pp("from",arg2)))),

 'immobilize-01': # ARG0:agent causing immobility / ARG1:thing made immobile [immobilize.xml]
   LexSem("V","immobilize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("immobilize"),arg1))),

 'immolate-01': # ARG0:killer / ARG1:corpse / ARG2:instrument [immolate.xml]
   LexSem("V","immolate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("immolate"),arg1,arg2))),

 'immortalize-01': # ARG0:causer of immortality / ARG1:entity living forever [immortalize.xml]
   LexSem("V","immortalize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("immortalize"),arg1))),

 'immortalize-02': # ARG0:causer of eternal remembrance / ARG1:entity forevermore remembered / ARG2:reason for veneration [immortalize.xml]
   LexSem("V","immortalize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("immortalize"),arg1,pp("for",arg2)))),

 'immortalize-03': # ARG0:causer/agent of cell mutation / ARG1:mutated cells / ARG2:catalyst of mutation [immortalize.xml]
   LexSem("V","immortalize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("immortalize"),arg1,arg2))),

 'immunize-01': # ARG0:immunizer / ARG1:immunized / ARG2:against what, disease [immunize.xml]
   LexSem("V","immunize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("immunize"),arg1,pp("against",arg2)))),

 'immunoblot-01': # ARG0:intentional agent of immunoblotting (e.g. scientist) / ARG1:target of immunoblotting, antigens/proteins checked for / ARG2:source tissue being immunoblotted / ARG3:instrument, antibody, stain [immunoblot.xml]
   LexSem("V","immunoblot",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("immunoblot"),arg1,arg2,arg3))),

 'immunodetect-01': # ARG0:intentional agent of immunodetection (e.g. scientist) / ARG1:target of immunodetection, antigens/proteins checked for / ARG2:source tissue being immunodetected from / ARG3:instrument, antibody, stain [immunodetect.xml]
   LexSem("V","immunodetect",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("immunodetect"),arg1,pp("from",arg2),arg3))),

 'immunofluoresce-01': # ARG1:entity immunofluorescing / ARG2:instrument [immunofluoresce.xml]
   LexSem("V","immunofluoresce",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("immunofluoresce"),arg2))),

 'immunoprecipitate-01': # ARG0:intentional agent of immunoprecipitation (e.g. scientist) / ARG1:thing immunoprecipitated, antigen (e.g. protein) / ARG2:immunoprecipitated from, solution / ARG3:instrument, antibody [immunoprecipitate.xml]
   LexSem("V","immunoprecipitate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("immunoprecipitate"),arg1,arg2,arg3))),

 'immunoreact-01': # ARG0:intentional agent of immunoreaction (e.g. scientist) / ARG1:antigen (toxin or foreign substance that induces an immune response) / ARG2:antibody (protein produced by body to neutralize pathogens) / ARG3:person/entity whose immune system is reacting [immunoreact.xml]
   LexSem("V","immunoreact",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("immunoreact"),arg1,arg2,arg3))),

 'immunostain-01': # ARG0:stainer / ARG1:thing stained / ARG2:stained with / ARG3:what you are trying to detect (i.e. protein) [immunostain.xml]
   LexSem("V","immunostain",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("immunostain"),arg1,pp("with",arg2),pp("for",arg3)))),

 'impact-01': # ARG0:thing affecting / ARG1:thing affected [impact.xml]
   LexSem("V","impact",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("impact"),arg1))),

 'impact-02': # ARG1:thing hit / ARG2:instrument, thing hit by or with [impact.xml]
   LexSem("V","impact",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("impact"),arg2))),

 'impact-03': # ARG1:firmly packed thing [impact.xml]
   LexSem("V","impact",[":ARG1"],lambda arg1:S(arg1,VP(V("impact")))),

 'impair-01': # ARG0:Stimulus / ARG1:entity impaired [impair.xml]
   LexSem("V","impair",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("impair"),arg1))),

 'impale-01': # ARG0:agent / ARG1:thing impaled / ARG2:skewer [impale.xml]
   LexSem("V","impale",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("impale"),arg1,pp("on",arg2)))),

 'impart-01': # ARG0:giver / ARG1:gift / ARG2:given-to [impart.xml]
   LexSem("V","impart",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("impart"),arg1,pp("to",arg2)))),

 'impeach-01': # ARG0:impeacher / ARG1:impeached / ARG2:crime [impeach.xml]
   LexSem("V","impeach",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("impeach"),arg1,pp("on",arg2)))),

 'impede-01': # ARG0:entity attempting to stop something / ARG1:Theme (action or object being prevented) / ARG2:secondary predication or action / ARG3:instrument [impede.xml]
   LexSem("V","impede",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("impede"),arg1,pp("from",arg2),pp("with",arg3)))),

 'impel-01': # ARG0:causal agent / ARG1:impelled action / ARG2:impelled agent, if extracted from action [impel.xml]
   LexSem("V","impel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("impel"),arg1,arg2))),

 'impend-01': # ARG1:anticipated event [impend.xml]
   LexSem("V","impend",[":ARG1"],lambda arg1:S(arg1,VP(V("impend")))),

 'imperil-01': # ARG0:causer of danger (agent or instrument) / ARG1:entity in danger [imperil.xml]
   LexSem("V","imperil",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("imperil"),arg1))),

 'impersonate-01': # ARG0:impersonater, agent / ARG1:original [impersonate.xml]
   LexSem("V","impersonate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("impersonate"),arg1))),

 'impinge-01': # ARG0:cause of impingment / ARG1:impinged-(up)on [impinge.xml]
   LexSem("V","impinge",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("impinge"),pp("upon",arg1)))),

 'implant-01': # ARG0:putter / ARG1:thing implanted / ARG2:implanted into [implant.xml]
   LexSem("V","implant",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("implant"),arg1,pp("into",arg2)))),

 'implement-01': # ARG0:implementer / ARG1:thing implemented / ARG2:instrument [implement.xml]
   LexSem("V","implement",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("implement"),arg1,pp("with",arg2)))),

 'implicate-01': # ARG0:entity establishing a link / ARG1:thing implicated / ARG2:involved in what? [implicate.xml]
   LexSem("V","implicate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("implicate"),arg1,pp("in",arg2)))),

 'implode-01': # ARG0:cause of implosion / ARG1:thing imploding [implode.xml]
   LexSem("V","implode",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("implode"),arg1))),

 'implore-01': # ARG0:asker, agent / ARG1:thing asked for / ARG2:hearer [implore.xml]
   LexSem("V","implore",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("implore"),arg1,arg2))),

 'imply-01': # ARG0:implier / ARG1:implication / ARG2:listener [imply.xml]
   LexSem("V","imply",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("imply"),arg1,pp("to",arg2)))),

 'import-01': # ARG0:importer / ARG1:commodity / ARG2:exporter [import.xml]
   LexSem("V","import",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("import"),arg1,pp("from",arg2)))),

 'important-01': # ARG1:important thing (may require concatenation / ARG2:to whom/what; beneficiary [important.xml]
   LexSem("V","to be of importance",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("to be of importance"),pp("for",arg2)))),

 'importune-01': # ARG0:begger, appealer / ARG1:appealed to, begged from / ARG2:begged/appealed for [importune.xml]
   LexSem("V","importune",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("importune"),arg1,pp("to",arg2)))),

 'impose-01': # ARG0:imposer (not imposter) / ARG1:thing imposed / ARG2:imposed on [impose.xml]
   LexSem("V","impose",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("impose"),arg1,pp("on",arg2)))),

 'impound-01': # ARG0:holder, agent / ARG1:entity impounded [impound.xml]
   LexSem("V","impound",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("impound"),arg1))),

 'impoverish-01': # ARG0:causer of poverty, agent / ARG1:entity impoverished [impoverish.xml]
   LexSem("V","impoverish",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("impoverish"),arg1))),

 'imprecate-01': # ARG0:speaker / ARG1:the curse / ARG2:listener [imprecate.xml]
   LexSem("V","imprecate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("imprecate"),arg1,pp("upon",arg2)))),

 'impregnate-01': # ARG0:impregnator, male / ARG1:thing made pregnant, woman / ARG2:entity arg1 is pregnant with, baby [impregnate.xml]
   LexSem("V","impregnate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("impregnate"),arg1,pp("with",arg2)))),

 'impress-01': # ARG0:agent, thing making an impression / ARG1:thing impressed / ARG2:instrument or manner, if in addition to arg0 [impress.xml]
   LexSem("V","impress",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("impress"),arg1,pp("with",arg2)))),

 'impress-02': # ARG0:agent of convincing / ARG1:entity convinced / ARG2:proposition [impress.xml]
   LexSem("V","impress",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("impress"),pp("upon",arg1),arg2))),

 'imprint-01': # ARG0:imprinter / ARG1:surface / ARG2:thing imprinted [imprint.xml]
   LexSem("V","imprint",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("imprint"),arg1,arg2))),

 'imprison-01': # ARG0:court, judge, jury / ARG1:criminal / ARG2:term / ARG3:cause, misdeed [imprison.xml]
   LexSem("V","imprison",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("imprison"),arg1,pp("for",arg2),pp("for",arg3)))),

 'improve-01': # ARG0:improver / ARG1:thing improving [improve.xml]
   LexSem("V","improve",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("improve"),arg1))),

 'improve-02': # ARG1:Logical subject, patient, thing rising / ARG2:EXT, amount risen / ARG3:start point / ARG4:end point [improve.xml]
   LexSem("V","improve",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("improve"),arg2,pp("from",arg3),pp("to",arg4)))),

 'improvise-01': # ARG0:improviser / ARG1:thing improvised [improvise.xml]
   LexSem("V","improvise",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("improvise"),pp("on",arg1)))),

 'impugn-01': # ARG0:attacker, slanderer, agent / ARG1:entity impugned [impugn.xml]
   LexSem("V","impugn",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("impugn"),arg1))),

 'in_line-04': # ARG0:follower of procedure / ARG1:action done / ARG2:regulations, procedure, or expectations accorded with [line.xml]
   LexSem("V","be",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("be"),arg1,pp("with",arg2)))),

 'in_ones_hands-04': # ARG0:possessor / ARG1:thing possessed / ARG2:attribute of hands of arg0 [hand.xml]
   LexSem("V","have",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("have"),pp("on",arg1),arg2))),

 'in_ones_pocket-06': # ARG0:influencer / ARG1:entity influenced [pocket.xml]
   LexSem("V","be",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("be"),arg1))),

 'in_step-06': # ARG0:cause, agent / ARG1:first synchronized entity / ARG2:in synch with [step.xml]
   LexSem("V","be",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("be"),arg1,pp("with",arg2)))),

 'in_trouble-02': # ARG0:agent/cause / ARG1:entity in trouble / ARG2:for what misbehavior / ARG3:the authorities [trouble.xml]
   LexSem("V","be",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("be"),arg1,pp("for",arg2),pp("with",arg3)))),

 'in_trouble-03': # ARG0:source of danger / ARG1:entity in dire straights [trouble.xml]
   LexSem("V","be",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("be"),arg1))),

 'inaugurate-01': # ARG0:agent (rare) / ARG1:new officer / ARG2:office, role [inaugurate.xml]
   LexSem("V","inaugurate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("inaugurate"),arg1,pp("as",arg2)))),

 'inaugurate-02': # ARG0:marker / ARG1:thing beginning [inaugurate.xml]
   LexSem("V","inaugurate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("inaugurate"),arg1))),

 'incandesce-01': # ARG1:incandescent entity [incandesce.xml]
   LexSem("V","incandesce",[":ARG1"],lambda arg1:S(arg1,VP(V("incandesce")))),

 'incapacitate-01': # ARG0:disabler / ARG1:thing no longer capable [incapacitate.xml]
   LexSem("V","incapacitate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("incapacitate"),arg1))),

 'incarcerate-01': # ARG0:judge, court, etc. / ARG1:criminal / ARG2:term / ARG3:crime [incarcerate.xml]
   LexSem("V","incarcerate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("incarcerate"),arg1,pp("for",arg2),pp("for",arg3)))),

 'incense-01': # ARG0:Stimulus of anger / ARG1:experiencer [incense.xml]
   LexSem("V","incense",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("incense"),arg1))),

 'incentivize-01': # ARG0:cause, provider of incentives / ARG1:impelled agent, incentives provided to whom? / ARG2:incentivized action, arg1 now has incentives to do what? [incentivize.xml]
   LexSem("V","incentivize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("incentivize"),arg1,pp("to",arg2)))),

 'inch-01': # ARG0:causer of motion / ARG1:entity in motion / ARG2:EXT / ARG3:start point / ARG4:end point / ARG5:direction [inch.xml]
   LexSem("V","inch",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg0,arg1,arg2,arg3,arg4,arg5:S(arg0,VP(V("inch"),arg1,arg2,pp("from",arg3),pp("to",arg4),pp("up",arg5)))),

 'incinerate-01': # ARG0:pyromaniac / ARG1:thing burnt [incinerate.xml]
   LexSem("V","incinerate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("incinerate"),arg1))),

 'incise-01': # ARG0:carver / ARG1:surface carved / ARG2:thing created on the surface [incise.xml]
   LexSem("V","incise",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("incise"),arg1,arg2))),

 'incite-01': # ARG0:causer of action, agent / ARG1:action incited  [incite.xml]
   LexSem("V","incite",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("incite"),arg1))),

 'incline-01': # ARG0:entity feeling inclined; wanter / ARG1:toward what; specific thing wanted / ARG2:domain of arg1 [incline.xml]
   LexSem("V","incline",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("incline"),arg1,arg2))),

 'include-01': # ARG0:agent, entity causing some grouping / ARG1:theme, thing being included in some group / ARG2:group [include.xml]
   LexSem("V","include",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("include"),arg1,pp("in",arg2)))),

 'incorporate-01': # ARG0:causer of tax status / ARG1:corporation [incorporate.xml]
   LexSem("V","incorporate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("incorporate"),arg1))),

 'incorporate-02': # ARG0:mixer, integrater / ARG1:figure / ARG2:ground [incorporate.xml]
   LexSem("V","incorporate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("incorporate"),arg1,pp("into",arg2)))),

 'increase-01': # ARG0:causer of increase / ARG1:thing increasing / ARG2:amount increased by, EXT or MNR / ARG3:start point / ARG4:end point [increase.xml]
   LexSem("V","increase",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("increase"),arg1,pp("by",arg2),pp("from",arg3),pp("to",arg4)))),

 'incriminate-01': # ARG0:agent, causer of incrimination / ARG1:alleged criminal [incriminate.xml]
   LexSem("V","incriminate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("incriminate"),arg1))),

 'incubate-01': # ARG0:Hen, cause of development / ARG1:embryo, entity developed / ARG2:instrument or manner separate from arg 0 / ARG3:Egg, starting point / ARG4:Chick, ending result [incubate.xml]
   LexSem("V","incubate",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("incubate"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'incur-01': # ARG0:entity taking something on / ARG1:penalty / ARG2:reason for penalty [incur.xml]
   LexSem("V","incur",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("incur"),arg1,pp("to",arg2)))),

 'indemnify-01': # ARG0:protector / ARG1:protected / ARG2:damage protected from/against [indemnify.xml]
   LexSem("V","indemnify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("indemnify"),arg1,pp("against",arg2)))),

 'indent-01': # ARG0:agent, indenter / ARG1:thing indented, dented [indent.xml]
   LexSem("V","indent",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("indent"),arg1))),

 'indent-02': # ARG0:Causing of indenturing / ARG1:entity made servant / ARG2:master, entity indentured to [indent.xml]
   LexSem("V","indent",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("indent"),arg1,pp("to",arg2)))),

 'index-01': # ARG0:provider of index / ARG1:entity indexed / ARG2:attribute of arg1, index value [index.xml]
   LexSem("V","index",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("index"),arg1,pp("to",arg2)))),

 'indicate-01': # ARG0:indicator / ARG1:thing indicated / ARG2:indicated to [indicate.xml]
   LexSem("V","indicate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("indicate"),arg1,pp("to",arg2)))),

 'indicate-101': # ARG1:Indicating item (often a symptom or situation) / ARG2:Indicated item (often a medication or treatment) [indicate.xml]
   LexSem("V","indicate",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("indicate"),arg2))),

 'indict-01': # ARG0:accuser / ARG1:accused / ARG2:crime [indict.xml]
   LexSem("V","indict",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("indict"),arg1,pp("on",arg2)))),

 'indispose-01': # ARG1:cause of unwillingness / ARG2:unfit one / ARG3:unwilling to do this [indispose.xml]
   LexSem("V","indispose",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("indispose"),arg2,pp("to",arg3)))),

 'indispose-02': # ARG1:cause of illness / ARG2:ill person [indispose.xml]
   LexSem("V","indispose",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("indispose"),arg2))),

 'individualize-02': # ARG0:agent / ARG1:thing tailored / ARG2:to whom; the individual [individualistic.xml]
   LexSem("V","individualize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("individualize"),arg1,arg2))),

 'indoctrinate-01': # ARG0:brainwasher / ARG1:victim / ARG2:dogma [indoctrinate.xml]
   LexSem("V","indoctrinate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("indoctrinate"),arg1,pp("in",arg2)))),

 'induce-01': # ARG0:Causal agent / ARG1:Impelled person / ARG2:Action or Proposition (ex. labor) / ARG3:Extent [induce.xml]
   LexSem("V","induce",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("induce"),arg1,arg2,arg3))),

 'induct-02': # ARG0:Agent / ARG1:Entity inducted / ARG2:Inducted into what (Hall of Fame, etc.) [induce.xml]
   LexSem("V","induct",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("induct"),pp("of",arg1),pp("into",arg2)))),

 'indulge-01': # ARG0:allower / ARG1:luxury / ARG2:recipient (us. reflexive) [indulge.xml]
   LexSem("V","indulge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("indulge"),pp("in",arg1),arg2))),

 'indurate-01': # ARG0:Cause of hardening / ARG1:Entity hardened / ARG2:Instrument [indurate.xml]
   LexSem("V","indurate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("indurate"),arg1,arg2))),

 'industrialize-01': # ARG0:agent of industrialization / ARG1:thing becoming industrialized / ARG2:attribute of arg1 actually becoming industrialized [industrialize.xml]
   LexSem("V","industrialize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("industrialize"),arg1,arg2))),

 'infect-01': # ARG0:causer of infection, but not germ / ARG1:thing becoming infected / ARG2:infectant, germ [infect.xml]
   LexSem("V","infect",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("infect"),arg1,pp("with",arg2)))),

 'infer-01': # ARG0:agent, entity now believing something / ARG1:belief / ARG2:source of belief [infer.xml]
   LexSem("V","infer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("infer"),arg1,pp("from",arg2)))),

 'infest-01': # ARG0:agent of infesting / ARG1:container, space / ARG2:contaminants [infest.xml]
   LexSem("V","infest",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("infest"),arg1,arg2))),

 'infight-05': # ARG0:first fighter / ARG1:second fighter, if separate / ARG2:spoils, over what, explicit mention of the battle [fight.xml]
   LexSem("V","infight",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("infight"),arg1,arg2))),

 'infiltrate-01': # ARG0:infiltrator, agent / ARG1:into what [infiltrate.xml]
   LexSem("V","infiltrate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("infiltrate"),arg1))),

 'inflame-01': # ARG0:agent, Stimulus / ARG1:inflamed thing [inflame.xml]
   LexSem("V","inflame",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("inflame"),arg1))),

 'inflate-01': # ARG0:causer of expansion, agent / ARG1:thing grown / ARG2:amount increased by, EXT or MNR / ARG3:start point / ARG4:end point [inflate.xml]
   LexSem("V","inflate",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("inflate"),arg1,pp("by",arg2),pp("from",arg3),pp("to",arg4)))),

 'inflect-01': # ARG0:inflector / ARG1:information inflected [inflect.xml]
   LexSem("V","inflect",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("inflect"),arg1))),

 'inflict-01': # ARG0:inflicter / ARG1:injury / ARG2:injured [inflict.xml]
   LexSem("V","inflict",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("inflict"),arg1,pp("upon",arg2)))),

 'influence-01': # ARG0:influencer / ARG1:influenced / ARG2:induced action [influence.xml]
   LexSem("V","influence",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("influence"),arg1,pp("into",arg2)))),

 'inform-01': # ARG0:informer / ARG1:informed / ARG2:information [inform.xml]
   LexSem("V","inform",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("inform"),arg1,arg2))),

 'inform-02': # ARG0:informant / ARG1:authorities alerted / ARG2:wrongdoings, information / ARG3:wrongdoers [inform.xml]
   LexSem("V","inform",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("inform"),pp("to",arg1),arg2,pp("on",arg3)))),

 'infringe-01': # ARG0:infringer / ARG1:infringed (up)on [infringe.xml]
   LexSem("V","infringe",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("infringe"),pp("on",arg1)))),

 'infuriate-01': # ARG0:causer of anger / ARG1:angry entity [infuriate.xml]
   LexSem("V","infuriate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("infuriate"),arg1))),

 'infuse-01': # ARG0:putter / ARG1:thing infused / ARG2:thing infused with or into [infuse.xml]
   LexSem("V","infuse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("infuse"),arg1,pp("with",arg2)))),

 'ingest-01': # ARG0:eater / ARG1:entity ingested [ingest.xml]
   LexSem("V","ingest",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ingest"),arg1))),

 'ingrain-01': # ARG0:etcher / ARG1:surface / ARG2:image, impression, ideas [ingrain.xml]
   LexSem("V","ingrain",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ingrain"),arg1,arg2))),

 'ingratiate-01': # ARG0:sycophant / ARG1:us. 'self' / ARG2:grateful entity [ingratiate.xml]
   LexSem("V","ingratiate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ingratiate"),arg1,pp("to",arg2)))),

 'inhabit-01': # ARG0:resident / ARG1:place of residence [inhabit.xml]
   LexSem("V","inhabit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("inhabit"),arg1))),

 'inhale-01': # ARG0:agent, breather / ARG1:air or vapor inhaled [inhale.xml]
   LexSem("V","inhale",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("inhale"),arg1))),

 'inherit-01': # ARG0:inheritor / ARG1:inheritance / ARG2:predecessor [inherit.xml]
   LexSem("V","inherit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("inherit"),arg1,pp("from",arg2)))),

 'inhibit-01': # ARG0:inhibitor / ARG1:entity inhibited [inhibit.xml]
   LexSem("V","inhibit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("inhibit"),arg1))),

 'initial-01': # ARG0:signer, initialler / ARG1:document [initial.xml]
   LexSem("V","initial",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("initial"),arg1))),

 'initiate-01': # ARG0:causer / ARG1:Theme(-Creation) / ARG2:Instrument [initiate.xml]
   LexSem("V","initiate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("initiate"),arg1,pp("with",arg2)))),

 'initiate-02': # ARG0:initiator, welcomer / ARG1:initiated, welcomed / ARG2:initiated-into / ARG3:instrument [initiate.xml]
   LexSem("V","initiate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("initiate"),arg1,pp("into",arg2),arg3))),

 'inject-01': # ARG0:injector / ARG1:stuff being put in / ARG2:injected into what? [inject.xml]
   LexSem("V","inject",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("inject"),pp("between",arg1),pp("into",arg2)))),

 'injure-01': # ARG0:agent, entity causing/possessing arg1's injury  / ARG1:injured entity (body part if arg0 is possessor) / ARG2:instrument, injured doing what [injure.xml]
   LexSem("V","injure",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("injure"),arg1,arg2))),

 'ink-01': # ARG0:agent, entity applying the ink / ARG1:theme, the ink itself or what is being depicted in ink / ARG2:destination, what the ink is being applied to [ink.xml]
   LexSem("V","ink",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ink"),arg1,pp("to",arg2)))),

 'ink-02': # ARG0:agent, entity filling the reservoir with ink / ARG1:the ink / ARG2:destination, thing being filled with ink [ink.xml]
   LexSem("V","ink",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ink"),pp("with",arg1),arg2))),

 'ink-03': # ARG0:ink-bearing sea creature / ARG1:the ink (rarely seen) / ARG2:where the ink is being squirted [ink.xml]
   LexSem("V","ink",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ink"),arg1,arg2))),

 'inlay-01': # ARG0:artisan, decorator / ARG1:surface, hole / ARG2:decorative material [inlay.xml]
   LexSem("V","inlay",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("inlay"),arg1,pp("with",arg2)))),

 'innovate-01': # ARG0:thinker / ARG1:new idea [innovate.xml]
   LexSem("V","innovate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("innovate"),arg1))),

 'inoculate-01': # ARG0:inoculator / ARG1:patient inoculated / ARG2:inoculated against / ARG3:innoculated with, vaccine itself [inoculate.xml]
   LexSem("V","inoculate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("inoculate"),arg1,pp("against",arg2),pp("with",arg3)))),

 'inquire-01': # ARG0:inquirer / ARG1:thing wondered about/investigated / ARG2:entity being asked [inquire.xml]
   LexSem("V","inquire",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("inquire"),pp("into",arg1),pp("of",arg2)))),

 'inscribe-01': # ARG0:Agent, engraver / ARG1:surface / ARG2:message [inscribe.xml]
   LexSem("V","inscribe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("inscribe"),arg1,pp("with",arg2)))),

 'insert-01': # ARG0:inserter / ARG1:entity inserted / ARG2:inserted where [insert.xml]
   LexSem("V","insert",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("insert"),arg1,pp("in",arg2)))),

 'insinuate-01': # ARG0:suggester / ARG1:thing insinuated [insinuate.xml]
   LexSem("V","insinuate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("insinuate"),arg1))),

 'insist-01': # ARG0:insister / ARG1:thing insisted, required [insist.xml]
   LexSem("V","insist",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("insist"),pp("on",arg1)))),

 'inspect-01': # ARG0:examiner / ARG1:entity inspected / ARG2:inspected for what? [inspect.xml]
   LexSem("V","inspect",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("inspect"),arg1,pp("for",arg2)))),

 'inspire-01': # ARG0:causer of inspiration / ARG1:person, thing inspired / ARG2:inspired action [inspire.xml]
   LexSem("V","inspire",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("inspire"),arg1,pp("to",arg2)))),

 'inspire-02': # ARG0:Agent, breather / ARG1:Air, vapor inhaled [inspire.xml]
   LexSem("V","inspire",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("inspire"),pp("of",arg1)))),

 'inspissate-01': # ARG0:Person making something thicker / ARG1:Thing made thicker / ARG2:Thickening ingredient or process used to make thick [inspissate.xml]
   LexSem("V","inspissate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("inspissate"),arg1,pp("by",arg2)))),

 'install-01': # ARG0:putter / ARG1:thing put / ARG2:installed where or as [install.xml]
   LexSem("V","install",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("install"),arg1,pp("at",arg2)))),

 'instigate-01': # ARG0:instigator / ARG1:reaction [instigate.xml]
   LexSem("V","instigate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("instigate"),arg1))),

 'instill-01': # ARG0:putter / ARG1:put into what / ARG2:what put in, substance [instill.xml]
   LexSem("V","instill",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("instill"),pp("in",arg1),arg2))),

 'institute-01': # ARG0:agent, setter / ARG1:thing set / ARG2:attribute [institute.xml]
   LexSem("V","institute",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("institute"),arg1,pp("as",arg2)))),

 'institutionalize-02': # ARG0:agent / ARG1:thing institutionalized [institute.xml]
   LexSem("V","institutionalize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("institutionalize"),arg1))),

 'instruct-01': # ARG0:instructor / ARG1:impelled agent / ARG2:the instruction itself / ARG3:subject matter the instruction relates to [instruct.xml]
   LexSem("V","instruct",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("instruct"),arg1,pp("to",arg2),pp("on",arg3)))),

 'insulate-01': # ARG0:agentive protector / ARG1:protected / ARG2:protected from / ARG3:instrument, insulation itself [insulate.xml]
   LexSem("V","insulate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("insulate"),arg1,pp("from",arg2),pp("with",arg3)))),

 'insulate-02': # ARG0:causer of isolation / ARG1:isolated / ARG2:isolated from [insulate.xml]
   LexSem("V","insulate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("insulate"),arg1,arg2))),

 'insult-01': # ARG0:insulter / ARG1:insulted [insult.xml]
   LexSem("V","insult",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("insult"),arg1))),

 'insure-01': # ARG0:entity making guarantee / ARG1:guarantee / ARG2:benefactive, guaranteed-to [insure.xml]
   LexSem("V","insure",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("insure"),arg1,arg2))),

 'insure-02': # ARG0:insurance company / ARG1:thing insured / ARG2:for how much / ARG3:beneficiary / ARG4:danger [insure.xml]
   LexSem("V","insure",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("insure"),arg1,pp("up",arg2),pp("for",arg3),pp("against",arg4)))),

 'integrate-01': # ARG0:mixer, integrater / ARG1:first (or all) thing(s) being integrated / ARG2:integrated into (second thing) / ARG3:attribute of arg1 that is actually undergoing integration [integrate.xml]
   LexSem("V","integrate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("integrate"),arg1,pp("into",arg2),arg3))),

 'intend-01': # ARG0:planner / ARG1:intent, thing planned [intend.xml]
   LexSem("V","intend",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("intend"),pp("to",arg1)))),

 'intensify-01': # ARG0:causer of intensity / ARG1:thing becoming intense / ARG2:instrument, if separate from agent [intensify.xml]
   LexSem("V","intensify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("intensify"),arg1,pp("by",arg2)))),

 'interact-01': # ARG0:one participant / ARG1:other participant(s) / ARG2:domain of the interaction [interact.xml]
   LexSem("V","interact",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("interact"),pp("with",arg1),arg2))),

 'intercede-01': # ARG0:intercessor / ARG1:resolution between/among/with whom / ARG2:on behalf of [intercede.xml]
   LexSem("V","intercede",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("intercede"),pp("with",arg1),pp("for",arg2)))),

 'intercept-01': # ARG0:interceptor / ARG1:entity intercepted / ARG2:intended goal/recipient/proposition / ARG3:source intercepted from [intercept.xml]
   LexSem("V","intercept",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("intercept"),arg1,arg2,pp("from",arg3)))),

 'interchange-01': # ARG0:Exchanger / ARG1:Thing exchanged / ARG2:Exchanged for, put in place of [interchange.xml]
   LexSem("V","interchange",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("interchange"),arg1,pp("with",arg2)))),

 'interconnect-01': # ARG0:agent / ARG1:things connected [interconnect.xml]
   LexSem("V","interconnect",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("interconnect"),arg1))),

 'interdict-01': # ARG0:forbidding authority / ARG1:action/theme forbidden / ARG2:entity prohibited from enacting/participating in arg1 [interdict.xml]
   LexSem("V","interdict",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("interdict"),arg1,arg2))),

 'interest-01': # ARG0:agent, causer of interest / ARG1:interested entity / ARG2:interested in, interesting thing (non-agentive adj subjects, see ex) [interest.xml]
   LexSem("V","interest",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("interest"),arg1,pp("in",arg2)))),

 'interfere-01': # ARG0:agent / ARG1:interfere with/in [interfere.xml]
   LexSem("V","interfere",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("interfere"),pp("with",arg1)))),

 'interject-01': # ARG0:interjector, speaker / ARG1:utterance / ARG2:context [interject.xml]
   LexSem("V","interject",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("interject"),arg1,pp("into",arg2)))),

 'interlace-01': # ARG0:cause of interlacing / ARG1:first or all things woven together / ARG2:other thing, or end state [interlace.xml]
   LexSem("V","interlace",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("interlace"),arg1,arg2))),

 'interlard-01': # ARG0:interweaver / ARG1:thing woven / ARG2:with what [interlard.xml]
   LexSem("V","interlard",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("interlard"),arg1,pp("with",arg2)))),

 'interleave-01': # ARG0:interleave-er / ARG1:thing interleaved / ARG2:with what? [interleave.xml]
   LexSem("V","interleave",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("interleave"),pp("into",arg1),arg2))),

 'interlink-01': # ARG0:agent, entity doing linking / ARG1:patient, thing(s) being tied / ARG2:instrument, linking material [interlink.xml]
   LexSem("V","interlink",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("interlink"),arg1,pp("with",arg2)))),

 'interlope-01': # ARG0:trespasser [interlope.xml]
   LexSem("V","interlope",[":ARG0"],lambda arg0:S(arg0,VP(V("interlope")))),

 'intermarry-01': # ARG0:causer (if available) / ARG1:one half / ARG2:second half [intermarry.xml]
   LexSem("V","intermarry",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("intermarry"),arg1,pp("with",arg2)))),

 'intermingle-01': # ARG0:first or all thing(s) mingling / ARG1:additional things, if syntactically separate [intermingle.xml]
   LexSem("V","intermingle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("intermingle"),arg1))),

 'intermingle-02': # ARG0:intentional agent / ARG1:first (or all) ingredient(s) / ARG2:additional ingredients, when syntactically separate [intermingle.xml]
   LexSem("V","intermingle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("intermingle"),arg1,pp("to",arg2)))),

 'intermix-01': # ARG0:agent, entity mixing / ARG1:entity mixed / ARG2:entity mixed with [intermix.xml]
   LexSem("V","intermix",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("intermix"),arg1,pp("with",arg2)))),

 'intern-01': # ARG0:intern / ARG1:employer / ARG2:specific job description [intern.xml]
   LexSem("V","intern",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("intern"),arg1,arg2))),

 'intern-02': # ARG0:authority / ARG1:prisoner / ARG2:term / ARG3:cause of internment [intern.xml]
   LexSem("V","intern",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("intern"),arg1,arg2,arg3))),

 'internalize-01': # ARG0:acceptor / ARG1:thing accepted / ARG2:attribute [internalize.xml]
   LexSem("V","internalize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("internalize"),arg1,pp("as",arg2)))),

 'interpolate-01': # ARG0:causer, agent / ARG1:thing interpolating / ARG2:interpolated by or with / ARG3:start point / ARG4:end point [interpolate.xml]
   LexSem("V","interpolate",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("interpolate"),arg1,pp("with",arg2),pp("from",arg3),pp("to",arg4)))),

 'interpose-01': # ARG0:agent / ARG1:thing being interposed / ARG2:interposed into [interpose.xml]
   LexSem("V","interpose",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("interpose"),arg1,pp("between",arg2)))),

 'interpose-02': # ARG0:Speaker / ARG1:utterance / ARG2:hearer [interpose.xml]
   LexSem("V","interpose",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("interpose"),arg1,arg2))),

 'interpret-01': # ARG0:interpreter / ARG1:entity interpreted / ARG2:attribute of arg1 [interpret.xml]
   LexSem("V","interpret",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("interpret"),arg1,pp("as",arg2)))),

 'interrelate-01': # ARG0:causer / ARG1:related item(s) / ARG2:more related item(s) [interrelate.xml]
   LexSem("V","interrelate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("interrelate"),arg1,pp("to",arg2)))),

 'interrogate-01': # ARG0:asker / ARG1:question or thing in doubt / ARG2:entity asked, hearer [interrogate.xml]
   LexSem("V","interrogate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("interrogate"),pp("about",arg1),arg2))),

 'interrupt-01': # ARG0:interrupter / ARG1:thing interrupted / ARG2:utterance [interrupt.xml]
   LexSem("V","interrupt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("interrupt"),arg1,arg2))),

 'intersect-01': # ARG0:focus, first mention of entity intersecting another / ARG1:thing arg0 is intersecting, entity divided in two [intersect.xml]
   LexSem("V","intersect",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("intersect"),pp("with",arg1)))),

 'intersperse-01': # ARG0:arranger, placer / ARG1:entity interspersed / ARG2:entity interspersed with [intersperse.xml]
   LexSem("V","intersperse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("intersperse"),arg1,pp("with",arg2)))),

 'intertwine-01': # ARG0:causer of joining / ARG1:entity intertwined [intertwine.xml]
   LexSem("V","intertwine",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("intertwine"),arg1))),

 'intervene-01': # ARG0:nosy individual / ARG1:intervene in [intervene.xml]
   LexSem("V","intervene",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("intervene"),pp("in",arg1)))),

 'interview-01': # ARG0:interviewer / ARG1:interviewee / ARG2:purpose or subject matter of interview [interview.xml]
   LexSem("V","interview",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("interview"),arg1,pp("for",arg2)))),

 'interweave-01': # ARG0:interweaver / ARG1:interweave into / ARG2:interweave what? [interweave.xml]
   LexSem("V","interweave",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("interweave"),arg1,pp("with",arg2)))),

 'intimate-01': # ARG0:suggester / ARG1:suggestion / ARG2:hearer [intimate.xml]
   LexSem("V","intimate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("intimate"),arg1,pp("to",arg2)))),

 'intimidate-01': # ARG0:intimidating entity / ARG1:entity intimidated [intimidate.xml]
   LexSem("V","intimidate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("intimidate"),arg1))),

 'intone-01': # ARG0:speaker / ARG1:utterance [intone.xml]
   LexSem("V","intone",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("intone"),arg1))),

 'intoxicate-01': # ARG0:captivating thing / ARG1:experiencer, thing captivated [intoxicate.xml]
   LexSem("V","intoxicate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("intoxicate"),arg1))),

 'intrigue-01': # ARG0:agent, causer of interest / ARG1:interested entity / ARG2:instrument [intrigue.xml]
   LexSem("V","intrigue",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("intrigue"),arg1,arg2))),

 'introduce-01': # ARG0:entity making introduction / ARG1:entity being introduced / ARG2:entity being introduced TO [introduce.xml]
   LexSem("V","introduce",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("introduce"),arg1,pp("to",arg2)))),

 'introduce-02': # ARG0:implementer, starter / ARG1:thing being brought up / ARG2:medium, where arg1 is brought up into [introduce.xml]
   LexSem("V","introduce",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("introduce"),arg1,pp("into",arg2)))),

 'intrude-01': # ARG0:putter / ARG1:thing put / ARG2:where put [intrude.xml]
   LexSem("V","intrude",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("intrude"),arg1,pp("into",arg2)))),

 'inundate-01': # ARG0:inundator / ARG1:entity inundated / ARG2:entity inundated with [inundate.xml]
   LexSem("V","inundate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("inundate"),arg1,pp("with",arg2)))),

 'inure-01': # ARG0:rare causal agent / ARG1:entity that becomes habituated to something unpleasant / ARG2:unpleasantness that arg1 has to get used to [inure.xml]
   LexSem("V","inure",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("inure"),arg1,arg2))),

 'invade-01': # ARG0:invader / ARG1:place invaded [invade.xml]
   LexSem("V","invade",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("invade"),arg1))),

 'invaginate-01': # ARG1:Tissue invaginating / ARG2:GOL/DIR, invaginating into what [invaginate.xml]
   LexSem("V","invaginate",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("invaginate"),pp("into",arg2)))),

 'invalidate-01': # ARG0:demonstrator of invalidity / ARG1:invalid thing [invalidate.xml]
   LexSem("V","invalidate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("invalidate"),arg1))),

 'inveigle-01': # ARG0:enticer / ARG1:enticed thing(s) or person(s) / ARG2:enticed into what [inveigle.xml]
   LexSem("V","inveigle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("inveigle"),arg1,arg2))),

 'invent-01': # ARG0:creator / ARG1:thing created [invent.xml]
   LexSem("V","invent",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("invent"),arg1))),

 'invert-01': # ARG0:agent, turner / ARG1:thing now upside down [invert.xml]
   LexSem("V","invert",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("invert"),arg1))),

 'invest-01': # ARG0:investor / ARG1:thing invested / ARG2:invested in [invest.xml]
   LexSem("V","invest",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("invest"),arg1,pp("in",arg2)))),

 'investigate-01': # ARG0:examiner / ARG1:examined / ARG2:examined for [investigate.xml]
   LexSem("V","investigate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("investigate"),arg1,pp("for",arg2)))),

 'invigorate-01': # ARG0:agent, cause / ARG1:patient, entity freshened / ARG2:instrument [invigorate.xml]
   LexSem("V","invigorate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("invigorate"),arg1,arg2))),

 'invite-01': # ARG0:inviter / ARG1:invited / ARG2:invited-to [invite.xml]
   LexSem("V","invite",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("invite"),arg1,pp("to",arg2)))),

 'invoice-01': # ARG0:invoicer, one who bills / ARG1:money, amount / ARG2:invoiced, one who gets billed / ARG3:cause [invoice.xml]
   LexSem("V","invoice",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("invoice"),arg1,arg2,pp("for",arg3)))),

 'invoke-01': # ARG0:invoker / ARG1:invoked [invoke.xml]
   LexSem("V","invoke",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("invoke"),arg1))),

 'involve-01': # ARG0:causer of inclusion / ARG1:theme, thing being included into a group / ARG2:group [involve.xml]
   LexSem("V","involve",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("involve"),arg1,arg2))),

 'iodize-01': # ARG0:agent, treater / ARG1:thing iodized / ARG2:instrument [iodize.xml]
   LexSem("V","iodize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("iodize"),arg1,arg2))),

 'ionize-01': # ARG0:cause of ionization / ARG1:entity ionized [ionize.xml]
   LexSem("V","ionize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ionize"),arg1))),

 'irk-01': # ARG0:causer of annoyance / ARG1:entity getting annoyed / ARG2:instrument, if separate from arg0 [irk.xml]
   LexSem("V","irk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("irk"),arg1,arg2))),

 'iron-02': # ARG0:ironer / ARG1:flat thing / ARG2:instrument [iron.xml]
   LexSem("V","iron",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("iron"),arg1,arg2))),

 'iron-out-01': # ARG0:entities working something out / ARG1:thing ironed out [iron.xml]
   LexSem("V","iron",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("iron"),Adv("out"),arg1))),

 'irradiate-01': # ARG0:exposer / ARG1:thing exposed / ARG2:radiation [irradiate.xml]
   LexSem("V","irradiate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("irradiate"),arg1,pp("with",arg2)))),

 'irrigate-01': # ARG0:provider of water / ARG1:recipient of water [irrigate.xml]
   LexSem("V","irrigate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("irrigate"),arg1))),

 'irritate-01': # ARG0:Stimulus / ARG1:experiencer [irritate.xml]
   LexSem("V","irritate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("irritate"),arg1))),

 'irrupt-01': # ARG1:Irruptor, thing exploding/appearing/growing / ARG2:Substance spewing forth from irruption [irrupt.xml]
   LexSem("V","irrupt",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("irrupt"),pp("into",arg2)))),

 'isolate-01': # ARG0:entity causing isolation / ARG1:entity isolated / ARG2:entity that patient was isolated from [isolate.xml]
   LexSem("V","isolate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("isolate"),arg1,pp("from",arg2)))),

 'isomerize-01': # ARG0:intentional agent of isomerization (e.g. scientist) / ARG1:thing isomerized / ARG2:instrument / ARG3:resulting isomer [isomerize.xml]
   LexSem("V","isomerize",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("isomerize"),arg1,arg2,arg3))),

 'issue-01': # ARG0:issuer / ARG1:thing issued / ARG2:issued to / ARG3:attribute, issued as or at [issue.xml]
   LexSem("V","issue",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("issue"),arg1,pp("to",arg2),pp("at",arg3)))),

 'itch-01': # ARG1:itchy thing [itch.xml]
   LexSem("V","itch",[":ARG1"],lambda arg1:S(arg1,VP(V("itch")))),

 'itch-02': # ARG0:wanter / ARG1:desired action [itch.xml]
   LexSem("V","itch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("itch"),arg1))),

 'itemize-01': # ARG0:lister / ARG1:items [itemize.xml]
   LexSem("V","itemize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("itemize"),arg1))),

 'iterate-01': # ARG0:speaker / ARG1:utterance or action that is repeated / ARG2:listener when arg 1 is an utterance / ARG3:number of repetitions [iterate.xml]
   LexSem("V","iterate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("iterate"),arg1,arg2,arg3))),

 'jab-01': # ARG0:hitter / ARG1:thing hit / ARG2:instrument of hitting [jab.xml]
   LexSem("V","jab",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("jab"),pp("at",arg1),pp("with",arg2)))),

 'jab-02': # ARG0:cause of motion / ARG1:entity in motion / ARG2:path [jab.xml]
   LexSem("V","jab",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("jab"),arg1,arg2))),

 'jabber-01': # ARG0:speaker / ARG1:utterance, sound / ARG2:listener, recipient [jabber.xml]
   LexSem("V","jabber",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("jabber"),arg1,pp("to",arg2)))),

 'jack-up-01': # ARG0:raiser, agent / ARG1:entity raised [jack.xml]
   LexSem("V","jack",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("jack"),Adv("up"),arg1))),

 'jade-01': # ARG0:causer of jadedness / ARG1:jaded entity / ARG2:Instrument or Manner if separate from arg 0 [jade.xml]
   LexSem("V","jade",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("jade"),arg1,arg2))),

 'jail-01': # ARG0:court, judge, jury / ARG1:criminal / ARG2:term / ARG3:cause, misdeed [jail.xml]
   LexSem("V","jail",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("jail"),arg1,pp("for",arg2),pp("for",arg3)))),

 'jam-01': # ARG0:packer, agent / ARG1:entity jammed / ARG2:location, destination [jam.xml]
   LexSem("V","jam",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("jam"),arg1,arg2))),

 'jam-02': # ARG0:player of instrument / ARG1:music listener / ARG2:music [jam.xml]
   LexSem("V","jam",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("jam"),arg1,pp("to",arg2)))),

 'jam-03': # ARG0:dancing/moving entity [jam.xml]
   LexSem("V","jam",[":ARG0"],lambda arg0:S(arg0,VP(V("jam")))),

 'jangle-01': # ARG0:causal agent / ARG1:emitter of jangling sound, thing jangled [jangle.xml]
   LexSem("V","jangle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("jangle"),arg1))),

 'japan-01': # ARG0:causer of coloration / ARG1:thing with color / ARG2:the color itself [japan.xml]
   LexSem("V","japan",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("japan"),arg1,arg2))),

 'japanize-01': # ARG0:agent/cause / ARG1:thing becoming more Japanese-like [japanize.xml]
   LexSem("V","japanize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("japanize"),arg1))),

 'jar-01': # ARG0:causer / ARG1:Experiencer [jar.xml]
   LexSem("V","jar",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("jar"),arg1))),

 'jeep-01': # ARG0:agent, driver (transitive subject) / ARG1:thing moved (intransitive subject, transitive object) / ARG2:locations, or start point / ARG3:destination [jeep.xml]
   LexSem("V","jeep",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("jeep"),arg1,arg2,pp("to",arg3)))),

 'jeer-01': # ARG0:jeer-er / ARG1:jeered at [jeer.xml]
   LexSem("V","jeer",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("jeer"),pp("at",arg1)))),

 'jell-01': # ARG1:thing becoming jelly-like [jell.xml]
   LexSem("V","jell",[":ARG1"],lambda arg1:S(arg1,VP(V("jell")))),

 'jeopardize-01': # ARG0:agent, entity making a threat / ARG1:'benefactive', entity threatened [jeopardize.xml]
   LexSem("V","jeopardize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("jeopardize"),arg1))),

 'jerk-01': # ARG0:jerker / ARG1:thing pulled (on) / ARG2:direction [jerk.xml]
   LexSem("V","jerk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("jerk"),arg1,arg2))),

 'jest-01': # ARG0:joker / ARG1:other party joking, joke with / ARG2:joke [jest.xml]
   LexSem("V","jest",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("jest"),arg1,arg2))),

 'jet-off-01': # ARG1:entity in motion / ARG2:destination [jet.xml]
   LexSem("V","jet",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("jet"),Adv("off"),pp("to",arg2)))),

 'jettison-01': # ARG0:agent, entity getting rid of something / ARG1:thing gotten rid of [jettison.xml]
   LexSem("V","jettison",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("jettison"),arg1))),

 'jibe-01': # ARG0:agreer / ARG1:proposition / ARG2:other entity agreeing [jibe.xml]
   LexSem("V","jibe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("jibe"),arg1,pp("with",arg2)))),

 'jig-01': # ARG0:dancers / ARG1:explicit mention of dance itself (rare), or path [jig.xml]
   LexSem("V","jig",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("jig"),arg1))),

 'jiggle-01': # ARG0:causer of jiggling / ARG1:thing jiggling [jiggle.xml]
   LexSem("V","jiggle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("jiggle"),arg1))),

 'jilt-01': # ARG0:rejecter / ARG1:rejected lover / ARG3:new lover [jilt.xml]
   LexSem("V","jilt",[":ARG0",":ARG1",":ARG3"],lambda arg0,arg1,arg3:S(arg0,VP(V("jilt"),arg1,pp("for",arg3)))),

 'jingle-01': # ARG0:causal agent / ARG1:emitter of jingling sound [jingle.xml]
   LexSem("V","jingle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("jingle"),arg1))),

 'jinx-01': # ARG0:causer of bad luck / ARG1:unlucky schmuck [jinx.xml]
   LexSem("V","jinx",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("jinx"),arg1))),

 'jitterbug-01': # ARG0:dancers / ARG1:explicit mention of dance itself (rare), or path [jitterbug.xml]
   LexSem("V","jitterbug",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("jitterbug"),arg1))),

 'jive-01': # ARG0:dancer [jive.xml]
   LexSem("V","jive",[":ARG0"],lambda arg0:S(arg0,VP(V("jive")))),

 'jockey-01': # ARG0:entity maneuvering, manipulating, jockey / ARG1:entity being moved, manipulated / ARG2:Jockeying for what? End goal of movement, manipulation [jockey.xml]
   LexSem("V","jockey",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("jockey"),pp("for",arg1),pp("into",arg2)))),

 'jog-01': # ARG0:runner / ARG1:path [jog.xml]
   LexSem("V","jog",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("jog"),arg1))),

 'jog-02': # ARG0:agent/cause of remembering / ARG1:usually "__'s memory" / ARG2:explicit thing being remembered [jog.xml]
   LexSem("V","jog",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("jog"),arg1,arg2))),

 'joggle-01': # ARG0:agent, cause / ARG1:thing joggling [joggle.xml]
   LexSem("V","joggle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("joggle"),arg1))),

 'join-01': # ARG0:agent, entity doing the tying / ARG1:first thing being tied / ARG2:second thing, tied to what / ARG3:instrument, string [join.xml]
   LexSem("V","join",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("join"),arg1,pp("to",arg2),pp("with",arg3)))),

 'join-04': # ARG0:agent, person joining / ARG1:entity joined / ARG2:secondary predication (with something, like news, for example) [join.xml]
   LexSem("V","join",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("join"),arg1,pp("with",arg2)))),

 'join-in-05': # ARG0:agent, entity joining / ARG1:group joined [join.xml]
   LexSem("V","join",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("join"),Adv("in"),arg1))),

 'join-up-02': # ARG0:agent, entity joining / ARG1:group joined [join.xml]
   LexSem("V","join",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("join"),Adv("up"),pp("with",arg1)))),

 'joke-01': # ARG0:joker / ARG1:other party joking, joke with / ARG2:joke [joke.xml]
   LexSem("V","joke",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("joke"),pp("with",arg1),pp("about",arg2)))),

 'joke-around-02': # ARG0:joker / ARG1:other party joking, joke with / ARG2:joke [joke.xml]
   LexSem("V","joke",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("joke"),Adv("around"),arg1,arg2))),

 'jollify-01': # ARG0:comforter, cause of jolliness / ARG1:patient, comforted / ARG2:instrument or manner, if separate from arg 0 [jollify.xml]
   LexSem("V","jollify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("jollify"),arg1,pp("with",arg2)))),

 'jolt-01': # ARG0:jolter / ARG1:person jolted / ARG2:instrument, if separate from agent [jolt.xml]
   LexSem("V","jolt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("jolt"),arg1,pp("with",arg2)))),

 'jolt-02': # ARG0:jolter / ARG1:impelled agent / ARG2:impelled action [jolt.xml]
   LexSem("V","jolt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("jolt"),arg1,pp("into",arg2)))),

 'jostle-01': # ARG0:fighters / ARG1:prize [jostle.xml]
   LexSem("V","jostle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("jostle"),pp("for",arg1)))),

 'jot-01': # ARG0:writer / ARG1:thing written / ARG2:benefactive [jot.xml]
   LexSem("V","jot",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("jot"),arg1,arg2))),

 'jot-down-02': # ARG0:writer / ARG1:thing written / ARG2:benefactive [jot.xml]
   LexSem("V","jot",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("jot"),Adv("down"),arg1,arg2))),

 'journey-01': # ARG0:traveller [journey.xml]
   LexSem("V","journey",[":ARG0"],lambda arg0:S(arg0,VP(V("journey")))),

 'joust-01': # ARG0:knight in shining armor / ARG1:target [joust.xml]
   LexSem("V","joust",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("joust"),pp("at",arg1)))),

 'judge-01': # ARG0:judge / ARG1:judged / ARG2:judgement, attribute of arg1 / ARG3:on what grounds [judge.xml]
   LexSem("V","judge",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("judge"),arg1,pp("to",arg2),pp("from",arg3)))),

 'jug-01': # ARG0:jugger, agent / ARG1:entity jugged [jug.xml]
   LexSem("V","jug",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("jug"),arg1))),

 'juggle-01': # ARG0:juggler / ARG1:things juggled [juggle.xml]
   LexSem("V","juggle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("juggle"),arg1))),

 'jumble-01': # ARG0:mixer / ARG1:things mixed together [jumble.xml]
   LexSem("V","jumble",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("jumble"),arg1))),

 'jump-01': # ARG1:thing jumping / ARG2:EXT, amount jumped by / ARG3:start point / ARG4:end point or end state of arg1 [jump.xml]
   LexSem("V","jump",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("jump"),arg2,pp("from",arg3),pp("to",arg4)))),

 'jump-02': # ARG0:jumper / ARG1:opportunity [jump.xml]
   LexSem("V","jump",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("jump"),pp("to",arg1)))),

 'jump-03': # ARG0:agent of motion / ARG1:entity in motion, if in addition to arg0 / ARG2:thing jumped over [jump.xml]
   LexSem("V","jump",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("jump"),arg1,pp("of",arg2)))),

 'jump-06': # ARG0:entity escaping / ARG1:entity escaped from (e.g. bail/trail); or idiomatically     'jump ship' [jump.xml]
   LexSem("V","jump",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("jump"),arg1))),

 'jump-07': # ARG0:jumper / ARG1:idiomatic expression [jump.xml]
   LexSem("V","jump",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("jump"),arg1))),

 'jump-08': # ARG0:thug / ARG1:victim [jump.xml]
   LexSem("V","jump",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("jump"),arg1))),

 'jump-in-04': # ARG0:jumper / ARG1:opportunity [jump.xml]
   LexSem("V","jump",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("jump"),Adv("in"),pp("to",arg1)))),

 'jump-up-05': # ARG0:jumper [jump.xml]
   LexSem("V","jump",[":ARG0"],lambda arg0:S(arg0,VP(V("jump"),Adv("up")))),

 'jumpstart-01': # ARG0:jump-starter (agent/cause) / ARG1:car with a dead battery getting a jump / ARG2:instrument (outside power source), if separate from arg0 [jumpstart.xml]
   LexSem("V","jumpstart",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("jumpstart"),arg1,pp("with",arg2)))),

 'junk-01': # ARG0:discarder, agent / ARG1:entity junked [junk.xml]
   LexSem("V","junk",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("junk"),arg1))),

 'junket-01': # ARG0:traveler / ARG1:travel destination [junket.xml]
   LexSem("V","junket",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("junket"),pp("in",arg1)))),

 'junket-02': # ARG0:Feaster or caterer / ARG1:smorgasbord [junket.xml]
   LexSem("V","junket",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("junket"),pp("on",arg1)))),

 'justify-01': # ARG0:justifier / ARG1:decision or attitude being shown to be right / ARG2:explicit instrument / ARG3:secondary predication / ARG4:benefactive, justified to [justify.xml]
   LexSem("V","justify",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("justify"),arg1,arg2,pp("as",arg3),pp("to",arg4)))),

 'jut-01': # ARG1:thing sticking out / ARG2:into what [jut.xml]
   LexSem("V","jut",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("jut"),pp("into",arg2)))),

 'jut-out-02': # ARG1:thing sticking out / ARG2:into what [jut.xml]
   LexSem("V","jut",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("jut"),Adv("out"),arg2))),

 'juxtapose-01': # ARG0:entity causing juxtaposition, agent / ARG1:entity juxtaposed / ARG2:entity juxtaposed with [juxtapose.xml]
   LexSem("V","juxtapose",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("juxtapose"),arg1,pp("with",arg2)))),

 'kayak-01': # ARG0:agent, driver (transitive subject) / ARG1:thing moved (intransitive subject, transitive object) / ARG2:locations, or start point / ARG3:destination [kayak.xml]
   LexSem("V","kayak",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("kayak"),arg1,pp("around",arg2),arg3))),

 'kayo-01': # ARG0:hitter, agent / ARG1:sucker / ARG2:instrument [kayo.xml]
   LexSem("V","kayo",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("kayo"),arg1,pp("with",arg2)))),

 'keen-01': # ARG0:speaker / ARG1:entity wailed about [keen.xml]
   LexSem("V","keen",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("keen"),arg1))),

 'keep-01': # ARG0:Keeper / ARG1:thing kept [keep.xml]
   LexSem("V","keep",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("keep"),arg1))),

 'keep-02': # ARG0:causer of continued action / ARG1:continued entity / ARG2:continued state or action [keep.xml]
   LexSem("V","keep",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("keep"),arg1,arg2))),

 'keep-03': # ARG0:agenty thing / ARG1:noun / ARG2:prepositional object [keep.xml]
   LexSem("V","keep",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("keep"),arg1,pp("with",arg2)))),

 'keep-04': # ARG0:causer of separation / ARG1:one noun / ARG2:other noun [keep.xml]
   LexSem("V","keep",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("keep"),arg1,pp("from",arg2)))),

 'keep-06': # ARG1:thing conforming / ARG2:conformed-to [keep.xml]
   LexSem("V","keep",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("keep"),pp("with",arg2)))),

 'keep-LV': #  [keep.xml]
   LexSem("V","keep",[],lambda :S(VP(V("keep")))),

 'keep-on-08': # ARG0:causer of continuation, volitional / ARG1:continued entity / ARG2:continued event or state [keep.xml]
   LexSem("V","keep",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("keep"),Adv("on"),arg1,arg2))),

 'keep-up-05': # ARG0:maintainer of position / ARG1:relative to what [keep.xml]
   LexSem("V","keep",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("keep"),Adv("up"),pp("with",arg1)))),

 'keep-up-10': # ARG0:agent / ARG1:thing maintained/sustained / ARG2:instrument [keep.xml]
   LexSem("V","keep",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("keep"),Adv("up"),arg1,arg2))),

 'keep_eye_out-02': # ARG0:watcher out / ARG1:thing watched out for [eye.xml]
   LexSem("V","keep",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("keep"),pp("for",arg1)))),

 'keep_in_mind-08': # ARG0:causal agent (rare) / ARG1:rememberer / ARG2:thought [mind.xml]
   LexSem("V","bear",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("bear"),arg1,arg2))),

 'kennel-01': # ARG0:kenneler / ARG1:thing kenneled / ARG2:kennel, location [kennel.xml]
   LexSem("V","kennel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("kennel"),arg1,arg2))),

 'key-01': # ARG0:entity establishing comparison, agent / ARG1:entity adjusted / ARG2:entity adjusted to [key.xml]
   LexSem("V","key",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("key"),arg1,pp("to",arg2)))),

 'key-in-03': # ARG0:agent / ARG1:thing entered, code / ARG2:destination, where code is entered [key.xml]
   LexSem("V","key",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("key"),Adv("in"),arg1,pp("on",arg2)))),

 'kick-01': # ARG0:kicker / ARG1:thing kicked / ARG2:instrument (defaults to foot) [kick.xml]
   LexSem("V","kick",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("kick"),arg1,pp("with",arg2)))),

 'kick-in-02': # ARG0:causer of beginning / ARG1:thing beginning [kick.xml]
   LexSem("V","kick",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("kick"),Adv("in"),arg1))),

 'kick-in-03': # ARG0:contributor / ARG1:contribution / ARG2:given to [kick.xml]
   LexSem("V","kick",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("kick"),Adv("in"),arg1,pp("to",arg2)))),

 'kick-off-04': # ARG0:agent, beginner / ARG1:theme, thing begun / ARG2:instrument [kick.xml]
   LexSem("V","kick",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("kick"),Adv("off"),arg1,pp("with",arg2)))),

 'kick-out-05': # ARG0:agent / ARG1:person being forced to leave / ARG2:kicked out of where [kick.xml]
   LexSem("V","kick",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("kick"),Adv("out"),arg1,arg2))),

 'kid-01': # ARG0:joker / ARG1:hearer / ARG2:topic [kid.xml]
   LexSem("V","kid",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("kid"),arg1,arg2))),

 'kidnap-01': # ARG0:kidnapper, agent / ARG1:person kidnapped [kidnap.xml]
   LexSem("V","kidnap",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("kidnap"),arg1))),

 'kill-01': # ARG0:killer / ARG1:corpse / ARG2:instrument [kill.xml]
   LexSem("V","kill",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("kill"),arg1,pp("by",arg2)))),

 'kill-03': # ARG0:entity succeeding / ARG1:task / ARG2:fixed: "it" [kill.xml]
   LexSem("V","kill",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("kill"),pp("in",arg1),arg2))),

 'kill-04': # ARG0:time-spender / ARG1:time / ARG2:activity [kill.xml]
   LexSem("V","kill",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("kill"),arg1,arg2))),

 'kill-off-02': # ARG0:killer / ARG1:corpse / ARG2:instrument [kill.xml]
   LexSem("V","kill",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("kill"),Adv("off"),arg1,arg2))),

 'kindle-01': # ARG0:firestarter / ARG1:fire [kindle.xml]
   LexSem("V","kindle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("kindle"),arg1))),

 'kiss-01': # ARG0:kisser / ARG1:kissed / ARG2:secondary predication, i.e. goodbye, goodnight, etc. [kiss.xml]
   LexSem("V","kiss",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("kiss"),arg1,arg2))),

 'kitten-01': # ARG0:mother / ARG1:kitten [kitten.xml]
   LexSem("V","kitten",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("kitten"),arg1))),

 'kiyi-01': # ARG0:animal making the noise [kiyi.xml]
   LexSem("V","ki-yi",[":ARG0"],lambda arg0:S(arg0,VP(V("ki-yi")))),

 'knead-01': # ARG0:kneader / ARG1:dough / ARG2:loaf [knead.xml]
   LexSem("V","knead",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("knead"),arg1,pp("into",arg2)))),

 'knee-01': # ARG0:hitter / ARG1:victim [knee.xml]
   LexSem("V","knee",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("knee"),arg1))),

 'kneel-01': # ARG0:kneeler [kneel.xml]
   LexSem("V","kneel",[":ARG0"],lambda arg0:S(arg0,VP(V("kneel")))),

 'knell-01': # ARG1:ringing thing / ARG2:topic, announce what [knell.xml]
   LexSem("V","knell",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("knell"),arg2))),

 'knife-01': # ARG0:agent, stabber - animate only! / ARG1:thing knifed / ARG2:instrument, knife, very rare [knife.xml]
   LexSem("V","knife",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("knife"),arg1,arg2))),

 'knight-01': # ARG0:knighter / ARG1:knighted [knight.xml]
   LexSem("V","knight",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("knight"),arg1))),

 'knit-01': # ARG0:builder / ARG1:construction / ARG2:material, start state / ARG4:end state or attribute of arg1 [knit.xml]
   LexSem("V","knit",[":ARG0",":ARG1",":ARG2",":ARG4"],lambda arg0,arg1,arg2,arg4:S(arg0,VP(V("knit"),arg1,arg2,arg4))),

 'knit-02': # ARG1:bones [knit.xml]
   LexSem("V","knit",[":ARG1"],lambda arg1:S(arg1,VP(V("knit")))),

 'knit-03': # ARG0:agent doing the tying / ARG1:patient, thing(s) being tied [knit.xml]
   LexSem("V","knit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("knit"),arg1))),

 'knock-01': # ARG0:agent, hitter - animate only! / ARG1:thing hit / ARG2:instrument, thing hit by or with [knock.xml]
   LexSem("V","knock",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("knock"),pp("on",arg1),pp("with",arg2)))),

 'knock-04': # ARG0:cutter / ARG1:thing cut / ARG2:medium, source / ARG3:instrument [knock.xml]
   LexSem("V","knock",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("knock"),arg1,pp("off",arg2),arg3))),

 'knock-back-07': # ARG0:knocker / ARG1:drink [knock.xml]
   LexSem("V","knock",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("knock"),Adv("back"),arg1))),

 'knock-down-02': # ARG0:knocker / ARG1:thing knocked and going down / ARG2:EXT / ARG3:start point / ARG4:end point / ARG5:instrument [knock.xml]
   LexSem("V","knock",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg0,arg1,arg2,arg3,arg4,arg5:S(arg0,VP(V("knock"),Adv("down"),arg1,arg2,arg3,pp("to",arg4),pp("with",arg5)))),

 'knock-in-11': # ARG0:intentional agent of knockin (e.g. person) / ARG1:DNA/cell/cell-line/organism that receives insertion / ARG2:description of mutation / ARG3:instrument (e.g. protein) [knock.xml]
   LexSem("V","knock",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("knock"),Adv("in"),arg1,arg2,arg3))),

 'knock-off-05': # ARG0:The Eliminator, agent / ARG1:thing eliminated [knock.xml]
   LexSem("V","knock",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("knock"),Adv("off"),arg1))),

 'knock-off-06': # ARG0:copier / ARG1:thing copied [knock.xml]
   LexSem("V","knock",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("knock"),Adv("off"),arg1))),

 'knock-out-03': # ARG0:destroyer / ARG1:thing destroyed / ARG2:instrument of destruction [knock.xml]
   LexSem("V","knock",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("knock"),Adv("out"),arg1,arg2))),

 'knock-out-12': # ARG0:intentional agent of knockout (e.g. person) / ARG1:cell/cell-line/organism made inoperative / ARG2:location (gene/protein/DNA) of mutation / ARG3:instrument (e.g. protein) [knock.xml]
   LexSem("V","knock",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("knock"),Adv("out"),arg1,arg2,arg3))),

 'knock-over-08': # ARG0:robber / ARG1:establishment being robbed / ARG2:the loot [knock.xml]
   LexSem("V","knock",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("knock"),Adv("over"),arg1,pp("for",arg2)))),

 'knock-up-09': # ARG0:baby daddy / ARG1:baby mama [knock.xml]
   LexSem("V","knock",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("knock"),Adv("up"),arg1))),

 'knock-up-10': # ARG0:insistent knocker / ARG1:entity woken up [knock.xml]
   LexSem("V","knock",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("knock"),Adv("up"),arg1))),

 'knot-01': # ARG0:agent, entity doing the tying / ARG1:patient, thing(s) being tied / ARG2:instrument, string / ARG3:attribute of arg1 [knot.xml]
   LexSem("V","knot",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("knot"),arg1,arg2,arg3))),

 'know-01': # ARG0:knower / ARG1:fact that is known / ARG2:entity that arg1 is known ABOUT [know.xml]
   LexSem("V","know",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("know"),arg1,arg2))),

 'know-02': # ARG0:knower, person familiar with something / ARG1:what arg0 is familiar with / ARG2:what arg1 is known AS / ARG3:what arg1 is known FOR [know.xml]
   LexSem("V","know",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("know"),arg1,pp("as",arg2),pp("for",arg3)))),

 'know-03': # ARG0:knower, person with an ability/skill / ARG1:ability or skill [know.xml]
   LexSem("V","know",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("know"),arg1))),

 'know-04': # ARG0:knower, entity with ability to recognize/differentiate / ARG1:thing recognized, first thing differentiated / ARG2:differentiated-from, when separate mention [know.xml]
   LexSem("V","know",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("know"),arg1,pp("from",arg2)))),

 'know-05': # ARG0:Knower, first sexual partner / ARG1:Known, second sexual partner [know.xml]
   LexSem("V","know",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("know"),arg1))),

 'know-06': # ARG0:you, addressee [know.xml]
   LexSem("V","know",[":ARG0"],lambda arg0:S(arg0,VP(V("know")))),

 'kowtow-01': # ARG0:subservient entity / ARG1:entity kowtowed to [kowtow.xml]
   LexSem("V","kowtow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("kowtow"),pp("to",arg1)))),

 'kvetch-01': # ARG0:complainer / ARG1:cause, complain of or about / ARG2:hearer, complain to [kvetch.xml]
   LexSem("V","kvetch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("kvetch"),arg1,pp("to",arg2)))),

 'label-01': # ARG0:caller / ARG1:item being labelled / ARG2:attribute, label itself [label.xml]
   LexSem("V","label",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("label"),arg1,pp("as",arg2)))),

 'labor-01': # ARG0:theme, 'laborer' sorta but not really / ARG1:work, project [labor.xml]
   LexSem("V","labor",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("labor"),pp("under",arg1)))),

 'labor-02': # ARG0:Mother [labor.xml]
   LexSem("V","labor",[":ARG0"],lambda arg0:S(arg0,VP(V("labor")))),

 'labor-03': # ARG0:belaborer, causer of difficulty / ARG1:point, entity belabored [labor.xml]
   LexSem("V","labor",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("labor"),arg1))),

 'lace-01': # ARG0:lacer / ARG1:things connected or intertwined [lace.xml]
   LexSem("V","lace",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lace"),arg1))),

 'lace-02': # ARG0:adder, agent / ARG1:thing added to, garnished / ARG2:special ingredient [lace.xml]
   LexSem("V","lace",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lace"),arg1,pp("with",arg2)))),

 'lacerate-01': # ARG0:causer of injury / ARG1:injured party / ARG2:instrument, if separate from arg0 [lacerate.xml]
   LexSem("V","lacerate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lacerate"),arg1,arg2))),

 'lack-01': # ARG0:(non)possessor / ARG1:thing lacked [lack.xml]
   LexSem("V","lack",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lack"),arg1))),

 'lacquer-01': # ARG0:causer of coloration / ARG1:thing with color / ARG2:the color itself [lacquer.xml]
   LexSem("V","lacquer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lacquer"),arg1,pp("with",arg2)))),

 'lactate-01': # ARG0:Lactator (whether framed as 'new mother' or 'breasts') [lactate.xml]
   LexSem("V","lactate",[":ARG0"],lambda arg0:S(arg0,VP(V("lactate")))),

 'ladder-01': # ARG0:unraveller / ARG1:thing unravelling [ladder.xml]
   LexSem("V","ladder",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ladder"),arg1))),

 'lade-01': # ARG0:loader, agent / ARG1:beast of burden, laden entity / ARG2:cargo, laden with what? / ARG3:instrument [lade.xml]
   LexSem("V","lade",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("lade"),arg1,arg2,arg3))),

 'ladle-01': # ARG0:causer of motion, agent / ARG1:thing moved / ARG2:destination [ladle.xml]
   LexSem("V","ladle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ladle"),arg1,pp("onto",arg2)))),

 'lag-01': # ARG0:entity moving slower / ARG1:entity moving faster / ARG2:margin [lag.xml]
   LexSem("V","lag",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lag"),pp("behind",arg1),arg2))),

 'laid-back-05': # ARG0:causer of relaxation / ARG1:relaxed/casual entity [lay.xml]
   LexSem("V","laid",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("laid"),Adv("back"),arg1))),

 'lam-01': # ARG0:entity going on the lam / ARG1:it / ARG2:the law [lam.xml]
   LexSem("V","lam",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lam"),arg1,pp("from",arg2)))),

 'lam-out-02': # ARG0:entity going on the lam / ARG1:it / ARG2:the law [lam.xml]
   LexSem("V","lam",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lam"),Adv("out"),arg1,pp("from",arg2)))),

 'lamb-01': # ARG0:mother / ARG1:lamb [lamb.xml]
   LexSem("V","lamb",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lamb"),arg1))),

 'lambaste-01': # ARG0:angry entity, agent / ARG1:entity lambasted / ARG2:entity lambasted for [lambaste.xml]
   LexSem("V","lambaste",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lambaste"),arg1,pp("for",arg2)))),

 'lament-01': # ARG0:regretter / ARG1:thing regretted [lament.xml]
   LexSem("V","lament",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lament"),arg1))),

 'laminate-01': # ARG0:applier of plastic, agent / ARG1:thing covered with plastic [laminate.xml]
   LexSem("V","laminate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("laminate"),arg1))),

 'lampoon-01': # ARG0:lampooner / ARG1:lampooned [lampoon.xml]
   LexSem("V","lampoon",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lampoon"),arg1))),

 'lance-01': # ARG0:agent/cause of piercing / ARG1:entity becoming pierced / ARG2:instrument used [lance.xml]
   LexSem("V","lance",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lance"),arg1,arg2))),

 'lance-02': # ARG0:thing in motion / ARG1:path [lance.xml]
   LexSem("V","lance",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lance"),pp("across",arg1)))),

 'land-01': # ARG0:bringer, captain, pilot, agent / ARG1:thing landing [land.xml]
   LexSem("V","land",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("land"),arg1))),

 'land-02': # ARG0:getter, lander / ARG1:thing gotten, landed / ARG2:giver? [land.xml]
   LexSem("V","land",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("land"),arg1,arg2))),

 'landfill-01': # ARG0:agent, causer / ARG1:container, area of landfill / ARG2:substance, garbage [landfill.xml]
   LexSem("V","landfill",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("landfill"),arg1,arg2))),

 'landscape-01': # ARG0:agent / ARG1:location enhanced / ARG2:instrument [landscape.xml]
   LexSem("V","landscape",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("landscape"),arg1,arg2))),

 'lane-01': # ARG0:agent, constructor of lanes / ARG1:area made into/made to be surrounded by lanes [lane.xml]
   LexSem("V","lane",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lane"),arg1))),

 'languish-01': # ARG1:entity languishing / ARG2:location or state [languish.xml]
   LexSem("V","languish",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("languish"),pp("at",arg2)))),

 'languish-02': # ARG0:craver / ARG1:thing craved [languish.xml]
   LexSem("V","languish",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("languish"),pp("for",arg1)))),

 'lap-01': # ARG0:agent, lapper / ARG1:thing lapped (at) [lap.xml]
   LexSem("V","lap",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lap"),pp("at",arg1)))),

 'lapse-01': # ARG1:thing ceasing [lapse.xml]
   LexSem("V","lapse",[":ARG1"],lambda arg1:S(arg1,VP(V("lapse")))),

 'lard-01': # ARG0:lard-er / ARG1:thing larded / ARG2:lard [lard.xml]
   LexSem("V","lard",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lard"),arg1,pp("with",arg2)))),

 'lash-01': # ARG0:tier, agent / ARG1:entity lashed / ARG2:entity lashed to [lash.xml]
   LexSem("V","lash",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lash"),arg1,pp("to",arg2)))),

 'lash-out-02': # ARG0:attacker, agent / ARG1:lash at [lash.xml]
   LexSem("V","lash",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lash"),Adv("out"),pp("at",arg1)))),

 'lasso-01': # ARG0:agent, linker / ARG1:thing linked / ARG2:thing linked to / ARG3:instrument [lasso.xml]
   LexSem("V","lasso",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("lasso"),arg1,arg2,arg3))),

 'last-01': # ARG1:thing that lasts / ARG2:period of time [last.xml]
   LexSem("V","last",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("last"),pp("for",arg2)))),

 'last-03': # ARG1:supplies, resources / ARG2:how long the supplies/resources will last / ARG3:consumers of supplies/resources / ARG4:consumption rate [last.xml]
   LexSem("V","last",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("last"),pp("for",arg2),arg3,pp("at",arg4)))),

 'last-04': # ARG1:product, person / ARG2:how long the product/person will function/survive / ARG3:attribute of product/person that has a duration / ARG4:beneficiary [last.xml]
   LexSem("V","last",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("last"),pp("for",arg2),pp("on",arg3),arg4))),

 'latch-01': # ARG0:agent / ARG1:thing(s) being latched (each gets its own arg1) [latch.xml]
   LexSem("V","latch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("latch"),pp("onto",arg1)))),

 'latch-on-02': # ARG0:obtainer, agent / ARG1:entity latched on [latch.xml]
   LexSem("V","latch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("latch"),Adv("on"),pp("to",arg1)))),

 'lather-01': # ARG0:agent / ARG1:face [lather.xml]
   LexSem("V","lather",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lather"),arg1))),

 'laud-01': # ARG0:praiser, agent / ARG1:entity praised / ARG2:praised for what? [laud.xml]
   LexSem("V","laud",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("laud"),arg1,pp("for",arg2)))),

 'laugh-01': # ARG0:laugher / ARG1:cognate object / ARG2:source of joy / ARG3:end state of arg0, as result of laughing [laugh.xml]
   LexSem("V","laugh",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("laugh"),arg1,pp("about",arg2),pp("off",arg3)))),

 'laugh-02': # ARG0:speaker / ARG1:utterance / ARG2:hearer [laugh.xml]
   LexSem("V","laugh",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("laugh"),arg1,arg2))),

 'launch-01': # ARG0:starter, agent / ARG1:thing being launched [launch.xml]
   LexSem("V","launch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("launch"),arg1))),

 'launder-01': # ARG0:person doing laundry / ARG1:laundry [launder.xml]
   LexSem("V","launder",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("launder"),arg1))),

 'lave-01': # ARG0:washer / ARG1:entity cleaned [lave.xml]
   LexSem("V","lave",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lave"),arg1))),

 'lave-02': # ARG0:licker / ARG1:thing licked [lave.xml]
   LexSem("V","lave",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lave"),arg1))),

 'lavish-01': # ARG0:giver, agent / ARG1:thing lavished / ARG2:lavished on [lavish.xml]
   LexSem("V","lavish",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lavish"),arg1,pp("for",arg2)))),

 'lay-01': # ARG0:layer / ARG1:thing laid / ARG2:location [lay.xml]
   LexSem("V","lay",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lay"),arg1,pp("on",arg2)))),

 'lay-04': # ARG0:sexual partner, entity laying arg1 / ARG1:entity getting laid (most common arg) [lay.xml]
   LexSem("V","lay",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lay"),arg1))),

 'lay-off-02': # ARG0:(former) employer / ARG1:(former) employee [lay.xml]
   LexSem("V","lay",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lay"),Adv("off"),pp("about",arg1)))),

 'lay-off-06': # ARG0:agent of cessation / ARG1:activity ceased [lay.xml]
   LexSem("V","lay",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lay"),Adv("off"),arg1))),

 'lay-on-03': # ARG0:agent / ARG1:thing employed [lay.xml]
   LexSem("V","lay",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lay"),Adv("on"),arg1))),

 'leach-01': # ARG0:agent of percolation process / ARG1:soluble constituents, product of leaching process / ARG2:source from which arg1 is drawn, pure substance undergoing percolation [leach.xml]
   LexSem("V","leach",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("leach"),arg1,pp("from",arg2)))),

 'lead-01': # ARG0:leader / ARG1:in the lead of / ARG2:extent / ARG3:start point / ARG4:end point [lead.xml]
   LexSem("V","lead",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("lead"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'lead-02': # ARG0:leader / ARG1:entity lead / ARG2:proposition [lead.xml]
   LexSem("V","lead",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lead"),arg1,pp("in",arg2)))),

 'lead-03': # ARG0:factors / ARG1:led entity / ARG2:result, action or attribute on arg1 [lead.xml]
   LexSem("V","lead",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lead"),arg1,pp("to",arg2)))),

 'lead-off-04': # ARG0:creator, beginner, Agent / ARG1:Theme(-Creation) / ARG2:Instrument / ARG3:secondary predication of arg1 [lead.xml]
   LexSem("V","lead",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("lead"),Adv("off"),arg1,pp("with",arg2),arg3))),

 'lead-up-05': # ARG1:ongoing events / ARG2:event lead up to, resulting/interrupting event [lead.xml]
   LexSem("V","lead",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("lead"),Adv("up"),pp("to",arg2)))),

 'leaf-01': # ARG0:agent, person flipping through the pages / ARG1:location, the pages / ARG2:thing being searched for in the pages [leaf.xml]
   LexSem("V","leaf",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("leaf"),pp("through",arg1),pp("for",arg2)))),

 'leaf-02': # ARG0:thing producing leaves / ARG1:final state of the thing once it has leaves, 'into __' [leaf.xml]
   LexSem("V","leaf",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("leaf"),pp("into",arg1)))),

 'leak-01': # ARG0:thing leaking / ARG1:substance leaked [leak.xml]
   LexSem("V","leak",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("leak"),arg1))),

 'lean-01': # ARG0:causer of leaning / ARG1:entity leaning, if non-volitional / ARG2:direction, location, destination [lean.xml]
   LexSem("V","lean",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lean"),arg1,pp("over",arg2)))),

 'leap-01': # ARG1:thing jumping / ARG2:EXT, amount jumped by / ARG3:start point / ARG4:end point / ARG5:attribute, specific aspect of arg1 that is leaping [leap.xml]
   LexSem("V","leap",[":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg1,arg2,arg3,arg4,arg5:S(arg1,VP(V("leap"),arg2,pp("from",arg3),pp("to",arg4),pp("in",arg5)))),

 'leap-02': # ARG0:jumper / ARG1:opportunity [leap.xml]
   LexSem("V","leap",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("leap"),pp("at",arg1)))),

 'leap-03': # ARG0:jumper / ARG1:obstacle [leap.xml]
   LexSem("V","leap",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("leap"),arg1))),

 'leapfrog-01': # ARG0:agent, thing now ahead / ARG1:obstacle, thing now behind [leapfrog.xml]
   LexSem("V","leapfrog",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("leapfrog"),arg1))),

 'learn-01': # ARG0:student / ARG1:subject / ARG2:teacher [learn.xml]
   LexSem("V","learn",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("learn"),pp("of",arg1),pp("from",arg2)))),

 'lease-01': # ARG0:renter / ARG1:thing rented (eg, apartment) / ARG2:landlord / ARG3:rent / ARG4:term [lease.xml]
   LexSem("V","lease",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("lease"),arg1,pp("from",arg2),pp("for",arg3),arg4))),

 'lease-02': # ARG0:landlord / ARG1:thing rented (eg, apartment) / ARG2:renter / ARG3:rent / ARG4:term [lease.xml]
   LexSem("V","lease",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("lease"),arg1,pp("to",arg2),pp("for",arg3),arg4))),

 'leash-01': # ARG0:dog catcher, agent putting a leash on / ARG1:dog, entity leashed, muzzled / ARG2:fence, hydrant -- thing leashed to, attached by leash / ARG3:leash itself, type of leash [leash.xml]
   LexSem("V","leash",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("leash"),arg1,pp("to",arg2),pp("with",arg3)))),

 'leave-02': # ARG0:giver, bequeather, donor / ARG1:thing given / ARG2:benefactive / given-to [leave.xml]
   LexSem("V","leave",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("leave"),arg1,arg2))),

 'leave-05': # ARG0:(non)possessor / ARG1:"something to be desired", or similar [leave.xml]
   LexSem("V","leave",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("leave"),arg1))),

 'leave-11': # ARG0:entity in motion / ARG1:starting point, location vacated / ARG2:destination (must also be a location) [leave.xml]
   LexSem("V","leave",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("leave"),arg1,pp("for",arg2)))),

 'leave-12': # ARG0:agentive leaver (possibly in motion) / ARG1:person/thing put in a location/state / ARG2:state/location left in (at least implied) [leave.xml]
   LexSem("V","leave",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("leave"),arg1,pp("with",arg2)))),

 'leave-13': # ARG0:event/condition causing arg1 to happen / ARG1:new state / ARG2:new state of arg1; situation caused by the events arg0 [leave.xml]
   LexSem("V","leave",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("leave"),arg1,arg2))),

 'leave-14': # ARG0:decision­-maker chosing to not act (Must NOT be in motion) / ARG1:person or thing remaining / ARG2:current state/location where arg1 will remain, activity allowed to continue [leave.xml]
   LexSem("V","leave",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("leave"),arg1,pp("in",arg2)))),

 'leave-15': # ARG0:abandoner, entity leaving the relationship/organization / ARG1:person, thing abandoned (CANNOT be a location; use leave.11 instead) / ARG2:in exchange for; greener pastures [leave.xml]
   LexSem("V","leave",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("leave"),arg1,pp("for",arg2)))),

 'leave-16': # ARG0:entity putting off an activity/behavior / ARG1:activity postponed / ARG2:until when? [leave.xml]
   LexSem("V","leave",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("leave"),arg1,pp("until",arg2)))),

 'leave-17': # ARG1:entity remaining / ARG2:larger original set of which a part is remaining [leave.xml]
   LexSem("V","leave",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("leave"),pp("of",arg2)))),

 'leave-behind-18': # ARG0:forgetter / ARG1:thing forgotten or left behind / ARG2:behind them/him/it [leave.xml]
   LexSem("V","leave",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("leave"),Adv("behind"),arg1,arg2))),

 'leave-off-07': # ARG0:entity stopping acting / ARG1:discontinued action [leave.xml]
   LexSem("V","leave",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("leave"),Adv("off"),arg1))),

 'leave-out-03': # ARG0:excluder, agent / ARG1:excluded entity / ARG2:excluded from [leave.xml]
   LexSem("V","leave",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("leave"),Adv("out"),arg1,pp("of",arg2)))),

 'leave-over-08': # ARG0:agent/cause / ARG1:thing remaining [leave.xml]
   LexSem("V","leave",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("leave"),Adv("over"),pp("with",arg1)))),

 'leave_behind-18': # ARG0:forgetter / ARG1:thing forgotten or left behind / ARG2:behind them/him/it [leave.xml]
   LexSem("V","leave",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("leave"),arg1,arg2))),

 'leaven-01': # ARG0:baker, agent adding leaven or other ingredient / ARG1:bread, thing receiving leaven or being permeated / ARG2:leaven itself, type of leaven, thing added to permeate [leaven.xml]
   LexSem("V","leaven",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("leaven"),arg1,pp("with",arg2)))),

 'lecture-01': # ARG0:lecturer, agent / ARG1:audience / ARG2:topic or utterance [lecture.xml]
   LexSem("V","lecture",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lecture"),arg1,pp("about",arg2)))),

 'leer-01': # ARG0:looker, pervert / ARG1:sight [leer.xml]
   LexSem("V","leer",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("leer"),arg1))),

 'legalize-01': # ARG0:legislative body, agent / ARG1:thing now legal [legalize.xml]
   LexSem("V","legalize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("legalize"),arg1))),

 'legislate-01': # ARG0:law-giving body / ARG1:thing controlled [legislate.xml]
   LexSem("V","legislate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("legislate"),arg1))),

 'legitimize-01': # ARG0:cause of legitimacy / ARG1:entity legitimized [legitimize.xml]
   LexSem("V","legitimize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("legitimize"),arg1))),

 'lend-01': # ARG0:lender / ARG1:thing lent / ARG2:lent-to [lend.xml]
   LexSem("V","lend",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lend"),arg1,pp("to",arg2)))),

 'lengthen-01': # ARG0:cause, agent / ARG1:thing getting longer / ARG2:EXT / ARG3:start point / ARG4:end point [lengthen.xml]
   LexSem("V","lengthen",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("lengthen"),arg1,pp("by",arg2),arg3,pp("to",arg4)))),

 'lessen-01': # ARG0:cause, agent / ARG1:Logical subject, patient, thing falling / ARG2:EXT, amount fallen / ARG3:Start point / ARG4:End point, end state of arg1 [lessen.xml]
   LexSem("V","lessen",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("lessen"),arg1,arg2,arg3,arg4))),

 'let-01': # ARG0:allower / ARG1:action allowed [let.xml]
   LexSem("V","let",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("let"),arg1))),

 'let-05': # ARG0:landlord / ARG1:thing rented (rooms, etc) / ARG2:renter, recipient of rented thing / ARG3:amount of rent charged, rate / ARG4:term of lease, time period [let.xml]
   LexSem("V","let",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("let"),arg1,pp("to",arg2),pp("for",arg3),arg4))),

 'let-down-04': # ARG0:Agent, cause of disappointment / ARG1:disappointed entity [let.xml]
   LexSem("V","let",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("let"),Adv("down"),arg1))),

 'let-on-02': # ARG0:giver / ARG1:getter / ARG2:indication [let.xml]
   LexSem("V","let",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("let"),Adv("on"),pp("to",arg1),arg2))),

 'let-out-06': # ARG0:landlord / ARG1:thing rented (rooms, etc) / ARG2:renter, recipient of rented thing / ARG3:amount of rent charged, rate / ARG4:term of lease, time period [let.xml]
   LexSem("V","let",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("let"),Adv("out"),arg1,arg2,arg3,arg4))),

 'let-up-03': # ARG0:let uper / ARG1:with respect to what? [let.xml]
   LexSem("V","let",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("let"),Adv("up"),pp("on",arg1)))),

 'let_know-07': # ARG0:informer / ARG1:entity informed / ARG2:information given [know.xml]
   LexSem("V","let",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("let"),arg1,arg2))),

 'letter-01': # ARG0:participant / ARG1:sport or other school activity [letter.xml]
   LexSem("V","letter",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("letter"),pp("in",arg1)))),

 'letter-02': # ARG0:scribe / ARG1:lettering / ARG2:surface being lettered [letter.xml]
   LexSem("V","letter",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("letter"),arg1,arg2))),

 'level-01': # ARG0:cause, agent / ARG1:thing becoming level / ARG2:instrument, if separate from agent [level.xml]
   LexSem("V","level",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("level"),arg1,pp("with",arg2)))),

 'level-03': # ARG0:director, agent / ARG1:us. charges or accusations / ARG2:target [level.xml]
   LexSem("V","level",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("level"),arg1,pp("at",arg2)))),

 'level-off-02': # ARG0:cause, agent / ARG1:thing becoming level / ARG2:instrument, if separate from agent [level.xml]
   LexSem("V","level",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("level"),Adv("off"),arg1,pp("with",arg2)))),

 'leverage-01': # ARG0:agent / ARG1:thing leveraged [leverage.xml]
   LexSem("V","leverage",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("leverage"),arg1))),

 'levitate-01': # ARG0:causer of levitation / ARG1:thing levitating / ARG2:EXT / ARG3:start point / ARG4:end point / ARG5:instrument [levitate.xml]
   LexSem("V","levitate",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg0,arg1,arg2,arg3,arg4,arg5:S(arg0,VP(V("levitate"),arg1,arg2,arg3,pp("into",arg4),pp("with",arg5)))),

 'levy-01': # ARG0:imposer, collector, agent / ARG1:entity levied, usually taxes / ARG2:levied on what? entity being taxed [levy.xml]
   LexSem("V","levy",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("levy"),arg1,pp("on",arg2)))),

 'liaise-01': # ARG0:agent, entity establishing liaison / ARG1:patient, thing(s) being liaised / ARG2:benefactive [liaise.xml]
   LexSem("V","liaise",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("liaise"),arg1,pp("for",arg2)))),

 'libel-01': # ARG0:liar/writer / ARG1:victim, entity lied about / ARG2:the lie itself [libel.xml]
   LexSem("V","libel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("libel"),arg1,arg2))),

 'liberalize-01': # ARG0:agent of liberalization / ARG1:thing becoming more liberal (if separate from arg0) [liberalize.xml]
   LexSem("V","liberalize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("liberalize"),arg1))),

 'liberate-01': # ARG0:cause of freedom, agent / ARG1:entity liberated / ARG2:entity liberated from [liberate.xml]
   LexSem("V","liberate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("liberate"),arg1,pp("from",arg2)))),

 'license-01': # ARG0:granter of license / ARG1:licensed thing / ARG2:benefactive, licensed-to [license.xml]
   LexSem("V","license",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("license"),arg1,pp("to",arg2)))),

 'lichenify-101': # ARG0:Causer of lichenification / ARG1:Thing becoming lichenified [lichenify.xml]
   LexSem("V","lichenify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lichenify"),arg1))),

 'lick-01': # ARG0:licker / ARG1:licked [lick.xml]
   LexSem("V","lick",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lick"),arg1))),

 'lick-up-02': # ARG0:licker, remover / ARG1:thing removed / ARG2:removed from [lick.xml]
   LexSem("V","lick",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lick"),Adv("up"),arg1,pp("from",arg2)))),

 'lie-07': # ARG1:entity in the position / ARG2:location [lay.xml]
   LexSem("V","lie",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("lie"),pp("in",arg2)))),

 'lie-08': # ARG0:liar / ARG1:lie itself / ARG2:hearer / ARG3:subject matter the lie is about [lay.xml]
   LexSem("V","lie",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("lie"),pp("about",arg1),pp("to",arg2),pp("regarding",arg3)))),

 'lie-down-09': # ARG1:entity lying down / ARG2:location [lay.xml]
   LexSem("V","lie",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("lie"),Adv("down"),pp("on",arg2)))),

 'lie-down-10': # ARG0:installer, creator, agent / ARG1:thing installed / ARG2:installed where [lay.xml]
   LexSem("V","lie",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lie"),Adv("down"),arg1,arg2))),

 'lift-01': # ARG0:elevator, Agent / ARG1:Logical subject, patient, thing rising / ARG2:EXT, amount risen / ARG3:Start point / ARG4:End point [lift.xml]
   LexSem("V","lift",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("lift"),arg1,arg2,arg3,pp("into",arg4)))),

 'lift-02': # ARG0:agent, entity acquiring/removing something / ARG1:thing acquired/removed / ARG2:acquired/removed-from [lift.xml]
   LexSem("V","lift",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lift"),arg1,pp("from",arg2)))),

 'ligate-01': # ARG0:person doing the binding / ARG1:item binding / ARG2:instrument / ARG3:binded to [ligate.xml]
   LexSem("V","ligate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("ligate"),arg1,pp("with",arg2),pp("with",arg3)))),

 'light-04': # ARG0:setter of fire, increaser of illumination, agent / ARG1:entity lit / ARG2:the light itself [lighten.xml]
   LexSem("V","light",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("light"),arg1,arg2))),

 'light-up-08': # ARG0:causer of illumination or fire, agent / ARG1:entity lit [lighten.xml]
   LexSem("V","light",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("light"),Adv("up"),arg1))),

 'lighten-01': # ARG0:causer / ARG1:thing getting lighter / ARG2:EXT / ARG3:start point / ARG4:end point [lighten.xml]
   LexSem("V","lighten",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("lighten"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'lighten-up-02': # ARG0:causer / ARG1:thing getting lighter / ARG2:EXT [lighten.xml]
   LexSem("V","lighten",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lighten"),Adv("up"),arg1,arg2))),

 'lighten-up-03': # ARG0:entity taking it easier on something / ARG1:taking it easier on what [lighten.xml]
   LexSem("V","lighten",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lighten"),Adv("up"),pp("on",arg1)))),

 'lighten-up-09': # ARG0:causer of increased mirth / ARG1:entity becoming less serious / ARG2:instrument [lighten.xml]
   LexSem("V","lighten",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lighten"),Adv("up"),arg1,pp("by",arg2)))),

 'lightning-01': # ARG0:causer of lightning / ARG1:lightning [lightning.xml]
   LexSem("V","lightning",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lightning"),arg1))),

 'lignify-01': # ARG0:cause of transformation / ARG1:entity made into wood [lignify.xml]
   LexSem("V","lignify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lignify"),arg1))),

 'like-01': # ARG0:liker / ARG1:object of affection [liken.xml]
   LexSem("V","like",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("like"),arg1))),

 'like-02': # ARG0:wanter / ARG1:thing wanted [liken.xml]
   LexSem("V","like",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("like"),pp("to",arg1)))),

 'liken-03': # ARG0:entity making comparison, agent / ARG1:topic / ARG2:thing it's similar to [liken.xml]
   LexSem("V","liken",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("liken"),arg1,pp("to",arg2)))),

 'lilt-01': # ARG0:lilter / ARG1:utterance, movement, music / ARG2:listener [lilt.xml]
   LexSem("V","lilt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lilt"),arg1,arg2))),

 'limber-up-01': # ARG0:agent, person stretching, warming up the muscles / ARG1:muscles, limbs made more flexible [limber.xml]
   LexSem("V","limber",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("limber"),Adv("up"),arg1))),

 'limit-01': # ARG0:agent, limiter / ARG1:thing limited / ARG2:limit [limit.xml]
   LexSem("V","limit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("limit"),arg1,pp("to",arg2)))),

 'limp-01': # ARG0:limper, agent [limp.xml]
   LexSem("V","limp",[":ARG0"],lambda arg0:S(arg0,VP(V("limp")))),

 'line-01': # ARG0:agent only! / ARG1:thing lined / ARG2:instrument, lining proper [line.xml]
   LexSem("V","line",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("line"),arg1,pp("with",arg2)))),

 'line-03': # ARG0:putter of lines / ARG1:thing with lines [line.xml]
   LexSem("V","line",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("line"),arg1))),

 'line-up-02': # ARG0:causative agent / ARG1:things in a line [line.xml]
   LexSem("V","line",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("line"),Adv("up"),arg1))),

 'line_pocket-02': # ARG0:thief, taker of money / ARG1:money stolen or selfishly acquired / ARG2:activity during which money is taken [pocket.xml]
   LexSem("V","line",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("line"),pp("with",arg1),arg2))),

 'linedraw-01': # ARG0:entity drawing the line / ARG1:draw the line where [linedraw.xml]
   LexSem("V","line-draw",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("line-draw"),arg1))),

 'linger-01': # ARG1:entity lingering / ARG2:location or state [linger.xml]
   LexSem("V","linger",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("linger"),pp("on",arg2)))),

 'link-01': # ARG0:agent, entity doing the tying / ARG1:first or all things being tied / ARG2:second thing, linked to what / ARG3:instrument, string [link.xml]
   LexSem("V","link",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("link"),arg1,pp("to",arg2),arg3))),

 'link-up-02': # ARG0:agent, entity doing the tying / ARG1:first or all things being tied / ARG2:second thing, linked to what / ARG3:instrument, string [link.xml]
   LexSem("V","link",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("link"),Adv("up"),arg1,pp("with",arg2),arg3))),

 'lint-01': # ARG0:agent doing the removing/producing of lint / ARG1:entity lint is removed/produced from [lint.xml]
   LexSem("V","lint",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lint"),arg1))),

 'lionize-01': # ARG0:agent of admiration / ARG1:patient of admiration [lionize.xml]
   LexSem("V","lionize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lionize"),arg1))),

 'lipstick-01': # ARG0:makeup artist, agent putting on lipstick / ARG1:lips, or other entity being covered with lipstick / ARG2:lipstick type, or art drawn with lipstick [lipstick.xml]
   LexSem("V","lipstick",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lipstick"),pp("on",arg1),arg2))),

 'liquefy-01': # ARG0:liquefier / ARG1:thing being transformed / ARG2:end state [liquefy.xml]
   LexSem("V","liquefy",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("liquefy"),arg1,pp("into",arg2)))),

 'liquidate-01': # ARG0:liquidator, agent / ARG1:thing being liquidated [liquidate.xml]
   LexSem("V","liquidate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("liquidate"),arg1))),

 'liquidize-01': # ARG0:liquidator, agent / ARG1:thing being made liquid [liquidize.xml]
   LexSem("V","liquidize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("liquidize"),arg1))),

 'lisp-01': # ARG0:speaker / ARG1:utterance,sound / ARG2:listener,recipient [lisp.xml]
   LexSem("V","lisp",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lisp"),arg1,pp("at",arg2)))),

 'list-01': # ARG0:lister / ARG1:item / ARG2:list [list.xml]
   LexSem("V","list",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("list"),arg1,pp("in",arg2)))),

 'list-02': # ARG0:pricer / ARG1:item / ARG2:price [list.xml]
   LexSem("V","list",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("list"),arg1,pp("at",arg2)))),

 'list-03': # ARG1:thing at an angle [list.xml]
   LexSem("V","list",[":ARG1"],lambda arg1:S(arg1,VP(V("list")))),

 'listen-01': # ARG0:listener / ARG1:sound or speaker [listen.xml]
   LexSem("V","listen",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("listen"),pp("to",arg1)))),

 'litigate-01': # ARG0:litigator / ARG1:case / ARG2:defendant [litigate.xml]
   LexSem("V","litigate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("litigate"),arg1,arg2))),

 'litter-01': # ARG0:litterbug / ARG1:where garbage ended up / ARG2:garbage [litter.xml]
   LexSem("V","litter",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("litter"),arg1,pp("with",arg2)))),

 'live-01': # ARG0:alive entity / ARG1:life [live.xml]
   LexSem("V","live",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("live"),arg1))),

 'live-02': # ARG0:endurer, sufferer / ARG1:malady [live.xml]
   LexSem("V","live",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("live"),pp("with",arg1)))),

 'live-down-06': # ARG0:agent, one who withstands / ARG1:incident, crime, impression [live.xml]
   LexSem("V","live",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("live"),Adv("down"),arg1))),

 'live-on-03': # ARG1:thing continuing / ARG2:comitative: group, things kept together / ARG3:attributive [live.xml]
   LexSem("V","live",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("live"),Adv("on"),arg2,pp("without",arg3)))),

 'live-out-05': # ARG0:alive entity / ARG1:life [live.xml]
   LexSem("V","live",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("live"),Adv("out"),arg1))),

 'live-up-04': # ARG0:fulfiller / ARG1:fulfilled [live.xml]
   LexSem("V","live",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("live"),Adv("up"),pp("to",arg1)))),

 'liven-up-02': # ARG0:agent / ARG1:experiencer, entity made cheerful / ARG2:instrument, cause of emotion [enliven.xml]
   LexSem("V","liven",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("liven"),Adv("up"),arg1,pp("with",arg2)))),

 'liven_up-02': # ARG0:agent / ARG1:experiencer, entity made cheerful / ARG2:instrument, cause of emotion [enliven.xml]
   LexSem("V","liven",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("liven"),arg1,pp("with",arg2)))),

 'load-01': # ARG0:loader, agent / ARG1:beast of burden / ARG2:cargo / ARG3:instrument [load.xml]
   LexSem("V","load",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("load"),arg1,pp("with",arg2),arg3))),

 'load-03': # ARG0:cheater / ARG1:thing loaded (dice, the deck, etc) / ARG2:with what [load.xml]
   LexSem("V","load",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("load"),arg1,pp("with",arg2)))),

 'load-up-02': # ARG0:loader, agent / ARG1:beast of burden / ARG2:cargo [load.xml]
   LexSem("V","load",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("load"),Adv("up"),arg1,pp("on",arg2)))),

 'loaf-01': # ARG0:lazy person [loaf.xml]
   LexSem("V","loaf",[":ARG0"],lambda arg0:S(arg0,VP(V("loaf")))),

 'loan-01': # ARG0:giver / ARG1:thing given / ARG2:entity given to [loan.xml]
   LexSem("V","loan",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("loan"),arg1,arg2))),

 'loan-out-02': # ARG0:giver / ARG1:thing given [loan.xml]
   LexSem("V","loan",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("loan"),Adv("out"),arg1))),

 'loathe-01': # ARG0:experiencer / ARG1:target of hatred [loathe.xml]
   LexSem("V","loathe",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("loathe"),arg1))),

 'lob-01': # ARG0:thrower / ARG1:thing thrown / ARG2:thrown at [lob.xml]
   LexSem("V","lob",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lob"),arg1,pp("at",arg2)))),

 'lobby-01': # ARG0:asker / ARG1:favor / ARG2:hearer [lobby.xml]
   LexSem("V","lobby",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lobby"),pp("to",arg1),arg2))),

 'lobotomize-01': # ARG0:surgeon / ARG1:entity undergoing lobotomy [lobotomize.xml]
   LexSem("V","lobotomize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lobotomize"),arg1))),

 'localize-01': # ARG0:cause, agent / ARG1:local thing [localize.xml]
   LexSem("V","localize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("localize"),arg1))),

 'locate-01': # ARG0:causer of location / ARG1:institution, thing located [locate.xml]
   LexSem("V","locate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("locate"),arg1))),

 'locate-02': # ARG0:finder / ARG1:thing found [locate.xml]
   LexSem("V","locate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("locate"),arg1))),

 'lock-01': # ARG0:agent, entity doing the locking / ARG1:first thing being locked / ARG2:second thing, locked to what / ARG3:instrument, string, lock [lock.xml]
   LexSem("V","lock",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("lock"),arg1,pp("into",arg2),pp("with",arg3)))),

 'lock-down-06': # ARG0:agent, one who locks / ARG1:thing secured [lock.xml]
   LexSem("V","lock",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lock"),Adv("down"),arg1))),

 'lock-in-02': # ARG0:agent, fixer / ARG1:thing made / ARG2:benefactive [lock.xml]
   LexSem("V","lock",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lock"),Adv("in"),arg1,pp("as",arg2)))),

 'lock-out-05': # ARG0:agent, entity being excluding / ARG1:thing excluded / ARG2:excluded from [lock.xml]
   LexSem("V","lock",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lock"),Adv("out"),arg1,pp("of",arg2)))),

 'lock-up-03': # ARG0:officer of the court / ARG1:criminal / ARG2:secondary predication [lock.xml]
   LexSem("V","lock",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lock"),Adv("up"),arg1,pp("as",arg2)))),

 'lock-up-04': # ARG0:agent / ARG1:thing becoming immovable, secure [lock.xml]
   LexSem("V","lock",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lock"),Adv("up"),arg1))),

 'lodge-01': # ARG0:entity residing / ARG1:location [lodge.xml]
   LexSem("V","lodge",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lodge"),pp("with",arg1)))),

 'lodge-02': # ARG0:agent, putter / ARG1:thing lodged / ARG2:where [lodge.xml]
   LexSem("V","lodge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lodge"),arg1,arg2))),

 'lodge-03': # ARG0:complainer / ARG1:formal complaint, lawsuit etc / ARG2:against whom [lodge.xml]
   LexSem("V","lodge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lodge"),arg1,pp("against",arg2)))),

 'loft-01': # ARG0:thrower / ARG1:gun;instrument / ARG2:thing thrown [loft.xml]
   LexSem("V","loft",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("loft"),arg1,arg2))),

 'log-01': # ARG0:recorder, logger, agent / ARG1:thing recorded, internet/software [log.xml]
   LexSem("V","log",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("log"),arg1))),

 'log-03': # ARG0:logger / ARG1:location, thing logged [log.xml]
   LexSem("V","log",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("log"),arg1))),

 'log-on-02': # ARG0:user, agent / ARG1:computer [log.xml]
   LexSem("V","log",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("log"),Adv("on"),arg1))),

 'logroll-01': # ARG0:politicians [logroll.xml]
   LexSem("V","log-roll",[":ARG0"],lambda arg0:S(arg0,VP(V("log-roll")))),

 'loiter-01': # ARG0:loiterer [loiter.xml]
   LexSem("V","loiter",[":ARG0"],lambda arg0:S(arg0,VP(V("loiter")))),

 'loll-01': # ARG0:agent, causer / ARG1:entity dropping [loll.xml]
   LexSem("V","loll",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("loll"),arg1))),

 'lollop-01': # ARG1:entity lolloping / ARG2:start point / ARG3:end point / ARG4:path [lollop.xml]
   LexSem("V","lollop",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("lollop"),arg2,pp("to",arg3),pp("into",arg4)))),

 'long-02': # ARG0:wanter / ARG1:wanted [lengthen.xml]
   LexSem("V","long",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("long"),pp("for",arg1)))),

 'long_jump-13': # ARG0:long-jumper / ARG1:measurement/score achieved [jump.xml]
   LexSem("V","longjump",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("longjump"),pp("of",arg1)))),

 'look-01': # ARG0:looker / ARG1:thing looked at or for or on / ARG2:attribute of arg1 [look.xml]
   LexSem("V","look",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("look"),pp("at",arg1),pp("to",arg2)))),

 'look-02': # ARG0:seemer / ARG1:seemed like, attribute of arg0 / ARG2:seemed to [look.xml]
   LexSem("V","look",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("look"),pp("like",arg1),pp("to",arg2)))),

 'look-04': # ARG0:expecter / ARG1:thing expected [look.xml]
   LexSem("V","look",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("look"),arg1))),

 'look-09': # ARG0:you [look.xml]
   LexSem("V","look",[":ARG0"],lambda arg0:S(arg0,VP(V("look")))),

 'look-after-07': # ARG0:minder, tender, taker-care-of / ARG1:thing minded, taken care of [look.xml]
   LexSem("V","look",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("look"),Adv("after"),arg1))),

 'look-down-10': # ARG0:Disdainful viewer / ARG1:Thing looked down upon [look.xml]
   LexSem("V","look",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("look"),Adv("down"),pp("on",arg1)))),

 'look-forward-03': # ARG0:looker forward / ARG1:thing looked forward to [look.xml]
   LexSem("V","look",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("look"),Adv("forward"),pp("to",arg1)))),

 'look-into-11': # ARG0:investigator / ARG1:investigated [look.xml]
   LexSem("V","look",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("look"),Adv("into"),arg1))),

 'look-out-08': # ARG0:minder, tender, taker-care-of / ARG1:thing minded, taken care of [look.xml]
   LexSem("V","look",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("look"),Adv("out"),pp("for",arg1)))),

 'look-over-06': # ARG0:looker, examiner / ARG1:thing examined, looked at [look.xml]
   LexSem("V","look",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("look"),Adv("over"),arg1))),

 'look-up-05': # ARG0:agent, seeker / ARG1:thing sought / ARG2:sought in, from [look.xml]
   LexSem("V","look",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("look"),Adv("up"),arg1,pp("in",arg2)))),

 'loom-01': # ARG1:thing looming, esp 'disaster' [loom.xml]
   LexSem("V","loom",[":ARG1"],lambda arg1:S(arg1,VP(V("loom")))),

 'loop-01': # ARG0:causer of looping / ARG1:looped thing / ARG2:secondary attribute, looped around what [loop.xml]
   LexSem("V","loop",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("loop"),arg1,pp("over",arg2)))),

 'loosen-01': # ARG0:causer of loosening / ARG1:thing becoming loose / ARG2:instrument, if separate from arg0 [loosen.xml]
   LexSem("V","loosen",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("loosen"),arg1,arg2))),

 'loosen-up-02': # ARG0:causer of loosening / ARG1:thing becoming loose / ARG2:instrument, if separate from arg0 [loosen.xml]
   LexSem("V","loosen",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("loosen"),Adv("up"),arg1,pp("with",arg2)))),

 'loot-01': # ARG0:looter / ARG1:ill-gotten goods / ARG2:source [loot.xml]
   LexSem("V","loot",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("loot"),arg1,pp("from",arg2)))),

 'lop-01': # ARG0:cutter, agent / ARG1:entity lopped / ARG2:entity lopped off/from [lop.xml]
   LexSem("V","lop",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lop"),arg1,pp("off",arg2)))),

 'lope-01': # ARG1:entity loping / ARG2:path / ARG3:start point / ARG4:end point [lope.xml]
   LexSem("V","lope",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("lope"),pp("down",arg2),pp("from",arg3),arg4))),

 'lord-01': # ARG0:lord / ARG1:lordship, power / ARG2:dominion [lord.xml]
   LexSem("V","lord",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lord"),arg1,pp("over",arg2)))),

 'lose-01': # ARG1:logical subject, patient, thing falling / ARG2:EXT, amount fallen / ARG3:start point / ARG4:end point [lose.xml]
   LexSem("V","lose",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("lose"),arg2,pp("from",arg3),pp("to",arg4)))),

 'lose-02': # ARG0:entity losing something / ARG1:thing lost / ARG2:benefactive, entity gaining thing lost / ARG3:source of loss [lose.xml]
   LexSem("V","lose",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("lose"),arg1,pp("to",arg2),pp("on",arg3)))),

 'lose-03': # ARG0:loser / ARG1:battle / ARG2:winner [lose.xml]
   LexSem("V","lose",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lose"),arg1,pp("to",arg2)))),

 'lose-04': # ARG0:loser / ARG1:touch / ARG2:with ... [lose.xml]
   LexSem("V","lose",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lose"),arg1,pp("with",arg2)))),

 'lose-07': # ARG1:what you're not aware of / ARG2:unaware entity [lose.xml]
   LexSem("V","lose",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("lose"),pp("on",arg2)))),

 'lose-out-06': # ARG0:entity losing something / ARG1:thing lost / ARG2:benefactive, entity gaining thing lost [lose.xml]
   LexSem("V","lose",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lose"),Adv("out"),pp("on",arg1),pp("to",arg2)))),

 'lounge-01': # ARG0:layabout(s) [lounge.xml]
   LexSem("V","lounge",[":ARG0"],lambda arg0:S(arg0,VP(V("lounge")))),

 'lour-01': # ARG0:Glowerer / ARG1:recipient of look [lour.xml]
   LexSem("V","lour",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lour"),pp("at",arg1)))),

 'lour-02': # ARG0:One doing the lowering / ARG1:thing lessened / ARG2:lowered to [lour.xml]
   LexSem("V","lour",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lour"),arg1,pp("to",arg2)))),

 'louse-01': # ARG0:checker or remover / ARG1:entity being checked or having lice removed [louse.xml]
   LexSem("V","louse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("louse"),arg1))),

 'louse-up-02': # ARG0:infester or spoiler / ARG1:entity being infested or spoiled [louse.xml]
   LexSem("V","louse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("louse"),Adv("up"),arg1))),

 'love-01': # ARG0:lover / ARG1:loved [love.xml]
   LexSem("V","love",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("love"),arg1))),

 'love-02': # ARG0:wisher / ARG1:thing wished for [love.xml]
   LexSem("V","love",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("love"),pp("to",arg1)))),

 'low-01': # ARG0:low-er [low.xml]
   LexSem("V","low",[":ARG0"],lambda arg0:S(arg0,VP(V("low")))),

 'lower-05': # ARG0:entity moving something downward / ARG1:Logical subject, patient, thing going down / ARG2:EXT, amount gone down by / ARG3:start point / ARG4:end point, end state of arg1 [low.xml]
   LexSem("V","lower",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("lower"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'lubricate-01': # ARG0:agent, entity applying lubricant / ARG1:entity lubricated, destination of lubricant / ARG2:instrument, or lubricant itself [lubricate.xml]
   LexSem("V","lubricate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lubricate"),arg1,pp("with",arg2)))),

 'lug-01': # ARG0:lugger / ARG1:lugged, luggage [lug.xml]
   LexSem("V","lug",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lug"),arg1))),

 'lull-01': # ARG0:causer of lulling / ARG1:lulled entity / ARG2:end state of arg1 [lull.xml]
   LexSem("V","lull",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lull"),arg1,pp("to",arg2)))),

 'lumber-01': # ARG0:thing in motion / ARG1:path [lumber.xml]
   LexSem("V","lumber",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lumber"),pp("down",arg1)))),

 'lump-01': # ARG0:creator of collection, agent / ARG1:entity lumped / ARG2:entity lumped with [lump.xml]
   LexSem("V","lump",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("lump"),arg1,pp("with",arg2)))),

 'lunch-01': # ARG0:eater / ARG1:eaten [lunch.xml]
   LexSem("V","lunch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lunch"),pp("on",arg1)))),

 'luncheon-01': # ARG0:eater / ARG1:eaten [luncheon.xml]
   LexSem("V","luncheon",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("luncheon"),pp("on",arg1)))),

 'lunge-01': # ARG0:lunger / ARG1:lunged at [lunge.xml]
   LexSem("V","lunge",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lunge"),pp("for",arg1)))),

 'lurch-01': # ARG0:entity moving / ARG1:path [lurch.xml]
   LexSem("V","lurch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lurch"),arg1))),

 'lure-01': # ARG0:attractor / ARG1:thing attracted / ARG2:thing attracted to, if separate from attractor,   or lured from / ARG3:instrument, if separate from attractor [lure.xml]
   LexSem("V","lure",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("lure"),arg1,arg2,pp("with",arg3)))),

 'lurk-01': # ARG0:lurker [lurk.xml]
   LexSem("V","lurk",[":ARG0"],lambda arg0:S(arg0,VP(V("lurk")))),

 'lust-01': # ARG0:lust-er / ARG1:lust for [lust.xml]
   LexSem("V","lust",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lust"),pp("for",arg1)))),

 'luteinize-101': # ARG0:Causer of luteinization / ARG1:Thing becoming part of the luteum [luteinize.xml]
   LexSem("V","luteinize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("luteinize"),arg1))),

 'luxuriate-01': # ARG0:Enjoyer or big spender / ARG1:luxury [luxuriate.xml]
   LexSem("V","luxuriate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("luxuriate"),pp("in",arg1)))),

 'lynch-01': # ARG0:violent mob / ARG1:victim [lynch.xml]
   LexSem("V","lynch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("lynch"),arg1))),

 'lyse-01': # ARG0:intentional agent of lysis (e.g. scientist) / ARG1:thing distroyed / ARG2:instrument, lysin / ARG3:result of lysis, lysate [lyse.xml]
   LexSem("V","lyse",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("lyse"),arg1,arg2,arg3))),

 'macerate-01': # ARG0:cause of maceration / ARG1:thing undergoing maceration / ARG2:Instrument or manner if separate from arg 0 [macerate.xml]
   LexSem("V","macerate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("macerate"),arg1,arg2))),

 'machinate-01': # ARG0:conspiritor, agent / ARG1:thing devised [machinate.xml]
   LexSem("V","machinate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("machinate"),arg1))),

 'madden-01': # ARG0:cause of anger / ARG1:experiencer / ARG2:Instrument or Manner if separate from arg 0 [madden.xml]
   LexSem("V","madden",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("madden"),arg1,pp("by",arg2)))),

 'magnetize-01': # ARG0:causer of magnetism, agent / ARG1:patient, thing getting magnetized [magnetize.xml]
   LexSem("V","magnetize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("magnetize"),arg1))),

 'magnify-01': # ARG0:causer of magnification / ARG1:thing getting bigger/greater [magnify.xml]
   LexSem("V","magnify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("magnify"),arg1))),

 'mail-01': # ARG0:mailer / ARG1:letter / ARG2:mailed-to [mail.xml]
   LexSem("V","mail",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mail"),arg1,pp("to",arg2)))),

 'maim-01': # ARG0:agent, causer / ARG1:entity maimed / ARG2:instrument [maim.xml]
   LexSem("V","maim",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("maim"),arg1,arg2))),

 'mainstream-01': # ARG0:incorporator / ARG1:mainstream thing [mainstream.xml]
   LexSem("V","mainstream",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mainstream"),arg1))),

 'maintain-01': # ARG0:maintainer / ARG1:thing maintained / ARG2:benefactive/attribute of Arg1 [maintain.xml]
   LexSem("V","maintain",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("maintain"),arg1,pp("for",arg2)))),

 'major-01': # ARG0:student / ARG1:major [major.xml]
   LexSem("V","major",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("major"),pp("in",arg1)))),

 'make-01': # ARG0:creator / ARG1:creation / ARG2:created-from, thing changed / ARG3:benefactive [make.xml]
   LexSem("V","make",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("make"),arg1,pp("of",arg2),arg3))),

 'make-02': # ARG0:impeller to action / ARG1:impelled action/ predication [make.xml]
   LexSem("V","make",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("make"),arg1))),

 'make-05': # ARG0:earner / ARG1:wages / ARG2:job [make.xml]
   LexSem("V","make",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("make"),arg1,pp("for",arg2)))),

 'make-06': # ARG1:thing seeming / ARG2:attribute of arg1 [make.xml]
   LexSem("V","make",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("make"),arg2))),

 'make-18': # ARG0:achiever, agent / ARG1:goal [make.xml]
   LexSem("V","make",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("make"),arg1))),

 'make-19': # ARG0:traveler / ARG1:his/her/their/etc way / ARG2:to where? destination [make.xml]
   LexSem("V","make",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("make"),arg1,pp("to",arg2)))),

 'make-LV': #  [make.xml]
   LexSem("V","make",[],lambda :S(VP(V("make")))),

 'make-off-17': # ARG0:escaper / ARG1:luggage [make.xml]
   LexSem("V","make",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("make"),Adv("off"),pp("with",arg1)))),

 'make-out-12': # ARG0:discerner, viewer, agent / ARG1:patient, thing discerned [make.xml]
   LexSem("V","make",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("make"),Adv("out"),arg1))),

 'make-out-13': # ARG0:writer / ARG1:thing written / ARG2:written to [make.xml]
   LexSem("V","make",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("make"),Adv("out"),arg1,pp("to",arg2)))),

 'make-out-15': # ARG1:topic [make.xml]
   LexSem("V","make",[":ARG1"],lambda arg1:S(arg1,VP(V("make"),Adv("out")))),

 'make-out-23': # ARG0:describer / ARG1:thing described / ARG2:secondary attribute; what arg1 is made to seem like [make.xml]
   LexSem("V","make",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("make"),Adv("out"),arg1,pp("like",arg2)))),

 'make-out-26': # ARG0:kisser / ARG1:kissed [make.xml]
   LexSem("V","make",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("make"),Adv("out"),pp("with",arg1)))),

 'make-over-22': # ARG0:agent, one doing the makeover / ARG1:patient, one being made over / ARG2:instrument of making over / ARG3:end state, made over into what? [make.xml]
   LexSem("V","make",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("make"),Adv("over"),arg1,pp("of",arg2),pp("into",arg3)))),

 'make-up-07': # ARG0:components / ARG1:whole [make.xml]
   LexSem("V","make",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("make"),Adv("up"),arg1))),

 'make-up-08': # ARG0:composer / ARG1:thing composed [make.xml]
   LexSem("V","make",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("make"),Adv("up"),arg1))),

 'make-up-09': # ARG0:one person / ARG1:the other [make.xml]
   LexSem("V","make",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("make"),Adv("up"),pp("with",arg1)))),

 'make-up-10': # ARG0:creator / ARG1:creation / ARG2:created-from, thing changed / ARG3:benefactive [make.xml]
   LexSem("V","make",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("make"),Adv("up"),arg1,arg2,arg3))),

 'make-up-11': # ARG1:entity which is behind in something (eg payments) / ARG2:the something [make.xml]
   LexSem("V","make",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("make"),Adv("up"),arg2))),

 'make-up-16': # ARG0:compensator, agent / ARG1:shortcoming / ARG2:means of repairing shortcoming [make.xml]
   LexSem("V","make",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("make"),Adv("up"),pp("for",arg1),arg2))),

 'make_fun-04': # ARG0:mocker / ARG1:mocked / ARG2:reason, what's so funny [fun.xml]
   LexSem("V","make",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("make"),pp("at",arg1),pp("about",arg2)))),

 'make_light-11': # ARG0:entity making light / ARG1:of what [lighten.xml]
   LexSem("V","make",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("make"),pp("of",arg1)))),

 'make_trouble-06': # ARG0:instigator, first fighter / ARG1:second fighter, target of instigation / ARG2:spoils, over what [trouble.xml]
   LexSem("V","cause",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("cause"),pp("with",arg1),arg2))),

 'make_up_mind-12': # ARG0:decider / ARG1:the decision itself, answer to the question / ARG2:beneficiary / ARG3:subject matter of the decision, question answered [mind.xml]
   LexSem("V","make",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("make"),arg1,arg2,arg3))),

 'malfunction-01': # ARG0:Worker, thing malfunctioning / ARG1:Project, malfunctioning as what [malfunction.xml]
   LexSem("V","malfunction",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("malfunction"),arg1))),

 'malign-01': # ARG0:maligner / ARG1:maligned [malign.xml]
   LexSem("V","malign",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("malign"),arg1))),

 'malinger-01': # ARG0:malingerer [malinger.xml]
   LexSem("V","malinger",[":ARG0"],lambda arg0:S(arg0,VP(V("malinger")))),

 'malnourished-01': # ARG1:malnourished entity / ARG2:nourishment lacked [malnourished.xml]
   LexSem("V","malnourish",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("malnourish"),pp("of",arg2)))),

 'man-01': # ARG0:worker / ARG1:job or place [man.xml]
   LexSem("V","man",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("man"),arg1))),

 'manacle-01': # ARG0:causer of restraint / ARG1:entity restrained / ARG2:restrained to / ARG3:restrained with what? [manacle.xml]
   LexSem("V","manacle",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("manacle"),arg1,pp("to",arg2),arg3))),

 'manage-01': # ARG0:manager / ARG1:thing managed [manage.xml]
   LexSem("V","manage",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("manage"),pp("about",arg1)))),

 'manage-02': # ARG0:manager / ARG1:deed accomplished [manage.xml]
   LexSem("V","manage",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("manage"),arg1))),

 'mandate-01': # ARG0:causer, law(giving body) / ARG1:forced action [mandate.xml]
   LexSem("V","mandate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mandate"),arg1))),

 'maneuver-01': # ARG0:director, agent / ARG1:entity maneuvered / ARG2:destination [maneuver.xml]
   LexSem("V","maneuver",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("maneuver"),arg1,pp("into",arg2)))),

 'mangle-01': # ARG0:agent/mangler / ARG1:thing flattened / ARG2:the mangle [mangle.xml]
   LexSem("V","mangle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mangle"),arg1,arg2))),

 'mangle-02': # ARG0:agent, causer of mangling / ARG1:patient, thing destroyed [mangle.xml]
   LexSem("V","mangle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mangle"),arg1))),

 'manhandle-01': # ARG0:handler / ARG1:thing handled [manhandle.xml]
   LexSem("V","manhandle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("manhandle"),arg1))),

 'manicure-01': # ARG0:agent / ARG1:nails [manicure.xml]
   LexSem("V","manicure",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("manicure"),arg1))),

 'manifest-01': # ARG1:thing appearing / ARG2:reflexive pronoun / ARG3:medium of appearance [manifest.xml]
   LexSem("V","manifest",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("manifest"),arg2,pp("in",arg3)))),

 'manipulate-01': # ARG0:handler / ARG1:thing handled [manipulate.xml]
   LexSem("V","manipulate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("manipulate"),arg1))),

 'manipulate-02': # ARG0:causal agent / ARG1:impelled agent / ARG2:impelled action [manipulate.xml]
   LexSem("V","manipulate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("manipulate"),arg1,pp("into",arg2)))),

 'mantle-01': # ARG0:agent, placer of mantle / ARG1:recipient of mantle, thing covered / ARG2:mantle itself, type of mantle [mantle.xml]
   LexSem("V","mantle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mantle"),arg1,pp("with",arg2)))),

 'manufacture-01': # ARG0:creator / ARG1:creation / ARG2:created-from, thing changed / ARG3:benefactive [manufacture.xml]
   LexSem("V","manufacture",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("manufacture"),arg1,pp("from",arg2),pp("for",arg3)))),

 'map-01': # ARG0:mapper / ARG1:thing mapped [map.xml]
   LexSem("V","map",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("map"),arg1))),

 'map-02': # ARG0:drawer of comparison, agent / ARG1:first thing / ARG2:thing(s) mapped onto [map.xml]
   LexSem("V","map",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("map"),arg1,pp("onto",arg2)))),

 'mar-01': # ARG0:causer of damage, agent / ARG1:patient / ARG2:instrument [mar.xml]
   LexSem("V","mar",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mar"),arg1,pp("with",arg2)))),

 'march-01': # ARG0:agent walking [march.xml]
   LexSem("V","march",[":ARG0"],lambda arg0:S(arg0,VP(V("march")))),

 'march-02': # ARG1:entity progressing [march.xml]
   LexSem("V","march",[":ARG1"],lambda arg1:S(arg1,VP(V("march")))),

 'marginalize-01': # ARG0:causer / ARG1:unimportant thing [marginalize.xml]
   LexSem("V","marginalize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("marginalize"),arg1))),

 'marinate-01': # ARG0:agent / ARG1:theme, food, marinated item / ARG2:marinade [marinate.xml]
   LexSem("V","marinate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("marinate"),arg1,pp("in",arg2)))),

 'mark-01': # ARG0:signifier / ARG1:signified [mark.xml]
   LexSem("V","mark",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mark"),arg1))),

 'mark-02': # ARG0:agent, marker / ARG1:mark / ARG2:surface, marked-on / ARG3:instrument, marker [mark.xml]
   LexSem("V","mark",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("mark"),arg1,pp("on",arg2),pp("with",arg3)))),

 'mark-down-05': # ARG0:entity setting price / ARG1:commodity [mark.xml]
   LexSem("V","mark",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mark"),Adv("down"),arg1))),

 'mark-up-03': # ARG0:annotator / ARG1:document / ARG2:annotation [mark.xml]
   LexSem("V","mark",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mark"),Adv("up"),arg1,pp("with",arg2)))),

 'mark-up-04': # ARG0:entity setting price / ARG1:commodity [mark.xml]
   LexSem("V","mark",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mark"),Adv("up"),arg1))),

 'market-01': # ARG0:Seller / ARG1:Thing Sold / ARG2:Buyer / ARG3:attribute / ARG4:Benefactive [market.xml]
   LexSem("V","market",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("market"),arg1,pp("toward",arg2),pp("as",arg3),pp("for",arg4)))),

 'marry-01': # ARG0:causer / ARG1:one half / ARG2:second half [marry.xml]
   LexSem("V","marry",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("marry"),arg1,arg2))),

 'marshal-01': # ARG0:gatherer / ARG1:thing gathered [marshal.xml]
   LexSem("V","marshal",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("marshal"),arg1))),

 'martyr-01': # ARG0:authority, killer / ARG1:martyred [martyr.xml]
   LexSem("V","martyr",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("martyr"),arg1))),

 'marvel-01': # ARG0:experiencer of marvelation :) / ARG1:marvellous thing [marvel.xml]
   LexSem("V","marvel",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("marvel"),pp("at",arg1)))),

 'marvel-02': # ARG0:speaker / ARG1:utterance / ARG2:listener [marvel.xml]
   LexSem("V","marvel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("marvel"),arg1,arg2))),

 'mash-01': # ARG0:causer of mashing / ARG1:patient of mashing [mash.xml]
   LexSem("V","mash",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mash"),arg1))),

 'mask-01': # ARG0:coverer / ARG1:thing covered / ARG2:instrument, mask [mask.xml]
   LexSem("V","mask",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mask"),arg1,arg2))),

 'masquerade-01': # ARG0:disguised thing / ARG1:disguise, secondary predicate [masquerade.xml]
   LexSem("V","masquerade",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("masquerade"),pp("as",arg1)))),

 'mass-01': # ARG0:people gathered [mass.xml]
   LexSem("V","mass",[":ARG0"],lambda arg0:S(arg0,VP(V("mass")))),

 'massacre-01': # ARG0:killer / ARG1:corpse / ARG2:instrument [massacre.xml]
   LexSem("V","massacre",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("massacre"),arg1,arg2))),

 'massage-01': # ARG0:masseur/masseuse / ARG1:lucky patient [massage.xml]
   LexSem("V","massage",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("massage"),arg1))),

 'massproduce-01': # ARG0:creator / ARG1:creation / ARG2:created-from, thing changed / ARG3:benefactive [massproduce.xml]
   LexSem("V","mass-produce",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("mass-produce"),arg1,arg2,pp("for",arg3)))),

 'master-01': # ARG0:master / ARG1:thing mastered [master.xml]
   LexSem("V","master",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("master"),arg1))),

 'mastermind-01': # ARG0:planner / ARG1:thing planned / ARG2:grounds for planning / ARG3:beneficiary [mastermind.xml]
   LexSem("V","mastermind",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("mastermind"),arg1,arg2,arg3))),

 'masticate-01': # ARG0:chewer / ARG1:meal [masticate.xml]
   LexSem("V","masticate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("masticate"),arg1))),

 'match-01': # ARG0:person performing match / ARG1:first matching object / ARG2:second object, matches what [match.xml]
   LexSem("V","match",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("match"),arg1,pp("with",arg2)))),

 'match-up-02': # ARG0:entity performing the match / ARG1:first matching object / ARG2:second thing, matches what [match.xml]
   LexSem("V","match",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("match"),Adv("up"),arg1,pp("with",arg2)))),

 'mate-01': # ARG0:joiner / ARG1:first thing, or both things / ARG2:second thing, if separate [mate.xml]
   LexSem("V","mate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mate"),arg1,pp("with",arg2)))),

 'mate-02': # ARG0:outside agent / ARG1:first party (or all parties) / ARG2:second party [mate.xml]
   LexSem("V","mate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mate"),arg1,pp("with",arg2)))),

 'materialize-01': # ARG1:thing appearing, materializing [materialize.xml]
   LexSem("V","materialize",[":ARG1"],lambda arg1:S(arg1,VP(V("materialize")))),

 'matter-01': # ARG1:thing that matters / ARG2:matters to whom [matter.xml]
   LexSem("V","matter",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("matter"),pp("to",arg2)))),

 'maturate-03': # ARG0:agent causing maturity in arg1 / ARG1:thing becoming mature / ARG2:start state / ARG3:end state [mature.xml]
   LexSem("V","maturate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("maturate"),arg1,pp("from",arg2),pp("into",arg3)))),

 'mature-01': # ARG1:thing aging [mature.xml]
   LexSem("V","mature",[":ARG1"],lambda arg1:S(arg1,VP(V("mature")))),

 'maul-01': # ARG0:violent entity / ARG1:entity mauled [maul.xml]
   LexSem("V","maul",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("maul"),arg1))),

 'maunder-01': # ARG1:wanderer / ARG2:path, range wandered [maunder.xml]
   LexSem("V","maunder",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("maunder"),pp("about",arg2)))),

 'maunder-02': # ARG0:speaker / ARG1:utterance, topic / ARG2:listener [maunder.xml]
   LexSem("V","maunder",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("maunder"),arg1,pp("to",arg2)))),

 'maximize-01': # ARG0:causer, agent / ARG1:thing which is being the most [maximize.xml]
   LexSem("V","maximize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("maximize"),arg1))),

 'mean-01': # ARG0:agent / ARG1:element containing meaning / ARG2:meaning / ARG3:perceiver, beneficiary [mean.xml]
   LexSem("V","mean",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("mean"),arg1,arg2,pp("for",arg3)))),

 'mean-02': # ARG0:agent / ARG1:thing intended / ARG2:beneficiary, meant for [mean.xml]
   LexSem("V","mean",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mean"),arg1,pp("for",arg2)))),

 'meander-01': # ARG0:entity in motion / ARG1:path [meander.xml]
   LexSem("V","meander",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("meander"),pp("through",arg1)))),

 'measure-01': # ARG0:measurer / ARG1:thing measured / ARG2:yardstick, standard of measurement / ARG3:measurement [measure.xml]
   LexSem("V","measure",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("measure"),arg1,pp("against",arg2),pp("to",arg3)))),

 'mechanize-01': # ARG0:agent / ARG1:entity mechanized / ARG2:instrument [mechanize.xml]
   LexSem("V","mechanize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mechanize"),arg1,arg2))),

 'meddle-01': # ARG0:meddler / ARG1:thing meddled in / ARG2:specific aspect of arg being interfered with [meddle.xml]
   LexSem("V","meddle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("meddle"),pp("in",arg1),arg2))),

 'mediate-01': # ARG0:resolver, agent / ARG1:thing mediated / ARG2:mediated between [mediate.xml]
   LexSem("V","mediate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mediate"),arg1,pp("between",arg2)))),

 'medicate-01': # ARG0:doctor / ARG1:patient / ARG2:medication / ARG3:illness [medicate.xml]
   LexSem("V","medicate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("medicate"),pp("of",arg1),pp("with",arg2),arg3))),

 'meditate-01': # ARG0:thinker / ARG1:thought about [meditate.xml]
   LexSem("V","meditate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("meditate"),pp("on",arg1)))),

 'meet-01': # ARG0:achiever, agent / ARG1:goal [meet.xml]
   LexSem("V","meet",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("meet"),arg1))),

 'meet-02': # ARG0:meeter / ARG1:person / entity / object being met [meet.xml]
   LexSem("V","meet",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("meet"),arg1))),

 'meet-03': # ARG0:one party / ARG1:other party [meet.xml]
   LexSem("V","meet",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("meet"),pp("with",arg1)))),

 'meet-05': # ARG0:agentive answerer / ARG1:thing met/answered / ARG2:with what [meet.xml]
   LexSem("V","meet",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("meet"),arg1,pp("with",arg2)))),

 'meet-up-04': # ARG0:first (or only mentioned plural) party / ARG1:other party (when separate mention) [meet.xml]
   LexSem("V","meet",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("meet"),Adv("up"),arg1))),

 'meld-01': # ARG0:mixer, agent / ARG1:first ingredient, theme / ARG2:melded with [meld.xml]
   LexSem("V","meld",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("meld"),arg1,pp("with",arg2)))),

 'mellow-01': # ARG1:entity become mellow / ARG2:instrument [mellow.xml]
   LexSem("V","mellow",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("mellow"),pp("through",arg2)))),

 'mellow-out-02': # ARG1:entity becoming mellow / ARG2:instrument [mellow.xml]
   LexSem("V","mellow",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("mellow"),Adv("out"),arg2))),

 'melt-01': # ARG0:agent / ARG1:thing melted [melt.xml]
   LexSem("V","melt",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("melt"),arg1))),

 'memorialize-01': # ARG0:maker of memorial, memorial itself, or agent / ARG1:entity remembered [memorialize.xml]
   LexSem("V","memorialize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("memorialize"),arg1))),

 'memorize-01': # ARG0:memorizer / ARG1:thing memorized [memorize.xml]
   LexSem("V","memorize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("memorize"),arg1))),

 'menace-01': # ARG0:threatening agent / ARG1:entity threatened / ARG2:Instrument or Manner if separate from Arg 0 [menace.xml]
   LexSem("V","menace",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("menace"),arg1,pp("by",arg2)))),

 'mend-01': # ARG0:mender / ARG1:mended [mend.xml]
   LexSem("V","mend",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mend"),arg1))),

 'mention-01': # ARG0:speaker / ARG1:utterance, entity being mentioned / ARG2:hearer / ARG3:secondary attribute of arg1 [mention.xml]
   LexSem("V","mention",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("mention"),arg1,pp("to",arg2),pp("as",arg3)))),

 'mentor-01': # ARG0:entity acting as mentor / ARG1:entity getting advice, mentee / ARG2:area, subject of mentoring [mentor.xml]
   LexSem("V","mentor",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mentor"),pp("to",arg1),arg2))),

 'meow-01': # ARG0:meow-er [meow.xml]
   LexSem("V","meow",[":ARG0"],lambda arg0:S(arg0,VP(V("meow")))),

 'merchandise-01': # ARG0:seller, agent / ARG1:patient, thing merchandized [merchandise.xml]
   LexSem("V","merchandise",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("merchandise"),arg1))),

 'merge-01': # ARG0:agent, mixer / ARG1:ingredient one / ARG2:ingredient two / ARG3:end product [merge.xml]
   LexSem("V","merge",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("merge"),arg1,pp("with",arg2),arg3))),

 'merit-01': # ARG0:thing worthy / ARG1:thing worthy of [merit.xml]
   LexSem("V","merit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("merit"),arg1))),

 'mesh-01': # ARG0:causer of coordination, agent / ARG1:entity coordinated / ARG2:entity coordinated with [mesh.xml]
   LexSem("V","mesh",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mesh"),arg1,pp("with",arg2)))),

 'mesmerize-01': # ARG0:mesmerizer / ARG1:mesmerized, victim / ARG2:instrument, if separate from arg 0 [mesmerize.xml]
   LexSem("V","mesmerize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mesmerize"),arg1,pp("with",arg2)))),

 'mess-01': # ARG0:messer / ARG1:messed with [mess.xml]
   LexSem("V","mess",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mess"),pp("with",arg1)))),

 'mess-up-02': # ARG0:causer/agent / ARG1:thing messed up [mess.xml]
   LexSem("V","mess",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mess"),Adv("up"),arg1))),

 'message-01': # ARG0:person communicating a message, agent / ARG1:message itself / ARG2:receiver, recipient of message [message.xml]
   LexSem("V","message",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("message"),arg1,arg2))),

 'metabolize-01': # ARG0:causer of change / ARG1:thing changing / ARG2:source, original substance [metabolize.xml]
   LexSem("V","metabolize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("metabolize"),arg1,pp("from",arg2)))),

 'metamorphose-01': # ARG0:causer of change / ARG1:thing changing / ARG2:end state / ARG3:start state [metamorphose.xml]
   LexSem("V","metamorphose",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("metamorphose"),arg1,pp("into",arg2),pp("from",arg3)))),

 'metastasize-101': # ARG1:Disease or tumor undergoing metastasis / ARG2:Destination [metastasize.xml]
   LexSem("V","metastasize",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("metastasize"),pp("to",arg2)))),

 'methinks-05': # ARG1:thing that seems; thing thought [think.xml]
   LexSem("V","methinks",[":ARG1"],lambda arg1:S(arg1,VP(V("methinks")))),

 'methylate-01': # ARG0:agent/causer of methylation (e.g. scientist) / ARG1:entity methylated / ARG2:instrument (e.g. enzyme) / ARG3:resulting state of modification [methylate.xml]
   LexSem("V","methylate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("methylate"),arg1,arg2,arg3))),

 'mew-01': # ARG0:cat [mew.xml]
   LexSem("V","mew",[":ARG0"],lambda arg0:S(arg0,VP(V("mew")))),

 'mic-01': # ARG0:Agent, setter up / ARG1:entity wired / ARG2:other entity or end state [mic.xml]
   LexSem("V","mic",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mic"),arg1,arg2))),

 'mic-up-02': # ARG0:cause of attachment / ARG1:entity wired [mic.xml]
   LexSem("V","mic",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mic"),Adv("up"),arg1))),

 'microfilm-01': # ARG0:recorder, filmer / ARG1:thing recorded, filmed [microfilm.xml]
   LexSem("V","microfilm",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("microfilm"),arg1))),

 'microinject-01': # ARG0:intentional agent, injector / ARG1:substance being injected / ARG2:injected into [microinject.xml]
   LexSem("V","microinject",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("microinject"),pp("with",arg1),arg2))),

 'microwave-01': # ARG0:cook / ARG1:food [microwave.xml]
   LexSem("V","microwave",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("microwave"),arg1))),

 'miff-01': # ARG0:annoyer / ARG1:thing annoyed / ARG2:instrument, if separate from arg0 [miff.xml]
   LexSem("V","miff",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("miff"),arg1,pp("by",arg2)))),

 'migrate-01': # ARG0:entity in motion / ARG1:path, border being crossed / ARG2:destination [migrate.xml]
   LexSem("V","migrate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("migrate"),pp("across",arg1),pp("to",arg2)))),

 'militarize-01': # ARG0:agent / ARG1:military presence arg2 is equiped with (troops, weapons, etc.) / ARG2:entity/location equiped [militarize.xml]
   LexSem("V","militarize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("militarize"),pp("with",arg1),arg2))),

 'militate-01': # ARG0:arguer / ARG1:against what [militate.xml]
   LexSem("V","militate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("militate"),pp("against",arg1)))),

 'milk-01': # ARG0:farmer / ARG1:milk / ARG2:cow [milk.xml]
   LexSem("V","milk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("milk"),arg1,arg2))),

 'milk-02': # ARG0:milker, agent / ARG1:thing milked / ARG2:for all it's worth [milk.xml]
   LexSem("V","milk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("milk"),arg1,pp("for",arg2)))),

 'mill-01': # ARG0:grinder / ARG1:whole / ARG2:powder, pieces [mill.xml]
   LexSem("V","mill",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mill"),arg1,pp("into",arg2)))),

 'mill-02': # ARG0:entity in motion / ARG1:path or range [mill.xml]
   LexSem("V","mill",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mill"),pp("through",arg1)))),

 'mime-01': # ARG0:mime / ARG1:entity or motion mimed [mime.xml]
   LexSem("V","mime",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mime"),arg1))),

 'mimeograph-01': # ARG0:printer, agent / ARG1:thing printed or created [mimeograph.xml]
   LexSem("V","mimeograph",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mimeograph"),arg1))),

 'mimic-01': # ARG0:copy / ARG1:original [mimic.xml]
   LexSem("V","mimic",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mimic"),arg1))),

 'mince-01': # ARG0:entity in motion / ARG1:path [mince.xml]
   LexSem("V","mince",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mince"),pp("across",arg1)))),

 'mince-02': # ARG0:cook / ARG1:ingredient / ARG2:knife [mince.xml]
   LexSem("V","mince",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mince"),arg1,pp("with",arg2)))),

 'mind-01': # ARG0:entity being bothered / ARG1:bothered by [mind.xml]
   LexSem("V","mind",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mind"),arg1))),

 'mind-02': # ARG0:caregiver / ARG1:patient [mind.xml]
   LexSem("V","mind",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mind"),arg1))),

 'mind-03': # ARG0:noter / ARG1:yourself [mind.xml]
   LexSem("V","mind",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mind"),arg1))),

 'mind-15': # ARG0:attender / ARG1:entity attended to [mind.xml]
   LexSem("V","mind",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mind"),pp("to",arg1)))),

 'mine-01': # ARG0:miner, agent / ARG1:thing extracted [mine.xml]
   LexSem("V","mine",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mine"),arg1))),

 'mineralize-01': # ARG0:cause of mineralization / ARG1:entity mineralized [mineralize.xml]
   LexSem("V","mineralize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mineralize"),arg1))),

 'mingle-01': # ARG0:first or all thing(s) mingling / ARG1:additional things, if syntactically separate [mingle.xml]
   LexSem("V","mingle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mingle"),pp("with",arg1)))),

 'mingle-02': # ARG0:intentional agent / ARG1:first (or all) ingredient(s) / ARG2:additional ingredients, when syntactically separate [mingle.xml]
   LexSem("V","mingle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mingle"),arg1,pp("with",arg2)))),

 'miniaturize-01': # ARG0:cause of smallness, agent / ARG1:small thing [miniaturize.xml]
   LexSem("V","miniaturize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("miniaturize"),arg1))),

 'minimize-01': # ARG0:causer of smallness / ARG1:minimal thing [minimize.xml]
   LexSem("V","minimize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("minimize"),arg1))),

 'minister-01': # ARG0:minister / ARG1:entity getting advice, ministered / ARG2:area, subject of ministering [minister.xml]
   LexSem("V","minister",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("minister"),arg1,arg2))),

 'mint-01': # ARG0:creator / ARG1:thing created / ARG2:source / ARG3:benefactive / ARG4:attribute, secondary predication [mint.xml]
   LexSem("V","mint",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("mint"),arg1,pp("from",arg2),arg3,arg4))),

 'mire-01': # ARG1:entity stuck / ARG2:stuck in what? [mire.xml]
   LexSem("V","mire",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("mire"),pp("in",arg2)))),

 'mirror-01': # ARG1:thing casting a reflection / ARG2:surface casting the reflection, image being reflected [mirror.xml]
   LexSem("V","mirror",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("mirror"),arg2))),

 'misapprehend-01': # ARG0:interpreter / ARG1:misinterpreted message [misapprehend.xml]
   LexSem("V","misapprehend",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("misapprehend"),arg1))),

 'misappropriate-01': # ARG0:embezzler / ARG1:thing embezzled / ARG2:source [misappropriate.xml]
   LexSem("V","misappropriate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("misappropriate"),arg1,arg2))),

 'misbehave-01': # ARG0:agent, entity behaving / ARG1:manner, unlikely argument as "badly" is understood [misbehave.xml]
   LexSem("V","misbehave",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("misbehave"),arg1))),

 'miscalculate-01': # ARG0:calculator, agent / ARG1:thing calculated / ARG2:attribute [miscalculate.xml]
   LexSem("V","miscalculate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("miscalculate"),arg1,pp("as",arg2)))),

 'mischaracterize-01': # ARG0:describer, person assigning label / ARG1:thing described / ARG2:secondary attribute, misdescribed-as [mischaracterize.xml]
   LexSem("V","mischaracterize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mischaracterize"),arg1,arg2))),

 'misconduct-01': # ARG0:agent, one behaving badly / ARG1:the type of misconduct / ARG2:the context of misconduct / ARG3:the victim of misconduct  [misconduct.xml]
   LexSem("V","misconduct",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("misconduct"),arg1,pp("in",arg2),pp("against",arg3)))),

 'misconstrue-01': # ARG0:interpreter, agent / ARG1:entity misconstrued [misconstrue.xml]
   LexSem("V","misconstrue",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("misconstrue"),arg1))),

 'misdiagnose-01': # ARG0:doctor / ARG1:patient / ARG2:illness [misdiagnose.xml]
   LexSem("V","misdiagnose",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("misdiagnose"),arg1,pp("with",arg2)))),

 'misdirect-01': # ARG0:leader / ARG1:thing lead astray [misdirect.xml]
   LexSem("V","misdirect",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("misdirect"),arg1))),

 'misfire-01': # ARG1:gun [misfire.xml]
   LexSem("V","misfire",[":ARG1"],lambda arg1:S(arg1,VP(V("misfire")))),

 'misguide-01': # ARG0:agent, causer of misdirection / ARG1:misguided one / ARG2:misguided actions [misguide.xml]
   LexSem("V","misguide",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("misguide"),arg1,pp("in",arg2)))),

 'mishandle-01': # ARG0:mishandler, agent / ARG1:entity mishandled [mishandle.xml]
   LexSem("V","mishandle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mishandle"),arg1))),

 'misinform-01': # ARG0:misinformer / ARG1:misinformed / ARG2:misinformation [misinform.xml]
   LexSem("V","misinform",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("misinform"),arg1,arg2))),

 'misinterpret-01': # ARG0:explainer, agent / ARG1:entity misinterpreted / ARG2:attribute [misinterpret.xml]
   LexSem("V","misinterpret",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("misinterpret"),arg1,pp("as",arg2)))),

 'misjudge-01': # ARG0:judger / ARG1:thing judged [misjudge.xml]
   LexSem("V","misjudge",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("misjudge"),arg1))),

 'mislay-01': # ARG0:who put something down, agent / ARG1:entity mislaid [mislay.xml]
   LexSem("V","mislay",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mislay"),arg1))),

 'mislead-01': # ARG0:liar liar / ARG1:lied to / ARG2:with respect to [mislead.xml]
   LexSem("V","mislead",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mislead"),arg1,pp("about",arg2)))),

 'mislead-02': # ARG0:causal agent, misleader / ARG1:impelled agent / ARG2:impelled action [mislead.xml]
   LexSem("V","mislead",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mislead"),arg1,pp("into",arg2)))),

 'mismanage-01': # ARG0:manager / ARG1:thing mismanaged [mismanage.xml]
   LexSem("V","mismanage",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mismanage"),arg1))),

 'misperceive-01': # ARG0:perceiver / ARG1:thing misperceived / ARG2:as what, attribute of arg1 [misperceive.xml]
   LexSem("V","misperceive",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("misperceive"),arg1,pp("as",arg2)))),

 'misplace-01': # ARG0:who put something down, agent / ARG1:entity misplaced [misplace.xml]
   LexSem("V","misplace",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("misplace"),arg1))),

 'misquote-01': # ARG0:speaker / ARG1:thing misquoted / ARG2:listener [misquote.xml]
   LexSem("V","misquote",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("misquote"),arg1,pp("to",arg2)))),

 'misread-01': # ARG0:misreader, agent / ARG1:misread entity / ARG2:(false) attribute of Arg1 [misread.xml]
   LexSem("V","misread",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("misread"),arg1,arg2))),

 'misrepresent-01': # ARG0:misrepresenter / ARG1:thing portrayed / ARG2:attribute [misrepresent.xml]
   LexSem("V","misrepresent",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("misrepresent"),arg1,pp("as",arg2)))),

 'miss-01': # ARG0:misser, entity/plac/source that lacks arg1 / ARG1:thing longed for, thing lacking [miss.xml]
   LexSem("V","miss",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("miss"),arg1))),

 'miss-02': # ARG0:misser / ARG1:missed / ARG2:instrument [miss.xml]
   LexSem("V","miss",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("miss"),arg1,pp("with",arg2)))),

 'miss-out-03': # ARG0:entity missing something / ARG1:thing missed [miss.xml]
   LexSem("V","miss",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("miss"),Adv("out"),pp("on",arg1)))),

 'mission-01': # ARG0:agent/entity trying / ARG1:(purpose of) attempt / ARG2:(anti)benefactive [mission.xml]
   LexSem("V","mission",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mission"),arg1,pp("against",arg2)))),

 'misspell-01': # ARG0:misspeller / ARG1:misspelled thing / ARG2:destination [misspell.xml]
   LexSem("V","misspell",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("misspell"),arg1,pp("on",arg2)))),

 'misspend-01': # ARG0:misspender / ARG1:thing wasted / ARG2:misspent how, on what [misspend.xml]
   LexSem("V","misspend",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("misspend"),arg1,arg2))),

 'misstate-01': # ARG0:speaker, agent / ARG1:entity misstated [misstate.xml]
   LexSem("V","misstate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("misstate"),arg1))),

 'mist-01': # ARG0:Agent causing the mist / ARG1:thing becoming opaque with mist / ARG2:the mist [mist.xml]
   LexSem("V","mist",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mist"),arg1,pp("with",arg2)))),

 'mist-02': # ARG0:Agent, person doing the spraying / ARG1:destination of the spray / ARG2:the spray itself [mist.xml]
   LexSem("V","mist",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mist"),arg1,pp("with",arg2)))),

 'mist-03': # ARG1:the droplets of mist themselves (or cognate) [mist.xml]
   LexSem("V","mist",[":ARG1"],lambda arg1:S(arg1,VP(V("mist")))),

 'mist-over-05': # ARG0:Agent causing the mist / ARG1:thing becoming opaque with mist / ARG2:the mist [mist.xml]
   LexSem("V","mist",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mist"),Adv("over"),arg1,arg2))),

 'mist-up-04': # ARG0:Agent causing the mist / ARG1:thing becoming opaque with mist / ARG2:the mist [mist.xml]
   LexSem("V","mist",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mist"),Adv("up"),arg1,arg2))),

 'mistake-01': # ARG0:entity making an assumption, agent / ARG1:thing mistaken / ARG2:frequently: assumption [mistake.xml]
   LexSem("V","mistake",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mistake"),arg1,pp("for",arg2)))),

 'mistime-01': # ARG0:measurer / ARG1:thing measured / ARG2:yardstick, standard of measurement / ARG3:by how much? value [mistime.xml]
   LexSem("V","mistime",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("mistime"),arg1,arg2,pp("by",arg3)))),

 'mistreat-01': # ARG0:mistreater, agent / ARG1:mistreated person [mistreat.xml]
   LexSem("V","mistreat",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mistreat"),arg1))),

 'mistrust-01': # ARG0:mistruster / ARG1:something / ARG2:someone [mistrust.xml]
   LexSem("V","mistrust",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mistrust"),pp("of",arg1),arg2))),

 'misunderstand-01': # ARG0:understander / ARG1:thing misunderstood / ARG2:as what, attribute of arg1 / ARG3:specific aspect/domain of arg1 that is being misunderstood [misunderstand.xml]
   LexSem("V","misunderstand",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("misunderstand"),arg1,pp("as",arg2),arg3))),

 'misuse-01': # ARG0:User / ARG1:thing used [misuse.xml]
   LexSem("V","misuse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("misuse"),arg1))),

 'mitigate-01': # ARG0:reducer / ARG1:thing reduced [mitigate.xml]
   LexSem("V","mitigate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mitigate"),arg1))),

 'mix-01': # ARG0:agent, mixer / ARG1:ingredient one / ARG2:ingredient two / ARG3:end product [mix.xml]
   LexSem("V","mix",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("mix"),arg1,pp("with",arg2),pp("to",arg3)))),

 'mix-up-02': # ARG0:agent, mixer / ARG1:ingredient one / ARG2:ingredient two / ARG3:end product [mix.xml]
   LexSem("V","mix",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("mix"),Adv("up"),arg1,arg2,arg3))),

 'mix-up-03': # ARG0:agent, mixer / ARG1:first thing confused / ARG2:confused with what [mix.xml]
   LexSem("V","mix",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mix"),Adv("up"),arg1,arg2))),

 'mizzle-01': # ARG0:causer of rain / ARG1:rain; thing mizzling [mizzle.xml]
   LexSem("V","mizzle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mizzle"),arg1))),

 'moan-01': # ARG0:moaner, agent / ARG1:a complaint [moan.xml]
   LexSem("V","moan",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("moan"),pp("about",arg1)))),

 'mob-02': # ARG0:agentive thing too close / ARG1:thing too close to [mob.xml]
   LexSem("V","mob",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mob"),arg1))),

 'mobilize-01': # ARG0:mobilizer / ARG1:thing mobilized [mobilize.xml]
   LexSem("V","mobilize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mobilize"),arg1))),

 'mock-01': # ARG0:mocker / ARG1:mocked / ARG2:reason, what's so funny [mock.xml]
   LexSem("V","mock",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mock"),arg1,pp("for",arg2)))),

 'model-01': # ARG0:agent, causer / ARG1:entity modelled / ARG2:source [model.xml]
   LexSem("V","model",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("model"),arg1,pp("on",arg2)))),

 'model-02': # ARG0:fashion model / ARG1:garment, thing being modeled. [model.xml]
   LexSem("V","model",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("model"),arg1))),

 'modem-01': # ARG0:sender, agent / ARG1:entity sent, faxed / ARG2:sent to, recipient [modem.xml]
   LexSem("V","modem",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("modem"),arg1,pp("to",arg2)))),

 'moderate-01': # ARG0:moderator / ARG1:thing that would be extreme otherwise / ARG2:specific aspect of arg1 that is moderate [moderate.xml]
   LexSem("V","moderate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("moderate"),arg1,arg2))),

 'moderate-02': # ARG0:leader / ARG1:group lead or monitored [moderate.xml]
   LexSem("V","moderate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("moderate"),arg1))),

 'modernize-01': # ARG0:modernizer / ARG1:thing being modernized [modernize.xml]
   LexSem("V","modernize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("modernize"),arg1))),

 'modify-01': # ARG0:causer of transformation / ARG1:thing changing / ARG2:end state / ARG3:start state [modify.xml]
   LexSem("V","modify",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("modify"),arg1,pp("to",arg2),pp("from",arg3)))),

 'modulate-01': # ARG0:composer / ARG1:music / ARG2:from / ARG3:to [modulate.xml]
   LexSem("V","modulate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("modulate"),arg1,pp("from",arg2),pp("to",arg3)))),

 'moil-01': # ARG0:laborer / ARG1:task [moil.xml]
   LexSem("V","moil",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("moil"),pp("at",arg1)))),

 'moil-02': # ARG1:churning thing / ARG2:location, destination [moil.xml]
   LexSem("V","moil",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("moil"),pp("toward",arg2)))),

 'moisten-01': # ARG0:causer of moistening, agent / ARG1:thing becoming moist / ARG2:mention of liquid that moistens [moisten.xml]
   LexSem("V","moisten",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("moisten"),arg1,pp("with",arg2)))),

 'moisturize-01': # ARG0:agent of moisturizing, entity putting lotion on / ARG1:thing moisturized, skin / ARG2:instrument, lotion or other liquid put on arg 1 [moisturize.xml]
   LexSem("V","moisturize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("moisturize"),arg1,arg2))),

 'mold-01': # ARG0:shaper / ARG1:thing worked on / ARG2:end state, if different from arg1 [mold.xml]
   LexSem("V","mold",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mold"),arg1,pp("into",arg2)))),

 'molder-01': # ARG0:cause, agent / ARG1:patient, thing crumbled / ARG2:end state [molder.xml]
   LexSem("V","molder",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("molder"),arg1,pp("into",arg2)))),

 'molest-01': # ARG0:molester, agent / ARG1:entity molested [molest.xml]
   LexSem("V","molest",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("molest"),arg1))),

 'mollify-01': # ARG0:Stimulus / ARG1:patient, made happy / ARG2:instrument or manner [mollify.xml]
   LexSem("V","mollify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mollify"),arg1,arg2))),

 'molt-01': # ARG0:cause, agent / ARG1:patient, thing undergoing molting / ARG2:end state [molt.xml]
   LexSem("V","molt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("molt"),arg1,pp("into",arg2)))),

 'monetize-01': # ARG0:agent, Mr. Nice Guy / ARG1:theme, debt [monetize.xml]
   LexSem("V","monetize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("monetize"),arg1))),

 'money-01': # ARG0:provider / ARG1:project/person/cause given money / ARG2:funds themselves? [money.xml]
   LexSem("V","money",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("money"),arg1,pp("with",arg2)))),

 'monitor-01': # ARG0:observer / ARG1:thing looked at / ARG2:looking for what? [monitor.xml]
   LexSem("V","monitor",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("monitor"),arg1,pp("for",arg2)))),

 'monkey-around-01': # ARG0:entity wasting time, fiddling / ARG1:cause, manner, thing arg 1 fiddling around with [monkey.xml]
   LexSem("V","monkey",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("monkey"),Adv("around"),pp("with",arg1)))),

 'monogram-01': # ARG0:attacher of label, agent / ARG1:entity tagged / ARG2:label [monogram.xml]
   LexSem("V","monogram",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("monogram"),pp("on",arg1),arg2))),

 'monopolize-01': # ARG0:monopolist, agent / ARG1:entity monopolized [monopolize.xml]
   LexSem("V","monopolize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("monopolize"),arg1))),

 'moo-01': # ARG0:cow [moo.xml]
   LexSem("V","moo",[":ARG0"],lambda arg0:S(arg0,VP(V("moo")))),

 'mooch-01': # ARG0:moocher / ARG1:thing taken / ARG2:source [mooch.xml]
   LexSem("V","mooch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mooch"),arg1,pp("off",arg2)))),

 'moon-01': # ARG0:dreamer / ARG1:dream [moon.xml]
   LexSem("V","moon",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("moon"),pp("over",arg1)))),

 'moon-02': # ARG0:mooner / ARG1:mooned [moon.xml]
   LexSem("V","moon",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("moon"),arg1))),

 'moonlight-01': # ARG0:moonlighter / ARG1:(second) job [moonlight.xml]
   LexSem("V","moonlight",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("moonlight"),pp("as",arg1)))),

 'moor-01': # ARG0:agent, docker / ARG1:thing docked, ship / ARG2:Destination (the dock) [moor.xml]
   LexSem("V","moor",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("moor"),arg1,pp("in",arg2)))),

 'moot-01': # ARG0:thinker / ARG1:object, thing under consideration [moot.xml]
   LexSem("V","moot",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("moot"),arg1))),

 'mop-01': # ARG0:mopper / ARG1:surface (ie, floor) / ARG2:instrument (defaults to 'mop') [mop.xml]
   LexSem("V","mop",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mop"),arg1,pp("with",arg2)))),

 'mope-01': # ARG0:moper / ARG1:about what? [mope.xml]
   LexSem("V","mope",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mope"),pp("about",arg1)))),

 'moped-01': # ARG0:agent, driver (transitive subject) / ARG1:thing moved (intransitive subject, transitive object) / ARG2:locations, or start point / ARG3:destination [moped.xml]
   LexSem("V","moped",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("moped"),arg1,arg2,pp("to",arg3)))),

 'moralize-01': # ARG0:agent / ARG1:entity moralized / ARG2:moralized about? [moralize.xml]
   LexSem("V","moralize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("moralize"),pp("to",arg1),pp("about",arg2)))),

 'morph-01': # ARG0:causer of transformation / ARG1:thing changing / ARG2:end state / ARG3:start state [morph.xml]
   LexSem("V","morph",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("morph"),arg1,arg2,arg3))),

 'mortgage-01': # ARG0:mortgager / ARG1:possession(s) / ARG2:provider of money / ARG3:money [mortgage.xml]
   LexSem("V","mortgage",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("mortgage"),arg1,pp("to",arg2),pp("for",arg3)))),

 'mortify-01': # ARG0:Cause of mortification / ARG1:entity mortified / ARG2:Instrument or Manner if separate from arg 0 [mortify.xml]
   LexSem("V","mortify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mortify"),arg1,arg2))),

 'mortify-02': # ARG0:agent of repression / ARG1:thing repressed [mortify.xml]
   LexSem("V","mortify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mortify"),arg1))),

 'mosey-01': # ARG1:entity moseying / ARG2:start point / ARG3:end point [mosey.xml]
   LexSem("V","mosey",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("mosey"),arg2,pp("up",arg3)))),

 'mother-01': # ARG0:mother-er / ARG1:mothered [mother.xml]
   LexSem("V","mother",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mother"),arg1))),

 'motion-01': # ARG0:gesturer / ARG1:gestured at / ARG2:for what [motion.xml]
   LexSem("V","motion",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("motion"),pp("to",arg1),arg2))),

 'motivate-01': # ARG0:motivation / ARG1:impelled agent / ARG2:impelled action [motivate.xml]
   LexSem("V","motivate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("motivate"),arg1,pp("to",arg2)))),

 'motivate-02': # ARG0:justifier / ARG1:decision or attitude being shown to be right / ARG2:explicit instrument / ARG3:secondary predication on arg1 / ARG4:benefactive, justified to [motivate.xml]
   LexSem("V","motivate",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("motivate"),arg1,pp("by",arg2),pp("as",arg3),pp("to",arg4)))),

 'motor-01': # ARG0:agent, driver (transitive subject) / ARG1:thing moved (intransitive subject, transitive object) / ARG2:locations, or start point / ARG3:destination [motor.xml]
   LexSem("V","motor",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("motor"),arg1,arg2,pp("to",arg3)))),

 'motorbike-01': # ARG0:agent, driver (transitive subject) / ARG1:thing moved (intransitive subject, transitive object) / ARG2:locations, or start point / ARG3:destination [motorbike.xml]
   LexSem("V","motorbike",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("motorbike"),arg1,arg2,arg3))),

 'motorcycle-01': # ARG0:agent, driver (transitive subject) / ARG1:thing moved (intransitive subject, transitive object) / ARG2:locations, or start point / ARG3:destination [motorcycle.xml]
   LexSem("V","motorcycle",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("motorcycle"),arg1,pp("through",arg2),arg3))),

 'motorize-01': # ARG0:attacher of motor / ARG1:thing with motor [motorize.xml]
   LexSem("V","motorize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("motorize"),arg1))),

 'mottle-01': # ARG0:mottler / ARG1:thing mottled / ARG2:dots or splotch [mottle.xml]
   LexSem("V","mottle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mottle"),arg1,pp("with",arg2)))),

 'moult-01': # ARG0:cause, agent / ARG1:patient, thing undergoing moulting / ARG2:end state [moult.xml]
   LexSem("V","moult",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("moult"),arg1,pp("into",arg2)))),

 'mound-01': # ARG0:loader, agent / ARG1:beast of burden / ARG2:cargo / ARG3:instrument [mound.xml]
   LexSem("V","mound",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("mound"),pp("into",arg1),arg2,arg3))),

 'mount-01': # ARG0:climber / ARG1:thing climbed (clomb?) [mount.xml]
   LexSem("V","mount",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mount"),arg1))),

 'mount-02': # ARG1:climber / ARG2:EXT, amount risen / ARG3:start point / ARG4:end point [mount.xml]
   LexSem("V","mount",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("mount"),arg2,arg3,arg4))),

 'mount-03': # ARG0:erector / ARG1:thing erected [mount.xml]
   LexSem("V","mount",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mount"),arg1))),

 'mourn-01': # ARG0:griever, agent / ARG1:entity mourning for [mourn.xml]
   LexSem("V","mourn",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mourn"),pp("for",arg1)))),

 'mouth-01': # ARG0:speaker / ARG1:utterance / ARG2:hearer [mouth.xml]
   LexSem("V","mouth",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mouth"),arg1,pp("at",arg2)))),

 'move-01': # ARG0:mover / ARG1:moved / ARG2:destination / ARG3:aspect, domain in which arg1 moving [move.xml]
   LexSem("V","move",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("move"),arg1,pp("to",arg2),pp("in",arg3)))),

 'move-02': # ARG0:mover / ARG1:measures [move.xml]
   LexSem("V","move",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("move"),arg1))),

 'move-03': # ARG0:causal agent / ARG1:impelled agent / ARG2:impelled action [move.xml]
   LexSem("V","move",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("move"),arg1,pp("to",arg2)))),

 'move-04': # ARG0:attacker / ARG1:attacked [move.xml]
   LexSem("V","move",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("move"),pp("against",arg1)))),

 'move-05': # ARG0:causer of emotion / ARG1:experiencer of the emotion / ARG2:instrument [move.xml]
   LexSem("V","move",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("move"),arg1,pp("with",arg2)))),

 'mow-01': # ARG0:mower, agent / ARG1:grass [mow.xml]
   LexSem("V","mow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mow"),arg1))),

 'muck-up-01': # ARG1:thing messed up, damaged [muck.xml]
   LexSem("V","muck",[":ARG1"],lambda arg1:S(arg1,VP(V("muck"),Adv("up")))),

 'muck-up-02': # ARG0:cleaner / ARG1:thing cleaned [muck.xml]
   LexSem("V","muck",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("muck"),Adv("up"),arg1))),

 'muddle-01': # ARG0:causer of confusion, agent / ARG1:entity muddled [muddle.xml]
   LexSem("V","muddle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("muddle"),arg1))),

 'muddle-up-02': # ARG0:agent / ARG1:thing becoming muddled [muddle.xml]
   LexSem("V","muddle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("muddle"),Adv("up"),arg1))),

 'muddy-01': # ARG0:causer / ARG1:thing obscured [muddy.xml]
   LexSem("V","muddy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("muddy"),arg1))),

 'muffle-01': # ARG0:agentive muffler / ARG1:sound / ARG2:instrumental muffler [muffle.xml]
   LexSem("V","muffle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("muffle"),arg1,pp("by",arg2)))),

 'mug-01': # ARG0:mugger / ARG1:victim / ARG2:what was stolen [mug.xml]
   LexSem("V","mug",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mug"),arg1,pp("for",arg2)))),

 'mulch-01': # ARG0:Gardener, agent adding mulch / ARG1:Garden/soil, entity receiving mulch / ARG2:Mulch itself, type of mulch [mulch.xml]
   LexSem("V","mulch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mulch"),arg1,pp("with",arg2)))),

 'mulct-01': # ARG0:mulcter, receiver of money / ARG1:money, amount / ARG2:fined, victim, giver of money / ARG3:reason, cause [mulct.xml]
   LexSem("V","mulct",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("mulct"),arg1,arg2,pp("for",arg3)))),

 'mull-01': # ARG0:thinker / ARG1:thinking about [mull.xml]
   LexSem("V","mull",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mull"),arg1))),

 'mull-02': # ARG0:cook / ARG1:wine [mull.xml]
   LexSem("V","mull",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mull"),arg1))),

 'multiply-01': # ARG0:causer of increase, agent / ARG1:thing increasing or multiplier / ARG2:amount increased by, EXT or multiplicand / ARG3:start point / ARG4:end point or product [multiply.xml]
   LexSem("V","multiply",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("multiply"),arg1,pp("by",arg2),arg3,arg4))),

 'multitask-01': # ARG0:multi-tasker, person doing more than one thing [multitask.xml]
   LexSem("V","multi-task",[":ARG0"],lambda arg0:S(arg0,VP(V("multi-task")))),

 'mumble-01': # ARG0:speaker / ARG1:utterance / ARG2:listener [mumble.xml]
   LexSem("V","mumble",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mumble"),arg1,pp("to",arg2)))),

 'mummify-01': # ARG0:preserver / ARG1:thing preserved [mummify.xml]
   LexSem("V","mummify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mummify"),arg1))),

 'munch-01': # ARG0:consumer, eater / ARG1:meal [munch.xml]
   LexSem("V","munch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("munch"),arg1))),

 'murder-01': # ARG0:killer / ARG1:corpse / ARG2:instrument [murder.xml]
   LexSem("V","murder",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("murder"),arg1,pp("with",arg2)))),

 'murmur-01': # ARG0:speaker / ARG1:utterance / ARG2:listener [murmur.xml]
   LexSem("V","murmur",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("murmur"),arg1,arg2))),

 'muscle-01': # ARG0:pusher / ARG1:thing pushed / ARG2:direction [muscle.xml]
   LexSem("V","muscle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("muscle"),arg1,arg2))),

 'muse-01': # ARG0:thinker / ARG1:thought about [muse.xml]
   LexSem("V","muse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("muse"),arg1))),

 'mushroom-01': # ARG1:thing growing / ARG2:EXT / ARG3:start point / ARG4:end point [mushroom.xml]
   LexSem("V","mushroom",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("mushroom"),arg2,pp("from",arg3),pp("to",arg4)))),

 'muster-01': # ARG0:collector, causer of grouping, agent / ARG1:thing mustered [muster.xml]
   LexSem("V","muster",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("muster"),arg1))),

 'mutate-01': # ARG0:causer of change, agent / ARG1:entity undergoing mutation / ARG2:end state, arg 1 mutated into what? / ARG3:start state, arg 1 mutated from what? [mutate.xml]
   LexSem("V","mutate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("mutate"),arg1,pp("into",arg2),pp("from",arg3)))),

 'mute-01': # ARG0:causer of quietness, agent / ARG1:entity muted [mute.xml]
   LexSem("V","mute",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mute"),arg1))),

 'mutilate-01': # ARG0:agent / ARG1:entity mutilated [mutilate.xml]
   LexSem("V","mutilate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mutilate"),arg1))),

 'mutter-01': # ARG0:speaker / ARG1:utterance / ARG2:listener [mutter.xml]
   LexSem("V","mutter",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mutter"),pp("about",arg1),pp("to",arg2)))),

 'muzzle-01': # ARG0:causer of speaking inability / ARG1:entity no longer able to speak / ARG2:explicit mention of muzzle proper [muzzle.xml]
   LexSem("V","muzzle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("muzzle"),arg1,pp("with",arg2)))),

 'myristoylate-01': # ARG0:agent/causer of myristoylation (e.g. scientist) / ARG1:entity myristoylated / ARG2:instrument (e.g. enzyme) / ARG3:resulting state of modification [myristoylate.xml]
   LexSem("V","myristoylate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("myristoylate"),arg1,arg2,arg3))),

 'mystify-01': # ARG0:cause of mystification / ARG1:entity mystified / ARG2:instrument or manner if separate from arg 0 [mystify.xml]
   LexSem("V","mystify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("mystify"),arg1,arg2))),

 'nab-01': # ARG0:agent, nabber / ARG1:criminal,entity nabbed / ARG2:nabbed from [nab.xml]
   LexSem("V","nab",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("nab"),arg1,arg2))),

 'nag-01': # ARG0:nagger / ARG1:nagged, impelled agent / ARG2:impelled action [nag.xml]
   LexSem("V","nag",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("nag"),arg1,pp("to",arg2)))),

 'nail-01': # ARG0:nailer / ARG1:entity/entities nailed (each gets its own arg1) [nail.xml]
   LexSem("V","nail",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("nail"),arg1))),

 'nail-down-02': # ARG0:finalizer / ARG1:entity nailed down [nail.xml]
   LexSem("V","nail",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("nail"),Adv("down"),arg1))),

 'name-01': # ARG0:namer / ARG1:named / ARG2:name of arg1 [name.xml]
   LexSem("V","name",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("name"),arg1,arg2))),

 'name-02': # ARG0:namer / ARG1:named / ARG2:named after, namesake [name.xml]
   LexSem("V","name",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("name"),arg1,pp("after",arg2)))),

 'name-03': # ARG0:Person appointing another / ARG1:Person named, appointed / ARG2:Office/Job Arg 1 is appointed to [name.xml]
   LexSem("V","name",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("name"),arg1,pp("to",arg2)))),

 'namedrop-01': # ARG0:insecure individual [namedrop.xml]
   LexSem("V","name-drop",[":ARG0"],lambda arg0:S(arg0,VP(V("name-drop")))),

 'nap-01': # ARG0:sleeper [nap.xml]
   LexSem("V","nap",[":ARG0"],lambda arg0:S(arg0,VP(V("nap")))),

 'narrate-01': # ARG0:narrater / ARG1:thing narrated / ARG2:benefactive [narrate.xml]
   LexSem("V","narrate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("narrate"),arg1,pp("for",arg2)))),

 'narrow-01': # ARG0:causal agent / ARG1:thing becoming narrower / ARG2:EXT, amount narrowed by / ARG3:start point / ARG4:end point [narrow.xml]
   LexSem("V","narrow",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("narrow"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'narrow-down-03': # ARG0:entity eliminating options / ARG1:selection, thing narrowed down / ARG2:original range of options, start state / ARG3:options left over, end state [narrow.xml]
   LexSem("V","narrow",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("narrow"),Adv("down"),arg1,pp("from",arg2),pp("to",arg3)))),

 'nasal-02': # ARG0:speaker / ARG1:utterance / ARG2:hearer [nasalize.xml]
   LexSem("V","nasal",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("nasal"),arg1,arg2))),

 'nasalize-01': # ARG0:causer, agent / ARG1:sound nasalized [nasalize.xml]
   LexSem("V","nasalize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("nasalize"),arg1))),

 'nationalize-01': # ARG0:government, usually / ARG1:property, usually industry [nationalize.xml]
   LexSem("V","nationalize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("nationalize"),arg1))),

 'natter-01': # ARG0:gossiper(s) / ARG1:gossip about [natter.xml]
   LexSem("V","natter",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("natter"),arg1))),

 'naturalize-01': # ARG0:government for first sense, agent for second sense / ARG1:citizen or thing naturalized [naturalize.xml]
   LexSem("V","naturalize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("naturalize"),arg1))),

 'nauseate-01': # ARG0:Stimulus of ache / ARG1:person with ache [nauseate.xml]
   LexSem("V","nauseate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("nauseate"),arg1))),

 'navigate-01': # ARG0:steerer / ARG1:thing steered / ARG2:path [navigate.xml]
   LexSem("V","navigate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("navigate"),arg1,arg2))),

 'near-01': # ARG1:entity in motion / ARG2:destination [near.xml]
   LexSem("V","near",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("near"),arg2))),

 'neaten-01': # ARG0:cause of transformation, agent / ARG1:entity now tidy / ARG2:Instrument or Manner if separate from arg 0 [neaten.xml]
   LexSem("V","neaten",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("neaten"),arg1,arg2))),

 'neaten-up-02': # ARG0:cause of transformation, agent / ARG1:entity now tidy / ARG2:Instrument or Manner if separate from arg 0 [neaten.xml]
   LexSem("V","neaten",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("neaten"),Adv("up"),arg1,arg2))),

 'necessitate-01': # ARG0:requirer / ARG1:thing required [necessitate.xml]
   LexSem("V","necessitate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("necessitate"),arg1))),

 'neck-01': # ARG0:agent / ARG1:entity necked / ARG2:instrument [neck.xml]
   LexSem("V","neck",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("neck"),arg1,pp("with",arg2)))),

 'necrotize-101': # ARG0:Causer of necrosis / ARG1:Dying tissue [necrotize.xml]
   LexSem("V","necrotize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("necrotize"),arg1))),

 'need-01': # ARG0:needer / ARG1:thing needed [need.xml]
   LexSem("V","need",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("need"),arg1))),

 'needle-01': # ARG0:annoyer / ARG1:person annoyed / ARG2:topic of annoyance [needle.xml]
   LexSem("V","needle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("needle"),arg1,pp("about",arg2)))),

 'negate-04': # ARG0:causer of invalidity / ARG1:thing negated, proposition [negate.xml]
   LexSem("V","negate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("negate"),arg1))),

 'negative-03': # ARG0:entity expressing negative sentiment / ARG1:target of negative sentiment/feedback / ARG2:cause of negative feedback, complaint [negate.xml]
   LexSem("V","neg",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("neg"),pp("about",arg1),pp("for",arg2)))),

 'neglect-01': # ARG0:ignorer / ARG1:thing ignored / ARG2:specific aspect of arg1 ignored [neglect.xml]
   LexSem("V","neglect",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("neglect"),arg1,arg2))),

 'negotiate-01': # ARG0:negotiator / ARG1:explicit other party / ARG2:agreement [negotiate.xml]
   LexSem("V","negotiate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("negotiate"),pp("with",arg1),arg2))),

 'neigh-01': # ARG0:neigher/horse / ARG1:utterance / ARG2:hearer [neigh.xml]
   LexSem("V","neigh",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("neigh"),arg1,arg2))),

 'neighbor-01': # ARG1:first neighboring entity / ARG2:second neighbor, neighbors what/whom [neighbor.xml]
   LexSem("V","neighbor",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("neighbor"),arg2))),

 'nest-01': # ARG0:bird-like entity / ARG1:location of nest [nest.xml]
   LexSem("V","nest",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("nest"),arg1))),

 'nestle-01': # ARG0:causer of nestling / ARG1:thing being cozy / ARG2:location of nestling [nestle.xml]
   LexSem("V","nestle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("nestle"),arg1,pp("beside",arg2)))),

 'net-02': # ARG0:source, giver / ARG1:gift / ARG2:destination, benefactive [net.xml]
   LexSem("V","net",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("net"),pp("about",arg1),arg2))),

 'net-03': # ARG0:getter / ARG1:gotten [net.xml]
   LexSem("V","net",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("net"),arg1))),

 'net-out-01': # ARG1:thing being counted / ARG2:count / ARG3:benefactive [net.xml]
   LexSem("V","net",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("net"),Adv("out"),pp("to",arg2),pp("for",arg3)))),

 'netmail-01': # ARG0:sender, agent / ARG1:entity sent / ARG2:sent to, recipient [netmail.xml]
   LexSem("V","netmail",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("netmail"),arg1,arg2))),

 'nettle-01': # ARG0:causer / ARG1:Nettled entity / ARG2:Instrument or Manner if separate from arg 0 [nettle.xml]
   LexSem("V","nettle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("nettle"),arg1,pp("with",arg2)))),

 'network-01': # ARG0:creator of network / ARG1:first item networked / ARG2:thing arg1 is connected/networked to [network.xml]
   LexSem("V","network",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("network"),arg1,pp("to",arg2)))),

 'neutralize-01': # ARG0:causer / ARG1:entity neutralized [neutralize.xml]
   LexSem("V","neutralize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("neutralize"),arg1))),

 'nibble-01': # ARG0:eater / ARG1:food [nibble.xml]
   LexSem("V","nibble",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("nibble"),pp("at",arg1)))),

 'nick-01': # ARG0:cutter / ARG1:thing cut / ARG3:instrument [nick.xml]
   LexSem("V","nick",[":ARG0",":ARG1",":ARG3"],lambda arg0,arg1,arg3:S(arg0,VP(V("nick"),arg1,arg3))),

 'nick-02': # ARG0:thief / ARG1:thing stolen / ARG2:stolen from [nick.xml]
   LexSem("V","nick",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("nick"),arg1,arg2))),

 'nickel-01': # ARG0:agent / ARG1:patient, victim [nickel.xml]
   LexSem("V","nickel",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("nickel"),arg1))),

 'nickname-01': # ARG0:namer / ARG1:named / ARG2:name [nickname.xml]
   LexSem("V","nickname",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("nickname"),arg1,arg2))),

 'niggle-01': # ARG1:thing that causes worry / ARG2:worrying entity [niggle.xml]
   LexSem("V","niggle",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("niggle"),arg2))),

 'nip-01': # ARG1:entity nipping / ARG2:start point / ARG3:end point / ARG4:path [nip.xml]
   LexSem("V","nip",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("nip"),arg2,pp("to",arg3),pp("through",arg4)))),

 'nip-02': # ARG0:biter / ARG1:thing bitten / ARG2:source [nip.xml]
   LexSem("V","nip",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("nip"),arg1,pp("from",arg2)))),

 'nip-03': # ARG0:preventative nipper / ARG1:thing nipped, prevented / ARG2:fixed: "in the bud" [nip.xml]
   LexSem("V","nip",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("nip"),arg1,pp("in",arg2)))),

 'nitrify-01': # ARG0:cause of transformation / ARG1:entity nitrified / ARG2:instrument or manner if separate from arg 0 [nitrify.xml]
   LexSem("V","nitrify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("nitrify"),arg1,arg2))),

 'nitrosylate-01': # ARG0:intentional agent of nitrosylation (e.g. scientist) / ARG1:thing nitrosylated (e.g. protein) / ARG2:instrument / ARG3:result of nitrosylation [nitrosylate.xml]
   LexSem("V","nitrosylate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("nitrosylate"),arg1,pp("with",arg2),arg3))),

 'nobble-01': # ARG0:nobbler / ARG1:thing nobbled / ARG2:nobbled from / ARG3:nobbled for [nobble.xml]
   LexSem("V","nobble",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("nobble"),arg1,arg2,arg3))),

 'nod-01': # ARG0:entity with a bobbing head, agent / ARG1:thing expressed by nodding [nod.xml]
   LexSem("V","nod",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("nod"),arg1))),

 'nod-off-02': # ARG0:entity falling asleep [nod.xml]
   LexSem("V","nod",[":ARG0"],lambda arg0:S(arg0,VP(V("nod"),Adv("off")))),

 'nominate-01': # ARG0:nominator / ARG1:candidate / ARG2:role of arg1 [nominate.xml]
   LexSem("V","nominate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("nominate"),arg1,pp("to",arg2)))),

 'normalize-01': # ARG0:agent, causer / ARG1:entity normalized [normalize.xml]
   LexSem("V","normalize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("normalize"),arg1))),

 'nose-01': # ARG0:snooper / ARG1:thing searched for / ARG2:location, source [nose.xml]
   LexSem("V","nose",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("nose"),pp("for",arg1),pp("around",arg2)))),

 'nosedive-01': # ARG1:Logical subject, patient, thing falling / ARG2:EXT, amount fallen / ARG3:start point / ARG4:end point, end state of arg1 [nosedive.xml]
   LexSem("V","nose-dive",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("nose-dive"),arg2,arg3,pp("to",arg4)))),

 'nosh-01': # ARG0:eater / ARG1:eaten [nosh.xml]
   LexSem("V","nosh",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("nosh"),pp("on",arg1)))),

 'notch-01': # ARG0:agent, entity marking / ARG1:thing being commemorated / ARG2:thing gaining the notch (ie, belt) [notch.xml]
   LexSem("V","notch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("notch"),arg1,arg2))),

 'notch-02': # ARG0:entity moving something / ARG1:Logical subject, patient, thing moving / ARG2:EXT, amount moved / ARG3:start point / ARG4:end point [notch.xml]
   LexSem("V","notch",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("notch"),arg1,arg2,arg3,arg4))),

 'note-01': # ARG0:noter / ARG1:utterance / ARG2:hearer / ARG3:attribute of arg1 [note.xml]
   LexSem("V","note",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("note"),arg1,pp("to",arg2),pp("of",arg3)))),

 'note-02': # ARG0:entity noting as remarkable / ARG1:entity under scrutiny / ARG2:why is it notable? [note.xml]
   LexSem("V","note",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("note"),arg1,pp("for",arg2)))),

 'notice-01': # ARG0:noticer / ARG1:noticed [notice.xml]
   LexSem("V","notice",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("notice"),arg1))),

 'notify-01': # ARG0:notifier, teller / ARG1:entity notified, told / ARG2:utterance [notify.xml]
   LexSem("V","notify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("notify"),arg1,arg2))),

 'nourish-01': # ARG0:causal agent (agent only) / ARG1:entity fed or maintained / ARG2:nourishment or sustenance [nourish.xml]
   LexSem("V","nourish",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("nourish"),arg1,arg2))),

 'nudge-01': # ARG0:Agent, causer / ARG1:Patient, thing moving / ARG2:EXT, amount moved / ARG3:start point / ARG4:end point / ARG5:direction--REQUIRED [nudge.xml]
   LexSem("V","nudge",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg0,arg1,arg2,arg3,arg4,arg5:S(arg0,VP(V("nudge"),arg1,arg2,pp("from",arg3),pp("to",arg4),arg5))),

 'nudge-02': # ARG0:causal agent / ARG1:thing touched / ARG2:touched with, if separate from agent [nudge.xml]
   LexSem("V","nudge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("nudge"),arg1,pp("with",arg2)))),

 'nuke-01': # ARG0:attacker / ARG1:victim [nuke.xml]
   LexSem("V","nuke",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("nuke"),arg1))),

 'nullify-01': # ARG0:cause, agent / ARG1:thing going poof [nullify.xml]
   LexSem("V","nullify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("nullify"),arg1))),

 'numb-01': # ARG0:Stimulus of numbness / ARG1:numbed entity / ARG2:instrument [numb.xml]
   LexSem("V","numb",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("numb"),arg1,pp("with",arg2)))),

 'number-01': # ARG1:thing being counted / ARG2:count, number, quantity [number.xml]
   LexSem("V","number",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("number"),arg2))),

 'nurse-01': # ARG0:nurse, agent / ARG1:entity nursed [nurse.xml]
   LexSem("V","nurse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("nurse"),arg1))),

 'nurse-02': # ARG0:Feeder, mother / ARG1:Milk / ARG2:Recipient, baby [nurse.xml]
   LexSem("V","nurse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("nurse"),arg1,arg2))),

 'nurture-01': # ARG0:caring entity, agent / ARG1:entity nurtured [nurture.xml]
   LexSem("V","nurture",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("nurture"),arg1))),

 'nut-01': # ARG0:agent or causer / ARG1:entity gathered / ARG2:gathered into / ARG3:beneficiary [nut.xml]
   LexSem("V","nut",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("nut"),arg1,arg2,arg3))),

 'nuzzle-01': # ARG0:hugger / ARG1:hugged [nuzzle.xml]
   LexSem("V","nuzzle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("nuzzle"),pp("with",arg1)))),

 'oar-01': # ARG0:Oarer, rower, agent / ARG1:thing oared/rowed, passenger/boat, theme / ARG2:path / ARG3:destination [oar.xml]
   LexSem("V","oar",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("oar"),arg1,arg2,arg3))),

 'obey-01': # ARG0:obeyer / ARG1:rule or rule-giver [obey.xml]
   LexSem("V","obey",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("obey"),arg1))),

 'obfuscate-01': # ARG0:causer of confusion / ARG1:thing confusing [obfuscate.xml]
   LexSem("V","obfuscate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("obfuscate"),arg1))),

 'object-01': # ARG0:complainer / ARG1:thing objected to [object.xml]
   LexSem("V","object",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("object"),pp("to",arg1)))),

 'objectify-01': # ARG0:agent, cause / ARG1:thing objectified [objectify.xml]
   LexSem("V","objectify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("objectify"),arg1))),

 'obligate-01': # ARG0:causal agent / ARG1:obligated, impelled agent / ARG2:obligation, impelled action [obligate.xml]
   LexSem("V","obligate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("obligate"),arg1,pp("to",arg2)))),

 'oblige-01': # ARG0:pleaser, helper / ARG1:please or help whom? entity pleased by arg 0 [oblige.xml]
   LexSem("V","oblige",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("oblige"),arg1))),

 'oblige-02': # ARG0:causal agent / ARG1:obligated / ARG2:obligation [oblige.xml]
   LexSem("V","oblige",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("oblige"),arg1,pp("to",arg2)))),

 'obliterate-01': # ARG0:destroyer / ARG1:thing destroyed / ARG2:instrument of destruction [obliterate.xml]
   LexSem("V","obliterate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("obliterate"),arg1,pp("with",arg2)))),

 'obscure-01': # ARG0:agent, causer / ARG1:entity obscured / ARG2:obscured from [obscure.xml]
   LexSem("V","obscure",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("obscure"),arg1,pp("from",arg2)))),

 'observe-01': # ARG0:observer / ARG1:thing looked at [observe.xml]
   LexSem("V","observe",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("observe"),arg1))),

 'observe-02': # ARG0:Sayer / ARG1:Utterance / ARG2:Hearer / ARG3:Attributive [observe.xml]
   LexSem("V","observe",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("observe"),arg1,arg2,pp("about",arg3)))),

 'obsess-01': # ARG0:obsessed entity / ARG1:obsession [obsess.xml]
   LexSem("V","obsess",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("obsess"),pp("over",arg1)))),

 'obstruct-01': # ARG0:blocker, obstruction / ARG1:thing obstructed [obstruct.xml]
   LexSem("V","obstruct",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("obstruct"),arg1))),

 'obtain-01': # ARG0:receiver / ARG1:thing gotten / ARG2:received from [obtain.xml]
   LexSem("V","obtain",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("obtain"),arg1,pp("from",arg2)))),

 'obviate-01': # ARG0:causer of unnecessariness, agent / ARG1:entity obviated [obviate.xml]
   LexSem("V","obviate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("obviate"),arg1))),

 'occasion-01': # ARG0:bringer about / ARG1:event [occasion.xml]
   LexSem("V","occasion",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("occasion"),arg1))),

 'occlude-01': # ARG0:Blocker, agent / ARG1:Theme (action or object blocked) / ARG2:Secondary predication, Arg1 stopped from what / ARG3:Instrument [occlude.xml]
   LexSem("V","occlude",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("occlude"),arg1,arg2,arg3))),

 'occult-01': # ARG1:covering / ARG2:thing covered [occult.xml]
   LexSem("V","occult",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("occult"),arg2))),

 'occupy-01': # ARG0:occupier / ARG1:occupied / ARG2:occupying activity (doing what) [occupy.xml]
   LexSem("V","occupy",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("occupy"),arg1,pp("by",arg2)))),

 'occur-01': # ARG1:event / ARG2:benefactive [occur.xml]
   LexSem("V","occur",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("occur"),pp("to",arg2)))),

 'offend-01': # ARG0:offender / ARG1:offended / ARG2:instrument, if separate from arg0 [offend.xml]
   LexSem("V","offend",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("offend"),arg1,pp("with",arg2)))),

 'offend-03': # ARG0:criminal / ARG1:crime [offend.xml]
   LexSem("V","offend",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("offend"),arg1))),

 'offer-01': # ARG0:entity offering / ARG1:commodity / ARG2:price / ARG3:benefactive or entity offered to [offer.xml]
   LexSem("V","offer",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("offer"),arg1,arg2,arg3))),

 'officiate-01': # ARG0:official performing a duty / ARG1:duty, ceremony officiated by arg 0 / ARG2:role, secondary predication of arg0, officiated as what? [officiate.xml]
   LexSem("V","officiate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("officiate"),arg1,arg2))),

 'offload-01': # ARG0:unloader, agent / ARG1:beast of burden / ARG2:cargo / ARG3:instrument [offload.xml]
   LexSem("V","offload",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("offload"),pp("to",arg1),arg2,arg3))),

 'offset-01': # ARG0:intentional agent / ARG1:thing whose impact we want to lessen / ARG2:balanced by [offset.xml]
   LexSem("V","offset",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("offset"),arg1,arg2))),

 'ogle-01': # ARG0:ogler, agent / ARG1:entity ogled [ogle.xml]
   LexSem("V","ogle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ogle"),arg1))),

 'oil-01': # ARG0:oiler / ARG1:thing getting oily / ARG2:oil / ARG3:end state, attribute [oil.xml]
   LexSem("V","oil",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("oil"),arg1,arg2,arg3))),

 'oil-up-02': # ARG0:oiler / ARG1:thing getting oily / ARG2:oil [oil.xml]
   LexSem("V","oil",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("oil"),Adv("up"),arg1,pp("with",arg2)))),

 'oink-01': # ARG0:oinker [oink.xml]
   LexSem("V","oink",[":ARG0"],lambda arg0:S(arg0,VP(V("oink")))),

 'okay-01': # ARG0:okay-er, entity giving permission / ARG1:ok thing, / ARG2:entity FOR whom arg1 is ok, having permission to undergo arg1 [okay.xml]
   LexSem("V","okay",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("okay"),arg1,arg2))),

 'omit-01': # ARG0:omitter / ARG1:thing left out / ARG2:left out of what [omit.xml]
   LexSem("V","omit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("omit"),arg1,pp("from",arg2)))),

 'on_hand-15': # ARG1:available to whom/what? entity having access to arg2 / ARG2:thing that is available / ARG3:purpose, use for arg2 [hand.xml]
   LexSem("V","be",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("be"),arg2,pp("to",arg3)))),

 'on_ones_mind-07': # ARG0:causal agent / ARG1:thinker / ARG2:thought, focus of attention [mind.xml]
   LexSem("V","be",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("be"),arg1,arg2))),

 'ooh-01': # ARG0:ooh-er / ARG1:cause of awe [ooh.xml]
   LexSem("V","ooh",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ooh"),pp("over",arg1)))),

 'ooze-01': # ARG0:Oozer / ARG1:Liquid [ooze.xml]
   LexSem("V","ooze",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ooze"),arg1))),

 'open-01': # ARG0:opener / ARG1:thing opening / ARG2:instrument / ARG3:benefactive [open.xml]
   LexSem("V","open",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("open"),arg1,pp("with",arg2),pp("to",arg3)))),

 'open-02': # ARG1:thing opening / ARG0:agent, causer of opening [open.xml]
   LexSem("V","open",[":ARG1",":ARG0"],lambda arg1,arg0:S(arg0,VP(V("open"),arg1))),

 'open-up-03': # ARG0:opener / ARG1:thing opening / ARG2:instrument / ARG3:benefactive [open.xml]
   LexSem("V","open",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("open"),Adv("up"),arg1,arg2,pp("to",arg3)))),

 'operate-01': # ARG0:agent, operator / ARG1:thing operated / ARG2:explicit patient (thing operated on) / ARG3:explicit role / ARG4:explicit instrument (with or on, ususally) [operate.xml]
   LexSem("V","operate",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("operate"),arg1,pp("on",arg2),pp("as",arg3),pp("on",arg4)))),

 'operate-02': # ARG0:Surgeon/Person performing precise work / ARG1:Patient/Body Part being operated on [operate.xml]
   LexSem("V","operate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("operate"),pp("on",arg1)))),

 'opine-01': # ARG0:speaker / ARG1:opinion / ARG2:hearer [opine.xml]
   LexSem("V","opine",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("opine"),arg1,pp("to",arg2)))),

 'oppose-01': # ARG0:opposer / ARG1:thing opposed to [oppose.xml]
   LexSem("V","oppose",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("oppose"),arg1))),

 'oppress-01': # ARG0:entity oppressing / ARG1:entity oppressed [oppress.xml]
   LexSem("V","oppress",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("oppress"),arg1))),

 'opt-01': # ARG0:chooser / ARG1:choice [opt.xml]
   LexSem("V","opt",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("opt"),pp("for",arg1)))),

 'optimize-01': # ARG0:optimizer / ARG1:thing optimized [optimize.xml]
   LexSem("V","optimize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("optimize"),arg1))),

 'orbit-01': # ARG0:revolving entity / ARG1:point orbited [orbit.xml]
   LexSem("V","orbit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("orbit"),arg1))),

 'orchestrate-01': # ARG0:conductor, manager / ARG1:things being coordinated or managed [orchestrate.xml]
   LexSem("V","orchestrate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("orchestrate"),arg1))),

 'ordain-01': # ARG0:dictator, agent / ARG1:thing dictated [ordain.xml]
   LexSem("V","ordain",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ordain"),arg1))),

 'order-01': # ARG0:forcer / ARG1:impelled agent / ARG2:impelled action [order.xml]
   LexSem("V","order",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("order"),arg1,arg2))),

 'order-02': # ARG0:orderer / ARG1:thing ordered / ARG2:benefactive, ordered-for / ARG3:source [order.xml]
   LexSem("V","order",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("order"),arg1,pp("for",arg2),pp("from",arg3)))),

 'order-03': # ARG0:agent, setter / ARG1:thing set / ARG2:location or position [order.xml]
   LexSem("V","order",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("order"),arg1,arg2))),

 'organize-01': # ARG0:organizer, entity with good organizational skills / ARG1:thing organized, domain in which arg0 has good skills / ARG2:previous state / ARG3:benefactive / ARG4:end state [organize.xml]
   LexSem("V","organize",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("organize"),arg1,pp("from",arg2),arg3,pp("as",arg4)))),

 'orient-01': # ARG0:agent of focus, adjustment / ARG1:entity focused, oriented / ARG2:focused on, oriented towards / ARG3:specific aspect of arg1 oriented [orient.xml]
   LexSem("V","orient",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("orient"),arg1,pp("towards",arg2),arg3))),

 'originate-01': # ARG0:creator / ARG1:thing originated / ARG2:source / ARG3:attribute of arg1 [originate.xml]
   LexSem("V","originate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("originate"),arg1,pp("from",arg2),pp("as",arg3)))),

 'ornament-01': # ARG0:decorator / ARG1:thing ornamented / ARG2:ornament [ornament.xml]
   LexSem("V","ornament",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ornament"),arg1,pp("with",arg2)))),

 'orphan-01': # ARG0:causer / ARG1:orphan [orphan.xml]
   LexSem("V","orphan",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("orphan"),arg1))),

 'oscillate-01': # ARG0:agent, cause / ARG1:thing oscillating [oscillate.xml]
   LexSem("V","oscillate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("oscillate"),arg1))),

 'osculate-01': # ARG0:couple, or first kisser / ARG1:other half of the couple if listed separately [osculate.xml]
   LexSem("V","osculate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("osculate"),arg1))),

 'osculate-02': # ARG1:first point of a curve / ARG2:second piece of a curve; thing sharing common points [osculate.xml]
   LexSem("V","osculate",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("osculate"),arg2))),

 'osculate-03': # ARG1:species / ARG2:taxonomic groups it falls between [osculate.xml]
   LexSem("V","osculate",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("osculate"),arg2))),

 'ossify-01': # ARG0:cause of solidification / ARG1:entity made bone-like / ARG2:result, attribute of arg 1 [ossify.xml]
   LexSem("V","ossify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ossify"),arg1,pp("into",arg2)))),

 'ostracize-01': # ARG0:ostracizers, agent / ARG1:ostracized / ARG2:ostracized from [ostracize.xml]
   LexSem("V","ostracize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ostracize"),arg1,arg2))),

 'oust-01': # ARG0:employer / ARG1:ex-employee / ARG2:job [oust.xml]
   LexSem("V","oust",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("oust"),arg1,pp("as",arg2)))),

 'out-01': # ARG0:outter, exposer, revealer / ARG1:person, thing being outted / ARG2:entity outted to / ARG3:attribute of arg 1 [out.xml]
   LexSem("V","out",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("out"),arg1,arg2,arg3))),

 'outbid-01': # ARG0:bidder / ARG1:other, lesser bidder / ARG2:goods [outbid.xml]
   LexSem("V","outbid",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("outbid"),arg1,pp("for",arg2)))),

 'outdistance-01': # ARG0:entity ahead / ARG1:entity outdistanced [outdistance.xml]
   LexSem("V","outdistance",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("outdistance"),arg1))),

 'outdo-01': # ARG0:entity doing better / ARG1:entity outdone [outdo.xml]
   LexSem("V","outdo",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("outdo"),arg1))),

 'outface-01': # ARG0:person staring / ARG1:person outstared [outface.xml]
   LexSem("V","outface",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("outface"),arg1))),

 'outfit-01': # ARG0:provider / ARG1:entity getting equipment / ARG2:equipment, outfit [outfit.xml]
   LexSem("V","outfit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("outfit"),arg1,pp("with",arg2)))),

 'outflank-01': # ARG1:agent / ARG2:entity outflanked [outflank.xml]
   LexSem("V","outflank",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("outflank"),arg2))),

 'outgrow-01': # ARG0:entity getting too big / ARG1:too big for what [outgrow.xml]
   LexSem("V","outgrow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("outgrow"),arg1))),

 'outlast-01': # ARG0:longer lasting / ARG1:shorter lasting [outlast.xml]
   LexSem("V","outlast",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("outlast"),arg1))),

 'outlaw-01': # ARG0:judicial body, agent / ARG1:criminal activity [outlaw.xml]
   LexSem("V","outlaw",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("outlaw"),arg1))),

 'outline-01': # ARG0:describer / ARG1:thing being described [outline.xml]
   LexSem("V","outline",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("outline"),arg1))),

 'outlive-01': # ARG1:experiencer, thing continuing to live beyond its time / ARG2:point of comparison, entity that arg1 is living beyond [outlive.xml]
   LexSem("V","outlive",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("outlive"),arg2))),

 'outlying-01': # ARG0:thing located far away [outlying.xml]
   LexSem("V","outlying",[":ARG0"],lambda arg0:S(arg0,VP(V("outlying")))),

 'outmatch-01': # ARG0:thing outdoing / ARG1:thing outdone [outmatch.xml]
   LexSem("V","outmatch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("outmatch"),arg1))),

 'outnumber-01': # ARG1:thing that's more / ARG2:thing that's less / ARG3:margin, EXT [outnumber.xml]
   LexSem("V","outnumber",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("outnumber"),arg2,arg3))),

 'outpace-01': # ARG0:entity moving faster / ARG1:entity moving slower / ARG2:margin [outpace.xml]
   LexSem("V","outpace",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("outpace"),arg1,pp("by",arg2)))),

 'outperform-01': # ARG0:better performer / ARG1:other performer / ARG2:margin [outperform.xml]
   LexSem("V","outperform",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("outperform"),arg1,arg2))),

 'outrace-01': # ARG0:thing outdoing / ARG1:thing outdone [outrace.xml]
   LexSem("V","outrace",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("outrace"),arg1))),

 'outrage-01': # ARG0:Stimulus of outrage, outrageous entity / ARG1:enraged entity [outrage.xml]
   LexSem("V","outrage",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("outrage"),arg1))),

 'outrank-01': # ARG0:entity with higher rank / ARG1:entity with lower rank [outrank.xml]
   LexSem("V","outrank",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("outrank"),arg1))),

 'outrun-01': # ARG0:chaser / ARG1:slow-poke [outrun.xml]
   LexSem("V","outrun",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("outrun"),arg1))),

 'outsell-01': # ARG0:better seller / ARG1:other seller / ARG2:margin [outsell.xml]
   LexSem("V","outsell",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("outsell"),arg1,pp("by",arg2)))),

 'outshine-01': # ARG0:entity compared to / ARG1:entity outshone [outshine.xml]
   LexSem("V","outshine",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("outshine"),arg1))),

 'outsmart-01': # ARG0:thing outdoing / ARG1:thing outdone [outsmart.xml]
   LexSem("V","outsmart",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("outsmart"),arg1))),

 'outsource-01': # ARG0:entity contracting work out / ARG1:work / ARG2:outsourced to [outsource.xml]
   LexSem("V","outsource",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("outsource"),arg1,pp("to",arg2)))),

 'outstrip-01': # ARG0:thing that's more / ARG1:thing that's less / ARG2:margin, difference [outstrip.xml]
   LexSem("V","outstrip",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("outstrip"),arg1,arg2))),

 'outweigh-01': # ARG0:entity weighed / ARG1:entity compared to [outweigh.xml]
   LexSem("V","outweigh",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("outweigh"),arg1))),

 'outwit-01': # ARG0:thing outdoing / ARG1:thing outdone [outwit.xml]
   LexSem("V","outwit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("outwit"),arg1))),

 'overarch-01': # ARG1:arch [overarch.xml]
   LexSem("V","overarch",[":ARG1"],lambda arg1:S(arg1,VP(V("overarch")))),

 'overawe-01': # ARG0:causer of awe / ARG1:overawed entity / ARG2:instrument, if separate from arg0 [overawe.xml]
   LexSem("V","overawe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("overawe"),arg1,arg2))),

 'overbake-01': # ARG0:baker / ARG1:food [overbake.xml]
   LexSem("V","overbake",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overbake"),arg1))),

 'overbid-01': # ARG0:bidder [overbid.xml]
   LexSem("V","overbid",[":ARG0"],lambda arg0:S(arg0,VP(V("overbid")))),

 'overbid-02': # ARG0:higher bidder / ARG1:lower bidder [overbid.xml]
   LexSem("V","overbid",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overbid"),arg1))),

 'overburden-01': # ARG0:loader / ARG1:carrier / ARG2:load [overburden.xml]
   LexSem("V","overburden",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("overburden"),arg1,arg2))),

 'overcast-01': # ARG1:thing or area being enclosed / ARG2:thing being enclosed from [overcast.xml]
   LexSem("V","overcast",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("overcast"),arg2))),

 'overcharge-01': # ARG0:seller / ARG1:asking price / ARG2:buyer / ARG3:commodity [overcharge.xml]
   LexSem("V","overcharge",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("overcharge"),arg1,arg2,pp("on",arg3)))),

 'overcome-01': # ARG0:overcomer / ARG1:difficulty [overcome.xml]
   LexSem("V","overcome",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overcome"),arg1))),

 'overcook-01': # ARG0:cook / ARG1:food [overcook.xml]
   LexSem("V","overcook",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overcook"),arg1))),

 'overdo-01': # ARG0:maker, preparer / ARG1:thing prepared, done [overdo.xml]
   LexSem("V","overdo",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overdo"),arg1))),

 'overdose-01': # ARG0:overdosed entity / ARG1:narcotic [overdose.xml]
   LexSem("V","overdose",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overdose"),pp("on",arg1)))),

 'overdraw-01': # ARG0:overdrawer / ARG1:thing overdrawn / ARG2:attribute of arg1 [overdraw.xml]
   LexSem("V","overdraw",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("overdraw"),arg1,arg2))),

 'overdraw-02': # ARG0:remover / ARG1:thing removed / ARG2:source, removed from [overdraw.xml]
   LexSem("V","overdraw",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("overdraw"),arg1,pp("on",arg2)))),

 'overeat-01': # ARG0:consumer / ARG1:meal [overeat.xml]
   LexSem("V","overeat",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overeat"),arg1))),

 'overemphasize-01': # ARG0:emphasizer / ARG1:utterance / ARG2:hearer [overemphasize.xml]
   LexSem("V","overemphasize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("overemphasize"),arg1,pp("to",arg2)))),

 'overestimate-01': # ARG0:estimator / ARG1:thing overestimated / ARG2:estimated-to-be, attribute of arg1 [overestimate.xml]
   LexSem("V","overestimate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("overestimate"),arg1,arg2))),

 'overexpress-01': # ARG0:causal agent / ARG1:gene being overexpressed / ARG2:MNR of expression, symptoms [overexpress.xml]
   LexSem("V","overexpress",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("overexpress"),arg1,arg2))),

 'overflow-01': # ARG1:container / ARG2:substance [overflow.xml]
   LexSem("V","overflow",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("overflow"),pp("with",arg2)))),

 'overgrow-01': # ARG1:garden / ARG2:growth [overgrow.xml]
   LexSem("V","overgrow",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("overgrow"),pp("with",arg2)))),

 'overhang-01': # ARG0:thing hanging, thing over / ARG1:thing hung over, thing under [overhang.xml]
   LexSem("V","overhang",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overhang"),arg1))),

 'overhaul-01': # ARG0:causer of transformation / ARG1:thing changing / ARG2:end state / ARG3:start state [overhaul.xml]
   LexSem("V","overhaul",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("overhaul"),arg1,arg2,arg3))),

 'overhear-01': # ARG0:hearer / ARG1:heard / ARG2:location of speech, or speaker(s) [overhear.xml]
   LexSem("V","overhear",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("overhear"),arg1,pp("between",arg2)))),

 'overheat-01': # ARG0:agent (rare) / ARG1:hot thing [overheat.xml]
   LexSem("V","overheat",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overheat"),arg1))),

 'overindulge-01': # ARG0:consumer / ARG1:item consumed excessively [overindulge.xml]
   LexSem("V","overindulge",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overindulge"),pp("in",arg1)))),

 'overjoy-01': # ARG0:agent, pleaser providing joy / ARG1:patient, entity overjoyed / ARG2:Instrument used to cause joy when separate from arg 0 [overjoy.xml]
   LexSem("V","overjoy",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("overjoy"),arg1,arg2))),

 'overlap-01': # ARG0:thing on top / ARG1:thing on bottom / ARG2:EXT, margin [overlap.xml]
   LexSem("V","overlap",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("overlap"),pp("with",arg1),pp("by",arg2)))),

 'overlay-01': # ARG0:who's putting what where, agent / ARG1:thing laid / ARG2:over what [overlay.xml]
   LexSem("V","overlay",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("overlay"),arg1,arg2))),

 'overleap-01': # ARG0:jumper / ARG1:obstacle [overleap.xml]
   LexSem("V","overleap",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overleap"),arg1))),

 'overload-01': # ARG0:loader, agent / ARG1:beast of burden / ARG2:cargo / ARG3:instrument [overload.xml]
   LexSem("V","overload",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("overload"),arg1,pp("with",arg2),arg3))),

 'overlook-01': # ARG0:non-noticer, agent / ARG1:thing overlooked [overlook.xml]
   LexSem("V","overlook",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overlook"),arg1))),

 'overlook-02': # ARG0:place / ARG1:direction [overlook.xml]
   LexSem("V","overlook",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overlook"),arg1))),

 'overnight-01': # ARG0:alive entity [overnight.xml]
   LexSem("V","overnight",[":ARG0"],lambda arg0:S(arg0,VP(V("overnight")))),

 'overnight-02': # ARG0:mailer / ARG1:letter / ARG2:mailed-to [overnight.xml]
   LexSem("V","overnight",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("overnight"),arg1,pp("to",arg2)))),

 'overpay-01': # ARG0:payer or buyer / ARG1:money or attention / ARG2:person being paid, destination of attention / ARG3:commodity, paid for what [overpay.xml]
   LexSem("V","overpay",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("overpay"),arg1,arg2,pp("for",arg3)))),

 'overpower-01': # ARG0:entity with more power / ARG1:entity with less [overpower.xml]
   LexSem("V","overpower",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overpower"),arg1))),

 'overprice-01': # ARG0:seller / ARG1:commodity [overprice.xml]
   LexSem("V","overprice",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overprice"),arg1))),

 'overrate-01': # ARG0:entity establishing value / ARG1:commodity or entity being evaluated / ARG2:value, worth, grade [overrate.xml]
   LexSem("V","overrate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("overrate"),arg1,arg2))),

 'overreach-01': # ARG0:agent, cause / ARG1:thing straining beyond means [overreach.xml]
   LexSem("V","overreach",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overreach"),arg1))),

 'overreach-02': # ARG0:thing outdoing / ARG1:thing outdone [overreach.xml]
   LexSem("V","overreach",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overreach"),arg1))),

 'overreact-01': # ARG0:entity overreacted / ARG1:reason [overreact.xml]
   LexSem("V","overreact",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overreact"),pp("to",arg1)))),

 'override-01': # ARG0:prevailer, agent / ARG1:entity overriden [override.xml]
   LexSem("V","override",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("override"),arg1))),

 'overrule-01': # ARG0:prevailer, agent / ARG1:entity overruled [overrule.xml]
   LexSem("V","overrule",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overrule"),arg1))),

 'overrun-01': # ARG0:destructive hordes / ARG1:unlucky victim [overrun.xml]
   LexSem("V","overrun",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overrun"),arg1))),

 'oversee-01': # ARG0:supervisor / ARG1:thing supervised [oversee.xml]
   LexSem("V","oversee",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("oversee"),arg1))),

 'oversell-01': # ARG0:seller, agent / ARG1:entity oversold [oversell.xml]
   LexSem("V","oversell",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("oversell"),arg1))),

 'overshadow-01': # ARG0:entity dominating / ARG1:entity overshadowed [overshadow.xml]
   LexSem("V","overshadow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overshadow"),arg1))),

 'oversimplify-01': # ARG0:agent, causer / ARG1:entity simplified [oversimplify.xml]
   LexSem("V","oversimplify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("oversimplify"),arg1))),

 'oversleep-01': # ARG0:sleepyhead / ARG1:amount overslept [oversleep.xml]
   LexSem("V","oversleep",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("oversleep"),arg1))),

 'overspread-01': # ARG1:thing overspreading / ARG2:overspread what [overspread.xml]
   LexSem("V","overspread",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("overspread"),arg2))),

 'overstate-01': # ARG0:speaker / ARG1:utterance / ARG2:hearer [overstate.xml]
   LexSem("V","overstate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("overstate"),arg1,pp("to",arg2)))),

 'overstay-01': # ARG0:agent, lingerer / ARG1:theme, thing overstayed [overstay.xml]
   LexSem("V","overstay",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overstay"),arg1))),

 'overstep-01': # ARG0:thing that's more / ARG1:thing that's less / ARG2:margin, difference [overstep.xml]
   LexSem("V","overstep",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("overstep"),arg1,arg2))),

 'overstimulate-01': # ARG0:cause of stimulation / ARG1:thing being stimulated / ARG2:instrument, if agent also present / ARG3:end state of arg1 [overstimulate.xml]
   LexSem("V","overstimulate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("overstimulate"),arg1,arg2,arg3))),

 'overstock-01': # ARG0:agent, overstocker / ARG1:theme, thing being stocked / ARG2:destination (e.g. a shelf) [overstock.xml]
   LexSem("V","overstock",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("overstock"),arg1,pp("with",arg2)))),

 'overstrain-01': # ARG0:causer of strain / ARG1:strained entity [overstrain.xml]
   LexSem("V","overstrain",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overstrain"),arg1))),

 'overstress-01': # ARG0:overstresser / ARG1:thing overstressed / ARG2:attribute of arg1 [overstress.xml]
   LexSem("V","overstress",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("overstress"),arg1,pp("as",arg2)))),

 'overtake-01': # ARG0:thing going beyond / ARG1:thing left in the dust [overtake.xml]
   LexSem("V","overtake",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overtake"),arg1))),

 'overtax-01': # ARG0:taxer / ARG1:amount of tax / ARG2:taxpayer / ARG3:commodity [overtax.xml]
   LexSem("V","overtax",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("overtax"),arg1,arg2,arg3))),

 'overthink-06': # ARG0:Thinker / ARG1:Thought / ARG2:Attributive [think.xml]
   LexSem("V","overthink",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("overthink"),arg1,arg2))),

 'overthrow-01': # ARG0:victor, agent / ARG1:entity overthrown [overthrow.xml]
   LexSem("V","overthrow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overthrow"),arg1))),

 'overturn-01': # ARG0:overturner (us. judge or court) / ARG1:thing overturned, law or judgement [overturn.xml]
   LexSem("V","overturn",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overturn"),arg1))),

 'overuse-01': # ARG0:user / ARG1:thing used [overuse.xml]
   LexSem("V","overuse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overuse"),arg1))),

 'overvalue-01': # ARG0:assigner of value, agent / ARG1:entity overvalued [overvalue.xml]
   LexSem("V","overvalue",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overvalue"),arg1))),

 'overwhelm-01': # ARG0:overwhelmer / ARG1:patient, overwhelmed / ARG2:instrument or manner [overwhelm.xml]
   LexSem("V","overwhelm",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("overwhelm"),arg1,pp("with",arg2)))),

 'overwork-01': # ARG0:employer / ARG1:worker [overwork.xml]
   LexSem("V","overwork",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("overwork"),arg1))),

 'owe-01': # ARG0:payer or buyer / ARG1:price paid / ARG2:seller or person being paid / ARG3:commodity [owe.xml]
   LexSem("V","owe",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("owe"),arg1,arg2,arg3))),

 'own-01': # ARG0:owner / ARG1:possession [own.xml]
   LexSem("V","own",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("own"),arg1))),

 'own-up-02': # ARG0:confessor / ARG1:sin [own.xml]
   LexSem("V","own",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("own"),Adv("up"),pp("to",arg1)))),

 'oxidize-01': # ARG0:Cause of oxidizing, Scientist causing conversion / ARG1:Entity/element oxidizing / ARG2:End state, oxidized to what [oxidize.xml]
   LexSem("V","oxidize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("oxidize"),arg1,pp("to",arg2)))),

 'oxygenate-01': # ARG0:supplier of air, breather, agent / ARG1:recipient, entity oxygenated [oxygenate.xml]
   LexSem("V","oxygenate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("oxygenate"),arg1))),

 'oyster-01': # ARG0:agent or causer / ARG1:entity gathered / ARG2:gathered into / ARG3:beneficiary [oyster.xml]
   LexSem("V","oyster",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("oyster"),arg1,arg2,arg3))),

 'pace-01': # ARG0:outside agent / ARG1:first entity keeping/set at pace / ARG2:arg 1 is keeping pace with what? / ARG3:mention of the pace itself [pace.xml]
   LexSem("V","pace",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("pace"),arg1,arg2,pp("at",arg3)))),

 'pace-02': # ARG0:pacer / ARG1:path [pace.xml]
   LexSem("V","pace",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pace"),arg1))),

 'pacify-01': # ARG0:peacemaker / ARG1:pacified entity [pacify.xml]
   LexSem("V","pacify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pacify"),arg1))),

 'pack-01': # ARG0:packer, agent / ARG1:beast of burden / ARG2:cargo [pack.xml]
   LexSem("V","pack",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pack"),arg1,arg2))),

 'pack-03': # ARG0:sender / ARG1:sent / ARG2:sent-to [pack.xml]
   LexSem("V","pack",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pack"),arg1,pp("to",arg2)))),

 'pack-05': # ARG0:carrier / ARG1:thing carried [pack.xml]
   LexSem("V","pack",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pack"),Adv("away"),arg1))),

 'pack-away-04': # ARG0:eater / ARG1:meal [pack.xml]
   LexSem("V","pack",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pack"),Adv("away"),arg1))),

 'pack-up-02': # ARG0:agent, packer / ARG1:cargo [pack.xml]
   LexSem("V","pack",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pack"),Adv("up"),arg1))),

 'package-01': # ARG0:packager, agent / ARG1:entity packaged / ARG2:packing material/ package / ARG3:instrument [package.xml]
   LexSem("V","package",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("package"),arg1,pp("in",arg2),pp("with",arg3)))),

 'pad-01': # ARG0:agent, causer / ARG1:container / ARG2:substance [pad.xml]
   LexSem("V","pad",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pad"),arg1,pp("with",arg2)))),

 'paddle-01': # ARG0:person doing the paddling / ARG1:thing being paddled / ARG2:source / ARG3:destination/location [paddle.xml]
   LexSem("V","paddle",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("paddle"),arg1,pp("from",arg2),pp("to",arg3)))),

 'paddywhack-01': # ARG0:hitter / ARG1:victim [paddywhack.xml]
   LexSem("V","paddywhack",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("paddywhack"),arg1))),

 'padlock-01': # ARG0:agent, fastener / ARG1:thing fastened / ARG2:thing fastened to [padlock.xml]
   LexSem("V","padlock",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("padlock"),arg1,pp("to",arg2)))),

 'page-01': # ARG0:notifier, agent / ARG1:notified person [page.xml]
   LexSem("V","page",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("page"),arg1))),

 'pain-01': # ARG0:entity causing pain, cause / ARG1:entity experiencing hurt/damage [pain.xml]
   LexSem("V","pain",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pain"),arg1))),

 'paint-01': # ARG0:agent, painter / ARG1:surface / ARG2:explicit mention of paint [paint.xml]
   LexSem("V","paint",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("paint"),arg1,arg2))),

 'paint-02': # ARG0:artist / ARG1:art / ARG2:benefactive [paint.xml]
   LexSem("V","paint",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("paint"),arg1,pp("for",arg2)))),

 'paint-03': # ARG0:describer / ARG1:thing described / ARG2:secondary attribute, described-as [paint.xml]
   LexSem("V","paint",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("paint"),arg1,pp("as",arg2)))),

 'pair-01': # ARG0:joiner / ARG1:first thing, or both things / ARG2:second thing, if separate [pair.xml]
   LexSem("V","pair",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pair"),arg1,pp("with",arg2)))),

 'pair-up-02': # ARG0:joiner / ARG1:first thing, or both things / ARG2:second thing, if separate [pair.xml]
   LexSem("V","pair",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pair"),Adv("up"),arg1,arg2))),

 'palaver-01': # ARG0:first or all converser / ARG1:other converser / ARG2:topic of conversation [palaver.xml]
   LexSem("V","palaver",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("palaver"),pp("with",arg1),pp("about",arg2)))),

 'pale-01': # ARG1:entity becoming pale [pale.xml]
   LexSem("V","pale",[":ARG1"],lambda arg1:S(arg1,VP(V("pale")))),

 'pale-02': # ARG1:thing seeming pale, weak / ARG2:in comparison to [pale.xml]
   LexSem("V","pale",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("pale"),pp("in",arg2)))),

 'pall-01': # ARG1:thing becoming less interesting / ARG2:experiencer [pall.xml]
   LexSem("V","pall",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("pall"),pp("upon",arg2)))),

 'palm-off-01': # ARG0:disposer, agent / ARG1:thing disposed of [palm.xml]
   LexSem("V","palm",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("palm"),Adv("off"),arg1))),

 'palmitoylate-01': # ARG0:intentional agent of palmitoylation (e.g. scientist) / ARG1:thing palmitoylated / ARG2:instrument, enzyme performing the palmitoylation / ARG3:result of palmitoylation / ARG4:fatty acid, molecule added to Arg1 [palmitoylate.xml]
   LexSem("V","palmitoylate",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("palmitoylate"),arg1,arg2,arg3,arg4))),

 'palpitate-01': # ARG0:Palpitater / ARG1:Thing beaten [palpitate.xml]
   LexSem("V","palpitate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("palpitate"),arg1))),

 'pamper-01': # ARG0:pamperer / ARG1:pampered [pamper.xml]
   LexSem("V","pamper",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pamper"),arg1))),

 'pan-01': # ARG0:(gold)panner, agent / ARG1:precious metals [pan.xml]
   LexSem("V","pan",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pan"),pp("for",arg1)))),

 'pan-03': # ARG0:cause, agent / ARG1:camera, view / ARG2:across what [pan.xml]
   LexSem("V","pan",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pan"),arg1,pp("across",arg2)))),

 'pan-out-02': # ARG0:entity panning out [pan.xml]
   LexSem("V","pan",[":ARG0"],lambda arg0:S(arg0,VP(V("pan"),Adv("out")))),

 'pander-01': # ARG0:appealing thing / ARG1:entity attracted [pander.xml]
   LexSem("V","pander",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pander"),pp("to",arg1)))),

 'panel-01': # ARG0:Agent, placer of panels / ARG1:Wall, entity being covered with panels / ARG2:Panels themselves, type of panel [panel.xml]
   LexSem("V","panel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("panel"),arg1,pp("with",arg2)))),

 'panhandle-01': # ARG0:begger, panhandler / ARG1:person accosted / ARG2:money, item panhandler is begging for from arg 1 [panhandle.xml]
   LexSem("V","panhandle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("panhandle"),pp("from",arg1),pp("for",arg2)))),

 'panic-01': # ARG0:stimulus / ARG1:poor fearful entity [panic.xml]
   LexSem("V","panic",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("panic"),arg1))),

 'pant-01': # ARG0:panter [pant.xml]
   LexSem("V","pant",[":ARG0"],lambda arg0:S(arg0,VP(V("pant")))),

 'pant-02': # ARG0:speaker / ARG1:utterance / ARG2:listener [pant.xml]
   LexSem("V","pant",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pant"),arg1,arg2))),

 'paper-01': # ARG0:Agent, wrapper / ARG1:Entity, object covered with paper / ARG2:Paper itself, type of paper [paper.xml]
   LexSem("V","paper",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("paper"),arg1,pp("with",arg2)))),

 'parachute-01': # ARG0:thing with a parachute / ARG1:where? [parachute.xml]
   LexSem("V","parachute",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("parachute"),pp("into",arg1)))),

 'parade-01': # ARG0:agent / ARG1:entity being paraded [parade.xml]
   LexSem("V","parade",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("parade"),arg1))),

 'paragraph-01': # ARG0:Agent defining paragraph boundaries [paragraph.xml]
   LexSem("V","paragraph",[":ARG0"],lambda arg0:S(arg0,VP(V("paragraph")))),

 'paragraph-02': # ARG0:writer / ARG1:topic [paragraph.xml]
   LexSem("V","paragraph",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("paragraph"),arg1))),

 'parallel-01': # ARG0:thing under consideration, figure / ARG1:in comparison to, ground [parallel.xml]
   LexSem("V","parallel",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("parallel"),arg1))),

 'paralyze-01': # ARG0:cause of paralysis, agent / ARG1:entity paralyzed [paralyze.xml]
   LexSem("V","paralyze",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("paralyze"),arg1))),

 'paraphrase-01': # ARG0:speaker, writer, agent / ARG1:old statment, thing paraphrased / ARG2:new statement [paraphrase.xml]
   LexSem("V","paraphrase",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("paraphrase"),arg1,arg2))),

 'parboil-01': # ARG0:cook / ARG1:food [parboil.xml]
   LexSem("V","parboil",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("parboil"),arg1))),

 'parcel-out-01': # ARG0:divider, agent / ARG1:entity parceled out / ARG2:recipient [parcel.xml]
   LexSem("V","parcel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("parcel"),Adv("out"),arg1,pp("to",arg2)))),

 'parch-01': # ARG0:cause of dryness, agent / ARG1:dry thing [parch.xml]
   LexSem("V","parch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("parch"),arg1))),

 'pardon-01': # ARG0:pardoner / ARG1:guilty party / ARG2:for what [pardon.xml]
   LexSem("V","pardon",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pardon"),arg1,arg2))),

 'pardon-02': # ARG0:person forgiving the faux pas / ARG1:guilty party, misstepper / ARG2:crime, sin or faux pas [pardon.xml]
   LexSem("V","pardon",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pardon"),arg1,pp("for",arg2)))),

 'pare-01': # ARG0:cutter / ARG1:thing cut / ARG2:medium, source / ARG3:instrument [pare.xml]
   LexSem("V","pare",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("pare"),arg1,pp("from",arg2),pp("with",arg3)))),

 'pare-02': # ARG0:cutter / ARG1:thing being reduced / ARG2:EXT / ARG3:start point / ARG4:end point [pare.xml]
   LexSem("V","pare",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("pare"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'pare-down-03': # ARG0:cutter / ARG1:thing cut / ARG2:medium, source / ARG3:instrument [pare.xml]
   LexSem("V","pare",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("pare"),Adv("down"),arg1,pp("from",arg2),pp("with",arg3)))),

 'pare-down-04': # ARG0:cutter / ARG1:thing being reduced / ARG2:EXT / ARG3:start point / ARG4:end point [pare.xml]
   LexSem("V","pare",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("pare"),Adv("down"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'park-01': # ARG0:parker, agent / ARG1:entity parked / ARG2:parking place [park.xml]
   LexSem("V","park",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("park"),arg1,pp("in",arg2)))),

 'parlay-01': # ARG0:user / ARG1:used; impelled agent / ARG2:impelled action, proposition [parlay.xml]
   LexSem("V","parlay",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("parlay"),arg1,pp("into",arg2)))),

 'parody-01': # ARG0:imitator / ARG1:entity imitated [parody.xml]
   LexSem("V","parody",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("parody"),arg1))),

 'parole-01': # ARG0:releaser / ARG1:criminal, parolee / ARG2:released from [parole.xml]
   LexSem("V","parole",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("parole"),arg1,pp("from",arg2)))),

 'parquet-01': # ARG0:Decorator / ARG1:Floor decorated / ARG2:Parquetry itself, type of parquetry [parquet.xml]
   LexSem("V","parquet",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("parquet"),arg1,pp("with",arg2)))),

 'parrot-01': # ARG0:parrot / ARG1:repeated entity/utterance / ARG2:hearer [parrot.xml]
   LexSem("V","parrot",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("parrot"),arg1,pp("at",arg2)))),

 'parry-01': # ARG0:defender / ARG1:attack / ARG2:instrument, defensive weapon [parry.xml]
   LexSem("V","parry",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("parry"),arg1,pp("with",arg2)))),

 'parse-01': # ARG0:parser / ARG1:thing analyzed / ARG2:end state, parts [parse.xml]
   LexSem("V","parse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("parse"),arg1,pp("into",arg2)))),

 'part-01': # ARG0:agent, causer / ARG1:entity/entities parted [part.xml]
   LexSem("V","part",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("part"),pp("with",arg1)))),

 'partake-01': # ARG0:agent, entity participating / ARG1:take a part in what? [partake.xml]
   LexSem("V","partake",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("partake"),pp("of",arg1)))),

 'participate-01': # ARG0:agent, entity participating / ARG1:participating in what? [participate.xml]
   LexSem("V","participate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("participate"),pp("in",arg1)))),

 'partition-01': # ARG0:entity dividing, agent / ARG1:entity divided, patient / ARG2:divided into what, end state, oblique / ARG3:divided from what, source [partition.xml]
   LexSem("V","partition",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("partition"),arg1,pp("into",arg2),pp("from",arg3)))),

 'partner-01': # ARG0:first partnerer / ARG1:second partnerer, if separate from Arg0 [partner.xml]
   LexSem("V","partner",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("partner"),pp("with",arg1)))),

 'party-01': # ARG0:focussed party, agent / ARG1:second party [party.xml]
   LexSem("V","party",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("party"),pp("with",arg1)))),

 'pass-01': # ARG0:legislative body / ARG1:bill, state prior to passing / ARG2:law, state after passing [pass.xml]
   LexSem("V","pass",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pass"),arg1,pp("into",arg2)))),

 'pass-02': # ARG0:entity moving ahead / ARG1:entity falling behind [pass.xml]
   LexSem("V","pass",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pass"),arg1))),

 'pass-03': # ARG1:thing passing [pass.xml]
   LexSem("V","pass",[":ARG1"],lambda arg1:S(arg1,VP(V("pass")))),

 'pass-04': # ARG0:allower / ARG1:thing let go by [pass.xml]
   LexSem("V","pass",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pass"),arg1))),

 'pass-05': # ARG0:giver / ARG1:thing changing hands / ARG2:getter [pass.xml]
   LexSem("V","pass",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pass"),arg1,pp("to",arg2)))),

 'pass-06': # ARG1:thing passing / ARG2:attributive [pass.xml]
   LexSem("V","pass",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("pass"),pp("for",arg2)))),

 'pass-07': # ARG1:student / ARG2:test [pass.xml]
   LexSem("V","pass",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("pass"),arg2))),

 'pass-08': # ARG0:passer / ARG1:thing passed (clot, gas, kidney stone, etc) [pass.xml]
   LexSem("V","pass",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pass"),arg1))),

 'pass-20': # ARG1:entity dying [pass.xml]
   LexSem("V","pass",[":ARG1"],lambda arg1:S(arg1,VP(V("pass")))),

 'pass-away-16': # ARG1:dead entity [pass.xml]
   LexSem("V","pass",[":ARG1"],lambda arg1:S(arg1,VP(V("pass"),Adv("away")))),

 'pass-by-17': # ARG0:entity moving ahead; passing entity / ARG1:entity falling behind; thing passed [pass.xml]
   LexSem("V","pass",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pass"),Adv("by"),arg1))),

 'pass-off-18': # ARG0:faker / ARG1:thing offered / ARG2:(possibly) duped judge / ARG3:fake attribute of Arg1 [pass.xml]
   LexSem("V","pass",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("pass"),Adv("off"),arg1,pp("to",arg2),pp("as",arg3)))),

 'pass-on-09': # ARG0:giver / ARG1:thing changing hands / ARG2:getter [pass.xml]
   LexSem("V","pass",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pass"),Adv("on"),arg1,pp("to",arg2)))),

 'pass-on-14': # ARG0:transmitter / ARG1:thing transmitted / ARG2:transmitted to [pass.xml]
   LexSem("V","pass",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pass"),Adv("on"),arg1,pp("to",arg2)))),

 'pass-on-15': # ARG1:thing dying [pass.xml]
   LexSem("V","pass",[":ARG1"],lambda arg1:S(arg1,VP(V("pass"),Adv("on")))),

 'pass-on-19': # ARG0:mover / ARG1:thing moved, package / ARG2:moved from / ARG3:moved to [pass.xml]
   LexSem("V","pass",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("pass"),Adv("on"),arg1,arg2,arg3))),

 'pass-out-10': # ARG0:distributor / ARG1:thing distributed / ARG2:distributed to [pass.xml]
   LexSem("V","pass",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pass"),Adv("out"),arg1,arg2))),

 'pass-out-11': # ARG0:fainter [pass.xml]
   LexSem("V","pass",[":ARG0"],lambda arg0:S(arg0,VP(V("pass"),Adv("out")))),

 'pass-over-12': # ARG0:ignorer / ARG1:thing ignored [pass.xml]
   LexSem("V","pass",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pass"),Adv("over"),arg1))),

 'pass-up-13': # ARG0:entity relinquishing one item / ARG1:item relinquished / ARG2:in favor of another [pass.xml]
   LexSem("V","pass",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pass"),Adv("up"),arg1,arg2))),

 'paste-01': # ARG0:agent, entity doing the tying / ARG1:patient, thing(s) being tied / ARG2:instrument, string / ARG3:attribute of arg1 [paste.xml]
   LexSem("V","paste",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("paste"),arg1,pp("to",arg2),arg3))),

 'paste-02': # ARG1:entity suffering [paste.xml]
   LexSem("V","paste",[":ARG1"],lambda arg1:S(arg1,VP(V("paste")))),

 'pasteurize-01': # ARG0:Pasteur, heater, agent / ARG1:liquid [pasteurize.xml]
   LexSem("V","pasteurize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pasteurize"),arg1))),

 'pasture-01': # ARG0:pasture-er / ARG1:thing pastured / ARG2:pasture, location [pasture.xml]
   LexSem("V","pasture",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pasture"),arg1,pp("in",arg2)))),

 'pat-01': # ARG0:patter / ARG1:patted [pat.xml]
   LexSem("V","pat",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pat"),arg1))),

 'patch-01': # ARG0:mender, agent / ARG1:thing patched [patch.xml]
   LexSem("V","patch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("patch"),arg1))),

 'patch-up-02': # ARG0:mender, agent / ARG1:thing patched [patch.xml]
   LexSem("V","patch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("patch"),Adv("up"),arg1))),

 'patent-01': # ARG0:holder of patent / ARG1:invention / ARG2:inventor, if separate from arg0 [patent.xml]
   LexSem("V","patent",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("patent"),arg1,arg2))),

 'patrol-01': # ARG0:patroller, agent / ARG1:area, place  [patrol.xml]
   LexSem("V","patrol",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("patrol"),arg1))),

 'patronize-01': # ARG0:patron, agent / ARG1:entity patronized [patronize.xml]
   LexSem("V","patronize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("patronize"),arg1))),

 'patter-01': # ARG0:causer of pattering, agent (transitive subject) / ARG1:thing emitting pattering noise, theme (intransitive subject, transitive object) / ARG2:loctation of pattering [patter.xml]
   LexSem("V","patter",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("patter"),arg1,pp("on",arg2)))),

 'pattern-01': # ARG0:copier, agent / ARG1:copy / ARG2:original [pattern.xml]
   LexSem("V","pattern",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pattern"),arg1,pp("on",arg2)))),

 'pauper-01': # ARG0:authority, cause / ARG1:pauper [pauper.xml]
   LexSem("V","pauper",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pauper"),arg1))),

 'pause-01': # ARG0:thing pausing, agent or action [pause.xml]
   LexSem("V","pause",[":ARG0"],lambda arg0:S(arg0,VP(V("pause")))),

 'pave-01': # ARG0:applier of cover, agent / ARG1:surface / ARG2:paving material [pave.xml]
   LexSem("V","pave",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pave"),arg1,pp("with",arg2)))),

 'pave-02': # ARG0:preparer / ARG1:the way / ARG2:for what [pave.xml]
   LexSem("V","pave",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pave"),arg1,pp("for",arg2)))),

 'paw-01': # ARG0:handler, agent / ARG1:thing handled, patient [paw.xml]
   LexSem("V","paw",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("paw"),pp("over",arg1)))),

 'pawn-01': # ARG0:seller / ARG1:thing deposited [pawn.xml]
   LexSem("V","pawn",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pawn"),arg1))),

 'pay-01': # ARG0:payer or buyer / ARG1:money or attention / ARG2:person being paid, destination of attention / ARG3:commodity, paid for what [pay.xml]
   LexSem("V","pay",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("pay"),arg1,arg2,pp("for",arg3)))),

 'pay-04': # ARG1:thing succeeding or working out [pay.xml]
   LexSem("V","pay",[":ARG1"],lambda arg1:S(arg1,VP(V("pay")))),

 'pay-down-06': # ARG0:payer / ARG1:debt [pay.xml]
   LexSem("V","pay",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pay"),Adv("down"),pp("about",arg1)))),

 'pay-off-02': # ARG0:payer / ARG1:debt / ARG2:owed to whom, person paid [pay.xml]
   LexSem("V","pay",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pay"),Adv("off"),arg1,arg2))),

 'pay-off-05': # ARG1:thing succeeding, working out [pay.xml]
   LexSem("V","pay",[":ARG1"],lambda arg1:S(arg1,VP(V("pay"),Adv("off")))),

 'pay-out-03': # ARG0:payer or buyer / ARG1:money or attention / ARG2:person being paid, destination of attention / ARG3:commodity, paid for what [pay.xml]
   LexSem("V","pay",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("pay"),Adv("out"),arg1,arg2,arg3))),

 'pay-up-07': # ARG0:agent, payer / ARG1:money paid / ARG2:person being paid, given the money / ARG3:commodity, money paid for what? [pay.xml]
   LexSem("V","pay",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("pay"),Adv("up"),arg1,arg2,pp("for",arg3)))),

 'peacemake-01': # ARG0:peacemaker [peacemake.xml]
   LexSem("V","peacemake",[":ARG0"],lambda arg0:S(arg0,VP(V("peacemake")))),

 'peak-01': # ARG1:thing being described / ARG2:maximum / ARG3:benefactive [peak.xml]
   LexSem("V","peak",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("peak"),pp("at",arg2),pp("for",arg3)))),

 'peal-01': # ARG0:bellringer / ARG1:bell [peal.xml]
   LexSem("V","peal",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("peal"),arg1))),

 'pearl-01': # ARG0:agent or causer / ARG1:entity gathered / ARG2:gathered into / ARG3:beneficiary [pearl.xml]
   LexSem("V","pearl",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("pearl"),arg1,arg2,arg3))),

 'peck-01': # ARG0:pecker / ARG1:thing pecked at [peck.xml]
   LexSem("V","peck",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("peck"),pp("at",arg1)))),

 'peck-02': # ARG0:hitter, bird / ARG1:thing hit / ARG2:beak / ARG3:end state of arg1 [peck.xml]
   LexSem("V","peck",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("peck"),arg1,arg2,pp("to",arg3)))),

 'pedal-01': # ARG0:pedaller / ARG1:bicycle / ARG2:path [pedal.xml]
   LexSem("V","pedal",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pedal"),arg1,arg2))),

 'peddle-01': # ARG0:seller / ARG1:thing peddled / ARG2:peddled to / ARG3:price [peddle.xml]
   LexSem("V","peddle",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("peddle"),arg1,pp("to",arg2),pp("for",arg3)))),

 'pederastize-01': # ARG0:Adult, entity initiating relationship / ARG1:Child, entity subjected to relations with an adult man [pederastize.xml]
   LexSem("V","pederastize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pederastize"),arg1))),

 'pee-01': # ARG0:person urinating / ARG1:cognate object, hopefully urine and unspecified [pee.xml]
   LexSem("V","pee",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pee"),arg1))),

 'peek-01': # ARG0:looker / ARG1:looked at [peek.xml]
   LexSem("V","peek",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("peek"),arg1))),

 'peel-01': # ARG0:remover, agent / ARG1:entity peeled [peel.xml]
   LexSem("V","peel",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("peel"),arg1))),

 'peel-off-02': # ARG0:remover, cutter, agent / ARG1:entity peeled off [peel.xml]
   LexSem("V","peel",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("peel"),Adv("off"),arg1))),

 'peep-01': # ARG0:twitter-er [peep.xml]
   LexSem("V","peep",[":ARG0"],lambda arg0:S(arg0,VP(V("peep")))),

 'peep-02': # ARG0:person peeping / ARG1:peeping at [peep.xml]
   LexSem("V","peep",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("peep"),pp("at",arg1)))),

 'peer-01': # ARG0:looker, searcher, agent / ARG1:entity peered into/at/over... [peer.xml]
   LexSem("V","peer",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("peer"),pp("in",arg1)))),

 'peeve-01': # ARG0:annoyer / ARG1:annoyed / ARG2:instrument, if separate from arg0 [peeve.xml]
   LexSem("V","peeve",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("peeve"),arg1,pp("with",arg2)))),

 'peg-01': # ARG0:cause of stabilization, agent / ARG1:entity pegged / ARG2:pegged to/at [peg.xml]
   LexSem("V","peg",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("peg"),arg1,pp("at",arg2)))),

 'peg-02': # ARG0:entity dying / ARG1:fixed: "it" [peg.xml]
   LexSem("V","peg",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("peg"),arg1))),

 'pelt-01': # ARG0:pelter, thrower, agent / ARG1:thing(s) thrown, theme / ARG2:pelted, victim, destination [pelt.xml]
   LexSem("V","pelt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pelt"),pp("with",arg1),arg2))),

 'pen-01': # ARG0:writer / ARG1:thing written / ARG2:written-to [pen.xml]
   LexSem("V","pen",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pen"),arg1,pp("to",arg2)))),

 'pen-02': # ARG0:penner / ARG1:penned [pen.xml]
   LexSem("V","pen",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pen"),arg1))),

 'pen-up-03': # ARG0:person/agent causing something to be penned up / ARG1:thing being penned up [pen.xml]
   LexSem("V","pen",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pen"),Adv("up"),arg1))),

 'penalize-01': # ARG0:applier of penalty, agent / ARG1:entity penalized / ARG2:thing penalized for [penalize.xml]
   LexSem("V","penalize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("penalize"),arg1,pp("for",arg2)))),

 'pencil-01': # ARG0:writer / ARG1:thing penciled / ARG2:destination [pencil.xml]
   LexSem("V","pencil",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pencil"),arg1,pp("on",arg2)))),

 'pend-01': # ARG1:waiting entity / ARG2:waited for [pend.xml]
   LexSem("V","pend",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("pend"),arg2))),

 'penetrate-01': # ARG0:entity entering / ARG1:place or thing entered [penetrate.xml]
   LexSem("V","penetrate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("penetrate"),arg1))),

 'people-01': # ARG1:area / ARG2:population [people.xml]
   LexSem("V","people",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("people"),pp("by",arg2)))),

 'pepper-01': # ARG0:applier / ARG1:applied to / ARG2:metaphorical pepper [pepper.xml]
   LexSem("V","pepper",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pepper"),arg1,pp("with",arg2)))),

 'perambulate-01': # ARG1:entity moving, perambulater(s) / ARG2:start point / ARG3:end point / ARG4:path [perambulate.xml]
   LexSem("V","perambulate",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("perambulate"),arg2,arg3,pp("around",arg4)))),

 'perceive-01': # ARG0:perceiver / ARG1:entity perceived / ARG2:secondary predication, perceived as [perceive.xml]
   LexSem("V","perceive",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("perceive"),arg1,pp("as",arg2)))),

 'perch-01': # ARG0:placer, agent / ARG1:thing perched / ARG2:perched on, location [perch.xml]
   LexSem("V","perch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("perch"),arg1,pp("upon",arg2)))),

 'percolate-01': # ARG0:agent of percolation / ARG1:liquid substance / ARG2:passing through what [percolate.xml]
   LexSem("V","percolate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("percolate"),arg1,arg2))),

 'perfect-01': # ARG0:cause of perfection, agent / ARG1:entity perfected [perfect.xml]
   LexSem("V","perfect",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("perfect"),arg1))),

 'perforate-01': # ARG0:agent, perforator(s) / ARG1:thing(s) being perforated, patient / ARG2:instrument of perforation [perforate.xml]
   LexSem("V","perforate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("perforate"),arg1,arg2))),

 'perform-01': # ARG0:performer / ARG1:performance, thing performed / ARG2:instrument [perform.xml]
   LexSem("V","perform",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("perform"),arg1,pp("on",arg2)))),

 'perform-02': # ARG0:performer-- entity whose behavior is being assessed / ARG1:domain of assessed behavior / ARG2:assessment [perform.xml]
   LexSem("V","perform",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("perform"),arg1,arg2))),

 'perform-LV': #  [perform.xml]
   LexSem("V","perform",[],lambda :S(VP(V("perform")))),

 'perfume-01': # ARG0:applier / ARG1:thing getting perfumed / ARG2:explicit mention of perfume itself [perfume.xml]
   LexSem("V","perfume",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("perfume"),arg1,pp("with",arg2)))),

 'perish-01': # ARG0:expiring entity [perish.xml]
   LexSem("V","perish",[":ARG0"],lambda arg0:S(arg0,VP(V("perish")))),

 'perjure-01': # ARG0:liar / ARG1:enitity perjured (usually self) / ARG2:the lie, oath [perjure.xml]
   LexSem("V","perjure",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("perjure"),arg1,pp("of",arg2)))),

 'perk-up-01': # ARG0:causer / ARG1:entity energised [perk.xml]
   LexSem("V","perk",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("perk"),Adv("up"),arg1))),

 'perm-01': # ARG0:permer / ARG1:hair / ARG2:end state [perm.xml]
   LexSem("V","perm",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("perm"),arg1,pp("into",arg2)))),

 'permeate-01': # ARG0:entity spreading / ARG1:entity permeated [permeate.xml]
   LexSem("V","permeate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("permeate"),arg1))),

 'permit-01': # ARG0:allower / ARG1:action allowed / ARG2:extracted allowed-agent [permit.xml]
   LexSem("V","permit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("permit"),arg1,arg2))),

 'perpetrate-01': # ARG0:perp / ARG1:crime / ARG2:victim [perpetrate.xml]
   LexSem("V","perpetrate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("perpetrate"),arg1,pp("against",arg2)))),

 'perpetuate-01': # ARG0:causer of lasting long / ARG1:thing lasting long [perpetuate.xml]
   LexSem("V","perpetuate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("perpetuate"),arg1))),

 'perplex-01': # ARG0:agent, cause / ARG1:experiencer, entity perplexed / ARG2:instrument [perplex.xml]
   LexSem("V","perplex",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("perplex"),arg1,pp("with",arg2)))),

 'persecute-01': # ARG0:persecutor / ARG1:persecutee [persecute.xml]
   LexSem("V","persecute",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("persecute"),arg1))),

 'persevere-01': # ARG0:person persisting / ARG1:continued action [persevere.xml]
   LexSem("V","persevere",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("persevere"),arg1))),

 'persist-01': # ARG0:causal agent / ARG1:thing continuing, persisting [persist.xml]
   LexSem("V","persist",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("persist"),arg1))),

 'personalize-01': # ARG0:cause, agent / ARG1:entity personalized [personalize.xml]
   LexSem("V","personalize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("personalize"),arg1))),

 'personify-01': # ARG1:abstraction / ARG2:person-form [personify.xml]
   LexSem("V","personify",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("personify"),arg2))),

 'perspire-01': # ARG0:sweater / ARG1:the sweat itself [perspire.xml]
   LexSem("V","perspire",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("perspire"),arg1))),

 'persuade-01': # ARG0:convincer / ARG1:impelled agent / ARG2:impelled action, proposition [persuade.xml]
   LexSem("V","persuade",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("persuade"),arg1,pp("to",arg2)))),

 'pertain-01': # ARG0:entity pertaining / ARG1:pertaining to [pertain.xml]
   LexSem("V","pertain",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pertain"),pp("to",arg1)))),

 'perturb-01': # ARG0:Stimulus of perturbation / ARG1:perturbed entity [perturb.xml]
   LexSem("V","perturb",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("perturb"),arg1))),

 'peruse-01': # ARG0:examiner, agent / ARG1:thing perused [peruse.xml]
   LexSem("V","peruse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("peruse"),arg1))),

 'pervade-01': # ARG0:entity spreading / ARG1:entity spread through [pervade.xml]
   LexSem("V","pervade",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pervade"),arg1))),

 'pervert-01': # ARG0:perverter / ARG1:entity becomeing impure / ARG2:instrument (if in addition to arg0) [pervert.xml]
   LexSem("V","pervert",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pervert"),arg1,pp("with",arg2)))),

 'pester-01': # ARG0:causer / ARG1:person pestered [pester.xml]
   LexSem("V","pester",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pester"),arg1))),

 'pet-01': # ARG0:petter(s), agent / ARG1:thing(s) petted, patient / ARG2:instrument of petting [pet.xml]
   LexSem("V","pet",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pet"),arg1,arg2))),

 'petition-01': # ARG0:asker, agent / ARG1:request [petition.xml]
   LexSem("V","petition",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("petition"),pp("for",arg1)))),

 'petrify-01': # ARG0:causer of hardening / ARG1:entity becoming hard / ARG2:resulting rock-like state [petrify.xml]
   LexSem("V","petrify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("petrify"),arg1,pp("into",arg2)))),

 'phase-in-02': # ARG0:agent / ARG1:thing being phased in [phase.xml]
   LexSem("V","phase",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("phase"),Adv("in"),arg1))),

 'phase-out-01': # ARG0:eliminator / ARG1:thing eliminated [phase.xml]
   LexSem("V","phase",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("phase"),Adv("out"),arg1))),

 'philander-01': # ARG0:philanderer [philander.xml]
   LexSem("V","philander",[":ARG0"],lambda arg0:S(arg0,VP(V("philander")))),

 'philosophize-01': # ARG0:philosopher / ARG1:philosophical topic [philosophize.xml]
   LexSem("V","philosophize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("philosophize"),arg1))),

 'phone-01': # ARG0:agent making a call / ARG1:receiver / ARG2:message [phone.xml]
   LexSem("V","phone",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("phone"),arg1,pp("with",arg2)))),

 'phosphoresce-01': # ARG0:cause, agent (unlikely?) / ARG1:patient, thing phosphorescing / ARG2:end state [phosphoresce.xml]
   LexSem("V","phosphoresce",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("phosphoresce"),arg1,pp("into",arg2)))),

 'phosphorylate-01': # ARG0:intentional agent of phosphorylation (e.g. person) / ARG1:thing phosphorylated (e.g. protein or another organic molecule) / ARG2:instrument (e.g. enzyme) / ARG3:product of phosphorylation (e.g. protein or another organic molecule) [phosphorylate.xml]
   LexSem("V","phosphorylate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("phosphorylate"),pp("from",arg1),pp("with",arg2),arg3))),

 'photocopy-01': # ARG0:copier, agent / ARG1:thing copied [photocopy.xml]
   LexSem("V","photocopy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("photocopy"),arg1))),

 'photograph-01': # ARG0:photographer / ARG1:subject [photograph.xml]
   LexSem("V","photograph",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("photograph"),arg1))),

 'phrase-01': # ARG0:person phrasing, expressing something / ARG1:thing phrased, expressed / ARG2:phrased as what? how arg1 is phrased [phrase.xml]
   LexSem("V","phrase",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("phrase"),arg1,arg2))),

 'pick-01': # ARG0:picker / ARG1:thing picked / ARG2:group or source / ARG3:benefactive [pick.xml]
   LexSem("V","pick",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("pick"),arg1,pp("from",arg2),pp("for",arg3)))),

 'pick-09': # ARG0:picker / ARG1:thing picked (at) [pick.xml]
   LexSem("V","pick",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pick"),Adv("on"),arg1))),

 'pick-10': # ARG0:Agent, picker / ARG1:Patient, thing picked at [pick.xml]
   LexSem("V","pick",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pick"),pp("at",arg1)))),

 'pick-away-07': # ARG0:remover, picker, agent / ARG1:thing picked away at [pick.xml]
   LexSem("V","pick",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pick"),Adv("away"),pp("at",arg1)))),

 'pick-off-08': # ARG0:remover, agent / ARG1:pieces / ARG2:source [pick.xml]
   LexSem("V","pick",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pick"),Adv("off"),arg1,arg2))),

 'pick-off-12': # ARG0:sniper / ARG1:target [pick.xml]
   LexSem("V","pick",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pick"),Adv("off"),arg1))),

 'pick-on-02': # ARG0:bully / ARG1:bullied [pick.xml]
   LexSem("V","pick",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pick"),Adv("on"),arg1))),

 'pick-out-03': # ARG0:picker / ARG1:thing picked / ARG2:group or source [pick.xml]
   LexSem("V","pick",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pick"),Adv("out"),arg1,pp("from",arg2)))),

 'pick-up-04': # ARG0:agent, entity acquiring something / ARG1:thing acquired / ARG2:seller / ARG3:price paid / ARG4:benefactive [pick.xml]
   LexSem("V","pick",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("pick"),Adv("up"),arg1,pp("from",arg2),pp("at",arg3),pp("for",arg4)))),

 'pick-up-05': # ARG1:thing increasing / ARG2:amount increased by, EXT or MNR / ARG3:start point / ARG4:end point [pick.xml]
   LexSem("V","pick",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("pick"),Adv("up"),arg2,arg3,arg4))),

 'pick-up-06': # ARG0:agent of resuming / ARG1:thing resuming or continuing [pick.xml]
   LexSem("V","pick",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pick"),Adv("up"),arg1))),

 'pick-up-11': # ARG0:finder / ARG1:thing found, discovery [pick.xml]
   LexSem("V","pick",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pick"),Adv("up"),arg1))),

 'picket-01': # ARG0:picketer / ARG1:unpleasant entity [picket.xml]
   LexSem("V","picket",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("picket"),arg1))),

 'pickle-01': # ARG0:agent, pickler / ARG1:thing becoming pickled [pickle.xml]
   LexSem("V","pickle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pickle"),arg1))),

 'pickpocket-01': # ARG0:pickpocket, thief / ARG1:thing taken / ARG2:person pickpocketed / ARG3:taken for [pickpocket.xml]
   LexSem("V","pickpocket",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("pickpocket"),arg1,arg2,arg3))),

 'picnic-01': # ARG0:eater / ARG1:eaten [picnic.xml]
   LexSem("V","picnic",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("picnic"),pp("on",arg1)))),

 'picture-01': # ARG0:displayer, agent / ARG1:thing pictured [picture.xml]
   LexSem("V","picture",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("picture"),arg1))),

 'piece-01': # ARG0:assembler, agent / ARG1:entity pieced / ARG2:pieces / ARG3:together [piece.xml]
   LexSem("V","piece",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("piece"),arg1,pp("from",arg2),arg3))),

 'pierce-01': # ARG0:piercer / ARG1:material pierced / ARG2:instrument, if arg0 is agent and also present / ARG3:what's on other side of material [pierce.xml]
   LexSem("V","pierce",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("pierce"),arg1,arg2,pp("through",arg3)))),

 'pigeonhole-01': # ARG0:agent, person assigning another entity a definite role/place / ARG1:entity pigeonholed, assigned a role/place / ARG2:pigenholed as what? role or position assigned/describing arg 1 [pigeonhole.xml]
   LexSem("V","pigeonhole",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pigeonhole"),arg1,arg2))),

 'piggyback-01': # ARG0:rider / ARG1:thing ridden (the piggy?) [piggyback.xml]
   LexSem("V","piggyback",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("piggyback"),pp("onto",arg1)))),

 'pile-01': # ARG0:piler / ARG1:substance being piled / ARG2:explicit mention of pile, or destination/location [pile.xml]
   LexSem("V","pile",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pile"),arg1,pp("onto",arg2)))),

 'pile-03': # ARG1:entity in motion / ARG2:destination [pile.xml]
   LexSem("V","pile",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("pile"),arg2))),

 'pile-on-04': # ARG0:agent of piling / ARG1:substance being piled / ARG2:explicit mention of pile [pile.xml]
   LexSem("V","pile",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pile"),Adv("on"),arg1,arg2))),

 'pile-up-02': # ARG0:agent of piling / ARG1:substance being piled [pile.xml]
   LexSem("V","pile",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pile"),Adv("up"),arg1))),

 'pilfer-01': # ARG0:thief, agent / ARG1:thing stolen / ARG2:stolen from / ARG3:sloten for [pilfer.xml]
   LexSem("V","pilfer",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("pilfer"),arg1,arg2,arg3))),

 'pillory-01': # ARG0:causer / ARG1:entity pilloried [pillory.xml]
   LexSem("V","pillory",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pillory"),arg1))),

 'pilot-01': # ARG0:pilot; tester / ARG1:plane; program [pilot.xml]
   LexSem("V","pilot",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pilot"),arg1))),

 'pin-01': # ARG0:agent, entity causing two objects to be attached / ARG1:first thing being pinned / ARG2:second thing, pinned to what / ARG3:instrument, pin [pin.xml]
   LexSem("V","pin",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("pin"),arg1,arg2,arg3))),

 'pin-down-02': # ARG0:agent, entity causing two objects to be attached / ARG1:first thing being pinned / ARG2:second thing, pinned to what / ARG3:instrument [pin.xml]
   LexSem("V","pin",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("pin"),Adv("down"),arg1,arg2,arg3))),

 'pinch-01': # ARG0:pincher, agent / ARG1:thing touched / ARG2:touched with, if separate from agent [pinch.xml]
   LexSem("V","pinch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pinch"),arg1,pp("with",arg2)))),

 'pinch-02': # ARG0:thief, agent / ARG1:thing stolen / ARG2:stolen from [pinch.xml]
   LexSem("V","pinch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pinch"),arg1,arg2))),

 'pinch-03': # ARG0:agent / ARG1:thing pinched [pinch.xml]
   LexSem("V","pinch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pinch"),arg1))),

 'pine-01': # ARG0:piner / ARG1:thing desired [pine.xml]
   LexSem("V","pine",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pine"),pp("for",arg1)))),

 'pine-away-02': # ARG0:piner / ARG1:thing desired [pine.xml]
   LexSem("V","pine",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pine"),Adv("away"),pp("for",arg1)))),

 'ping-01': # ARG0:pinger [ping.xml]
   LexSem("V","ping",[":ARG0"],lambda arg0:S(arg0,VP(V("ping")))),

 'pinion-01': # ARG0:binder / ARG1:entity being bound [pinion.xml]
   LexSem("V","pinion",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pinion"),arg1))),

 'pink-01': # ARG0:entity making the pinking noise [pink.xml]
   LexSem("V","pink",[":ARG0"],lambda arg0:S(arg0,VP(V("pink")))),

 'pink-02': # ARG0:agent, person holding the shears / ARG1:patient, fabric being cut / ARG2:pinking shears [pink.xml]
   LexSem("V","pink",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pink"),arg1,pp("with",arg2)))),

 'pink-03': # ARG0:agent, one making the holes / ARG1:entity being punctured / ARG2:instrument, sharp object / ARG4:holes [pink.xml]
   LexSem("V","pink",[":ARG0",":ARG1",":ARG2",":ARG4"],lambda arg0,arg1,arg2,arg4:S(arg0,VP(V("pink"),arg1,pp("with",arg2),arg4))),

 'pinpoint-01': # ARG0:decider / ARG1:thing decided [pinpoint.xml]
   LexSem("V","pinpoint",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pinpoint"),arg1))),

 'pioneer-01': # ARG0:thinker / ARG1:new idea [pioneer.xml]
   LexSem("V","pioneer",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pioneer"),arg1))),

 'pip-01': # ARG0:remover / ARG1:entity having something removed (usually a bird) / ARG2:scale, object removed [pip.xml]
   LexSem("V","pip",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pip"),arg1,arg2))),

 'pipe-01': # ARG0:causer of motion / ARG1:thing in motion / ARG2:destination / ARG3:source [pipe.xml]
   LexSem("V","pipe",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("pipe"),arg1,pp("in",arg2),pp("from",arg3)))),

 'pipe-down-03': # ARG0:(non-) speaker [pipe.xml]
   LexSem("V","pipe",[":ARG0"],lambda arg0:S(arg0,VP(V("pipe"),Adv("down")))),

 'pipe-up-02': # ARG0:speaker / ARG1:utterance [pipe.xml]
   LexSem("V","pipe",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pipe"),Adv("up"),arg1))),

 'pique-01': # ARG0:causative agent / ARG1:thing piqued (usually interest) / ARG2:causative instrument (if agent already present) [pique.xml]
   LexSem("V","pique",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pique"),arg1,pp("with",arg2)))),

 'pirate-01': # ARG0:pirate, thief, agent / ARG1:thing stolen / ARG2:stolen from [pirate.xml]
   LexSem("V","pirate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pirate"),arg1,arg2))),

 'pirouette-01': # ARG0:agent, causer of pirouette (transitive subject) / ARG1:pirouetter, theme (intransitive subject, transitive object) / ARG2:location of pirouette [pirouette.xml]
   LexSem("V","pirouette",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pirouette"),arg1,pp("on",arg2)))),

 'piss-01': # ARG0:pisser [piss.xml]
   LexSem("V","piss",[":ARG0"],lambda arg0:S(arg0,VP(V("piss")))),

 'piss-03': # ARG0:agent/cause of anger / ARG1:angry entity / ARG2:additional reason for anger, if in addition to arg0 / ARG3:intensifier [piss.xml]
   LexSem("V","piss",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("piss"),arg1,pp("with",arg2),arg3))),

 'piss-off-02': # ARG0:Angering entity/event / ARG1:Angry party / ARG2:Provocation/Cause of anger [piss.xml]
   LexSem("V","piss",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("piss"),Adv("off"),arg1,pp("with",arg2)))),

 'pit-01': # ARG0:entity setting up a fight / ARG1:one combatant / ARG2:other combatant [pit.xml]
   LexSem("V","pit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pit"),arg1,pp("against",arg2)))),

 'pit-02': # ARG0:entity removing seeds / ARG1:seeds [pit.xml]
   LexSem("V","pit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pit"),arg1))),

 'pit-03': # ARG0:pitted by / ARG1:material pitted [pit.xml]
   LexSem("V","pit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pit"),arg1))),

 'pitch-01': # ARG0:thrower / ARG1:thing thrown / ARG2:thrown at, to, over, etc [pitch.xml]
   LexSem("V","pitch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pitch"),arg1,arg2))),

 'pitch-02': # ARG0:setter of tone, agent / ARG1:tone / ARG2:value [pitch.xml]
   LexSem("V","pitch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pitch"),arg1,pp("as",arg2)))),

 'pitch-04': # ARG0:advertiser, agent / ARG1:thing touted / ARG2:attribute of arg1 / ARG3:recipient [pitch.xml]
   LexSem("V","pitch",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("pitch"),arg1,pp("as",arg2),pp("to",arg3)))),

 'pitch-in-03': # ARG0:cooperators / ARG1:thing added to the cooperation / ARG2:cooperative work [pitch.xml]
   LexSem("V","pitch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pitch"),Adv("in"),arg1,arg2))),

 'pith-01': # ARG0:pither, agent / ARG1:pithed thing / ARG2:thing removed through pithing (rare) [pith.xml]
   LexSem("V","pith",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pith"),arg1,arg2))),

 'pity-01': # ARG0:pitier / ARG1:thing pitied [pity.xml]
   LexSem("V","pity",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pity"),arg1))),

 'pivot-01': # ARG0:agent, causer of rotation (rare) / ARG1:thing turning / ARG2:pivot point [pivot.xml]
   LexSem("V","pivot",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pivot"),arg1,pp("off",arg2)))),

 'placate-01': # ARG0:causer / ARG1:patient, made happy / ARG2:instrument or manner [placate.xml]
   LexSem("V","placate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("placate"),arg1,pp("with",arg2)))),

 'place-01': # ARG0:putter / ARG1:thing put / ARG2:where put [place.xml]
   LexSem("V","place",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("place"),arg1,pp("in",arg2)))),

 'plagiarize-01': # ARG0:thief, agent / ARG1:thing stolen / ARG2:stolen from; source of information [plagiarize.xml]
   LexSem("V","plagiarize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("plagiarize"),arg1,arg2))),

 'plague-01': # ARG0:botherer, agent / ARG1:bothered / ARG2:bothered by, plagued with [plague.xml]
   LexSem("V","plague",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("plague"),arg1,pp("with",arg2)))),

 'plait-01': # ARG0:agent / ARG1:hair,lace / ARG2:end result [plait.xml]
   LexSem("V","plait",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("plait"),arg1,pp("into",arg2)))),

 'plan-01': # ARG0:planner / ARG1:thing planned / ARG2:grounds for planning / ARG3:beneficiary [plan.xml]
   LexSem("V","plan",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("plan"),arg1,pp("on",arg2),pp("for",arg3)))),

 'plane-01': # ARG0:one who planes, agent / ARG1:thing worked on / ARG2:end state, if different from arg1 [plane.xml]
   LexSem("V","plane",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("plane"),arg1,pp("to",arg2)))),

 'plank-01': # ARG0:Plank-layer, agent / ARG1:surface being covered / ARG2:planks themselves, types of planks [plank.xml]
   LexSem("V","plank",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("plank"),arg1,pp("with",arg2)))),

 'plank-02': # ARG0:cook / ARG1:food [plank.xml]
   LexSem("V","plank",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("plank"),arg1))),

 'plant-01': # ARG0:putter, agent / ARG1:entity planted / ARG2:location [plant.xml]
   LexSem("V","plant",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("plant"),arg1,arg2))),

 'plaster-01': # ARG0:agent / ARG1:thing being plastered / ARG2:thing secured to/ plastered on/to / ARG3:instrument [plaster.xml]
   LexSem("V","plaster",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("plaster"),arg1,pp("on",arg2),arg3))),

 'plate-01': # ARG0:agent, plate installer / ARG1:recipient; entity recieving plate / ARG2:explicit mention of the plate or material [plate.xml]
   LexSem("V","plate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("plate"),arg1,arg2))),

 'play-01': # ARG0:player / ARG1:game / ARG2:instrument/equipment used to play game / ARG3:opponent, play against whom [play.xml]
   LexSem("V","play",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("play"),arg1,arg2,pp("against",arg3)))),

 'play-02': # ARG0:actor / ARG1:role [play.xml]
   LexSem("V","play",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("play"),arg1))),

 'play-08': # ARG0:thing factoring in, subject in active clauses / ARG1:thing being factored into [play.xml]
   LexSem("V","play",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("play"),pp("into",arg1)))),

 'play-10': # ARG0:Trickster / ARG1:mention of trick / ARG2:tricked, who trick was played on [play.xml]
   LexSem("V","play",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("play"),arg1,pp("on",arg2)))),

 'play-11': # ARG0:performer, player / ARG1:thing performed (song, play, movie etc.) / ARG2:musical instrument, device (trumpet, walkman) / ARG3:data carrier (score, record, tape, CD, DVD) [play.xml]
   LexSem("V","play",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("play"),arg1,pp("on",arg2),arg3))),

 'play-down-07': # ARG0:deemphasizer, agent / ARG1:topic of discussion [play.xml]
   LexSem("V","play",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("play"),Adv("down"),arg1))),

 'play-off-05': # ARG0:manipulator / ARG1:one victim / ARG2:the other victim [play.xml]
   LexSem("V","play",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("play"),Adv("off"),arg1,arg2))),

 'play-on-09': # ARG0:manipulator / ARG1:one victim / ARG2:the other victim [play.xml]
   LexSem("V","play",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("play"),Adv("on"),arg1,arg2))),

 'play-out-03': # ARG0:agent, entity causing something to complete / ARG1:thing coming to completion [play.xml]
   LexSem("V","play",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("play"),Adv("out"),arg1))),

 'play-to-06': # ARG0:causer of pleasing, agent / ARG1:entity being pleased [play.xml]
   LexSem("V","play",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("play"),Adv("to"),arg1))),

 'play-up-04': # ARG0:emphasizer, agent / ARG1:topic of discussion [play.xml]
   LexSem("V","play",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("play"),Adv("up"),arg1))),

 'play_into_ones_hands-13': # ARG0:entity playing into arg1's hands / ARG1:manipulator / ARG2:subject matter [hand.xml]
   LexSem("V","play",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("play"),arg1,pp("on",arg2)))),

 'plead-01': # ARG0:begger, appealer / ARG1:appealed to, begged from / ARG2:begged/appealed for [plead.xml]
   LexSem("V","plead",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("plead"),pp("to",arg1),pp("from",arg2)))),

 'plead-02': # ARG0:the accused / ARG1:guilty or innocent / ARG2:alleged crime [plead.xml]
   LexSem("V","plead",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("plead"),arg1,pp("to",arg2)))),

 'please-01': # ARG0:agent, pleaser / ARG1:patient, entity pleased / ARG2:instrumental [please.xml]
   LexSem("V","please",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("please"),arg1,pp("by",arg2)))),

 'pledge-01': # ARG0:promiser / ARG1:person promised to / ARG2:promised thing or action [pledge.xml]
   LexSem("V","pledge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pledge"),arg1,pp("to",arg2)))),

 'plink-01': # ARG0:agent, causer of plinking (transitive subject only) / ARG1:thing emitting plinking sound, theme / ARG2:location of plinking [plink.xml]
   LexSem("V","plink",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("plink"),arg1,pp("into",arg2)))),

 'plod-01': # ARG0:walker, plodder / ARG1:path [plod.xml]
   LexSem("V","plod",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("plod"),pp("on",arg1)))),

 'plonk-01': # ARG0:agent, causer of plonking ((active voice) transitive subject only) / ARG1:thing emitting plonking noise, theme / ARG2:location of plonking [plonk.xml]
   LexSem("V","plonk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("plonk"),arg1,pp("on",arg2)))),

 'plop-01': # ARG0:agent, person purposefully doing the dropping / ARG1:thing being dropped / ARG2:location/destination of the thing being dropped [plop.xml]
   LexSem("V","plop",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("plop"),arg1,pp("on",arg2)))),

 'plot-01': # ARG0:plotter(s), agent / ARG1:plotted action, plan / ARG2:malefactive, plotted against [plot.xml]
   LexSem("V","plot",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("plot"),arg1,pp("against",arg2)))),

 'plot-out-02': # ARG0:planner, agent / ARG1:entity plotted [plot.xml]
   LexSem("V","plot",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("plot"),Adv("out"),arg1))),

 'plow-01': # ARG0:plower / ARG1:plowed / ARG2:plowed where [plow.xml]
   LexSem("V","plow",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("plow"),arg1,pp("into",arg2)))),

 'pluck-01': # ARG0:remover, agent / ARG1:entity plucked / ARG2:plucked from [pluck.xml]
   LexSem("V","pluck",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pluck"),arg1,arg2))),

 'plug-02': # ARG0:advertiser / ARG1:advertised [plug.xml]
   LexSem("V","plug",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("plug"),arg1))),

 'plug-04': # ARG0:plugger / ARG1:(thing with) plug / ARG2:socket [plug.xml]
   LexSem("V","plug",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("plug"),arg1,pp("into",arg2)))),

 'plug-in-03': # ARG0:plugger / ARG1:(thing with) plug [plug.xml]
   LexSem("V","plug",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("plug"),Adv("in"),arg1))),

 'plug-up-01': # ARG0:causer of blockage / ARG1:thing becoming blocked / ARG2:plug [plug.xml]
   LexSem("V","plug",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("plug"),Adv("up"),arg1,arg2))),

 'plumb-01': # ARG0:agent, explorer / ARG1:person/place/thing explored / ARG2:in search of [plumb.xml]
   LexSem("V","plumb",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("plumb"),arg1,pp("for",arg2)))),

 'plumb-02': # ARG0:agent / ARG1:thing weighted / ARG2:lead weight [plumb.xml]
   LexSem("V","plumb",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("plumb"),arg1,arg2))),

 'plumb-03': # ARG0:agent / ARG1:thing being made vertical / ARG2:thing aligned to [plumb.xml]
   LexSem("V","plumb",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("plumb"),arg1,pp("to",arg2)))),

 'plumb-04': # ARG0:plumber / ARG1:thing being plumbed / ARG2:start point of the plumbing / ARG3:end point of the plumbing [plumb.xml]
   LexSem("V","plumb",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("plumb"),arg1,pp("from",arg2),pp("into",arg3)))),

 'plummet-01': # ARG1:Logical subject, patient, thing falling / ARG2:EXT, amount fallen / ARG3:start point / ARG4:end point, end state of arg1 [plummet.xml]
   LexSem("V","plummet",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("plummet"),pp("by",arg2),pp("from",arg3),pp("to",arg4)))),

 'plump-01': # ARG0:causal agent / ARG1:thing becoming plump / ARG2:plumping agent (instrument) [plump.xml]
   LexSem("V","plump",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("plump"),arg1,pp("with",arg2)))),

 'plunder-01': # ARG0:Plunderer, robber / ARG1:Plundered, entity from which goods are taken / ARG2:Goods taken by plundering [plunder.xml]
   LexSem("V","plunder",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("plunder"),arg1,arg2))),

 'plunge-01': # ARG1:Logical subject, patient, thing falling / ARG2:EXT, amount fallen / ARG3:start point / ARG4:end point, end state of arg1 [plunge.xml]
   LexSem("V","plunge",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("plunge"),pp("about",arg2),pp("from",arg3),pp("below",arg4)))),

 'plunge-02': # ARG0:placer, causer of immersion / ARG1:thing being immersed / ARG2:in what [plunge.xml]
   LexSem("V","plunge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("plunge"),arg1,pp("into",arg2)))),

 'plunk-01': # ARG0:agent, putter / ARG1:thing put / ARG2:where put [plunk.xml]
   LexSem("V","plunk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("plunk"),arg1,pp("into",arg2)))),

 'ply-01': # ARG0:provider / ARG1:entity getting stuff / ARG2:stuff [ply.xml]
   LexSem("V","ply",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ply"),arg1,pp("with",arg2)))),

 'ply-02': # ARG0:worker / ARG1:business/trade/skill [ply.xml]
   LexSem("V","ply",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ply"),arg1))),

 'ply-03': # ARG0:agent, pry-er / ARG1:thing pried / ARG2:end state/attribute of arg1 [ply.xml]
   LexSem("V","ply",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ply"),arg1,arg2))),

 'poach-01': # ARG0:cook / ARG1:food cooked / ARG2:water [poach.xml]
   LexSem("V","poach",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("poach"),arg1,pp("in",arg2)))),

 'poach-02': # ARG0:hunter / ARG1:prey [poach.xml]
   LexSem("V","poach",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("poach"),arg1))),

 'pocket-01': # ARG0:taker, agent / ARG1:thing taken [pocket.xml]
   LexSem("V","pocket",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pocket"),arg1))),

 'pockmark-01': # ARG0:cause of pox, agent / ARG1:pockmarked entity [pockmark.xml]
   LexSem("V","pockmark",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pockmark"),arg1))),

 'pod-01': # ARG0:remover / ARG1:thing podded [pod.xml]
   LexSem("V","pod",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pod"),arg1))),

 'point-01': # ARG0:pointer / ARG1:thing pointed (defaults to finger) / ARG2:pointed at (a variety of prepositions) [point.xml]
   LexSem("V","point",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("point"),arg1,pp("toward",arg2)))),

 'point-out-02': # ARG0:pointer / ARG1:pointed at [point.xml]
   LexSem("V","point",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("point"),Adv("out"),arg1))),

 'poise-01': # ARG0:causer of balancing, agent / ARG1:entity poised / ARG2:poised for [poise.xml]
   LexSem("V","poise",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("poise"),arg1,arg2))),

 'poison-01': # ARG0:killer / ARG1:corpse / ARG2:poison [poison.xml]
   LexSem("V","poison",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("poison"),arg1,pp("with",arg2)))),

 'poison-02': # ARG0:applier / ARG1:poisoned substance / ARG2:poison [poison.xml]
   LexSem("V","poison",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("poison"),arg1,arg2))),

 'poke-01': # ARG0:toucher, agent / ARG1:thing touched / ARG2:long slender object [poke.xml]
   LexSem("V","poke",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("poke"),pp("into",arg1),arg2))),

 'poke-around-02': # ARG0:looker, searcher, agent / ARG1:place looked in / ARG2:thing looked for, goal [poke.xml]
   LexSem("V","poke",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("poke"),Adv("around"),pp("in",arg1),pp("for",arg2)))),

 'polarize-01': # ARG0:agent/cause of separation / ARG1:first side or whole thing polarized / ARG2:other side [polarize.xml]
   LexSem("V","polarize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("polarize"),arg1,pp("from",arg2)))),

 'police-01': # ARG0:police / ARG1:thing or place being monitored [police.xml]
   LexSem("V","police",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("police"),arg1))),

 'policy-01': # ARG0:entity holding the policy / ARG1:the policy / ARG2:policy regarding [policy.xml]
   LexSem("V","policy",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("policy"),pp("of",arg1),arg2))),

 'polish-01': # ARG0:polisher / ARG1:thing getting shiny / ARG2:instrument / ARG3:end state, attribute [polish.xml]
   LexSem("V","polish",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("polish"),arg1,pp("with",arg2),pp("to",arg3)))),

 'polish-off-02': # ARG0:finisher, agent / ARG1:thing finished [polish.xml]
   LexSem("V","polish",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("polish"),Adv("off"),arg1))),

 'polish-up-03': # ARG0:polisher / ARG1:thing being polished / ARG2:instrument / ARG3:end state [polish.xml]
   LexSem("V","polish",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("polish"),Adv("up"),arg1,arg2,arg3))),

 'politicize-01': # ARG0:cause, agent / ARG1:issue [politicize.xml]
   LexSem("V","politicize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("politicize"),arg1))),

 'polka-01': # ARG0:agent, causer of polka-ing, (transitive subject only) / ARG1:polkaer(s), theme (intransitive subject, transitive object) / ARG2:location of polka-ing [polka.xml]
   LexSem("V","polka",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("polka"),arg1,pp("in",arg2)))),

 'poll-01': # ARG0:poller / ARG1:people asked / ARG2:topic [poll.xml]
   LexSem("V","poll",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("poll"),arg1,pp("about",arg2)))),

 'pollinate-01': # ARG0:fertilizer, agent / ARG1:plant  pollinated [pollinate.xml]
   LexSem("V","pollinate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pollinate"),arg1))),

 'pollute-01': # ARG0:causer / ARG1:entity polluted [pollute.xml]
   LexSem("V","pollute",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pollute"),pp("of",arg1)))),

 'polymerize-01': # ARG0:Causer of polymerization, agent / ARG1:substance undergoing polymerization / ARG2:Instrument or manner if separate from arg 0 / ARG3:Resulting substance [polymerize.xml]
   LexSem("V","polymerize",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("polymerize"),arg1,arg2,arg3))),

 'polyploidize-01': # ARG0:intentional agent of polyploidization (e.g. scientist) / ARG1:thing polyploidized (e.g. cell, organism) / ARG2:instrument / ARG3:starting state (if arg1 is inappropriate) / ARG4:result of polyploidization [polyploidize.xml]
   LexSem("V","polyploidize",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("polyploidize"),arg1,pp("with",arg2),arg3,pp("into",arg4)))),

 'pomade-01': # ARG0:applier of pomade, agent / ARG1:hair, surface pomaded / ARG2:pomade itself, type of pomade [pomade.xml]
   LexSem("V","pomade",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pomade"),arg1,pp("with",arg2)))),

 'ponder-01': # ARG0:thinker / ARG1:thought [ponder.xml]
   LexSem("V","ponder",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ponder"),arg1))),

 'pontificate-01': # ARG0:speaker (Pope) / ARG1:utterance / ARG2:listener [pontificate.xml]
   LexSem("V","pontificate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pontificate"),arg1,arg2))),

 'poo-01': # ARG0:person defecating / ARG1:thing pooped out, hopefully poop and understood [poo.xml]
   LexSem("V","poo",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("poo"),arg1))),

 'poohpooh-01': # ARG0:Shower of disdain / ARG1:disdainful thing [poohpooh.xml]
   LexSem("V","pooh-pooh",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pooh-pooh"),arg1))),

 'pool-01': # ARG0:collector(s), agent(s) / ARG1:thing collected / ARG2:secondary attribute of arg1 [pool.xml]
   LexSem("V","pool",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pool"),arg1,pp("into",arg2)))),

 'pool-02': # ARG1:thing forming a puddle [pool.xml]
   LexSem("V","pool",[":ARG1"],lambda arg1:S(arg1,VP(V("pool")))),

 'pop-01': # ARG0:maker of sounds [pop.xml]
   LexSem("V","pop",[":ARG0"],lambda arg0:S(arg0,VP(V("pop")))),

 'pop-02': # ARG0:causer of popping / ARG1:thing popping, bubble [pop.xml]
   LexSem("V","pop",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pop"),arg1))),

 'pop-04': # ARG0:causer of motion / ARG1:entity in motion / ARG2:EXT, distance moved / ARG3:start point / ARG4:end point / ARG5:direction [pop.xml]
   LexSem("V","pop",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg0,arg1,arg2,arg3,arg4,arg5:S(arg0,VP(V("pop"),arg1,pp("up",arg2),arg3,pp("to",arg4),arg5))),

 'pop-05': # ARG0:hitter / ARG1:person, thing hit / ARG2:mention of punch, hit itself if present [pop.xml]
   LexSem("V","pop",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pop"),arg1,arg2))),

 'pop-off-06': # ARG0:junkie / ARG1:drug [pop.xml]
   LexSem("V","pop",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pop"),Adv("off"),arg1))),

 'pop-up-03': # ARG0:agent, causer of appearance / ARG1:thing appearing [pop.xml]
   LexSem("V","pop",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pop"),Adv("up"),arg1))),

 'popularize-01': # ARG0:popularizer / ARG1:thing now popular / ARG2:instrument [popularize.xml]
   LexSem("V","popularize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("popularize"),arg1,pp("with",arg2)))),

 'populate-01': # ARG0:provider / ARG1:area / ARG2:population [populate.xml]
   LexSem("V","populate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("populate"),arg1,pp("with",arg2)))),

 'pore-01': # ARG0:studier, agent / ARG1:entity pored over [pore.xml]
   LexSem("V","pore",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pore"),pp("over",arg1)))),

 'port-01': # ARG0:carrier, agent / ARG1:entity ported [port.xml]
   LexSem("V","port",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("port"),arg1))),

 'portend-01': # ARG0:thing portending / ARG1:sign / ARG2:portend for [portend.xml]
   LexSem("V","portend",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("portend"),arg1,pp("for",arg2)))),

 'portion-01': # ARG0:giver / leaver / portioner / ARG1:thing portioned / ARG2:benefactive / given-to [portion.xml]
   LexSem("V","portion",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("portion"),arg1,arg2))),

 'portray-01': # ARG0:labeller / ARG1:item being labelled / ARG2:attribute [portray.xml]
   LexSem("V","portray",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("portray"),arg1,pp("as",arg2)))),

 'pose-01': # ARG0:player / ARG1:role [pose.xml]
   LexSem("V","pose",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pose"),pp("as",arg1)))),

 'pose-02': # ARG0:poser / ARG1:question, etc / ARG2:hearer [pose.xml]
   LexSem("V","pose",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pose"),arg1,pp("to",arg2)))),

 'posit-01': # ARG0:entity proposing / ARG1:thing proposed, proposition [posit.xml]
   LexSem("V","posit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("posit"),arg1))),

 'position-01': # ARG0:agent, putter / ARG1:thing positioned, often REC / ARG2:location or position, or attribute of arg1 [position.xml]
   LexSem("V","position",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("position"),arg1,pp("as",arg2)))),

 'possess-01': # ARG0:possessor / ARG1:possession [possess.xml]
   LexSem("V","possess",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("possess"),arg1))),

 'possible-01': # ARG1:thing that is possible [possible.xml]
   LexSem("V","can",[":ARG1"],lambda arg1:S(arg1,VP(V("can")))),

 'post-01': # ARG0:poster / ARG1:posted / ARG2:posted-to [post.xml]
   LexSem("V","post",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("post"),arg1,pp("to",arg2)))),

 'post-02': # ARG0:teller / ARG1:hearer / ARG2:news [post.xml]
   LexSem("V","post",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("post"),arg1,arg2))),

 'post-03': # ARG0:assigning entity / ARG1:entity given a station / ARG2:the station, post [post.xml]
   LexSem("V","post",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("post"),arg1,pp("in",arg2)))),

 'post-04': # ARG0:sender / ARG1:sent (mail, etc) / ARG2:mail service used / ARG3:recipient [post.xml]
   LexSem("V","post",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("post"),arg1,pp("with",arg2),arg3))),

 'poster-01': # ARG0:agent, person putting up posters / ARG1:wall, surface covered with posters / ARG2:posters themselves, types of posters [poster.xml]
   LexSem("V","poster",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("poster"),arg1,pp("with",arg2)))),

 'postmark-01': # ARG0:applier of stamp, agent / ARG1:letter / ARG2:temporal attribute [postmark.xml]
   LexSem("V","postmark",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("postmark"),arg1,pp("by",arg2)))),

 'postpone-01': # ARG0:agent, causer of delay / ARG1:event delayed / ARG2:delay itself, EXT, time period, how long arg 1 was delayed for / ARG3:original time / ARG4:new time [postpone.xml]
   LexSem("V","postpone",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("postpone"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'postulate-01': # ARG0:entity proposing / ARG1:thing proposed, proposition [postulate.xml]
   LexSem("V","postulate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("postulate"),arg1))),

 'posture-01': # ARG0:assumer of pose / ARG1:pose [posture.xml]
   LexSem("V","posture",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("posture"),pp("toward",arg1)))),

 'pot-01': # ARG0:agent, potter / ARG1:theme, thing potted / ARG2:destination [pot.xml]
   LexSem("V","pot",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pot"),arg1,pp("in",arg2)))),

 'potentiate-01': # ARG0:Intentional agent, Cause of increased potency / ARG1:Thing enhanced/improved / ARG2:Instrument, drug / ARG3:Enhanced by how much, EXT or MNR [potentiate.xml]
   LexSem("V","potentiate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("potentiate"),arg1,arg2,arg3))),

 'potter-01': # ARG0:potterer / ARG1:thing pottered over [potter.xml]
   LexSem("V","potter",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("potter"),pp("over",arg1)))),

 'pounce-01': # ARG0:attacker, agent / ARG1:thing pounced on [pounce.xml]
   LexSem("V","pounce",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pounce"),pp("on",arg1)))),

 'pound-02': # ARG0:agent, hitter / ARG1:thing hit / ARG2:instrument, thing hit by or with [pound.xml]
   LexSem("V","pound",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pound"),arg1,pp("with",arg2)))),

 'pound-03': # ARG0:creator / ARG1:thing pounded, raw material / ARG2:end product [pound.xml]
   LexSem("V","pound",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pound"),arg1,pp("to",arg2)))),

 'pound-04': # ARG0:entity in motion / ARG1:path [pound.xml]
   LexSem("V","pound",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pound"),pp("to",arg1)))),

 'pound-05': # ARG1:Entity pulsating [pound.xml]
   LexSem("V","pound",[":ARG1"],lambda arg1:S(arg1,VP(V("pound")))),

 'pound-out-01': # ARG0:pounder, extractor / ARG1:thing extracted [pound.xml]
   LexSem("V","pound",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pound"),Adv("out"),arg1))),

 'pour-01': # ARG0:agent, pourer / ARG1:liquid / ARG2:source / ARG3:destination [pour.xml]
   LexSem("V","pour",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("pour"),arg1,pp("from",arg2),pp("into",arg3)))),

 'pour-02': # ARG1:rain [pour.xml]
   LexSem("V","pour",[":ARG1"],lambda arg1:S(arg1,VP(V("pour")))),

 'pout-01': # ARG0:pouter / ARG1:pout at [pout.xml]
   LexSem("V","pout",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pout"),pp("at",arg1)))),

 'powder-01': # ARG0:agent / ARG1:thing made into powdered [powder.xml]
   LexSem("V","powder",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("powder"),arg1))),

 'powder-02': # ARG0:agent / ARG1:thing sprinkled with powder / ARG2:powder [powder.xml]
   LexSem("V","powder",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("powder"),arg1,pp("with",arg2)))),

 'power-00': # ARG1:entity in power / ARG2:in power of/have power over what [power.xml]
   LexSem("V","have power over",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("have power over"),arg2))),

 'power-01': # ARG0:source of power / ARG1:entity supplied with power / ARG2:entity powered with [power.xml]
   LexSem("V","power",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("power"),arg1,pp("with",arg2)))),

 'practice-01': # ARG0:practicer / ARG1:skill / ARG2:instrument [practice.xml]
   LexSem("V","practice",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("practice"),arg1,pp("by",arg2)))),

 'praise-01': # ARG0:praiser / ARG1:praised / ARG2:reason [praise.xml]
   LexSem("V","praise",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("praise"),arg1,pp("for",arg2)))),

 'prance-01': # ARG0:entity in motion / ARG1:path [prance.xml]
   LexSem("V","prance",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("prance"),pp("around",arg1)))),

 'prattle-01': # ARG0:speaker / ARG1:utterance,sound / ARG2:listener,recipient [prattle.xml]
   LexSem("V","prattle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("prattle"),pp("about",arg1),pp("at",arg2)))),

 'prawn-01': # ARG0:agent or causer / ARG1:entity gathered / ARG2:gathered into / ARG3:beneficiary [prawn.xml]
   LexSem("V","prawn",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("prawn"),arg1,arg2,arg3))),

 'pray-01': # ARG0:pray-er / ARG1:prayer / ARG2:God [pray.xml]
   LexSem("V","pray",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pray"),pp("for",arg1),pp("to",arg2)))),

 'preach-01': # ARG0:preacher, agent / ARG1:utterance [preach.xml]
   LexSem("V","preach",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("preach"),arg1))),

 'prearrange-01': # ARG0:arranger / ARG1:thing arranged [prearrange.xml]
   LexSem("V","prearrange",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("prearrange"),arg1))),

 'precaution-01': # ARG0:Entity giving warning / ARG1:the warning / ARG2:warned entity [precaution.xml]
   LexSem("V","precaution",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("precaution"),arg1,pp("to",arg2)))),

 'precede-01': # ARG0:causal agent / ARG1:thing preceding (thing that comes first) / ARG2:thing preceded (thing that comes second) / ARG3:domain in which priority occurs [precede.xml]
   LexSem("V","precede",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("precede"),arg1,arg2,pp("in",arg3)))),

 'precipitate-01': # ARG0:cause / ARG1:precipitated action [precipitate.xml]
   LexSem("V","precipitate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("precipitate"),arg1))),

 'precipitate-02': # ARG1:the watery substance falling from the sky [precipitate.xml]
   LexSem("V","precipitate",[":ARG1"],lambda arg1:S(arg1,VP(V("precipitate")))),

 'preclude-01': # ARG0:preventer / ARG1:Theme (action or object being prevented) / ARG2:secondary predication or action / ARG3:instrument [preclude.xml]
   LexSem("V","preclude",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("preclude"),arg1,pp("from",arg2),arg3))),

 'precondition-02': # ARG0:agent; causer of conditioning / ARG1:entity conditioned / ARG2:topic, preconditioned to, for, or about [precondition.xml]
   LexSem("V","precondition",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("precondition"),pp("of",arg1),pp("towards",arg2)))),

 'predate-01': # ARG1:thing coming before / ARG2:thing coming after [predate.xml]
   LexSem("V","predate",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("predate"),arg2))),

 'predate-02': # ARG0:predator / ARG1:prey / ARG2:source [predate.xml]
   LexSem("V","predate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("predate"),arg1,pp("from",arg2)))),

 'predate-03': # ARG0:agent-- entity assigning a date / ARG1:thing assigned a date / ARG2:date assigned, value or extent [predate.xml]
   LexSem("V","predate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("predate"),arg1,arg2))),

 'predetermine-01': # ARG0:determiner / ARG1:determination [predetermine.xml]
   LexSem("V","predetermine",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("predetermine"),arg1))),

 'predicate-01': # ARG0:establisher, agent / ARG1:entity predicated / ARG2:predicated on [predicate.xml]
   LexSem("V","predicate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("predicate"),arg1,pp("on",arg2)))),

 'predict-01': # ARG0:fortune teller / ARG1:prediction [predict.xml]
   LexSem("V","predict",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("predict"),arg1))),

 'predispose-01': # ARG0:entity predisposing / ARG1:entity predisposed / ARG2:predisposed to [predispose.xml]
   LexSem("V","predispose",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("predispose"),arg1,pp("to",arg2)))),

 'predominate-01': # ARG1:thing predominating, theme / ARG2:predominate what? [predominate.xml]
   LexSem("V","predominate",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("predominate"),pp("in",arg2)))),

 'preempt-01': # ARG0:actor / ARG1:thing prevented / ARG2:induced action [preempt.xml]
   LexSem("V","pre-empt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pre-empt"),arg1,arg2))),

 'preen-01': # ARG0:preener(s), agent / ARG1:thing preened (e.g., feathers, oneself) / ARG2:instrument of preening [preen.xml]
   LexSem("V","preen",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("preen"),arg1,arg2))),

 'preexist-01': # ARG1:thing coming before (pre-existing thing) / ARG2:thing coming after (transitive object) [preexist.xml]
   LexSem("V","preexist",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("preexist"),arg2))),

 'prefer-01': # ARG0:chooser, agent / ARG1:entity chosen / ARG2:entity compared to [prefer.xml]
   LexSem("V","prefer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("prefer"),arg1,pp("over",arg2)))),

 'preform-01': # ARG0:creator / ARG1:thing created / ARG2:source / ARG3:benefactive / ARG4:attribute, secondary predication [preform.xml]
   LexSem("V","preform",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("preform"),arg1,pp("from",arg2),arg3,arg4))),

 'preincubate-01': # ARG0:agent of preincubation / ARG1:patient of preincubation / ARG2:instrument or manner / ARG3:Egg, starting point / ARG4:Chick, ending result [preincubate.xml]
   LexSem("V","preincubate",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("preincubate"),arg1,pp("with",arg2),arg3,arg4))),

 'prejudice-01': # ARG0:causer / ARG1:prejudiced entity / ARG2:prejudiced against [prejudice.xml]
   LexSem("V","prejudice",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("prejudice"),arg1,pp("against",arg2)))),

 'premeditate-01': # ARG0:thinker / ARG1:thought, thing planned [premeditate.xml]
   LexSem("V","premeditate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("premeditate"),arg1))),

 'premiere-01': # ARG0:causal agent / ARG1:thing premiering [premiere.xml]
   LexSem("V","premiere",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("premiere"),arg1))),

 'premise-01': # ARG0:supposer / ARG1:thing assumed / ARG2:based upon [premise.xml]
   LexSem("V","premise",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("premise"),arg1,pp("on",arg2)))),

 'prenegotiate-01': # ARG0:negotiator / ARG1:other party arg 0 is negotiating with when separate mention / ARG2:deal negotiated [prenegotiate.xml]
   LexSem("V","pre-negotiate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pre-negotiate"),arg1,arg2))),

 'prenylate-01': # ARG0:agent/causer of prenylation (e.g. scientist) / ARG1:protein or chemical compound prenylated / ARG2:catalyst (e.g. enzyme) / ARG3:resulting state of modification / ARG4:prenyl group / ARG5:specific end of the protein (terminus) / ARG6:specific mention of the cysteine [prenylate.xml]
   LexSem("V","prenylate",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4",":ARG5",":ARG6"],lambda arg0,arg1,arg2,arg3,arg4,arg5,arg6:S(arg0,VP(V("prenylate"),arg1,pp("by",arg2),arg3,arg4,arg5))),

 'preoccupy-01': # ARG0:causer of preoccupation / ARG1:preoccupied entity / ARG2:focus of attention [preoccupy.xml]
   LexSem("V","preoccupy",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("preoccupy"),arg1,pp("with",arg2)))),

 'prepare-01': # ARG0:creator / ARG1:creation / ARG2:created-from, thing changed / ARG3:benefactive [prepare.xml]
   LexSem("V","prepare",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("prepare"),arg1,pp("from",arg2),pp("for",arg3)))),

 'prepare-02': # ARG0:preparer / ARG1:thing made ready / ARG2:ready for [prepare.xml]
   LexSem("V","prepare",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("prepare"),arg1,pp("to",arg2)))),

 'prepay-01': # ARG0:payer or buyer / ARG1:thing paid for (often debt) / ARG2:seller or person being paid / ARG3:price paid [prepay.xml]
   LexSem("V","prepay",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("prepay"),arg1,pp("to",arg2),arg3))),

 'prepossess-01': # ARG0:agent or cause of bias / ARG1:entity with the bias / ARG2:the bias [prepossess.xml]
   LexSem("V","prepossess",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("prepossess"),arg1,arg2))),

 'presage-01': # ARG0:sign / ARG1:future [presage.xml]
   LexSem("V","presage",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("presage"),arg1))),

 'prescribe-01': # ARG0:establisher of rules, agent / ARG1:rule [prescribe.xml]
   LexSem("V","prescribe",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("prescribe"),arg1))),

 'prescribe-02': # ARG0:doctor / ARG1:medicine / ARG2:prescribed for [prescribe.xml]
   LexSem("V","prescribe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("prescribe"),arg1,pp("for",arg2)))),

 'present-01': # ARG0:giver / ARG1:thing given / ARG2:given to / ARG3:secondary attribute of thing given [present.xml]
   LexSem("V","present",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("present"),arg1,arg2,pp("as",arg3)))),

 'present-101': # ARG1:infant / ARG2:body part initially emerging / ARG3:orientation of infant: breech, vertex, transversely, etc [present.xml]
   LexSem("V","present",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("present"),arg2,arg3))),

 'present-102': # ARG0:Patient presenting / ARG1:Disorder presenting / ARG2:Manner of presentation (symptoms, illness) [present.xml]
   LexSem("V","present",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("present"),arg1,pp("as",arg2)))),

 'preseparate-01': # ARG0:entity causing separation / ARG1:thing being divided / ARG2:source, separated from [preseparate.xml]
   LexSem("V","pre-separate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pre-separate"),arg1,arg2))),

 'preserve-01': # ARG0:preserver / ARG1:thing preserved / ARG2:beneficiary / ARG3:preserved against what? [preserve.xml]
   LexSem("V","preserve",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("preserve"),arg1,pp("for",arg2),pp("against",arg3)))),

 'preset-01': # ARG0:agent, pre-setter / ARG1:thing pre-set / ARG2:attribute, Arg 1 is set to do/be/etc. [preset.xml]
   LexSem("V","preset",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("preset"),arg1,arg2))),

 'preside-01': # ARG0:leader / ARG1:led [preside.xml]
   LexSem("V","preside",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("preside"),pp("over",arg1)))),

 'press-01': # ARG0:presser / ARG1:pressed (on) / ARG2:goal, pressed-for, arg1 is pressed to do what? [press.xml]
   LexSem("V","press",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("press"),arg1,pp("for",arg2)))),

 'press-02': # ARG0:mover / ARG1:moved [press.xml]
   LexSem("V","press",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("press"),pp("with",arg1)))),

 'press-03': # ARG0:producer / ARG1:record, music, disk [press.xml]
   LexSem("V","press",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("press"),arg1))),

 'pressgang-01': # ARG0:agent, forcer / ARG1:entity forced / ARG2:forced into/to do what [pressgang.xml]
   LexSem("V","pressgang",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pressgang"),arg1,pp("into",arg2)))),

 'pressure-01': # ARG0:presser / ARG1:pressed (on) / ARG2:goal, pressed-for [pressure.xml]
   LexSem("V","pressure",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pressure"),arg1,pp("to",arg2)))),

 'pressure-02': # ARG0:mover / ARG1:moved [pressure.xml]
   LexSem("V","pressure",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pressure"),arg1))),

 'pressurize-01': # ARG0:agent, causer of pressurization / ARG1:patient, space filled with pressure / ARG2:amount increased by, EXT or MNR / ARG3:start point / ARG4:end point [pressurize.xml]
   LexSem("V","pressurize",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("pressurize"),arg1,arg2,arg3,arg4))),

 'prestate-01': # ARG0:stater / ARG1:utterance / ARG2:hearer [prestate.xml]
   LexSem("V","prestate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("prestate"),arg1,arg2))),

 'presume-01': # ARG0:agent, entity/act that presumes / ARG1:thing presumed [presume.xml]
   LexSem("V","presume",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("presume"),arg1))),

 'pretend-01': # ARG0:pretender / ARG1:premise [pretend.xml]
   LexSem("V","pretend",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pretend"),arg1))),

 'pretreat-01': # ARG0:doctor / ARG1:patient / ARG2:illness or injury / ARG3:instrument [pretreat.xml]
   LexSem("V","pretreat",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("pretreat"),arg1,arg2,pp("with",arg3)))),

 'prevail-01': # ARG0:winner / ARG1:loser / ARG2:competition [prevail.xml]
   LexSem("V","prevail",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("prevail"),pp("over",arg1),pp("in",arg2)))),

 'prevail-02': # ARG1:thing that exists [prevail.xml]
   LexSem("V","prevail",[":ARG1"],lambda arg1:S(arg1,VP(V("prevail")))),

 'prevent-01': # ARG0:Agent, intentional/animate / ARG1:Theme (action or object being prevented) / ARG2:secondary predication or action / ARG3:instrument [prevent.xml]
   LexSem("V","prevent",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("prevent"),arg1,arg2,pp("with",arg3)))),

 'preview-01': # ARG0:pre-viewer, agent / ARG1:entity previewed [preview.xml]
   LexSem("V","preview",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("preview"),arg1))),

 'prey-01': # ARG0:hunter, agent / ARG1:entity  preyed on [prey.xml]
   LexSem("V","prey",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("prey"),pp("on",arg1)))),

 'price-01': # ARG0:seller, pricer / ARG1:commodity / ARG2:price / ARG3:potential buyer [price.xml]
   LexSem("V","price",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("price"),arg1,pp("at",arg2),arg3))),

 'price-out-02': # ARG0:agent, pricer / ARG1:commodity / ARG2:price [price.xml]
   LexSem("V","price",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("price"),Adv("out"),arg1,pp("at",arg2)))),

 'prick-01': # ARG0:prick(er) / ARG1:victim [prick.xml]
   LexSem("V","prick",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("prick"),arg1))),

 'prick-up-02': # ARG0:causer / ARG1:entity standing up straight [prick.xml]
   LexSem("V","prick",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("prick"),Adv("up"),arg1))),

 'prickle-01': # ARG0:Cause of tingling sensation / ARG1:Thing tingling [prickle.xml]
   LexSem("V","prickle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("prickle"),arg1))),

 'prickle-02': # ARG0:Needle or maker of hole / ARG1:thing pricked [prickle.xml]
   LexSem("V","prickle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("prickle"),arg1))),

 'pride-01': # ARG0:proud one / ARG1:proud of/about; congratulate on / ARG2:grounds, reason for pride [pride.xml]
   LexSem("V","pride",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pride"),arg1,pp("on",arg2)))),

 'prime-01': # ARG0:agent, primer / ARG1:thing made ready / ARG2:ready for what? [prime.xml]
   LexSem("V","prime",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("prime"),arg1,arg2))),

 'primp-01': # ARG0:primper, agent / ARG1:thing primped (e.g., hair), patient / ARG2:instrument of primping [primp.xml]
   LexSem("V","primp",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("primp"),arg1,arg2))),

 'print-01': # ARG0:printer / ARG1:document / ARG2:benefactive [print.xml]
   LexSem("V","print",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("print"),arg1,pp("for",arg2)))),

 'print-03': # ARG0:artist / ARG1:printed / ARG2:printing instrument/method (screen, intaglio, lithograph, etc) [print.xml]
   LexSem("V","print",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("print"),arg1,arg2))),

 'print-out-02': # ARG0:agent / ARG1:document [print.xml]
   LexSem("V","print",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("print"),Adv("out"),arg1))),

 'prioritize-01': # ARG0:agent / ARG1:thing made a priority [prioritize.xml]
   LexSem("V","prioritize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("prioritize"),arg1))),

 'privatize-01': # ARG0:government, usually / ARG1:property, usually industry [privatize.xml]
   LexSem("V","privatize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("privatize"),arg1))),

 'privilege-01': # ARG0:granter / ARG1:benefit allowed / ARG2:extracted allowed-agent [privilege.xml]
   LexSem("V","privilege",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("privilege"),arg1,arg2))),

 'prize-01': # ARG0:assigner of value / ARG1:entity prized / ARG2:prized for what [prize.xml]
   LexSem("V","prize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("prize"),arg1,pp("for",arg2)))),

 'probe-01': # ARG0:prober / ARG1:thing probed / ARG2:in search of [probe.xml]
   LexSem("V","probe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("probe"),arg1,pp("for",arg2)))),

 'proceed-01': # ARG0:causer of continuing event / ARG1:thing continuing [proceed.xml]
   LexSem("V","proceed",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("proceed"),pp("with",arg1)))),

 'process-01': # ARG0:processor / ARG1:thing processed / ARG2:end state / ARG3:start state [process.xml]
   LexSem("V","process",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("process"),arg1,pp("into",arg2),pp("from",arg3)))),

 'proclaim-01': # ARG0:speaker / ARG1:utterance [proclaim.xml]
   LexSem("V","proclaim",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("proclaim"),arg1))),

 'procrastinate-01': # ARG0:procrastinator / ARG1:thing procrastinated about/over [procrastinate.xml]
   LexSem("V","procrastinate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("procrastinate"),pp("over",arg1)))),

 'procure-01': # ARG0:receiver / ARG1:thing procured / ARG2:procured from [procure.xml]
   LexSem("V","procure",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("procure"),arg1,arg2))),

 'prod-01': # ARG0:causer / ARG1:entity urged / ARG2:action [prod.xml]
   LexSem("V","prod",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("prod"),arg1,pp("to",arg2)))),

 'produce-01': # ARG0:creator / ARG1:creation / ARG2:created-from, thing changed / ARG3:benefactive [produce.xml]
   LexSem("V","produce",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("produce"),arg1,pp("for",arg2),pp("for",arg3)))),

 'produce-02': # ARG0:shower / ARG1:thing shown [produce.xml]
   LexSem("V","produce",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("produce"),arg1))),

 'profess-01': # ARG0:professor / ARG1:utterance / ARG2:hearer / ARG3:attributive [profess.xml]
   LexSem("V","profess",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("profess"),arg1,pp("to",arg2),pp("of",arg3)))),

 'proffer-01': # ARG0:giver / ARG1:thing given / ARG2:entity given to [proffer.xml]
   LexSem("V","proffer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("proffer"),arg1,pp("to",arg2)))),

 'profile-01': # ARG0:creator, agent / ARG1:entity profiled [profile.xml]
   LexSem("V","profile",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("profile"),arg1))),

 'profit-01': # ARG0:entity making money / ARG1:source / ARG2:the profit itself, amount [profit.xml]
   LexSem("V","profit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("profit"),pp("from",arg1),pp("of",arg2)))),

 'profiteer-01': # ARG0:pirate [profiteer.xml]
   LexSem("V","profiteer",[":ARG0"],lambda arg0:S(arg0,VP(V("profiteer")))),

 'program-01': # ARG0:programmer, agent / ARG1:entity  programmed / ARG2:attribute [program.xml]
   LexSem("V","program",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("program"),arg1,pp("to",arg2)))),

 'progress-01': # ARG1:thing moving / ARG2:aspect of arg1 that is actually progressing / ARG3:start point / ARG4:end point [progress.xml]
   LexSem("V","progress",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("progress"),pp("with",arg2),pp("from",arg3),pp("to",arg4)))),

 'prohibit-01': # ARG0:Agent / ARG1:Theme (action or object being prevented) / ARG2:secondary predication or action / ARG3:instrument [prohibit.xml]
   LexSem("V","prohibit",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("prohibit"),arg1,pp("from",arg2),pp("with",arg3)))),

 'project-01': # ARG0:causer of projection / ARG1:thing projected/projecting / ARG2:into/onto [project.xml]
   LexSem("V","project",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("project"),arg1,pp("onto",arg2)))),

 'project-02': # ARG0:fortune teller / ARG1:prediction, subject matter of prediction / ARG2:attribute, arg1 predicted to have what characteristic? [project.xml]
   LexSem("V","project",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("project"),arg1,arg2))),

 'proliferate-01': # ARG0:thing becoming abundant [proliferate.xml]
   LexSem("V","proliferate",[":ARG0"],lambda arg0:S(arg0,VP(V("proliferate")))),

 'prolong-01': # ARG0:cause, agent / ARG1:thing getting longer / ARG2:EXT / ARG3:start point / ARG4:end point [prolong.xml]
   LexSem("V","prolong",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("prolong"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'promenade-01': # ARG0:causer of promenading, agent, transitive subject / ARG1:thing promendaded, theme, intransitive subject, ditransitive object / ARG2:start point / ARG3:end point / ARG4:path [promenade.xml]
   LexSem("V","promenade",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("promenade"),arg1,arg2,arg3,pp("down",arg4)))),

 'promise-01': # ARG0:promiser / ARG1:person promised to / ARG2:promised action [promise.xml]
   LexSem("V","promise",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("promise"),arg1,pp("to",arg2)))),

 'promote-01': # ARG0:causer of motion, employer / ARG1:thing in motion, employee / ARG2:destination, new job / ARG3:source, old job [promote.xml]
   LexSem("V","promote",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("promote"),arg1,pp("to",arg2),pp("from",arg3)))),

 'promote-02': # ARG0:advertiser / ARG1:thing being pitched, advertised / ARG2:audience [promote.xml]
   LexSem("V","promote",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("promote"),arg1,pp("to",arg2)))),

 'prompt-01': # ARG0:causer, prompter / ARG1:event [prompt.xml]
   LexSem("V","prompt",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("prompt"),arg1))),

 'prompt-02': # ARG0:causer, prompter / ARG1:impelled agent / ARG2:impelled action [prompt.xml]
   LexSem("V","prompt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("prompt"),arg1,pp("into",arg2)))),

 'prompt-03': # ARG0:(tele)prompter / ARG1:speaker [prompt.xml]
   LexSem("V","prompt",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("prompt"),arg1))),

 'promulgate-01': # ARG0:preacher / ARG1:wonderful thing [promulgate.xml]
   LexSem("V","promulgate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("promulgate"),arg1))),

 'pronate-01': # ARG0:pronater / ARG1:body part rotated [pronate.xml]
   LexSem("V","pronate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pronate"),arg1))),

 'pronounce-01': # ARG0:speaker / ARG1:utterance / ARG2:pronunciation, attribute [pronounce.xml]
   LexSem("V","pronounce",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pronounce"),arg1,arg2))),

 'proof-02': # ARG0:maker / ARG1:thing made impervious / ARG2:impervious to what [prove.xml]
   LexSem("V","proof",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("proof"),arg1,arg2))),

 'proofread-01': # ARG0:proofreader / ARG1:document [proofread.xml]
   LexSem("V","proofread",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("proofread"),arg1))),

 'prop-up-01': # ARG0:helper, prop / ARG1:thing being held up / ARG2:instrument, if separate from arg0 [prop.xml]
   LexSem("V","prop",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("prop"),Adv("up"),arg1,pp("with",arg2)))),

 'propagandize-01': # ARG0:propagandist, agent / ARG1:person or group propagandized [propagandize.xml]
   LexSem("V","propagandize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("propagandize"),arg1))),

 'propagate-01': # ARG0:Agent / ARG1:Theme(Creation) / ARG2:Instrument / ARG3:secondary predication [propagate.xml]
   LexSem("V","propagate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("propagate"),arg1,arg2,pp("as",arg3)))),

 'propel-01': # ARG0:causer of motion / ARG1:thing in motion / ARG2:destination [propel.xml]
   LexSem("V","propel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("propel"),arg1,pp("into",arg2)))),

 'prophesy-01': # ARG0:prophet, agent / ARG1:topic of prophecy, theme / ARG2:prophecy itself, predicated [prophesy.xml]
   LexSem("V","prophesy",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("prophesy"),pp("over",arg1),arg2))),

 'proportion-01': # ARG0:divider / ARG1:thing divided / ARG2:thing divided into [proportion.xml]
   LexSem("V","proportion",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("proportion"),arg1,pp("into",arg2)))),

 'propose-01': # ARG0:proposer / ARG1:proposition / ARG2:who/what arg1 applies to (beneficiary, not listener) / ARG3:listener [propose.xml]
   LexSem("V","propose",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("propose"),arg1,pp("for",arg2),pp("to",arg3)))),

 'proscribe-01': # ARG0:causer / ARG1:thing proscribed / ARG2:proscribed from [proscribe.xml]
   LexSem("V","proscribe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("proscribe"),arg1,pp("from",arg2)))),

 'prosecute-01': # ARG0:prosecutor / ARG1:entity being prosecuted (defendant or case) / ARG2:for what crime / ARG3:law against the crime [prosecute.xml]
   LexSem("V","prosecute",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("prosecute"),arg1,pp("under",arg2),pp("under",arg3)))),

 'proselytize-01': # ARG0:proselytizer / ARG1:proselytized / ARG2:new faith, party, institution, or cause [proselytize.xml]
   LexSem("V","proselytize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("proselytize"),arg1,pp("on",arg2)))),

 'prospect-01': # ARG0:searcher / ARG1:thing searched for / ARG2:area prospected [prospect.xml]
   LexSem("V","prospect",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("prospect"),arg1,arg2))),

 'prosper-01': # ARG0:thing prospering [prosper.xml]
   LexSem("V","prosper",[":ARG0"],lambda arg0:S(arg0,VP(V("prosper")))),

 'prostitute-01': # ARG0:prostitute, agent / ARG1:thing being prostituted (e.g., oneself, one's body, etc.) [prostitute.xml]
   LexSem("V","prostitute",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("prostitute"),arg1))),

 'prostrate-01': # ARG0:agent or one who prostrates / ARG1:one who prostrates (if different from ARG0) / ARG2:prostrate to [prostrate.xml]
   LexSem("V","prostrate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("prostrate"),arg1,pp("before",arg2)))),

 'protect-01': # ARG0:protector / ARG1:protected / ARG2:danger / ARG3:instrument [protect.xml]
   LexSem("V","protect",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("protect"),arg1,pp("from",arg2),pp("by",arg3)))),

 'proteolyze-01': # ARG0:agent of proteolysis (e.g. scientist) / ARG1:entity undergoing proteolysis (e.g. small molecule) / ARG2:catalyst ir other cause (e.g. enzyme, temperature) / ARG3:result of proteolysis (e.g. polypeptides, amino acids) / ARG4:rate [proteolyze.xml]
   LexSem("V","proteolyze",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("proteolyze"),arg1,arg2,arg3,pp("at",arg4)))),

 'protest-01': # ARG0:protester / ARG1:objectionable thing, topic of protest [protest.xml]
   LexSem("V","protest",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("protest"),arg1))),

 'protest-02': # ARG0:speaker / ARG1:utterance / ARG2:hearer [protest.xml]
   LexSem("V","protest",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("protest"),arg1,pp("to",arg2)))),

 'protract-01': # ARG0:agent / ARG1:patient, thing extended [protract.xml]
   LexSem("V","protract",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("protract"),arg1))),

 'protrude-01': # ARG1:thing protruding / ARG2:source, sticking out of what [protrude.xml]
   LexSem("V","protrude",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("protrude"),pp("from",arg2)))),

 'prove-01': # ARG0:prover / ARG1:proposition / ARG2:benefactive, proved-to [prove.xml]
   LexSem("V","prove",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("prove"),arg1,pp("to",arg2)))),

 'provide-01': # ARG0:provider / ARG1:thing provided / ARG2:entity provided for (benefactive) [provide.xml]
   LexSem("V","provide",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("provide"),arg1,arg2))),

 'provision-02': # ARG0:entity providing provisions / ARG1:entity receiving provisions / ARG2:provisions [provide.xml]
   LexSem("V","provision",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("provision"),arg1,pp("with",arg2)))),

 'provoke-01': # ARG0:causer / ARG1:thing provoked / ARG2:secondary impelled agent, when separate from reaction [provoke.xml]
   LexSem("V","provoke",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("provoke"),arg1,arg2))),

 'provoke-02': # ARG0:sexually provocative entity / ARG1:sexual arousal, explicitly stated / ARG2:entity becoming sexually aroused [provoke.xml]
   LexSem("V","provoke",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("provoke"),arg1,arg2))),

 'prowl-01': # ARG0:agent, prowler / ARG1:path [prowl.xml]
   LexSem("V","prowl",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("prowl"),arg1))),

 'prune-01': # ARG0:remover, agent / ARG1:branches / ARG2:whole plant / ARG3:instrument, pruning shears [prune.xml]
   LexSem("V","prune",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("prune"),arg1,arg2,pp("with",arg3)))),

 'pry-01': # ARG0:agent, pry-er / ARG1:thing pried / ARG2:end state/attribute of arg1 [pry.xml]
   LexSem("V","pry",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pry"),arg1,arg2))),

 'pry-02': # ARG0:looker / ARG1:looked at [pry.xml]
   LexSem("V","pry",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pry"),pp("into",arg1)))),

 'publicize-01': # ARG0:publicist / ARG1:topic / ARG2:secondary predication [publicize.xml]
   LexSem("V","publicize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("publicize"),arg1,pp("as",arg2)))),

 'publish-01': # ARG0:publisher / ARG1:book, report [publish.xml]
   LexSem("V","publish",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("publish"),arg1))),

 'pucker-01': # ARG0:causer of motion / ARG1:thing puckering [pucker.xml]
   LexSem("V","pucker",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pucker"),arg1))),

 'pucker-up-02': # ARG0:causer of motion / ARG1:thing puckering up [pucker.xml]
   LexSem("V","pucker",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pucker"),Adv("up"),arg1))),

 'puff-01': # ARG0:candidate for lung cancer / ARG1:cigarette, etc [puff.xml]
   LexSem("V","puff",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("puff"),arg1))),

 'puff-02': # ARG1:puffy thing [puff.xml]
   LexSem("V","puff",[":ARG1"],lambda arg1:S(arg1,VP(V("puff")))),

 'puff-up-03': # ARG0:cause of increase / ARG1:thing increasing [puff.xml]
   LexSem("V","puff",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("puff"),Adv("up"),arg1))),

 'puff-up-04': # ARG1:thing appearing [puff.xml]
   LexSem("V","puff",[":ARG1"],lambda arg1:S(arg1,VP(V("puff"),Adv("up")))),

 'puke-01': # ARG0:puker [puke.xml]
   LexSem("V","puke",[":ARG0"],lambda arg0:S(arg0,VP(V("puke")))),

 'puke-up-02': # ARG0:puker / ARG1:puke itself [puke.xml]
   LexSem("V","puke",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("puke"),Adv("up"),arg1))),

 'pull-01': # ARG0:puller / ARG1:thing pulled / ARG2:DIR, destination or attribute of arg1 / ARG3:EXT, distance moved [pull.xml]
   LexSem("V","pull",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("pull"),arg1,pp("in",arg2),pp("by",arg3)))),

 'pull-06': # ARG0:puller / ARG1:the plug, the wool, etc / ARG2:the rest of the idiom [pull.xml]
   LexSem("V","pull",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pull"),arg1,pp("on",arg2)))),

 'pull-09': # ARG0:remover / ARG1:thing removed / ARG2:removed from [pull.xml]
   LexSem("V","pull",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pull"),arg1,pp("from",arg2)))),

 'pull-down-08': # ARG0:intentional agent of pull-down (e.g. scientist) / ARG1:thing pulled down, antigen (e.g. protein) / ARG2:pulled down from, solution / ARG3:instrument [pull.xml]
   LexSem("V","pull-down",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("pull-down"),arg1,arg2,pp("with",arg3)))),

 'pull-off-03': # ARG0:manager / ARG1:deed accomplished [pull.xml]
   LexSem("V","pull",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pull"),Adv("off"),arg1))),

 'pull-out-02': # ARG0:causal agent / ARG1:entity leaving / ARG2:place left [pull.xml]
   LexSem("V","pull",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pull"),Adv("out"),arg1,pp("of",arg2)))),

 'pull-over-05': # ARG0:causal agent / ARG1:thing moving, pulling over / ARG2:destination [pull.xml]
   LexSem("V","pull",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pull"),Adv("over"),arg1,pp("to",arg2)))),

 'pull-through-04': # ARG0:survivor / ARG1:adverse circumstances [pull.xml]
   LexSem("V","pull",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pull"),Adv("through"),arg1))),

 'pulp-01': # ARG0:pulp-er / ARG1:thing pulped / ARG2:pulp [pulp.xml]
   LexSem("V","pulp",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pulp"),arg1,arg2))),

 'pulsate-01': # ARG1:thing pulsating [pulsate.xml]
   LexSem("V","pulsate",[":ARG1"],lambda arg1:S(arg1,VP(V("pulsate")))),

 'pulse-01': # ARG1:thing pulsing / ARG2:manner [pulse.xml]
   LexSem("V","pulse",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("pulse"),arg2))),

 'pulverize-01': # ARG0:destructor, agent / ARG1:entity pulverized [pulverize.xml]
   LexSem("V","pulverize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pulverize"),arg1))),

 'pummel-01': # ARG0:agent, hitter - animate only! / ARG1:thing hit / ARG2:instrument, thing hit by or with [pummel.xml]
   LexSem("V","pummel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pummel"),arg1,arg2))),

 'pump-01': # ARG0:pumper / ARG1:container / ARG2:liquid [pump.xml]
   LexSem("V","pump",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("pump"),pp("into",arg1),arg2))),

 'pump-04': # ARG0:causer of movement / ARG1:thing moving up and down [pump.xml]
   LexSem("V","pump",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pump"),arg1))),

 'pump-out-03': # ARG0:pumper / ARG1:thing drained / ARG2:liquid / ARG3:instrument [pump.xml]
   LexSem("V","pump",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("pump"),Adv("out"),arg1,arg2,pp("with",arg3)))),

 'pump-up-02': # ARG0:pumper / ARG1:thing inflated [pump.xml]
   LexSem("V","pump",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pump"),Adv("up"),arg1))),

 'punch-01': # ARG0:agent / ARG1:entity punched [punch.xml]
   LexSem("V","punch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("punch"),arg1))),

 'punctuate-01': # ARG0:divider / ARG1:thing divided [punctuate.xml]
   LexSem("V","punctuate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("punctuate"),arg1))),

 'puncture-01': # ARG0:agent, one making hole / ARG1:patient, thing being punctured / ARG2:instrument [puncture.xml]
   LexSem("V","puncture",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("puncture"),arg1,pp("with",arg2)))),

 'punish-01': # ARG0:punisher, agent / ARG1:punished / ARG2:punished-for / ARG3:mention of punishment itself [punish.xml]
   LexSem("V","punish",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("punish"),arg1,pp("for",arg2),pp("of",arg3)))),

 'punt-01': # ARG0:kicker / ARG1:the ball / ARG2:source / ARG3:destination [punt.xml]
   LexSem("V","punt",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("punt"),arg1,pp("from",arg2),pp("to",arg3)))),

 'punt-02': # ARG0:Gondolier (person propelling the boat) / ARG1:the boat / ARG2:destination/location of the boat. [punt.xml]
   LexSem("V","punt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("punt"),arg1,arg2))),

 'punt-03': # ARG0:gambler / ARG1:monetary (or other) bet / ARG2:the thing being bet on [punt.xml]
   LexSem("V","punt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("punt"),arg1,pp("on",arg2)))),

 'pup-01': # ARG0:pupper, birther, agent / ARG1:thing(s) pupped, puppies, patient [pup.xml]
   LexSem("V","pup",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pup"),arg1))),

 'purchase-01': # ARG0:purchaser / ARG1:thing purchased / ARG2:seller / ARG3:price paid / ARG4:benefactive [purchase.xml]
   LexSem("V","purchase",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("purchase"),arg1,pp("from",arg2),pp("at",arg3),pp("for",arg4)))),

 'purge-01': # ARG0:remover, agent / ARG1:entity purged / ARG2:purged of, impurity [purge.xml]
   LexSem("V","purge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("purge"),arg1,pp("of",arg2)))),

 'purify-01': # ARG0:cause, agent / ARG1:contaminated thing, containing impurities / ARG2:impurities/contaminants [purify.xml]
   LexSem("V","purify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("purify"),arg1,pp("of",arg2)))),

 'purl-01': # ARG1:thing purling [purl.xml]
   LexSem("V","purl",[":ARG1"],lambda arg1:S(arg1,VP(V("purl")))),

 'purloin-01': # ARG0:thief, agent / ARG1:thing stolen / ARG2:stolen from / ARG3:stolen for [purloin.xml]
   LexSem("V","purloin",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("purloin"),arg1,arg2,arg3))),

 'purple-01': # ARG0:agent, causing purpling / ARG1:thing purpled / ARG2:end state [purple.xml]
   LexSem("V","purple",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("purple"),arg1,pp("into",arg2)))),

 'purport-01': # ARG0:claimer / ARG1:thing claimed [purport.xml]
   LexSem("V","purport",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("purport"),pp("to",arg1)))),

 'purpose-01': # ARG0:agent, speaker, purposer / ARG1:utterance, quotation, topic / ARG2:addressee(s), recipient [purpose.xml]
   LexSem("V","purpose",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("purpose"),arg1,arg2))),

 'purr-01': # ARG0:cat [purr.xml]
   LexSem("V","purr",[":ARG0"],lambda arg0:S(arg0,VP(V("purr")))),

 'purr-02': # ARG0:speaker / ARG1:utterance / ARG2:hearer [purr.xml]
   LexSem("V","purr",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("purr"),arg1,arg2))),

 'purse-01': # ARG0:causer of motion / ARG1:thing pursing [purse.xml]
   LexSem("V","purse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("purse"),arg1))),

 'pursue-01': # ARG0:thing following / ARG1:thing followed [pursue.xml]
   LexSem("V","pursue",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pursue"),arg1))),

 'push-01': # ARG0:pusher / ARG1:thing pushed / ARG2:direction, destination [push.xml]
   LexSem("V","push",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("push"),arg1,pp("into",arg2)))),

 'push-02': # ARG0:forcer, pusher / ARG1:impelled agent / ARG2:impelled action [push.xml]
   LexSem("V","push",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("push"),arg1,pp("to",arg2)))),

 'push-03': # ARG1:aging person / ARG2:age they're nearing [push.xml]
   LexSem("V","push",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("push"),arg2))),

 'push-04': # ARG0:advocate / ARG1:thing pushed, goal arg0 is striving to achieve [push.xml]
   LexSem("V","push",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("push"),arg1))),

 'push-05': # ARG0:agent, cause, actor / ARG1:thing pushed [push.xml]
   LexSem("V","push",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("push"),arg1))),

 'put-01': # ARG0:putter / ARG1:thing put / ARG2:where put [put.xml]
   LexSem("V","put",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("put"),arg1,pp("on",arg2)))),

 'put-02': # ARG0:speaker / ARG1:thing said [put.xml]
   LexSem("V","put",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("put"),arg1))),

 'put-03': # ARG0:putter / ARG1:thing put / ARG2:attribute of arg1 [put.xml]
   LexSem("V","put",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("put"),arg1,pp("as",arg2)))),

 'put-down-15': # ARG0:insulter / ARG1:insulted / ARG2:for what [put.xml]
   LexSem("V","put",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("put"),Adv("down"),arg1,arg2))),

 'put-in-05': # ARG0:contributor / ARG1:contribution [put.xml]
   LexSem("V","put",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("put"),Adv("in"),arg1))),

 'put-off-06': # ARG0:delayer / ARG1:delayed / ARG2:delay itself, EXT, time period [put.xml]
   LexSem("V","put",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("put"),Adv("off"),arg1,pp("for",arg2)))),

 'put-off-07': # ARG0:offender / ARG1:offended [put.xml]
   LexSem("V","put",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("put"),Adv("off"),arg1))),

 'put-on-08': # ARG0:wearer / ARG1:clothing/role/act [put.xml]
   LexSem("V","put",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("put"),Adv("on"),arg1))),

 'put-out-09': # ARG0:extinguisher / ARG1:fire [put.xml]
   LexSem("V","put",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("put"),Adv("out"),arg1))),

 'put-out-10': # ARG0:distributor / ARG1:distributed [put.xml]
   LexSem("V","put",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("put"),Adv("out"),arg1))),

 'put-out-14': # ARG0:cause/agent / ARG1:entity inconvenienced / ARG2:about what [put.xml]
   LexSem("V","put",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("put"),Adv("out"),arg1,pp("about",arg2)))),

 'put-up-11': # ARG0:supplier / ARG1:supply, equipment / ARG2:recipient, benefactive [put.xml]
   LexSem("V","put",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("put"),Adv("up"),arg1,pp("for",arg2)))),

 'put-up-12': # ARG0:tolerater / ARG1:thing tolerated [put.xml]
   LexSem("V","put",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("put"),Adv("up"),pp("with",arg1)))),

 'put-up-13': # ARG0:builder / ARG1:thing built, instituted, or established [put.xml]
   LexSem("V","put",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("put"),Adv("up"),arg1))),

 'putrefy-01': # ARG0:agent, causer of rotting / ARG1:thing rotting [putrefy.xml]
   LexSem("V","putrefy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("putrefy"),arg1))),

 'putter-01': # ARG0:putterer [putter.xml]
   LexSem("V","putter",[":ARG0"],lambda arg0:S(arg0,VP(V("putter")))),

 'putty-01': # ARG0:agent, putty-er / ARG1:location/entity covered in putty / ARG2:putty itself, type of putty [putty.xml]
   LexSem("V","putty",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("putty"),arg1,pp("with",arg2)))),

 'puzzle-01': # ARG0:cause, agent / ARG1:entity experiencing confusion / ARG2:confused about or over what? [puzzle.xml]
   LexSem("V","puzzle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("puzzle"),arg1,pp("with",arg2)))),

 'pyramid-01': # ARG0:builder, agent / ARG1:thing built (pyramid) [pyramid.xml]
   LexSem("V","pyramid",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("pyramid"),arg1))),

 'quack-01': # ARG0:duck [quack.xml]
   LexSem("V","quack",[":ARG0"],lambda arg0:S(arg0,VP(V("quack")))),

 'quadruple-01': # ARG0:causer of increase / ARG1:thing increasing, rising / ARG2:EXT, always unmentioned because it's 4x / ARG3:start point / ARG4:end point [quadruple.xml]
   LexSem("V","quadruple",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("quadruple"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'quaff-01': # ARG0:quaffer/drinker, agent / ARG1:thing quaffed, patient [quaff.xml]
   LexSem("V","quaff",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("quaff"),arg1))),

 'quake-01': # ARG0:thing trembling/quaking / ARG1:cause of trembling/quaking [quake.xml]
   LexSem("V","quake",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("quake"),arg1))),

 'qualify-01': # ARG0:speaker / ARG1:thing being described / ARG2:secondary predication [qualify.xml]
   LexSem("V","qualify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("qualify"),arg1,pp("as",arg2)))),

 'qualify-02': # ARG1:entity being tested / ARG2:for what? [qualify.xml]
   LexSem("V","qualify",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("qualify"),pp("for",arg2)))),

 'quantify-01': # ARG0:entity doing the quantifying / ARG1:thing quantified / ARG2:secondary predication on arg, quantified as what [quantify.xml]
   LexSem("V","quantify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("quantify"),arg1,pp("as",arg2)))),

 'quantitate-01': # ARG0:Measurer / ARG1:Thing measured [quantitate.xml]
   LexSem("V","quantitate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("quantitate"),arg1))),

 'quantize-01': # ARG0:quantizer(s), agent / ARG1:thing quantized, theme / ARG2:value/amount of quantization / ARG3:quantized into what, destination [quantize.xml]
   LexSem("V","quantize",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("quantize"),arg1,arg2,arg3))),

 'quarantine-01': # ARG0:quarantiner, agent / ARG1:thing(s) quarrantined, patient / ARG2:quarrantined from whom [quarantine.xml]
   LexSem("V","quarantine",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("quarantine"),arg1,pp("from",arg2)))),

 'quarrel-01': # ARG0:a person engaged in a quarrel / ARG1:other person quarreling / ARG2:topic [quarrel.xml]
   LexSem("V","quarrel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("quarrel"),pp("with",arg1),pp("with",arg2)))),

 'quarry-01': # ARG0:quarrier, agent / ARG1:location (the quarry) / ARG2:the stone [quarry.xml]
   LexSem("V","quarry",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("quarry"),arg1,arg2))),

 'quarter-01': # ARG0:entity or organization providing housing / ARG1:entity being housed / ARG2:location/housing [quarter.xml]
   LexSem("V","quarter",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("quarter"),arg1,pp("in",arg2)))),

 'quarter-02': # ARG0:horses or responsible party / ARG1:person being quartered [quarter.xml]
   LexSem("V","quarter",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("quarter"),arg1))),

 'quarter-03': # ARG0:Intentional agent / ARG1:Thing being divided up into 4 pieces / ARG2:instrument or theme [quarter.xml]
   LexSem("V","quarter",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("quarter"),arg1,pp("with",arg2)))),

 'quash-01': # ARG0:squasher / ARG1:thing squashed [quash.xml]
   LexSem("V","quash",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("quash"),arg1))),

 'quaver-01': # ARG0:quaverer, agent / ARG1:quavered about, topic, quotation / ARG2:quavered to, recipient [quaver.xml]
   LexSem("V","quaver",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("quaver"),arg1,arg2))),

 'quell-01': # ARG0:causer / ARG1:entity quelled [quell.xml]
   LexSem("V","quell",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("quell"),arg1))),

 'quench-01': # ARG0:causer / ARG1:entity quelled / ARG2:Instrument or Manner if separate from arg 0 [quench.xml]
   LexSem("V","quench",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("quench"),arg1,arg2))),

 'query-01': # ARG0:asker, querier / ARG1:oracle, answerer / ARG2:question [query.xml]
   LexSem("V","query",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("query"),arg1,pp("about",arg2)))),

 'quest-01': # ARG0:entity on a quest / ARG1:goal of the quest / ARG2:location [quest.xml]
   LexSem("V","quest",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("quest"),pp("for",arg1),pp("through",arg2)))),

 'question-01': # ARG0:asker / ARG1:question / ARG2:entity asked, hearer [question.xml]
   LexSem("V","question",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("question"),pp("about",arg1),arg2))),

 'question-03': # ARG0:entity having doubts / ARG1:dubious thing [question.xml]
   LexSem("V","question",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("question"),arg1))),

 'queue-01': # ARG0:putter of something in a line / ARG1:things in a line [queue.xml]
   LexSem("V","queue",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("queue"),arg1))),

 'queue-up-02': # ARG0:agent / ARG1:entities in line [queue.xml]
   LexSem("V","queue",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("queue"),Adv("up"),arg1))),

 'quibble-01': # ARG0:first actor or all participants / ARG1:second actor (if separate) / ARG2:topic [quibble.xml]
   LexSem("V","quibble",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("quibble"),pp("with",arg1),arg2))),

 'quicken-01': # ARG0:causer of speed-up / ARG1:thing becoming faster / ARG2:EXT / ARG3:old speed / ARG4:new speed [quicken.xml]
   LexSem("V","quicken",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("quicken"),arg1,arg2,pp("from",arg3),arg4))),

 'quickstep-01': # ARG0:causer of quickstepping, agent (transitive clauses only) / ARG1:quickstepper(s), theme (intransitive subject, transitive object) / ARG2:location of quickstepping [quickstep.xml]
   LexSem("V","quickstep",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("quickstep"),arg1,pp("onto",arg2)))),

 'quiet-03': # ARG0:cause,agent / ARG1:entity becoming quiet [quieten.xml]
   LexSem("V","quiet",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("quiet"),arg1))),

 'quiet-down-05': # ARG0:cause, agent / ARG1:entity becoming quiet [quieten.xml]
   LexSem("V","quiet",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("quiet"),Adv("down"),arg1))),

 'quieten-01': # ARG0:cause,agent / ARG1:entity becoming quiet [quieten.xml]
   LexSem("V","quieten",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("quieten"),arg1))),

 'quieten-down-02': # ARG0:cause, agent / ARG1:entity becoming quiet [quieten.xml]
   LexSem("V","quieten",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("quieten"),Adv("down"),arg1))),

 'quip-01': # ARG0:speaker / ARG1:joke / ARG2:hearer [quip.xml]
   LexSem("V","quip",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("quip"),arg1,arg2))),

 'quirk-01': # ARG0:agent, causer / ARG1:theme, thing curving / ARG2:thing quirking at or in response to [quirk.xml]
   LexSem("V","quirk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("quirk"),arg1,pp("at",arg2)))),

 'quit-01': # ARG0:quitter / ARG1:job [quit.xml]
   LexSem("V","quit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("quit"),arg1))),

 'quiver-01': # ARG1:thing quivering [quiver.xml]
   LexSem("V","quiver",[":ARG1"],lambda arg1:S(arg1,VP(V("quiver")))),

 'quiz-01': # ARG0:asker / ARG1:quizzed / ARG2:topic [quiz.xml]
   LexSem("V","quiz",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("quiz"),arg1,pp("about",arg2)))),

 'quote-01': # ARG0:quoter (somewhat rare) / ARG1:the quote itself / ARG2:original speaker / ARG3:what the quote is about [quote.xml]
   LexSem("V","quote",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("quote"),pp("as",arg1),arg2,pp("about",arg3)))),

 'rabbit-01': # ARG0:agent or causer / ARG1:entity gathered / ARG2:gathered into / ARG3:beneficiary [rabbit.xml]
   LexSem("V","rabbit",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("rabbit"),arg1,arg2,arg3))),

 'race-01': # ARG0:runner / ARG1:path / ARG2:destination [race.xml]
   LexSem("V","race",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("race"),pp("around",arg1),pp("for",arg2)))),

 'race-02': # ARG0:competitor / ARG1:opponent / ARG2:prize / ARG3:competition, or type of competition [race.xml]
   LexSem("V","race",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("race"),arg1,pp("to",arg2),pp("for",arg3)))),

 'rack-02': # ARG0:searcher / ARG1:searched for [rack.xml]
   LexSem("V","rack",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rack"),arg1))),

 'rack-up-01': # ARG0:agent, entity acquiring something / ARG1:thing acquired / ARG2:seller / ARG3:price paid / ARG4:benefactive [rack.xml]
   LexSem("V","rack",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("rack"),Adv("up"),arg1,arg2,arg3,arg4))),

 'racket-01': # ARG0:thing making loud noises [racket.xml]
   LexSem("V","racket",[":ARG0"],lambda arg0:S(arg0,VP(V("racket")))),

 'racket-02': # ARG0:agent, con artist / ARG1:sheme / ARG2:victim [racket.xml]
   LexSem("V","racketeer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("racketeer"),arg1,arg2))),

 'radiate-01': # ARG0:entity emitting / ARG1:thing emitted [radiate.xml]
   LexSem("V","radiate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("radiate"),arg1))),

 'radicalize-01': # ARG0:agent, cause / ARG1:entity becoming radical [radicalize.xml]
   LexSem("V","radicalize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("radicalize"),arg1))),

 'radio-01': # ARG0:transmitter, agent / ARG1:entity transmitted / ARG2:destination [radio.xml]
   LexSem("V","radio",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("radio"),arg1,pp("to",arg2)))),

 'raft-01': # ARG0:agent, driver (transitive subject) / ARG1:thing moved (intransitive subject, transitive object) / ARG2:locations, or start point / ARG3:destination [raft.xml]
   LexSem("V","raft",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("raft"),arg1,arg2,pp("to",arg3)))),

 'rafter-01': # ARG0:supplier, builder, agent / ARG1:theme (rafters) / ARG2:recipient [rafter.xml]
   LexSem("V","rafter",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rafter"),pp("with",arg1),arg2))),

 'rag-01': # ARG0:tormentor / ARG1:one picked on [rag.xml]
   LexSem("V","rag",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rag"),arg1))),

 'rage-01': # ARG0:speaker / ARG1:utterance / ARG2:hearer [rage.xml]
   LexSem("V","rage",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rage"),arg1,pp("to",arg2)))),

 'rage-02': # ARG0:angry entity / ARG1:target of anger [rage.xml]
   LexSem("V","rage",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rage"),pp("at",arg1)))),

 'raid-01': # ARG0:raider / ARG1:raided [raid.xml]
   LexSem("V","raid",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("raid"),arg1))),

 'rail-01': # ARG0:agent, speaker / ARG1:thing objected to [rail.xml]
   LexSem("V","rail",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rail"),pp("at",arg1)))),

 'railroad-01': # ARG0:forcer / ARG1:impelled agent / ARG2:impelled action [railroad.xml]
   LexSem("V","railroad",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("railroad"),arg1,pp("into",arg2)))),

 'railroad-02': # ARG0:forcer / ARG1:thing forced / ARG2:obstacle arg1 is forced through [railroad.xml]
   LexSem("V","railroad",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("railroad"),arg1,pp("through",arg2)))),

 'rain-01': # ARG0:metaphorical agent / ARG1:metaphorical rain / ARG2:rained upon [rain.xml]
   LexSem("V","rain",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rain"),arg1,pp("on",arg2)))),

 'raise-01': # ARG0:Agent / ARG1:Logical subject, patient, thing rising / ARG2:EXT, amount risen / ARG3:Start point / ARG4:End point / ARG5:beneficiary [raise.xml]
   LexSem("V","raise",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg0,arg1,arg2,arg3,arg4,arg5:S(arg0,VP(V("raise"),pp("about",arg1),pp("by",arg2),pp("from",arg3),pp("to",arg4),arg5))),

 'raise-02': # ARG0:raiser of money / ARG1:money / ARG2:giver of money / ARG3:recipient of money (if different from arg0) [raise.xml]
   LexSem("V","raise",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("raise"),arg1,pp("from",arg2),pp("for",arg3)))),

 'raise-03': # ARG0:parent / ARG1:child [raise.xml]
   LexSem("V","raise",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("raise"),arg1))),

 'rake-01': # ARG0:causer of movement, agent / ARG1:thing moved (leaves) / ARG2:source (yard) / ARG3:instrument: rake [rake.xml]
   LexSem("V","rake",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("rake"),arg1,pp("from",arg2),pp("with",arg3)))),

 'rake-in-02': # ARG0:getter / ARG1:thing gotten [rake.xml]
   LexSem("V","rake",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rake"),Adv("in"),arg1))),

 'rally-01': # ARG0:summoner / ARG1:summoned / ARG2:cause [rally.xml]
   LexSem("V","rally",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rally"),arg1,pp("to",arg2)))),

 'rally-02': # ARG0:causative agent / ARG1:performer / ARG2:EXT, amount risen / ARG3:start point / ARG4:end point [rally.xml]
   LexSem("V","rally",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("rally"),arg1,arg2,arg3,pp("to",arg4)))),

 'ram-01': # ARG0:hitter, agent or instrument / ARG1:entity hit / ARG2:entity rammed into/against [ram.xml]
   LexSem("V","ram",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ram"),arg1,pp("into",arg2)))),

 'ramble-01': # ARG0:entity in motion / ARG1:path [ramble.xml]
   LexSem("V","ramble",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ramble"),pp("over",arg1)))),

 'ramble-02': # ARG0:speaker / ARG1:utterance, topic [ramble.xml]
   LexSem("V","ramble",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ramble"),pp("about",arg1)))),

 'ramify-01': # ARG0:agent, entity making something be grow, spread / ARG1:patient, thing spreading out / ARG2:EXT or TMP, by how much or until when / ARG3:start point / ARG4:end point [ramify.xml]
   LexSem("V","ramify",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("ramify"),arg1,arg2,arg3,arg4))),

 'ramp-up-01': # ARG0:cause of increase / ARG1:activity increased [ramp.xml]
   LexSem("V","ramp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ramp"),Adv("up"),arg1))),

 'rampage-01': # ARG0:entity in motion / ARG1:path [rampage.xml]
   LexSem("V","rampage",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rampage"),arg1))),

 'ranch-01': # ARG0:farmer / ARG1:land [ranch.xml]
   LexSem("V","ranch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ranch"),arg1))),

 'range-01': # ARG1:thing moving / ARG2:EXT / ARG3:start or low point / ARG4:end or high point / ARG5:medium/range [range.xml]
   LexSem("V","range",[":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg1,arg2,arg3,arg4,arg5:S(arg1,VP(V("range"),arg2,pp("from",arg3),pp("to",arg4),pp("across",arg5)))),

 'rank-01': # ARG0:assigner / ARG1:thing assigned a position / ARG2:rank / ARG3:position relative to other competitors / ARG4:attribute, value / ARG5:category, ranked according to what [rank.xml]
   LexSem("V","rank",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg0,arg1,arg2,arg3,arg4,arg5:S(arg0,VP(V("rank"),arg1,pp("as",arg2),pp("behind",arg3),pp("at",arg4),pp("in",arg5)))),

 'rankle-01': # ARG0:rankler / ARG1:rankled [rankle.xml]
   LexSem("V","rankle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rankle"),arg1))),

 'ransack-01': # ARG0:searcher, agent / ARG1:searched for, theme / ARG2:location [ransack.xml]
   LexSem("V","ransack",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ransack"),arg1,arg2))),

 'ransom-01': # ARG0:entity paying for the release of the captive / ARG1:the captive / ARG2:money demanded/paid / ARG3:kidnapper, entity paid / ARG4:terrible fate arg1 avoids via ransom [ransom.xml]
   LexSem("V","ransom",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("ransom"),arg1,pp("for",arg2),arg3,pp("from",arg4)))),

 'rant-01': # ARG0:ranter / ARG1:utterance / ARG2:audience / ARG3:subject matter of utterance [rant.xml]
   LexSem("V","rant",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("rant"),arg1,arg2,pp("for",arg3)))),

 'rap-01': # ARG0:rapper (no, not like that) / ARG1:instrument / ARG2:target, surface [rap.xml]
   LexSem("V","rap",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rap"),arg1,pp("on",arg2)))),

 'rap-02': # ARG0:rapper / ARG1:song, utterance / ARG2:audience / ARG3:subject matter of arg1 [rap.xml]
   LexSem("V","rap",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("rap"),arg1,arg2,pp("about",arg3)))),

 'rape-01': # ARG0:assaulter, agent / ARG1:victim [rape.xml]
   LexSem("V","rape",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rape"),arg1))),

 'rarefy-01': # ARG0:cause, agent / ARG1:rare thing [rarefy.xml]
   LexSem("V","rarefy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rarefy"),arg1))),

 'rasp-01': # ARG0:rasper, speaker, agent / ARG1:rasped about what, topic, quotation / ARG2:rasped to whom, recipient [rasp.xml]
   LexSem("V","rasp",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rasp"),arg1,arg2))),

 'rat-01': # ARG0:informant / ARG1:victim, informed on [rat.xml]
   LexSem("V","rat",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rat"),pp("on",arg1)))),

 'ratchet-up-01': # ARG0:cause of growth, agent / ARG1:thing growing / ARG2:EXT / ARG3:start point / ARG4:end point [ratchet.xml]
   LexSem("V","ratchet",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("ratchet"),Adv("up"),pp("in",arg1),arg2,arg3,pp("to",arg4)))),

 'rate-01': # ARG0:rater / entity establishing value / ARG1:entity being evaluated / ARG2:value, worth, grade / ARG3:aspect of arg1 actually being rated [rate.xml]
   LexSem("V","rate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("rate"),arg1,arg2,arg3))),

 'ratify-01': # ARG0:approver, agent / ARG1:entity ratified / ARG2:beneficiary [ratify.xml]
   LexSem("V","ratify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ratify"),arg1,pp("for",arg2)))),

 'ration-01': # ARG0:distributor / ARG1:thing distributed / ARG2:ratio, measurement / ARG3:recipient [ration.xml]
   LexSem("V","ration",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("ration"),arg1,pp("to",arg2),pp("to",arg3)))),

 'ration-out-02': # ARG0:rationer / ARG1:thing rationed / ARG2:recipient [ration.xml]
   LexSem("V","ration",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ration"),Adv("out"),arg1,pp("to",arg2)))),

 'rationalize-01': # ARG0:rationalizer / ARG1:thing rationalized / ARG2:instrument [rationalize.xml]
   LexSem("V","rationalize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rationalize"),arg1,pp("by",arg2)))),

 'rattle-01': # ARG0:shaker / ARG1:thing shaking [rattle.xml]
   LexSem("V","rattle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rattle"),arg1))),

 'rattle-02': # ARG0:rattler [rattle.xml]
   LexSem("V","rattle",[":ARG0"],lambda arg0:S(arg0,VP(V("rattle")))),

 'rattle-off-04': # ARG0:talker, rattler / ARG1:topic [rattle.xml]
   LexSem("V","rattle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rattle"),Adv("off"),arg1))),

 'rattle-on-03': # ARG0:talker, rattler / ARG1:topic [rattle.xml]
   LexSem("V","rattle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rattle"),Adv("on"),pp("about",arg1)))),

 'ravage-01': # ARG0:destroyer / ARG1:thing destroyed / ARG2:instrument of destruction [ravage.xml]
   LexSem("V","ravage",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ravage"),arg1,pp("with",arg2)))),

 'rave-01': # ARG0:speaker / ARG1:utterance [rave.xml]
   LexSem("V","rave",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rave"),arg1))),

 'ravish-01': # ARG0:causer of emotion / ARG1:emotional entity [ravish.xml]
   LexSem("V","ravish",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ravish"),arg1))),

 'raze-01': # ARG0:destroyer / ARG1:thing destroyed / ARG2:instrument of destruction [raze.xml]
   LexSem("V","raze",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("raze"),arg1,pp("with",arg2)))),

 'reach-01': # ARG0:thing striving / ARG1:goal, end state, thing attained [reach.xml]
   LexSem("V","reach",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reach"),arg1))),

 'reach-02': # ARG0:reacher / ARG1:reached [reach.xml]
   LexSem("V","reach",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reach"),arg1))),

 'reach-03': # ARG0:reacher / ARG1:body part / ARG2:goal [reach.xml]
   LexSem("V","reach",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reach"),arg1,pp("to",arg2)))),

 'react-01': # ARG0:reactor / ARG1:reacted-to / ARG2:reaction [react.xml]
   LexSem("V","react",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("react"),pp("to",arg1),pp("by",arg2)))),

 'reactivate-01': # ARG0:reactivator / ARG1:thing now active [reactivate.xml]
   LexSem("V","reactivate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reactivate"),arg1))),

 'read-01': # ARG0:reader / ARG1:thing read (book) / ARG2:benefactive or direction / ARG3:text, content [read.xml]
   LexSem("V","read",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("read"),arg1,pp("into",arg2),arg3))),

 'read-off-03': # ARG0:reader / ARG1:read / ARG2:source [read.xml]
   LexSem("V","read",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("read"),Adv("off"),arg1,pp("from",arg2)))),

 'read-up-02': # ARG0:reader / ARG1:subject matter read up on [read.xml]
   LexSem("V","read",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("read"),Adv("up"),pp("on",arg1)))),

 'read_between_lines-09': # ARG0:reader, agent inferring something / ARG1:new belief, implicit thing / ARG2:source interpreted [line.xml]
   LexSem("V","read",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("read"),arg1,pp("in",arg2)))),

 'readapt-01': # ARG0:readapter, agent / ARG1:thing being readapted, patient / ARG2:readapted into what, destination [readapt.xml]
   LexSem("V","readapt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("readapt"),arg1,pp("as",arg2)))),

 'readjust-01': # ARG0:agent, readjuster / ARG1:theme, thing being adjusted [readjust.xml]
   LexSem("V","readjust",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("readjust"),arg1))),

 'readmit-01': # ARG0:allower / ARG1:enterer / ARG2:place entered [readmit.xml]
   LexSem("V","readmit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("readmit"),arg1,pp("to",arg2)))),

 'ready-01': # ARG0:preparer / ARG1:thing made ready / ARG2:ready for [ready.xml]
   LexSem("V","ready",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ready"),arg1,pp("for",arg2)))),

 'reaffirm-01': # ARG0:affirmer, agent / ARG1:thing reaffirmed [reaffirm.xml]
   LexSem("V","reaffirm",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reaffirm"),arg1))),

 'realign-01': # ARG0:arranger, agent / ARG1:thing being realigned / ARG2:standard of comparison, realigned-to [realign.xml]
   LexSem("V","realign",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("realign"),arg1,pp("to",arg2)))),

 'realize-01': # ARG0:new knower / ARG1:new knowledge [realize.xml]
   LexSem("V","realize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("realize"),arg1))),

 'realize-02': # ARG0:creator / ARG1:thing created / ARG2:source, created from [realize.xml]
   LexSem("V","realize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("realize"),arg1,pp("on",arg2)))),

 'reallocate-01': # ARG0:granter / ARG1:thing granted / ARG2:benefactive, granted-to / ARG3:source [reallocate.xml]
   LexSem("V","reallocate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("reallocate"),arg1,pp("to",arg2),pp("from",arg3)))),

 'ream-01': # ARG0:Reamer / ARG1:thing reamed / ARG2:thing removed / ARG3:instrument [ream.xml]
   LexSem("V","ream",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("ream"),arg1,arg2,pp("with",arg3)))),

 'ream-02': # ARG0:reamer / ARG1:thing reamed [ream.xml]
   LexSem("V","ream",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ream"),arg1))),

 'reanimate-01': # ARG0:animator / ARG1:animated [reanimate.xml]
   LexSem("V","reanimate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reanimate"),arg1))),

 'reap-01': # ARG0:receiver / ARG1:harvest / ARG2:received from [reap.xml]
   LexSem("V","reap",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reap"),arg1,pp("from",arg2)))),

 'reappear-01': # ARG1:thing becoming visible [reappear.xml]
   LexSem("V","reappear",[":ARG1"],lambda arg1:S(arg1,VP(V("reappear")))),

 'reapply-01': # ARG0:putter, applier, agent / ARG1:thing put/applied / ARG2:applied where [reapply.xml]
   LexSem("V","reapply",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reapply"),arg1,arg2))),

 'reapportion-01': # ARG0:distributor, agent / ARG1:thing apportioned, distributed / ARG2:to/among / ARG3:source [reapportion.xml]
   LexSem("V","reapportion",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("reapportion"),arg1,pp("among",arg2),pp("from",arg3)))),

 'reappraise-01': # ARG0:appraiser / ARG1:thing appraised / ARG2:value [reappraise.xml]
   LexSem("V","reappraise",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reappraise"),arg1,pp("as",arg2)))),

 'rear-01': # ARG0:parent / ARG1:child [rear.xml]
   LexSem("V","rear",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rear"),arg1))),

 'rear-02': # ARG0:rearing animal [rear.xml]
   LexSem("V","rear",[":ARG0"],lambda arg0:S(arg0,VP(V("rear")))),

 'rearm-01': # ARG0:supplier of weapons / ARG1:receiver of weapons [rearm.xml]
   LexSem("V","rearm",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rearm"),arg1))),

 'rearrange-01': # ARG0:arranger, agent / ARG1:item being rearranged [rearrange.xml]
   LexSem("V","rearrange",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rearrange"),arg1))),

 'reason-01': # ARG0:thinker / ARG1:thought / ARG2:with whom? [reason.xml]
   LexSem("V","reason",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reason"),arg1,pp("with",arg2)))),

 'reassemble-01': # ARG0:builder / ARG1:construction / ARG2:material, start state / ARG4:end state [reassemble.xml]
   LexSem("V","reassemble",[":ARG0",":ARG1",":ARG2",":ARG4"],lambda arg0,arg1,arg2,arg4:S(arg0,VP(V("reassemble"),arg1,arg2,arg4))),

 'reassert-01': # ARG0:asserter / ARG1:thing asserted [reassert.xml]
   LexSem("V","reassert",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reassert"),arg1))),

 'reassert-02': # ARG0:Sayer / ARG1:Utterance / ARG2:Hearer / ARG3:Attribute of arg1 [reassert.xml]
   LexSem("V","reassert",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("reassert"),pp("to",arg1),arg2,arg3))),

 'reassert-03': # ARG0:claimer, asserter / ARG1:thing claimed, asserted / ARG2:benefactive, claimed/asserted for / ARG3:attribute of arg1 [reassert.xml]
   LexSem("V","reassert",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("reassert"),arg1,arg2,pp("about",arg3)))),

 'reassess-01': # ARG0:thinker / ARG1:subject of thought [reassess.xml]
   LexSem("V","reassess",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reassess"),arg1))),

 'reassign-01': # ARG0:agent, assigner / ARG1:thing assigned / ARG2:assigned to [reassign.xml]
   LexSem("V","reassign",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reassign"),arg1,pp("to",arg2)))),

 'reassure-01': # ARG0:causer of assurance / ARG1:assured one / ARG2:assurance, utterance [reassure.xml]
   LexSem("V","reassure",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reassure"),arg1,arg2))),

 'reawaken-01': # ARG0:cause of awakeing, agent / ARG1:entity awake / ARG2:entity becoming aware of [reawaken.xml]
   LexSem("V","reawaken",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reawaken"),arg1,pp("to",arg2)))),

 'rebear-01': # ARG0:mother / ARG1:child [rebear.xml]
   LexSem("V","rebear",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rebear"),arg1))),

 'rebel-01': # ARG0:rebel, agent / ARG1:against whom/what / ARG2:domain in which rebellion occurs [rebel.xml]
   LexSem("V","rebel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rebel"),pp("against",arg1),arg2))),

 'rebound-01': # ARG0:Causal agent / ARG1:thing rebounding / ARG2:EXT or MNR / ARG3:start point, rebounded from / ARG4:end point, attribute of arg1 [rebound.xml]
   LexSem("V","rebound",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("rebound"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'rebuff-01': # ARG0:rejecter / ARG1:thing rejected [rebuff.xml]
   LexSem("V","rebuff",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rebuff"),arg1))),

 'rebuild-01': # ARG0:builder / ARG1:construction [rebuild.xml]
   LexSem("V","rebuild",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rebuild"),arg1))),

 'rebuke-01': # ARG0:rebuker / ARG1:rebuked / ARG2:for what [rebuke.xml]
   LexSem("V","rebuke",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rebuke"),arg1,pp("for",arg2)))),

 'rebut-01': # ARG0:responder / ARG1:utterance, the response / ARG2:in response to [rebut.xml]
   LexSem("V","rebut",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rebut"),arg1,arg2))),

 'rebut-02': # ARG0:speaker / ARG1:spoken words [rebut.xml]
   LexSem("V","rebut",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rebut"),arg1))),

 'recalculate-01': # ARG0:Thinker / ARG1:Thought / ARG2:Attributive [recalculate.xml]
   LexSem("V","recalculate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("recalculate"),arg1,pp("at",arg2)))),

 'recalibrate-01': # ARG0:calibrator, agent / ARG1:thing calibrated [recalibrate.xml]
   LexSem("V","recalibrate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("recalibrate"),arg1))),

 'recall-01': # ARG0:entity recalling, manufacturer / ARG1:thing being recalled, defective thing / ARG2:recalled from [recall.xml]
   LexSem("V","recall",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("recall"),arg1,arg2))),

 'recall-02': # ARG0:rememberer / ARG1:memory / ARG2:secondary attribute / ARG3:hearer [recall.xml]
   LexSem("V","recall",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("recall"),arg1,pp("as",arg2),pp("to",arg3)))),

 'recant-01': # ARG0:rejector, agent / ARG1:thing recanted [recant.xml]
   LexSem("V","recant",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("recant"),arg1))),

 'recap-01': # ARG0:editor, summarizer, agent / ARG1:thing summarized / ARG2:listener [recap.xml]
   LexSem("V","recap",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("recap"),arg1,arg2))),

 'recapitulate-01': # ARG0:person summarizing / ARG1:summary, utterance / ARG2:listener [recapitulate.xml]
   LexSem("V","recapitulate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("recapitulate"),arg1,arg2))),

 'recapture-01': # ARG0:getter / ARG1:thing gotten [recapture.xml]
   LexSem("V","recapture",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("recapture"),arg1))),

 'recase-01': # ARG0:packer / ARG1:thing packed, again / ARG2:case, location [recase.xml]
   LexSem("V","re-case",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("re-case"),arg1,arg2))),

 'recast-01': # ARG0:metalworker, agent (possible but unlikely) / ARG1:product, cast into / ARG2:source, cast from [recast.xml]
   LexSem("V","recast",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("recast"),pp("in",arg1),arg2))),

 'recede-01': # ARG0:thing moving backwards [recede.xml]
   LexSem("V","recede",[":ARG0"],lambda arg0:S(arg0,VP(V("recede")))),

 'receive-01': # ARG0:receiver / ARG1:thing gotten / ARG2:received from / ARG3:price, in exchange for / ARG4:attribute of arg1 [receive.xml]
   LexSem("V","receive",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("receive"),arg1,pp("from",arg2),pp("for",arg3),pp("regarding",arg4)))),

 'recess-01': # ARG0:placer, putter, agent / ARG1:thing in lower position [recess.xml]
   LexSem("V","recess",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("recess"),arg1))),

 'recess-02': # ARG0:recessing entity / ARG1:break from what? [recess.xml]
   LexSem("V","recess",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("recess"),pp("from",arg1)))),

 'recharge-01': # ARG0:cause, charger, agent / ARG1:entity recharged / ARG2:source of new energy [recharge.xml]
   LexSem("V","recharge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("recharge"),arg1,pp("from",arg2)))),

 'reciprocate-01': # ARG0:entity responding / ARG1:reciprocated to, mutually exchanged act [reciprocate.xml]
   LexSem("V","reciprocate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reciprocate"),pp("to",arg1)))),

 'reciprocate-02': # ARG0:agent / ARG1:thing moving back and forth [reciprocate.xml]
   LexSem("V","reciprocate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reciprocate"),arg1))),

 'recirculate-01': # ARG0:causer / ARG1:thing going 'round [recirculate.xml]
   LexSem("V","recirculate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("recirculate"),arg1))),

 'recite-01': # ARG0:speaker / ARG1:utterance / ARG2:audience or listener [recite.xml]
   LexSem("V","recite",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("recite"),arg1,pp("to",arg2)))),

 'reckon-01': # ARG0:thinker / ARG1:object, thing under consideration, thought / ARG2:attribute [reckon.xml]
   LexSem("V","reckon",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reckon"),arg1,pp("at",arg2)))),

 'reckon-02': # ARG0:reckoner / ARG1:thing to be reckoned with [reckon.xml]
   LexSem("V","reckon",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reckon"),pp("with",arg1)))),

 'reclaim-01': # ARG0:reclaimer, agent / ARG1:entity reclaimed / ARG2:entity reclaimed from [reclaim.xml]
   LexSem("V","reclaim",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reclaim"),arg1,pp("from",arg2)))),

 'reclassify-01': # ARG0:describer / ARG1:thing defined / ARG2:secondary attribute, described-as, definition [reclassify.xml]
   LexSem("V","reclassify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reclassify"),arg1,pp("as",arg2)))),

 'reclassify-02': # ARG0:secret-keeper / ARG1:secret [reclassify.xml]
   LexSem("V","reclassify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reclassify"),arg1))),

 'recline-01': # ARG0:causal agent / ARG1:thing being reclined / ARG2:location [recline.xml]
   LexSem("V","recline",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("recline"),arg1,pp("on",arg2)))),

 'recode-01': # ARG0:recoder, agent / ARG1:entity recoded, theme / ARG2:destination of recoding / ARG3:recoded as what, predicate [recode.xml]
   LexSem("V","recode",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("recode"),arg1,pp("into",arg2),arg3))),

 'recognize-01': # ARG0:applauder / ARG1:entity applauded / ARG2:recognized for/ because of / ARG3:recognized as [recognize.xml]
   LexSem("V","recognize",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("recognize"),arg1,pp("for",arg2),pp("as",arg3)))),

 'recognize-02': # ARG0:recognizer / ARG1:thing recognized / ARG2:secondary predication on arg1. [recognize.xml]
   LexSem("V","recognize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("recognize"),arg1,pp("as",arg2)))),

 'recoil-01': # ARG0:one who recoils / ARG1:cause for recoil [recoil.xml]
   LexSem("V","recoil",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("recoil"),pp("from",arg1)))),

 'recollect-01': # ARG0:recollect / ARG1:memory / ARG2:secondary attribute [recollect.xml]
   LexSem("V","recollect",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("recollect"),arg1,arg2))),

 'recombine-01': # ARG0:agent, mixer / ARG1:ingredient one / ARG2:ingredient two / ARG3:end product [recombine.xml]
   LexSem("V","recombine",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("recombine"),arg1,arg2,arg3))),

 'recommence-01': # ARG0:Agent, recommencer / ARG1:thing recommenced, theme / ARG2:recommenced with what, instrument [recommence.xml]
   LexSem("V","recommence",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("recommence"),arg1,arg2))),

 'recommend-01': # ARG0:Recommender / ARG1:recommendation / ARG2:Recommended to / ARG3:Secondary attribute (recommended as...) / ARG4:subject matter of recommendation (if unclear what the recommendation is) [recommend.xml]
   LexSem("V","recommend",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("recommend"),arg1,pp("to",arg2),pp("as",arg3),pp("about",arg4)))),

 'recommit-01': # ARG0:recommitter / ARG1:committed / ARG2:committed to [recommit.xml]
   LexSem("V","recommit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("recommit"),arg1,pp("to",arg2)))),

 'recompense-01': # ARG0:payer, rewarder / ARG1:person being repaid / ARG2:repaid for [recompense.xml]
   LexSem("V","recompense",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("recompense"),arg1,arg2))),

 'reconcile-01': # ARG0:accommodator, settler, agent / ARG1:theme / ARG2:reconciled to/with [reconcile.xml]
   LexSem("V","reconcile",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reconcile"),arg1,pp("to",arg2)))),

 'reconsider-01': # ARG0:considerer / ARG1:thing thought about [reconsider.xml]
   LexSem("V","reconsider",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reconsider"),arg1))),

 'reconstitute-01': # ARG0:agent, reconstitutor / ARG1:reconstituted into what, product / ARG2:reconstituted with/from, material / ARG3:reconstituted for whom, benefactive [reconstitute.xml]
   LexSem("V","reconstitute",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("reconstitute"),pp("as",arg1),arg2,arg3))),

 'reconstruct-01': # ARG0:rebuilder / ARG1:former ruins / ARG2:material, start state [reconstruct.xml]
   LexSem("V","reconstruct",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reconstruct"),arg1,pp("from",arg2)))),

 'reconvene-01': # ARG0:agent, entity calling the meeting / ARG1:theme, the meeting itself [reconvene.xml]
   LexSem("V","reconvene",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reconvene"),arg1))),

 'record-01': # ARG0:recorder / ARG1:record [record.xml]
   LexSem("V","record",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("record"),arg1))),

 'recount-01': # ARG0:teller of tale / ARG1:tale / ARG2:listener [recount.xml]
   LexSem("V","recount",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("recount"),arg1,pp("to",arg2)))),

 'recoup-01': # ARG0:recoverer / ARG1:thing regained / ARG2:who had it before [recoup.xml]
   LexSem("V","recoup",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("recoup"),arg1,pp("from",arg2)))),

 'recover-01': # ARG1:that which was sick, now getting better / ARG2:sickness [recover.xml]
   LexSem("V","recover",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("recover"),pp("from",arg2)))),

 'recover-02': # ARG0:entity getting something / ARG1:thing gotten / ARG2:gotten from [recover.xml]
   LexSem("V","recover",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("recover"),arg1,pp("on",arg2)))),

 'recover-03': # ARG0:coverer / ARG1:thing covered / ARG2:lid [recover.xml]
   LexSem("V","recover",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("recover"),arg1,arg2))),

 'recreate-01': # ARG0:creator / ARG1:thing recreated / ARG2:source / ARG3:benefactive / ARG4:attribute, secondary predication [recreate.xml]
   LexSem("V","recreate",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("recreate"),arg1,arg2,arg3,arg4))),

 'recruit-01': # ARG0:recruiter / ARG1:recruit / ARG2:group, job (sometimes predicate on arg1) / ARG3:source [recruit.xml]
   LexSem("V","recruit",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("recruit"),arg1,pp("to",arg2),pp("from",arg3)))),

 'rectify-01': # ARG0:maker right / ARG1:wrong thing becoming right [rectify.xml]
   LexSem("V","rectify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rectify"),arg1))),

 'recuperate-01': # ARG1:that which was sick, now getting better / ARG2:sickness [recuperate.xml]
   LexSem("V","recuperate",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("recuperate"),arg2))),

 'recur-01': # ARG0:event / ARG1:count of recurrences [recur.xml]
   LexSem("V","recur",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("recur"),arg1))),

 'recuse-01': # ARG0:entity removing / ARG1:thing being withdrawn (often understood as 'self') / ARG2:removed from [recuse.xml]
   LexSem("V","recuse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("recuse"),arg1,arg2))),

 'recycle-01': # ARG0:recycler / ARG1:garbage / ARG2:shiny new product [recycle.xml]
   LexSem("V","recycle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("recycle"),arg1,pp("into",arg2)))),

 'redden-01': # ARG0:causer of redness / ARG1:red thing / ARG2:specific aspect of arg1 that is red [redden.xml]
   LexSem("V","redden",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("redden"),arg1,arg2))),

 'redebate-01': # ARG0:discussant(s), debater(s) / ARG1:thing discussed / ARG2:person debated against [redebate.xml]
   LexSem("V","re-debate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("re-debate"),arg1,arg2))),

 'redecorate-01': # ARG0:decorator / ARG1:thing decorated / ARG2:decorations [redecorate.xml]
   LexSem("V","redecorate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("redecorate"),arg1,arg2))),

 'redeem-01': # ARG0:redeemer / ARG1:thing saved and redeemed / ARG2:in-exchange-for [redeem.xml]
   LexSem("V","redeem",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("redeem"),arg1,pp("for",arg2)))),

 'redefine-01': # ARG0:describer / ARG1:thing redefined / ARG2:secondary attribute, described-as, definition [redefine.xml]
   LexSem("V","redefine",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("redefine"),arg1,pp("as",arg2)))),

 'redeploy-01': # ARG0:deployer / ARG1:deployed / ARG2:secondary predication [redeploy.xml]
   LexSem("V","redeploy",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("redeploy"),arg1,pp("at",arg2)))),

 'redesign-01': # ARG0:designer / ARG1:entity redesigned / ARG2:beneficiary [redesign.xml]
   LexSem("V","redesign",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("redesign"),arg1,pp("for",arg2)))),

 'redevelop-01': # ARG0:creator / ARG1:thing created / ARG2:source / ARG3:benefactive / ARG4:attribute of arg1 [redevelop.xml]
   LexSem("V","redevelop",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("redevelop"),arg1,arg2,pp("for",arg3),pp("to",arg4)))),

 'redirect-01': # ARG0:director, agent / ARG1:entity redirected / ARG2:new direction [redirect.xml]
   LexSem("V","redirect",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("redirect"),arg1,pp("toward",arg2)))),

 'rediscover-01': # ARG0:finder, discoverer / ARG1:thing found, discovery [rediscover.xml]
   LexSem("V","rediscover",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rediscover"),arg1))),

 'redistribute-01': # ARG0:distributor, agent / ARG1:entity redistributed [redistribute.xml]
   LexSem("V","redistribute",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("redistribute"),arg1))),

 'redline-01': # ARG0:liner / ARG1:thing being redlined / ARG2:attribute [redline.xml]
   LexSem("V","redline",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("redline"),arg1,pp("as",arg2)))),

 'redo-01': # ARG0:agent, doer / ARG1:thing done / ARG2:benefactive, done for or about / ARG3:instrumental / ARG4:comitative, companion while doing [redo.xml]
   LexSem("V","redo",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("redo"),arg1,pp("with",arg2),arg3,arg4))),

 'redouble-01': # ARG0:causer of increase / ARG1:thing increasing, rising / ARG2:EXT, always unmentioned because it's 2x / ARG3:start point / ARG4:end point [redouble.xml]
   LexSem("V","redouble",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("redouble"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'redound-01': # ARG0:action with consequence / ARG1:benefactive [redound.xml]
   LexSem("V","redound",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("redound"),pp("to",arg1)))),

 'redraw-01': # ARG0:redrawer, agent / ARG1:thing redrawn, theme / ARG2:redrawn as what, predicate [redraw.xml]
   LexSem("V","redraw",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("redraw"),arg1,arg2))),

 'redress-01': # ARG0:agent, redresser / ARG1:wrong, recipient of compensation [redress.xml]
   LexSem("V","redress",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("redress"),arg1))),

 'reduce-01': # ARG0:Agent / ARG1:Logical subject, patient, thing falling / ARG2:EXT, amount fallen / ARG3:Start point / ARG4:End point, end state of arg1 [reduce.xml]
   LexSem("V","reduce",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("reduce"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'reek-01': # ARG0:thing reeking / ARG1:reeking of what [reek.xml]
   LexSem("V","reek",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reek"),pp("of",arg1)))),

 'reel-01': # ARG1:entity which is astounded / ARG2:cause of reeling (us. 'from') [reel.xml]
   LexSem("V","reel",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("reel"),pp("from",arg2)))),

 'reel-03': # ARG0:Reeler, causer of motion / ARG1:Fish, thing moved / ARG2:Destination, moved where [reel.xml]
   LexSem("V","reel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reel"),arg1,arg2))),

 'reel-off-02': # ARG0:speaker, enumerator / ARG1:list of things [reel.xml]
   LexSem("V","reel",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reel"),Adv("off"),arg1))),

 'reelect-01': # ARG0:voters / ARG1:candidate / ARG2:office or position [reelect.xml]
   LexSem("V","re-elect",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("re-elect"),arg1,arg2))),

 'reemerge-01': # ARG0:thing exiting / ARG1:thing/place exited from [reemerge.xml]
   LexSem("V","re-emerge",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("re-emerge"),pp("from",arg1)))),

 'reemerge-02': # ARG0:thing emerging / ARG1:as what [reemerge.xml]
   LexSem("V","reemerge",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reemerge"),pp("as",arg1)))),

 'reemphasize-01': # ARG0:emphasizer / ARG1:utterance / ARG2:hearer [reemphasize.xml]
   LexSem("V","re-emphasize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("re-emphasize"),arg1,pp("to",arg2)))),

 'reemploy-01': # ARG0:employer / ARG1:employee / ARG2:job [reemploy.xml]
   LexSem("V","re-employ",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("re-employ"),arg1,arg2))),

 'reenact-01': # ARG0:performer / ARG1:performance / ARG2:audience [reenact.xml]
   LexSem("V","re-enact",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("re-enact"),arg1,pp("for",arg2)))),

 'reengage-01': # ARG0:causer of engagement / ARG1:entity sucked in / ARG2:thing involved in [reengage.xml]
   LexSem("V","re-engage",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("re-engage"),arg1,arg2))),

 'reenter-01': # ARG0:entity entering / ARG1:place or thing entered [reenter.xml]
   LexSem("V","re-enter",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("re-enter"),arg1))),

 'reenter-02': # ARG0:submitter / ARG1:thing submitted / ARG2:submitted to / ARG3:benefactive [reenter.xml]
   LexSem("V","reenter",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("reenter"),arg1,pp("into",arg2),pp("for",arg3)))),

 'reestablish-01': # ARG0:establisher, agent / ARG1:entity reestablished [reestablish.xml]
   LexSem("V","reestablish",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reestablish"),arg1))),

 'reevaluate-01': # ARG0:thinker / ARG1:action [reevaluate.xml]
   LexSem("V","re-evaluate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("re-evaluate"),arg1))),

 'reeve-01': # ARG0:Agent / ARG1:first or all things being threaded / ARG2:threaded to, through or around / ARG3:instrument [reeve.xml]
   LexSem("V","reeve",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("reeve"),arg1,pp("through",arg2),pp("with",arg3)))),

 'reexamine-01': # ARG0:examiner / ARG1:exam-taker / ARG2:the test/subject matter, examined in search of [reexamine.xml]
   LexSem("V","reexamine",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reexamine"),arg1,pp("in",arg2)))),

 'reexport-01': # ARG0:exporter / ARG1:product / ARG2:importer [reexport.xml]
   LexSem("V","re-export",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("re-export"),arg1,arg2))),

 'refashion-01': # ARG0:builder, agent / ARG1:entity refashioned [refashion.xml]
   LexSem("V","refashion",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("refashion"),arg1))),

 'refer-01': # ARG0:labeller / ARG1:labelled / ARG2:label [refer.xml]
   LexSem("V","refer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("refer"),pp("to",arg1),pp("as",arg2)))),

 'refer-02': # ARG0:recommender, sender / ARG1:recommended thing / ARG2:recipient of the referal [refer.xml]
   LexSem("V","refer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("refer"),arg1,pp("to",arg2)))),

 'refer-03': # ARG0:referrer / ARG1:referred to / ARG2:in regards to, purpose [refer.xml]
   LexSem("V","refer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("refer"),pp("to",arg1),pp("for",arg2)))),

 'referee-01': # ARG0:referee, agent / ARG1:thing refereed, theme [referee.xml]
   LexSem("V","referee",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("referee"),pp("on",arg1)))),

 'reference-04': # ARG0:person making reference / ARG1:thing referenced / ARG2:secondary attribute, referenced-as [refer.xml]
   LexSem("V","reference",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reference"),arg1,arg2))),

 'refight-01': # ARG0:first fighter / ARG1:second fighter, if separate / ARG2:spoils [refight.xml]
   LexSem("V","re-fight",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("re-fight"),arg1,arg2))),

 'refile-01': # ARG0:refiler / ARG1:file / ARG2:refiled-with / ARG3:refiled against / ARG4:purpose of filing [refile.xml]
   LexSem("V","refile",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("refile"),arg1,pp("in",arg2),pp("against",arg3),pp("for",arg4)))),

 'refile-02': # ARG0:refiler / ARG1:claim [refile.xml]
   LexSem("V","refile",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("refile"),pp("for",arg1)))),

 'refill-01': # ARG0:agent, causer / ARG1:container / ARG2:substance [refill.xml]
   LexSem("V","refill",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("refill"),arg1,arg2))),

 'refill-02': # ARG0:Satisfier, Order-filler / ARG1:Order, thing satisfied / ARG2:Secondary predication [refill.xml]
   LexSem("V","refill",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("refill"),arg1,pp("at",arg2)))),

 'refinance-01': # ARG0:financ(i)er / ARG1:thing financed / ARG2:money [refinance.xml]
   LexSem("V","refinance",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("refinance"),arg1,pp("with",arg2)))),

 'refinance-02': # ARG0:buyer / ARG1:thing bought / ARG2:money or provider of money [refinance.xml]
   LexSem("V","refinance",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("refinance"),arg1,pp("through",arg2)))),

 'refine-01': # ARG0:purifier, agent / ARG1:entity refined / ARG2:impurities [refine.xml]
   LexSem("V","refine",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("refine"),arg1,pp("from",arg2)))),

 'refit-01': # ARG0:agent, adaptor / ARG1:thing adapted / ARG2:adapted to / ARG3:adapted from [refit.xml]
   LexSem("V","refit",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("refit"),arg1,arg2,arg3))),

 'refix-01': # ARG0:agent, fixer / ARG1:thing fixed again / ARG3:benefactive [refix.xml]
   LexSem("V","re-fix",[":ARG0",":ARG1",":ARG3"],lambda arg0,arg1,arg3:S(arg0,VP(V("re-fix"),arg1,arg3))),

 'reflate-01': # ARG0:inflator / ARG1:thing reflated [reflate.xml]
   LexSem("V","reflate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reflate"),arg1))),

 'reflect-01': # ARG1:surface doing the reflecting / ARG2:reflected thing (usually the original model) [reflect.xml]
   LexSem("V","reflect",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("reflect"),arg2))),

 'reflect-02': # ARG0:thinker / ARG1:thoughts, reflected on/over [reflect.xml]
   LexSem("V","reflect",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reflect"),pp("on",arg1)))),

 'refocus-01': # ARG0:focusser, agent / ARG1:thing focussed / ARG2:focussed on [refocus.xml]
   LexSem("V","refocus",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("refocus"),arg1,arg2))),

 'reform-01': # ARG0:reformer / ARG1:thing changed / ARG2:end state / ARG3:start state [reform.xml]
   LexSem("V","reform",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("reform"),arg1,pp("to",arg2),pp("from",arg3)))),

 'reformulate-01': # ARG0:formulator, agent / ARG1:entity reformulated [reformulate.xml]
   LexSem("V","reformulate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reformulate"),arg1))),

 'refrain-01': # ARG0:non-agent / ARG1:non-action [refrain.xml]
   LexSem("V","refrain",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("refrain"),pp("from",arg1)))),

 'refresh-01': # ARG0:cause of refreshment, agent / ARG1:refreshed entity / ARG2:instrument, when separate from agent [refresh.xml]
   LexSem("V","refresh",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("refresh"),arg1,arg2))),

 'refuel-01': # ARG0:provider of fuel, agent / ARG1:entity refueled [refuel.xml]
   LexSem("V","refuel",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("refuel"),arg1))),

 'refund-01': # ARG0:refunder / ARG1:amount refunded / ARG2:refunded to / ARG3:in exchange for (might not be present) [refund.xml]
   LexSem("V","refund",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("refund"),arg1,pp("to",arg2),pp("for",arg3)))),

 'refurbish-01': # ARG0:refurbisher / ARG1:thing refurbished [refurbish.xml]
   LexSem("V","refurbish",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("refurbish"),arg1))),

 'refuse-01': # ARG0:entity refusing / ARG1:refused action or object / ARG2:anti-benefactive [refuse.xml]
   LexSem("V","refuse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("refuse"),pp("to",arg1),arg2))),

 'refute-01': # ARG0:denier, prover, agent / ARG1:entity refuted [refute.xml]
   LexSem("V","refute",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("refute"),arg1))),

 'regain-01': # ARG0:recoverer / ARG1:thing regained / ARG2:who had it before [regain.xml]
   LexSem("V","regain",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("regain"),arg1,pp("from",arg2)))),

 'regale-01': # ARG0:agent, entertainer / ARG1:entity being entertained / ARG2:instrument [regale.xml]
   LexSem("V","regale",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("regale"),arg1,pp("with",arg2)))),

 'regard-01': # ARG0:describer / ARG1:thing described / ARG2:secondary attribute, described-as [regard.xml]
   LexSem("V","regard",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("regard"),arg1,pp("as",arg2)))),

 'regenerate-01': # ARG0:cause, agent / ARG1:thing becoming new again [regenerate.xml]
   LexSem("V","regenerate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("regenerate"),arg1))),

 'register-01': # ARG0:measurer / ARG1:thing measured / ARG2:yardstick, standard of measurement / ARG3:measurement [register.xml]
   LexSem("V","register",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("register"),arg1,arg2,pp("at",arg3)))),

 'register-02': # ARG0:entity registering / ARG1:thing registered / ARG2:registered with or for / ARG3:secondary predication [register.xml]
   LexSem("V","register",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("register"),arg1,pp("with",arg2),pp("as",arg3)))),

 'regress-01': # ARG0:agent, causer of regression (rare) / ARG1:thing returning to a previous state / ARG3:initial state of arg1 / ARG4:end state of arg1 [regress.xml]
   LexSem("V","regress",[":ARG0",":ARG1",":ARG3",":ARG4"],lambda arg0,arg1,arg3,arg4:S(arg0,VP(V("regress"),pp("on",arg1),arg3,arg4))),

 'regret-01': # ARG0:regreter / ARG1:thing regretted [regret.xml]
   LexSem("V","regret",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("regret"),arg1))),

 'regroup-01': # ARG0:regrouper [regroup.xml]
   LexSem("V","regroup",[":ARG0"],lambda arg0:S(arg0,VP(V("regroup")))),

 'regrow-01': # ARG0:Causer of re-growth / ARG1:Thing re-grown / ARG2:Amount increased by / ARG3:Start point / ARG4:End point, end state of Arg1 [regrow.xml]
   LexSem("V","regrow",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("regrow"),arg1,arg2,arg3,arg4))),

 'regularize-01': # ARG0:agent, cause of regularization / ARG1:entity regularized [regularize.xml]
   LexSem("V","regularize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("regularize"),arg1))),

 'regulate-01': # ARG0:regulator / ARG1:thing regulated [regulate.xml]
   LexSem("V","regulate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("regulate"),arg1))),

 'regurgitate-01': # ARG0:puker / ARG1:former contents of stomach [regurgitate.xml]
   LexSem("V","regurgitate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("regurgitate"),pp("of",arg1)))),

 'rehabilitate-01': # ARG0:restorer, agent / ARG1:patient rehabilitated / ARG2:affliction [rehabilitate.xml]
   LexSem("V","rehabilitate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rehabilitate"),arg1,arg2))),

 'rehash-01': # ARG0:discussants / ARG1:topic of conversation [rehash.xml]
   LexSem("V","rehash",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rehash"),arg1))),

 'rehearse-01': # ARG0:practicer / ARG1:skill [rehearse.xml]
   LexSem("V","rehearse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rehearse"),arg1))),

 'reheat-01': # ARG0:cook / ARG1:food [reheat.xml]
   LexSem("V","reheat",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reheat"),arg1))),

 'rehire-01': # ARG0:employer / ARG1:return employee / ARG2:job [rehire.xml]
   LexSem("V","rehire",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rehire"),arg1,arg2))),

 'reign-01': # ARG0:entity reigning / ARG1:empire [reign.xml]
   LexSem("V","reign",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reign"),pp("over",arg1)))),

 'reignite-01': # ARG0:firestarter, agent / ARG1:entity reignited [reignite.xml]
   LexSem("V","reignite",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reignite"),arg1))),

 'reimagine-01': # ARG0:thinker / ARG1:object, thing under consideration / ARG2:attribute [reimagine.xml]
   LexSem("V","reimagine",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reimagine"),arg1,pp("as",arg2)))),

 'reimburse-01': # ARG0:payer / ARG1:amount of cash / ARG2:paid to / ARG3:in-exchange-for [reimburse.xml]
   LexSem("V","reimburse",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("reimburse"),arg1,pp("outside",arg2),pp("for",arg3)))),

 'reimplant-01': # ARG0:putter / ARG1:thing reimplanted / ARG2:reimplanted into [reimplant.xml]
   LexSem("V","reimplant",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reimplant"),arg1,pp("into",arg2)))),

 'reimpose-01': # ARG0:reimposer (not reimposter) / ARG1:thing reimposed / ARG2:reimposed on [reimpose.xml]
   LexSem("V","reimpose",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reimpose"),arg1,pp("on",arg2)))),

 'rein-in-01': # ARG0:slower, stopper, agent / ARG1:entity reined  [rein.xml]
   LexSem("V","rein",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rein"),Adv("in"),arg1))),

 'reincarnate-01': # ARG0:The Reanimator / ARG1:thing brought back to body / ARG2:the new body [reincarnate.xml]
   LexSem("V","reincarnate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reincarnate"),arg1,pp("in",arg2)))),

 'reinforce-01': # ARG0:strengthener / ARG1:thing reinforced / ARG2:instrument [reinforce.xml]
   LexSem("V","reinforce",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reinforce"),arg1,arg2))),

 'reinscribe-01': # ARG0:Agent, engraver / ARG1:surface / ARG2:message [reinscribe.xml]
   LexSem("V","reinscribe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reinscribe"),arg1,arg2))),

 'reinstall-01': # ARG0:installer, agent / ARG1:entity reinstalled [reinstall.xml]
   LexSem("V","reinstall",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reinstall"),arg1))),

 'reinstate-01': # ARG0:namer, assigner of a role / ARG1:entity playing the role / ARG2:attribute, role [reinstate.xml]
   LexSem("V","reinstate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reinstate"),arg1,pp("at",arg2)))),

 'reinsure-01': # ARG0:first insurance company, original insurer / ARG1:thing insured / ARG2:second insurance company, reinsurer / ARG3:for how much / ARG4:beneficiary / ARG5:danger [reinsure.xml]
   LexSem("V","reinsure",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg0,arg1,arg2,arg3,arg4,arg5:S(arg0,VP(V("reinsure"),arg1,arg2,pp("for",arg3),arg4,pp("against",arg5)))),

 'reintegrate-01': # ARG0:mixer, integrater / ARG1:figure / ARG2:ground [reintegrate.xml]
   LexSem("V","reintegrate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reintegrate"),arg1,pp("with",arg2)))),

 'reintroduce-01': # ARG0:entity making reintroduction / ARG1:entity being reintroduced / ARG2:entity being reintroduced TO [reintroduce.xml]
   LexSem("V","reintroduce",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reintroduce"),arg1,pp("to",arg2)))),

 'reintroduce-02': # ARG0:implementer, agent / ARG1:thing being brought up / ARG2:medium, where arg1 is brought up into [reintroduce.xml]
   LexSem("V","reintroduce",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reintroduce"),arg1,pp("into",arg2)))),

 'reinvent-01': # ARG0:creator / ARG1:thing created [reinvent.xml]
   LexSem("V","reinvent",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reinvent"),arg1))),

 'reinvigorate-01': # ARG0:causer / ARG1:entity reinvigorated [reinvigorate.xml]
   LexSem("V","reinvigorate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reinvigorate"),arg1))),

 'reiterate-01': # ARG0:announcer / ARG1:utterance / ARG2:hearer [reiterate.xml]
   LexSem("V","reiterate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reiterate"),arg1,pp("to",arg2)))),

 'reject-01': # ARG0:rejecter / ARG1:thing rejected / ARG3:attribute [reject.xml]
   LexSem("V","reject",[":ARG0",":ARG1",":ARG3"],lambda arg0,arg1,arg3:S(arg0,VP(V("reject"),arg1,pp("as",arg3)))),

 'rejoice-01': # ARG0:agent, causer / ARG1:experiencer, rejoicer [rejoice.xml]
   LexSem("V","rejoice",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rejoice"),arg1))),

 'rejoin-01': # ARG0:agent, entity doing the tying / ARG1:patient, thing(s) being tied / ARG2:instrument, string [rejoin.xml]
   LexSem("V","rejoin",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rejoin"),arg1,pp("with",arg2)))),

 'rejuvenate-01': # ARG0:agent, cause / ARG1:patient, entity freshened / ARG2:instrument [rejuvenate.xml]
   LexSem("V","rejuvenate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rejuvenate"),arg1,arg2))),

 'rekindle-01': # ARG0:firestarter / ARG1:fire [rekindle.xml]
   LexSem("V","rekindle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rekindle"),arg1))),

 'relandscape-01': # ARG0:causer of enhancement, agent / ARG1:location enhanced / ARG2:instrument / ARG3:enhanced by how much, EXT or MNR [relandscape.xml]
   LexSem("V","re-landscape",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("re-landscape"),arg1,arg2,arg3))),

 'relapse-01': # ARG1:thing experiencing a relapse / ARG2:previous state, usually prepositional complement, relapsed into what? [relapse.xml]
   LexSem("V","relapse",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("relapse"),pp("into",arg2)))),

 'relate-01': # ARG0:agent, entity drawing comparison / ARG1:thing under consideration / ARG2:what it's related to [relate.xml]
   LexSem("V","relate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("relate"),arg1,pp("to",arg2)))),

 'relate-02': # ARG0:Sayer / ARG1:Utterance / ARG2:Hearer / ARG3:Attributive [relate.xml]
   LexSem("V","relate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("relate"),arg1,arg2,arg3))),

 'relax-01': # ARG0:thing causing relaxation / ARG1:thing relaxing [relax.xml]
   LexSem("V","relax",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("relax"),arg1))),

 'relay-01': # ARG0:sender, agent / ARG1:thing sent / ARG2:sent to [relay.xml]
   LexSem("V","relay",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("relay"),arg1,pp("to",arg2)))),

 'release-01': # ARG0:releaser / ARG1:thing released / ARG2:released from [release.xml]
   LexSem("V","release",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("release"),arg1,pp("from",arg2)))),

 'relegate-01': # ARG0:relegator / ARG1:relegated / ARG2:destination [relegate.xml]
   LexSem("V","relegate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("relegate"),arg1,pp("to",arg2)))),

 'relent-01': # ARG0:relenter / ARG1:with respect to what? [relent.xml]
   LexSem("V","relent",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("relent"),pp("on",arg1)))),

 'relevant-01': # ARG1:thing that's relevant / ARG2:relevant to what? [relevant.xml]
   LexSem("V","have-relevance",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("have-relevance"),pp("to",arg2)))),

 'relieve-01': # ARG0:thing relieving / ARG1:thing being helped, eased, gotten rid of / ARG2:benefactive [relieve.xml]
   LexSem("V","relieve",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("relieve"),arg1,arg2))),

 'relieve-02': # ARG0:reliever / ARG1:patient, relieved / ARG2:instrument or manner [relieve.xml]
   LexSem("V","relieve",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("relieve"),arg1,arg2))),

 'relinquish-01': # ARG0:abandoner / ARG1:project [relinquish.xml]
   LexSem("V","relinquish",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("relinquish"),arg1))),

 'relish-01': # ARG0:enjoyer / ARG1:thing enjoyed [relish.xml]
   LexSem("V","relish",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("relish"),arg1))),

 'relive-01': # ARG0:experiencer / ARG1:experience [relive.xml]
   LexSem("V","relive",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("relive"),arg1))),

 'reload-01': # ARG0:loader, agent / ARG1:beast of burden / ARG2:cargo / ARG3:instrument [reload.xml]
   LexSem("V","reload",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("reload"),arg1,arg2,arg3))),

 'relocate-01': # ARG0:agent, causer / ARG1:entity relocated / ARG2:destination / ARG3:source [relocate.xml]
   LexSem("V","relocate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("relocate"),arg1,pp("to",arg2),pp("from",arg3)))),

 'rely-01': # ARG0:relier, needer / ARG1:thing needed, relied on / ARG2:for, in order to [rely.xml]
   LexSem("V","rely",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rely"),pp("on",arg1),pp("for",arg2)))),

 'remain-01': # ARG1:Thing remaining / ARG2:benefactive, entity who gets the remainder / ARG3:attribute of arg1 [remain.xml]
   LexSem("V","remain",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("remain"),arg2,pp("under",arg3)))),

 'remain_to_be_seen-08': # ARG0:seen by whom / ARG1:thing that is not yet determined [see.xml]
   LexSem("V","remain",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("remain"),arg1))),

 'remake-01': # ARG0:creator / ARG1:creation / ARG2:created-from, thing changed / ARG3:benefactive [remake.xml]
   LexSem("V","remake",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("remake"),arg1,arg2,arg3))),

 'remand-01': # ARG0:agent, sender-back / ARG1:thing sent / ARG2:sent to [remand.xml]
   LexSem("V","remand",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("remand"),arg1,arg2))),

 'remark-01': # ARG0:speaker / ARG1:utterance / ARG2:hearer [remark.xml]
   LexSem("V","remark",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("remark"),arg1,pp("to",arg2)))),

 'remarry-01': # ARG0:causer / ARG1:one half / ARG2:second half [remarry.xml]
   LexSem("V","remarry",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("remarry"),arg1,arg2))),

 'remaster-01': # ARG0:mix master / ARG1:media remastered [remaster.xml]
   LexSem("V","remaster",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("remaster"),arg1))),

 'remedy-01': # ARG0:causer of improvement, agent / ARG1:thing getting better / ARG2:instrument [remedy.xml]
   LexSem("V","remedy",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("remedy"),arg1,arg2))),

 'remember-01': # ARG0:rememberer / ARG1:memory / ARG2:secondary attribute [remember.xml]
   LexSem("V","remember",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("remember"),arg1,pp("as",arg2)))),

 'remind-01': # ARG0:cause, agent / ARG1:thing reminded about / ARG2:recipient [remind.xml]
   LexSem("V","remind",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("remind"),arg1,arg2))),

 'reminisce-01': # ARG0:recaller / ARG1:memory [reminisce.xml]
   LexSem("V","reminisce",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reminisce"),pp("about",arg1)))),

 'remit-01': # ARG0:agent, payer / ARG1:theme, thing given/paid / ARG2:recipient, person receiving payment [remit.xml]
   LexSem("V","remit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("remit"),arg1,pp("to",arg2)))),

 'remodel-01': # ARG0:remodeler / ARG1:thing remodel(l)ed [remodel.xml]
   LexSem("V","remodel",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("remodel"),arg1))),

 'remonstrate-01': # ARG0:Lecturer / ARG1:Entity lectured / ARG2:Reason for reprimand [remonstrate.xml]
   LexSem("V","remonstrate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("remonstrate"),arg1,pp("for",arg2)))),

 'remonstrate-02': # ARG0:Arguer / ARG1:Argued with / ARG2:Argued about [remonstrate.xml]
   LexSem("V","remonstrate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("remonstrate"),pp("with",arg1),pp("for",arg2)))),

 'remortgage-01': # ARG0:mortgager, initiator of mortgage / ARG1:possession(s), thing mortgaged / ARG2:provider of money / ARG3:money [remortgage.xml]
   LexSem("V","remortgage",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("remortgage"),arg1,pp("to",arg2),pp("for",arg3)))),

 'remove-01': # ARG0:entity removing / ARG1:thing being removed / ARG2:removed from [remove.xml]
   LexSem("V","remove",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("remove"),arg1,pp("from",arg2)))),

 'remunerate-01': # ARG0:payer, agent / ARG1:entity remunerated / ARG2:compensation [remunerate.xml]
   LexSem("V","remunerate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("remunerate"),arg1,pp("by",arg2)))),

 'rename-01': # ARG0:assigner of name, agent / ARG1:entity named / ARG2:new name [rename.xml]
   LexSem("V","rename",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rename"),arg1,arg2))),

 'rend-01': # ARG0:rend-er / ARG1:thing torn, rent [rend.xml]
   LexSem("V","rend",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rend"),pp("at",arg1)))),

 'render-01': # ARG0:cause, agent / ARG1:entity rendered / ARG2:secondary predicate on arg1 [render.xml]
   LexSem("V","render",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("render"),arg1,arg2))),

 'render-02': # ARG0:giver / ARG1:entity rendered / ARG2:entity receiving [render.xml]
   LexSem("V","render",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("render"),arg1,pp("to",arg2)))),

 'render-03': # ARG0:translator, artist / ARG1:entity rendered / ARG2:rendered into (end state) [render.xml]
   LexSem("V","render",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("render"),arg1,pp("into",arg2)))),

 'rendezvous-01': # ARG0:first or all entities meeting / ARG1:second entity, if separate [rendezvous.xml]
   LexSem("V","rendezvous",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rendezvous"),pp("with",arg1)))),

 'renege-01': # ARG0:entities failing / ARG1:renege on [renege.xml]
   LexSem("V","renege",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("renege"),pp("on",arg1)))),

 'renegotiate-01': # ARG0:negotiator / ARG1:agreement / ARG2:explicit other party [renegotiate.xml]
   LexSem("V","renegotiate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("renegotiate"),pp("with",arg1),arg2))),

 'renew-01': # ARG0:agent, causer of renewal / ARG1:thing becoming newish [renew.xml]
   LexSem("V","renew",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("renew"),arg1))),

 'renounce-01': # ARG0:denier / ARG1:thing denied / ARG2:benefactive [renounce.xml]
   LexSem("V","renounce",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("renounce"),arg1,arg2))),

 'renovate-01': # ARG0:renovator, agent / ARG1:thing becoming new [renovate.xml]
   LexSem("V","renovate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("renovate"),arg1))),

 'renown-01': # ARG0:Person making someone else famous / ARG1:Thing made famous / ARG2:Famous for what [renown.xml]
   LexSem("V","renown",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("renown"),arg1,pp("for",arg2)))),

 'rent-01': # ARG0:renter / ARG1:thing rented (eg, apartment) / ARG2:landlord / ARG3:rent / ARG4:term [rent.xml]
   LexSem("V","rent",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("rent"),arg1,pp("from",arg2),pp("for",arg3),pp("for",arg4)))),

 'rent-02': # ARG0:landlord / ARG1:thing rented (eg, apartment) / ARG2:renter / ARG3:rent / ARG4:term [rent.xml]
   LexSem("V","rent",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("rent"),arg1,pp("to",arg2),pp("for",arg3),pp("for",arg4)))),

 'rent-out-03': # ARG0:renter / ARG1:thing rented (eg, apartment) / ARG2:landlord / ARG3:rent / ARG4:term [rent.xml]
   LexSem("V","rent",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("rent"),Adv("out"),arg1,pp("from",arg2),arg3,arg4))),

 'rent-out-04': # ARG0:landlord / ARG1:thing rented (eg, apartment) / ARG2:renter / ARG3:rent / ARG4:term [rent.xml]
   LexSem("V","rent",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("rent"),Adv("out"),arg1,arg2,arg3,arg4))),

 'reoccur-01': # ARG1:event [reoccur.xml]
   LexSem("V","reoccur",[":ARG1"],lambda arg1:S(arg1,VP(V("reoccur")))),

 'reopen-01': # ARG0:opener / ARG1:thing opening / ARG2:instrument / ARG3:benefactive [reopen.xml]
   LexSem("V","reopen",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("reopen"),arg1,pp("by",arg2),pp("to",arg3)))),

 'reorganize-01': # ARG0:organizer / ARG1:thing organized / ARG2:previous state / ARG3:benefactive / ARG4:end state / ARG5:specific aspect of arg1 that is being reorganized [reorganize.xml]
   LexSem("V","reorganize",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg0,arg1,arg2,arg3,arg4,arg5:S(arg0,VP(V("reorganize"),arg1,arg2,pp("from",arg3),pp("as",arg4),arg5))),

 'reorient-01': # ARG0:adjuster, focusser, agent / ARG1:thing oriented [reorient.xml]
   LexSem("V","reorient",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reorient"),arg1))),

 'repackage-01': # ARG0:packager, agent / ARG1:entity packaged / ARG2:entity packaged into / ARG3:instrument [repackage.xml]
   LexSem("V","repackage",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("repackage"),arg1,arg2,arg3))),

 'repaint-01': # ARG0:agent, painter / ARG1:surface / ARG2:explicit mention of paint [repaint.xml]
   LexSem("V","repaint",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("repaint"),arg1,arg2))),

 'repaint-02': # ARG0:artist / ARG1:art / ARG2:benefactive [repaint.xml]
   LexSem("V","repaint",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("repaint"),arg1,pp("for",arg2)))),

 'repair-01': # ARG0:repairer, agent / ARG1:entity repaired [repair.xml]
   LexSem("V","repair",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("repair"),arg1))),

 'repatriate-01': # ARG0:sender / ARG1:expatriate / ARG2:new homeland [repatriate.xml]
   LexSem("V","repatriate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("repatriate"),arg1,pp("to",arg2)))),

 'repay-01': # ARG0:payer or buyer / ARG1:thing bought or paid for / ARG2:seller or person being paid / ARG3:price paid [repay.xml]
   LexSem("V","repay",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("repay"),pp("for",arg1),arg2,arg3))),

 'repeal-01': # ARG0:revoker, agent / ARG1:entity repealed [repeal.xml]
   LexSem("V","repeal",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("repeal"),arg1))),

 'repeat-01': # ARG0:speaker, agent / ARG1:utterance or action / ARG2:listener / ARG3:number of repetitions [repeat.xml]
   LexSem("V","repeat",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("repeat"),arg1,pp("to",arg2),arg3))),

 'repel-01': # ARG0:intentional agent / ARG1:repelled entity / ARG2:instrument [repel.xml]
   LexSem("V","repel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("repel"),arg1,pp("with",arg2)))),

 'repent-01': # ARG0:repenter / ARG1:thing regretted, shameful act / ARG2:listener, repent to whom? [repent.xml]
   LexSem("V","repent",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("repent"),pp("for",arg1),pp("to",arg2)))),

 'rephrase-01': # ARG0:speaker, writer, agent / ARG1:thing rephrased / ARG2:rephrased as [rephrase.xml]
   LexSem("V","rephrase",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rephrase"),arg1,arg2))),

 'replace-01': # ARG0:replacer / ARG1:old thing / ARG2:new thing [replace.xml]
   LexSem("V","replace",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("replace"),arg1,pp("with",arg2)))),

 'replant-01': # ARG0:gardener, agent / ARG1:entity planted / ARG2:location [replant.xml]
   LexSem("V","replant",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("replant"),arg1,arg2))),

 'replay-01': # ARG0:player / ARG1:music/video / ARG2:instrument [replay.xml]
   LexSem("V","replay",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("replay"),arg1,arg2))),

 'replenish-01': # ARG0:agent of filling (animate only!) / ARG1:container / ARG2:substance [replenish.xml]
   LexSem("V","replenish",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("replenish"),arg1,pp("by",arg2)))),

 'replicate-01': # ARG0:copier, agent / ARG1:original [replicate.xml]
   LexSem("V","replicate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("replicate"),arg1))),

 'reply-01': # ARG0:replier / ARG1:in response to / ARG2:answer [reply.xml]
   LexSem("V","reply",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reply"),pp("to",arg1),arg2))),

 'repopulate-01': # ARG0:agent, repopulator / ARG1:thing repopulated, destination / ARG2:repopulated with what, theme [repopulate.xml]
   LexSem("V","repopulate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("repopulate"),arg1,pp("with",arg2)))),

 'report-01': # ARG0:Reporter / ARG1:thing reported / ARG2:entity reported to [report.xml]
   LexSem("V","report",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("report"),arg1,pp("to",arg2)))),

 'repose-01': # ARG0:agent, causer of reposing (transitive subject only) / ARG1:reposer(s), theme (transitive object, intransitive subject) / ARG2:location of reposing [repose.xml]
   LexSem("V","repose",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("repose"),arg1,pp("in",arg2)))),

 'reposition-01': # ARG0:repositioner, agent / ARG1:entity repositioned / ARG2:attribute [reposition.xml]
   LexSem("V","reposition",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reposition"),arg1,pp("as",arg2)))),

 'repossess-01': # ARG0:new/previous owner, holder of lien / ARG1:goods [repossess.xml]
   LexSem("V","repossess",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("repossess"),arg1))),

 'repost-01': # ARG0:poster / ARG1:posted / ARG2:posted-to [repost.xml]
   LexSem("V","repost",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("repost"),arg1,pp("to",arg2)))),

 'represent-01': # ARG0:entity standing in for another entity / ARG1:entity stood in for / ARG2:domain in which arg0 stands for arg1 [represent.xml]
   LexSem("V","represent",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("represent"),arg1,arg2))),

 'repress-01': # ARG0:represser / ARG1:repressed / ARG2:domain in which arg1 is being repressed [repress.xml]
   LexSem("V","repress",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("repress"),arg1,arg2))),

 'reprimand-01': # ARG0:reprimander, agent / ARG1:entity reprimanded / ARG2:for what [reprimand.xml]
   LexSem("V","reprimand",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reprimand"),arg1,arg2))),

 'reprint-01': # ARG0:printer, copier, agent / ARG1:thing copied [reprint.xml]
   LexSem("V","reprint",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reprint"),arg1))),

 'reproach-01': # ARG0:assigner of blame / ARG1:guilty party / ARG2:bad behavior reproached [reproach.xml]
   LexSem("V","reproach",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reproach"),arg1,arg2))),

 'reprobate-01': # ARG0:condemner / ARG1:condemned [reprobate.xml]
   LexSem("V","reprobate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reprobate"),arg1))),

 'reprocess-01': # ARG0:processor / ARG1:thing reprocessed / ARG2:end state / ARG3:start state [reprocess.xml]
   LexSem("V","reprocess",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("reprocess"),arg1,arg2,arg3))),

 'reproduce-01': # ARG0:copier, agent / ARG1:original [reproduce.xml]
   LexSem("V","reproduce",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reproduce"),arg1))),

 'reprogram-01': # ARG0:programmer / ARG1:system receiving a new program / ARG2:the new program / ARG3:new function/attribute of arg1 [reprogram.xml]
   LexSem("V","reprogram",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("reprogram"),arg1,arg2,arg3))),

 'reprove-01': # ARG0:blamer / ARG1:blamed / ARG2:cause [reprove.xml]
   LexSem("V","reprove",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reprove"),arg1,pp("for",arg2)))),

 'repudiate-01': # ARG0:rejector, agent / ARG1:thing rejected or refused as untrue [repudiate.xml]
   LexSem("V","repudiate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("repudiate"),arg1))),

 'repulse-01': # ARG0:Cause of repulsion / ARG1:Repulsed entity / ARG2:Instrument or Manner if separate from arg 0 [repulse.xml]
   LexSem("V","repulse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("repulse"),arg1,arg2))),

 'repute-01': # ARG0:considerer, agent / ARG1:entity considered / ARG2:secondary predicate on arg1 [repute.xml]
   LexSem("V","repute",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("repute"),arg1,arg2))),

 'request-01': # ARG0:asker / ARG1:favor / ARG2:hearer [request.xml]
   LexSem("V","request",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("request"),arg1,pp("from",arg2)))),

 'request-confirmation-91': # ARG0:entity requesting confirmation / ARG1:thing to be confirmed / ARG2:entity that the request is being made to [request.xml]
   LexSem("V","request confirmation",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("request confirmation"),arg1,arg2))),

 'request-response-91': # ARG0:entity requesting response / ARG1:thing to be responded to / ARG2:entity that the request is being made to [request.xml]
   LexSem("V","request response",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("request response"),arg1,arg2))),

 'require-01': # ARG0:requirer / ARG1:thing required / ARG2:required-of, required-from ('ablative') [require.xml]
   LexSem("V","require",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("require"),arg1,pp("of",arg2)))),

 'requisition-01': # ARG0:demander, agent / ARG1:entity requisitioned [requisition.xml]
   LexSem("V","requisition",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("requisition"),arg1))),

 'reread-01': # ARG0:reader / ARG1:book / ARG2:benefactive or direction / ARG3:text, content [reread.xml]
   LexSem("V","reread",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("reread"),arg1,arg2,arg3))),

 'reroute-01': # ARG0:router / ARG1:thing routed / ARG2:new destination [reroute.xml]
   LexSem("V","reroute",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reroute"),arg1,arg2))),

 'rerun-01': # ARG0:network replaying / ARG1:show [rerun.xml]
   LexSem("V","rerun",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rerun"),arg1))),

 'rerun-02': # ARG0:causer of repeat performance / ARG1:thing rerun [rerun.xml]
   LexSem("V","rerun",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rerun"),arg1))),

 'rerun-03': # ARG0:politician / ARG1:office [rerun.xml]
   LexSem("V","rerun",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rerun"),arg1))),

 'reschedule-01': # ARG0:planner / ARG1:event / ARG2:scheduled for or because of / ARG3:time of event [reschedule.xml]
   LexSem("V","reschedule",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("reschedule"),arg1,pp("to",arg2),arg3))),

 'rescind-01': # ARG0:taker back, agent / ARG1:thing taken back [rescind.xml]
   LexSem("V","rescind",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rescind"),arg1))),

 'rescue-01': # ARG0:rescuer, agent / ARG1:entity rescued / ARG2:rescued from [rescue.xml]
   LexSem("V","rescue",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rescue"),arg1,pp("from",arg2)))),

 'research-01': # ARG0:student / ARG1:subject [research.xml]
   LexSem("V","research",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("research"),arg1))),

 'reseat-01': # ARG0:Usher / ARG1:Party moved / ARG2:New resting site [reseat.xml]
   LexSem("V","reseat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reseat"),arg1,pp("behind",arg2)))),

 'resell-01': # ARG0:Seller / ARG1:Thing Sold / ARG2:Buyer / ARG3:Price Paid / ARG4:Benefactive [resell.xml]
   LexSem("V","resell",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("resell"),arg1,pp("to",arg2),arg3,arg4))),

 'resemble-01': # ARG1:copy / ARG2:original [resemble.xml]
   LexSem("V","resemble",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("resemble"),arg2))),

 'resent-01': # ARG0:resenter / ARG1:thing or person resented / ARG2:because-of [resent.xml]
   LexSem("V","resent",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("resent"),arg1,pp("for",arg2)))),

 'reserve-01': # ARG0:reserver, holder back / ARG1:thing reserved / ARG2:benefactive / ARG3:secondary attribute of arg1 [reserve.xml]
   LexSem("V","reserve",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("reserve"),arg1,pp("for",arg2),pp("as",arg3)))),

 'reset-01': # ARG0:resetter / ARG1:thing being reset / ARG2:value [reset.xml]
   LexSem("V","reset",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reset"),arg1,arg2))),

 'resettle-01': # ARG0:entity causing something to settle again / ARG1:commodity or stock, thing resettling / ARG2:EXT, amount declined by / ARG3:start point / ARG4:end point [resettle.xml]
   LexSem("V","resettle",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("resettle"),arg1,pp("down",arg2),arg3,pp("at",arg4)))),

 'reshape-01': # ARG0:shaper / ARG1:thing worked on [reshape.xml]
   LexSem("V","reshape",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reshape"),arg1))),

 'reship-01': # ARG0:sender / ARG1:package / ARG2:recipient / ARG3:source [reship.xml]
   LexSem("V","re-ship",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("re-ship"),arg1,arg2,arg3))),

 'reshuffle-01': # ARG0:shuffler, agent / ARG1:entity reshuffled [reshuffle.xml]
   LexSem("V","reshuffle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reshuffle"),arg1))),

 'reside-01': # ARG0:entity residing / ARG1:location [reside.xml]
   LexSem("V","reside",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reside"),pp("in",arg1)))),

 'resign-01': # ARG0:resigner / ARG1:position resigned [resign.xml]
   LexSem("V","resign",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("resign"),arg1))),

 'resign-02': # ARG1:experiencer of emotional resignation / ARG2:resigned to what [resign.xml]
   LexSem("V","resign",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("resign"),pp("to",arg2)))),

 'resign-03': # ARG0:Signer / ARG1:Talent, contract signed / ARG2:Signed as what, what role arg1 is signed as [resign.xml]
   LexSem("V","resign",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("resign"),arg1,pp("as",arg2)))),

 'resile-01': # ARG0:recanter / ARG1:reneged on [resile.xml]
   LexSem("V","resile",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("resile"),pp("from",arg1)))),

 'resile-02': # ARG1:thing bouncing back [resile.xml]
   LexSem("V","resile",[":ARG1"],lambda arg1:S(arg1,VP(V("resile")))),

 'resist-01': # ARG0:resister / ARG1:thing resisted [resist.xml]
   LexSem("V","resist",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("resist"),arg1))),

 'resolve-01': # ARG0:entity making resolution / ARG1:thing being resolved / ARG2:comitative, resolved with / ARG3:attribute, resolved to or at [resolve.xml]
   LexSem("V","resolve",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("resolve"),arg1,arg2,arg3))),

 'resolve-02': # ARG0:decider / ARG1:decision / ARG2:benefactive / ARG3:instrument [resolve.xml]
   LexSem("V","resolve",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("resolve"),pp("to",arg1),arg2,arg3))),

 'resolve-03': # ARG0:agent, causer (e.g. scientist) / ARG1:material resolved (e.g. protein) / ARG2:end state, constituents / ARG3:method used [resolve.xml]
   LexSem("V","resolve",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("resolve"),arg1,pp("into",arg2),pp("by",arg3)))),

 'resonate-01': # ARG1:sound / ARG2:additional description of sound [resonate.xml]
   LexSem("V","resonate",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("resonate"),pp("with",arg2)))),

 'resorb-01': # ARG0:cause of bone loss (pathology or osteoclasts) / ARG1:entity undergoing resorption [resorb.xml]
   LexSem("V","resorb",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("resorb"),arg1))),

 'resorb-02': # ARG0:resorber, cause or agent / ARG1:resorbed thing/substance / ARG2:resorbed into what, destination / ARG3:resorbed from what, source [resorb.xml]
   LexSem("V","resorb",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("resorb"),arg1,arg2,arg3))),

 'resort-01': # ARG0:entity needing a last chance / ARG1:last chance, resorted to [resort.xml]
   LexSem("V","resort",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("resort"),pp("to",arg1)))),

 'resound-01': # ARG1:the sound / ARG2:location, direction [resound.xml]
   LexSem("V","resound",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("resound"),pp("from",arg2)))),

 'respect-01': # ARG0:regarder, respecter, agent / ARG1:entity respected / ARG2:secondary predicate [respect.xml]
   LexSem("V","respect",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("respect"),arg1,pp("as",arg2)))),

 'respire-01': # ARG0:Breather [respire.xml]
   LexSem("V","respire",[":ARG0"],lambda arg0:S(arg0,VP(V("respire")))),

 'respond-01': # ARG0:replier / ARG1:in response to / ARG2:answer [respond.xml]
   LexSem("V","respond",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("respond"),pp("to",arg1),arg2))),

 'rest-01': # ARG0:agent, causer / ARG1:entity resting [rest.xml]
   LexSem("V","rest",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rest"),arg1))),

 'rest-02': # ARG1:relier, entity resting / ARG2:rest with/on [rest.xml]
   LexSem("V","rest",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("rest"),pp("with",arg2)))),

 'restart-01': # ARG0:starter, agent / ARG1:entity restarted [restart.xml]
   LexSem("V","restart",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("restart"),arg1))),

 'restate-01': # ARG0:announcer / ARG1:utterance / ARG2:hearer / ARG3:attributive [restate.xml]
   LexSem("V","restate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("restate"),arg1,pp("to",arg2),arg3))),

 'restate-02': # ARG0:revaluer / ARG1:thing valued / ARG2:EXT of change / ARG3:start point / ARG4:end point [restate.xml]
   LexSem("V","restate",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("restate"),arg1,arg2,pp("from",arg3),arg4))),

 'restore-01': # ARG0:giver, restorer / ARG1:gift, thing restored / ARG2:benefactive, restored-to [restore.xml]
   LexSem("V","restore",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("restore"),arg1,pp("to",arg2)))),

 'restore-02': # ARG0:restorer / ARG1:thing restored, renewed / ARG2:end state [restore.xml]
   LexSem("V","restore",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("restore"),arg1,pp("to",arg2)))),

 'restrain-01': # ARG0:agent / ARG1:thing being restrained / ARG2:what arg1 is restrained from [restrain.xml]
   LexSem("V","restrain",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("restrain"),arg1,pp("from",arg2)))),

 'restrict-01': # ARG0:agent, limiter / ARG1:thing limited / ARG2:limit [restrict.xml]
   LexSem("V","restrict",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("restrict"),arg1,pp("to",arg2)))),

 'restructure-01': # ARG0:organizer, agent / ARG1:thing reorganized / ARG2:start state / ARG3:end state [restructure.xml]
   LexSem("V","restructure",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("restructure"),arg1,pp("from",arg2),pp("into",arg3)))),

 'resubmit-01': # ARG0:giver / ARG1:given / ARG2:given-to / ARG3:purpose [resubmit.xml]
   LexSem("V","resubmit",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("resubmit"),arg1,pp("to",arg2),pp("for",arg3)))),

 'result-01': # ARG1:Theme, prior condition / ARG2:Goal, end condition [result.xml]
   LexSem("V","result",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("result"),pp("in",arg2)))),

 'resume-01': # ARG0:Agent / ARG1:Theme(-Creation) / ARG2:Instrument [resume.xml]
   LexSem("V","resume",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("resume"),arg1,pp("by",arg2)))),

 'resummon-01': # ARG0:inviter / ARG1:invited / ARG2:invited-to [resummon.xml]
   LexSem("V","re-summon",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("re-summon"),arg1,arg2))),

 'resupply-01': # ARG0:provider / ARG1:thing provided / ARG2:entity provided for (benefactive) [resupply.xml]
   LexSem("V","resupply",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("resupply"),pp("with",arg1),arg2))),

 'resupply-02': # ARG0:agent / ARG1:container / ARG2:substance [resupply.xml]
   LexSem("V","resupply",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("resupply"),arg1,arg2))),

 'resurface-01': # ARG0:applier of new surface, agent / ARG1:thing getting a new surface [resurface.xml]
   LexSem("V","resurface",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("resurface"),arg1))),

 'resurface-02': # ARG1:thing appearing [resurface.xml]
   LexSem("V","resurface",[":ARG1"],lambda arg1:S(arg1,VP(V("resurface")))),

 'resurge-01': # ARG0:thing resurging [resurge.xml]
   LexSem("V","resurge",[":ARG0"],lambda arg0:S(arg0,VP(V("resurge")))),

 'resurrect-01': # ARG0:Dr. Frankenstein / ARG1:former corpse [resurrect.xml]
   LexSem("V","resurrect",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("resurrect"),arg1))),

 'resuscitate-01': # ARG0:resuscitator / ARG1:dead thing, now alive [resuscitate.xml]
   LexSem("V","resuscitate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("resuscitate"),arg1))),

 'retail-01': # ARG0:Seller / ARG1:Thing Sold / ARG2:Buyer / ARG3:Price Paid / ARG4:Benefactive [retail.xml]
   LexSem("V","retail",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("retail"),arg1,arg2,pp("for",arg3),arg4))),

 'retain-01': # ARG0:Keeper / ARG1:thing kept / ARG3:attributive [retain.xml]
   LexSem("V","retain",[":ARG0",":ARG1",":ARG3"],lambda arg0,arg1,arg3:S(arg0,VP(V("retain"),arg1,pp("as",arg3)))),

 'retake-01': # ARG0:taker / ARG1:taken [retake.xml]
   LexSem("V","retake",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("retake"),arg1))),

 'retaliate-01': # ARG0:violent entity, agent / ARG1:instigating entity or act (retaliate against) [retaliate.xml]
   LexSem("V","retaliate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("retaliate"),pp("against",arg1)))),

 'retard-01': # ARG0:cause of slowing / ARG1:thing getting slower / ARG2:specific aspect of arg1 retarded [retard.xml]
   LexSem("V","retard",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("retard"),arg1,arg2))),

 'retch-01': # ARG0:retcher / ARG1:thing being retched up [retch.xml]
   LexSem("V","retch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("retch"),arg1))),

 'retest-01': # ARG0:examiner / ARG1:examined / ARG2:in search of, for what [retest.xml]
   LexSem("V","retest",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("retest"),arg1,pp("for",arg2)))),

 'rethink-01': # ARG0:rethinker / ARG1:opinion [rethink.xml]
   LexSem("V","rethink",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rethink"),arg1))),

 'reticulate-01': # ARG0:network former / ARG1:network [reticulate.xml]
   LexSem("V","reticulate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reticulate"),arg1))),

 'reticulate-02': # ARG0:reticulater / ARG1:thing reticulated / ARG2:recipient or beneficiary [reticulate.xml]
   LexSem("V","reticulate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reticulate"),arg1,arg2))),

 'retie-01': # ARG0:agent, entity doing the tying / ARG1:patient, thing(s) being tied / ARG2:instrument, string / ARG3:attribute of arg1 [retie.xml]
   LexSem("V","retie",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("retie"),arg1,arg2,arg3))),

 'retire-01': # ARG0:retiree / ARG1:former job [retire.xml]
   LexSem("V","retire",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("retire"),pp("as",arg1)))),

 'retire-02': # ARG0:cause, payer-off of debt / ARG1:thing (eg debt) being retired [retire.xml]
   LexSem("V","retire",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("retire"),arg1))),

 'retool-01': # ARG0:agent, adaptor / ARG1:thing adapted / ARG2:adapted to / ARG3:adapted from [retool.xml]
   LexSem("V","retool",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("retool"),arg1,pp("as",arg2),arg3))),

 'retort-01': # ARG0:replier / ARG1:in response to / ARG2:answer [retort.xml]
   LexSem("V","retort",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("retort"),arg1,arg2))),

 'retrace-01': # ARG0:tracer, agent / ARG1:entity retraced [retrace.xml]
   LexSem("V","retrace",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("retrace"),arg1))),

 'retract-01': # ARG0:taker back, agent / ARG1:thing retracted [retract.xml]
   LexSem("V","retract",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("retract"),arg1))),

 'retrain-01': # ARG0:trainer / ARG1:skill / ARG2:trainee [retrain.xml]
   LexSem("V","retrain",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("retrain"),arg1,pp("to",arg2)))),

 'retreat-01': # ARG0:causal agent / ARG1:retreater, entity actually moving back / ARG2:scary thing [retreat.xml]
   LexSem("V","retreat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("retreat"),arg1,pp("from",arg2)))),

 'retreat-02': # ARG1:thing moving downward / ARG2:EXT / ARG3:start point / ARG4:end point / ARG5:attribute of arg1 actually in decline (if in addition to arg1) [retreat.xml]
   LexSem("V","retreat",[":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg1,arg2,arg3,arg4,arg5:S(arg1,VP(V("retreat"),arg2,pp("from",arg3),pp("to",arg4),arg5))),

 'retrench-01': # ARG0:entity in defensive position [retrench.xml]
   LexSem("V","retrench",[":ARG0"],lambda arg0:S(arg0,VP(V("retrench")))),

 'retrial-01': # ARG0:Litigant / ARG1:Lawsuit [retrial.xml]
   LexSem("V","retrial",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("retrial"),arg1))),

 'retribute-01': # ARG0:vengeant one / ARG1:one paid back / ARG2:for what offense [retribute.xml]
   LexSem("V","retribute",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("retribute"),pp("against",arg1),pp("for",arg2)))),

 'retrieve-01': # ARG0:receiver / ARG1:thing gotten / ARG2:received from / ARG3:benefactive [retrieve.xml]
   LexSem("V","retrieve",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("retrieve"),arg1,pp("from",arg2),pp("for",arg3)))),

 'retrofit-01': # ARG0:adapter / ARG1:thing adapted / ARG2:for what, technology [retrofit.xml]
   LexSem("V","retrofit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("retrofit"),arg1,pp("with",arg2)))),

 'retrograde-01': # ARG1:thing moving backwards [retrograde.xml]
   LexSem("V","retrograde",[":ARG1"],lambda arg1:S(arg1,VP(V("retrograde")))),

 'retrogress-01': # ARG1:thing moving, going back to previous state / ARG3:start point / ARG4:end point [retrogress.xml]
   LexSem("V","retrogress",[":ARG1",":ARG3",":ARG4"],lambda arg1,arg3,arg4:S(arg1,VP(V("retrogress"),pp("from",arg3),pp("to",arg4)))),

 'retry-01': # ARG0:Litigant / ARG1:Lawsuit [retry.xml]
   LexSem("V","retry",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("retry"),arg1))),

 'return-01': # ARG1:entity in motion / ARG2:(extent -- rare) / ARG3:start point / ARG4:end point [return.xml]
   LexSem("V","return",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("return"),arg2,arg3,pp("to",arg4)))),

 'return-02': # ARG0:giver / ARG1:thing given / ARG2:entity given to [return.xml]
   LexSem("V","return",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("return"),arg1,pp("to",arg2)))),

 'return-03': # ARG0:entity bring something back / ARG1:thing brought back / ARG2:attribute of arg1, state arg1 is brought back to [return.xml]
   LexSem("V","return",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("return"),arg1,pp("to",arg2)))),

 'return-04': # ARG0:sender / ARG1:thing sent / ARG2:sent-to [return.xml]
   LexSem("V","return",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("return"),arg1,pp("to",arg2)))),

 'reunify-01': # ARG0:joiner, agent / ARG1:(first) thing(s) being unified / ARG2:other things, if separate from arg1 / ARG3:unified whole [reunify.xml]
   LexSem("V","re-unify",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("re-unify"),arg1,pp("with",arg2),arg3))),

 'reunite-01': # ARG0:unifier / ARG1:(first) thing(s) being unified / ARG2:other things, if separate from arg1 / ARG3:unified whole [reunite.xml]
   LexSem("V","reunite",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("reunite"),arg1,pp("with",arg2),arg3))),

 'reup-01': # ARG0:causer / ARG1:thing re-upped [reup.xml]
   LexSem("V","reup",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("reup"),arg1))),

 'reuse-01': # ARG0:User / ARG1:thing used again / ARG2:purpose [reuse.xml]
   LexSem("V","reuse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reuse"),arg1,pp("for",arg2)))),

 'rev-01': # ARG0:driver / ARG1:engine [rev.xml]
   LexSem("V","rev",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rev"),arg1))),

 'rev-up-02': # ARG0:driver / ARG1:engine / ARG2:further description [rev.xml]
   LexSem("V","rev",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rev"),Adv("up"),arg1,pp("to",arg2)))),

 'revalue-01': # ARG0:entity establishing value / ARG1:entity with value / ARG2:value [revalue.xml]
   LexSem("V","revalue",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("revalue"),arg1,pp("as",arg2)))),

 'revamp-01': # ARG0:agent, causer / ARG1:thing revamping [revamp.xml]
   LexSem("V","revamp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("revamp"),arg1))),

 'reveal-01': # ARG0:speaker, revealer / ARG1:utterance, truth condition / ARG2:hearer / ARG3:attribute of arg1 [reveal.xml]
   LexSem("V","reveal",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("reveal"),arg1,pp("to",arg2),pp("to",arg3)))),

 'revel-01': # ARG0:experiencer of delight / ARG1:entity reveling in [revel.xml]
   LexSem("V","revel",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("revel"),pp("in",arg1)))),

 'reverberate-01': # ARG1:sound [reverberate.xml]
   LexSem("V","reverberate",[":ARG1"],lambda arg1:S(arg1,VP(V("reverberate")))),

 'revere-01': # ARG0:admirer / ARG1:admired [revere.xml]
   LexSem("V","revere",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("revere"),arg1))),

 'reverse-01': # ARG0:agent of reversal / ARG1:thing being reversed / ARG2:beneficiary of the reversal [reverse.xml]
   LexSem("V","reverse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reverse"),arg1,arg2))),

 'revert-01': # ARG0:agent/cause / ARG1:entity going back / ARG2:reverted to (previous state) / ARG3:previous owner given back to [revert.xml]
   LexSem("V","revert",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("revert"),arg1,pp("to",arg2),pp("to",arg3)))),

 'revictimize-01': # ARG0:victimizer / ARG1:victim / ARG2:grounds [revictimize.xml]
   LexSem("V","re-victimize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("re-victimize"),arg1,arg2))),

 'review-01': # ARG0:reviewer / ARG1:thing reviewed / ARG2:beneficiary / ARG3:secondary-theme [review.xml]
   LexSem("V","review",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("review"),arg1,pp("for",arg2),arg3))),

 'revile-01': # ARG0:criticizer / ARG1:entity scolded / ARG2:reason reviled [revile.xml]
   LexSem("V","revile",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("revile"),arg1,pp("for",arg2)))),

 'revise-01': # ARG0:causer of transformation / ARG1:thing changing / ARG2:end state / ARG3:start state [revise.xml]
   LexSem("V","revise",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("revise"),arg1,pp("to",arg2),pp("from",arg3)))),

 'revisit-01': # ARG0:visitor / ARG1:visited, issue [revisit.xml]
   LexSem("V","revisit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("revisit"),arg1))),

 'revitalize-01': # ARG0:giver of new life / ARG1:thing that was dead [revitalize.xml]
   LexSem("V","revitalize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("revitalize"),arg1))),

 'revive-01': # ARG0:The Reanimator / ARG1:thing or system being brought back / ARG2:location, owner or domain of the revived thing [revive.xml]
   LexSem("V","revive",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("revive"),arg1,arg2))),

 'revoke-01': # ARG0:revoker, agent / ARG1:entity revoked [revoke.xml]
   LexSem("V","revoke",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("revoke"),arg1))),

 'revolt-01': # ARG0:Revolting entity / ARG1:Revolted against [revolt.xml]
   LexSem("V","revolt",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("revolt"),pp("against",arg1)))),

 'revolt-02': # ARG0:Revolting entity / ARG1:Repulsed entity / ARG2:Instrument or Manner if separate from arg 0 [revolt.xml]
   LexSem("V","revolt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("revolt"),arg1,arg2))),

 'revolutionize-05': # ARG0:causer / ARG1:entity changed [revolt.xml]
   LexSem("V","revolutionize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("revolutionize"),arg1))),

 'revolve-06': # ARG1:entity revolving / ARG2:location [revolt.xml]
   LexSem("V","revolve",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("revolve"),pp("around",arg2)))),

 'reward-01': # ARG0:entity giving reward / ARG1:entity being given to / ARG2:because of what [reward.xml]
   LexSem("V","reward",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("reward"),arg1,pp("for",arg2)))),

 'rework-01': # ARG0:worker / ARG1:thing improved [rework.xml]
   LexSem("V","rework",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rework"),arg1))),

 'rewrite-01': # ARG0:writer / ARG1:thing written [rewrite.xml]
   LexSem("V","rewrite",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rewrite"),arg1))),

 'rhapsodize-01': # ARG0:experiencer of rhapsody / ARG1:cause of rhapsody [rhapsodize.xml]
   LexSem("V","rhapsodize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rhapsodize"),pp("about",arg1)))),

 'rhyme-01': # ARG0:agent, discoverer of rhyme / ARG1:first or all rhyming words / ARG2:additional, if syntactically separate [rhyme.xml]
   LexSem("V","rhyme",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rhyme"),arg1,pp("with",arg2)))),

 'rickshaw-01': # ARG0:agent, driver (transitive subject) / ARG1:thing moved (intransitive subject, transitive object) / ARG2:locations, or start point / ARG3:destination [rickshaw.xml]
   LexSem("V","rickshaw",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("rickshaw"),arg1,arg2,pp("to",arg3)))),

 'rid-01': # ARG0:entity removing / ARG1:thing being removed / ARG2:removed from [rid.xml]
   LexSem("V","rid",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rid"),pp("of",arg1),arg2))),

 'ridden-01': # ARG0:cause of full-ness / ARG1:affliction / ARG2:entity afflicted [ridden.xml]
   LexSem("V","ridden",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ridden"),arg1,arg2))),

 'riddle-01': # ARG0:causer of riddling / ARG1:entity riddled / ARG2:entity riddling Arg1 [riddle.xml]
   LexSem("V","riddle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("riddle"),arg1,pp("with",arg2)))),

 'ride-01': # ARG0:rider / ARG1:steed [ride.xml]
   LexSem("V","ride",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ride"),arg1))),

 'ride-out-02': # ARG0:rider / ARG1:the storm [ride.xml]
   LexSem("V","ride",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ride"),Adv("out"),arg1))),

 'ride-up-03': # ARG1:thing inching up, clothes / ARG2:thing that arg1 is inching up, body in ill-fitting clothes [ride.xml]
   LexSem("V","ride",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("ride"),Adv("up"),pp("over",arg2)))),

 'ridicule-01': # ARG0:ridiculer / ARG1:ridiculous thing / ARG2:cause of ridiculosity [ridicule.xml]
   LexSem("V","ridicule",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ridicule"),arg1,pp("for",arg2)))),

 'riff-01': # ARG0:so-called comedian / ARG1:victim [riff.xml]
   LexSem("V","riff",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("riff"),pp("on",arg1)))),

 'riffle-01': # ARG0:agent, causer / ARG1:theme, item(s) being ruffled [riffle.xml]
   LexSem("V","riffle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("riffle"),arg1))),

 'rifle-01': # ARG0:agent, thief, rifler / ARG1:where/through what/source / ARG2:in search of [rifle.xml]
   LexSem("V","rifle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rifle"),pp("through",arg1),arg2))),

 'rift-01': # ARG0:agent / ARG1:thing developing a fissure / ARG2:mention of the fissure / ARG3:thing separated from / ARG4:end state / ARG5:specific aspect of arg1 developing a rift [rift.xml]
   LexSem("V","rift",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg0,arg1,arg2,arg3,arg4,arg5:S(arg0,VP(V("rift"),pp("between",arg1),arg2,arg3,arg4,arg5))),

 'rig-01': # ARG0:manipulator, agent / ARG1:thing rigged [rig.xml]
   LexSem("V","rig",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rig"),arg1))),

 'rig-up-02': # ARG0:constructor / ARG1:thing rigged up [rig.xml]
   LexSem("V","rig",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rig"),Adv("up"),arg1))),

 'right-01': # ARG0:maker right / ARG1:thing that was wrong [right.xml]
   LexSem("V","right",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("right"),arg1))),

 'rightsize-01': # ARG0:agent, sizer / ARG1:thing that needs refitting / ARG2:attribute of arg1 [rightsize.xml]
   LexSem("V","right-size",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("right-size"),arg1,arg2))),

 'rile-01': # ARG0:Stimulus / ARG1:angry entity [rile.xml]
   LexSem("V","rile",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rile"),arg1))),

 'rim-01': # ARG0:causal agent / ARG1:thing on the rim / ARG2:the rim, thing enclosed [rim.xml]
   LexSem("V","rim",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rim"),arg1,arg2))),

 'rind-01': # ARG0:rinder, agent / ARG1:source, rinded from / ARG2:theme, rind itself (likely rare) [rind.xml]
   LexSem("V","rind",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rind"),arg1,arg2))),

 'ring-01': # ARG0:causer of ringing / ARG1:bell / ARG2:what the ringing signals/summons [ring.xml]
   LexSem("V","ring",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ring"),arg1,pp("for",arg2)))),

 'ring-02': # ARG0:causal agent / ARG1:surrounding entity / ARG2:surrounded entity [ring.xml]
   LexSem("V","ring",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ring"),arg1,arg2))),

 'ring-04': # ARG0:caller / ARG1:called [ring.xml]
   LexSem("V","ring",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ring"),arg1))),

 'ring-05': # ARG1:thing with truth / ARG2:'true' or other attribute [ring.xml]
   LexSem("V","ring",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("ring"),arg2))),

 'ring-up-03': # ARG0:recorder / ARG1:entity rung up [ring.xml]
   LexSem("V","ring",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ring"),Adv("up"),arg1))),

 'rinse-01': # ARG0:entity rinsing / ARG1:dirt; thing being removed to make clean / ARG2:thing being rinsed [rinse.xml]
   LexSem("V","rinse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rinse"),arg1,arg2))),

 'riot-01': # ARG0:rioter(s) / ARG1:who/what the riot is against [riot.xml]
   LexSem("V","riot",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("riot"),arg1))),

 'rip-01': # ARG0:ripper, agent / ARG1:entity ripped / ARG2:ripped from [rip.xml]
   LexSem("V","rip",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rip"),arg1,arg2))),

 'rip-02': # ARG1:entity moving [rip.xml]
   LexSem("V","rip",[":ARG1"],lambda arg1:S(arg1,VP(V("rip")))),

 'rip-06': # ARG0:ripper, agent of transfer / ARG1:thing ripped, transferred / ARG2:ripped-to, destination of data / ARG3:ripped-from, source of data [rip.xml]
   LexSem("V","rip",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("rip"),arg1,pp("to",arg2),arg3))),

 'rip-off-04': # ARG0:exploiter / ARG1:entity ripped off [rip.xml]
   LexSem("V","rip",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rip"),Adv("off"),arg1))),

 'rip-out-03': # ARG0:ripper / ARG1:entity ripped out [rip.xml]
   LexSem("V","rip",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rip"),Adv("out"),arg1))),

 'rip-up-05': # ARG0:remover / ARG1:thing removed [rip.xml]
   LexSem("V","rip",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rip"),Adv("up"),arg1))),

 'ripen-01': # ARG0:causer of ripening / ARG1:thing becoming ripe [ripen.xml]
   LexSem("V","ripen",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ripen"),arg1))),

 'ripple-01': # ARG0:causer / ARG1:entity rippling [ripple.xml]
   LexSem("V","ripple",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ripple"),arg1))),

 'rise-01': # ARG0:causer of inception/rising of arg1, likely to occur with light verb / ARG1:Logical subject, patient, thing rising / ARG2:EXT, amount risen / ARG3:start point / ARG4:end point [rise.xml]
   LexSem("V","rise",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("rise"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'rise-up-03': # ARG0:revolutionaries / ARG1:against what authority / ARG2:reason for revolt [rise.xml]
   LexSem("V","rise",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rise"),Adv("up"),pp("against",arg1),arg2))),

 'risk-01': # ARG0:entity risking something / ARG1:risky action undertaken / ARG2:thing in jeopardy, asset that could be lost, or negative outcome risked [risk.xml]
   LexSem("V","risk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("risk"),arg1,arg2))),

 'rissole-01': # ARG0:cook / ARG1:food [rissole.xml]
   LexSem("V","rissole",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rissole"),arg1))),

 'rival-01': # ARG0:competitor / ARG1:competing with / ARG2:competion goal [rival.xml]
   LexSem("V","rival",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rival"),arg1,pp("in",arg2)))),

 'rive-01': # ARG0:agent, destroyer, Shiva / ARG1:patient, thign destroyed [rive.xml]
   LexSem("V","rive",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rive"),arg1))),

 'rivet-01': # ARG0:cause of focussing / ARG1:entity riveted / ARG2:target of attention [rivet.xml]
   LexSem("V","rivet",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rivet"),arg1,arg2))),

 'roam-01': # ARG0:entity in motion / ARG1:range, wide area [roam.xml]
   LexSem("V","roam",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("roam"),arg1))),

 'roar-01': # ARG0:roarer / ARG1:utterance, roar itself / ARG2:listener [roar.xml]
   LexSem("V","roar",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("roar"),arg1,pp("at",arg2)))),

 'roar-02': # ARG0:entity in motion / ARG1:path [roar.xml]
   LexSem("V","roar",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("roar"),pp("into",arg1)))),

 'roast-01': # ARG0:roaster / ARG1:roasted [roast.xml]
   LexSem("V","roast",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("roast"),arg1))),

 'rob-01': # ARG0:robber, thief / ARG1:person robbed / ARG2:money or valuables, thing taken [rob.xml]
   LexSem("V","rob",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rob"),arg1,arg2))),

 'robe-01': # ARG0:person putting on clothes / ARG1:person wearing clothes / ARG2:attribute [robe.xml]
   LexSem("V","robe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("robe"),arg1,pp("in",arg2)))),

 'rock-01': # ARG0:causer of trembling motion / ARG1:thing trembling [rock.xml]
   LexSem("V","rock",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rock"),arg1))),

 'rock-03': # ARG0:rocker / ARG1:inspiration; rock on to what [rock.xml]
   LexSem("V","rock",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rock"),pp("to",arg1)))),

 'rock-on-02': # ARG0:rock star / ARG1:inspiration; rock on to what [rock.xml]
   LexSem("V","rock",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rock"),Adv("on"),pp("to",arg1)))),

 'rocket-01': # ARG1:Logical subject, patient, thing rising / ARG2:EXT, amount risen / ARG3:start point / ARG4:end point / ARG5:medium, attribute rocketing rather than whole patient [rocket.xml]
   LexSem("V","rocket",[":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg1,arg2,arg3,arg4,arg5:S(arg1,VP(V("rocket"),arg2,arg3,pp("to",arg4),arg5))),

 'roil-01': # ARG0:agent, disturber / ARG1:thing disturbed [roil.xml]
   LexSem("V","roil",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("roil"),arg1))),

 'roll-01': # ARG0:roller / ARG1:thing rolled or rolling / ARG2:secondary attribute of arg1, end state/location [roll.xml]
   LexSem("V","roll",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("roll"),arg1,arg2))),

 'roll-back-04': # ARG0:roller-backer / ARG1:thing being rolled back [roll.xml]
   LexSem("V","roll",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("roll"),Adv("back"),arg1))),

 'roll-out-02': # ARG0:introducer / ARG1:thing appearing [roll.xml]
   LexSem("V","roll",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("roll"),Adv("out"),arg1))),

 'roll-up-03': # ARG0:causer / ARG1:thing rolling up or being rolled up / ARG2:secondary attribute of arg1 [roll.xml]
   LexSem("V","roll",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("roll"),Adv("up"),arg1,pp("into",arg2)))),

 'romance-01': # ARG0:romancer / ARG1:romanced [romance.xml]
   LexSem("V","romance",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("romance"),arg1))),

 'romanticize-04': # ARG0:romantic fool / ARG1:romanticized thing [romance.xml]
   LexSem("V","romanticize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("romanticize"),arg1))),

 'romp-01': # ARG0:entity in motion / ARG1:path [romp.xml]
   LexSem("V","romp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("romp"),pp("through",arg1)))),

 'roof-01': # ARG0:Roofer / ARG1:House, structure being covered with roof / ARG2:Roof itself, what type of roof? [roof.xml]
   LexSem("V","roof",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("roof"),arg1,pp("with",arg2)))),

 'roost-01': # ARG0:bird [roost.xml]
   LexSem("V","roost",[":ARG0"],lambda arg0:S(arg0,VP(V("roost")))),

 'root-02': # ARG0:agent (rarely seen) / ARG1:thing having roots / ARG2:rooted in what [root.xml]
   LexSem("V","root",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("root"),arg1,pp("in",arg2)))),

 'root-03': # ARG0:fan / ARG1:rooted for [root.xml]
   LexSem("V","root",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("root"),pp("for",arg1)))),

 'root-out-01': # ARG0:searcher / ARG1:thing removed [root.xml]
   LexSem("V","root",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("root"),Adv("out"),arg1))),

 'rope-01': # ARG0:roper, agent / ARG1:first thing(s) roped / ARG2:roped to what, second thing roped (if separate from Arg1) / ARG3:instrument of roping (rope itself) [rope.xml]
   LexSem("V","rope",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("rope"),arg1,pp("to",arg2),arg3))),

 'rosin-01': # ARG0:agent, person covering / ARG1:location/entity covered in rosin / ARG2:rosin, type of rosin itself [rosin.xml]
   LexSem("V","rosin",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rosin"),arg1,pp("with",arg2)))),

 'rot-01': # ARG0:causer / ARG1:entity decaying [rot.xml]
   LexSem("V","rot",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rot"),arg1))),

 'rotate-01': # ARG0:causer of rotation / ARG1:thing rotating [rotate.xml]
   LexSem("V","rotate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rotate"),arg1))),

 'rotate-02': # ARG0:causer of shift / ARG1:thing being changed / ARG2:old thing / ARG3:new thing [rotate.xml]
   LexSem("V","rotate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("rotate"),arg1,arg2,pp("to",arg3)))),

 'rouge-01': # ARG0:agent, makeup artist / ARG1:Location/entity being covered in rouge / ARG2:Rouge itself, makeup type [rouge.xml]
   LexSem("V","rouge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rouge"),arg1,pp("with",arg2)))),

 'rough-in-03': # ARG0:artist / ARG1:figure [roughen.xml]
   LexSem("V","rough",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rough"),Adv("in"),arg1))),

 'rough-up-02': # ARG0:committer of violence / ARG1:victim [roughen.xml]
   LexSem("V","rough",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rough"),Adv("up"),arg1))),

 'roughen-01': # ARG0:agent, cause / ARG1:thing made rough / ARG2:instrument or method [roughen.xml]
   LexSem("V","roughen",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("roughen"),arg1,pp("with",arg2)))),

 'round-03': # ARG1:entity in motion / ARG2:path, direction, location [round.xml]
   LexSem("V","round",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("round"),arg2))),

 'round-04': # ARG0:person causing roundness / ARG1:thing rounded / ARG2:instrument used in rounding / ARG3:Resulting state, description of roundness [round.xml]
   LexSem("V","round",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("round"),arg1,arg2,pp("to",arg3)))),

 'round-out-01': # ARG0:bringer to completion / ARG1:thing complete [round.xml]
   LexSem("V","round",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("round"),Adv("out"),arg1))),

 'round-up-02': # ARG0:getter / ARG1:thing got(ten) [round.xml]
   LexSem("V","round",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("round"),Adv("up"),arg1))),

 'rouse-01': # ARG0:agent, causer / ARG1:patient [rouse.xml]
   LexSem("V","rouse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rouse"),arg1))),

 'roust-01': # ARG0:cause of disturbance / ARG1:thing or person disturbed / ARG2:disturbed from [roust.xml]
   LexSem("V","roust",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("roust"),arg1,arg2))),

 'rout-02': # ARG0:winner / ARG1:loser / ARG2:domain: game, battle [route.xml]
   LexSem("V","rout",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rout"),arg1,pp("at",arg2)))),

 'rout-03': # ARG0:woodworker / ARG1:design, theme / ARG2:wood/substance routed [route.xml]
   LexSem("V","rout",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rout"),arg1,pp("on",arg2)))),

 'route-01': # ARG0:sender / ARG1:thing sent / ARG2:destination [route.xml]
   LexSem("V","route",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("route"),arg1,pp("into",arg2)))),

 'rove-01': # ARG0:entity in motion / ARG1:range, wide area [rove.xml]
   LexSem("V","rove",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rove"),arg1))),

 'row-01': # ARG0:rower / ARG1:boat [row.xml]
   LexSem("V","row",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("row"),arg1))),

 'rub-01': # ARG0:rubber, agent / ARG1:thing rubbed, core argument / ARG2:destination, if separate from arg1 / ARG3:rubbed with, if separate from agent [rub.xml]
   LexSem("V","rub",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("rub"),arg1,pp("on",arg2),pp("with",arg3)))),

 'rubber_stamp-03': # ARG0:approver, agent / ARG1:thing rubber-stamped [stamp.xml]
   LexSem("V","rubber-stamp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rubber-stamp"),arg1))),

 'rubberize-01': # ARG0:agent, causer / ARG1:patient [rubberize.xml]
   LexSem("V","rubberize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rubberize"),arg1))),

 'rue-01': # ARG0:griever, agent / ARG1:entity mourning for [rue.xml]
   LexSem("V","rue",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rue"),arg1))),

 'ruffle-01': # ARG0:causer of consternation / ARG1:victim [ruffle.xml]
   LexSem("V","ruffle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ruffle"),arg1))),

 'ruffle-02': # ARG0:unsmoother / ARG1:unsmooth thing [ruffle.xml]
   LexSem("V","ruffle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ruffle"),arg1))),

 'ruin-01': # ARG0:ruiner / ARG1:ruined thing / ARG2:attribute of arg1 that is being ruined (if in addition to arg1) [ruin.xml]
   LexSem("V","ruin",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ruin"),arg1,arg2))),

 'rule-01': # ARG0:lawmaker, rule creator / ARG1:domain the rule applies to / ARG2:beneficiary (entities following the rule) / ARG3:specifics of the rule itself [rule.xml]
   LexSem("V","rule",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("rule"),pp("on",arg1),pp("in",arg2),pp("between",arg3)))),

 'rule-03': # ARG0:ruler, leader / ARG1:unwashed masses, minions [rule.xml]
   LexSem("V","rule",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rule"),pp("over",arg1)))),

 'rule-out-02': # ARG0:eliminator / ARG1:thing eliminated / ARG2:eliminated from (?) [rule.xml]
   LexSem("V","rule",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rule"),Adv("out"),arg1,arg2))),

 'rumba-01': # ARG0:agent, causer of rumba (transitive clauses only) / ARG1:rumba-er(s), theme (transitive object, intransitive subject) / ARG2:location of rumba-ing [rumba.xml]
   LexSem("V","rumba",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rumba"),arg1,pp("at",arg2)))),

 'rumble-01': # ARG0:entity rumbling / ARG1:sound/utterance / ARG2:hearer [rumble.xml]
   LexSem("V","rumble",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rumble"),arg1,pp("to",arg2)))),

 'ruminate-01': # ARG0:thinker / ARG1:topic, thing ruminated over [ruminate.xml]
   LexSem("V","ruminate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ruminate"),pp("about",arg1)))),

 'rummage-01': # ARG0:digger, delver / ARG1:dug/delved into/through [rummage.xml]
   LexSem("V","rummage",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rummage"),pp("through",arg1)))),

 'rumor-01': # ARG0:agent / ARG1:rumor [rumor.xml]
   LexSem("V","rumor",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rumor"),arg1))),

 'rumple-01': # ARG0:Causer of wrinkles / ARG1:Thing wrinkled [rumple.xml]
   LexSem("V","rumple",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rumple"),arg1))),

 'rumple-02': # ARG0:Ruffler / ARG1:Thing disturbed [rumple.xml]
   LexSem("V","rumple",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rumple"),arg1))),

 'run-01': # ARG0:operator / ARG1:machine, operation, procedure / ARG2:employer / ARG3:coworker / ARG4:instrumental [run.xml]
   LexSem("V","run",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("run"),arg1,arg2,arg3,arg4))),

 'run-02': # ARG0:runner / ARG1:course, race, distance / ARG2:opponent [run.xml]
   LexSem("V","run",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("run"),arg1,pp("against",arg2)))),

 'run-03': # ARG1:commodity / ARG2:price / ARG3:buyer [run.xml]
   LexSem("V","run",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("run"),arg2,arg3))),

 'run-04': # ARG0:agent (rare) / ARG1:logical subject, thing ranging / ARG2:EXT, distance run / ARG3:start point / ARG4:end point [run.xml]
   LexSem("V","run",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("run"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'run-07': # ARG0:encounterer / ARG1:thing encountered [run.xml]
   LexSem("V","run",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("run"),pp("into",arg1)))),

 'run-08': # ARG0:causer of motion / ARG1:entity in motion / ARG2:destination / ARG3:source [run.xml]
   LexSem("V","run",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("run"),arg1,pp("into",arg2),arg3))),

 'run-09': # ARG0:advertiser / ARG1:advertisement, series, etc / ARG2:medium [run.xml]
   LexSem("V","run",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("run"),arg1,pp("in",arg2)))),

 'run-10': # ARG0:runner, agent / ARG1:idiom; deficit, risk, etc. / ARG2:attribute of arg 1 [run.xml]
   LexSem("V","run",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("run"),arg1,arg2))),

 'run-13': # ARG0:instigator/ agent/ causer of run / ARG1:thing progressing / ARG2:time span / ARG3:secondary theme [run.xml]
   LexSem("V","run",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("run"),arg1,arg2,arg3))),

 'run-23': # ARG0:agent / ARG1:information checked / ARG2:database run against [run.xml]
   LexSem("V","run",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("run"),arg1,pp("against",arg2)))),

 'run-down-11': # ARG0:agent/cause of tiredness / ARG1:entity becoming tired [run.xml]
   LexSem("V","run",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("run"),Adv("down"),arg1))),

 'run-off-24': # ARG0:runaway / ARG1:thing taken / ARG2:destination / ARG3:entity accompanied [run.xml]
   LexSem("V","run",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("run"),Adv("off"),pp("with",arg1),pp("to",arg2),pp("with",arg3)))),

 'run-out-05': # ARG1:commodity / ARG2:benefactive [run.xml]
   LexSem("V","run",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("run"),Adv("out"),arg2))),

 'run-over-12': # ARG0:agent, driver / ARG1:victim, smashed thing / ARG2:vehicle [run.xml]
   LexSem("V","run",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("run"),Adv("over"),arg1,arg2))),

 'run-up-06': # ARG0:entity accumulating something / ARG1:thing/stuff accumulated [run.xml]
   LexSem("V","run",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("run"),Adv("up"),arg1))),

 'rupture-01': # ARG0:causer of breakage / ARG1:container [rupture.xml]
   LexSem("V","rupture",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rupture"),arg1))),

 'rush-01': # ARG0:causer of motion / ARG1:entity in motion / ARG2:path or secondary action of arg1 [rush.xml]
   LexSem("V","rush",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rush"),arg1,pp("to",arg2)))),

 'rust-01': # ARG0:agent/causer of rust / ARG1:rusty thing [rust.xml]
   LexSem("V","rust",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rust"),arg1))),

 'rusticate-01': # ARG0:rusticator / ARG1:thing rusticated [rusticate.xml]
   LexSem("V","rusticate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rusticate"),arg1))),

 'rustle-01': # ARG1:emitter of noise [rustle.xml]
   LexSem("V","rustle",[":ARG1"],lambda arg1:S(arg1,VP(V("rustle")))),

 'rustle-02': # ARG0:thief / ARG1:livestock, usually [rustle.xml]
   LexSem("V","rustle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("rustle"),arg1))),

 'rut-01': # ARG0:agent, maker of ruts / ARG1:location/entity rutted / ARG2:rut itself, type of rut [rut.xml]
   LexSem("V","rut",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("rut"),arg1,pp("with",arg2)))),

 'sabotage-01': # ARG0:saboteur / ARG1:thing wrecked / ARG2:instrument [sabotage.xml]
   LexSem("V","sabotage",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sabotage"),arg1,arg2))),

 'sack-01': # ARG0:employer, conquerer / ARG1:former employee, conquered entity [sack.xml]
   LexSem("V","sack",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sack"),arg1))),

 'sacrifice-01': # ARG0:sacrificer / ARG1:thing sacrificed / ARG2:thing sacrificed to [sacrifice.xml]
   LexSem("V","sacrifice",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sacrifice"),arg1,pp("to",arg2)))),

 'sadden-01': # ARG0:causer of sadness / ARG1:saddened entity / ARG2:instrument [sadden.xml]
   LexSem("V","sadden",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sadden"),arg1,arg2))),

 'saddle-01': # ARG0:saddler / ARG1:entity saddled / ARG2:burden [saddle.xml]
   LexSem("V","saddle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("saddle"),arg1,pp("with",arg2)))),

 'safeguard-01': # ARG0:protector / ARG1:entity protected / ARG2:entity protected from [safeguard.xml]
   LexSem("V","safeguard",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("safeguard"),arg1,pp("from",arg2)))),

 'sag-01': # ARG0:cause of sagging / ARG1:thing sagging / ARG2:EXT / ARG3:start point / ARG4:end point [sag.xml]
   LexSem("V","sag",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("sag"),arg1,arg2,arg3,arg4))),

 'sail-01': # ARG0:entity sailing / ARG1:vessel [sail.xml]
   LexSem("V","sail",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sail"),arg1))),

 'salaam-01': # ARG0:salaamer(s), agent / ARG1:other salaamer(s), salaamee (*tee-hee*) / ARG2:thing salaamed (e.g., "their welcome", "their assent"), theme [salaam.xml]
   LexSem("V","salaam",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("salaam"),arg1,arg2))),

 'sale-05': # ARG0:seller / ARG1:thing sold / ARG2:buyer, sold to whom / ARG3:price paid / ARG4:benefactive [sell.xml]
   LexSem("V","sale",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("sale"),arg1,arg2,arg3,arg4))),

 'salivate-01': # ARG0:entity experiencing salivation / ARG1:cause of salivation [salivate.xml]
   LexSem("V","salivate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("salivate"),pp("in",arg1)))),

 'salt-01': # ARG0:applier / ARG1:thing getting saltier / ARG2:explicit mention of salt itself [salt.xml]
   LexSem("V","salt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("salt"),arg1,pp("with",arg2)))),

 'salt-away-02': # ARG0:storer / ARG1:thing stored [salt.xml]
   LexSem("V","salt",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("salt"),Adv("away"),arg1))),

 'salute-01': # ARG0:saluter / ARG1:entity saluted / ARG2:attribute of arg1 [salute.xml]
   LexSem("V","salute",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("salute"),arg1,pp("as",arg2)))),

 'salvage-01': # ARG0:saver, salvager / ARG1:entity salvaged / ARG2:entity salvaged from [salvage.xml]
   LexSem("V","salvage",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("salvage"),arg1,pp("from",arg2)))),

 'salve-01': # ARG0:salve, thing that makes the pain go away / ARG1:hurt, injury [salve.xml]
   LexSem("V","salve",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("salve"),arg1))),

 'samba-01': # ARG0:causer of samba-ing (transitive uses only) / ARG1:person(s) doing the samba (intransitive subject, transitive object) / ARG2:location or path of samba-ing [samba.xml]
   LexSem("V","samba",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("samba"),arg1,pp("in",arg2)))),

 'sample-01': # ARG0:sampler / ARG1:thing sampled / ARG2:source of the samples (if in addition to arg1) [sample.xml]
   LexSem("V","sample",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sample"),arg1,arg2))),

 'sanctify-01': # ARG0:agent, sanctifier, holy person / ARG1:thing sanctified, made holy [sanctify.xml]
   LexSem("V","sanctify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sanctify"),arg1))),

 'sanction-01': # ARG0:approver, agent / ARG1:entity approved [sanction.xml]
   LexSem("V","sanction",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sanction"),arg1))),

 'sanction-02': # ARG0:entity enforcing sanctions / ARG1:entity being punished / ARG2:sanctions, manner of punishment [sanction.xml]
   LexSem("V","sanction",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sanction"),arg1,arg2))),

 'sand-01': # ARG0:handyman, agent / ARG1:location/entity made smooth / ARG2:sandpaper, entity used to sand arg1 [sand.xml]
   LexSem("V","sand",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sand"),arg1,pp("with",arg2)))),

 'sandpaper-01': # ARG0:sandpaperer, agent / ARG1:surface sandpapered, theme / ARG2:location/source of sandpapering / ARG3:instrument (defaults to 'sandpaper') [sandpaper.xml]
   LexSem("V","sandpaper",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("sandpaper"),arg1,arg2,arg3))),

 'sandwich-01': # ARG0:sandwich builder / ARG1:lunch meat (eg) / ARG2:bread (eg) [sandwich.xml]
   LexSem("V","sandwich",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sandwich"),arg1,pp("between",arg2)))),

 'sanitize-01': # ARG0:cleaner, agent / ARG1:thing made clean [sanitize.xml]
   LexSem("V","sanitize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sanitize"),arg1))),

 'sap-01': # ARG0:remover / ARG1:resources / ARG2:source [sap.xml]
   LexSem("V","sap",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sap"),arg1,arg2))),

 'saponify-01': # ARG0:soap-maker, agent / ARG1:entity being converted to soap / ARG2:Instrument or Manner if separate from arg 0 / ARG3:Soap, result [saponify.xml]
   LexSem("V","saponify",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("saponify"),arg1,pp("by",arg2),pp("into",arg3)))),

 'sashay-01': # ARG1:entity sashaying / ARG2:path / ARG3:start point / ARG4:end point [sashay.xml]
   LexSem("V","sashay",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("sashay"),arg2,arg3,arg4))),

 'satellite-01': # ARG0:sender, satelliter, agent / ARG1:entity sent, faxed, satellited / ARG2:sent to, recipient [satellite.xml]
   LexSem("V","satellite",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("satellite"),arg1,pp("to",arg2)))),

 'satiate-01': # ARG0:Cause of satisfaction / ARG1:patient, entity pleased / ARG2:instrument or manner if separate from arg 0 [satiate.xml]
   LexSem("V","satiate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("satiate"),arg1,arg2))),

 'satirize-01': # ARG0:satirizer / ARG1:satirized / ARG2:satire [satirize.xml]
   LexSem("V","satirize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("satirize"),arg1,pp("with",arg2)))),

 'satisfy-01': # ARG0:agent, pleaser, fulfiller / ARG1:patient, entity pleased/fulfilled / ARG2:method/instrumental [satisfy.xml]
   LexSem("V","satisfy",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("satisfy"),arg1,arg2))),

 'satisfy-02': # ARG0:convincer / ARG1:convinced / ARG2:proposition [satisfy.xml]
   LexSem("V","satisfy",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("satisfy"),arg1,arg2))),

 'saturate-01': # ARG0:agent of filling, volitional filler / ARG1:container / ARG2:substance [saturate.xml]
   LexSem("V","saturate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("saturate"),arg1,pp("with",arg2)))),

 'sauce-01': # ARG0:Chef / ARG1:Base food / ARG2:Sauce or topping [sauce.xml]
   LexSem("V","sauce",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sauce"),arg1,pp("in",arg2)))),

 'sauce-02': # ARG0:Impudent one / ARG1:recipient of impudence [sauce.xml]
   LexSem("V","sauce",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sauce"),arg1))),

 'saunter-01': # ARG1:entity sauntering / ARG2:start point / ARG3:end point / ARG4:path [saunter.xml]
   LexSem("V","saunter",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("saunter"),arg2,arg3,pp("around",arg4)))),

 'saute-01': # ARG0:cook / ARG1:food [saute.xml]
   LexSem("V","saute",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("saute"),arg1))),

 'save-01': # ARG0:entity saving money, cause of savings, not necessarily recipient! / ARG1:money / ARG2:beneficiary / ARG3:cause, reason, instrument/manner of savings [save.xml]
   LexSem("V","save",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("save"),arg1,arg2,arg3))),

 'save-02': # ARG0:hero / ARG1:victim / ARG2:peril [save.xml]
   LexSem("V","save",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("save"),arg1,arg2))),

 'save-03': # ARG0:collector / ARG1:thing saved, collected / ARG2:purpose [save.xml]
   LexSem("V","save",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("save"),arg1,pp("for",arg2)))),

 'save-up-04': # ARG0:collector / ARG1:thing saved, collected / ARG2:purpose [save.xml]
   LexSem("V","save",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("save"),Adv("up"),arg1,pp("for",arg2)))),

 'savor-01': # ARG0:taster, enjoyer / ARG1:entity savored [savor.xml]
   LexSem("V","savor",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("savor"),arg1))),

 'savvy-01': # ARG0:knower / ARG1:thing known or thought / ARG2:attribute of arg1 [savvy.xml]
   LexSem("V","savvy",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("savvy"),arg1,arg2))),

 'saw-04': # ARG0:cutter / ARG1:thing cut / ARG2:Cut from what? source [saw.xml]
   LexSem("V","saw",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("saw"),arg1,pp("off",arg2)))),

 'saw-up-03': # ARG0:sawer / ARG1:sawed / ARG2:instrument [saw.xml]
   LexSem("V","saw",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("saw"),Adv("up"),arg1,arg2))),

 'say-01': # ARG0:Sayer / ARG1:Utterance / ARG2:Hearer / ARG3:Attributive [say.xml]
   LexSem("V","say",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("say"),arg1,pp("to",arg2),pp("of",arg3)))),

 'say-02': #  [say.xml]
   LexSem("V","say",[],lambda :S(VP(V("say")))),

 'scald-01': # ARG0:agent, scalder / ARG1:patient, thing scalded / ARG2:instrument (i.e. hot water, oil, latex) [scald.xml]
   LexSem("V","scald",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scald"),arg1,pp("with",arg2)))),

 'scale-01': # ARG0:agent, entity causing change in size / ARG1:thing changing size / ARG2:EXT, amount changed by / ARG3:start point / ARG4:end point / ARG5:direction, up or back [scale.xml]
   LexSem("V","scale",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg0,arg1,arg2,arg3,arg4,arg5:S(arg0,VP(V("scale"),arg1,arg2,pp("from",arg3),pp("to",arg4),arg5))),

 'scale-02': # ARG0:remover / ARG1:fish / ARG2:instrument [scale.xml]
   LexSem("V","scale",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scale"),arg1,pp("with",arg2)))),

 'scale-03': # ARG0:climber / ARG1:cliff [scale.xml]
   LexSem("V","scale",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scale"),arg1))),

 'scale-04': # ARG0:cause of skin change / ARG1:thing becoming scaly [scale.xml]
   LexSem("V","scale",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scale"),pp("of",arg1)))),

 'scallop-01': # ARG0:causer of scalloping / ARG1:scalloped entity [scallop.xml]
   LexSem("V","scallop",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scallop"),arg1))),

 'scalp-01': # ARG0:scalper, agent / ARG1:scalped from what/whom, source / ARG2:thing removed/scalped, theme [scalp.xml]
   LexSem("V","scalp",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scalp"),arg1,arg2))),

 'scalp-02': # ARG0:seller / ARG1:thing sold / ARG2:buyer / ARG3:price paid / ARG4:benefactive [scalp.xml]
   LexSem("V","scalp",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("scalp"),arg1,arg2,pp("for",arg3),arg4))),

 'scam-01': # ARG0:scammer / ARG1:person, entity scammed / ARG2:thing stolen, scammed-out of arg1 source / ARG3:action arg1 is scammed, fooled into doing [scam.xml]
   LexSem("V","scam",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("scam"),arg1,arg2,pp("into",arg3)))),

 'scamper-01': # ARG0:entity in motion [scamper.xml]
   LexSem("V","scamper",[":ARG0"],lambda arg0:S(arg0,VP(V("scamper")))),

 'scan-01': # ARG0:looker, examiner / ARG1:thing examined / ARG2:examined for [scan.xml]
   LexSem("V","scan",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scan"),arg1,pp("for",arg2)))),

 'scan-02': # ARG0:Human doing the scanning / ARG1:document or entity scanned / ARG2:computer; scanned into [scan.xml]
   LexSem("V","scan",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scan"),arg1,pp("into",arg2)))),

 'scandalize-01': # ARG0:scandalizer / ARG1:person scandalized / ARG2:instrument [scandalize.xml]
   LexSem("V","scandalize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scandalize"),arg1,pp("by",arg2)))),

 'scant-01': # ARG0:cause or skimper / ARG1:thing skimped on [scant.xml]
   LexSem("V","scant",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scant"),arg1))),

 'scapegoat-01': # ARG0:agent, blamer making a scapegoat of someone/thing / ARG1:entity made a scapegoat / ARG2:arg 1 is blamed for what? [scapegoat.xml]
   LexSem("V","scape",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scape"),arg1,pp("for",arg2)))),

 'scar-01': # ARG0:agent / ARG1:entity mutilated [scar.xml]
   LexSem("V","scar",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scar"),arg1))),

 'scare-01': # ARG0:scary entity / ARG1:scared entity / ARG2:instrument (if separate from arg0) / ARG3:intensifier, extent [scare.xml]
   LexSem("V","scare",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("scare"),arg1,pp("with",arg2),arg3))),

 'scare-02': # ARG0:intentional agent of scaring / ARG1:scared entity / ARG2:instrument / ARG3:direction or resulting action [scare.xml]
   LexSem("V","scare",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("scare"),arg1,arg2,pp("off",arg3)))),

 'scarf-01': # ARG0:eater / ARG1:entity scarfed [scarf.xml]
   LexSem("V","scarf",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scarf"),arg1))),

 'scarify-01': # ARG0:Scratcher / ARG1:Thing punctured [scarify.xml]
   LexSem("V","scarify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scarify"),arg1))),

 'scatter-01': # ARG0:distributor / ARG1:thing distributed / ARG2:distributed to, area [scatter.xml]
   LexSem("V","scatter",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scatter"),arg1,pp("across",arg2)))),

 'scavenge-01': # ARG0:searcher / ARG1:Area scavenged / ARG2:searched for [scavenge.xml]
   LexSem("V","scavenge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scavenge"),arg1,pp("for",arg2)))),

 'scent-01': # ARG0:agent, causer / ARG1:thing scented / ARG2:substance, scent [scent.xml]
   LexSem("V","scent",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scent"),arg1,pp("with",arg2)))),

 'scent-02': # ARG0:entity doing the smelling / ARG1:the scent / ARG2:air or environment carrying the scent [scent.xml]
   LexSem("V","scent",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scent"),arg1,arg2))),

 'scent-out-03': # ARG0:entity doing the smelling / ARG1:thing found by its scent / ARG2:source leading to the discovery of Arg 1 [scent.xml]
   LexSem("V","scent",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scent"),Adv("out"),arg1,arg2))),

 'schedule-01': # ARG0:planner / ARG1:thing scheduled / ARG2:scheduled to, for or because of; 2nd part of event / ARG3:time of event [schedule.xml]
   LexSem("V","schedule",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("schedule"),arg1,pp("to",arg2),arg3))),

 'scheme-01': # ARG0:schemer / ARG1:job, project / ARG2:co-schemer [scheme.xml]
   LexSem("V","scheme",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scheme"),pp("to",arg1),pp("with",arg2)))),

 'schlep-01': # ARG0:schlepper, agent / ARG1:thing(s) schlepped, theme / ARG2:schlepped from where, source / ARG3:schlepped to where, destination [schlep.xml]
   LexSem("V","schlep",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("schlep"),arg1,arg2,pp("to",arg3)))),

 'schmooze-01': # ARG0:schmoozer(s) / ARG1:other schmoozers (if separate from Arg0), schmoozed-with / ARG2:schmoozed about what [schmooze.xml]
   LexSem("V","schmooze",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("schmooze"),pp("with",arg1),arg2))),

 'school-01': # ARG0:teacher / ARG1:student / ARG2:topic, subject [school.xml]
   LexSem("V","school",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("school"),arg1,pp("in",arg2)))),

 'scintillate-01': # ARG0:causer of scintillation, agent (transitive clauses only) / ARG1:thing scintillating, theme (intranstiive subject, transitive object) / ARG2:location of scintillation [scintillate.xml]
   LexSem("V","scintillate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scintillate"),arg1,pp("among",arg2)))),

 'sclerose-101': # ARG0:Causer of sclerosis / ARG1:Tissue sclerosing [sclerose.xml]
   LexSem("V","sclerose",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sclerose"),arg1))),

 'scoff-01': # ARG0:dismisser / ARG1:entity scoffed at [scoff.xml]
   LexSem("V","scoff",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scoff"),pp("at",arg1)))),

 'scold-01': # ARG0:criticizer / ARG1:entity scolded / ARG2:entity scolded on/for [scold.xml]
   LexSem("V","scold",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scold"),arg1,pp("on",arg2)))),

 'scollop-01': # ARG0:carver / ARG1:thing cut or shaped [scollop.xml]
   LexSem("V","scollop",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scollop"),arg1))),

 'scollop-02': # ARG0:fisherman [scollop.xml]
   LexSem("V","scollop",[":ARG0"],lambda arg0:S(arg0,VP(V("scollop")))),

 'scoop-01': # ARG0:scooper / ARG1:thing scooped / ARG2:scooped into [scoop.xml]
   LexSem("V","scoop",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scoop"),arg1,pp("into",arg2)))),

 'scoop-up-02': # ARG0:acquirer / ARG1:thing scooped [scoop.xml]
   LexSem("V","scoop",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scoop"),Adv("up"),arg1))),

 'scoot-01': # ARG0:causal agent / ARG1:entity being scooted / ARG2:path / ARG3:destination [scoot.xml]
   LexSem("V","scoot",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("scoot"),arg1,arg2,pp("into",arg3)))),

 'scope-101': # ARG0:Examiner / ARG1:Examined / ARG2:Thing examined for [scope.xml]
   LexSem("V","scope",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scope"),arg1,pp("for",arg2)))),

 'scorch-01': # ARG0:fire / ARG1:thing burning [scorch.xml]
   LexSem("V","scorch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scorch"),arg1))),

 'score-01': # ARG0:grader, judge, entity awarding the points / ARG1:entity earning points / ARG2:the points/score / ARG3:domain / ARG4:opponent [score.xml]
   LexSem("V","score",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("score"),arg1,arg2,pp("in",arg3),pp("against",arg4)))),

 'score-02': # ARG0:musical composer / ARG1:piece of music / ARG2:for what, ensemble [score.xml]
   LexSem("V","score",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("score"),arg1,pp("for",arg2)))),

 'scorn-01': # ARG0:scorner / ARG1:thing scorned [scorn.xml]
   LexSem("V","scorn",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scorn"),arg1))),

 'scotch-01': # ARG0:ruiner, ruler out / ARG1:ruined, ruled out [scotch.xml]
   LexSem("V","scotch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scotch"),arg1))),

 'scour-01': # ARG0:cleaner / ARG1:thing being cleaned / ARG2:instrument (ie abrasive) [scour.xml]
   LexSem("V","scour",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scour"),arg1,pp("with",arg2)))),

 'scour-02': # ARG0:searcher / ARG1:locale searched / ARG2:thing searched for [scour.xml]
   LexSem("V","scour",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scour"),arg1,pp("for",arg2)))),

 'scout-02': # ARG0:The scout / ARG1:locale scouted / ARG2:thing looked for [scout.xml]
   LexSem("V","scout",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scout"),arg1,pp("for",arg2)))),

 'scout-out-01': # ARG0:searcher / ARG1:searched for [scout.xml]
   LexSem("V","scout",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scout"),Adv("out"),arg1))),

 'scowl-01': # ARG0:scowler / ARG1:cognate object (very rare) / ARG2:reason [scowl.xml]
   LexSem("V","scowl",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scowl"),arg1,pp("at",arg2)))),

 'scrabble-01': # ARG0:scrabbler / ARG1:scrabbled in/through / ARG2:scrabbled for [scrabble.xml]
   LexSem("V","scrabble",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scrabble"),arg1,pp("for",arg2)))),

 'scram-01': # ARG1:entity scramming / ARG2:start point / ARG3:end point / ARG4:path [scram.xml]
   LexSem("V","scram",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("scram"),arg2,arg3,arg4))),

 'scramble-01': # ARG0:attempter / ARG1:thing attempted [scramble.xml]
   LexSem("V","scramble",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scramble"),pp("to",arg1)))),

 'scramble-02': # ARG0:scrambler / ARG1:thing being randomized, mixed / ARG3:benefactive [scramble.xml]
   LexSem("V","scramble",[":ARG0",":ARG1",":ARG3"],lambda arg0,arg1,arg3:S(arg0,VP(V("scramble"),arg1,pp("for",arg3)))),

 'scramble-03': # ARG0:runner [scramble.xml]
   LexSem("V","scramble",[":ARG0"],lambda arg0:S(arg0,VP(V("scramble")))),

 'scrap-01': # ARG0:scrapper / ARG1:garbage [scrap.xml]
   LexSem("V","scrap",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scrap"),arg1))),

 'scrap-02': # ARG0:one fighter / ARG1:the other [scrap.xml]
   LexSem("V","scrap",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scrap"),pp("with",arg1)))),

 'scrape-01': # ARG0:agent, scraper / ARG1:thing removed / ARG2:source / ARG3:instrument [scrape.xml]
   LexSem("V","scrape",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("scrape"),arg1,pp("from",arg2),pp("with",arg3)))),

 'scrape-02': # ARG0:collector / ARG1:thing collected / ARG2:quasi-phrasal attribute of arg1 / ARG3:source [scrape.xml]
   LexSem("V","scrape",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("scrape"),arg1,arg2,pp("from",arg3)))),

 'scrape-03': # ARG0:entity just getting by / ARG1:path, thing just barely accomplished [scrape.xml]
   LexSem("V","scrape",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scrape"),pp("through",arg1)))),

 'scratch-02': # ARG0:cutter / ARG1:thing cut / ARG2:medium, source / ARG3:instrument [scratch.xml]
   LexSem("V","scratch",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("scratch"),arg1,pp("off",arg2),pp("with",arg3)))),

 'scratch-04': # ARG0:searcher, scratcher / ARG1:searched for [scratch.xml]
   LexSem("V","scratch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scratch"),pp("for",arg1)))),

 'scratch-out-01': # ARG0:squeezer / ARG1:extracted material (ie life) / ARG2:source (ie, stony ground) [scratch.xml]
   LexSem("V","scratch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scratch"),Adv("out"),arg1,pp("from",arg2)))),

 'scratch-out-03': # ARG0:writer / ARG1:thing written / ARG2:benefactive [scratch.xml]
   LexSem("V","scratch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scratch"),Adv("out"),arg1,pp("for",arg2)))),

 'scrawk-01': # ARG0:scrawk [scrawk.xml]
   LexSem("V","scrawk",[":ARG0"],lambda arg0:S(arg0,VP(V("scrawk")))),

 'scrawl-01': # ARG0:writer / ARG1:thing written / ARG2:surface [scrawl.xml]
   LexSem("V","scrawl",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scrawl"),arg1,pp("across",arg2)))),

 'scrawl-out-02': # ARG0:writer / ARG1:thing written [scrawl.xml]
   LexSem("V","scrawl",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scrawl"),Adv("out"),arg1))),

 'scream-01': # ARG0:screamer / ARG1:the scream / ARG2:hearer / ARG3:reason (cause) for screaming [scream.xml]
   LexSem("V","scream",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("scream"),arg1,pp("in",arg2),pp("of",arg3)))),

 'screech-01': # ARG0:causer / ARG1:thing screeching [screech.xml]
   LexSem("V","screech",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("screech"),arg1))),

 'screech-02': # ARG0:agent / ARG1:thing stopping / ARG2:explicit mention of stop [screech.xml]
   LexSem("V","screech",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("screech"),arg1,pp("to",arg2)))),

 'screech-03': # ARG0:screechy speaker / ARG1:Utterance / ARG2:Hearer [screech.xml]
   LexSem("V","screech",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("screech"),arg1,pp("to",arg2)))),

 'screen-01': # ARG0:tester, examiner / ARG1:entity screened / ARG2:screened for [screen.xml]
   LexSem("V","screen",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("screen"),arg1,pp("for",arg2)))),

 'screen-03': # ARG0:agent / ARG1:movie [screen.xml]
   LexSem("V","screen",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("screen"),arg1))),

 'screen-out-02': # ARG0:filterer / ARG1:entity screened / ARG2:screened for [screen.xml]
   LexSem("V","screen",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("screen"),Adv("out"),arg1,arg2))),

 'screw-02': # ARG0:Screwer / ARG1:Screwed [screw.xml]
   LexSem("V","screw",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("screw"),arg1))),

 'screw-04': # ARG0:agent / ARG1:screw, entity attached / ARG2:attached to [screw.xml]
   LexSem("V","screw",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("screw"),arg1,pp("on",arg2)))),

 'screw-over-05': # ARG0:cheater / ARG1:cheated [screw.xml]
   LexSem("V","screw",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("screw"),Adv("over"),arg1))),

 'screw-up-01': # ARG0:causer/agent / ARG1:thing screwed up [screw.xml]
   LexSem("V","screw",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("screw"),Adv("up"),arg1))),

 'scribble-01': # ARG0:scribbler / ARG1:thing scribbled / ARG2:benefactive [scribble.xml]
   LexSem("V","scribble",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scribble"),arg1,arg2))),

 'scrimp-01': # ARG0:scrimper, agent / ARG1:thing being cut [scrimp.xml]
   LexSem("V","scrimp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scrimp"),pp("on",arg1)))),

 'script-01': # ARG0:writer / ARG1:thing written / ARG2:benefactive / ARG3:attribute of arg 1 [script.xml]
   LexSem("V","script",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("script"),arg1,arg2,arg3))),

 'scriptwrite-01': # ARG0:writer / ARG1:thing written / ARG2:benefactive [scriptwrite.xml]
   LexSem("V","scriptwrite",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scriptwrite"),arg1,arg2))),

 'scroll-01': # ARG0:agent, mover of mouse / ARG1:text, page scrolled through [scroll.xml]
   LexSem("V","scroll",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scroll"),arg1))),

 'scrounge-01': # ARG0:scrounger, agent / ARG1:thing obtained [scrounge.xml]
   LexSem("V","scrounge",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scrounge"),arg1))),

 'scrub-01': # ARG0:cleaner, scrubber / ARG1:was dirty, now clean [scrub.xml]
   LexSem("V","scrub",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scrub"),arg1))),

 'scrub-up-02': # ARG0:scrubber / ARG1:was dirty, now clean [scrub.xml]
   LexSem("V","scrub",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scrub"),Adv("up"),arg1))),

 'scrunch-up-01': # ARG0:causer of damage / ARG1:thing crumpled [scrunch.xml]
   LexSem("V","scrunch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scrunch"),Adv("up"),arg1))),

 'scruple-01': # ARG0:hesitator / ARG1:hesitating over [scruple.xml]
   LexSem("V","scruple",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scruple"),pp("to",arg1)))),

 'scrutinize-01': # ARG0:examiner / ARG1:examined / ARG2:examined for [scrutinize.xml]
   LexSem("V","scrutinize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scrutinize"),arg1,pp("for",arg2)))),

 'scud-01': # ARG0:thing in motion / ARG1:path, location [scud.xml]
   LexSem("V","scud",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scud"),arg1))),

 'scuff-01': # ARG0:entity in motion / ARG1:path [scuff.xml]
   LexSem("V","scuff",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("scuff"),pp("through",arg1)))),

 'scuffle-01': # ARG0:first fighter / ARG1:second fighter, if separate / ARG2:spoils [scuffle.xml]
   LexSem("V","scuffle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scuffle"),pp("with",arg1),pp("over",arg2)))),

 'sculpt-01': # ARG0:sculptor / ARG1:sculpture / ARG2:material, start state / ARG4:end state [sculpt.xml]
   LexSem("V","sculpt",[":ARG0",":ARG1",":ARG2",":ARG4"],lambda arg0,arg1,arg2,arg4:S(arg0,VP(V("sculpt"),arg1,arg2,arg4))),

 'sculpture-01': # ARG0:sculptor, agent / ARG1:sculpted into what, product / ARG2:sculpted with what, material / ARG3:sculpted for whom, beneficiary / ARG4:price paid for sculpture, asset (e.g., for $100) [sculpture.xml]
   LexSem("V","sculpture",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("sculpture"),arg1,arg2,arg3,arg4))),

 'scurry-01': # ARG0:entity in motion [scurry.xml]
   LexSem("V","scurry",[":ARG0"],lambda arg0:S(arg0,VP(V("scurry")))),

 'scutter-01': # ARG1:entity moved, scutterer / ARG2:path / ARG3:start point / ARG4:end point [scutter.xml]
   LexSem("V","scutter",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("scutter"),arg2,arg3,pp("towards",arg4)))),

 'scuttle-01': # ARG0:sinker / ARG1:thing sinking / ARG2:instrument [scuttle.xml]
   LexSem("V","scuttle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("scuttle"),arg1,pp("by",arg2)))),

 'scuttle-02': # ARG0:scuttler [scuttle.xml]
   LexSem("V","scuttle",[":ARG0"],lambda arg0:S(arg0,VP(V("scuttle")))),

 'seal-01': # ARG0:agent, causer / ARG1:entity sealed [seal.xml]
   LexSem("V","seal",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("seal"),arg1))),

 'seal-off-02': # ARG0:causer of separation, sealing / ARG1:focused entity sealed off / ARG2:entity arg1 is sealed off from / ARG3:seal itself, instrument [seal.xml]
   LexSem("V","seal",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("seal"),Adv("off"),arg1,pp("from",arg2),arg3))),

 'sear-01': # ARG0:cook / ARG1:food / ARG2:instrument [sear.xml]
   LexSem("V","sear",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sear"),arg1,pp("with",arg2)))),

 'search-01': # ARG0:searcher / ARG1:Area searched / ARG2:searched for [search.xml]
   LexSem("V","search",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("search"),arg1,pp("for",arg2)))),

 'season-01': # ARG0:causer of seasoning / ARG1:entity becoming seasoned / ARG2:instrument, if agent is also present [season.xml]
   LexSem("V","season",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("season"),arg1,pp("with",arg2)))),

 'seat-01': # ARG0:placer, provider of seat / ARG1:entity seated / ARG2:location [seat.xml]
   LexSem("V","seat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("seat"),arg1,arg2))),

 'seat-02': # ARG0:agent / ARG1:entity seated [seat.xml]
   LexSem("V","seat",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("seat"),arg1))),

 'secede-01': # ARG0:ex-member / ARG1:organization [secede.xml]
   LexSem("V","secede",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("secede"),pp("from",arg1)))),

 'seclude-01': # ARG0:secluder, agent / ARG1:thing hidden, secluded, patient / ARG2:hidden from [seclude.xml]
   LexSem("V","seclude",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("seclude"),arg1,pp("from",arg2)))),

 'second-01': # ARG0:approver / ARG1:thing approved / ARG2:secondary attribute [second.xml]
   LexSem("V","second",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("second"),arg1,arg2))),

 'secondguess-01': # ARG0:critic / ARG1:criticized [secondguess.xml]
   LexSem("V","second-guess",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("second-guess"),arg1))),

 'secrete-01': # ARG0:secreting entity / ARG1:secretion [secrete.xml]
   LexSem("V","secrete",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("secrete"),arg1))),

 'section-01': # ARG0:entity dividing, agent / ARG1:entity divided, patient / ARG2:divided into what, end state, oblique / ARG3:divided from what, source [section.xml]
   LexSem("V","section",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("section"),arg1,pp("into",arg2),pp("from",arg3)))),

 'section-02': # ARG0:commiter / ARG1:entity being commited [section.xml]
   LexSem("V","section",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("section"),arg1))),

 'secularize-01': # ARG0:causer, agent / ARG1:entity made more secular, less religious / ARG2:instrument [secularize.xml]
   LexSem("V","secularize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("secularize"),arg1,arg2))),

 'secure-01': # ARG0:agent, entity acquiring something / ARG1:thing acquired / ARG2:source, gained from / ARG3:benefactive, gained for [secure.xml]
   LexSem("V","secure",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("secure"),arg1,pp("from",arg2),arg3))),

 'secure-02': # ARG0:maker / ARG1:thing secured / ARG2:instrument [secure.xml]
   LexSem("V","secure",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("secure"),arg1,pp("with",arg2)))),

 'sedate-01': # ARG0:sedator / ARG1:sedated / ARG2:instrument of sedation [sedate.xml]
   LexSem("V","sedate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sedate"),arg1,arg2))),

 'seduce-01': # ARG0:seducer / ARG1:seduced / ARG2:action, end state, destination, seduced into what? [seduce.xml]
   LexSem("V","seduce",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("seduce"),arg1,pp("into",arg2)))),

 'see-01': # ARG0:viewer / ARG1:thing viewed / ARG2:attribute of arg1, further description [see.xml]
   LexSem("V","see",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("see"),arg1,pp("as",arg2)))),

 'see-02': # ARG0:accompanier / ARG1:entity in motion / ARG2:destination [see.xml]
   LexSem("V","see",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("see"),arg1,pp("to",arg2)))),

 'see-03': # ARG0:you [see.xml]
   LexSem("V","see",[":ARG0"],lambda arg0:S(arg0,VP(V("see")))),

 'see-04': # ARG0:ensurer / ARG1:fixed: 'to it' / ARG2:proposition, event [see.xml]
   LexSem("V","see",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("see"),pp("to",arg1),arg2))),

 'see-05': # ARG0:first entity / ARG1:second entity, or 'each other' (or variant) [see.xml]
   LexSem("V","see",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("see"),arg1))),

 'seed-01': # ARG0:the plant [seed.xml]
   LexSem("V","seed",[":ARG0"],lambda arg0:S(arg0,VP(V("seed")))),

 'seed-02': # ARG0:the farmer / ARG1:the ground / ARG2:the seeds [seed.xml]
   LexSem("V","seed",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("seed"),arg1,pp("with",arg2)))),

 'seed-03': # ARG0:entity organizing the players/teams / ARG1:players/teams / ARG2:classes or groups, or destination / ARG3:predicate-- i.e. ranking [seed.xml]
   LexSem("V","seed",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("seed"),arg1,arg2,arg3))),

 'seed-04': # ARG0:Entity removing the seeds / ARG1:fruit that the seeds are being removed from / ARG2:the seeds [seed.xml]
   LexSem("V","seed",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("seed"),arg1,arg2))),

 'seek-01': # ARG0:Agent / entity seeking / ARG1:thing sought, attempted action / ARG2:sought-from [seek.xml]
   LexSem("V","seek",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("seek"),arg1,pp("from",arg2)))),

 'seek-out-02': # ARG0:Agent / entity seeking / ARG1:thing sought / ARG2:sought-from [seek.xml]
   LexSem("V","seek",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("seek"),Adv("out"),arg1,arg2))),

 'seem-01': # ARG1:thing seeming / ARG2:perceiver [seem.xml]
   LexSem("V","seem",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("seem"),pp("to",arg2)))),

 'seep-01': # ARG0:causer of leaking / ARG1:substance leaked / ARG2:source, leaked from where? [seep.xml]
   LexSem("V","seep",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("seep"),arg1,pp("from",arg2)))),

 'seesaw-01': # ARG1:thing moving / ARG2:EXT or MNR / ARG3:one side / ARG4:other side / ARG5:medium/range [seesaw.xml]
   LexSem("V","seesaw",[":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg1,arg2,arg3,arg4,arg5:S(arg1,VP(V("seesaw"),arg2,arg3,arg4,pp("between",arg5)))),

 'seethe-01': # ARG0:overflowing entity (container, person) / ARG1:overflowing with (emotion, substance) / ARG2:cause, introduced by 'over' [seethe.xml]
   LexSem("V","seethe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("seethe"),pp("with",arg1),pp("over",arg2)))),

 'segment-01': # ARG0:agent, divider / ARG1:whole object / ARG2:pieces [segment.xml]
   LexSem("V","segment",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("segment"),arg1,pp("into",arg2)))),

 'segregate-01': # ARG0:agent, segregator / ARG1:first or all entities being segregated / ARG2:segregated from what/whom / ARG3:characteristic of arg1 being segregated [segregate.xml]
   LexSem("V","segregate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("segregate"),arg1,pp("into",arg2),arg3))),

 'seize-01': # ARG0:agent, entity acquiring something / ARG1:thing acquired / ARG2:acquired-from [seize.xml]
   LexSem("V","seize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("seize"),arg1,arg2))),

 'seize-03': # ARG1:entity experiencing a seizure [seize.xml]
   LexSem("V","seize",[":ARG1"],lambda arg1:S(arg1,VP(V("seize")))),

 'seize-up-02': # ARG1:thing becoming immobile [seize.xml]
   LexSem("V","seize",[":ARG1"],lambda arg1:S(arg1,VP(V("seize"),Adv("up")))),

 'select-01': # ARG0:selector / ARG1:entity selected / ARG2:selected from / ARG3:attribute, selected for/as [select.xml]
   LexSem("V","select",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("select"),arg1,pp("from",arg2),pp("to",arg3)))),

 'selfadjust-01': # ARG0:causer of transformation / ARG2:end state / ARG3:start state / ARG4:purpose, reason for adjustment [selfadjust.xml]
   LexSem("V","self-adjust",[":ARG0",":ARG2",":ARG3",":ARG4"],lambda arg0,arg2,arg3,arg4:S(arg0,VP(V("self-adjust"),arg2,arg3,arg4))),

 'selfdestruct-01': # ARG0:destroyer and destroyed [selfdestruct.xml]
   LexSem("V","self-destruct",[":ARG0"],lambda arg0:S(arg0,VP(V("self-destruct")))),

 'selfefface-01': # ARG0:self-effacing entity [selfefface.xml]
   LexSem("V","self-efface",[":ARG0"],lambda arg0:S(arg0,VP(V("self-efface")))),

 'selfestablish-01': # ARG0:agent, establisher / ARG1:thing established / ARG2:attribute [selfestablish.xml]
   LexSem("V","self-establish",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("self-establish"),arg1,arg2))),

 'sell-01': # ARG0:Seller / ARG1:Thing Sold / ARG2:Buyer / ARG3:Price Paid / ARG4:Benefactive [sell.xml]
   LexSem("V","sell",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("sell"),arg1,pp("to",arg2),pp("for",arg3),pp("for",arg4)))),

 'sell-06': # ARG0:Convincer / ARG1:Person being convinced or persuaded / ARG2:Convinced of what [sell.xml]
   LexSem("V","sell",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sell"),arg1,arg2))),

 'sell-off-04': # ARG0:Seller / ARG1:Thing Sold / ARG2:Buyer / ARG3:Price Paid / ARG4:Benefactive [sell.xml]
   LexSem("V","sell",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("sell"),Adv("off"),arg1,arg2,arg3,arg4))),

 'sell-out-02': # ARG0:entity selling out / ARG1:entity sold out [sell.xml]
   LexSem("V","sell",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sell"),Adv("out"),arg1))),

 'sell-out-03': # ARG0:Seller / ARG1:Thing Sold / ARG2:Buyer / ARG3:Price Paid / ARG4:Benefactive [sell.xml]
   LexSem("V","sell",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("sell"),Adv("out"),arg1,arg2,arg3,arg4))),

 'semaphore-01': # ARG0:sender, agent / ARG1:entity semaphored, message sent / ARG2:sent to, recipient [semaphore.xml]
   LexSem("V","semaphore",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("semaphore"),arg1,arg2))),

 'send-01': # ARG0:sender / ARG1:sent / ARG2:sent-to [send.xml]
   LexSem("V","send",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("send"),arg1,pp("to",arg2)))),

 'send-02': # ARG0:sender / ARG1:sent, impelled agent / ARG2:project, impelled action, attribute of arg1 [send.xml]
   LexSem("V","send",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("send"),arg1,arg2))),

 'send-03': # ARG0:causer of motion / ARG1:entity in motion / ARG2:EXT / ARG3:start point / ARG4:end point, attribute of arg1 / ARG5:direction [send.xml]
   LexSem("V","send",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg0,arg1,arg2,arg3,arg4,arg5:S(arg0,VP(V("send"),arg1,arg2,arg3,pp("to",arg4),pp("up",arg5)))),

 'send-out-04': # ARG0:orderer, agent / ARG1:theme, thing ordered [send.xml]
   LexSem("V","send",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("send"),Adv("out"),pp("for",arg1)))),

 'sense-01': # ARG0:sensor / ARG1:thing sensed / ARG2:secondary attribute [sense.xml]
   LexSem("V","sense",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sense"),arg1,arg2))),

 'sensitize-01': # ARG0:cause of sensitivity / ARG1:entity becoming sensitive / ARG2:sensitive to what [sensitize.xml]
   LexSem("V","sensitize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sensitize"),arg1,pp("to",arg2)))),

 'sentence-01': # ARG0:judge/jury / ARG1:criminal / ARG2:punishment / ARG3:crime / ARG4:duration of punishment [sentence.xml]
   LexSem("V","sentence",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("sentence"),arg1,pp("to",arg2),pp("for",arg3),arg4))),

 'sentimentalize-01': # ARG0:sentimentalizer / ARG1:event or thing looked at with sentiment [sentimentalize.xml]
   LexSem("V","sentimentalize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sentimentalize"),arg1))),

 'separate-01': # ARG0:entity causing separation / ARG1:thing being divided / ARG2:source, separated from [separate.xml]
   LexSem("V","separate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("separate"),arg1,pp("from",arg2)))),

 'sequence-01': # ARG0:arranger, agent / ARG1:things put in order or first element / ARG2:second or subsequent element, if seperate from arg 1 [sequence.xml]
   LexSem("V","sequence",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sequence"),arg1,pp("before",arg2)))),

 'sequester-01': # ARG0:cause of isolation / ARG1:entity sequestered [sequester.xml]
   LexSem("V","sequester",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sequester"),arg1))),

 'sequin-01': # ARG0:glitzy seamstress / ARG1:clothing, location/entity covered in sequins / ARG2:sequins themselves, type of sequins [sequin.xml]
   LexSem("V","sequin",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sequin"),pp("along",arg1),arg2))),

 'serenade-01': # ARG0:agent, serenader / ARG1:entity serenaded [serenade.xml]
   LexSem("V","serenade",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("serenade"),arg1))),

 'serrate-01': # ARG0:agent, cutter (animate) / ARG1:thing becoming notched / ARG2:instrument [serrate.xml]
   LexSem("V","serrate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("serrate"),arg1,pp("with",arg2)))),

 'serve-01': # ARG0:worker, entity performing a service/acting in some capacity / ARG1:job, project, service performed / ARG2:employer/recipient/beneficiary of service [serve.xml]
   LexSem("V","serve",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("serve"),pp("on",arg1),arg2))),

 'serve-02': # ARG0:server / ARG1:thing served/delivered / ARG2:served/delivered to [serve.xml]
   LexSem("V","serve",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("serve"),arg1,pp("to",arg2)))),

 'serve-04': # ARG0:entity doing time / ARG1:sentence served (maybe given as a period of time) / ARG2:crime, reason for sentence [serve.xml]
   LexSem("V","serve",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("serve"),arg1,arg2))),

 'serve-up-03': # ARG0:server / ARG1:served / ARG2:served to [serve.xml]
   LexSem("V","serve",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("serve"),Adv("up"),arg1,arg2))),

 'service-05': # ARG0:doer / ARG1:thing worked on / ARG2:kind of service (thing done to arg1) [serve.xml]
   LexSem("V","service",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("service"),arg1,arg2))),

 'set-01': # ARG0:agent, setter / ARG1:thing set / ARG2:location or position [set.xml]
   LexSem("V","set",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("set"),arg1,pp("on",arg2)))),

 'set-02': # ARG0:agent, setter / ARG1:thing set / ARG2:attribute of arg1 [set.xml]
   LexSem("V","set",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("set"),arg1,arg2))),

 'set-08': # ARG0:cause, agent / ARG1:prepared entity / ARG2:ready for what, proposition [set.xml]
   LexSem("V","set",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("set"),arg1,arg2))),

 'set-11': # ARG1:sun [set.xml]
   LexSem("V","set",[":ARG1"],lambda arg1:S(arg1,VP(V("set")))),

 'set-14': # ARG0:Agent, preparer / ARG1:Thing set, prepared / ARG2:Beneficiary, set for who/what? [set.xml]
   LexSem("V","set",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("set"),arg1,pp("for",arg2)))),

 'set-about-12': # ARG0:agent, starter / ARG1:thing started [set.xml]
   LexSem("V","set",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("set"),Adv("about"),arg1))),

 'set-down-09': # ARG0:agent / ARG1:thing set down / ARG2:position [set.xml]
   LexSem("V","set",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("set"),Adv("down"),arg1,pp("in",arg2)))),

 'set-off-04': # ARG0:traveller / ARG1:destination [set.xml]
   LexSem("V","set",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("set"),Adv("off"),pp("for",arg1)))),

 'set-off-05': # ARG0:bomber, cause / ARG1:bomb, reaction [set.xml]
   LexSem("V","set",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("set"),Adv("off"),arg1))),

 'set-off-13': # ARG0:thing complementing / ARG1:thing complemented [set.xml]
   LexSem("V","set",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("set"),Adv("off"),arg1))),

 'set-out-06': # ARG0:agent, setter / ARG1:thing set [set.xml]
   LexSem("V","set",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("set"),Adv("out"),arg1))),

 'set-out-07': # ARG0:traveller / ARG1:destination, goal [set.xml]
   LexSem("V","set",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("set"),Adv("out"),pp("for",arg1)))),

 'set-up-03': # ARG0:agent, setter / ARG1:thing set / ARG2:attribute [set.xml]
   LexSem("V","set",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("set"),Adv("up"),arg1,pp("along",arg2)))),

 'set-up-15': # ARG0:trickster / ARG1:entity tricked / ARG2:the trick that follows [set.xml]
   LexSem("V","set",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("set"),Adv("up"),arg1,pp("to",arg2)))),

 'set-upon-10': # ARG0:agent, attacker / ARG1:patient, thing attacked [set.xml]
   LexSem("V","set",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("set"),Adv("upon"),arg1))),

 'settle-01': # ARG0:decider / ARG1:decision / ARG2:benefactive / ARG3:instrument [settle.xml]
   LexSem("V","settle",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("settle"),pp("on",arg1),pp("for",arg2),arg3))),

 'settle-02': # ARG0:entity making resolution / ARG1:thing being resolved / ARG2:comitative, resolved with / ARG3:what the settlement is (value or decision) [settle.xml]
   LexSem("V","settle",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("settle"),arg1,pp("with",arg2),pp("for",arg3)))),

 'settle-03': # ARG0:entity causing something/someone to settle / ARG1:entity settling / ARG2:EXT, amount declined by / ARG3:start point / ARG4:end point [settle.xml]
   LexSem("V","settle",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("settle"),arg1,pp("down",arg2),arg3,pp("at",arg4)))),

 'settle-down-04': # ARG1:one who should be quiet [settle.xml]
   LexSem("V","settle",[":ARG1"],lambda arg1:S(arg1,VP(V("settle"),Adv("down")))),

 'settle-down-05': # ARG0:resident / ARG1:location [settle.xml]
   LexSem("V","settle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("settle"),Adv("down"),arg1))),

 'sever-01': # ARG0:causer / ARG1:entity severed [sever.xml]
   LexSem("V","sever",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sever"),arg1))),

 'sew-01': # ARG0:agent, entity causing two objects to be attached / ARG1:patient, thing being sewn / ARG2:instrument, thread / ARG3:attribute of arg1, end state [sew.xml]
   LexSem("V","sew",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("sew"),arg1,pp("with",arg2),arg3))),

 'sew-02': # ARG0:builder / ARG1:construction / ARG2:material, start state / ARG4:end state [sew.xml]
   LexSem("V","sew",[":ARG0",":ARG1",":ARG2",":ARG4"],lambda arg0,arg1,arg2,arg4:S(arg0,VP(V("sew"),arg1,arg2,arg4))),

 'sew-up-03': # ARG0:entity making something secure / ARG1:thing made secure [sew.xml]
   LexSem("V","sew",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sew"),Adv("up"),arg1))),

 'sex-01': # ARG0:first (or all when in one mention) partner / ARG1:second partner (when separate mention) [sex.xml]
   LexSem("V","have-sex",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("have-sex"),pp("with",arg1)))),

 'sex-03': # ARG0:Entity investigating gender / ARG1:Entity whose gender is being examined [sex.xml]
   LexSem("V","sex",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sex"),arg1))),

 'shack-up-01': # ARG0:one half of unit / ARG1:other half [shack.xml]
   LexSem("V","shack",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shack"),Adv("up"),pp("with",arg1)))),

 'shackle-01': # ARG0:agent, entity doing the shackling / ARG1:first thing being shackled / ARG2:second thing, shackled to what / ARG3:instrument, shackles / ARG4:attribute of arg1 [shackle.xml]
   LexSem("V","shackle",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("shackle"),arg1,pp("to",arg2),pp("with",arg3),arg4))),

 'shade-01': # ARG0:thing blocking light / ARG1:thing in shadow [shade.xml]
   LexSem("V","shade",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shade"),arg1))),

 'shadow-01': # ARG0:mimic, follower / ARG1:entity followed [shadow.xml]
   LexSem("V","shadow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shadow"),arg1))),

 'shadow-02': # ARG0:caster of shadows / ARG1:now shadowed entity [shadow.xml]
   LexSem("V","shadow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shadow"),arg1))),

 'shag-01': # ARG0:catcher / ARG1:balls [shag.xml]
   LexSem("V","shag",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shag"),arg1))),

 'shake-01': # ARG0:causer of trembling motion / ARG1:thing trembling [shake.xml]
   LexSem("V","shake",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shake"),arg1))),

 'shake-off-02': # ARG0:entity losing something / ARG1:thing lost / ARG2:benefactive, entity gaining thing lost [shake.xml]
   LexSem("V","shake",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shake"),Adv("off"),arg1,arg2))),

 'shake-up-03': # ARG0:cause of shaking / ARG1:thing trembling [shake.xml]
   LexSem("V","shake",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shake"),Adv("up"),arg1))),

 'shamble-01': # ARG0:agent, shambling entity / ARG1:path [shamble.xml]
   LexSem("V","shamble",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shamble"),arg1))),

 'shame-01': # ARG0:entity assigning shame/impelling through shame / ARG1:shamed/impelled agent / ARG2:action impelled through shame [shame.xml]
   LexSem("V","shame",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shame"),arg1,pp("into",arg2)))),

 'shame-02': # ARG0:shameful actor/actions bringing shame to arg1 / ARG1:entity feeling shame for arg0 / ARG2:shameful behavior, thing [shame.xml]
   LexSem("V","ashame",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ashame"),arg1,pp("with",arg2)))),

 'shampoo-01': # ARG0:agent, shampooer / ARG1:thing shampooed, patient [shampoo.xml]
   LexSem("V","shampoo",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shampoo"),arg1))),

 'shanghai-01': # ARG0:shanghai-er, agent / ARG1:thing shanghaied / ARG2:source, shanghaied from what / ARG3:destination of shanghai-ing [shanghai.xml]
   LexSem("V","shanghai",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("shanghai"),arg1,arg2,pp("to",arg3)))),

 'shape-01': # ARG0:shaper / ARG1:thing worked on / ARG2:end state, if different from arg1 [shape.xml]
   LexSem("V","shape",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shape"),arg1,pp("into",arg2)))),

 'shape-up-02': # ARG1:thing seeming / ARG2:attribute [shape.xml]
   LexSem("V","shape",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("shape"),Adv("up"),pp("as",arg2)))),

 'shape-up-03': # ARG0:reformer / ARG1:entity acting out, thing reformed [shape.xml]
   LexSem("V","shape",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shape"),Adv("up"),arg1))),

 'share-01': # ARG0:sharer / ARG1:thing shared / ARG2:shared with, if separate from arg0 [share.xml]
   LexSem("V","share",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("share"),arg1,pp("with",arg2)))),

 'share-out-02': # ARG0:distributor / ARG1:thing given out / ARG2:shareholders [share.xml]
   LexSem("V","share",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("share"),Adv("out"),arg1,arg2))),

 'shark-01': # ARG0:agent or causer / ARG1:entity gathered / ARG2:gathered into / ARG3:beneficiary [shark.xml]
   LexSem("V","shark",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("shark"),arg1,arg2,arg3))),

 'sharpen-01': # ARG0:sharpener / ARG1:thing getting sharper / ARG2:instrument, if agent is also present [sharpen.xml]
   LexSem("V","sharpen",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sharpen"),arg1,pp("with",arg2)))),

 'shatter-01': # ARG0:breaker / ARG1:thing broken / ARG2:instrument / ARG3:pieces [shatter.xml]
   LexSem("V","shatter",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("shatter"),arg1,pp("with",arg2),pp("into",arg3)))),

 'shave-01': # ARG0:agent, cutter / ARG1:thing or amount cut / ARG2:source / ARG3:instrument [shave.xml]
   LexSem("V","shave",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("shave"),arg1,pp("off",arg2),arg3))),

 'shawl-01': # ARG0:agent, person placing shawl / ARG1:location/entity draped in the shawl / ARG2:shawl itself, type of shawl [shawl.xml]
   LexSem("V","shawl",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shawl"),arg1,pp("in",arg2)))),

 'shear-01': # ARG0:agent of cutting / ARG1:thing cut, smaller piece / ARG2:whole, source / ARG3:instrument [shear.xml]
   LexSem("V","shear",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("shear"),arg1,pp("off",arg2),pp("by",arg3)))),

 'sheathe-01': # ARG0:sheather / ARG1:thing sheathed / ARG2:sheath, location [sheathe.xml]
   LexSem("V","sheathe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sheathe"),arg1,pp("in",arg2)))),

 'shed-01': # ARG0:entity removing / ARG1:thing being removed (defaults to 'hair') [shed.xml]
   LexSem("V","shed",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shed"),arg1))),

 'shed-02': # ARG1:Logical subject, patient, thing falling / ARG2:EXT, amount fallen / ARG3:start point / ARG4:end point, end state of arg1 [shed.xml]
   LexSem("V","shed",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("shed"),arg2,arg3,pp("to",arg4)))),

 'shed-03': # ARG0:entity shedding / ARG1:thing shed (i.e. light) / ARG2:location [shed.xml]
   LexSem("V","shed",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shed"),arg1,pp("on",arg2)))),

 'shed_light-10': # ARG0:causer of knowledge, source of information / ARG1:thing studied, domain of research [lighten.xml]
   LexSem("V","bring",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("bring"),pp("on",arg1)))),

 'shell-01': # ARG0:sheller / ARG1:thing that used to have a shell [shell.xml]
   LexSem("V","shell",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shell"),arg1))),

 'shell-02': # ARG0:sheller / ARG1:target / ARG2:explicit mention of bombs, shells [shell.xml]
   LexSem("V","shell",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shell"),arg1,pp("with",arg2)))),

 'shell-out-03': # ARG0:payer or buyer / ARG1:money / ARG2:seller or person being paid / ARG3:thing bought or paid for [shell.xml]
   LexSem("V","shell",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("shell"),Adv("out"),arg1,pp("to",arg2),pp("for",arg3)))),

 'shellac-01': # ARG0:shellacker, agent / ARG1:thing shellacked, patient [shellac.xml]
   LexSem("V","shellac",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shellac"),arg1))),

 'shelter-01': # ARG0:agent, putter in shelter / ARG1:thing in shelter (if separate from arg0) / ARG2:shelter / ARG3:danger, sheltered from [shelter.xml]
   LexSem("V","shelter",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("shelter"),arg1,pp("in",arg2),arg3))),

 'shelve-01': # ARG0:placer, agent / ARG1:entity shelved [shelve.xml]
   LexSem("V","shelve",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shelve"),arg1))),

 'shepherd-01': # ARG0:shepherd / ARG1:sheep [shepherd.xml]
   LexSem("V","shepherd",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shepherd"),arg1))),

 'shield-01': # ARG0:protector / ARG1:protected / ARG2:danger [shield.xml]
   LexSem("V","shield",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shield"),arg1,pp("from",arg2)))),

 'shift-01': # ARG0:agent of movement / ARG1:thing moving / ARG2:destination / ARG3:source / ARG4:attribute of arg1 actually shifting (if in addition to arg1) [shift.xml]
   LexSem("V","shift",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("shift"),arg1,pp("to",arg2),pp("from",arg3),arg4))),

 'shimmer-01': # ARG1:source of light [shimmer.xml]
   LexSem("V","shimmer",[":ARG1"],lambda arg1:S(arg1,VP(V("shimmer")))),

 'shimmer-02': # ARG0:entity in motion / ARG1:path [shimmer.xml]
   LexSem("V","shimmer",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shimmer"),pp("onto",arg1)))),

 'shimmy-01': # ARG0:dancer, thing doing the shimmy / ARG1:path of shimmy when referring to movement / ARG2:partner when referring to the dance [shimmy.xml]
   LexSem("V","shimmy",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shimmy"),arg1,arg2))),

 'shine-01': # ARG0:cause of illumination, agent / ARG1:light itself, thing shining / ARG2:thing illuminated [shine.xml]
   LexSem("V","shine",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shine"),arg1,arg2))),

 'shine-through-02': # ARG1:apparent thing [shine.xml]
   LexSem("V","shine",[":ARG1"],lambda arg1:S(arg1,VP(V("shine"),Adv("through")))),

 'shingle-01': # ARG0:roofer, agent / ARG1:roof, location being covered / ARG2:shingles themselves, type of shingles [shingle.xml]
   LexSem("V","shingle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shingle"),arg1,pp("with",arg2)))),

 'ship-01': # ARG0:sender / ARG1:package / ARG2:recipient / ARG3:source [ship.xml]
   LexSem("V","ship",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("ship"),arg1,pp("to",arg2),pp("from",arg3)))),

 'ship-out-02': # ARG1:soldier / ARG2:destination [ship.xml]
   LexSem("V","ship",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("ship"),Adv("out"),pp("to",arg2)))),

 'shipwreck-01': # ARG0:Causer of wreck (rare) / ARG1:experiencer/ person shipwrecked / ARG2:wreck site (location) [shipwreck.xml]
   LexSem("V","shipwreck",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shipwreck"),arg1,pp("on",arg2)))),

 'shipwreck-02': # ARG0:causer of destruction / ARG1:failed or ruined thing / ARG2:instrument [shipwreck.xml]
   LexSem("V","shipwreck",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shipwreck"),arg1,pp("with",arg2)))),

 'shirk-01': # ARG0:avoider, agent / ARG1:entity avoided [shirk.xml]
   LexSem("V","shirk",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shirk"),arg1))),

 'shirr-01': # ARG0:cook / ARG1:food [shirr.xml]
   LexSem("V","shirr",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shirr"),arg1))),

 'shit-01': # ARG0:person defecating / ARG1:cognate object, hopefully feces and unspecified [shit.xml]
   LexSem("V","shit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shit"),arg1))),

 'shiver-01': # ARG1:shiverer [shiver.xml]
   LexSem("V","shiver",[":ARG1"],lambda arg1:S(arg1,VP(V("shiver")))),

 'shock-01': # ARG0:surpriser / ARG1:person surprised / ARG2:instrument, if separate from arg0 [shock.xml]
   LexSem("V","shock",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shock"),arg1,pp("by",arg2)))),

 'shoe-01': # ARG0:Agent, person putting on shoes / ARG1:Feet, entity covered with shoes / ARG2:Shoes themselves, what type of shoes [shoe.xml]
   LexSem("V","shoe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shoe"),arg1,pp("in",arg2)))),

 'shoehorn-01': # ARG0:putter / ARG1:thing put / ARG2:put in, container [shoehorn.xml]
   LexSem("V","shoehorn",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shoehorn"),arg1,pp("into",arg2)))),

 'shoo-01': # ARG0:expeller, agent / ARG1:entity expelled / ARG2:expelled from [shoo.xml]
   LexSem("V","shoo",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shoo"),arg1,arg2))),

 'shoot-01': # ARG0:shooter / ARG1:projectile / ARG2:target [shoot.xml]
   LexSem("V","shoot",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shoot"),arg1,pp("through",arg2)))),

 'shoot-02': # ARG0:shooter / ARG1:corpse / ARG2:gun / ARG3:specific location of wound [shoot.xml]
   LexSem("V","shoot",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("shoot"),arg1,pp("with",arg2),pp("in",arg3)))),

 'shoot-03': # ARG0:videographer / ARG1:subject filmed/photographed / ARG2:medium: photo, video, hi-def, color, etc [shoot.xml]
   LexSem("V","shoot",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shoot"),arg1,arg2))),

 'shoot-06': # ARG0:causer of motion / ARG1:entity in motion / ARG2:EXT / ARG3:start point / ARG4:end point / ARG5:direction [shoot.xml]
   LexSem("V","shoot",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg0,arg1,arg2,arg3,arg4,arg5:S(arg0,VP(V("shoot"),arg1,arg2,arg3,arg4,pp("up",arg5)))),

 'shoot-back-07': # ARG0:speaker / ARG1:utterance / ARG2:hearer [shoot.xml]
   LexSem("V","shoot",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shoot"),Adv("back"),arg1,arg2))),

 'shoot-down-05': # ARG0:shooter / ARG1:planes, birds, ideas / ARG2:instrument [shoot.xml]
   LexSem("V","shoot",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shoot"),Adv("down"),arg1,arg2))),

 'shoot-off-04': # ARG0:shooter / ARG1:cannon, mouth, whatever [shoot.xml]
   LexSem("V","shoot",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shoot"),Adv("off"),arg1))),

 'shoot-up-08': # ARG0:Entity injecting the drug (usually the drug user) / ARG1:the drug / ARG2:entity being given the drug, if separate from arg0 [shoot.xml]
   LexSem("V","shoot",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shoot"),Adv("up"),pp("with",arg1),arg2))),

 'shoot-up-09': # ARG0:shooter / ARG1:target / ARG2:gun [shoot.xml]
   LexSem("V","shoot",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shoot"),Adv("up"),arg1,arg2))),

 'shop-01': # ARG0:shopper / ARG1:thing sought / ARG2:store/seller / ARG3:beneficiary [shop.xml]
   LexSem("V","shop",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("shop"),pp("for",arg1),pp("at",arg2),pp("for",arg3)))),

 'shop-02': # ARG0:Seller / ARG1:Thing Sold / ARG2:Buyer / ARG3:Price Paid / ARG4:Benefactive [shop.xml]
   LexSem("V","shop",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("shop"),arg1,pp("to",arg2),arg3,arg4))),

 'shoplift-01': # ARG0:thief, agent / ARG1:thing stolen / ARG2:stolen from / ARG3:stolen for [shoplift.xml]
   LexSem("V","shoplift",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("shoplift"),arg1,pp("from",arg2),pp("for",arg3)))),

 'shore-02': # ARG0:Boat captain, cause of shoring / ARG1:Boat, thing now supported or at shore / ARG2:Shore/support where arg1 is brought [shore.xml]
   LexSem("V","shore",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shore"),arg1,arg2))),

 'shore-up-01': # ARG0:agent, supporter / ARG1:thing supported [shore.xml]
   LexSem("V","shore",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shore"),Adv("up"),arg1))),

 'short-01': # ARG0:stock broker / ARG1:stocks [shorten.xml]
   LexSem("V","short",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("short"),arg1))),

 'short-02': # ARG0:electrician / ARG1:circuit, electrical appliance [shorten.xml]
   LexSem("V","short",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("short"),arg1))),

 'short-03': # ARG0:giver of change / ARG1:receiver of change / ARG2:explicit mention of change [shorten.xml]
   LexSem("V","short",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("short"),arg1,arg2))),

 'short-06': # ARG1:entity not having enough / ARG2:what arg1 doesn't have enough of, amount short / ARG3:goal arg1 is short of reaching [shorten.xml]
   LexSem("V","fall short",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("fall short"),arg2,pp("of",arg3)))),

 'shortcircuit-01': # ARG0:agent or cause / ARG1:thing shortciruited [shortcircuit.xml]
   LexSem("V","short-circuit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("short-circuit"),arg1))),

 'shorten-04': # ARG0:causal agent / ARG1:thing becoming shorter / ARG2:extent / ARG3:start point / ARG4:end point [shorten.xml]
   LexSem("V","shorten",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("shorten"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'shoulder-01': # ARG0:carrier, agent / ARG1:burden [shoulder.xml]
   LexSem("V","shoulder",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shoulder"),arg1))),

 'shout-01': # ARG0:shouter / ARG1:utterance / ARG2:listener [shout.xml]
   LexSem("V","shout",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shout"),arg1,pp("into",arg2)))),

 'shout-down-02': # ARG0:shouter / ARG1:thing shouted down [shout.xml]
   LexSem("V","shout",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shout"),Adv("down"),arg1))),

 'shout-out-03': # ARG0:shouter / ARG1:utterance / ARG2:listener [shout.xml]
   LexSem("V","shout",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shout"),Adv("out"),arg1,arg2))),

 'shove-01': # ARG0:pusher / ARG1:thing pushed / ARG2:destination, direction, end state [shove.xml]
   LexSem("V","shove",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shove"),arg1,pp("through",arg2)))),

 'shovel-01': # ARG0:agent, shoveler / ARG1:theme, thing being shoveled [shovel.xml]
   LexSem("V","shovel",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shovel"),arg1))),

 'show-01': # ARG0:shower / ARG1:thing seen/shown / ARG2:seer [show.xml]
   LexSem("V","show",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("show"),arg1,arg2))),

 'show-off-03': # ARG0:displayer / ARG1:thing displayed / ARG2:seer / witness [show.xml]
   LexSem("V","show",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("show"),Adv("off"),arg1,pp("to",arg2)))),

 'show-up-02': # ARG1:thing appearing, showing up [show.xml]
   LexSem("V","show",[":ARG1"],lambda arg1:S(arg1,VP(V("show"),Adv("up")))),

 'showcase-01': # ARG0:displayer, agent putting something on display / ARG1:entity displayed / ARG2:location [showcase.xml]
   LexSem("V","showcase",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("showcase"),arg1,pp("on",arg2)))),

 'shower-01': # ARG0:causer of things falling / ARG1:things falling / ARG2:falling on what [shower.xml]
   LexSem("V","shower",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shower"),arg1,pp("with",arg2)))),

 'shred-01': # ARG0:shredder / ARG1:thing shredded, whole / ARG2:instrument / ARG3:pieces [shred.xml]
   LexSem("V","shred",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("shred"),arg1,pp("with",arg2),pp("into",arg3)))),

 'shriek-01': # ARG0:shrieker / ARG1:shriek itself, or utterance / ARG2:unfortunate listener [shriek.xml]
   LexSem("V","shriek",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shriek"),arg1,pp("at",arg2)))),

 'shrill-01': # ARG0:shriller, agent / ARG1:thing shrilled, actual sound or quotation / ARG2:location of shrilling [shrill.xml]
   LexSem("V","shrill",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shrill"),arg1,arg2))),

 'shrimp-01': # ARG0:agent or causer / ARG1:entity gathered / ARG2:gathered into / ARG3:beneficiary [shrimp.xml]
   LexSem("V","shrimp",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("shrimp"),pp("for",arg1),arg2,pp("for",arg3)))),

 'shrink-01': # ARG0:Agent, cause of shrinkage / ARG1:Logical subject, patient, thing falling / ARG2:EXT, amount fallen / ARG3:Start point / ARG4:End point, end state of arg1 [shrink.xml]
   LexSem("V","shrink",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("shrink"),arg1,arg2,arg3,arg4))),

 'shrivel-01': # ARG0:causer of shrivelment / ARG1:thing shriveling / ARG2:EXT / ARG3:start point / ARG4:end point [shrivel.xml]
   LexSem("V","shrivel",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("shrivel"),arg1,arg2,arg3,pp("to",arg4)))),

 'shroud-01': # ARG0:applier of cover / ARG1:thing covered / ARG2:covered with [shroud.xml]
   LexSem("V","shroud",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shroud"),arg1,arg2))),

 'shrug-01': # ARG0:shrugger / ARG1:thing shrugged (defaults to shoulders) / ARG2:shrugged because of [shrug.xml]
   LexSem("V","shrug",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shrug"),arg1,pp("at",arg2)))),

 'shrug-03': # ARG0:speaker / ARG1:utterance / ARG2:listener [shrug.xml]
   LexSem("V","shrug",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shrug"),arg1,arg2))),

 'shrug-off-02': # ARG0:ignorer, agent / ARG1:thing shrugged off [shrug.xml]
   LexSem("V","shrug",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shrug"),Adv("off"),arg1))),

 'shuck-01': # ARG0:shucker, agent / ARG1:thing shucked / ARG2:thing removed [shuck.xml]
   LexSem("V","shuck",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shuck"),arg1,arg2))),

 'shudder-01': # ARG1:entity shuddering / ARG2:fixed: at+NP [shudder.xml]
   LexSem("V","shudder",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("shudder"),pp("at",arg2)))),

 'shuffle-01': # ARG0:dancer [shuffle.xml]
   LexSem("V","shuffle",[":ARG0"],lambda arg0:S(arg0,VP(V("shuffle")))),

 'shuffle-02': # ARG0:cause of motion / ARG1:entity in motion / ARG2:path [shuffle.xml]
   LexSem("V","shuffle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shuffle"),arg1,arg2))),

 'shuffle-03': # ARG0:agent, walker / ARG1:feet [shuffle.xml]
   LexSem("V","shuffle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shuffle"),arg1))),

 'shuffle-05': # ARG0:dealer / ARG1:cards [shuffle.xml]
   LexSem("V","shuffle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shuffle"),arg1))),

 'shuffle-off-04': # ARG0:corpse / ARG1:this mortal coil [shuffle.xml]
   LexSem("V","shuffle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shuffle"),Adv("off"),arg1))),

 'shun-01': # ARG0:avoider, agent / ARG1:thing avoided [shun.xml]
   LexSem("V","shun",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shun"),arg1))),

 'shunt-01': # ARG0:mover / ARG1:thing moved / ARG2:moved to or around amongst [shunt.xml]
   LexSem("V","shunt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shunt"),arg1,arg2))),

 'shut-01': # ARG0:person doing the closing / ARG1:thing closing [shut.xml]
   LexSem("V","shut",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shut"),arg1))),

 'shut-off-03': # ARG0:agent, excluder / ARG1:patient, thing excluded / ARG2:excluded-from [shut.xml]
   LexSem("V","shut",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shut"),Adv("off"),arg1,pp("from",arg2)))),

 'shut-off-04': # ARG0:flipper of the switch, agent / ARG1:light [shut.xml]
   LexSem("V","shut",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shut"),Adv("off"),arg1))),

 'shut-out-02': # ARG0:agent, excluder / ARG1:patient, thing excluded / ARG2:excluded-from [shut.xml]
   LexSem("V","shut",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shut"),Adv("out"),arg1,arg2))),

 'shut-up-06': # ARG0:causer / ARG1:person becoming quiet [shut.xml]
   LexSem("V","shut",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shut"),Adv("up"),arg1))),

 'shut_down-05': # ARG0:Intentional agent / ARG1:Thing ending / ARG2:Explicit instrument, thing ended with [shut.xml]
   LexSem("V","shutdown",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shutdown"),arg1,arg2))),

 'shutter-01': # ARG0:closer, agent / ARG1:entity shuttered [shutter.xml]
   LexSem("V","shutter",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shutter"),arg1))),

 'shuttle-01': # ARG0:mover / ARG1:thing moved / ARG2:one (or both) location(s), start point / ARG3:other location, destination [shuttle.xml]
   LexSem("V","shuttle",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("shuttle"),arg1,pp("between",arg2),pp("to",arg3)))),

 'shuttle-off-02': # ARG0:agent of motion / ARG1:thing moved / ARG2:destination [shuttle.xml]
   LexSem("V","shuttle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("shuttle"),Adv("off"),arg1,pp("to",arg2)))),

 'shy-02': # ARG0:shy one / ARG1:afraid of [shy.xml]
   LexSem("V","shy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shy"),pp("from",arg1)))),

 'shy-away-01': # ARG0:avoider / ARG1:thing avoided [shy.xml]
   LexSem("V","shy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("shy"),Adv("away"),pp("from",arg1)))),

 'sibilate-01': # ARG0:hisser / ARG1:sibilated sound/ utterance / ARG2:hearer [sibilate.xml]
   LexSem("V","sibilate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sibilate"),arg1,pp("at",arg2)))),

 'sicken-01': # ARG0:illness, stimulus / ARG1:experiencer, entity feeling sick [sicken.xml]
   LexSem("V","sicken",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sicken"),arg1))),

 'side-01': # ARG0:supporter / ARG1:supported / ARG2:sided-against, anti-beneficiary [side.xml]
   LexSem("V","side",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("side"),pp("with",arg1),pp("against",arg2)))),

 'side-02': # ARG0:construction worker, agent / ARG1:house / ARG2:siding [side.xml]
   LexSem("V","side",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("side"),arg1,pp("with",arg2)))),

 'sideline-01': # ARG0:person preventing, removing arg1 from participation / ARG1:entity sidelined / ARG2:sidelined from what?  mention of activity arg1 can't participate in [sideline.xml]
   LexSem("V","sideline",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sideline"),arg1,pp("from",arg2)))),

 'sidestep-01': # ARG0:avoider / ARG1:thing avoided [sidestep.xml]
   LexSem("V","sidestep",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sidestep"),arg1))),

 'sidetrack-01': # ARG0:cause of diversion, agent / ARG1:entity diverted [sidetrack.xml]
   LexSem("V","sidetrack",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sidetrack"),arg1))),

 'sidle-01': # ARG0:agent, rider (use only if arg1 is present) / ARG1:thing sidled, walker / ARG2:path, thing  sidled up to [sidle.xml]
   LexSem("V","sidle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sidle"),arg1,pp("up",arg2)))),

 'sift-01': # ARG0:filter, discerning agent / ARG1:entity sifted or sifted through [sift.xml]
   LexSem("V","sift",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sift"),pp("through",arg1)))),

 'sigh-01': # ARG0:speaker / ARG1:utterance / ARG2:hearer [sigh.xml]
   LexSem("V","sigh",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sigh"),arg1,pp("to",arg2)))),

 'sigh-02': # ARG0:sigh-er [sigh.xml]
   LexSem("V","sigh",[":ARG0"],lambda arg0:S(arg0,VP(V("sigh")))),

 'sight-01': # ARG0:viewer / ARG1:thing viewed [sight.xml]
   LexSem("V","sight",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sight"),arg1))),

 'sightsee-01': # ARG0:wanderer [sightsee.xml]
   LexSem("V","sightsee",[":ARG0"],lambda arg0:S(arg0,VP(V("sightsee")))),

 'sign-01': # ARG0:signer / ARG1:document / ARG2:signature [sign.xml]
   LexSem("V","sign",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sign"),arg1,pp("as",arg2)))),

 'sign-02': # ARG0:signer, agreer / ARG1:agreement / ARG2:co-signer [sign.xml]
   LexSem("V","sign",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sign"),arg1,pp("with",arg2)))),

 'sign-in-06': # ARG0:Agent, causer of check in / ARG1:entity being checked in / ARG2:checked in to [sign.xml]
   LexSem("V","sign",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sign"),Adv("in"),arg1,pp("at",arg2)))),

 'sign-off-05': # ARG0:signer / ARG1:entity being given stamp of approval / ARG2:for what, second part of arg1 [sign.xml]
   LexSem("V","sign",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sign"),Adv("off"),arg1,pp("on",arg2)))),

 'sign-on-04': # ARG0:signer / ARG1:entity associated with [sign.xml]
   LexSem("V","sign",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sign"),Adv("on"),pp("to",arg1)))),

 'sign-up-03': # ARG0:signer, enroller / ARG1:patient enrolled / ARG2:co-signer / ARG3:signed up for [sign.xml]
   LexSem("V","sign",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("sign"),Adv("up"),arg1,pp("with",arg2),pp("to",arg3)))),

 'signal-07': # ARG0:shower / ARG1:thing seen/shown / ARG2:seer / ARG3:subject-matter of the signals (what they relate to) [sign.xml]
   LexSem("V","signal",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("signal"),arg1,pp("to",arg2),pp("about",arg3)))),

 'signify-01': # ARG0:entity holding meaning, signaling / ARG1:what arg0 signifies, means [signify.xml]
   LexSem("V","signify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("signify"),arg1))),

 'silence-01': # ARG0:agent/cause of silence / ARG1:entity silenced [silence.xml]
   LexSem("V","silence",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("silence"),arg1))),

 'silhouette-01': # ARG0:lightsource causing the silhouette / ARG1:theme. the silhouette / ARG2:background against which the silhouette is seen [silhouette.xml]
   LexSem("V","silhouette",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("silhouette"),arg1,pp("against",arg2)))),

 'silicify-01': # ARG0:cause of transformation / ARG1:entity made into silica [silicify.xml]
   LexSem("V","silicify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("silicify"),arg1))),

 'silkscreen-01': # ARG0:silkscreener, agent / ARG1:thing silkscreened, theme / ARG2:silkscreened for whom, beneficiary [silkscreen.xml]
   LexSem("V","silkscreen",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("silkscreen"),arg1,pp("for",arg2)))),

 'silt-up-01': # ARG0:cause of silting (but not the silt itself), agent / ARG1:container, river, harbor, etc. [silt.xml]
   LexSem("V","silt",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("silt"),Adv("up"),arg1))),

 'silver-01': # ARG0:causer of transformation / ARG1:thing becoming silver / ARG2:instrument or manner separate from arg 0 [silver.xml]
   LexSem("V","silver",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("silver"),arg1,arg2))),

 'simmer-01': # ARG0:cook, agent / ARG1:entity simmering [simmer.xml]
   LexSem("V","simmer",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("simmer"),arg1))),

 'simper-01': # ARG0:simperer, agent / ARG1:topic of simpering, simpered about, quotation / ARG2:recipient, simpered-to [simper.xml]
   LexSem("V","simper",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("simper"),arg1,arg2))),

 'simplify-01': # ARG0:agent, causer / ARG1:entity simplified [simplify.xml]
   LexSem("V","simplify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("simplify"),arg1))),

 'simulate-01': # ARG0:agent, simulator / ARG1:thing simulated, mimicked / ARG2:instrumental [simulate.xml]
   LexSem("V","simulate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("simulate"),arg1,pp("with",arg2)))),

 'sin-01': # ARG0:Sinner, Agent / ARG1:Thing sinned against, law or command violated [sin.xml]
   LexSem("V","sin",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sin"),pp("against",arg1)))),

 'sing-01': # ARG0:singer / ARG1:song / ARG2:audience [sing.xml]
   LexSem("V","sing",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sing"),arg1,arg2))),

 'singe-01': # ARG0:agent, causing singe / ARG1:thing getting singed / ARG2:instrument [singe.xml]
   LexSem("V","singe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("singe"),arg1,pp("with",arg2)))),

 'single-out-01': # ARG0:picker / ARG1:the one / ARG2:group / ARG3:attribute [single.xml]
   LexSem("V","single",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("single"),Adv("out"),arg1,pp("from",arg2),pp("as",arg3)))),

 'single_minded-16': # ARG0:focused person / ARG1:focused on what [mind.xml]
   LexSem("V","mind",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("mind"),arg1))),

 'sink-01': # ARG0:causer of sinking / ARG1:thing sinking / ARG2:EXT / ARG3:start point / ARG4:end point, destination / ARG5:instrument [sink.xml]
   LexSem("V","sink",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg0,arg1,arg2,arg3,arg4,arg5:S(arg0,VP(V("sink"),arg1,arg2,pp("from",arg3),pp("to",arg4),pp("with",arg5)))),

 'sinkex-02': # ARG0:agent / ARG1:target ship / ARG2:instrument/weapon used [sink.xml]
   LexSem("V","sinkex",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sinkex"),pp("on",arg1),pp("with",arg2)))),

 'sip-01': # ARG0:drinker, agent / ARG1:drink / ARG2:container [sip.xml]
   LexSem("V","sip",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sip"),arg1,pp("from",arg2)))),

 'siphon-01': # ARG0:conveyor / ARG1:entity siphoned / ARG2:siphoned from [siphon.xml]
   LexSem("V","siphon",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("siphon"),arg1,pp("from",arg2)))),

 'siphon-off-02': # ARG0:conveyor, agent / ARG1:entity siphoned / ARG2:siphoned from [siphon.xml]
   LexSem("V","siphon",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("siphon"),Adv("off"),arg1,arg2))),

 'sire-01': # ARG0:sire / ARG1:children [sire.xml]
   LexSem("V","sire",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sire"),arg1))),

 'sit-01': # ARG1:thing sitting / ARG2:location or position [sit.xml]
   LexSem("V","sit",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("sit"),arg2))),

 'sit-07': # ARG0:test-taker / ARG1:the test [sit.xml]
   LexSem("V","sit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sit"),pp("for",arg1)))),

 'sit-08': # ARG0:resource-keeper / ARG1:resource [sit.xml]
   LexSem("V","sit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sit"),pp("on",arg1)))),

 'sit-down-02': # ARG1:sitter / ARG2:second sitter if separate from arg 1 [sit.xml]
   LexSem("V","sit",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("sit"),Adv("down"),pp("with",arg2)))),

 'sit-in-05': # ARG1:substitute / ARG2:thing being temporarily replaced [sit.xml]
   LexSem("V","sit",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("sit"),Adv("in"),pp("for",arg2)))),

 'sit-in-06': # ARG0:visitor / ARG1:sitting in on what (e.g. meeting, class, etc) [sit.xml]
   LexSem("V","sit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sit"),Adv("in"),pp("on",arg1)))),

 'sit-out-04': # ARG1:non-participant / ARG2:event [sit.xml]
   LexSem("V","sit",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("sit"),Adv("out"),arg2))),

 'sit-up-03': # ARG1:sitter [sit.xml]
   LexSem("V","sit",[":ARG1"],lambda arg1:S(arg1,VP(V("sit"),Adv("up")))),

 'site-01': # ARG0:causer / ARG1:thing that is located [site.xml]
   LexSem("V","site",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("site"),arg1))),

 'situate-01': # ARG0:cause of situation, agent / ARG1:thing situated / ARG2:place [situate.xml]
   LexSem("V","situate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("situate"),arg1,pp("in",arg2)))),

 'size-01': # ARG0:agent, sizer / ARG1:thing whose size is important / ARG2:size itself, attribute of arg1 [size.xml]
   LexSem("V","size",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("size"),arg1,arg2))),

 'size-up-02': # ARG0:evaluator / ARG1:evaluated [size.xml]
   LexSem("V","size",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("size"),Adv("up"),arg1))),

 'sizzle-01': # ARG0:sizzling thing [sizzle.xml]
   LexSem("V","sizzle",[":ARG0"],lambda arg0:S(arg0,VP(V("sizzle")))),

 'skate-01': # ARG0:skater / ARG1:Path [skate.xml]
   LexSem("V","skate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("skate"),arg1))),

 'skateboard-01': # ARG0:agent, driver (transitive subject) / ARG1:thing moved (intransitive subject, transitive object) / ARG2:locations, or start point / ARG3:destination [skateboard.xml]
   LexSem("V","skateboard",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("skateboard"),arg1,pp("around",arg2),arg3))),

 'skedaddle-01': # ARG1:entity moved, skedaddler / ARG2:path / ARG3:start point / ARG4:end point [skedaddle.xml]
   LexSem("V","skedaddle",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("skedaddle"),arg2,arg3,pp("to",arg4)))),

 'sketch-01': # ARG0:artist / ARG1:art / ARG2:benefactive [sketch.xml]
   LexSem("V","sketch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sketch"),arg1,arg2))),

 'sketch-out-02': # ARG0:describer / ARG1:thing described [sketch.xml]
   LexSem("V","sketch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sketch"),Adv("out"),arg1))),

 'skew-01': # ARG0:causer / ARG1:entity skewed [skew.xml]
   LexSem("V","skew",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("skew"),arg1))),

 'skewer-01': # ARG0:skewerer / ARG1:first thing skewered / ARG2:second thing, skewered to what / ARG3:instrument, the skewer itself [skewer.xml]
   LexSem("V","skewer",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("skewer"),arg1,pp("to",arg2),pp("with",arg3)))),

 'ski-01': # ARG0:skier / ARG1:slope, trail [ski.xml]
   LexSem("V","ski",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ski"),arg1))),

 'skid-01': # ARG0:causal agent / ARG1:thing skidding [skid.xml]
   LexSem("V","skid",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("skid"),arg1))),

 'skid-02': # ARG1:thing in motion / ARG2:EXT / ARG3:start point / ARG4:end point [skid.xml]
   LexSem("V","skid",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("skid"),arg2,arg3,pp("to",arg4)))),

 'skim-01': # ARG0:thing in motion / ARG1:surface of what [skim.xml]
   LexSem("V","skim",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("skim"),arg1))),

 'skim-02': # ARG0:agent, remover / ARG1:thing removed, skimmed / ARG2:top of what, source [skim.xml]
   LexSem("V","skim",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("skim"),arg1,pp("from",arg2)))),

 'skim-off-03': # ARG0:agent, remover / ARG1:thing removed, skimmed / ARG2:top of what, source [skim.xml]
   LexSem("V","skim",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("skim"),Adv("off"),arg1,arg2))),

 'skimp-01': # ARG0:one using less / ARG1:entity used [skimp.xml]
   LexSem("V","skimp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("skimp"),pp("on",arg1)))),

 'skin-01': # ARG0:remover / ARG1:thing which used to have skin [skin.xml]
   LexSem("V","skin",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("skin"),arg1))),

 'skindive-01': # ARG0:diver / ARG1:location / ARG2:in search of [skindive.xml]
   LexSem("V","skindive",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("skindive"),pp("in",arg1),pp("for",arg2)))),

 'skip-01': # ARG0:omiter, skipper / ARG1:thing skipped [skip.xml]
   LexSem("V","skip",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("skip"),arg1))),

 'skip-02': # ARG0:one in motion [skip.xml]
   LexSem("V","skip",[":ARG0"],lambda arg0:S(arg0,VP(V("skip")))),

 'skip-off-03': # ARG0:one in motion [skip.xml]
   LexSem("V","skip",[":ARG0"],lambda arg0:S(arg0,VP(V("skip"),Adv("off")))),

 'skipper-01': # ARG0:skipper / ARG1:boat [skipper.xml]
   LexSem("V","skipper",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("skipper"),arg1))),

 'skirmish-01': # ARG0:first or all combatants / ARG1:additional combatants, if separate [skirmish.xml]
   LexSem("V","skirmish",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("skirmish"),pp("with",arg1)))),

 'skirt-01': # ARG1:entity surrounding / ARG2:entity surrounded [skirt.xml]
   LexSem("V","skirt",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("skirt"),arg2))),

 'skirt-02': # ARG0:evader / ARG1:entity skirted [skirt.xml]
   LexSem("V","skirt",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("skirt"),arg1))),

 'skitter-01': # ARG0:agent of skittering motion (transitive only) / ARG1:thing in motion [skitter.xml]
   LexSem("V","skitter",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("skitter"),arg1))),

 'skulk-01': # ARG0:agent, skulker / ARG1:path [skulk.xml]
   LexSem("V","skulk",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("skulk"),arg1))),

 'skyrocket-01': # ARG1:Logical subject, patient, thing rising / ARG2:EXT, amount risen / ARG3:start point / ARG4:end point [skyrocket.xml]
   LexSem("V","skyrocket",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("skyrocket"),arg2,pp("from",arg3),pp("to",arg4)))),

 'slack-off-01': # ARG1:entity becoming less intense / ARG2:extent [slack.xml]
   LexSem("V","slack",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("slack"),Adv("off"),pp("as",arg2)))),

 'slacken-01': # ARG0:cause of slowing / ARG1:thing slackened [slacken.xml]
   LexSem("V","slacken",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("slacken"),arg1))),

 'slake-01': # ARG0:drinker/ causer of satisfaction / ARG1:thirst/ thing lessened / ARG2:drink/ instrument [slake.xml]
   LexSem("V","slake",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("slake"),arg1,pp("with",arg2)))),

 'slake-02': # ARG0:causer of heating and crumbling / ARG1:crumbled thing / ARG2:instrument [slake.xml]
   LexSem("V","slake",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("slake"),arg1,pp("with",arg2)))),

 'slam-01': # ARG0:thrower / ARG1:thing thrown / ARG2:thrown at, to, over, etc [slam.xml]
   LexSem("V","slam",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("slam"),arg1,pp("onto",arg2)))),

 'slam-02': # ARG0:agent, hitter - animate only! / ARG1:thing hit / ARG2:instrument, thing hit by or with [slam.xml]
   LexSem("V","slam",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("slam"),arg1,arg2))),

 'slander-01': # ARG0:defamer, agent / ARG1:entity defamed [slander.xml]
   LexSem("V","slander",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("slander"),arg1))),

 'slant-01': # ARG0:causer of slant / ARG1:unlevel thing [slant.xml]
   LexSem("V","slant",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("slant"),arg1))),

 'slap-01': # ARG0:agent, hitter - animate only! / ARG1:thing hit / ARG2:instrument, thing hit by or with [slap.xml]
   LexSem("V","slap",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("slap"),arg1,arg2))),

 'slash-01': # ARG0:cutter / ARG1:thing cut / ARG2:medium, source / ARG3:instrument [slash.xml]
   LexSem("V","slash",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("slash"),arg1,arg2,pp("with",arg3)))),

 'slash-02': # ARG0:cutter / ARG1:thing reduced / ARG2:amount reduced by / ARG3:start point / ARG4:end point [slash.xml]
   LexSem("V","slash",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("slash"),arg1,pp("by",arg2),arg3,arg4))),

 'slate-01': # ARG0:scheduler, designator / ARG1:entity chosen / ARG2:function or time [slate.xml]
   LexSem("V","slate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("slate"),arg1,pp("to",arg2)))),

 'slather-01': # ARG0:slatherer, agent / ARG1:surface, what was slathered? / ARG2:substance [slather.xml]
   LexSem("V","slather",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("slather"),arg1,arg2))),

 'slaughter-01': # ARG0:killer / ARG1:corpse(s) [slaughter.xml]
   LexSem("V","slaughter",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("slaughter"),arg1))),

 'slaver-01': # ARG0:slobberer [slaver.xml]
   LexSem("V","slaver",[":ARG0"],lambda arg0:S(arg0,VP(V("slaver")))),

 'slay-01': # ARG0:killer / ARG1:corpse [slay.xml]
   LexSem("V","slay",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("slay"),arg1))),

 'sled-01': # ARG0:agent, driver (transitive subject) / ARG1:thing moved (intransitive subject, transitive object) / ARG2:locations, or start point / ARG3:destination [sled.xml]
   LexSem("V","sled",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("sled"),arg1,arg2,pp("down",arg3)))),

 'sledge-01': # ARG0:agent, sled driver / ARG1:the sled, or cargo/passengers / ARG2:location/path [sledge.xml]
   LexSem("V","sledge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sledge"),arg1,arg2))),

 'sledge-02': # ARG0:hitter / ARG1:thing hit / ARG2:instrument [sledge.xml]
   LexSem("V","sledge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sledge"),arg1,arg2))),

 'sleep-01': # ARG0:sleeper / ARG1:cognate object / ARG2:expected terminus of sleep [sleep.xml]
   LexSem("V","sleep",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sleep"),arg1,pp("through",arg2)))),

 'sleep-02': # ARG0:agentive partner / ARG1:prepositional partner [sleep.xml]
   LexSem("V","sleep",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sleep"),pp("with",arg1)))),

 'sleep-away-03': # ARG0:sleeper / ARG1:time period [sleep.xml]
   LexSem("V","sleep",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sleep"),Adv("away"),arg1))),

 'sleep-off-04': # ARG0:one getting rid of something, corrupted entity / ARG1:impurity, corruption [sleep.xml]
   LexSem("V","sleep",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sleep"),Adv("off"),arg1))),

 'sleep-over-05': # ARG0:sleeper [sleep.xml]
   LexSem("V","sleep",[":ARG0"],lambda arg0:S(arg0,VP(V("sleep"),Adv("over")))),

 'sleepwalk-01': # ARG1:theme, sleepwalker / ARG2:start point / ARG3:end point / ARG4:path [sleepwalk.xml]
   LexSem("V","sleepwalk",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("sleepwalk"),arg2,pp("into",arg3),arg4))),

 'sleet-01': # ARG1:the precipitation (i.e. "cats and dogs") [sleet.xml]
   LexSem("V","sleet",[":ARG1"],lambda arg1:S(arg1,VP(V("sleet")))),

 'sleigh-01': # ARG0:agent, driver (transitive subject) / ARG1:thing moved (intransitive subject, transitive object) / ARG2:locations, or start point / ARG3:destination [sleigh.xml]
   LexSem("V","sleigh",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("sleigh"),arg1,arg2,pp("to",arg3)))),

 'slice-01': # ARG0:cutter, agent / ARG1:entity sliced / ARG2:larger piece [slice.xml]
   LexSem("V","slice",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("slice"),arg1,arg2))),

 'slice-up-02': # ARG0:cutter, agent / ARG1:entity sliced [slice.xml]
   LexSem("V","slice",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("slice"),Adv("up"),arg1))),

 'slide-01': # ARG0:agent, causer of sliding / ARG1:thing sliding [slide.xml]
   LexSem("V","slide",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("slide"),arg1))),

 'slide-02': # ARG1:Logical subject, patient, thing falling / ARG2:EXT, amount fallen / ARG3:start point / ARG4:end point, end state of arg1 / ARG5:medium [slide.xml]
   LexSem("V","slide",[":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg1,arg2,arg3,arg4,arg5:S(arg1,VP(V("slide"),arg2,pp("from",arg3),pp("to",arg4),arg5))),

 'slim-02': # ARG0:causer / ARG1:entity slimming down [slim.xml]
   LexSem("V","slim",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("slim"),arg1))),

 'slim-down-01': # ARG0:causer / ARG1:entity slimming down [slim.xml]
   LexSem("V","slim",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("slim"),Adv("down"),arg1))),

 'slime-01': # ARG0:agent, slimer / ARG1:theme, slimee [slime.xml]
   LexSem("V","slime",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("slime"),arg1))),

 'sling-01': # ARG0:slinger / ARG1:thing slung / ARG2:target [sling.xml]
   LexSem("V","sling",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sling"),arg1,pp("at",arg2)))),

 'slink-01': # ARG0:agent, transitive subject / ARG1:theme, intransitive subject, transitive object / ARG2:start point / ARG3:end point / ARG4:path [slink.xml]
   LexSem("V","slink",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("slink"),arg1,arg2,arg3,pp("toward",arg4)))),

 'slip-01': # ARG1:Logical subject, patient, thing falling / ARG2:EXT, amount fallen / ARG3:start point / ARG4:end point, end state of arg1 / ARG5:specific aspect of arg1 slipping [slip.xml]
   LexSem("V","slip",[":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg1,arg2,arg3,arg4,arg5:S(arg1,VP(V("slip"),arg2,pp("from",arg3),pp("to",arg4),pp("in",arg5)))),

 'slip-02': # ARG0:mover / ARG1:moved / ARG2:destination [slip.xml]
   LexSem("V","slip",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("slip"),arg1,pp("into",arg2)))),

 'slip-03': # ARG0:sender / ARG1:sent / ARG2:sent-to [slip.xml]
   LexSem("V","slip",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("slip"),arg1,arg2))),

 'slip-in-04': # ARG0:stealthy includer / ARG1:stealthy inclusion [slip.xml]
   LexSem("V","slip",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("slip"),Adv("in"),arg1))),

 'slipcover-01': # ARG0:Interior decorator, agent / ARG1:the couch / ARG2:Slipcover itself, what kind of slipcover [slipcover.xml]
   LexSem("V","slipcover",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("slipcover"),arg1,pp("in",arg2)))),

 'slit-01': # ARG0:agent, slitter / ARG1:patient, thing cut / ARG2:medium, source / ARG3:instrument / ARG4:beneficiary [slit.xml]
   LexSem("V","slit",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("slit"),arg1,arg2,arg3,arg4))),

 'slither-01': # ARG0:entity slithering [slither.xml]
   LexSem("V","slither",[":ARG0"],lambda arg0:S(arg0,VP(V("slither")))),

 'sliver-01': # ARG0:producer / ARG2:source material [sliver.xml]
   LexSem("V","sliver",[":ARG0",":ARG2"],lambda arg0,arg2:S(arg0,VP(V("sliver"),arg2))),

 'slobber-01': # ARG0:drooler / ARG1:drool (cognate object) [slobber.xml]
   LexSem("V","slobber",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("slobber"),arg1))),

 'slog-01': # ARG0:entity in motion / ARG1:obstacle [slog.xml]
   LexSem("V","slog",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("slog"),pp("through",arg1)))),

 'slop-01': # ARG0:pourer / ARG1:liquid / ARG2:source container / ARG3:destination container [slop.xml]
   LexSem("V","slop",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("slop"),arg1,pp("from",arg2),pp("into",arg3)))),

 'slop-02': # ARG0:liquid / ARG1:container or surface [slop.xml]
   LexSem("V","slop",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("slop"),pp("against",arg1)))),

 'slope-01': # ARG0:entity sloping [slope.xml]
   LexSem("V","slope",[":ARG0"],lambda arg0:S(arg0,VP(V("slope")))),

 'slosh-01': # ARG0:spiller / ARG1:substance / ARG2:destination [slosh.xml]
   LexSem("V","slosh",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("slosh"),arg1,pp("around",arg2)))),

 'slouch-01': # ARG0:sloucher [slouch.xml]
   LexSem("V","slouch",[":ARG0"],lambda arg0:S(arg0,VP(V("slouch")))),

 'slow-01': # ARG0:causer of deceleration / ARG1:entity in motion [slow.xml]
   LexSem("V","slow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("slow"),arg1))),

 'slow-02': # ARG1:Logical subject, patient, thing declining / ARG3:start point / ARG4:end point [slow.xml]
   LexSem("V","slow",[":ARG1",":ARG3",":ARG4"],lambda arg1,arg3,arg4:S(arg1,VP(V("slow"),pp("from",arg3),pp("to",arg4)))),

 'slow-down-03': # ARG0:causer of deceleration / ARG1:entity in motion / ARG3:starting pace of arg 1 / ARG4:ending pace, final state of arg 1 [slow.xml]
   LexSem("V","slow",[":ARG0",":ARG1",":ARG3",":ARG4"],lambda arg0,arg1,arg3,arg4:S(arg0,VP(V("slow"),Adv("down"),arg1,arg3,arg4))),

 'slug-01': # ARG0:hitter / ARG1:hit / ARG2:hit with [slug.xml]
   LexSem("V","slug",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("slug"),arg1,pp("with",arg2)))),

 'slug-02': # ARG0:shooter / ARG1:weapon / ARG2:target [slug.xml]
   LexSem("V","slug",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("slug"),arg1,pp("into",arg2)))),

 'slug-04': # ARG0:swallower / ARG1:thing swallowed [slug.xml]
   LexSem("V","slug",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("slug"),arg1))),

 'slug-out-03': # ARG0:first arguer / ARG1:second arguer / ARG2:topic at issue / ARG3:usually 'it' [slug.xml]
   LexSem("V","slug",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("slug"),Adv("out"),arg1,pp("over",arg2),arg3))),

 'sluice-down-01': # ARG0:sluicer / ARG1:thing sluiced, location [sluice.xml]
   LexSem("V","sluice",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sluice"),Adv("down"),arg1))),

 'sluice-down-02': # ARG1:substance [sluice.xml]
   LexSem("V","sluice",[":ARG1"],lambda arg1:S(arg1,VP(V("sluice"),Adv("down")))),

 'slumber-01': # ARG0:sleeper / ARG1:cognate object [slumber.xml]
   LexSem("V","slumber",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("slumber"),arg1))),

 'slump-01': # ARG0:is an agent possible? / ARG1:thing slumping / ARG2:EXT / ARG3:start point / ARG4:end point [slump.xml]
   LexSem("V","slump",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("slump"),arg1,arg2,arg3,pp("to",arg4)))),

 'slurp-01': # ARG0:agent / ARG1:theme, entity slurped [slurp.xml]
   LexSem("V","slurp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("slurp"),arg1))),

 'smack-01': # ARG0:entity being suggestive / ARG1:entity suggested of [smack.xml]
   LexSem("V","smack",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("smack"),pp("of",arg1)))),

 'smack-02': # ARG0:hitter / ARG1:thing hit / ARG2:instrument, if separate from arg0 [smack.xml]
   LexSem("V","smack",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("smack"),arg1,pp("with",arg2)))),

 'smack-03': # ARG0:smacker / ARG1:lips, or similar / ARG2:recipient [smack.xml]
   LexSem("V","smack",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("smack"),arg1,arg2))),

 'smart-03': # ARG1:entity which is experiencing pain / ARG2:cause of pain (us. 'at') [smarten.xml]
   LexSem("V","smart",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("smart"),pp("at",arg2)))),

 'smarten-01': # ARG0:cause of transformation, agent / ARG1:entity now stylish, quick, or smart / ARG2:Instrument or Manner if separate from arg 0 / ARG3:subject, smarten about what? [smarten.xml]
   LexSem("V","smarten",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("smarten"),arg1,pp("by",arg2),arg3))),

 'smarten-up-02': # ARG0:cause of transformation, agent / ARG1:entity now stylish, quick, or smart / ARG2:Instrument or Manner if separate from arg 0 / ARG3:subject, smarten up about/to what? [smarten.xml]
   LexSem("V","smarten",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("smarten"),Adv("up"),arg1,pp("with",arg2),pp("about",arg3)))),

 'smash-01': # ARG0:agent, smasher / ARG1:patient, smashed [smash.xml]
   LexSem("V","smash",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("smash"),arg1))),

 'smash-02': # ARG1:thing in motion [smash.xml]
   LexSem("V","smash",[":ARG1"],lambda arg1:S(arg1,VP(V("smash")))),

 'smash-up-03': # ARG0:agent, smasher / ARG1:patient, thing smashed [smash.xml]
   LexSem("V","smash",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("smash"),Adv("up"),arg1))),

 'smatter-01': # ARG0:speaker / ARG1:topic / ARG2:listener [smatter.xml]
   LexSem("V","smatter",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("smatter"),arg1,pp("at",arg2)))),

 'smear-01': # ARG0:applier / ARG1:paste, thing applied / ARG2:surface, arg1 is smeared on what? [smear.xml]
   LexSem("V","smear",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("smear"),arg1,pp("on",arg2)))),

 'smear-02': # ARG0:Insulter, agent causing damage / ARG1:Person, entity insulted, damaged [smear.xml]
   LexSem("V","smear",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("smear"),arg1))),

 'smell-01': # ARG0:entity with a nose / ARG1:stinky thing [smell.xml]
   LexSem("V","smell",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("smell"),arg1))),

 'smell-02': # ARG1:stinky thing / ARG2:attribute of arg1 [smell.xml]
   LexSem("V","smell",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("smell"),pp("like",arg2)))),

 'smile-01': # ARG0:agent smiling / ARG1:cognate object / ARG2:smiled at [smile.xml]
   LexSem("V","smile",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("smile"),arg1,pp("at",arg2)))),

 'smile-02': # ARG0:smiling speaker / ARG1:utterance / ARG2:hearer [smile.xml]
   LexSem("V","smile",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("smile"),arg1,arg2))),

 'smirk-01': # ARG0:smirker / ARG1:cognate object / ARG2:source of amusement / ARG3:end state of Arg0, result of smirking [smirk.xml]
   LexSem("V","smirk",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("smirk"),arg1,pp("at",arg2),arg3))),

 'smite-01': # ARG0:agent, smiter / ARG1:the blow / ARG2:entity smitten / ARG3:with what [smite.xml]
   LexSem("V","smite",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("smite"),arg1,arg2,pp("with",arg3)))),

 'smoke-01': # ARG0:causer of smoke emission / ARG1:substance smoking [smoke.xml]
   LexSem("V","smoke",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("smoke"),arg1))),

 'smoke-02': # ARG0:smoker / ARG1:cigarettes (etc) [smoke.xml]
   LexSem("V","smoke",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("smoke"),arg1))),

 'smoke-03': # ARG0:smoker / ARG1:thing acquiring smoky flavor [smoke.xml]
   LexSem("V","smoke",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("smoke"),arg1))),

 'smolder-01': # ARG0:entity burning [smolder.xml]
   LexSem("V","smolder",[":ARG0"],lambda arg0:S(arg0,VP(V("smolder")))),

 'smooth-01': # ARG0:agent, entity causing smoothness / ARG1:thing becoming smooth / ARG2:explicit instrument [smoothen.xml]
   LexSem("V","smooth",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("smooth"),arg1,pp("with",arg2)))),

 'smooth-out-02': # ARG0:agent, entity causing smoothness / ARG1:thing becoming smooth / ARG2:explicit instrument [smoothen.xml]
   LexSem("V","smooth",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("smooth"),Adv("out"),arg1,arg2))),

 'smooth-over-03': # ARG0:soother / ARG1:hurts, difficulties [smoothen.xml]
   LexSem("V","smooth",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("smooth"),Adv("over"),arg1))),

 'smoothen-05': # ARG0:Thing causing the smoothening / ARG1:Entity smoothened [smoothen.xml]
   LexSem("V","smoothen",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("smoothen"),arg1))),

 'smother-01': # ARG0:cause of difficult breathing / ARG1:thing becoming smothered / ARG2:instrument, if agent is also present [smother.xml]
   LexSem("V","smother",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("smother"),arg1,pp("in",arg2)))),

 'smudge-01': # ARG0:smudger, agent / ARG1:material smudged (e.g., paint) / ARG2:thing smudged [smudge.xml]
   LexSem("V","smudge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("smudge"),arg1,pp("on",arg2)))),

 'smuggle-01': # ARG0:thief / ARG1:stolen object / ARG2:stolen-from / ARG3:destination [smuggle.xml]
   LexSem("V","smuggle",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("smuggle"),arg1,arg2,pp("into",arg3)))),

 'smut-01': # ARG0:cause of obsceneness / ARG1:affected entity [smut.xml]
   LexSem("V","smut",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("smut"),arg1))),

 'smut-02': # ARG1:thing moldering [smut.xml]
   LexSem("V","smut",[":ARG1"],lambda arg1:S(arg1,VP(V("smut")))),

 'smut-03': # ARG0:causer of stain / ARG1:dirt / ARG2:stained item [smut.xml]
   LexSem("V","smut",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("smut"),pp("with",arg1),arg2))),

 'snack-01': # ARG0:eater / ARG1:food [snack.xml]
   LexSem("V","snack",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("snack"),pp("on",arg1)))),

 'snag-01': # ARG0:capturer / ARG1:captured / ARG2:instrument, hook [snag.xml]
   LexSem("V","snag",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("snag"),arg1,pp("on",arg2)))),

 'snail-01': # ARG0:snail-catcher, agent / ARG1:snail itself [snail.xml]
   LexSem("V","snail",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("snail"),arg1))),

 'snake-01': # ARG0:entity in motion / ARG1:path [snake.xml]
   LexSem("V","snake",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("snake"),pp("across",arg1)))),

 'snap-01': # ARG0:speaker, snapper / ARG1:utterance / ARG2:hearer, entity being snapped at [snap.xml]
   LexSem("V","snap",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("snap"),arg1,pp("at",arg2)))),

 'snap-03': # ARG0:snapper / ARG1:fingers / ARG2:at whom/what [snap.xml]
   LexSem("V","snap",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("snap"),arg1,pp("at",arg2)))),

 'snap-04': # ARG0:maker of sounds [snap.xml]
   LexSem("V","snap",[":ARG0"],lambda arg0:S(arg0,VP(V("snap")))),

 'snap-05': # ARG0:breaker / ARG1:thing broken / ARG2:instrument / ARG3:pieces [snap.xml]
   LexSem("V","snap",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("snap"),arg1,pp("with",arg2),arg3))),

 'snap-07': # ARG0:mover / ARG1:thing in motion / ARG2:destination [snap.xml]
   LexSem("V","snap",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("snap"),arg1,pp("to",arg2)))),

 'snap-09': # ARG0:Photographer / ARG1:Shots/ pictures [snap.xml]
   LexSem("V","snap",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("snap"),arg1))),

 'snap-off-06': # ARG0:breaker / ARG1:piece(s) / ARG2:whole [snap.xml]
   LexSem("V","snap",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("snap"),Adv("off"),arg1,pp("from",arg2)))),

 'snap-up-08': # ARG0:agent, entity acquiring something / ARG1:thing acquired / ARG2:seller / ARG3:price paid / ARG4:benefactive [snap.xml]
   LexSem("V","snap",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("snap"),Adv("up"),arg1,arg2,arg3,arg4))),

 'snare-01': # ARG0:catcher, agent / ARG1:captured entity / ARG2:explicit mention of snare (usually when metaphorical) [snare.xml]
   LexSem("V","snare",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("snare"),arg1,pp("with",arg2)))),

 'snarl-01': # ARG0:mad dog / ARG1:snarl, utterance / ARG2:hearer [snarl.xml]
   LexSem("V","snarl",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("snarl"),arg1,arg2))),

 'snatch-01': # ARG0:snatched / ARG1:snatched / ARG2:source [snatch.xml]
   LexSem("V","snatch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("snatch"),arg1,arg2))),

 'snatch-away-02': # ARG0:snatcher / ARG1:thing snatched / ARG2:snatched from / ARG3:snatched for [snatch.xml]
   LexSem("V","snatch",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("snatch"),Adv("away"),arg1,pp("from",arg2),arg3))),

 'sneak-01': # ARG0:entity sneaking / ARG1:destination / ARG2:source / ARG3:surreptitious cargo [sneak.xml]
   LexSem("V","sneak",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("sneak"),pp("into",arg1),pp("from",arg2),arg3))),

 'sneak-02': # ARG0:thief / ARG1:stolen object / ARG2:stolen-from [sneak.xml]
   LexSem("V","sneak",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sneak"),arg1,arg2))),

 'sneer-01': # ARG0:sneerer, agent / ARG1:theme (usually redundant, e.g., "a sneer") / ARG2:cause of or reason for sneering / ARG3:recipient of sneer, sneered-at [sneer.xml]
   LexSem("V","sneer",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("sneer"),arg1,pp("at",arg2),pp("at",arg3)))),

 'sneeze-01': # ARG0:person sneezing [sneeze.xml]
   LexSem("V","sneeze",[":ARG0"],lambda arg0:S(arg0,VP(V("sneeze")))),

 'snicker-01': # ARG0:snickerer / ARG1:cognate object / ARG2:source of amusement / ARG3:end state of Arg0, result of snickering [snicker.xml]
   LexSem("V","snicker",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("snicker"),arg1,pp("at",arg2),arg3))),

 'sniff-01': # ARG0:sniffer / ARG1:thing sniffed [sniff.xml]
   LexSem("V","sniff",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sniff"),arg1))),

 'sniff-02': # ARG0:speaker / ARG1:utterance / ARG2:listener [sniff.xml]
   LexSem("V","sniff",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sniff"),arg1,arg2))),

 'sniff-out-03': # ARG0:finder / ARG1:found [sniff.xml]
   LexSem("V","sniff",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sniff"),Adv("out"),arg1))),

 'sniffle-01': # ARG0:sniffler, agent [sniffle.xml]
   LexSem("V","sniffle",[":ARG0"],lambda arg0:S(arg0,VP(V("sniffle")))),

 'snigger-01': # ARG0:snickerer / ARG1:cognate object / ARG2:source of amusement / ARG3:end state of Arg0, result of snickering [snigger.xml]
   LexSem("V","snigger",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("snigger"),arg1,pp("at",arg2),arg3))),

 'snip-01': # ARG0:snipper, agent / ARG1:thing snipped, patient / ARG2:instrument of snipping / ARG3:snipped from, source [snip.xml]
   LexSem("V","snip",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("snip"),arg1,arg2,arg3))),

 'snipe-01': # ARG0:sniper / ARG1:sniped at, target [snipe.xml]
   LexSem("V","snipe",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("snipe"),pp("at",arg1)))),

 'snitch-01': # ARG0:thief, agent / ARG1:thing stolen / ARG2:stolen from [snitch.xml]
   LexSem("V","snitch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("snitch"),arg1,arg2))),

 'snitch-02': # ARG0:tattle tale / ARG1:entity being ratted out / ARG2:for what offense / ARG3:authority being told [snitch.xml]
   LexSem("V","snitch",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("snitch"),pp("on",arg1),pp("for",arg2),arg3))),

 'snivel-01': # ARG0:sniveller / ARG1:the snivel itself, utterance / ARG2:sniveled at [snivel.xml]
   LexSem("V","snivel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("snivel"),arg1,pp("at",arg2)))),

 'snoop-01': # ARG0:nosy entity / ARG1:private affairs [snoop.xml]
   LexSem("V","snoop",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("snoop"),pp("in",arg1)))),

 'snooze-01': # ARG0:snoozed / ARG1:theme (usually redundant/emphatic) [snooze.xml]
   LexSem("V","snooze",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("snooze"),arg1))),

 'snore-01': # ARG0:snorer [snore.xml]
   LexSem("V","snore",[":ARG0"],lambda arg0:S(arg0,VP(V("snore")))),

 'snort-01': # ARG0:snorter / ARG1:snort itself, utterance [snort.xml]
   LexSem("V","snort",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("snort"),arg1))),

 'snort-02': # ARG0:snorter / ARG1:substance ingested [snort.xml]
   LexSem("V","snort",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("snort"),arg1))),

 'snow-01': # ARG0:cause of snow (no empty weather 'it's) / ARG1:the snow itself / ARG2:entity, location snowed on; snowy place [snow.xml]
   LexSem("V","snow",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("snow"),arg1,pp("on",arg2)))),

 'snowball-01': # ARG1:thing increased / ARG2:endstate [snowball.xml]
   LexSem("V","snowball",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("snowball"),pp("into",arg2)))),

 'snub-01': # ARG0:rude entity / ARG1:entity snubbed [snub.xml]
   LexSem("V","snub",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("snub"),arg1))),

 'snuff-01': # ARG0:snuffer / ARG1:thing snuffed [snuff.xml]
   LexSem("V","snuff",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("snuff"),arg1))),

 'snuff-out-02': # ARG0:agent of extinguishing / ARG1:thing extinguished / ARG2:instrument [snuff.xml]
   LexSem("V","snuff",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("snuff"),Adv("out"),arg1,arg2))),

 'snuffle-01': # ARG0:Person with a runny nose / ARG1:mucus [snuffle.xml]
   LexSem("V","snuffle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("snuffle"),arg1))),

 'snuffle-02': # ARG0:Sniffer / ARG1:Thing smelled [snuffle.xml]
   LexSem("V","snuffle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("snuffle"),arg1))),

 'snuffle-03': # ARG0:Crier / ARG1:utterance [snuffle.xml]
   LexSem("V","snuffle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("snuffle"),arg1))),

 'snuggle-01': # ARG0:snuggler / ARG1:snuggled with [snuggle.xml]
   LexSem("V","snuggle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("snuggle"),pp("into",arg1)))),

 'soak-01': # ARG0:causer / ARG1:thing getting wet [soak.xml]
   LexSem("V","soak",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("soak"),arg1))),

 'soak-up-02': # ARG0:absorber, agent / ARG1:liquid / ARG2:instrument, if separate from agent [soak.xml]
   LexSem("V","soak",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("soak"),Adv("up"),arg1,pp("with",arg2)))),

 'soap-01': # ARG0:agent, soaper / ARG1:thing soaped, patient [soap.xml]
   LexSem("V","soap",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("soap"),arg1))),

 'soar-01': # ARG1:Logical subject, patient, thing rising / ARG2:EXT, amount risen / ARG3:start point / ARG4:end point / ARG5:medium [soar.xml]
   LexSem("V","soar",[":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg1,arg2,arg3,arg4,arg5:S(arg1,VP(V("soar"),arg2,pp("from",arg3),pp("to",arg4),arg5))),

 'soar-02': # ARG1:thing flying [soar.xml]
   LexSem("V","soar",[":ARG1"],lambda arg1:S(arg1,VP(V("soar")))),

 'sob-01': # ARG0:weeper [sob.xml]
   LexSem("V","sob",[":ARG0"],lambda arg0:S(arg0,VP(V("sob")))),

 'sober-01': # ARG0:causer/stimulus of sobriety / ARG1:sober entity / ARG2:instrument / ARG3:intoxicant removed [sober.xml]
   LexSem("V","sober",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("sober"),arg1,pp("by",arg2),arg3))),

 'sober-up-02': # ARG0:causer of sobering / ARG1:thing getting sober [sober.xml]
   LexSem("V","sober",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sober"),Adv("up"),arg1))),

 'socialize-01': # ARG0:socialite [socialize.xml]
   LexSem("V","socialize",[":ARG0"],lambda arg0:S(arg0,VP(V("socialize")))),

 'socialize-02': # ARG0:government / ARG1:industry, etc [socialize.xml]
   LexSem("V","socialize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("socialize"),arg1))),

 'sock-01': # ARG0:hitter / ARG1:hit / ARG2:hit with [sock.xml]
   LexSem("V","sock",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sock"),arg1,pp("with",arg2)))),

 'sock-away-02': # ARG0:putter / ARG1:thing put / ARG2:put where [sock.xml]
   LexSem("V","sock",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sock"),Adv("away"),arg1,pp("in",arg2)))),

 'sockdologize-01': # ARG0:Arg0 [sockdologize.xml]
   LexSem("V","sockdologize",[":ARG0"],lambda arg0:S(arg0,VP(V("sockdologize")))),

 'sod-01': # ARG0:Gardener, landscaper, agent / ARG1:Yard, location/entity covered / ARG2:Sod itself, what kind of sod [sod.xml]
   LexSem("V","sod",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sod"),arg1,pp("with",arg2)))),

 'softboil-01': # ARG0:softboiler, agent / ARG1:thing being softboiled, patient / ARG2:softboiled with what, instrument [softboil.xml]
   LexSem("V","softboil",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("softboil"),arg1,arg2))),

 'soften-01': # ARG0:cause of softening / ARG1:soft entity [soften.xml]
   LexSem("V","soften",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("soften"),arg1))),

 'soil-01': # ARG0:causer / ARG1:entity soiled [soil.xml]
   LexSem("V","soil",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("soil"),arg1))),

 'sojourn-01': # ARG0:traveller / ARG1:location of travelling/temporary dwelling [sojourn.xml]
   LexSem("V","sojourn",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sojourn"),pp("in",arg1)))),

 'solace-01': # ARG0:comforter / ARG1:patient, made comfortable / ARG2:instrument or manner, only when separate  from agent [solace.xml]
   LexSem("V","solace",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("solace"),arg1,pp("with",arg2)))),

 'solarize-01': # ARG0:Agent/ causer of exposure / ARG1:light sensitive entity [solarize.xml]
   LexSem("V","solarize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("solarize"),arg1))),

 'solder-01': # ARG0:agent, solderer / ARG1:first thing soldered / ARG2:soldered to what / ARG3:instrument, soldered with what [solder.xml]
   LexSem("V","solder",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("solder"),arg1,pp("to",arg2),arg3))),

 'sole-01': # ARG0:Shoemaker, agent / ARG1:Shoe, location/entity covered with sole / ARG2:Sole itself, type of sole [sole.xml]
   LexSem("V","sole",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sole"),arg1,pp("with",arg2)))),

 'solemnize-01': # ARG0:Agent or Priest, cause / ARG1:Thing made real or serious [solemnize.xml]
   LexSem("V","solemnize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("solemnize"),arg1))),

 'solicit-01': # ARG0:solicitor / ARG1:thing solicited (us. 'bids') / ARG2:solicited from [solicit.xml]
   LexSem("V","solicit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("solicit"),arg1,pp("from",arg2)))),

 'solidify-01': # ARG0:cause of solidification / ARG1:entity made strong [solidify.xml]
   LexSem("V","solidify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("solidify"),arg1))),

 'solve-01': # ARG0:solver / ARG1:the problem / ARG2:manner, the solution itself [solve.xml]
   LexSem("V","solve",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("solve"),arg1,pp("with",arg2)))),

 'somersault-01': # ARG0:agent, transitive subject / ARG1:theme, intransitive subject, transitive object / ARG2:start point / ARG3:end point / ARG4:path [somersault.xml]
   LexSem("V","somersault",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("somersault"),arg1,arg2,arg3,pp("across",arg4)))),

 'soothe-01': # ARG0:causer / ARG1:entity soothed [soothe.xml]
   LexSem("V","soothe",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("soothe"),arg1))),

 'sop-01': # ARG0:gift giver / ARG1:gift / ARG2:recipient of gift [sop.xml]
   LexSem("V","sop",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sop"),pp("with",arg1),arg2))),

 'sop-02': # ARG0:Causal agent / ARG1:thing becoming wet / ARG2:the liquid [sop.xml]
   LexSem("V","sop",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sop"),pp("onto",arg1),arg2))),

 'sop-03': # ARG0:Agent / ARG1:liquid being absorbed / ARG2:absorbent material / ARG3:from where [sop.xml]
   LexSem("V","sop",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("sop"),arg1,pp("with",arg2),arg3))),

 'sorrow-01': # ARG0:entity experiencing sorrow / ARG1:cause of sorrow [sorrow.xml]
   LexSem("V","sorrow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sorrow"),pp("over",arg1)))),

 'sort-01': # ARG0:sorter / ARG1:thing being sorted / ARG2:order, criterion [sort.xml]
   LexSem("V","sort",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sort"),pp("up",arg1),pp("by",arg2)))),

 'sort-out-02': # ARG0:entity trying to understand / ARG1:subject of confusion / ARG2:in distinction to [sort.xml]
   LexSem("V","sort",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sort"),Adv("out"),arg1,pp("from",arg2)))),

 'soulsearch-01': # ARG0:soulsearcher [soulsearch.xml]
   LexSem("V","soulsearch",[":ARG0"],lambda arg0:S(arg0,VP(V("soulsearch")))),

 'sound-01': # ARG1:thing seeming / ARG2:attribute of arg1 / ARG3:viewer [sound.xml]
   LexSem("V","sound",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("sound"),arg2,pp("to",arg3)))),

 'sound-02': # ARG0:agent who activates arg1 / ARG1:noise-maker / ARG2:the sound itself (the name of the sound/song, etc., not just a characteristic) / ARG3:characteristic of the sound [sound.xml]
   LexSem("V","sound",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("sound"),arg1,pp("of",arg2),arg3))),

 'sound-04': # ARG0:agent; doctor; technician / ARG1:subject [sound.xml]
   LexSem("V","sound",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sound"),arg1))),

 'sound-off-03': # ARG0:speaker / ARG1:topic [sound.xml]
   LexSem("V","sound",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sound"),Adv("off"),arg1))),

 'sour-01': # ARG0:agent, entity causing sourness / ARG1:thing becoming sour / ARG2:'benefactive' [sour.xml]
   LexSem("V","sour",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sour"),arg1,pp("on",arg2)))),

 'source-01': # ARG0:obtainer / ARG1:thing obtained / ARG2:source [source.xml]
   LexSem("V","source",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("source"),arg1,pp("from",arg2)))),

 'source-02': # ARG0:provider / ARG1:thing provided / ARG2:entity provided for (benefactive) [source.xml]
   LexSem("V","source",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("source"),arg1,pp("on",arg2)))),

 'souse-01': # ARG0:Dunker / ARG1:Thing dunked / ARG2:Liquid [souse.xml]
   LexSem("V","souse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("souse"),arg1,pp("with",arg2)))),

 'souse-02': # ARG0:Drinker [souse.xml]
   LexSem("V","souse",[":ARG0"],lambda arg0:S(arg0,VP(V("souse")))),

 'sovietize-01': # ARG0:causer, agent / ARG1:entity sovietized / ARG2:instrument [sovietize.xml]
   LexSem("V","sovietize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sovietize"),arg1,arg2))),

 'sow-01': # ARG0:farmer, sower / ARG1:seed, entity sowed [sow.xml]
   LexSem("V","sow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sow"),arg1))),

 'space-01': # ARG0:putter, agent / ARG1:thing put / ARG2:how far apart, amount of space in between [space.xml]
   LexSem("V","space",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("space"),arg1,arg2))),

 'space-02': # ARG0:forgetter / ARG1:thing forgotten about [space.xml]
   LexSem("V","space",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("space"),arg1))),

 'span-01': # ARG0:thing extending / ARG1:entity spanned [span.xml]
   LexSem("V","span",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("span"),arg1))),

 'spank-01': # ARG0:spanker, agent / ARG1:spankee, patient / ARG2:spanked with what [spank.xml]
   LexSem("V","spank",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spank"),arg1,pp("with",arg2)))),

 'spar-01': # ARG0:agent fighting / ARG1:other person fighting [spar.xml]
   LexSem("V","spar",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("spar"),arg1))),

 'spare-01': # ARG0:savior / ARG1:entity spared / ARG2:entity spared from [spare.xml]
   LexSem("V","spare",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spare"),arg1,arg2))),

 'spare-02': # ARG0:agent able to do without / ARG1:entity spared [spare.xml]
   LexSem("V","spare",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("spare"),arg1))),

 'spark-01': # ARG0:cause of starting, agent / ARG1:thing beginning / ARG2:instrument, if agent is also present [spark.xml]
   LexSem("V","spark",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spark"),arg1,arg2))),

 'sparkle-01': # ARG1:source of light [sparkle.xml]
   LexSem("V","sparkle",[":ARG1"],lambda arg1:S(arg1,VP(V("sparkle")))),

 'spat-01': # ARG0:first fighter / ARG1:second fighter, if separate / ARG2:topic, spatted over what [spat.xml]
   LexSem("V","spat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spat"),arg1,pp("over",arg2)))),

 'spatter-01': # ARG0:spatterer / ARG1:liquid being spattered / ARG2:entity spattered [spatter.xml]
   LexSem("V","spatter",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spatter"),pp("with",arg1),arg2))),

 'spawn-01': # ARG0:causer / ARG1:thing spawned [spawn.xml]
   LexSem("V","spawn",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("spawn"),arg1))),

 'speak-01': # ARG0:talker / ARG1:subject / ARG2:hearer / ARG3:language [speak.xml]
   LexSem("V","speak",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("speak"),pp("about",arg1),pp("with",arg2),arg3))),

 'speak-out-03': # ARG0:speaker / ARG1:topic [speak.xml]
   LexSem("V","speak",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("speak"),Adv("out"),pp("for",arg1)))),

 'speak-up-02': # ARG0:speaker [speak.xml]
   LexSem("V","speak",[":ARG0"],lambda arg0:S(arg0,VP(V("speak"),Adv("up")))),

 'spear-01': # ARG0:agent, spearer / ARG1:entity being speared, patient / ARG2:instrument used, spear / ARG3:resulting state of arg1, often prepositional [spear.xml]
   LexSem("V","spear",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("spear"),arg1,arg2,arg3))),

 'spearhead-01': # ARG0:leader / ARG1:thing led [spearhead.xml]
   LexSem("V","spearhead",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("spearhead"),arg1))),

 'specialize-01': # ARG0:specialist / ARG1:speciality [specialize.xml]
   LexSem("V","specialize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("specialize"),pp("in",arg1)))),

 'specify-01': # ARG0:decider, specifier / ARG1:thing specified [specify.xml]
   LexSem("V","specify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("specify"),arg1))),

 'speckle-01': # ARG0:agent, speckler / ARG1:thing speckled, destination / ARG2:speckled with what, theme [speckle.xml]
   LexSem("V","speckle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("speckle"),arg1,pp("with",arg2)))),

 'speculate-01': # ARG0:speculator / ARG1:actual speculation / ARG2:speculation on/about what [speculate.xml]
   LexSem("V","speculate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("speculate"),arg1,pp("about",arg2)))),

 'speed-01': # ARG0:causer of fast motion / ARG1:entity in motion [speed.xml]
   LexSem("V","speed",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("speed"),arg1))),

 'speed-up-02': # ARG0:causer of fast motion / ARG1:entity in motion [speed.xml]
   LexSem("V","speed",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("speed"),Adv("up"),arg1))),

 'spell-01': # ARG0:speller / ARG1:word / ARG2:spelling [spell.xml]
   LexSem("V","spell",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spell"),arg1,arg2))),

 'spell-02': # ARG0:theme / ARG1:explanation [spell.xml]
   LexSem("V","spell",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("spell"),arg1))),

 'spell-out-03': # ARG0:thing explaining / ARG1:thing explained [spell.xml]
   LexSem("V","spell",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("spell"),Adv("out"),arg1))),

 'spellbind-01': # ARG0:Stimulus of fascination / ARG1:spellbound entity / ARG2:instrument, if separate from arg0 [spellbind.xml]
   LexSem("V","spellbind",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spellbind"),arg1,pp("with",arg2)))),

 'spend-01': # ARG0:spender, buyer / ARG1:thing bought, commodity / ARG2:seller / ARG3:price paid, money / ARG4:benefactive [spend.xml]
   LexSem("V","spend",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("spend"),pp("on",arg1),arg2,pp("about",arg3),arg4))),

 'spend-02': # ARG0:bider, waiter / ARG1:unit of time / ARG2:activity [spend.xml]
   LexSem("V","spend",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spend"),arg1,arg2))),

 'spend-04': # ARG1:thing used up / ARG2:cause [spend.xml]
   LexSem("V","spend",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("spend"),pp("from",arg2)))),

 'spend-down-03': # ARG0:spender / ARG1:money spent down / ARG2:limit spent down to [spend.xml]
   LexSem("V","spend",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spend"),Adv("down"),arg1,pp("to",arg2)))),

 'spew-01': # ARG0:starting point, cause of flow / ARG1:entity coming out / ARG2:direction [spew.xml]
   LexSem("V","spew",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spew"),arg1,pp("into",arg2)))),

 'spice-01': # ARG0:Chef, agent / ARG1:Food made spicy / ARG2:Spices themselves, what kind of spices [spice.xml]
   LexSem("V","spice",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spice"),arg1,pp("with",arg2)))),

 'spike-01': # ARG0:killer / ARG1:corpse [spike.xml]
   LexSem("V","spike",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("spike"),arg1))),

 'spike-02': # ARG0:piercer / ARG1:thing pierced / ARG2:instrument [spike.xml]
   LexSem("V","spike",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spike"),arg1,pp("by",arg2)))),

 'spike-03': # ARG0:adder of alcohol / ARG1:innocuous beverage / ARG2:alcohol [spike.xml]
   LexSem("V","spike",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spike"),arg1,pp("with",arg2)))),

 'spike-04': # ARG1:entity peaking / ARG2:extent / ARG3:start point / ARG4:end point [spike.xml]
   LexSem("V","spike",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("spike"),pp("of",arg2),pp("from",arg3),pp("to",arg4)))),

 'spike-out-05': # ARG1:flower [spike.xml]
   LexSem("V","spike",[":ARG1"],lambda arg1:S(arg1,VP(V("spike"),Adv("out")))),

 'spill-01': # ARG0:entity splilling / ARG1:entity spilled / ARG2:location/direction [spill.xml]
   LexSem("V","spill",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spill"),arg1,pp("into",arg2)))),

 'spill-out-03': # ARG1:entity spilled out / ARG2:location/direction [spill.xml]
   LexSem("V","spill",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("spill"),Adv("out"),pp("onto",arg2)))),

 'spill-over-02': # ARG1:entity spilled over / ARG2:location/direction [spill.xml]
   LexSem("V","spill",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("spill"),Adv("over"),pp("to",arg2)))),

 'spin-01': # ARG0:causative agent / ARG1:thing spinning [spin.xml]
   LexSem("V","spin",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("spin"),arg1))),

 'spin-03': # ARG0:storyteller / ARG1:story [spin.xml]
   LexSem("V","spin",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("spin"),arg1))),

 'spin-04': # ARG0:creator / ARG1:creation / ARG2:raw material [spin.xml]
   LexSem("V","spin",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spin"),pp("into",arg1),arg2))),

 'spin-off-02': # ARG0:creator / ARG1:thing created / ARG2:source / ARG3:benefactive / ARG4:attribute, secondary predication [spin.xml]
   LexSem("V","spin",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("spin"),Adv("off"),arg1,pp("from",arg2),pp("to",arg3),pp("as",arg4)))),

 'spindle-01': # ARG0:seamstress / ARG1:thing spindled / ARG2:spindle, location [spindle.xml]
   LexSem("V","spindle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spindle"),arg1,pp("on",arg2)))),

 'spiral-01': # ARG0:mover / ARG1:moved / ARG2:destination [spiral.xml]
   LexSem("V","spiral",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spiral"),arg1,arg2))),

 'spirit-01': # ARG1:entity with high spirits [spirit.xml]
   LexSem("V","spirit",[":ARG1"],lambda arg1:S(arg1,VP(V("spirit")))),

 'spiritualize-01': # ARG0:one assigning spiritual meaning / ARG1:thing spiritualized [spiritualize.xml]
   LexSem("V","spiritualize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("spiritualize"),arg1))),

 'spit-01': # ARG0:spitter / ARG1:explicit mention of saliva / ARG2:spat-on [spit.xml]
   LexSem("V","spit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spit"),arg1,pp("on",arg2)))),

 'spite-01': # ARG0:spiteful one / ARG1:entity spited / ARG2:for what [spite.xml]
   LexSem("V","spite",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spite"),arg1,pp("for",arg2)))),

 'splash-01': # ARG0:splasher / ARG1:water / ARG2:splashed [splash.xml]
   LexSem("V","splash",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("splash"),arg1,pp("on",arg2)))),

 'splash-03': # ARG0:spender / ARG1:thing bought, money spent on / ARG2:seller / ARG3:money, price paid / ARG4:benefactive [splash.xml]
   LexSem("V","splash",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("splash"),pp("to",arg1),arg2,arg3,arg4))),

 'splash-out-02': # ARG0:spender / ARG1:thing bought / ARG2:seller / ARG3:price paid / ARG4:benefactive [splash.xml]
   LexSem("V","splash",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("splash"),Adv("out"),pp("on",arg1),arg2,arg3,pp("for",arg4)))),

 'splatter-01': # ARG0:applier / ARG1:liquid / ARG2:surface [splatter.xml]
   LexSem("V","splatter",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("splatter"),pp("with",arg1),arg2))),

 'splay-01': # ARG0:causer of growth, agent / ARG1:thing splayed / ARG2:amount increased by, EXT or MNR / ARG3:start point / ARG4:end point [splay.xml]
   LexSem("V","splay",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("splay"),arg1,pp("through",arg2),arg3,arg4))),

 'splice-01': # ARG0:Splicer / ARG1:First entity joined together (or all entities) / ARG2:second entity joined together [splice.xml]
   LexSem("V","splice",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("splice"),arg1,pp("with",arg2)))),

 'splice-02': # ARG0:Minister / ARG1:Party married [splice.xml]
   LexSem("V","splice",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("splice"),arg1))),

 'splint-01': # ARG0:doctor / ARG1:patient or broken limb [splint.xml]
   LexSem("V","splint",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("splint"),arg1))),

 'splinter-01': # ARG0:agent or cause / ARG1:thing broken / ARG2:instrument [splinter.xml]
   LexSem("V","splinter",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("splinter"),arg1,arg2))),

 'split-01': # ARG0:entity causing separation / ARG1:thing(s) being divided / ARG2:divided among (resulting/destination groups) / ARG3:divided from, if separate from arg1 / ARG4:subject matter of split [split.xml]
   LexSem("V","split",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("split"),arg1,pp("among",arg2),arg3,arg4))),

 'split-02': # ARG0:entity leaving / ARG1:place left [split.xml]
   LexSem("V","split",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("split"),arg1))),

 'split-up-03': # ARG0:entity causing separation / ARG1:thing being divided / ARG2:split up into (the groups) [split.xml]
   LexSem("V","split",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("split"),Adv("up"),arg1,pp("into",arg2)))),

 'splotch-01': # ARG0:splotcher, agent / ARG1:thing splotched, destination / ARG2:splotched with what, theme [splotch.xml]
   LexSem("V","splotch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("splotch"),pp("over",arg1),arg2))),

 'splutter-01': # ARG0:agent, splutterer / ARG1:utterance, spluttered about what / ARG2:spluttered to whom, recipient [splutter.xml]
   LexSem("V","splutter",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("splutter"),arg1,arg2))),

 'spoil-01': # ARG0:causer / ARG1:entity decaying [spoil.xml]
   LexSem("V","spoil",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("spoil"),arg1))),

 'sponge-01': # ARG0:agent or causer / ARG1:entity gathered / ARG2:gathered into / ARG3:beneficiary [sponge.xml]
   LexSem("V","sponge",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("sponge"),pp("for",arg1),arg2,arg3))),

 'sponge-02': # ARG0:entity acting like a sponge/leach / ARG1:thing gained, ("absorbed") / ARG2:source, entity taken advantage of [sponge.xml]
   LexSem("V","sponge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sponge"),arg1,pp("off",arg2)))),

 'sponsor-01': # ARG0:sponsor / ARG1:thing sponsored [sponsor.xml]
   LexSem("V","sponsor",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sponsor"),arg1))),

 'spook-01': # ARG0:cause of fright / ARG1:scared entity / ARG2:instrument, if arg0 is also present [spook.xml]
   LexSem("V","spook",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spook"),arg1,pp("with",arg2)))),

 'spool-01': # ARG0:spooler / ARG1:thing spooled / ARG2:spool, location [spool.xml]
   LexSem("V","spool",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spool"),arg1,pp("on",arg2)))),

 'spoonfeed-01': # ARG0:Agent, spoonfeeder / ARG1:food being given to recipient / ARG2:thing being spoonfed, recipient [spoonfeed.xml]
   LexSem("V","spoon-feed",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spoon-feed"),arg1,arg2))),

 'sport-01': # ARG0:wearer / ARG1:clothing [sport.xml]
   LexSem("V","sport",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sport"),arg1))),

 'sport-02': # ARG0:sporter / ARG1:victim [sport.xml]
   LexSem("V","sport",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sport"),pp("with",arg1)))),

 'spot-01': # ARG0:finder / ARG1:thing found / ARG2:benefactive, found for / ARG3:attribute [spot.xml]
   LexSem("V","spot",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("spot"),arg1,arg2,arg3))),

 'spot-02': # ARG0:painter / ARG1:canvas / ARG2:paint [spot.xml]
   LexSem("V","spot",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spot"),arg1,pp("with",arg2)))),

 'spotlight-01': # ARG0:entity throwing the spotlight on something / ARG1:entity spotlighted [spotlight.xml]
   LexSem("V","spotlight",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("spotlight"),arg1))),

 'spout-01': # ARG0:spouter / ARG1:liquid [spout.xml]
   LexSem("V","spout",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("spout"),arg1))),

 'spout-off-02': # ARG0:speaker / ARG1:explicit mention of 'mouth' (or equivalent) / ARG2:utterance iteslf (quote/ 'that __') / ARG3:subject matter of utterance ('about __') [spout.xml]
   LexSem("V","spout",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("spout"),Adv("off"),arg1,arg2,pp("about",arg3)))),

 'sprain-01': # ARG0:breaker / ARG1:broken [sprain.xml]
   LexSem("V","sprain",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sprain"),arg1))),

 'sprawl-01': # ARG0:causer / ARG1:thing in sprawling mode / ARG2:location [sprawl.xml]
   LexSem("V","sprawl",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sprawl"),arg1,pp("on",arg2)))),

 'spray-01': # ARG0:applier / ARG1:liquid / ARG2:surface [spray.xml]
   LexSem("V","spray",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spray"),arg1,pp("onto",arg2)))),

 'spraypaint-01': # ARG0:agent, painter / ARG1:surface / ARG2:explicit mention of paint [spraypaint.xml]
   LexSem("V","spraypaint",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spraypaint"),arg1,arg2))),

 'spread-01': # ARG0:applier, intentional agent / ARG1:substance / ARG2:surface / ARG3:instrument, brush [spread.xml]
   LexSem("V","spread",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("spread"),arg1,pp("over",arg2),pp("with",arg3)))),

 'spread-02': # ARG1:substance [spread.xml]
   LexSem("V","spread",[":ARG1"],lambda arg1:S(arg1,VP(V("spread")))),

 'spread-03': # ARG0:distributor, agent / ARG1:things distributed [spread.xml]
   LexSem("V","spread",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("spread"),arg1))),

 'spread-out-04': # ARG0:agent / ARG1:thing spread out / ARG2:location, spread amongst [spread.xml]
   LexSem("V","spread",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spread"),Adv("out"),arg1,pp("on",arg2)))),

 'spreadeagle-01': # ARG0:causer of stretched out entity / ARG1:thing spread out / ARG2:stretched over [spreadeagle.xml]
   LexSem("V","spread-eagle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spread-eagle"),arg1,pp("across",arg2)))),

 'spreadeagle-02': # ARG1:person spead-eagled [spreadeagle.xml]
   LexSem("V","spreadeagle",[":ARG1"],lambda arg1:S(arg1,VP(V("spreadeagle")))),

 'spring-01': # ARG1:entity in motion / ARG2:start point / ARG3:end point/state [spring.xml]
   LexSem("V","spring",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("spring"),pp("from",arg2),pp("to",arg3)))),

 'spring-up-02': # ARG1:entity springing up [spring.xml]
   LexSem("V","spring",[":ARG1"],lambda arg1:S(arg1,VP(V("spring"),Adv("up")))),

 'sprinkle-01': # ARG0:agent, sprinkler / ARG1:liquid / ARG2:sprinkled-upon [sprinkle.xml]
   LexSem("V","sprinkle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sprinkle"),pp("with",arg1),arg2))),

 'sprinkle-02': # ARG1:Cognate object, mention of what is sprinkled, raindrops [sprinkle.xml]
   LexSem("V","sprinkle",[":ARG1"],lambda arg1:S(arg1,VP(V("sprinkle")))),

 'spritz-01': # ARG0:spritzer, agent / ARG1:liquid spritzed (water), theme / ARG2:thing spritzed, destination [spritz.xml]
   LexSem("V","spritz",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spritz"),pp("with",arg1),arg2))),

 'sprout-01': # ARG0:farmer / ARG1:plant / ARG2:field [sprout.xml]
   LexSem("V","sprout",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sprout"),arg1,pp("in",arg2)))),

 'spruce-up-01': # ARG0:cleaner / ARG1:thing made tidy [spruce.xml]
   LexSem("V","spruce",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("spruce"),Adv("up"),arg1))),

 'spur-01': # ARG0:cause of increase, agent / ARG1:thing increasing / ARG2:instrument, if agent is also present [spur.xml]
   LexSem("V","spur",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("spur"),arg1,arg2))),

 'spurn-01': # ARG0:rejecter / ARG1:thing rejected [spurn.xml]
   LexSem("V","spurn",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("spurn"),arg1))),

 'spurt-01': # ARG1:liquid / ARG2:source [spurt.xml]
   LexSem("V","spurt",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("spurt"),pp("from",arg2)))),

 'spurt-02': # ARG1:thing in motion / ARG2:EXT / ARG3:start point / ARG4:end point [spurt.xml]
   LexSem("V","spurt",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("spurt"),pp("by",arg2),arg3,arg4))),

 'sputter-01': # ARG0:maker of sounds [sputter.xml]
   LexSem("V","sputter",[":ARG0"],lambda arg0:S(arg0,VP(V("sputter")))),

 'spy-01': # ARG0:secret agent / ARG1:entity spied/seen [spy.xml]
   LexSem("V","spy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("spy"),arg1))),

 'squabble-01': # ARG0:first arguer / ARG1:second arguer / ARG2:topic [squabble.xml]
   LexSem("V","squabble",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("squabble"),arg1,pp("over",arg2)))),

 'squall-01': # ARG0:One crying [squall.xml]
   LexSem("V","squall",[":ARG0"],lambda arg0:S(arg0,VP(V("squall")))),

 'squall-02': # ARG0:Yeller [squall.xml]
   LexSem("V","squall",[":ARG0"],lambda arg0:S(arg0,VP(V("squall")))),

 'squall-03': # ARG1:Thing blowing [squall.xml]
   LexSem("V","squall",[":ARG1"],lambda arg1:S(arg1,VP(V("squall")))),

 'squander-01': # ARG0:wasteful one, agent / ARG1:entity squandered [squander.xml]
   LexSem("V","squander",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("squander"),arg1))),

 'square-01': # ARG0:cause of rightness, agent / ARG1:thing being set to rights [square.xml]
   LexSem("V","square",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("square"),arg1))),

 'square-02': # ARG0:mathematician / ARG1:number / ARG2:result [square.xml]
   LexSem("V","square",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("square"),arg1,pp("to",arg2)))),

 'square-04': # ARG0:cause/agent / ARG1:thing becoming square-shaped [square.xml]
   LexSem("V","square",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("square"),arg1))),

 'square-off-03': # ARG0:causal agent / ARG1:competitor / ARG2:opponent / ARG3:prize [square.xml]
   LexSem("V","square",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("square"),Adv("off"),arg1,pp("against",arg2),arg3))),

 'squaredance-01': # ARG0:agent, causer of squaredancing (transitive subject only) / ARG1:theme, squaredancer(s) (intransitive subject, transitive object) / ARG2:path or location of squaredancing [squaredance.xml]
   LexSem("V","squaredance",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("squaredance"),arg1,pp("in",arg2)))),

 'squash-01': # ARG0:agent of compression / ARG1:patient of compression [squash.xml]
   LexSem("V","squash",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("squash"),arg1))),

 'squat-01': # ARG1:thing sitting, squatting / ARG2:location [squat.xml]
   LexSem("V","squat",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("squat"),pp("upon",arg2)))),

 'squat-02': # ARG0:occupier / ARG1:occupied [squat.xml]
   LexSem("V","squat",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("squat"),arg1))),

 'squawk-01': # ARG0:emitter of sounds [squawk.xml]
   LexSem("V","squawk",[":ARG0"],lambda arg0:S(arg0,VP(V("squawk")))),

 'squeak-01': # ARG0:causal agent / ARG1:entity squeaking [squeak.xml]
   LexSem("V","squeak",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("squeak"),arg1))),

 'squeak-02': # ARG0:entity struggling / ARG1:path [squeak.xml]
   LexSem("V","squeak",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("squeak"),pp("through",arg1)))),

 'squeal-01': # ARG0:emitter of sounds [squeal.xml]
   LexSem("V","squeal",[":ARG0"],lambda arg0:S(arg0,VP(V("squeal")))),

 'squeegee-01': # ARG0:squeegeer / ARG1:squeegeed [squeegee.xml]
   LexSem("V","squeegee",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("squeegee"),arg1))),

 'squeeze-01': # ARG0:squeezer / ARG1:squozen [squeeze.xml]
   LexSem("V","squeeze",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("squeeze"),arg1))),

 'squeeze-02': # ARG0:squeezer / ARG1:extracted material / ARG2:source / ARG3:destination, arg1 squeezed into what? [squeeze.xml]
   LexSem("V","squeeze",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("squeeze"),arg1,arg2,arg3))),

 'squeeze-03': # ARG0:Agent / ARG1:Logical subject, patient, thing falling / ARG2:EXT, amount fallen / ARG3:Start point / ARG4:End point, end state of arg1 [squeeze.xml]
   LexSem("V","squeeze",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("squeeze"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'squeeze-out-04': # ARG0:squeezer / ARG1:extracted material / ARG2:source [squeeze.xml]
   LexSem("V","squeeze",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("squeeze"),Adv("out"),arg1,arg2))),

 'squelch-01': # ARG0:squelcher, agent / ARG1:thing squelched [squelch.xml]
   LexSem("V","squelch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("squelch"),arg1))),

 'squint-01': # ARG0:looker / ARG1:looked at [squint.xml]
   LexSem("V","squint",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("squint"),pp("at",arg1)))),

 'squirm-01': # ARG0:squirmer / ARG1:path [squirm.xml]
   LexSem("V","squirm",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("squirm"),arg1))),

 'squirt-01': # ARG0:applier / ARG1:liquid, substance / ARG2:surface [squirt.xml]
   LexSem("V","squirt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("squirt"),pp("with",arg1),arg2))),

 'squish-01': # ARG0:agent, squisher / ARG1:patient, thing being squished / ARG2:instrument used / ARG3:resulting state of arg1, often prepositional [squish.xml]
   LexSem("V","squish",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("squish"),arg1,arg2,arg3))),

 'squish-02': # ARG0:squisher / ARG1:thing squished / ARG2:squished into (entity created) [squish.xml]
   LexSem("V","squish",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("squish"),arg1,pp("into",arg2)))),

 'stab-01': # ARG0:stabber / ARG1:victim, thing stabbed / ARG2:sharp implement / ARG3:specific location of wound / ARG4:result of stabbing [stab.xml]
   LexSem("V","stab",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("stab"),arg1,pp("with",arg2),pp("in",arg3),pp("to",arg4)))),

 'stabilize-01': # ARG0:cause of stability, agent / ARG1:thing stabilized / ARG2:stabilized at [stabilize.xml]
   LexSem("V","stabilize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stabilize"),arg1,pp("at",arg2)))),

 'stable-02': # ARG0:stabler / ARG1:thing stabled / ARG2:stable, location [stabilize.xml]
   LexSem("V","stable",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stable"),arg1,pp("in",arg2)))),

 'stack-01': # ARG0:stacker / ARG1:one thing / ARG2:the other thing arg1 is stacked onto, destination [stack.xml]
   LexSem("V","stack",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stack"),arg1,pp("on",arg2)))),

 'stack-up-02': # ARG1:thing existing [stack.xml]
   LexSem("V","stack",[":ARG1"],lambda arg1:S(arg1,VP(V("stack"),Adv("up")))),

 'stack-up-03': # ARG0:stacker / ARG1:thing(s) being stacked [stack.xml]
   LexSem("V","stack",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stack"),Adv("up"),arg1))),

 'staff-01': # ARG0:agentive staffer, employment agency / ARG1:workplace / ARG2:staff, workers [staff.xml]
   LexSem("V","staff",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("staff"),arg1,pp("with",arg2)))),

 'stage-01': # ARG0:performer / ARG1:performance [stage.xml]
   LexSem("V","stage",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stage"),arg1))),

 'stage-02': # ARG0:assessor of stage / ARG1:tissue or organ examined / ARG2:stage [stage.xml]
   LexSem("V","stage",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stage"),arg1,pp("at",arg2)))),

 'stagger-01': # ARG1:thing in motion [stagger.xml]
   LexSem("V","stagger",[":ARG1"],lambda arg1:S(arg1,VP(V("stagger")))),

 'stagger-02': # ARG0:causer of reaction / ARG1:thing reacting, staggering [stagger.xml]
   LexSem("V","stagger",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stagger"),arg1))),

 'stagger-03': # ARG0:Agent, arranger / ARG1:thing arranged; staggered event(s) [stagger.xml]
   LexSem("V","stagger",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stagger"),arg1))),

 'stagnate-01': # ARG1:thing stagnating [stagnate.xml]
   LexSem("V","stagnate",[":ARG1"],lambda arg1:S(arg1,VP(V("stagnate")))),

 'stain-01': # ARG0:causer / ARG1:entity stained / ARG2:stained with what [stain.xml]
   LexSem("V","stain",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stain"),arg1,arg2))),

 'stake-01': # ARG0:better / ARG1:amount of bet / ARG2:basis, proposition, bet-on [stake.xml]
   LexSem("V","stake",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stake"),arg1,pp("on",arg2)))),

 'stake-out-02': # ARG0:claimer, asserter / ARG1:thing claimed, asserted / ARG2:benefactive, claimed/asserted for / ARG3:secondary predication [stake.xml]
   LexSem("V","stake",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("stake"),Adv("out"),arg1,arg2,arg3))),

 'stalk-01': # ARG0:walker [stalk.xml]
   LexSem("V","stalk",[":ARG0"],lambda arg0:S(arg0,VP(V("stalk")))),

 'stalk-02': # ARG0:thing following / ARG1:thing followed [stalk.xml]
   LexSem("V","stalk",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stalk"),arg1))),

 'stall-01': # ARG0:staller / ARG1:thing stalled [stall.xml]
   LexSem("V","stall",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stall"),arg1))),

 'stall-off-03': # ARG0:cause of delay / ARG1:thing delayed, stalled [stall.xml]
   LexSem("V","stall",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stall"),Adv("off"),arg1))),

 'stall-out-02': # ARG0:staller / ARG1:thing stalled [stall.xml]
   LexSem("V","stall",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stall"),Adv("out"),arg1))),

 'stammer-01': # ARG0:speaker / ARG1:utterance / ARG2:listener [stammer.xml]
   LexSem("V","stammer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stammer"),arg1,pp("to",arg2)))),

 'stamp-01': # ARG0:imprinter, agent / ARG1:thing stamped / ARG2:design, seal [stamp.xml]
   LexSem("V","stamp",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stamp"),arg1,pp("with",arg2)))),

 'stamp-02': # ARG0:assigner of attribute / ARG1:entity stamped / ARG2:attribute on arg1 [stamp.xml]
   LexSem("V","stamp",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stamp"),arg1,pp("into",arg2)))),

 'stamp-04': # ARG0:agent, footstomper / ARG1:feet [stamp.xml]
   LexSem("V","stamp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stamp"),arg1))),

 'stamp-out-05': # ARG0:agent / ARG1:thing stamped_out [stamp.xml]
   LexSem("V","stamp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stamp"),Adv("out"),arg1))),

 'stampede-01': # ARG0:causal agent / ARG1:entity stampeding, in motion / ARG2:stampeded into, path or direction [stampede.xml]
   LexSem("V","stampede",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stampede"),arg1,pp("into",arg2)))),

 'stanch-01': # ARG0:stancher / ARG1:stanched [stanch.xml]
   LexSem("V","stanch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stanch"),arg1))),

 'stand-01': # ARG0:causal agent / ARG1:thing standing / ARG2:location [stand.xml]
   LexSem("V","stand",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stand"),arg1,arg2))),

 'stand-02': # ARG1:entity poised / ARG2:action [stand.xml]
   LexSem("V","stand",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("stand"),pp("to",arg2)))),

 'stand-03': # ARG0:tolerator / ARG1:thing tolerated [stand.xml]
   LexSem("V","stand",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stand"),arg1))),

 'stand-04': # ARG1:focus / ARG2:attribute [stand.xml]
   LexSem("V","stand",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("stand"),pp("at",arg2)))),

 'stand-08': # ARG0:representative entity / ARG1:represented, stand for what? [stand.xml]
   LexSem("V","stand",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stand"),pp("for",arg1)))),

 'stand-by-05': # ARG1:stander [stand.xml]
   LexSem("V","stand",[":ARG1"],lambda arg1:S(arg1,VP(V("stand"),Adv("by")))),

 'stand-down-10': # ARG0:agent, causer of arg1 withdrawing / ARG1:entity backing off, withdrawing / ARG2:action backed off, withdrawn from [stand.xml]
   LexSem("V","stand",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stand"),Adv("down"),arg1,pp("from",arg2)))),

 'stand-out-06': # ARG1:noticeable entity [stand.xml]
   LexSem("V","stand",[":ARG1"],lambda arg1:S(arg1,VP(V("stand"),Adv("out")))),

 'stand-up-07': # ARG1:riser [stand.xml]
   LexSem("V","stand",[":ARG1"],lambda arg1:S(arg1,VP(V("stand"),Adv("up")))),

 'stand-up-09': # ARG0:entity not showing up / ARG1:entity that got ditched [stand.xml]
   LexSem("V","stand",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stand"),Adv("up"),arg1))),

 'standardize-01': # ARG0:cause, agent / ARG1:entity standardized [standardize.xml]
   LexSem("V","standardize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("standardize"),arg1))),

 'staple-01': # ARG0:cause of attachment, agent / ARG1:entity stapled / ARG2:entity stapled to [staple.xml]
   LexSem("V","staple",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("staple"),arg1,pp("to",arg2)))),

 'star-01': # ARG1:actor / ARG2:production / ARG3:attribute [star.xml]
   LexSem("V","star",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("star"),pp("in",arg2),arg3))),

 'starch-01': # ARG0:starcher, sprayer / ARG1:entity sprayed, starched / ARG2:starched with what (redundant and unlikely) [starch.xml]
   LexSem("V","starch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("starch"),arg1,arg2))),

 'stare-01': # ARG0:looker / ARG1:looked at [stare.xml]
   LexSem("V","stare",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stare"),pp("at",arg1)))),

 'stare-down-02': # ARG0:intimidator / ARG1:intimidated [stare.xml]
   LexSem("V","stare",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stare"),Adv("down"),arg1))),

 'start-01': # ARG0:Agent / ARG1:Theme(-Creation) / ARG2:Subevent or thing that Arg1 starts with [start.xml]
   LexSem("V","start",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("start"),arg1,pp("with",arg2)))),

 'start-03': # ARG0:startled entity / ARG1:cause of startlement [start.xml]
   LexSem("V","start",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("start"),pp("at",arg1)))),

 'start-06': # ARG0:traveler / ARG1:path / ARG2:destination [start.xml]
   LexSem("V","start",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("start"),arg1,pp("toward",arg2)))),

 'start-101': # ARG0:Doctor / ARG1:Patient / ARG2:medicine/diet/course of treatment [start.xml]
   LexSem("V","start",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("start"),arg1,pp("on",arg2)))),

 'start-in-07': # ARG0:speaker / ARG1:topic of the harangue / ARG2:hearer [start.xml]
   LexSem("V","start",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("start"),Adv("in"),pp("about",arg1),pp("on",arg2)))),

 'start-off-02': # ARG0:causal agent / ARG1:event [start.xml]
   LexSem("V","start",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("start"),Adv("off"),arg1))),

 'start-out-05': # ARG0:Agent / ARG1:Object / ARG2:secondary predication (can be used on arg0 or arg1) [start.xml]
   LexSem("V","start",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("start"),Adv("out"),arg1,pp("as",arg2)))),

 'start-over-08': # ARG0:agent/cause of starting / ARG1:thing starting again / ARG2:starting point [start.xml]
   LexSem("V","start",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("start"),Adv("over"),arg1,pp("from",arg2)))),

 'start-up-04': # ARG0:Agent / ARG1:Theme(-Creation) / ARG2:Instrument / ARG3:secondary predication on arg1 [start.xml]
   LexSem("V","start",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("start"),Adv("up"),arg1,arg2,arg3))),

 'startle-01': # ARG0:cause of surprise / ARG1:experiencer of surprise [startle.xml]
   LexSem("V","startle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("startle"),arg1))),

 'starve-01': # ARG0:cause of starvation / ARG1:entity starving / ARG2:food/nutrient (etc) arg1 is starving for [starve.xml]
   LexSem("V","starve",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("starve"),arg1,pp("of",arg2)))),

 'stash-01': # ARG0:agent, stasher / ARG1:thing stashed / ARG2:location or position, or attribute [stash.xml]
   LexSem("V","stash",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stash"),arg1,pp("in",arg2)))),

 'stash-away-02': # ARG0:hider / ARG1:thing hidden [stash.xml]
   LexSem("V","stash",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stash"),Adv("away"),arg1))),

 'state-01': # ARG0:announcer / ARG1:utterance / ARG2:hearer / ARG3:attributive [state.xml]
   LexSem("V","state",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("state"),arg1,pp("to",arg2),arg3))),

 'station-01': # ARG0:high command, agent / ARG1:military people / ARG2:place [station.xml]
   LexSem("V","station",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("station"),arg1,pp("in",arg2)))),

 'stave-off-01': # ARG0:preventer, agent / ARG1:action prevented [stave.xml]
   LexSem("V","stave",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stave"),Adv("off"),arg1))),

 'stay-01': # ARG1:thing remaining / ARG2:benefactive, rare / ARG3:attribute of arg1 [stay.xml]
   LexSem("V","stay",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("stay"),pp("for",arg2),pp("in",arg3)))),

 'stay-03': # ARG0:postponer / ARG1:thing postponed [stay.xml]
   LexSem("V","stay",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stay"),arg1))),

 'stay-on-02': # ARG1:thing remaining, staying, lingering [stay.xml]
   LexSem("V","stay",[":ARG1"],lambda arg1:S(arg1,VP(V("stay"),Adv("on")))),

 'stay-over-04': # ARG1:entity staying over / ARG2:where [stay.xml]
   LexSem("V","stay",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("stay"),Adv("over"),pp("in",arg2)))),

 'steady-01': # ARG0:cause of steadiness, agent / ARG1:thing made steady [steady.xml]
   LexSem("V","steady",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("steady"),arg1))),

 'steal-01': # ARG0:thief, agent / ARG1:thing stolen / ARG2:stolen from [steal.xml]
   LexSem("V","steal",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("steal"),arg1,pp("from",arg2)))),

 'steal-away-02': # ARG0:one(s) hiding, stealing away / ARG1:thing stolen away with [steal.xml]
   LexSem("V","steal",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("steal"),Adv("away"),arg1))),

 'steam-01': # ARG0:cook / ARG1:food [steam.xml]
   LexSem("V","steam",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("steam"),arg1))),

 'steam-02': # ARG1:steamer [steam.xml]
   LexSem("V","steam",[":ARG1"],lambda arg1:S(arg1,VP(V("steam")))),

 'steam-03': # ARG0:entity in motion / ARG1:path [steam.xml]
   LexSem("V","steam",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("steam"),arg1))),

 'steamroller-01': # ARG0:forcer / ARG1:impelled agent / ARG2:impelled action [steamroller.xml]
   LexSem("V","steamroller",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("steamroller"),arg1,arg2))),

 'steel-01': # ARG0:girder of loins / ARG1:person being girded / ARG2:action or state [steel.xml]
   LexSem("V","steel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("steel"),arg1,arg2))),

 'steep-01': # ARG0:cause of soaking / ARG1:soaked thing / ARG2:liquid [steep.xml]
   LexSem("V","steep",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("steep"),arg1,arg2))),

 'steepen-02': # ARG0:agent, cause / ARG1:thing made steep [steep.xml]
   LexSem("V","steepen",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("steepen"),arg1))),

 'steer-01': # ARG0:steerer / ARG1:thing steered / ARG2:direction, steered towards [steer.xml]
   LexSem("V","steer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("steer"),arg1,pp("to",arg2)))),

 'stem-01': # ARG1:thing (state) arising / ARG2:source (from or in or of) [stem.xml]
   LexSem("V","stem",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("stem"),pp("from",arg2)))),

 'stem-02': # ARG0:stopper / ARG1:thing being stopped, (liquid) [stem.xml]
   LexSem("V","stem",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stem"),arg1))),

 'stem-03': # ARG0:skier / ARG1:skis [stem.xml]
   LexSem("V","stem",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stem"),arg1))),

 'stemmer-01': # ARG0:stemmerer, agent / ARG1:stemmered about what, topic / ARG2:stemmered to whom, recipient [stemmer.xml]
   LexSem("V","stemmer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stemmer"),arg1,pp("to",arg2)))),

 'stencil-01': # ARG0:stenciler, agent / ARG1:thing being stenciled, theme [stencil.xml]
   LexSem("V","stencil",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stencil"),arg1))),

 'stenose-101': # ARG0:Causer of stenosis / ARG1:Tissue stenosing [stenose.xml]
   LexSem("V","stenose",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stenose"),arg1))),

 'stent-01': # ARG0:Inserter / ARG1:location (blood vessel, ureter, esophagus, patient) [stent.xml]
   LexSem("V","stent",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stent"),arg1))),

 'step-01': # ARG0:outside agent / ARG1:entity in motion / ARG2:destination or metaphorical goal / ARG3:source / ARG4:step itself, action taken to achieve goal [step.xml]
   LexSem("V","step",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("step"),arg1,pp("to",arg2),pp("from",arg3),pp("of",arg4)))),

 'step-down-04': # ARG0:resigner / ARG1:position resigned [step.xml]
   LexSem("V","step",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("step"),Adv("down"),pp("as",arg1)))),

 'step-in-02': # ARG1:entity entering [step.xml]
   LexSem("V","step",[":ARG1"],lambda arg1:S(arg1,VP(V("step"),Adv("in")))),

 'step-up-03': # ARG0:cause of increase / ARG1:thing increasing [step.xml]
   LexSem("V","step",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("step"),Adv("up"),arg1))),

 'stereotype-01': # ARG0:stereotyper / ARG1:entity being stereotyped / ARG2:the stereotype itself [stereotype.xml]
   LexSem("V","stereotype",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stereotype"),arg1,pp("as",arg2)))),

 'sterilize-01': # ARG0:sterilizer / ARG1:entity sterilized / ARG2:germs removed [sterilize.xml]
   LexSem("V","sterilize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sterilize"),arg1,arg2))),

 'stew-01': # ARG0:cook / ARG1:thing stewing [stew.xml]
   LexSem("V","stew",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stew"),arg1))),

 'stew-02': # ARG0:worrier, stewer / ARG1:cause [stew.xml]
   LexSem("V","stew",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stew"),pp("over",arg1)))),

 'stick-01': # ARG0:causal agent / ARG1:thing sticking, adhering, being placed / ARG2:stuck-to, destination of placement [stick.xml]
   LexSem("V","stick",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stick"),arg1,pp("to",arg2)))),

 'stick-around-03': # ARG0:sticker around, hanger out [stick.xml]
   LexSem("V","stick",[":ARG0"],lambda arg0:S(arg0,VP(V("stick"),Adv("around")))),

 'stick-out-02': # ARG0:causal agent / ARG1:thing extended [stick.xml]
   LexSem("V","stick",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stick"),Adv("out"),arg1))),

 'stick-up-04': # ARG0:defender / ARG1:defended [stick.xml]
   LexSem("V","stick",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stick"),Adv("up"),pp("for",arg1)))),

 'stiff-03': # ARG0:poor giver / ARG1:amount not given / ARG2:entity not receiving enough / ARG3:commodity, debt not paid for [stiffen.xml]
   LexSem("V","stiff",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("stiff"),arg1,arg2,pp("on",arg3)))),

 'stiff_arm-03': # ARG0:deflector / ARG1:opponent / ARG2:subject matter [arm.xml]
   LexSem("V","stiff-arm",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stiff-arm"),arg1,pp("on",arg2)))),

 'stiffen-01': # ARG0:cause of stiffness / ARG1:newly-stiff thing [stiffen.xml]
   LexSem("V","stiffen",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stiffen"),arg1))),

 'stifle-01': # ARG0:stifler, suppressor / ARG1:thing stifled [stifle.xml]
   LexSem("V","stifle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stifle"),arg1))),

 'stigmatize-01': # ARG0:stigmatizer (agent only- not CAU) / ARG1:stigmatized / ARG2:grounds, reason [stigmatize.xml]
   LexSem("V","stigmatize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stigmatize"),arg1,arg2))),

 'still-01': # ARG0:agent, stiller / ARG1:patient, thing becoming still / ARG2:instrument of stillness [still.xml]
   LexSem("V","still",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("still"),arg1,arg2))),

 'stimulate-01': # ARG0:cause of increase / ARG1:thing increasing / ARG2:instrument, if agent also present / ARG3:end state of arg1 [stimulate.xml]
   LexSem("V","stimulate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("stimulate"),arg1,pp("by",arg2),arg3))),

 'sting-01': # ARG0:stinger / ARG1:thing stung / ARG2:instrument, if separate from arg0 [sting.xml]
   LexSem("V","sting",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sting"),arg1,pp("with",arg2)))),

 'stink-01': # ARG1:entity stinking [stink.xml]
   LexSem("V","stink",[":ARG1"],lambda arg1:S(arg1,VP(V("stink")))),

 'stink-02': # ARG1:incompetent entity / ARG2:what they're bad at [stink.xml]
   LexSem("V","stink",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("stink"),pp("at",arg2)))),

 'stipple-01': # ARG0:Artist / ARG1:thing stippled / ARG2:Paint or ink [stipple.xml]
   LexSem("V","stipple",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stipple"),arg1,arg2))),

 'stipple-02': # ARG0:Engraver / ARG1:Thing or inscription engraved / ARG2:Engraved into or onto [stipple.xml]
   LexSem("V","stipple",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stipple"),arg1,pp("into",arg2)))),

 'stipple-03': # ARG0:Cause of mottled effect / ARG1:Thing mottled [stipple.xml]
   LexSem("V","stipple",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stipple"),arg1))),

 'stipulate-01': # ARG0:stipulator / ARG1:thing defined [stipulate.xml]
   LexSem("V","stipulate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stipulate"),arg1))),

 'stir-01': # ARG0:stirer / ARG1:thing stirred or stirring / ARG2:instrument [stir.xml]
   LexSem("V","stir",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stir"),arg1,pp("with",arg2)))),

 'stir-02': # ARG0:agent, stirrer / ARG1:patient, stirred / ARG2:instrument / ARG3:induced action [stir.xml]
   LexSem("V","stir",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("stir"),arg1,arg2,pp("to",arg3)))),

 'stir-03': # ARG0:mover / ARG1:moved / ARG2:destination [stir.xml]
   LexSem("V","stir",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stir"),arg1,pp("into",arg2)))),

 'stir-up-04': # ARG0:creator / ARG1:thing created [stir.xml]
   LexSem("V","stir",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stir"),Adv("up"),arg1))),

 'stitch-01': # ARG0:agent, entity doing the tying / ARG1:thing being tied / ARG2:tied to what / ARG3:instrument, string [stitch.xml]
   LexSem("V","stitch",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("stitch"),arg1,pp("to",arg2),arg3))),

 'stitch-02': # ARG0:builder / ARG1:construction / ARG2:material, start state / ARG4:end state [stitch.xml]
   LexSem("V","stitch",[":ARG0",":ARG1",":ARG2",":ARG4"],lambda arg0,arg1,arg2,arg4:S(arg0,VP(V("stitch"),pp("into",arg1),arg2,arg4))),

 'stock-01': # ARG0:agent, storer / ARG1:commodity / ARG2:location or destination [stock.xml]
   LexSem("V","stock",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stock"),pp("with",arg1),arg2))),

 'stock-up-02': # ARG0:agent, storer / ARG1:commodity [stock.xml]
   LexSem("V","stock",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stock"),Adv("up"),pp("on",arg1)))),

 'stockpile-01': # ARG0:agent, storer / ARG1:commodity / ARG2:location or destination [stockpile.xml]
   LexSem("V","stockpile",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stockpile"),pp("with",arg1),arg2))),

 'stoke-01': # ARG0:stoker / ARG1:fire [stoke.xml]
   LexSem("V","stoke",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stoke"),arg1))),

 'stomach-01': # ARG0:eater / ARG1:eaten [stomach.xml]
   LexSem("V","stomach",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stomach"),arg1))),

 'stomp-01': # ARG0:entity with heavy feet, agent / ARG1:entity stomped (on) [stomp.xml]
   LexSem("V","stomp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stomp"),arg1))),

 'stone-01': # ARG0:entity removing seeds / ARG1:thing formerly having seeds [stone.xml]
   LexSem("V","stone",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stone"),arg1))),

 'stone-02': # ARG0:thrower / ARG1:target [stone.xml]
   LexSem("V","stone",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stone"),arg1))),

 'stone-03': # ARG1:user [stone.xml]
   LexSem("V","stone",[":ARG1"],lambda arg1:S(arg1,VP(V("stone")))),

 'stonewall-01': # ARG0:stonewaller / ARG1:entity stonewalled [stonewall.xml]
   LexSem("V","stonewall",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stonewall"),arg1))),

 'stooge-01': # ARG0:stooge / ARG1:one who benefits [stooge.xml]
   LexSem("V","stooge",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stooge"),pp("for",arg1)))),

 'stoop-01': # ARG0:stooper / ARG1:body part/thing stooped [stoop.xml]
   LexSem("V","stoop",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stoop"),arg1))),

 'stop-01': # ARG0:Agent/cause / ARG1:Theme (action or object being stopped) / ARG2:Instrument (when separate from arg0) [stop.xml]
   LexSem("V","stop",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stop"),arg1,arg2))),

 'stop-03': # ARG0:preventer, stopper / ARG1:stopped agent / ARG2:stopped action [stop.xml]
   LexSem("V","stop",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stop"),arg1,pp("from",arg2)))),

 'stop-05': # ARG0:stopper (agent) / ARG1:thing stopped up / ARG2:stopped up with what? entity crammed in space [stop.xml]
   LexSem("V","stop",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stop"),pp("of",arg1),pp("with",arg2)))),

 'stop-by-02': # ARG0:visitor / ARG1:place visited [stop.xml]
   LexSem("V","stop",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stop"),Adv("by"),arg1))),

 'stop-off-06': # ARG0:visitor / ARG1:visited [stop.xml]
   LexSem("V","stop",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stop"),Adv("off"),pp("at",arg1)))),

 'stop-over-07': # ARG1:visitor [stop.xml]
   LexSem("V","stop",[":ARG1"],lambda arg1:S(arg1,VP(V("stop"),Adv("over")))),

 'stop-up-04': # ARG0:stopper / ARG1:thing stopped up / ARG2:stopped up with what? entity crammed in space [stop.xml]
   LexSem("V","stop",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stop"),Adv("up"),arg1,arg2))),

 'stop_over-07': # ARG1:visitor [stop.xml]
   LexSem("V","stopover",[":ARG1"],lambda arg1:S(arg1,VP(V("stopover")))),

 'stopper-01': # ARG0:agent, person placing stopper / ARG1:bottle, location/entity stopped-up / ARG2:stopper itself [stopper.xml]
   LexSem("V","stopper",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stopper"),arg1,pp("with",arg2)))),

 'store-01': # ARG0:storer / ARG1:commodity / ARG2:location [store.xml]
   LexSem("V","store",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("store"),arg1,pp("in",arg2)))),

 'store-up-02': # ARG0:storer / ARG1:commodity / ARG2:benefactive [store.xml]
   LexSem("V","store",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("store"),Adv("up"),arg1,arg2))),

 'storm-01': # ARG1:Cognate object, entity stormed e.g. cats and dogs, golf balls, rain itself [storm.xml]
   LexSem("V","storm",[":ARG1"],lambda arg1:S(arg1,VP(V("storm")))),

 'storm-02': # ARG0:entity in motion / ARG1:path [storm.xml]
   LexSem("V","storm",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("storm"),pp("through",arg1)))),

 'stow-01': # ARG0:agent, storer / ARG1:thing stored / ARG2:location or position, or attribute [stow.xml]
   LexSem("V","stow",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stow"),arg1,arg2))),

 'straddle-01': # ARG0:thing astride / ARG1:astride what, location [straddle.xml]
   LexSem("V","straddle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("straddle"),arg1))),

 'strafe-01': # ARG0:shooter / ARG1:target [strafe.xml]
   LexSem("V","strafe",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("strafe"),arg1))),

 'straggle-01': # ARG0:mover [straggle.xml]
   LexSem("V","straggle",[":ARG0"],lambda arg0:S(arg0,VP(V("straggle")))),

 'straighten-01': # ARG0:cause of straightness, agent / ARG1:thing becoming straight / ARG2:instrument, when separate from arg0 [straighten.xml]
   LexSem("V","straighten",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("straighten"),arg1,pp("with",arg2)))),

 'straighten-out-02': # ARG0:cause of rightness, agent / ARG1:wrong to right [straighten.xml]
   LexSem("V","straighten",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("straighten"),Adv("out"),arg1))),

 'straighten-up-03': # ARG0:straightener / ARG1:thing made straight/neat [straighten.xml]
   LexSem("V","straighten",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("straighten"),Adv("up"),arg1))),

 'strain-01': # ARG0:agent, entity causing damage / ARG1:patient, entity experiencing hurt/damage [strain.xml]
   LexSem("V","strain",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("strain"),arg1))),

 'strain-02': # ARG0:separator, filter, agent / ARG1:solids, thing removed / ARG2:liquid, source, removed-from [strain.xml]
   LexSem("V","strain",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("strain"),arg1,arg2))),

 'strain-03': # ARG0:Agent/Entity Trying / ARG1:thing tried [strain.xml]
   LexSem("V","strain",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("strain"),pp("for",arg1)))),

 'strain-04': # ARG1:thing hurting / ARG2:for what [strain.xml]
   LexSem("V","strain",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("strain"),pp("for",arg2)))),

 'strand-01': # ARG0:leaver, agent / ARG1:entity stranded [strand.xml]
   LexSem("V","strand",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("strand"),arg1))),

 'strangle-01': # ARG0:stranger, agent / ARG1:entity strangled [strangle.xml]
   LexSem("V","strangle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("strangle"),arg1))),

 'strangulate-01': # ARG0:strangler / ARG1:victim / ARG2:instrument [strangulate.xml]
   LexSem("V","strangulate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("strangulate"),arg1,pp("with",arg2)))),

 'strap-01': # ARG0:fastener, agent / ARG1:thing strapped / ARG2:location [strap.xml]
   LexSem("V","strap",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("strap"),arg1,pp("under",arg2)))),

 'strap-02': # ARG0:agent, needer / ARG1:needed thing / ARG2:cause of need [strap.xml]
   LexSem("V","strap",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("strap"),pp("for",arg1),pp("by",arg2)))),

 'strap-03': # ARG0:beater, hitter, agent / ARG1:thing strapped [strap.xml]
   LexSem("V","strap",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("strap"),arg1))),

 'strategize-01': # ARG0:planner / ARG1:thing planned / ARG2:grounds for planning / ARG3:beneficiary [strategize.xml]
   LexSem("V","strategize",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("strategize"),arg1,arg2,arg3))),

 'stratify-01': # ARG0:agent/cause of layering / ARG1:entity divided / ARG2:domain/aspect of arg1 being divided [stratify.xml]
   LexSem("V","stratify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stratify"),arg1,arg2))),

 'stray-01': # ARG0:entity in motion / ARG1:source [stray.xml]
   LexSem("V","stray",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stray"),pp("from",arg1)))),

 'streak-01': # ARG0:entity in motion [streak.xml]
   LexSem("V","streak",[":ARG0"],lambda arg0:S(arg0,VP(V("streak")))),

 'stream-01': # ARG0:leaking container / ARG1:substance leaked [stream.xml]
   LexSem("V","stream",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stream"),arg1))),

 'stream-02': # ARG1:substance (ie, water) / ARG2:path [stream.xml]
   LexSem("V","stream",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("stream"),pp("through",arg2)))),

 'stream-03': # ARG0:agent / ARG1:data / ARG2:source of data / ARG3:end point of data [stream.xml]
   LexSem("V","stream",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("stream"),arg1,pp("from",arg2),pp("to",arg3)))),

 'streamline-01': # ARG0:cause of smoothness / ARG1:thing becoming smoother [streamline.xml]
   LexSem("V","streamline",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("streamline"),arg1))),

 'strengthen-01': # ARG0:causal agent / ARG1:thing strengthening / ARG2:EXT / ARG3:start point / ARG4:end point [strengthen.xml]
   LexSem("V","strengthen",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("strengthen"),arg1,arg2,arg3,arg4))),

 'stress-01': # ARG0:stresser, agent / ARG1:thing stressed / ARG2:attribute [stress.xml]
   LexSem("V","stress",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stress"),arg1,pp("as",arg2)))),

 'stress-02': # ARG0:agent/cause of stress / ARG1:entity experiencing stress / ARG2:instrument (if separate from arg0) / ARG3:subject matter of stress (stressed about/over __) [stress.xml]
   LexSem("V","stress",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("stress"),arg1,pp("with",arg2),pp("about",arg3)))),

 'stress-out-03': # ARG0:agent/cause of stress / ARG1:entity experiencing stress / ARG2:instrument (if separate from arg0) / ARG3:subject matter of stress (stressed out about/over __) [stress.xml]
   LexSem("V","stress",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("stress"),Adv("out"),arg1,pp("with",arg2),pp("about",arg3)))),

 'stretch-01': # ARG0:agent, entity making something be longer / ARG1:patient, thing getting longer / ARG2:EXT or TMP, by how much or until when / ARG3:start point / ARG4:end point [stretch.xml]
   LexSem("V","stretch",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("stretch"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'stretch-out-02': # ARG0:cause of lengthening / ARG1:patient, thing getting longer [stretch.xml]
   LexSem("V","stretch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stretch"),Adv("out"),arg1))),

 'strew-01': # ARG0:distributor / ARG1:thing distributed / ARG2:distributed to, area [strew.xml]
   LexSem("V","strew",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("strew"),pp("with",arg1),arg2))),

 'stride-01': # ARG0:strider, entity in motion / ARG1:domain, field in which advances are made [stride.xml]
   LexSem("V","stride",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stride"),pp("in",arg1)))),

 'stridulate-01': # ARG0:stridulating insect [stridulate.xml]
   LexSem("V","stridulate",[":ARG0"],lambda arg0:S(arg0,VP(V("stridulate")))),

 'strike-01': # ARG0:animate, volitional hitter / ARG1:thing hit / ARG2:instrument, non-volitional hitter [strike.xml]
   LexSem("V","strike",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("strike"),arg1,arg2))),

 'strike-02': # ARG0:workers / ARG1:employer [strike.xml]
   LexSem("V","strike",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("strike"),arg1))),

 'strike-03': # ARG0:remover / ARG1:thing removed / ARG2:source, removed from [strike.xml]
   LexSem("V","strike",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("strike"),arg1,pp("from",arg2)))),

 'strike-04': # ARG1:thing seeming / ARG2:attribute / ARG3:viewer [strike.xml]
   LexSem("V","strike",[":ARG1",":ARG2",":ARG3"],lambda arg1,arg2,arg3:S(arg1,VP(V("strike"),pp("as",arg2),arg3))),

 'strike-05': # ARG0:Agent / ARG1:Theme(-Creation) / ARG2:Instrument [strike.xml]
   LexSem("V","strike",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("strike"),arg1,pp("with",arg2)))),

 'strike-10': # ARG0:poseur / ARG1:pose [strike.xml]
   LexSem("V","strike",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("strike"),arg1))),

 'strike-down-08': # ARG0:agent, hitter - animate only! / ARG1:thing hit / ARG2:instrument, thing hit by or with [strike.xml]
   LexSem("V","strike",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("strike"),Adv("down"),arg1,arg2))),

 'strike-out-06': # ARG0:pitcher / ARG1:batter / ARG2:with respect to [strike.xml]
   LexSem("V","strike",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("strike"),Adv("out"),arg1,pp("with",arg2)))),

 'strike-out-07': # ARG0:remover / ARG1:thing removed / ARG2:source, removed from [strike.xml]
   LexSem("V","strike",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("strike"),Adv("out"),arg1,arg2))),

 'strike-up-09': # ARG0:Agent / ARG1:Theme(-Creation) / ARG2:Instrument [strike.xml]
   LexSem("V","strike",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("strike"),Adv("up"),arg1,arg2))),

 'string-01': # ARG0:arranger, agent / ARG1:entity stretched [string.xml]
   LexSem("V","string",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("string"),arg1))),

 'strip-01': # ARG0:remover / ARG1:thing removed / ARG2:source [strip.xml]
   LexSem("V","strip",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("strip"),pp("of",arg1),arg2))),

 'strip-away-02': # ARG0:remover / ARG1:thing removed [strip.xml]
   LexSem("V","strip",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("strip"),Adv("away"),arg1))),

 'strive-01': # ARG0:Agent/Entity Trying / ARG1:thing tried [strive.xml]
   LexSem("V","strive",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("strive"),pp("to",arg1)))),

 'stroke-01': # ARG0:stroker / ARG1:surface being stroked / ARG2:the strokes themselves (might be writing) / ARG3:instrument [stroke.xml]
   LexSem("V","stroke",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("stroke"),arg1,pp("of",arg2),pp("with",arg3)))),

 'stroll-01': # ARG0:walker, stroller / ARG1:path [stroll.xml]
   LexSem("V","stroll",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stroll"),arg1))),

 'strop-01': # ARG0:agent / ARG1:razor [strop.xml]
   LexSem("V","strop",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("strop"),arg1))),

 'structure-01': # ARG0:agent, structurer / ARG1:thing structured, arranged / ARG2:how or as [structure.xml]
   LexSem("V","structure",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("structure"),arg1,pp("in",arg2)))),

 'struggle-01': # ARG0:first struggler / ARG1:second struggler / ARG2:topic or prize [struggle.xml]
   LexSem("V","struggle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("struggle"),pp("with",arg1),pp("over",arg2)))),

 'struggle-02': # ARG0:entity trying / ARG1:predicative action [struggle.xml]
   LexSem("V","struggle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("struggle"),pp("to",arg1)))),

 'strut-01': # ARG0:agent, rider (use only if arg1 is present) / ARG1:thing strutted, walker / ARG2:path, thing  strutted up to [strut.xml]
   LexSem("V","strut",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("strut"),arg1,pp("up",arg2)))),

 'stub-01': # ARG0:whacker / ARG1:toe / ARG2:obstacle [stub.xml]
   LexSem("V","stub",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stub"),arg1,pp("on",arg2)))),

 'stucco-01': # ARG0:Agent, person placing stucco / ARG1:Location/entity covered with stucco / ARG2:Stucco itself, what kind of stucco [stucco.xml]
   LexSem("V","stucco",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stucco"),arg1,pp("with",arg2)))),

 'stud-01': # ARG0:attacher of studs / ARG1:attached to / ARG2:studs [stud.xml]
   LexSem("V","stud",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stud"),arg1,pp("with",arg2)))),

 'study-01': # ARG0:student / ARG1:subject / ARG2:teacher [study.xml]
   LexSem("V","study",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("study"),arg1,pp("with",arg2)))),

 'study-up-02': # ARG0:student / ARG1:subject [study.xml]
   LexSem("V","study",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("study"),Adv("up"),pp("on",arg1)))),

 'stuff-01': # ARG0:packer, agent / ARG1:container / ARG2:substance [stuff.xml]
   LexSem("V","stuff",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stuff"),pp("into",arg1),arg2))),

 'stultify-01': # ARG0:causer of appearance / ARG1:entity appearing foolish / ARG2:instrument, fooling manner [stultify.xml]
   LexSem("V","stultify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stultify"),arg1,pp("by",arg2)))),

 'stumble-01': # ARG0:agent, entity stumbling / ARG1:stumble over [stumble.xml]
   LexSem("V","stumble",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stumble"),pp("over",arg1)))),

 'stump-01': # ARG0:cause / ARG1:entity stumped [stump.xml]
   LexSem("V","stump",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stump"),arg1))),

 'stun-01': # ARG0:surprise / ARG1:surprised / ARG2:source, instrument [stun.xml]
   LexSem("V","stun",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stun"),arg1,pp("with",arg2)))),

 'stunt-01': # ARG0:preventer of growth, agent / ARG1:growth [stunt.xml]
   LexSem("V","stunt",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stunt"),arg1))),

 'stupefy-01': # ARG0:causer of stupor / ARG1:stupefied entity / ARG2:instrument, if separate from cause [stupefy.xml]
   LexSem("V","stupefy",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stupefy"),arg1,pp("by",arg2)))),

 'stutter-01': # ARG0:agent, stutterer / ARG1:stuttered about, utterance, topic / ARG2:stuttered to, recipient [stutter.xml]
   LexSem("V","stutter",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("stutter"),arg1,pp("to",arg2)))),

 'style-01': # ARG0:stylist / ARG1:thing being styled (hair, etc) / ARG2:style, attribute [style.xml]
   LexSem("V","style",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("style"),arg1,pp("like",arg2)))),

 'stymie-01': # ARG0:blocker, agent / ARG1:stymied entity/action [stymie.xml]
   LexSem("V","stymie",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("stymie"),arg1))),

 'subclone-01': # ARG0:intentional agent of subcloning (e.g. scientist) / ARG1:cloned entity / ARG2:source, parent vector / ARG3:destination vector [subclone.xml]
   LexSem("V","subclone",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("subclone"),arg1,pp("from",arg2),pp("into",arg3)))),

 'subcontract-01': # ARG0:employer, entity with big job / ARG1:(part of) job / ARG2:subcontractor [subcontract.xml]
   LexSem("V","subcontract",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("subcontract"),arg1,pp("to",arg2)))),

 'subdivide-01': # ARG0:entity causing separation / ARG1:thing being divided, again / ARG2:divided among/between, if separate from arg1 / ARG3:specific aspect of arg1 being used as criteria for subdivision / ARG4:divided into what?  Smaller parcel, resulting state of arg 1 [subdivide.xml]
   LexSem("V","subdivide",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("subdivide"),arg1,arg2,arg3,pp("into",arg4)))),

 'subduct-01': # ARG0:pusher / ARG1:pushed / ARG2:underneath what [subduct.xml]
   LexSem("V","subduct",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("subduct"),arg1,pp("under",arg2)))),

 'subdue-01': # ARG0:defeater, victor, agent / ARG1:entity subdued [subdue.xml]
   LexSem("V","subdue",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("subdue"),arg1))),

 'subject-01': # ARG0:causer / ARG1:induced experiencer / ARG2:procedure [subject.xml]
   LexSem("V","subject",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("subject"),arg1,pp("to",arg2)))),

 'subjugate-01': # ARG0:subjugator / ARG1:subjugated / ARG2:instrument [subjugate.xml]
   LexSem("V","subjugate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("subjugate"),arg1,arg2))),

 'sublet-01': # ARG0:original renter, agent / ARG1:property / ARG2:new renter [sublet.xml]
   LexSem("V","sublet",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sublet"),arg1,pp("to",arg2)))),

 'sublimate-01': # ARG0:agent, cause of sublimation / ARG1:entity undergoing change, sublimation / ARG2:instrument / ARG3:starting state of arg 1 / ARG4:final state of arg 1, result after sublimation [sublimate.xml]
   LexSem("V","sublimate",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("sublimate"),arg1,arg2,arg3,pp("in",arg4)))),

 'submerge-01': # ARG0:placer, causer of underwater-ness / ARG1:thing being put under water / ARG2:location or fluid [submerge.xml]
   LexSem("V","submerge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("submerge"),arg1,pp("under",arg2)))),

 'submit-01': # ARG0:giver / ARG1:given / ARG2:given-to / ARG3:purpose [submit.xml]
   LexSem("V","submit",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("submit"),arg1,pp("to",arg2),pp("for",arg3)))),

 'submit-02': # ARG0:submissive entity / ARG1:given: explicit mention of will, or similar / ARG2:dominant entity submitted to [submit.xml]
   LexSem("V","submit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("submit"),arg1,pp("to",arg2)))),

 'subordinate-01': # ARG0:cause / ARG1:subordinate thing / ARG2:superordinate thing [subordinate.xml]
   LexSem("V","subordinate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("subordinate"),arg1,pp("to",arg2)))),

 'suborn-01': # ARG0:inciter / ARG1:crime / ARG2:committer of crime [suborn.xml]
   LexSem("V","suborn",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("suborn"),arg1,arg2))),

 'suborn-02': # ARG0:obtainer of testimony / ARG1:testimony / ARG2:one giving testimony [suborn.xml]
   LexSem("V","suborn",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("suborn"),arg1,pp("from",arg2)))),

 'subpoena-01': # ARG0:summoner, agent / ARG1:entity subpoenaed [subpoena.xml]
   LexSem("V","subpoena",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("subpoena"),arg1))),

 'subscribe-01': # ARG0:subscriber / ARG1:magazine or belief system [subscribe.xml]
   LexSem("V","subscribe",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("subscribe"),pp("to",arg1)))),

 'subscribe-02': # ARG0:contributor / ARG1:thing contributed [subscribe.xml]
   LexSem("V","subscribe",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("subscribe"),arg1))),

 'subside-01': # ARG1:entity decreasing / ARG2:decreasing to [subside.xml]
   LexSem("V","subside",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("subside"),pp("to",arg2)))),

 'subside-02': # ARG0:causer of ground sinking / ARG1:the ground [subside.xml]
   LexSem("V","subside",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("subside"),arg1))),

 'subsidize-01': # ARG0:assister, agent / ARG1:entity subsidized [subsidize.xml]
   LexSem("V","subsidize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("subsidize"),arg1))),

 'subsist-01': # ARG0:entity subsisting, agent / ARG1:subsisting on what, food [subsist.xml]
   LexSem("V","subsist",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("subsist"),pp("on",arg1)))),

 'substantiate-01': # ARG0:prover / ARG1:justified [substantiate.xml]
   LexSem("V","substantiate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("substantiate"),arg1))),

 'substitute-01': # ARG0:agent, entity trading / ARG1:thing being preferred, new thing / ARG2:other item in exchange, old thing / ARG3:benefactive [substitute.xml]
   LexSem("V","substitute",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("substitute"),arg1,pp("for",arg2),arg3))),

 'subsume-01': # ARG1:thing included / ARG2:included in, subsumed by [subsume.xml]
   LexSem("V","subsume",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("subsume"),pp("by",arg2)))),

 'subtitle-01': # ARG0:translator (rare) / ARG1:movie, etc / ARG2:target language [subtitle.xml]
   LexSem("V","subtitle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("subtitle"),arg1,pp("in",arg2)))),

 'subtitle-02': # ARG0:author (rare) / ARG1:magnum opus / ARG2:secondary title [subtitle.xml]
   LexSem("V","subtitle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("subtitle"),arg1,arg2))),

 'subtract-01': # ARG0:subtracter / ARG1:thing being subtracted / ARG2:thing being subtracted from [subtract.xml]
   LexSem("V","subtract",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("subtract"),arg1,pp("from",arg2)))),

 'subvert-01': # ARG0:corrupter, agent / ARG1:entity subverted / ARG2:entity subverted from [subvert.xml]
   LexSem("V","subvert",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("subvert"),arg1,pp("from",arg2)))),

 'succeed-01': # ARG0:entity succeeding / ARG1:task, goal met [succeed.xml]
   LexSem("V","succeed",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("succeed"),pp("in",arg1)))),

 'succeed-02': # ARG0:successor / ARG1:entity being replaced / ARG2:attributive, role, function [succeed.xml]
   LexSem("V","succeed",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("succeed"),arg1,pp("as",arg2)))),

 'succeed-03': # ARG1:thing coming after / ARG2:thing going before [succeed.xml]
   LexSem("V","succeed",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("succeed"),pp("after",arg2)))),

 'succor-01': # ARG0:agent, helper, succorer / ARG1:benefactive, succored / ARG2:helped with what, theme [succor.xml]
   LexSem("V","succor",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("succor"),arg1,arg2))),

 'succumb-01': # ARG0:entity giving in / ARG1:succumbed to [succumb.xml]
   LexSem("V","succumb",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("succumb"),pp("to",arg1)))),

 'suck-01': # ARG0:agent, causer / ARG1:entity sucked / ARG2:source, entity that arg1 is sucked from [suck.xml]
   LexSem("V","suck",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("suck"),arg1,arg2))),

 'suck-03': # ARG0:untalented/unfavorable entity / ARG1:non-talent [suck.xml]
   LexSem("V","suck",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("suck"),pp("at",arg1)))),

 'suck-up-02': # ARG0:one who must endure the situation / ARG1:thing sucked up [suck.xml]
   LexSem("V","suck",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("suck"),Adv("up"),arg1))),

 'suck-up-04': # ARG0:brown noser / ARG1:entity sucked up to [suck.xml]
   LexSem("V","suck",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("suck"),Adv("up"),arg1))),

 'suckle-01': # ARG0:agent, one giving suckle / ARG1:thing given (milk, etc.) / ARG2:recipient, thing suckling [suckle.xml]
   LexSem("V","suckle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("suckle"),arg1,arg2))),

 'suction-05': # ARG0:suctioner, agent / ARG1:thing suctioned, theme / ARG2:suctioned from, source [suck.xml]
   LexSem("V","suction",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("suction"),arg1,pp("from",arg2)))),

 'sue-02': # ARG0:prosecutor/plaintiff / ARG1:defendant / ARG2:type/grounds/accusation / ARG3:intended prize [suit.xml]
   LexSem("V","sue",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("sue"),arg1,pp("for",arg2),pp("for",arg3)))),

 'suffer-01': # ARG0:entity suffering / ARG1:malady [suffer.xml]
   LexSem("V","suffer",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("suffer"),pp("from",arg1)))),

 'suffice-01': # ARG0:sufficient thing / ARG1:Entity satisfied by arg 0 [suffice.xml]
   LexSem("V","suffice",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("suffice"),arg1))),

 'suffocate-01': # ARG0:cause of not-breathing / ARG1:entity not breathing / ARG2:instrument, if cause also present as arg0 [suffocate.xml]
   LexSem("V","suffocate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("suffocate"),arg1,pp("with",arg2)))),

 'suffuse-01': # ARG0:a lot of what / ARG1:thing with a lot [suffuse.xml]
   LexSem("V","suffuse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("suffuse"),arg1))),

 'sugar-01': # ARG0:causer of sweetening / ARG1:entity sweetened [sugar.xml]
   LexSem("V","sugar",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sugar"),arg1))),

 'sugarcoat-01': # ARG0:coater, agent / ARG1:thing now candy-coated / ARG2:sugar itself, coating usually unspecified or metaphorical [sugarcoat.xml]
   LexSem("V","sugarcoat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sugarcoat"),arg1,arg2))),

 'suggest-01': # ARG0:Sayer / ARG1:Utterance (suggestion) / ARG2:Hearer [suggest.xml]
   LexSem("V","suggest",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("suggest"),arg1,pp("to",arg2)))),

 'suggest-02': # ARG0:sexually suggestive entity / ARG1:explicit mention of sexual suggestion / ARG2:suggested to; observer [suggest.xml]
   LexSem("V","suggest",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("suggest"),arg1,arg2))),

 'suit-01': # ARG0:agent / ARG1:suitable thing / ARG2:suitable to/for [suit.xml]
   LexSem("V","suit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("suit"),arg1,pp("to",arg2)))),

 'suit-up-03': # ARG0:person suiting up [suit.xml]
   LexSem("V","suit",[":ARG0"],lambda arg0:S(arg0,VP(V("suit"),Adv("up")))),

 'sulfurize-01': # ARG0:Agent, cause of treatment / ARG1:entity now sulfurized [sulfurize.xml]
   LexSem("V","sulfurize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sulfurize"),arg1))),

 'sully-01': # ARG0:cause/source of defilement / ARG1:thing becoming defiled / ARG2:instrument if separate from ARG 0 [sully.xml]
   LexSem("V","sully",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sully"),arg1,arg2))),

 'sulphur-01': # ARG0:causer of sulphuring, agent / ARG1:sulphur proper, theme / ARG2:thing sulphured, destination [sulphur.xml]
   LexSem("V","sulphur",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sulphur"),arg1,arg2))),

 'sum-up-01': # ARG0:summarizer / ARG1:thing summarized / ARG2:as, if syntactically neat [sum.xml]
   LexSem("V","sum",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sum"),Adv("up"),arg1,pp("as",arg2)))),

 'summarize-01': # ARG0:editor, summarizer, agent / ARG1:thing summarized / ARG2:summary [summarize.xml]
   LexSem("V","summarize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("summarize"),arg1,arg2))),

 'summer-01': # ARG0:summer vacationer(s) / ARG1:location of summer vacation [summer.xml]
   LexSem("V","summer",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("summer"),pp("in",arg1)))),

 'summon-01': # ARG0:inviter / ARG1:invited / ARG2:invited-to [summon.xml]
   LexSem("V","summon",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("summon"),arg1,pp("to",arg2)))),

 'sunbathe-01': # ARG0:agent, sunbather / ARG1:thing sunbathed (reflexive pronoun, skin) [sunbathe.xml]
   LexSem("V","sunbathe",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sunbathe"),arg1))),

 'sunburn-01': # ARG0:agent,experiencer / ARG1:sunburned thing [sunburn.xml]
   LexSem("V","sunburn",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sunburn"),arg1))),

 'sunder-01': # ARG0:entity sundering, agent / ARG1:entity sundered, patient / ARG2:entity sundered from, source (rare) [sunder.xml]
   LexSem("V","sunder",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sunder"),arg1,arg2))),

 'sup-01': # ARG0:eater / ARG1:eaten [sup.xml]
   LexSem("V","sup",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sup"),pp("on",arg1)))),

 'super-01': # ARG0:placer, putter, agent / ARG1:thing on top / ARG2:thing below [super.xml]
   LexSem("V","super",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("super"),arg1,arg2))),

 'superimpose-01': # ARG0:placer, putter, agent / ARG1:thing on top / ARG2:thing below [superimpose.xml]
   LexSem("V","superimpose",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("superimpose"),arg1,pp("on",arg2)))),

 'supersede-01': # ARG0:entity replacing / ARG1:entity replaced [supersede.xml]
   LexSem("V","supersede",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("supersede"),arg1))),

 'supervene-01': # ARG0:thing appearing, supervening / ARG1:location of appearance [supervene.xml]
   LexSem("V","supervene",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("supervene"),arg1))),

 'supervise-01': # ARG0:supervisor / ARG1:thing supervised [supervise.xml]
   LexSem("V","supervise",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("supervise"),arg1))),

 'supinate-01': # ARG0:agent, turner / ARG1:thing or body part turned [supinate.xml]
   LexSem("V","supinate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("supinate"),pp("of",arg1)))),

 'supplant-01': # ARG0:replacer / ARG1:old thing / ARG2:new thing [supplant.xml]
   LexSem("V","supplant",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("supplant"),arg1,pp("by",arg2)))),

 'supplement-01': # ARG0:intentional agent / ARG1:thing enhanced, added to / ARG2:the supplement itself [supplement.xml]
   LexSem("V","supplement",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("supplement"),arg1,arg2))),

 'supplicate-01': # ARG0:agent, supplicator / ARG1:appealed to, begged from / ARG2:begged/appealed for [supplicate.xml]
   LexSem("V","supplicate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("supplicate"),arg1,pp("for",arg2)))),

 'supply-01': # ARG0:provider / ARG1:thing provided / ARG2:entity provided for (benefactive) [supply.xml]
   LexSem("V","supply",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("supply"),arg1,arg2))),

 'support-01': # ARG0:helper / ARG1:person, thing or project being supported [support.xml]
   LexSem("V","support",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("support"),arg1))),

 'suppose-01': # ARG0:Thinker / ARG1:Thing thought about / ARG2:Attributive, how arg1 is thought about [suppose.xml]
   LexSem("V","suppose",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("suppose"),arg1,arg2))),

 'suppose-02': # ARG1:thing seeming / ARG2:attribute [suppose.xml]
   LexSem("V","suppose",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("suppose"),pp("to",arg2)))),

 'suppress-01': # ARG0:suppressor / ARG1:suppressed [suppress.xml]
   LexSem("V","suppress",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("suppress"),arg1))),

 'suppurate-01': # ARG1:patient, thing suppurating [suppurate.xml]
   LexSem("V","suppurate",[":ARG1"],lambda arg1:S(arg1,VP(V("suppurate")))),

 'surf-01': # ARG0:surfer / ARG1:waves or internet / ARG2:thing looked for, sought [surf.xml]
   LexSem("V","surf",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("surf"),arg1,arg2))),

 'surface-01': # ARG1:thing appearing [surface.xml]
   LexSem("V","surface",[":ARG1"],lambda arg1:S(arg1,VP(V("surface")))),

 'surface-02': # ARG0:applier, agent / ARG1:substrate, medium / ARG2:stuff on top [surface.xml]
   LexSem("V","surface",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("surface"),arg1,pp("with",arg2)))),

 'surfeit-01': # ARG0:causer of satisfaction / ARG1:person satisfied / ARG2:instrument of satisfaction [surfeit.xml]
   LexSem("V","surfeit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("surfeit"),arg1,pp("with",arg2)))),

 'surge-01': # ARG0:agent of motion / ARG1:logical subject, patient, thing rising / ARG2:extent, amount risen / ARG3:start point / ARG4:end point / ARG5:specific aspect of arg1 that is surging [surge.xml]
   LexSem("V","surge",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg0,arg1,arg2,arg3,arg4,arg5:S(arg0,VP(V("surge"),arg1,arg2,arg3,pp("above",arg4),arg5))),

 'surmise-01': # ARG0:conjecturer / ARG1:belief [surmise.xml]
   LexSem("V","surmise",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("surmise"),arg1))),

 'surmount-01': # ARG0:cause, agent / ARG1:thing on top / ARG2:on top of what [surmount.xml]
   LexSem("V","surmount",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("surmount"),pp("with",arg1),arg2))),

 'surmount-02': # ARG0:victorious one, agent / ARG1:challenge [surmount.xml]
   LexSem("V","surmount",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("surmount"),arg1))),

 'surpass-01': # ARG0:thing going beyond / ARG1:thing left in the dust [surpass.xml]
   LexSem("V","surpass",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("surpass"),arg1))),

 'surprise-01': # ARG0:surpriser / ARG1:person surprised / ARG2:instrument (if in addition to arg0) [surprise.xml]
   LexSem("V","surprise",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("surprise"),arg1,pp("with",arg2)))),

 'surrender-01': # ARG0:one surrendering / ARG1:fight / ARG2:victor [surrender.xml]
   LexSem("V","surrender",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("surrender"),arg1,pp("to",arg2)))),

 'surround-01': # ARG0:causative agent / ARG1:thing surrounding / ARG2:thing surrounded [surround.xml]
   LexSem("V","surround",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("surround"),arg1,arg2))),

 'surveil-01': # ARG0:surveiler / ARG1:entity surveiled / ARG2:surveiled about / ARG3:beneficiary [surveil.xml]
   LexSem("V","surveil",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("surveil"),arg1,arg2,arg3))),

 'survey-01': # ARG0:examiner / ARG1:entity surveyed / ARG2:surveyed about / ARG3:beneficiary [survey.xml]
   LexSem("V","survey",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("survey"),arg1,pp("about",arg2),pp("for",arg3)))),

 'survey-02': # ARG0:surveyor / ARG1:location surveyed / ARG2:in search of / ARG3:value of the measurement/assessment [survey.xml]
   LexSem("V","survey",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("survey"),arg1,pp("for",arg2),pp("at",arg3)))),

 'survive-01': # ARG0:survivor / ARG1:adverse circumstances [survive.xml]
   LexSem("V","survive",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("survive"),arg1))),

 'survive-02': # ARG0:survivor / ARG1:deceased / ARG2:margin, extent [survive.xml]
   LexSem("V","survive",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("survive"),arg1,pp("by",arg2)))),

 'suspect-01': # ARG0:suspecter / ARG1:suspicion: what arg0 thinks / ARG2:suspect; entity inspring suspicion in arg0 [suspect.xml]
   LexSem("V","suspect",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("suspect"),arg1,arg2))),

 'suspend-01': # ARG0:agent / ARG1:action or object being stopped / ARG2:attribute/function of arg1 [suspend.xml]
   LexSem("V","suspend",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("suspend"),arg1,arg2))),

 'suspend-02': # ARG0:agent, entity causing something to be suspended / ARG1:thing suspended / ARG2:suspended from [suspend.xml]
   LexSem("V","suspend",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("suspend"),arg1,pp("from",arg2)))),

 'suspension-03': # ARG0:agent/authority capable of administering suspension / ARG1:entity getting suspended (might be a person, or their license, etc) / ARG2:position/place/activity suspended from / ARG3:crime [suspend.xml]
   LexSem("V","suspend",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("suspend"),pp("of",arg1),pp("from",arg2),pp("for",arg3)))),

 'sustain-01': # ARG0:Intentional agent (often inanimate, though) / ARG1:thing continuing [sustain.xml]
   LexSem("V","sustain",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sustain"),arg1))),

 'sustain-02': # ARG0:entity suffering a loss / ARG1:the loss [sustain.xml]
   LexSem("V","sustain",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sustain"),arg1))),

 'swab-01': # ARG0:polisher, agent / ARG1:stain, thing swabbed / ARG2:source, swabbed from [swab.xml]
   LexSem("V","swab",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("swab"),arg1,pp("from",arg2)))),

 'swaddle-01': # ARG0:swaddler, agent / ARG1:thing swaddled / ARG2:decorations, theme [swaddle.xml]
   LexSem("V","swaddle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("swaddle"),arg1,pp("in",arg2)))),

 'swag-01': # ARG0:Cause of sagging / ARG1:thing sagging. [swag.xml]
   LexSem("V","swag",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("swag"),arg1))),

 'swag-02': # ARG0:Agent or cause of an entity's swaying / ARG1:entity set in motion [swag.xml]
   LexSem("V","swag",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("swag"),arg1))),

 'swagger-01': # ARG0:walker, swaggerer / ARG1:path [swagger.xml]
   LexSem("V","swagger",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("swagger"),pp("down",arg1)))),

 'swallow-01': # ARG0:swallower / ARG1:thing swallowed [swallow.xml]
   LexSem("V","swallow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("swallow"),arg1))),

 'swallow-up-02': # ARG0:swallower / ARG1:thing swallowed [swallow.xml]
   LexSem("V","swallow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("swallow"),Adv("up"),arg1))),

 'swamp-01': # ARG0:cause, agent / ARG1:entity swamped / ARG2:instrument, swamped with [swamp.xml]
   LexSem("V","swamp",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("swamp"),arg1,pp("with",arg2)))),

 'swap-01': # ARG0:agent, entity trading / ARG1:thing being traded (away) / ARG2:other exchanger / ARG3:other item in exchange, price, or premium; traded for or at / ARG4:benefactive [swap.xml]
   LexSem("V","swap",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("swap"),arg1,pp("with",arg2),pp("for",arg3),arg4))),

 'swarm-01': # ARG0:the swarmer / ARG1:location/source of swarming [swarm.xml]
   LexSem("V","swarm",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("swarm"),pp("around",arg1)))),

 'swash-01': # ARG0:dasher / ARG1:liquid / ARG2:recipient/ wet thing [swash.xml]
   LexSem("V","swash",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("swash"),arg1,pp("on",arg2)))),

 'swat-01': # ARG0:swatter, agent / ARG1:entity swatted, patient / ARG2:instrument, swatted with [swat.xml]
   LexSem("V","swat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("swat"),pp("at",arg1),arg2))),

 'swathe-01': # ARG0:agent / ARG1:entity swathed / ARG2:entity swathed in/with [swathe.xml]
   LexSem("V","swathe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("swathe"),arg1,pp("in",arg2)))),

 'sway-01': # ARG0:causer / ARG1:thing swaying / ARG2:degree of motion [sway.xml]
   LexSem("V","sway",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sway"),arg1,arg2))),

 'sway-02': # ARG0:persuader / ARG1:persuaded / ARG2:persuaded to do what? [sway.xml]
   LexSem("V","sway",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sway"),arg1,arg2))),

 'swear-01': # ARG0:swearer / ARG1:promise / ARG2:on what (bible, life, etc) [swear.xml]
   LexSem("V","swear",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("swear"),pp("to",arg1),pp("on",arg2)))),

 'swear-02': # ARG0:swearer [swear.xml]
   LexSem("V","swear",[":ARG0"],lambda arg0:S(arg0,VP(V("swear")))),

 'swear-04': # ARG0:speaker / ARG1:true utterance / ARG2:listener [swear.xml]
   LexSem("V","swear",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("swear"),arg1,pp("to",arg2)))),

 'swear-05': # ARG0:swearer / ARG1:thing sworn by [swear.xml]
   LexSem("V","swear",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("swear"),pp("by",arg1)))),

 'swear-07': # ARG0:judge, legal authority / ARG1:person sworn in / ARG2:position, office [swear.xml]
   LexSem("V","swear",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("swear"),arg1,pp("into",arg2)))),

 'swear-in-06': # ARG0:judge, legal authority / ARG1:person sworn in / ARG2:position, office [swear.xml]
   LexSem("V","swear",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("swear"),Adv("into"),arg1,pp("into",arg2)))),

 'swear-off-03': # ARG0:swearer / ARG1:thing you're not going to do [swear.xml]
   LexSem("V","swear",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("swear"),Adv("off"),arg1))),

 'sweat-01': # ARG0:sweater (no, not like your grandmother made for you) / ARG1:the sweat itself [sweat.xml]
   LexSem("V","sweat",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sweat"),arg1))),

 'sweat-04': # ARG0:anxious entity / ARG1:cause of anxiety (often 'it') [sweat.xml]
   LexSem("V","sweat",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sweat"),arg1))),

 'sweat-off-03': # ARG0:sweat-er / ARG1:thing sweat off [sweat.xml]
   LexSem("V","sweat",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sweat"),Adv("off"),arg1))),

 'sweat-out-02': # ARG1:experiencer / ARG2:thing endured or period of time [sweat.xml]
   LexSem("V","sweat",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("sweat"),Adv("out"),arg2))),

 'sweep-01': # ARG0:agent / ARG1:the dirt itself / ARG2:source, dirty location being cleaned / ARG3:instrument (ie, broom) / ARG4:destination [sweep.xml]
   LexSem("V","sweep",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("sweep"),arg1,pp("from",arg2),pp("with",arg3),pp("under",arg4)))),

 'sweep-02': # ARG0:cause of motion / ARG1:thing in motion / ARG2:path / ARG3:destination [sweep.xml]
   LexSem("V","sweep",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("sweep"),arg1,arg2,pp("into",arg3)))),

 'sweep-05': # ARG0:Sweeper, winner / ARG1:Swept, loser / ARG2:swept in what? the competition in which sweeping occurred [sweep.xml]
   LexSem("V","sweep",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sweep"),arg1,pp("in",arg2)))),

 'sweep-up-03': # ARG0:embracer, sweeper / ARG1:thing embraced, swept up / ARG2:attribute on arg1 [sweep.xml]
   LexSem("V","sweep",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sweep"),Adv("up"),arg1,pp("as",arg2)))),

 'sweep-up-04': # ARG0:agent / ARG1:thing being cleaned (ie dirt) / ARG2:source (ie floor) / ARG3:instrument (ie, broom) / ARG4:destination [sweep.xml]
   LexSem("V","sweep",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("sweep"),Adv("up"),arg1,pp("within",arg2),arg3,arg4))),

 'sweeten-01': # ARG0:agent, entity causing sweetness / ARG1:thing becoming sweet / ARG2:explicit instrument [sweeten.xml]
   LexSem("V","sweeten",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("sweeten"),arg1,pp("with",arg2)))),

 'sweeten-02': # ARG0:improver / ARG1:thing improved / ARG2:end state / ARG3:start state [sweeten.xml]
   LexSem("V","sweeten",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("sweeten"),arg1,pp("to",arg2),pp("from",arg3)))),

 'swell-01': # ARG0:causal agent / ARG1:thing swelling / ARG2:EXT / ARG3:start point / ARG4:end point [swell.xml]
   LexSem("V","swell",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("swell"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'swelter-01': # ARG0:causer of fog / ARG1:thing sweltering (not "it") [swelter.xml]
   LexSem("V","swelter",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("swelter"),arg1))),

 'swerve-01': # ARG0:entity in motion / ARG1:description of path [swerve.xml]
   LexSem("V","swerve",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("swerve"),arg1))),

 'swig-01': # ARG0:one swigging, agent / ARG1:thing swigged, patient [swig.xml]
   LexSem("V","swig",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("swig"),arg1))),

 'swill-01': # ARG0:drinker, swiller, agent / ARG1:thing swilled, patient [swill.xml]
   LexSem("V","swill",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("swill"),arg1))),

 'swim-01': # ARG0:swimmer / ARG1:course (e.g. channel) / ARG2:to where? destination, end state / ARG3:from where? source [swim.xml]
   LexSem("V","swim",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("swim"),pp("across",arg1),pp("into",arg2),pp("from",arg3)))),

 'swim-02': # ARG1:head / ARG2:cause [swim.xml]
   LexSem("V","swim",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("swim"),pp("from",arg2)))),

 'swindle-01': # ARG0:entity removing / ARG1:thing being removed / ARG2:removed from [swindle.xml]
   LexSem("V","swindle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("swindle"),arg1,arg2))),

 'swing-01': # ARG1:thing swinging [swing.xml]
   LexSem("V","swing",[":ARG1"],lambda arg1:S(arg1,VP(V("swing")))),

 'swing-02': # ARG0:cause, agent / ARG1:thing swinging [swing.xml]
   LexSem("V","swing",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("swing"),arg1))),

 'swing-03': # ARG1:thing in motion / ARG2:EXT / ARG3:start point / ARG4:end point / ARG5:specific aspect of arg1 swinging [swing.xml]
   LexSem("V","swing",[":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg1,arg2,arg3,arg4,arg5:S(arg1,VP(V("swing"),arg2,arg3,pp("to",arg4),arg5))),

 'swing-04': # ARG1:music [swing.xml]
   LexSem("V","swing",[":ARG1"],lambda arg1:S(arg1,VP(V("swing")))),

 'swing-05': # ARG0:entity managing some task / ARG1:task managed [swing.xml]
   LexSem("V","swing",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("swing"),arg1))),

 'swipe-01': # ARG0:striker / ARG1:target / ARG2:instrument [swipe.xml]
   LexSem("V","swipe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("swipe"),pp("at",arg1),pp("with",arg2)))),

 'swipe-02': # ARG0:thief / ARG1:goods / ARG2:source, swiped from whom? [swipe.xml]
   LexSem("V","swipe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("swipe"),arg1,pp("from",arg2)))),

 'swirl-01': # ARG1:thing in motion [swirl.xml]
   LexSem("V","swirl",[":ARG1"],lambda arg1:S(arg1,VP(V("swirl")))),

 'swish-01': # ARG0:emitter of noise [swish.xml]
   LexSem("V","swish",[":ARG0"],lambda arg0:S(arg0,VP(V("swish")))),

 'swish-02': # ARG0:cause of motion / ARG1:entity in motion [swish.xml]
   LexSem("V","swish",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("swish"),arg1))),

 'switch-01': # ARG0:causer of transformation / ARG1:thing changing / ARG2:end state, attribute of arg1 / ARG3:start state [switch.xml]
   LexSem("V","switch",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("switch"),arg1,pp("to",arg2),pp("from",arg3)))),

 'switch-over-02': # ARG0:causer of transformation / ARG1:thing changing / ARG2:end state, attribute of arg1 / ARG3:start state [switch.xml]
   LexSem("V","switch",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("switch"),Adv("over"),arg1,pp("to",arg2),arg3))),

 'swivel-01': # ARG0:cause, agent / ARG1:thing swiveled [swivel.xml]
   LexSem("V","swivel",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("swivel"),arg1))),

 'swoon-01': # ARG0:fainter / ARG1:Stimulus of fainting [swoon.xml]
   LexSem("V","swoon",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("swoon"),arg1))),

 'swoon-02': # ARG0:Stimulus of swooning / ARG1:Experiencer, swooner [swoon.xml]
   LexSem("V","swoon",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("swoon"),arg1))),

 'swoop-01': # ARG0:swooper [swoop.xml]
   LexSem("V","swoop",[":ARG0"],lambda arg0:S(arg0,VP(V("swoop")))),

 'swoop-up-02': # ARG0:grabber / ARG1:grabbed [swoop.xml]
   LexSem("V","swoop",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("swoop"),Adv("up"),arg1))),

 'swoosh-01': # ARG0:causer of swooshing, agent (transitive subject) / ARG1:swooshing thing, theme (transitive object, intransitive subject) / ARG2:location, path of swooshing [swoosh.xml]
   LexSem("V","swoosh",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("swoosh"),arg1,pp("through",arg2)))),

 'symbolize-01': # ARG1:symbol / ARG2:class [symbolize.xml]
   LexSem("V","symbolize",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("symbolize"),arg2))),

 'sympathize-01': # ARG0:experiencer / ARG1:shared feelings or ideas [sympathize.xml]
   LexSem("V","sympathize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("sympathize"),pp("with",arg1)))),

 'synchronize-01': # ARG0:cause, agent / ARG1:first thing synchronized / ARG2:second thing, if separate [synchronize.xml]
   LexSem("V","synchronize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("synchronize"),arg1,pp("with",arg2)))),

 'syncopate-01': # ARG0:agent, person accenting the rythm / ARG1:words, motions that are syncopated [syncopate.xml]
   LexSem("V","syncopate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("syncopate"),arg1))),

 'syndicate-01': # ARG0:giver, distributor, syndicator / ARG1:thing given / ARG2:given to [syndicate.xml]
   LexSem("V","syndicate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("syndicate"),arg1,pp("to",arg2)))),

 'synergize-01': # ARG0:first party acting in synergy / ARG1:second party / ARG2:potentiated effect/process [synergize.xml]
   LexSem("V","synergize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("synergize"),pp("with",arg1),pp("to",arg2)))),

 'synthesize-01': # ARG0:creator / ARG1:thing created / ARG2:source / ARG3:benefactive / ARG4:attribute, secondary predication [synthesize.xml]
   LexSem("V","synthesize",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("synthesize"),arg1,arg2,arg3,arg4))),

 'systematize-01': # ARG0:causer, systematizer / ARG1:thing made or becoming systematic [systematize.xml]
   LexSem("V","systematize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("systematize"),arg1))),

 'table-01': # ARG0:agent / ARG1:thing available for discussion/selection [table.xml]
   LexSem("V","table",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("table"),arg1))),

 'table-02': # ARG0:agent / ARG1:thing on hold [table.xml]
   LexSem("V","table",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("table"),arg1))),

 'taboo-01': # ARG0:causer of tabooment / ARG1:taboo [taboo.xml]
   LexSem("V","taboo",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("taboo"),arg1))),

 'tabulate-01': # ARG0:builder / ARG1:item being counted/organized / ARG2:start state / ARG3:benefactive / ARG4:end state [tabulate.xml]
   LexSem("V","tabulate",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("tabulate"),arg1,arg2,arg3,arg4))),

 'tack-01': # ARG0:agent, entity doing the tacking / ARG1:first thing being tacked / ARG2:second thing, tacked to what / ARG3:instrument, string, tack [tack.xml]
   LexSem("V","tack",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("tack"),arg1,arg2,arg3))),

 'tack-02': # ARG0:sailor / ARG1:boat [tack.xml]
   LexSem("V","tack",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tack"),arg1))),

 'tack-down-04': # ARG0:cause of attachment, agent / ARG1:thing tacked down [tack.xml]
   LexSem("V","tack",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tack"),Adv("down"),arg1))),

 'tack-on-03': # ARG1:thing rising / ARG2:thing tacked on (might read as EXT) / ARG3:start point / ARG4:end point [tack.xml]
   LexSem("V","tack",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("tack"),Adv("on"),arg2,arg3,pp("to",arg4)))),

 'tackle-01': # ARG0:tackler, entity dealing with something, agent / ARG1:thing tackled / ARG2:means, strategy [tackle.xml]
   LexSem("V","tackle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tackle"),arg1,arg2))),

 'tag-01': # ARG0:attacher of label, agent / ARG1:entity tagged / ARG2:label (or what the tag says) [tag.xml]
   LexSem("V","tag",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tag"),arg1,arg2))),

 'tag-along-02': # ARG0:subject accompanier / ARG1:object accompanier, tagged along with / ARG3:start point / ARG4:end point [tag.xml]
   LexSem("V","tag",[":ARG0",":ARG1",":ARG3",":ARG4"],lambda arg0,arg1,arg3,arg4:S(arg0,VP(V("tag"),Adv("along"),pp("with",arg1),arg3,pp("to",arg4)))),

 'tail-01': # ARG0:follower, tailer / ARG1:followed, tailed [tail.xml]
   LexSem("V","tail",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tail"),arg1))),

 'tailgate-01': # ARG0:driver following too closely / ARG1:driver of the car being followed [tailgate.xml]
   LexSem("V","tailgate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tailgate"),arg1))),

 'tailgate-02': # ARG0:partier / ARG1:party with / ARG2:occasion (ie football game) [tailgate.xml]
   LexSem("V","tailgate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tailgate"),pp("with",arg1),arg2))),

 'tailor-01': # ARG0:tailor / ARG1:clothes / ARG2:target audience [tailor.xml]
   LexSem("V","tailor",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tailor"),arg1,pp("to",arg2)))),

 'taint-01': # ARG0:cause/source of contamination / ARG1:thing becoming contaminated / ARG2:contaminant [taint.xml]
   LexSem("V","taint",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("taint"),arg1,pp("by",arg2)))),

 'taiwanize-01': # ARG0:agent / ARG1:patient [taiwanize.xml]
   LexSem("V","taiwanize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("taiwanize"),arg1))),

 'take-01': # ARG0:Taker / ARG1:thing taken / ARG2:taken FROM, SOURCE of thing taken / ARG3:destination [take.xml]
   LexSem("V","take",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("take"),arg1,arg2,pp("into",arg3)))),

 'take-02': # ARG0:tolerator / ARG1:thing tolerated [take.xml]
   LexSem("V","take",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("take"),arg1))),

 'take-03': # ARG0:impeller to action / ARG1:impelled agent, topic / ARG2:impelled action, attribute of arg1 [take.xml]
   LexSem("V","take",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("take"),arg1,arg2))),

 'take-04': # ARG0:understander / ARG1:thing / ARG2:attribute [take.xml]
   LexSem("V","take",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("take"),arg1,pp("as",arg2)))),

 'take-10': # ARG0:requirer / ARG1:thing required / ARG2:required-of, required-from ('ablative') [take.xml]
   LexSem("V","take",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("take"),arg1,arg2))),

 'take-14': # ARG1:thing occuring / ARG2:fixed: place [take.xml]
   LexSem("V","take",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("take"),arg2))),

 'take-15': # ARG0:corporation, etc / ARG1:loss / ARG2:current financial holdings? [take.xml]
   LexSem("V","take",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("take"),arg1,pp("on",arg2)))),

 'take-16': # ARG0:causer of surprise / ARG1:experiencer of surprise / ARG2:surprise [take.xml]
   LexSem("V","take",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("take"),arg1,pp("by",arg2)))),

 'take-17': # ARG0:entity becoming fond of something / ARG1:thing fond of [take.xml]
   LexSem("V","take",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("take"),pp("to",arg1)))),

 'take-25': # ARG0:Swindler / ARG1:poor schmuck getting swindled / ARG2:money/item being taken [take.xml]
   LexSem("V","take",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("take"),arg1,pp("for",arg2)))),

 'take-32': # ARG1:similar entity / ARG2:entity taken after [take.xml]
   LexSem("V","take",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("take"),pp("after",arg2)))),

 'take-35': # ARG0:entity gathering in public / ARG1:destination, often 'streets' / ARG2:secondary action/instigating factor/purpose [take.xml]
   LexSem("V","take",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("take"),pp("to",arg1),arg2))),

 'take-LV': #  [take.xml]
   LexSem("V","take",[],lambda :S(VP(V("take")))),

 'take-aback-20': # ARG0:surprising entity / ARG1:surprised entity [take.xml]
   LexSem("V","take",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("take"),Adv("aback"),arg1))),

 'take-away-05': # ARG0:taker / ARG1:thing removed [take.xml]
   LexSem("V","take",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("take"),Adv("away"),arg1))),

 'take-down-22': # ARG0:taker / ARG1:thing taken down [take.xml]
   LexSem("V","take",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("take"),Adv("down"),arg1))),

 'take-in-06': # ARG0:entity giving shelter / ARG1:entity taking shelter [take.xml]
   LexSem("V","take",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("take"),Adv("in"),arg1))),

 'take-in-23': # ARG0:entity taking something in / ARG1:entity enjoyed, viewed, taken in [take.xml]
   LexSem("V","take",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("take"),Adv("in"),arg1))),

 'take-off-07': # ARG0:entity removing something / ARG1:thing being removed [take.xml]
   LexSem("V","take",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("take"),Adv("off"),arg1))),

 'take-off-08': # ARG1:thing increasing / ARG2:specific aspect of arg1 that is taking off [take.xml]
   LexSem("V","take",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("take"),Adv("off"),arg2))),

 'take-off-18': # ARG0:entity taking a vacation / ARG1:'time' / ARG2:work, job, etc [take.xml]
   LexSem("V","take",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("take"),Adv("off"),arg1,pp("from",arg2)))),

 'take-off-19': # ARG1:airplane / ARG2:airport [take.xml]
   LexSem("V","take",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("take"),Adv("off"),pp("from",arg2)))),

 'take-off-33': # ARG0:entity leaving / ARG1:start point / ARG2:destination [take.xml]
   LexSem("V","take",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("take"),Adv("off"),arg1,pp("to",arg2)))),

 'take-on-09': # ARG0:entity acquiring something / ARG1:thing being acquired / ARG2:seller / ARG3:price paid / ARG4:benefactive [take.xml]
   LexSem("V","take",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("take"),Adv("on"),arg1,arg2,arg3,arg4))),

 'take-on-21': # ARG0:hero / ARG1:adversary [take.xml]
   LexSem("V","take",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("take"),Adv("on"),arg1))),

 'take-out-11': # ARG0:entity drawing something forth / ARG1:thing taken out [take.xml]
   LexSem("V","take",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("take"),Adv("out"),arg1))),

 'take-out-26': # ARG0:angry person / ARG1:usually "it", thing causing anger / ARG2:person anger is projected on [take.xml]
   LexSem("V","take",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("take"),Adv("out"),arg1,pp("on",arg2)))),

 'take-out-27': # ARG0:killer, person taking out someone or something / ARG1:person being attacked [take.xml]
   LexSem("V","take",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("take"),Adv("out"),arg1))),

 'take-out-28': # ARG0:entity taking time off / ARG1:time taken / ARG2:work, job, etc (taking a vacation from) [take.xml]
   LexSem("V","take",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("take"),Adv("out"),arg1,pp("from",arg2)))),

 'take-over-12': # ARG0:entity becoming dominant / ARG1:entity being taken over / ARG2:the old boss [take.xml]
   LexSem("V","take",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("take"),Adv("over"),arg1,pp("for",arg2)))),

 'take-up-13': # ARG0:agent or causer / ARG1:space occupied / ARG2:entity taking up space or time [take.xml]
   LexSem("V","take",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("take"),Adv("up"),arg1,pp("with",arg2)))),

 'take-up-30': # ARG0:entity taking / ARG1:thing being occupied / ARG2:collaborator, interlocutor [take.xml]
   LexSem("V","take",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("take"),Adv("up"),arg1,pp("with",arg2)))),

 'take-up-31': # ARG0:entity taking up a new activity / ARG1:the new activity [take.xml]
   LexSem("V","take",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("take"),Adv("up"),arg1))),

 'take-up-38': # ARG0:agent / ARG1:thing beginning [take.xml]
   LexSem("V","take",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("take"),Adv("up"),arg1))),

 'take_advantage-02': # ARG0:user / ARG1:thing used / ARG2:purpose [advantage.xml]
   LexSem("V","take",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("take"),pp("of",arg1),arg2))),

 'take_into_account-04': # ARG0:considerer / ARG1:thing considered [account.xml]
   LexSem("V","take",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("take"),arg1))),

 'talc-01': # ARG0:agent, talcer / ARG1:patient, thing talced / ARG2:end result [talc.xml]
   LexSem("V","talc",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("talc"),arg1,arg2))),

 'talk-01': # ARG0:talker / ARG1:subject / ARG2:hearer [talk.xml]
   LexSem("V","talk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("talk"),pp("about",arg1),pp("with",arg2)))),

 'talk-02': # ARG0:talker / ARG1:talked to / ARG2:secondary action [talk.xml]
   LexSem("V","talk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("talk"),arg1,arg2))),

 'talk-out-03': # ARG0:talker / ARG1:topic of discussion / ARG2:other party involved in discussion [talk.xml]
   LexSem("V","talk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("talk"),Adv("out"),arg1,arg2))),

 'tally-01': # ARG0:counter, agent / ARG1:thing counted, summed [tally.xml]
   LexSem("V","tally",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tally"),arg1))),

 'tally-up-02': # ARG0:counter, agent / ARG1:thing counted, summed [tally.xml]
   LexSem("V","tally",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tally"),Adv("up"),arg1))),

 'tame-01': # ARG0:tamer / ARG1:formerly wild beast / ARG2:instrument [tame.xml]
   LexSem("V","tame",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tame"),arg1,pp("with",arg2)))),

 'tamp-down-01': # ARG0:agent, hitter - animate only! / ARG1:thing hit / ARG2:instrument, thing hit by or with [tamp.xml]
   LexSem("V","tamp",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tamp"),Adv("down"),arg1,arg2))),

 'tamper-01': # ARG0:interferer, agent / ARG1:tamper with [tamper.xml]
   LexSem("V","tamper",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tamper"),pp("with",arg1)))),

 'tan-01': # ARG0:causer of tanning (eg sun) / ARG1:tan entity / ARG2:description of tan, attribute of arg1 [tan.xml]
   LexSem("V","tan",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tan"),arg1,arg2))),

 'tangle-01': # ARG0:causer / ARG1:entity tangled / ARG2:location [tangle.xml]
   LexSem("V","tangle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tangle"),arg1,pp("around",arg2)))),

 'tangle-up-02': # ARG0:causer / ARG1:entity tangled / ARG2:location [tangle.xml]
   LexSem("V","tangle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tangle"),Adv("up"),arg1,pp("in",arg2)))),

 'tango-01': # ARG0:two / ARG1:explicit mention of dance itself (rare), or path [tango.xml]
   LexSem("V","tango",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tango"),pp("around",arg1)))),

 'tank-01': # ARG0:tanker [tank.xml]
   LexSem("V","tank",[":ARG0"],lambda arg0:S(arg0,VP(V("tank")))),

 'tantalize-01': # ARG0:tantalizer / ARG1:tantalized / ARG2:instrument or manner if separate [tantalize.xml]
   LexSem("V","tantalize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tantalize"),arg1,pp("with",arg2)))),

 'tap-01': # ARG0:agent, hitter - animate only! / ARG1:thing hit / ARG2:instrument, thing hit by or with [tap.xml]
   LexSem("V","tap",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tap"),arg1,pp("with",arg2)))),

 'tap-02': # ARG0:caller / ARG1:thing being summoned / ARG2:benefactive / ARG3:attribute of arg1 or task [tap.xml]
   LexSem("V","tap",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("tap"),arg1,arg2,pp("to",arg3)))),

 'tap-03': # ARG0:accessor, agent / ARG1:thing tapped [tap.xml]
   LexSem("V","tap",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tap"),arg1))),

 'tapdance-01': # ARG0:cause of tapdancing, agent (transitive tapdance only) / ARG1:tapdancer (intransitive subject, transitive object) / ARG2:location or path of tapdancing [tapdance.xml]
   LexSem("V","tapdance",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tapdance"),arg1,pp("at",arg2)))),

 'tape-01': # ARG0:taper, agent / ARG1:entity taped / ARG2:entity taped to [tape.xml]
   LexSem("V","tape",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tape"),arg1,pp("to",arg2)))),

 'tape-02': # ARG0:recorder, agent / ARG1:entity taped [tape.xml]
   LexSem("V","tape",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tape"),arg1))),

 'tape-up-03': # ARG0:agent of taping / ARG1:thing taped up / ARG2:the tape [tape.xml]
   LexSem("V","tape",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tape"),Adv("up"),arg1,pp("with",arg2)))),

 'taper-02': # ARG0:Agent / ARG1:Logical subject, patient, thing being diminished / ARG2:EXT, amount diminished by / ARG3:Start point / ARG4:End point [taper.xml]
   LexSem("V","taper",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("taper"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'taper-off-01': # ARG0:agent   (rare) / ARG1:thing becoming slender [taper.xml]
   LexSem("V","taper",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("taper"),Adv("off"),arg1))),

 'tar-01': # ARG0:applier, agent / ARG1:surface / ARG2:explicit mention of tar [tar.xml]
   LexSem("V","tar",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tar"),arg1,arg2))),

 'target-01': # ARG0:targeter / ARG1:thing aimed at / ARG2:instrument [target.xml]
   LexSem("V","target",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("target"),arg1,arg2))),

 'tarmac-01': # ARG0:agent, Tarmac layer / ARG1:Road/lot, location covered / ARG2:Tarmac itself, what kind of Tarmac [tarmac.xml]
   LexSem("V","tarmac",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tarmac"),arg1,pp("with",arg2)))),

 'tarnish-01': # ARG0:agent/cause of tarnishing / ARG1:tarnished entity [tarnish.xml]
   LexSem("V","tarnish",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tarnish"),arg1))),

 'tarry-01': # ARG0:one who tarries / ARG1:thing tarried over [tarry.xml]
   LexSem("V","tarry",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tarry"),pp("over",arg1)))),

 'task-01': # ARG0:boss / ARG1:task required / ARG2:required-of, task assigned to whom? [task.xml]
   LexSem("V","task",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("task"),pp("to",arg1),arg2))),

 'tassel-01': # ARG0:tassler / ARG1:thing tassled / ARG2:craft shop, location [tassel.xml]
   LexSem("V","tassel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tassel"),arg1,arg2))),

 'taste-01': # ARG0:taster / ARG1:food [taste.xml]
   LexSem("V","taste",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("taste"),arg1))),

 'taste-02': # ARG1:thing with flavor / ARG2:description of flavor [taste.xml]
   LexSem("V","taste",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("taste"),pp("like",arg2)))),

 'tattoo-01': # ARG0:tattooer, applier of design / ARG1:tattooed, person design is applied to / ARG2:the design [tattoo.xml]
   LexSem("V","tattoo",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tattoo"),arg1,pp("with",arg2)))),

 'taunt-01': # ARG0:taunter, agent / ARG1:entity taunted [taunt.xml]
   LexSem("V","taunt",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("taunt"),arg1))),

 'tauten-01': # ARG0:causer of tightening / ARG1:thing tightening [tauten.xml]
   LexSem("V","tauten",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tauten"),arg1))),

 'tax-01': # ARG0:taxer / ARG1:amount of tax / ARG2:taxpayer / ARG3:commodity [tax.xml]
   LexSem("V","tax",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("tax"),pp("of",arg1),arg2,arg3))),

 'tax-03': # ARG0:taxer / ARG1:thing changing state / ARG2:new state caused by taxing [tax.xml]
   LexSem("V","tax",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tax"),arg1,arg2))),

 'tax-away-02': # ARG0:taxer / ARG1:amount of tax / ARG2:taxpayer / ARG3:commodity [tax.xml]
   LexSem("V","tax",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("tax"),Adv("away"),arg1,arg2,arg3))),

 'taxi-01': # ARG0:agent, driver / ARG1:thing moved / ARG2:locations, or start point / ARG3:destination [taxi.xml]
   LexSem("V","taxi",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("taxi"),arg1,arg2,arg3))),

 'teach-01': # ARG0:teacher / ARG1:subject / ARG2:student(s) [teach.xml]
   LexSem("V","teach",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("teach"),arg1,arg2))),

 'team-01': # ARG0:agent, entity causing some grouping / ARG1:theme, thing being included in some group / ARG2:group, associated-with [team.xml]
   LexSem("V","team",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("team"),arg1,pp("with",arg2)))),

 'team-up-02': # ARG0:agent, entity causing some grouping / ARG1:theme, first (or all if in one mention) thing being included in some group / ARG2:group, associated-with [team.xml]
   LexSem("V","team",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("team"),Adv("up"),arg1,pp("with",arg2)))),

 'tear-01': # ARG0:puller, tearer, separator, agent / ARG1:thing torn / ARG2:torn between/from/out [tear.xml]
   LexSem("V","tear",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tear"),arg1,arg2))),

 'tear-02': # ARG0:entity rushing / ARG1:direction/location [tear.xml]
   LexSem("V","tear",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tear"),pp("through",arg1)))),

 'tear-03': # ARG1:entity filled with tears [tear.xml]
   LexSem("V","tear",[":ARG1"],lambda arg1:S(arg1,VP(V("tear")))),

 'tear-down-05': # ARG0:demolisher, agent / ARG1:entity torn [tear.xml]
   LexSem("V","tear",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tear"),Adv("down"),arg1))),

 'tear-up-04': # ARG0:tearer / ARG1:entity torn [tear.xml]
   LexSem("V","tear",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tear"),Adv("up"),arg1))),

 'tease-01': # ARG0:agent, discoverer / ARG1:thing discovered / ARG2:from where, source [tease.xml]
   LexSem("V","tease",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tease"),arg1,pp("from",arg2)))),

 'tease-02': # ARG0:agent, teaser / ARG1:patient, teased / ARG2:about what [tease.xml]
   LexSem("V","tease",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tease"),arg1,pp("about",arg2)))),

 'tease-03': # ARG0:evildoer, agent / ARG1:hair / ARG2:end result [tease.xml]
   LexSem("V","tease",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tease"),arg1,pp("into",arg2)))),

 'tease-out-04': # ARG0:agent, discoverer / ARG1:thing discovered / ARG2:from where, source [tease.xml]
   LexSem("V","tease",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tease"),Adv("out"),arg1,arg2))),

 'tee-off-01': # ARG0:golfer, agent / ARG1:golf ball [tee.xml]
   LexSem("V","tee",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tee"),Adv("off"),arg1))),

 'teem-01': # ARG0:entity teeming / ARG1:teeming with [teem.xml]
   LexSem("V","teem",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("teem"),pp("with",arg1)))),

 'teeter-01': # ARG1:thing teetering [teeter.xml]
   LexSem("V","teeter",[":ARG1"],lambda arg1:S(arg1,VP(V("teeter")))),

 'teethe-01': # ARG0:teether, agent / ARG1:thing teethed on, patient [teethe.xml]
   LexSem("V","teethe",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("teethe"),pp("on",arg1)))),

 'telecast-01': # ARG0:telecaster, agent / ARG1:thing telecasted / ARG2:telecasted to, recipient [telecast.xml]
   LexSem("V","telecast",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("telecast"),arg1,arg2))),

 'telegraph-01': # ARG0:sender / ARG1:receiver / ARG2:message [telegraph.xml]
   LexSem("V","telegraph",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("telegraph"),pp("to",arg1),arg2))),

 'telephone-01': # ARG0:caller / ARG1:called / ARG2:message [telephone.xml]
   LexSem("V","telephone",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("telephone"),arg1,arg2))),

 'televise-01': # ARG0:who put it on tv, agent / ARG1:event on television [televise.xml]
   LexSem("V","televise",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("televise"),arg1))),

 'telework-01': # ARG0:worker / ARG1:job, project / ARG2:employer / ARG3:coworker / ARG4:instrumental [telework.xml]
   LexSem("V","telework",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("telework"),arg1,arg2,arg3,arg4))),

 'telex-01': # ARG0:telexer, agent / ARG1:thing telexed / ARG2:sent to, recipient [telex.xml]
   LexSem("V","telex",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("telex"),arg1,pp("to",arg2)))),

 'tell-01': # ARG0:Speaker / ARG1:Utterance / ARG2:Hearer [tell.xml]
   LexSem("V","tell",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tell"),arg1,arg2))),

 'tell-02': # ARG0:entity causing separation / ARG1:thing(s) being divided / ARG2:source, separated from, if separate from arg1 [tell.xml]
   LexSem("V","tell",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tell"),arg1,pp("from",arg2)))),

 'tell-on-03': # ARG0:stool pigeon / ARG1:alleged perpetrator [tell.xml]
   LexSem("V","tell",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tell"),Adv("on"),arg1))),

 'temper-01': # ARG0:moderator / ARG1:thing that would be extreme otherwise [temper.xml]
   LexSem("V","temper",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("temper"),arg1))),

 'tempt-01': # ARG0:agent, tempter / ARG1:patient, tempted / ARG2:instrument, tempted with or by / ARG3:induced action of arg1 [tempt.xml]
   LexSem("V","tempt",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("tempt"),arg1,arg2,pp("to",arg3)))),

 'tend-01': # ARG0:tender / ARG1:thing tended (to) [tend.xml]
   LexSem("V","tend",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tend"),arg1))),

 'tend-02': # ARG1:theme / ARG2:attribute [tend.xml]
   LexSem("V","tend",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("tend"),pp("to",arg2)))),

 'tender-01': # ARG0:giver / ARG1:thing given/offered/paid / ARG2:recipient / ARG3:what the payment is for, might be total price or commodity [tender.xml]
   LexSem("V","tender",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("tender"),arg1,pp("to",arg2),pp("on",arg3)))),

 'tense-01': # ARG0:causer of tightening / ARG1:thing tightening [tense.xml]
   LexSem("V","tense",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tense"),arg1))),

 'term-01': # ARG0:caller / ARG1:item being labelled / ARG3:attribute [term.xml]
   LexSem("V","term",[":ARG0",":ARG1",":ARG3"],lambda arg0,arg1,arg3:S(arg0,VP(V("term"),arg1,arg3))),

 'terminate-01': # ARG0:Intentional agent / ARG1:Thing ending [terminate.xml]
   LexSem("V","terminate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("terminate"),arg1))),

 'terminate-02': # ARG0:employer / ARG1:ex-employee / ARG2:job [terminate.xml]
   LexSem("V","terminate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("terminate"),arg1,pp("from",arg2)))),

 'terrify-01': # ARG0:cause of terrification / ARG1:terrified entity / ARG2:prepositional argument [terrify.xml]
   LexSem("V","terrify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("terrify"),arg1,arg2))),

 'terrorize-01': # ARG0:intentional agent of scaring / ARG1:scared entity / ARG2:instrument, when separate from arg 0 / ARG3:intensifier, predication [terrorize.xml]
   LexSem("V","terrorize",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("terrorize"),arg1,arg2,pp("to",arg3)))),

 'test-01': # ARG0:examiner / ARG1:examined / ARG2:in search of, for what / ARG3:test result [test.xml]
   LexSem("V","test",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("test"),arg1,pp("for",arg2),arg3))),

 'testify-01': # ARG0:witness, agent / ARG1:testimony, evidence for / ARG2:person testified for/against [testify.xml]
   LexSem("V","testify",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("testify"),arg1,pp("on",arg2)))),

 'tether-01': # ARG0:attacher, agent / ARG1:thing(s) being tied together / ARG2:other things [tether.xml]
   LexSem("V","tether",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tether"),arg1,pp("to",arg2)))),

 'tetramerize-01': # ARG0:agent of tetramerization / ARG1:entity undergoing tetramerization / ARG2:start state (if arg1 is inappropriate) / ARG3:result, tetramer [tetramerize.xml]
   LexSem("V","tetramerize",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("tetramerize"),arg1,arg2,pp("into",arg3)))),

 'text-01': # ARG0:text sender / ARG1:message / ARG2:recipient / ARG3:subject matter of text (about what) [text.xml]
   LexSem("V","text",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("text"),arg1,arg2,pp("about",arg3)))),

 'thank-01': # ARG0:thanker / ARG1:thanked / ARG2:for what? [thank.xml]
   LexSem("V","thank",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("thank"),arg1,pp("for",arg2)))),

 'thatch-01': # ARG0:applier / ARG1:location thatched / ARG2:loofing material [thatch.xml]
   LexSem("V","thatch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("thatch"),arg1,pp("with",arg2)))),

 'thaw-01': # ARG0:causer of defrosting / ARG1:item losing its frost [thaw.xml]
   LexSem("V","thaw",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("thaw"),arg1))),

 'thaw-out-02': # ARG0:causer of defrosting / ARG1:item losing its frost [thaw.xml]
   LexSem("V","thaw",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("thaw"),Adv("out"),arg1))),

 'theorize-01': # ARG0:theorist / ARG1:theory [theorize.xml]
   LexSem("V","theorize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("theorize"),arg1))),

 'thicken-01': # ARG0:cause, agent / ARG1:thing becoming thick / ARG2:instrument [thicken.xml]
   LexSem("V","thicken",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("thicken"),arg1,pp("with",arg2)))),

 'thieve-01': # ARG0:thief / ARG1:thing stolen / ARG2:source [thieve.xml]
   LexSem("V","thieve",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("thieve"),arg1,pp("from",arg2)))),

 'thin-01': # ARG0:cause, agent / ARG1:entity getting thin / ARG2:component parts of arg1 that aren't close together [thin.xml]
   LexSem("V","thin",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("thin"),arg1,arg2))),

 'thin-out-02': # ARG0:cause, agent / ARG1:entity getting thin [thin.xml]
   LexSem("V","thin",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("thin"),Adv("out"),arg1))),

 'think-01': # ARG0:Thinker / ARG1:Thought / ARG2:Attributive (please look at the examples-- this is tricky) [think.xml]
   LexSem("V","think",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("think"),arg1,pp("about",arg2)))),

 'think-over-03': # ARG0:thinker / ARG1:subject matter considered [think.xml]
   LexSem("V","think",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("think"),Adv("over"),arg1))),

 'think-through-04': # ARG0:thinker / ARG1:topic considered fully [think.xml]
   LexSem("V","think",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("think"),Adv("through"),arg1))),

 'think-up-02': # ARG0:thinker / ARG1:thing thought up [think.xml]
   LexSem("V","think",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("think"),Adv("up"),arg1))),

 'thirst-01': # ARG0:thirsty thing / ARG1:thirsted for what [thirst.xml]
   LexSem("V","thirst",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("thirst"),pp("for",arg1)))),

 'thrash-01': # ARG0:agent, hitter - animate only! / ARG1:thing hit / ARG2:instrument, thing hit by or with [thrash.xml]
   LexSem("V","thrash",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("thrash"),arg1,pp("with",arg2)))),

 'thrash-03': # ARG1:thing in motion [thrash.xml]
   LexSem("V","thrash",[":ARG1"],lambda arg1:S(arg1,VP(V("thrash")))),

 'thrash-out-02': # ARG0:arranger / ARG1:scheme / ARG2:collaborator [thrash.xml]
   LexSem("V","thrash",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("thrash"),Adv("out"),arg1,arg2))),

 'thread-01': # ARG0:causer of motion / ARG1:thing in motion / ARG2:medium of threading [thread.xml]
   LexSem("V","thread",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("thread"),arg1,pp("through",arg2)))),

 'threaten-01': # ARG0:agent, entity making a threat / ARG1:threat / ARG2:'benefactive', entity threatened [threaten.xml]
   LexSem("V","threaten",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("threaten"),pp("to",arg1),arg2))),

 'thrill-01': # ARG0:causer of excitement / ARG1:excited entity [thrill.xml]
   LexSem("V","thrill",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("thrill"),arg1))),

 'thrill-02': # ARG0:excited entity / ARG1:cause of excitement [thrill.xml]
   LexSem("V","thrill",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("thrill"),pp("at",arg1)))),

 'thrive-01': # ARG1:entity thriving / ARG2:source, thrive on [thrive.xml]
   LexSem("V","thrive",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("thrive"),pp("on",arg2)))),

 'throb-01': # ARG1:throbbing thing [throb.xml]
   LexSem("V","throb",[":ARG1"],lambda arg1:S(arg1,VP(V("throb")))),

 'throng-01': # ARG0:the swarmer / ARG1:location [throng.xml]
   LexSem("V","throng",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("throng"),arg1))),

 'throttle-01': # ARG0:squeezer / ARG1:person or thing being squeezed [throttle.xml]
   LexSem("V","throttle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("throttle"),arg1))),

 'throw-01': # ARG0:thrower / ARG1:thing thrown / ARG2:thrown at, to, over, etc [throw.xml]
   LexSem("V","throw",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("throw"),arg1,pp("in",arg2)))),

 'throw-03': # ARG0:holder / ARG1:thing held [throw.xml]
   LexSem("V","throw",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("throw"),arg1))),

 'throw-away-07': # ARG0:thrower / ARG1:thing gotten rid of [throw.xml]
   LexSem("V","throw",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("throw"),Adv("away"),arg1))),

 'throw-in-02': # ARG0:agent, entity causing some grouping / ARG1:theme, thing being included in some group / ARG2:group [throw.xml]
   LexSem("V","throw",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("throw"),Adv("in"),arg1,arg2))),

 'throw-out-04': # ARG0:Sayer / ARG1:Utterance / ARG2:Hearer [throw.xml]
   LexSem("V","throw",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("throw"),Adv("out"),arg1,arg2))),

 'throw-out-06': # ARG0:thrower / ARG1:thing gotten rid of [throw.xml]
   LexSem("V","throw",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("throw"),Adv("out"),arg1))),

 'throw-up-05': # ARG0:puker / ARG1:former contents of stomach [throw.xml]
   LexSem("V","throw",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("throw"),Adv("up"),arg1))),

 'thrum-01': # ARG1:emitter of sound / ARG2:location of sound [thrum.xml]
   LexSem("V","thrum",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("thrum"),arg2))),

 'thrum-02': # ARG0:performer / ARG1:chords/melody / ARG2:musical instrument [thrum.xml]
   LexSem("V","thrum",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("thrum"),arg1,pp("on",arg2)))),

 'thrum-03': # ARG0:causal agent / ARG1:thing sounding with thrumming / ARG2:location [thrum.xml]
   LexSem("V","thrum",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("thrum"),arg1,pp("on",arg2)))),

 'thrust-01': # ARG0:agent, causer / ARG1:entity pushed / ARG2:direction, destination [thrust.xml]
   LexSem("V","thrust",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("thrust"),arg1,pp("into",arg2)))),

 'thud-01': # ARG0:thing thudding / ARG1:thing hit (NOT Location) [thud.xml]
   LexSem("V","thud",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("thud"),pp("against",arg1)))),

 'thumb-01': # ARG0:thumber / ARG1:thing looked through [thumb.xml]
   LexSem("V","thumb",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("thumb"),pp("through",arg1)))),

 'thumb-02': # ARG0:maker of gesture / ARG1:nose / ARG2:at whom [thumb.xml]
   LexSem("V","thumb",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("thumb"),arg1,pp("at",arg2)))),

 'thumbtack-01': # ARG0:thumbtacker, agent / ARG1:patient, thing thumbtacked / ARG2:thumbtacked to what, second patient / ARG3:instrument, thumbtack proper [thumbtack.xml]
   LexSem("V","thumbtack",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("thumbtack"),arg1,pp("to",arg2),arg3))),

 'thump-01': # ARG0:hitter / ARG1:thing hit [thump.xml]
   LexSem("V","thump",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("thump"),arg1))),

 'thump-02': # ARG1:emitter of sound [thump.xml]
   LexSem("V","thump",[":ARG1"],lambda arg1:S(arg1,VP(V("thump")))),

 'thunder-01': # ARG0:thunderer / ARG1:utterance / ARG2:listener [thunder.xml]
   LexSem("V","thunder",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("thunder"),arg1,pp("at",arg2)))),

 'thunder-02': # ARG0:speaker / ARG1:thing affected / ARG2:effect, attribute of arg1 [thunder.xml]
   LexSem("V","thunder",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("thunder"),arg1,pp("down",arg2)))),

 'thunk-01': # ARG0:thunker, agent (transitive subject) / ARG1:thing emitting noise, theme, (intransitive subject, transitive object) / ARG2:location of thunking [thunk.xml]
   LexSem("V","thunk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("thunk"),arg1,pp("on",arg2)))),

 'thwack-01': # ARG0:agent, hitter - animate only! / ARG1:thing hit / ARG2:instrument, thing hit by or with [thwack.xml]
   LexSem("V","thwack",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("thwack"),pp("on",arg1),arg2))),

 'thwap-01': # ARG0:agent, hitter - animate only! / ARG1:thing thwapped / ARG2:instrument, thing thwapping arg 1; answers the question thwapped with what? [thwap.xml]
   LexSem("V","thwap",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("thwap"),pp("against",arg1),arg2))),

 'thwart-01': # ARG0:thwarter / ARG1:thwartee [thwart.xml]
   LexSem("V","thwart",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("thwart"),arg1))),

 'tick-01': # ARG0:ticker [tick.xml]
   LexSem("V","tick",[":ARG0"],lambda arg0:S(arg0,VP(V("tick")))),

 'tick-04': # ARG0:causer of scale change / ARG1:thing changing position / ARG2:start state / ARG3:end state [tick.xml]
   LexSem("V","tick",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("tick"),arg1,arg2,pp("to",arg3)))),

 'tick-05': # ARG0:agent / ARG1:thing marked (destination) [tick.xml]
   LexSem("V","tick",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tick"),arg1))),

 'tick-off-02': # ARG0:cause of anger / ARG1:angry entity [tick.xml]
   LexSem("V","tick",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tick"),Adv("off"),arg1))),

 'tick-off-03': # ARG0:counter, agent / ARG1:thing(s) counted [tick.xml]
   LexSem("V","tick",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tick"),Adv("off"),arg1))),

 'ticket-01': # ARG0:designator, agent / ARG1:entity ticketed / ARG2:use [ticket.xml]
   LexSem("V","ticket",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ticket"),arg1,pp("for",arg2)))),

 'ticket-02': # ARG0:Agent, ticketer / ARG1:Entity ticketed, given ticket / ARG2:Mention of ticket itself (probably rare), ticketed with what? [ticket.xml]
   LexSem("V","ticket",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ticket"),arg1,pp("with",arg2)))),

 'tickle-01': # ARG0:tickler, agent / ARG1:thing tickled, patient / ARG2:instrument of tickling [tickle.xml]
   LexSem("V","tickle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tickle"),arg1,pp("with",arg2)))),

 'tidy-up-01': # ARG0:organizer, agent / ARG1:thing/place organized [tidy.xml]
   LexSem("V","tidy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tidy"),Adv("up"),arg1))),

 'tie-01': # ARG0:agent, entity doing the tying / ARG1:first thing being tied / ARG2:second thing, tied to what / ARG3:instrument, string / ARG4:attribute of arg1 [tie.xml]
   LexSem("V","tie",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("tie"),arg1,pp("to",arg2),pp("with",arg3),arg4))),

 'tie-03': # ARG0:causer of equal score / ARG1:in comparison to [tie.xml]
   LexSem("V","tie",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tie"),arg1))),

 'tie-down-06': # ARG1:stuck entity / ARG2:cause of stuckness [tie.xml]
   LexSem("V","tie",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("tie"),Adv("down"),arg2))),

 'tie-in-02': # ARG0:agent, entity doing the tying / ARG1:first thing tied in / ARG2:second thing, tied in with/to what [tie.xml]
   LexSem("V","tie",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tie"),Adv("in"),arg1,pp("with",arg2)))),

 'tie-up-04': # ARG0:tie-er / ARG1:tied [tie.xml]
   LexSem("V","tie",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tie"),Adv("up"),arg1))),

 'tie-up-05': # ARG1:thing involved / ARG2:thing involved in/with [tie.xml]
   LexSem("V","tie",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("tie"),Adv("up"),pp("in",arg2)))),

 'tighten-01': # ARG0:causer of tightening / ARG1:thing tightening [tighten.xml]
   LexSem("V","tighten",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tighten"),arg1))),

 'tighten-up-02': # ARG0:thing getting tight / ARG1:because of what [tighten.xml]
   LexSem("V","tighten",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tighten"),Adv("up"),pp("on",arg1)))),

 'tile-01': # ARG0:applier / ARG1:location tiled / ARG2:material, stuff tiled with [tile.xml]
   LexSem("V","tile",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tile"),arg1,pp("with",arg2)))),

 'till-01': # ARG0:tiller / ARG1:soil [till.xml]
   LexSem("V","till",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("till"),arg1))),

 'tilt-01': # ARG0:cause, agent / ARG1:thing not level / ARG2:path of tilt, tilt towards / ARG3:destination (goal actually reached by tilting), end state [tilt.xml]
   LexSem("V","tilt",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("tilt"),arg1,pp("toward",arg2),pp("into",arg3)))),

 'time-01': # ARG0:measurer / ARG1:action / ARG2:time required [time.xml]
   LexSem("V","time",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("time"),arg1,pp("at",arg2)))),

 'time-02': # ARG0:agent / ARG1:first thing synchronized / ARG2:second thing, if separate [time.xml]
   LexSem("V","time",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("time"),arg1,pp("to",arg2)))),

 'tin-01': # ARG0:coater / ARG1:thing coated / ARG2:metal workshop, location [tin.xml]
   LexSem("V","tin",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tin"),arg1,arg2))),

 'tincture-01': # ARG0:causer, agent / ARG1:thing tinctured, colored / ARG2:attribute of arg 1 [tincture.xml]
   LexSem("V","tincture",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tincture"),arg1,arg2))),

 'ting-01': # ARG0:agent, causer of tinging (transitive subject) / ARG1:theme, actual thing tinging (intransitive subject, transitive object) / ARG2:location of tinging [ting.xml]
   LexSem("V","ting",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ting"),arg1,arg2))),

 'tinge-01': # ARG0:causer, affecter / ARG1:thing affected / ARG2:attribute [tinge.xml]
   LexSem("V","tinge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tinge"),arg1,pp("with",arg2)))),

 'tingle-01': # ARG1:experiencer / ARG2:cause [tingle.xml]
   LexSem("V","tingle",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("tingle"),pp("with",arg2)))),

 'tinker-01': # ARG0:tinkerer, agent / ARG1:entity tinkered with [tinker.xml]
   LexSem("V","tinker",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tinker"),pp("with",arg1)))),

 'tinkle-01': # ARG1:emitter of sound [tinkle.xml]
   LexSem("V","tinkle",[":ARG1"],lambda arg1:S(arg1,VP(V("tinkle")))),

 'tinsel-01': # ARG0:Causal agent / ARG1:thing covered in tinsel / ARG2:the tinsel [tinsel.xml]
   LexSem("V","tinsel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tinsel"),arg1,pp("with",arg2)))),

 'tint-01': # ARG0:causer of coloration, tinter / ARG1:thing with color, thing tinted / ARG2:the color itself [tint.xml]
   LexSem("V","tint",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tint"),arg1,arg2))),

 'tip-01': # ARG0:cause, agent / ARG1:thing not level / ARG2:end state [tip.xml]
   LexSem("V","tip",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tip"),arg1,pp("on",arg2)))),

 'tip-02': # ARG0:tipper / ARG1:gratuity / ARG2:waiter, etc [tip.xml]
   LexSem("V","tip",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tip"),arg1,arg2))),

 'tip-05': # ARG0:informant / ARG1:informed / ARG2:informed of what [tip.xml]
   LexSem("V","tip",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tip"),arg1,arg2))),

 'tip-06': # ARG0:agent / ARG1:thing topped / ARG2:topped with [tip.xml]
   LexSem("V","tip",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tip"),arg1,pp("with",arg2)))),

 'tip-off-04': # ARG0:giver of hint / ARG1:getter of hint [tip.xml]
   LexSem("V","tip",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tip"),Adv("off"),arg1))),

 'tip-over-03': # ARG0:causer / ARG1:thing upside down [tip.xml]
   LexSem("V","tip",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tip"),Adv("over"),arg1))),

 'tipple-01': # ARG0:drinker / ARG1:drink [tipple.xml]
   LexSem("V","tipple",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tipple"),arg1))),

 'tiptoe-01': # ARG0:entity walking [tiptoe.xml]
   LexSem("V","tiptoe",[":ARG0"],lambda arg0:S(arg0,VP(V("tiptoe")))),

 'tire-01': # ARG0:causer of tiredness, sleepiness / ARG1:tired entity [tire.xml]
   LexSem("V","tire",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tire"),arg1))),

 'tire-03': # ARG0:tired entity / ARG1:what arg0 doesn't want to put up with anymore [tire.xml]
   LexSem("V","tire",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tire"),pp("of",arg1)))),

 'tire-out-02': # ARG0:causer of tiredness / ARG1:tired entity [tire.xml]
   LexSem("V","tire",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tire"),Adv("out"),arg1))),

 'tisk-01': # ARG0:tisker, agent / ARG1:a complaint, or topic of the complaint / ARG2:recipient, tisked to/at [tisk.xml]
   LexSem("V","tisk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tisk"),arg1,pp("to",arg2)))),

 'tithe-01': # ARG0:tithe contributor / ARG1:income or thing tithed / ARG2:amount given / ARG3:beneficiary [tithe.xml]
   LexSem("V","tithe",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("tithe"),arg1,arg2,arg3))),

 'titillate-01': # ARG0:causer of titillation / ARG1:experiencer of titillation [titillate.xml]
   LexSem("V","titillate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("titillate"),arg1))),

 'title-01': # ARG0:giver of title / ARG1:thing getting a title / ARG2:name, title [title.xml]
   LexSem("V","title",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("title"),arg1,arg2))),

 'titrate-01': # ARG0:Measurer (chemist, doctor) / ARG1:Chemical/Drugs / ARG2:Starting point before titration / ARG3:Endpoint after titration [titrate.xml]
   LexSem("V","titrate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("titrate"),arg1,arg2,arg3))),

 'titter-01': # ARG0:laugher / ARG1:cognate object, laugh itself when mentioned / ARG2:source of amusement / ARG3:end state of Arg0, result of snickering, into a tizzy, etc. [titter.xml]
   LexSem("V","titter",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("titter"),arg1,pp("at",arg2),arg3))),

 'toast-01': # ARG0:toaster, agent / ARG1:entity honored [toast.xml]
   LexSem("V","toast",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("toast"),arg1))),

 'toboggan-01': # ARG0:agent, driver (transitive subject) / ARG1:thing moved (intransitive subject, transitive object) / ARG2:locations, or start point / ARG3:destination [toboggan.xml]
   LexSem("V","toboggan",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("toboggan"),arg1,pp("down",arg2),arg3))),

 'toddle-01': # ARG0:agent, transitive subject / ARG1:theme, intransitive subject, transitive object / ARG2:path / ARG3:start point / ARG4:end point [toddle.xml]
   LexSem("V","toddle",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("toddle"),arg1,pp("around",arg2),arg3,arg4))),

 'toe-01': # ARG0:placer of toe / ARG1:location of toe [toe.xml]
   LexSem("V","toe",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("toe"),arg1))),

 'toe_line-08': # ARG0:compliant entity / ARG1:compliance with what [line.xml]
   LexSem("V","hew",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("hew"),arg1))),

 'tog-01': # ARG0:entity putting on clothes / ARG1:entity dressed up, decorated, wearing clothes (often reflexive) / ARG2:clothing itself or attribute; dressed up as what? [tog.xml]
   LexSem("V","tog",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tog"),arg1,pp("in",arg2)))),

 'toggle-01': # ARG0:toggler / ARG1:thing released [toggle.xml]
   LexSem("V","toggle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("toggle"),arg1))),

 'toil-01': # ARG0:worker / ARG1:job, project [toil.xml]
   LexSem("V","toil",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("toil"),arg1))),

 'tolerate-01': # ARG0:tolerater / ARG1:thing tolerated [tolerate.xml]
   LexSem("V","tolerate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tolerate"),arg1))),

 'toll-01': # ARG0:causer of ringing / ARG1:bell / ARG2:ring for [toll.xml]
   LexSem("V","toll",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("toll"),arg1,arg2))),

 'toll-02': # ARG0:toll-booth employee, person charging toll / ARG1:toll itself, amount charged / ARG2:person charged, paying toll / ARG3:toll for what? commodity [toll.xml]
   LexSem("V","toll",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("toll"),arg1,arg2,arg3))),

 'tomb-01': # ARG0:who put what where, agent / ARG1:corpse (I hope) / ARG2:tomb [tomb.xml]
   LexSem("V","tomb",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tomb"),arg1,arg2))),

 'tone-down-01': # ARG0:cause of diminishment, agent / ARG1:thing becoming less intense [tone.xml]
   LexSem("V","tone",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tone"),Adv("down"),arg1))),

 'tool-01': # ARG0:agent, driver / ARG1:entity in motion / ARG2:direction/path/location [tool.xml]
   LexSem("V","tool",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tool"),arg1,pp("past",arg2)))),

 'tool-02': # ARG0:agent, entity stocking the tools / ARG1:tools / ARG2:place stocked with tools [tool.xml]
   LexSem("V","tool",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tool"),pp("with",arg1),arg2))),

 'tool-03': # ARG0:agent, artisan / ARG1:material, surface tooled / ARG2:design/end product / ARG3:instrument [tool.xml]
   LexSem("V","tool",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("tool"),arg1,pp("with",arg2),arg3))),

 'tool-up-04': # ARG0:Agent / ARG1:thing made better/given "tools" [tool.xml]
   LexSem("V","tool",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tool"),Adv("up"),arg1))),

 'toot-01': # ARG0:cause, agent / ARG1:musical (?) instrument [toot.xml]
   LexSem("V","toot",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("toot"),pp("on",arg1)))),

 'tootle-01': # ARG0:tootler, agent (transitive subject) / ARG1:thing emitting noise (intransitive subject, transitive object) / ARG2:location of tootling [tootle.xml]
   LexSem("V","tootle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tootle"),pp("on",arg1),pp("in",arg2)))),

 'top-01': # ARG0:provider of top, agent / ARG1:thing topped / ARG2:top [top.xml]
   LexSem("V","top",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("top"),arg1,arg2))),

 'top-02': # ARG0:surpasser / ARG1:thing surpassed [top.xml]
   LexSem("V","top",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("top"),arg1))),

 'top-off-03': # ARG0:provider of top, agent / ARG1:thing topped / ARG2:top [top.xml]
   LexSem("V","top",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("top"),Adv("off"),arg1,pp("with",arg2)))),

 'top-up-04': # ARG0:agent of filling / ARG1:container filled / ARG2:substance put in [top.xml]
   LexSem("V","top",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("top"),Adv("up"),arg1,pp("with",arg2)))),

 'topple-01': # ARG0:causal agent / ARG1:thing toppling / ARG2:EXT / ARG3:start point / ARG4:end point [topple.xml]
   LexSem("V","topple",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("topple"),arg1,arg2,arg3,pp("onto",arg4)))),

 'torch-01': # ARG0:agent, causer / ARG1:entity torched [torch.xml]
   LexSem("V","torch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("torch"),arg1))),

 'torment-01': # ARG0:tormenter / ARG1:tormented / ARG2:instrument [torment.xml]
   LexSem("V","torment",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("torment"),arg1,pp("with",arg2)))),

 'torpedo-01': # ARG0:destroyer, firer of torpedo, agent / ARG1:entity torpedoed [torpedo.xml]
   LexSem("V","torpedo",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("torpedo"),arg1))),

 'torture-01': # ARG0:torturer / ARG1:entity being tortured [torture.xml]
   LexSem("V","torture",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("torture"),arg1))),

 'toss-01': # ARG0:tosser(s) / ARG1:thing tossed [toss.xml]
   LexSem("V","toss",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("toss"),arg1))),

 'toss-in-03': # ARG0:includer / ARG1:included [toss.xml]
   LexSem("V","toss",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("toss"),Adv("in"),arg1))),

 'toss-out-02': # ARG0:eliminator, agent / ARG1:thing eliminated [toss.xml]
   LexSem("V","toss",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("toss"),Adv("out"),arg1))),

 'total-01': # ARG1:thing being counted / ARG2:count [total.xml]
   LexSem("V","total",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("total"),arg2))),

 'total-02': # ARG0:wrecker / ARG1:wreck [total.xml]
   LexSem("V","total",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("total"),arg1))),

 'total-up-03': # ARG0:counter / ARG1:thing counted [total.xml]
   LexSem("V","tot",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tot"),Adv("up"),arg1))),

 'tote-01': # ARG0:carrier / ARG1:thing carried / ARG2:instrument / ARG3:'with' reflecting back on arg0 / ARG4:benefactive (predicted but not seen) [tote.xml]
   LexSem("V","tote",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("tote"),arg1,arg2,arg3,arg4))),

 'totter-01': # ARG1:thing tottering [totter.xml]
   LexSem("V","totter",[":ARG1"],lambda arg1:S(arg1,VP(V("totter")))),

 'totter-around-02': # ARG1:thing tottering [totter.xml]
   LexSem("V","totter",[":ARG1"],lambda arg1:S(arg1,VP(V("totter"),Adv("around")))),

 'touch-01': # ARG0:toucher / ARG1:thing touched / ARG2:touched with, if separate from agent [touch.xml]
   LexSem("V","touch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("touch"),arg1,pp("with",arg2)))),

 'touch-07': # ARG0:causer / ARG1:start state, thing touched / ARG2:end state [touch.xml]
   LexSem("V","touch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("touch"),arg1,pp("to",arg2)))),

 'touch-off-02': # ARG0:Agent / ARG1:thing starting / ARG2:Instrument / ARG3:secondary predication [touch.xml]
   LexSem("V","touch",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("touch"),Adv("off"),arg1,arg2,arg3))),

 'touch-off-06': # ARG0:starter of fire / ARG1:(in)flammable substance [touch.xml]
   LexSem("V","touch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("touch"),Adv("off"),arg1))),

 'touch-on-04': # ARG0:focus / ARG1:topic [touch.xml]
   LexSem("V","touch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("touch"),Adv("on"),arg1))),

 'touch-up-03': # ARG0:repairer / ARG1:thing repaired / ARG2:instrument [touch.xml]
   LexSem("V","touch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("touch"),Adv("up"),arg1,arg2))),

 'touch-upon-05': # ARG0:focus / ARG1:topic [touch.xml]
   LexSem("V","touch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("touch"),Adv("upon"),arg1))),

 'toughen-01': # ARG0:cause of toughness, agent / ARG1:thing getting tough [toughen.xml]
   LexSem("V","toughen",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("toughen"),arg1))),

 'tour-01': # ARG0:tourist / ARG1:location toured / ARG2:subject matter/title of tour (see examples) [tour.xml]
   LexSem("V","tour",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tour"),arg1,arg2))),

 'tousle-01': # ARG0:agent, tousler / ARG1:thing tousled / ARG2:instrument / ARG3:end point [tousle.xml]
   LexSem("V","tousle",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("tousle"),arg1,pp("with",arg2),pp("into",arg3)))),

 'tout-01': # ARG0:advertiser / ARG1:thing touted / ARG2:attribute of arg1 / ARG3:recipient [tout.xml]
   LexSem("V","tout",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("tout"),arg1,pp("as",arg2),pp("to",arg3)))),

 'tow-01': # ARG0:puller / ARG1:thing pulled / ARG2:DIR, GOL or attribute of arg1 / ARG3:EXT, distance moved [tow.xml]
   LexSem("V","tow",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("tow"),arg1,arg2,arg3))),

 'towel-01': # ARG0:toweler, agent / ARG1:liquid / ARG2:surface dried / ARG3:instrument, towel [towel.xml]
   LexSem("V","towel",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("towel"),arg1,pp("from",arg2),arg3))),

 'tower-01': # ARG0:entity rising / ARG1:entity towered over [tower.xml]
   LexSem("V","tower",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tower"),pp("over",arg1)))),

 'toy-01': # ARG0:Agent, toyer / ARG1:Thing toyed with [toy.xml]
   LexSem("V","toy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("toy"),pp("with",arg1)))),

 'trace-01': # ARG0:copier, agent / ARG1:thing traced / ARG2:transparent surface [trace.xml]
   LexSem("V","trace",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("trace"),arg1,pp("onto",arg2)))),

 'trace-02': # ARG0:follower / ARG1:thing followed / ARG2:the thing's source  (actually destination) [trace.xml]
   LexSem("V","trace",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("trace"),arg1,pp("to",arg2)))),

 'track-01': # ARG0:thing following / ARG1:thing followed / ARG2:benefactive / ARG3:instrument [track.xml]
   LexSem("V","track",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("track"),arg1,pp("for",arg2),pp("with",arg3)))),

 'track-03': # ARG1:thing on track / ARG2:track itself (loosely speaking) [track.xml]
   LexSem("V","track",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("track"),pp("with",arg2)))),

 'track-down-02': # ARG0:finder / ARG1:thing found / ARG2:benefactive, found for [track.xml]
   LexSem("V","track",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("track"),Adv("down"),arg1,pp("for",arg2)))),

 'trade-01': # ARG0:agent, entity trading / ARG1:thing being traded (away) / ARG2:other exchanger / ARG3:other item in exchange, price, or premium, traded for or at / ARG4:benefactive [trade.xml]
   LexSem("V","trade",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("trade"),arg1,pp("to",arg2),pp("for",arg3),pp("for",arg4)))),

 'trade-off-03': # ARG0:agent / ARG1:thing being traded off / ARG2:other exchanger / ARG3:other item in exchange, price / ARG4:beneficiary [trade.xml]
   LexSem("V","trade",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("trade"),Adv("off"),arg1,arg2,pp("for",arg3),arg4))),

 'trademark-01': # ARG0:granter of license / ARG1:licensed thing / ARG2:benefactive, licensed-to [trademark.xml]
   LexSem("V","trademark",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("trademark"),arg1,pp("to",arg2)))),

 'traduce-01': # ARG0:speaker, agent / ARG1:entity traduced [traduce.xml]
   LexSem("V","traduce",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("traduce"),arg1))),

 'traffic-01': # ARG0:seller / ARG1:item sold / ARG2:buyer [traffic.xml]
   LexSem("V","traffic",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("traffic"),pp("of",arg1),arg2))),

 'trail-01': # ARG0:thing following / ARG1:thing followed [trail.xml]
   LexSem("V","trail",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("trail"),arg1))),

 'trail-03': # ARG0:dragger, drawer / ARG1:trailer [trail.xml]
   LexSem("V","trail",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("trail"),arg1))),

 'trail-off-02': # ARG1:thing ending [trail.xml]
   LexSem("V","trail",[":ARG1"],lambda arg1:S(arg1,VP(V("trail"),Adv("off")))),

 'train-01': # ARG0:trainer / ARG1:skill / ARG2:trainee [train.xml]
   LexSem("V","train",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("train"),pp("to",arg1),arg2))),

 'train-02': # ARG0:agent, focusser / ARG1:thing focussed / ARG2:focussed-on [train.xml]
   LexSem("V","train",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("train"),arg1,pp("on",arg2)))),

 'traipse-01': # ARG0:entity in motion / ARG1:path [traipse.xml]
   LexSem("V","traipse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("traipse"),arg1))),

 'tram-01': # ARG0:agent, driver / ARG1:tram riders / ARG2:start point / ARG3:destination / ARG4:path [tram.xml]
   LexSem("V","tram",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("tram"),arg1,arg2,pp("to",arg3),arg4))),

 'trammel-01': # ARG0:trammeler, agent / ARG1:entity trammeled, patient / ARG2:trammeled to what, second patient / ARG3:instrument, trammeled with what [trammel.xml]
   LexSem("V","trammel",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("trammel"),arg1,arg2,arg3))),

 'tramp-01': # ARG0:entity in motion / ARG1:path [tramp.xml]
   LexSem("V","tramp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tramp"),pp("through",arg1)))),

 'trample-01': # ARG0:damager / ARG1:damaged [trample.xml]
   LexSem("V","trample",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("trample"),arg1))),

 'tranquilize-01': # ARG0:agent / ARG1:patient [tranquilize.xml]
   LexSem("V","tranquilize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tranquilize"),arg1))),

 'transact-01': # ARG0:entity performing the transaction / ARG1:thing transacted or theme / ARG2:co-transactor / ARG3:value of transaction [transact.xml]
   LexSem("V","transact",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("transact"),arg1,pp("with",arg2),arg3))),

 'transactivate-01': # ARG0:intentional agent of transactivation (e.g. scientist) / ARG1:thing transactivated, gene / ARG2:instrument, protein, transactivator [transactivate.xml]
   LexSem("V","transactivate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("transactivate"),arg1,arg2))),

 'transcend-01': # ARG0:thing going beyond / ARG1:thing transcended [transcend.xml]
   LexSem("V","transcend",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("transcend"),arg1))),

 'transcribe-01': # ARG0:copier, agent / ARG1:thing copied / ARG2:original medium / ARG3:destination medium [transcribe.xml]
   LexSem("V","transcribe",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("transcribe"),arg1,arg2,pp("into",arg3)))),

 'transduce-01': # ARG0:Agent causing the transfer (doctor) / ARG1:material transfered (e.g. DNA) / ARG2:instrument of transduction (e.g. viral agent) [transduce.xml]
   LexSem("V","transduce",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("transduce"),arg1,pp("with",arg2)))),

 'transfect-01': # ARG0:intentional agent of transfection (e.g. scientist) / ARG1:recipient of transfection (e.g. cell) / ARG2:entity inserted into the cell (e.g. nucleid acid) [transfect.xml]
   LexSem("V","transfect",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("transfect"),arg1,arg2))),

 'transfer-01': # ARG0:sender / ARG1:sent / ARG2:sent-to / ARG3:sent-from [transfer.xml]
   LexSem("V","transfer",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("transfer"),arg1,pp("to",arg2),pp("from",arg3)))),

 'transfix-01': # ARG0:causer of transfixation / ARG1:transfixed entity / ARG2:instrument, if separate from arg 0 [transfix.xml]
   LexSem("V","transfix",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("transfix"),arg1,arg2))),

 'transform-01': # ARG0:causer of transformation / ARG1:thing changing / ARG2:end state / ARG3:start state [transform.xml]
   LexSem("V","transform",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("transform"),arg1,pp("to",arg2),pp("from",arg3)))),

 'transfuse-101': # ARG0:Doctor / ARG1:Patient / ARG2:Substance [transfuse.xml]
   LexSem("V","transfuse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("transfuse"),arg1,pp("of",arg2)))),

 'transgress-01': # ARG0:Transgressor, Agent / ARG1:Thing transgressed, law or command violated [transgress.xml]
   LexSem("V","transgress",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("transgress"),arg1))),

 'transit-01': # ARG1:thing passing / ARG2:location, space crossed [transit.xml]
   LexSem("V","transit",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("transit"),pp("through",arg2)))),

 'transition-01': # ARG0:causer of change / ARG1:thing changing / ARG2:end state / ARG3:start state [transition.xml]
   LexSem("V","transition",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("transition"),arg1,pp("to",arg2),pp("from",arg3)))),

 'translate-01': # ARG0:causer of transformation / ARG1:thing changing / ARG2:end state / ARG3:start state [translate.xml]
   LexSem("V","translate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("translate"),arg1,pp("into",arg2),pp("from",arg3)))),

 'translate-02': # ARG0:intentional agent of translation (e.g. scientist) / ARG1:thing translated (messenger RNA) / ARG2:product of translation (protein) [translate.xml]
   LexSem("V","translate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("translate"),arg1,arg2))),

 'transliterate-01': # ARG0:copier, agent / ARG1:thing converted / ARG2:source string / ARG3:target string / ARG4:source script / ARG5:target script / ARG6:transliteration standard (e.g. Pinyin and Wade-Giles for Mandarin to Latin) [transliterate.xml]
   LexSem("V","transliterate",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4",":ARG5",":ARG6"],lambda arg0,arg1,arg2,arg3,arg4,arg5,arg6:S(arg0,VP(V("transliterate"),arg1,arg2,arg3,arg4,arg5))),

 'translocate-01': # ARG0:agent of translocation / ARG1:thing translocated (e.g. protein) / ARG2:destination / ARG3:source [translocate.xml]
   LexSem("V","translocate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("translocate"),arg1,arg2,arg3))),

 'transmigrate-01': # ARG0:entity in motion / ARG1:path, barrier being crossed / ARG2:destination [transmigrate.xml]
   LexSem("V","transmigrate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("transmigrate"),pp("across",arg1),pp("to",arg2)))),

 'transmit-01': # ARG0:sender / ARG1:sent / ARG2:sent-to [transmit.xml]
   LexSem("V","transmit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("transmit"),arg1,pp("to",arg2)))),

 'transmogrify-01': # ARG0:cause of change, agent / ARG1:thing changing / ARG2:start state / ARG3:end state [transmogrify.xml]
   LexSem("V","transmogrify",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("transmogrify"),arg1,arg2,pp("into",arg3)))),

 'transmute-01': # ARG0:causer of change, agent / ARG1:entity undergoing transmutation / ARG2:end state, arg 1 transmuted into what? / ARG3:start state, arg 1 transmuted from what? [transmute.xml]
   LexSem("V","transmute",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("transmute"),arg1,pp("into",arg2),arg3))),

 'transphosphorylate-01': # ARG0:agent of transphosphorylation / ARG1:thing transphosphorylated / ARG2:instrument / ARG3:product of transphosphorylation [transphosphorylate.xml]
   LexSem("V","transphosphorylate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("transphosphorylate"),arg1,arg2,arg3))),

 'transpire-01': # ARG1:event / ARG2:transpired between, location [transpire.xml]
   LexSem("V","transpire",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("transpire"),pp("between",arg2)))),

 'transplant-01': # ARG0:mover, agent / ARG1:thing moved / ARG2:destination / ARG3:source [transplant.xml]
   LexSem("V","transplant",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("transplant"),arg1,pp("into",arg2),pp("from",arg3)))),

 'transport-01': # ARG0:transporter / ARG1:thing transported / ARG2:source / ARG3:destination / ARG4:path [transport.xml]
   LexSem("V","transport",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("transport"),arg1,pp("from",arg2),pp("to",arg3),arg4))),

 'transpose-01': # ARG0:transposer, agent / ARG1:thing(s) transposed / ARG2:source, initial state/place / ARG3:destination, final state/place [transpose.xml]
   LexSem("V","transpose",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("transpose"),arg1,pp("from",arg2),pp("to",arg3)))),

 'trap-01': # ARG0:trapper, agent / ARG1:entity trapped / ARG2:location [trap.xml]
   LexSem("V","trap",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("trap"),arg1,pp("in",arg2)))),

 'trash-01': # ARG0:disposer, agent / ARG1:entity trashed [trash.xml]
   LexSem("V","trash",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("trash"),arg1))),

 'traumatize-01': # ARG0:cause / ARG1:patient / ARG2:instrument (only when in addition to arg0) [traumatize.xml]
   LexSem("V","traumatize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("traumatize"),arg1,pp("with",arg2)))),

 'travel-01': # ARG0:traveller / ARG1:location or path / ARG2:start point / ARG4:destination [travel.xml]
   LexSem("V","travel",[":ARG0",":ARG1",":ARG2",":ARG4"],lambda arg0,arg1,arg2,arg4:S(arg0,VP(V("travel"),arg1,pp("from",arg2),pp("to",arg4)))),

 'traverse-01': # ARG0:traveller / ARG1:wide area [traverse.xml]
   LexSem("V","traverse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("traverse"),arg1))),

 'trawl-01': # ARG0:trawler, agent / ARG1:location trawled / ARG2:thing trawled for [trawl.xml]
   LexSem("V","trawl",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("trawl"),arg1,arg2))),

 'tread-01': # ARG0:entity treading / ARG1:entity tread (usually water) [tread.xml]
   LexSem("V","tread",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tread"),arg1))),

 'treasure-01': # ARG0:experiencer, treasurer / ARG1:treasured [treasure.xml]
   LexSem("V","treasure",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("treasure"),arg1))),

 'treat-01': # ARG0:assumer of attribute / ARG1:thing / ARG2:attribute [treat.xml]
   LexSem("V","treat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("treat"),arg1,pp("as",arg2)))),

 'treat-02': # ARG0:buyer, treater / ARG1:treat / ARG2:benefactive [treat.xml]
   LexSem("V","treat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("treat"),pp("to",arg1),arg2))),

 'treat-03': # ARG0:doctor (etc) / ARG1:patient / ARG2:illness or injury / ARG3:instrument [treat.xml]
   LexSem("V","treat",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("treat"),arg1,pp("for",arg2),arg3))),

 'treat-04': # ARG0:cause of change, agent / ARG1:thing changing / ARG2:substance, treatment [treat.xml]
   LexSem("V","treat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("treat"),arg1,pp("with",arg2)))),

 'treat-05': # ARG0:author / ARG1:topic, subject [treat.xml]
   LexSem("V","treat",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("treat"),arg1))),

 'treble-01': # ARG0:cause of tripling, agent / ARG1:entity tripled [treble.xml]
   LexSem("V","treble",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("treble"),arg1))),

 'tree-01': # ARG0:driver / ARG1:thing driven / ARG2:tree, location [tree.xml]
   LexSem("V","tree",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tree"),arg1,pp("in",arg2)))),

 'trek-01': # ARG0:entity in motion / ARG1:path, location [trek.xml]
   LexSem("V","trek",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("trek"),arg1))),

 'tremble-01': # ARG1:thing trembling [tremble.xml]
   LexSem("V","tremble",[":ARG1"],lambda arg1:S(arg1,VP(V("tremble")))),

 'trend-01': # ARG1:theme / ARG2:attribute of arg1 [trend.xml]
   LexSem("V","trend",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("trend"),arg2))),

 'trespass-01': # ARG0:trespasser, agent / ARG1:entity trespassed on [trespass.xml]
   LexSem("V","trespass",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("trespass"),pp("on",arg1)))),

 'trial-06': # ARG0:doctor / ARG1:patient, consumer / ARG2:medication/ treatment, thing tested [try.xml]
   LexSem("V","trial",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("trial"),arg1,pp("on",arg2)))),

 'trick-01': # ARG0:deceiver, agent / ARG1:entity tricked / ARG2:tricked into doing what? [trick.xml]
   LexSem("V","trick",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("trick"),arg1,arg2))),

 'trickle-01': # ARG0:agent, causer / ARG1:entity trickling / ARG2:destination [trickle.xml]
   LexSem("V","trickle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("trickle"),arg1,pp("to",arg2)))),

 'trigger-01': # ARG0:Agent / ARG1:Theme(-Creation) / ARG2:Instrument / ARG3:secondary predication [trigger.xml]
   LexSem("V","trigger",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("trigger"),arg1,pp("with",arg2),arg3))),

 'trigger-off-02': # ARG0:agent starting/triggering something / ARG1:thing beginning, triggered off / ARG2:instrument / ARG3:attribute of arg1 [trigger.xml]
   LexSem("V","trigger",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("trigger"),Adv("off"),arg1,arg2,arg3))),

 'trill-01': # ARG0:trill-er / ARG1:utterance, trill / ARG2:hearer [trill.xml]
   LexSem("V","trill",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("trill"),arg1,pp("at",arg2)))),

 'trim-01': # ARG0:cutter / ARG1:thing cut / ARG2:medium, source / ARG3:instrument [trim.xml]
   LexSem("V","trim",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("trim"),arg1,pp("from",arg2),pp("with",arg3)))),

 'trim-02': # ARG0:cutter / ARG1:thing reduced / ARG2:amount reduced by / ARG3:start point / ARG4:end point [trim.xml]
   LexSem("V","trim",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("trim"),pp("about",arg1),arg2,pp("from",arg3),pp("to",arg4)))),

 'trim-03': # ARG0:decorator / ARG1:thing decorated / ARG2:decorations [trim.xml]
   LexSem("V","trim",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("trim"),arg1,pp("with",arg2)))),

 'trim-down-04': # ARG0:cutter / ARG1:thing reduced / ARG2:amount reduced by / ARG3:start point / ARG4:end point [trim.xml]
   LexSem("V","trim",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("trim"),Adv("down"),arg1,arg2,arg3,arg4))),

 'trip-01': # ARG0:cause of trip, overload / ARG1:thing tripped (circuit breaker) [trip.xml]
   LexSem("V","trip",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("trip"),arg1))),

 'trip-02': # ARG0:entity tripping / ARG1:mention of 'balls' or other intensifying object / ARG2:drug or subject matter stimulus [trip.xml]
   LexSem("V","trip",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("trip"),arg1,pp("on",arg2)))),

 'trip-04': # ARG0:agent, entity stumbling / ARG1:tripped over [trip.xml]
   LexSem("V","trip",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("trip"),pp("over",arg1)))),

 'triple-01': # ARG0:agent, causer / ARG1:entity increasing / ARG2:EXT, never mentioned / ARG3:start point / ARG4:end point [triple.xml]
   LexSem("V","triple",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("triple"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'triumph-01': # ARG0:winner / ARG1:loser / ARG2:competition [triumph.xml]
   LexSem("V","triumph",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("triumph"),pp("over",arg1),pp("in",arg2)))),

 'trivialize-01': # ARG0:cause, agent / ARG1:trivial thing [trivialize.xml]
   LexSem("V","trivialize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("trivialize"),arg1))),

 'troll-01': # ARG0:troller, agent / ARG1:area trolled, location / ARG2:thing trolled for, theme [troll.xml]
   LexSem("V","troll",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("troll"),arg1,pp("for",arg2)))),

 'trolley-01': # ARG0:agent, driver (transitive subject) / ARG1:thing moved (intransitive subject, transitive object) / ARG2:locations, or start point / ARG3:destination [trolley.xml]
   LexSem("V","trolley",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("trolley"),arg1,arg2,pp("to",arg3)))),

 'troop-01': # ARG0:agent, transitive subject / ARG1:theme, intransitive subject, transitive object / ARG2:start point / ARG3:end point / ARG4:path [troop.xml]
   LexSem("V","troop",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("troop"),arg1,arg2,pp("into",arg3),arg4))),

 'trot-01': # ARG0:trotter / ARG1:path [trot.xml]
   LexSem("V","trot",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("trot"),pp("down",arg1)))),

 'trot-out-02': # ARG0:introducer / ARG1:thing being brought up [trot.xml]
   LexSem("V","trot",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("trot"),Adv("out"),arg1))),

 'trouble-01': # ARG0:cause of trouble / ARG1:experiencer, one upset / ARG2:instrument or manner (if arg0 also present) [trouble.xml]
   LexSem("V","trouble",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("trouble"),arg1,arg2))),

 'trouble-05': # ARG0:agent, entity forcing the effort (rare) / ARG1:entity trying, exherting / ARG2:thing tried [trouble.xml]
   LexSem("V","go",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("go"),arg1,pp("of",arg2)))),

 'trounce-01': # ARG0:winner / ARG1:loser / ARG2:competition [trounce.xml]
   LexSem("V","trounce",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("trounce"),arg1,pp("in",arg2)))),

 'truck-01': # ARG0:driver / ARG1:truck or load [truck.xml]
   LexSem("V","truck",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("truck"),arg1))),

 'trudge-01': # ARG0:entity in motion / ARG1:path [trudge.xml]
   LexSem("V","trudge",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("trudge"),pp("through",arg1)))),

 'trump-01': # ARG0:better one / ARG1:entity trumped, lesser one [trump.xml]
   LexSem("V","trump",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("trump"),arg1))),

 'trumpet-01': # ARG0:speaker / ARG1:utterance / ARG2:hearer [trumpet.xml]
   LexSem("V","trumpet",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("trumpet"),arg1,pp("to",arg2)))),

 'truncate-01': # ARG0:agent, cause of truncation / ARG1:word, number being shortened / ARG2:extent of truncation, how much was removed? / ARG3:original length, size / ARG4:end state, final length, size after truncation [truncate.xml]
   LexSem("V","truncate",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("truncate"),arg1,arg2,arg3,pp("to",arg4)))),

 'truncheon-01': # ARG0:hitter, agent, truncheoner(s) / ARG1:victim, patient / ARG2:instrument, truncheoned with what [truncheon.xml]
   LexSem("V","truncheon",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("truncheon"),arg1,arg2))),

 'trundle-01': # ARG0:entity in motion / ARG1:path [trundle.xml]
   LexSem("V","trundle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("trundle"),arg1))),

 'truss-01': # ARG0:agent, binder / ARG1:patient, thing trussed / ARG2:second (optional) object, thing trussed *to* [truss.xml]
   LexSem("V","truss",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("truss"),arg1,pp("to",arg2)))),

 'trust-01': # ARG0:truster / ARG1:something / ARG2:someone [trust.xml]
   LexSem("V","trust",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("trust"),pp("to",arg1),arg2))),

 'trust-02': # ARG0:truster / ARG1:thing trusted [trust.xml]
   LexSem("V","trust",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("trust"),arg1))),

 'try-01': # ARG0:Agent/Entity Trying / ARG1:thing tried [try.xml]
   LexSem("V","try",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("try"),pp("to",arg1)))),

 'try-02': # ARG0:litigant / ARG1:entity tried (defendant/case) / ARG2:adjudicator / ARG3:tried for: crime/accusation [try.xml]
   LexSem("V","try",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("try"),arg1,arg2,pp("over",arg3)))),

 'try-04': # ARG0:tryer / ARG1:thing tried (hand, patience) / ARG2:attribute of Arg 1 [try.xml]
   LexSem("V","try",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("try"),arg1,pp("at",arg2)))),

 'try-out-03': # ARG0:auditionee / ARG1:role / ARG2:casting agency [try.xml]
   LexSem("V","try",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("try"),Adv("out"),pp("for",arg1),arg2))),

 'try-out-05': # ARG0:tester / ARG1:thing being tested [try.xml]
   LexSem("V","try",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("try"),Adv("out"),arg1))),

 'trypsinize-01': # ARG0:agent of trypsinization (e.g. scientist) / ARG1:adherent cells / ARG2:catalyst (e.g. trypsin) / ARG3:specific proteins within the cells digested by trypsin [trypsinize.xml]
   LexSem("V","trypsinize",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("trypsinize"),arg1,arg2,arg3))),

 'tubulate-01': # ARG0:cause of tubulation / ARG1:tubular entity [tubulate.xml]
   LexSem("V","tubulate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tubulate"),arg1))),

 'tuck-01': # ARG0:tucker / ARG1:tucked / ARG2:place [tuck.xml]
   LexSem("V","tuck",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tuck"),arg1,pp("into",arg2)))),

 'tuck-away-02': # ARG0:tucker / ARG1:tucked / ARG2:sentence [tuck.xml]
   LexSem("V","tuck",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tuck"),Adv("away"),arg1,pp("for",arg2)))),

 'tuck-in-03': # ARG0:tucker / ARG1:shirt [tuck.xml]
   LexSem("V","tuck",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tuck"),Adv("in"),arg1))),

 'tug-01': # ARG0:dragger / ARG1:thing dragged / ARG2:direction, destination [tug.xml]
   LexSem("V","tug",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tug"),arg1,pp("to",arg2)))),

 'tug-02': # ARG0:puller / ARG1:thing pulled [tug.xml]
   LexSem("V","tug",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tug"),pp("on",arg1)))),

 'tug-03': # ARG0:puller, tugger / ARG1:thing tugged / ARG2:other thing tugged or secondary attribute, result of arg1 [tug.xml]
   LexSem("V","tug",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tug"),arg1,arg2))),

 'tumble-01': # ARG0:causer of falling / ARG1:Logical subject, patient, thing falling / ARG2:EXT, amount fallen / ARG3:start point / ARG4:end point, end state [tumble.xml]
   LexSem("V","tumble",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("tumble"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'tune-01': # ARG0:causer / ARG1:entity tuned / ARG2:entity tuned for [tune.xml]
   LexSem("V","tune",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tune"),arg1,pp("for",arg2)))),

 'tune-in-02': # ARG0:adjuster of radio/tv / ARG1:entity tuned (radio, etc) / ARG2:broadcast, channel, etc [tune.xml]
   LexSem("V","tune",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tune"),Adv("in"),arg1,pp("to",arg2)))),

 'tune-out-03': # ARG0:ignorer / ARG1:entity tuned out [tune.xml]
   LexSem("V","tune",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tune"),Adv("out"),arg1))),

 'tunnel-01': # ARG0:digger, delver / ARG1:dug/delved into/through / ARG2:thing tunneled for, goal/theme (unlikely) / ARG3:instrument (also unlikely) [tunnel.xml]
   LexSem("V","tunnel",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("tunnel"),pp("through",arg1),pp("for",arg2),arg3))),

 'turf-01': # ARG0:turfer, agent / ARG1:turf itself, theme / ARG2:thing turfed, destination [turf.xml]
   LexSem("V","turf",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("turf"),arg1,arg2))),

 'turn-01': # ARG0:turner / ARG1:thing turning [turn.xml]
   LexSem("V","turn",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("turn"),arg1))),

 'turn-02': # ARG0:causer of transformation / ARG1:thing changing / ARG2:end state / ARG3:start state [turn.xml]
   LexSem("V","turn",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("turn"),arg1,arg2,pp("from",arg3)))),

 'turn-03': # ARG0:rejecter / ARG1:thumbs / ARG2:thing rejected [turn.xml]
   LexSem("V","turn",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("turn"),arg1,pp("on",arg2)))),

 'turn-14': # ARG0:depender / ARG1:depended on [turn.xml]
   LexSem("V","turn",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("turn"),pp("on",arg1)))),

 'turn-16': # ARG0:producer / ARG1:us. 'profit' [turn.xml]
   LexSem("V","turn",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("turn"),arg1))),

 'turn-18': # ARG0:Turner / ARG1:Back/Blind eye / ARG2:entity ignored [turn.xml]
   LexSem("V","turn",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("turn"),arg1,pp("on",arg2)))),

 'turn-away-04': # ARG0:turner / ARG1:thing turned away / ARG2:turned-away-from [turn.xml]
   LexSem("V","turn",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("turn"),Adv("away"),arg1,pp("from",arg2)))),

 'turn-down-05': # ARG0:rejecter / ARG1:thing rejected [turn.xml]
   LexSem("V","turn",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("turn"),Adv("down"),arg1))),

 'turn-in-06': # ARG0:giver / ARG1:thing given / ARG2:entity given to [turn.xml]
   LexSem("V","turn",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("turn"),Adv("in"),arg1,pp("to",arg2)))),

 'turn-in-22': # ARG0:agent / ARG1:entity turned in; criminal/rule violator / ARG2:authorities / ARG3:crime/violation [turn.xml]
   LexSem("V","turn",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("turn"),Adv("in"),arg1,arg2,pp("on",arg3)))),

 'turn-off-07': # ARG0:turner off / ARG1:thing which becomes off [turn.xml]
   LexSem("V","turn",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("turn"),Adv("off"),arg1))),

 'turn-off-08': # ARG0:causer / ARG1:rejecter / ARG2:thing rejected [turn.xml]
   LexSem("V","turn",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("turn"),Adv("off"),arg1,pp("on",arg2)))),

 'turn-on-13': # ARG0:cause of on-ness / ARG1:lamp, etc [turn.xml]
   LexSem("V","turn",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("turn"),Adv("on"),arg1))),

 'turn-out-09': # ARG0:turner out / ARG1:thing turned out [turn.xml]
   LexSem("V","turn",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("turn"),Adv("out"),arg1))),

 'turn-out-10': # ARG0:creator / ARG1:creation / ARG2:created-from, thing changed / ARG3:benefactive [turn.xml]
   LexSem("V","turn",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("turn"),Adv("out"),arg1,arg2,arg3))),

 'turn-out-11': # ARG1:thing seeming / ARG2:attribute [turn.xml]
   LexSem("V","turn",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("turn"),Adv("out"),pp("for",arg2)))),

 'turn-out-17': # ARG0:cause / ARG1:those appearing [turn.xml]
   LexSem("V","turn",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("turn"),Adv("out"),arg1))),

 'turn-over-12': # ARG0:giver / ARG1:thing given / ARG2:entity given to / ARG3:in-exhange-for [turn.xml]
   LexSem("V","turn",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("turn"),Adv("over"),arg1,pp("to",arg2),pp("in",arg3)))),

 'turn-up-15': # ARG0:agent, causer of appearance / ARG1:thing appearing [turn.xml]
   LexSem("V","turn",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("turn"),Adv("up"),arg1))),

 'tussle-01': # ARG0:first fighter / ARG1:second fighter, if separate [tussle.xml]
   LexSem("V","tussle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tussle"),pp("with",arg1)))),

 'tutor-01': # ARG0:tutor / ARG1:student / ARG2:subject [tutor.xml]
   LexSem("V","tutor",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tutor"),arg1,pp("in",arg2)))),

 'twang-01': # ARG0:musician / ARG1:guitar/string, etc. / ARG2:guitar pick, etc. [twang.xml]
   LexSem("V","twang",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("twang"),arg1,pp("with",arg2)))),

 'twang-02': # ARG0:causal agent (rare) / ARG1:thing producing the twanging noise / ARG2:path / ARG3:destination [twang.xml]
   LexSem("V","twang",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("twang"),arg1,pp("through",arg2),arg3))),

 'twang-03': # ARG0:agent, experiencer / ARG1:body part twanging / ARG2:cause of twanging [twang.xml]
   LexSem("V","twang",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("twang"),arg1,pp("with",arg2)))),

 'twang-04': # ARG0:speaker / ARG1:utterance or accent/language / ARG2:hearer [twang.xml]
   LexSem("V","twang",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("twang"),arg1,pp("to",arg2)))),

 'tweak-01': # ARG0:tweaker / ARG1:thing tweaked [tweak.xml]
   LexSem("V","tweak",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("tweak"),arg1))),

 'tweak-02': # ARG1:drug user tweaking / ARG2:drug mention [tweak.xml]
   LexSem("V","tweak",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("tweak"),pp("on",arg2)))),

 'tweet-01': # ARG0:bird / ARG1:message conveyed / ARG2:recipient, tweeted-to [tweet.xml]
   LexSem("V","tweet",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tweet"),pp("of",arg1),pp("to",arg2)))),

 'tweet-02': # ARG0:tweet-er, composer of message / ARG1:message / ARG2:tweeted to; followers or blog [tweet.xml]
   LexSem("V","tweet",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tweet"),arg1,pp("to",arg2)))),

 'tweeze-01': # ARG0:one doing the tweezing / ARG1:thing(s) tweezed / ARG2:instrument, tweezed with (unlikely) [tweeze.xml]
   LexSem("V","tweeze",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tweeze"),arg1,arg2))),

 'twiddle-01': # ARG0:turner, fiddler, agent / ARG1:entity twiddled [twiddle.xml]
   LexSem("V","twiddle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("twiddle"),arg1))),

 'twig-01': # ARG1:thing branching [twig.xml]
   LexSem("V","twig",[":ARG1"],lambda arg1:S(arg1,VP(V("twig")))),

 'twin-01': # ARG0:person performing match / ARG1:first thing matched / ARG2:second thing, matched with what [twin.xml]
   LexSem("V","twin",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("twin"),arg1,pp("with",arg2)))),

 'twine-01': # ARG0:cause, agent / ARG1:string-like object / ARG2:hub, axis, ball [twine.xml]
   LexSem("V","twine",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("twine"),arg1,pp("around",arg2)))),

 'twinge-01': # ARG0:causer of pain / ARG1:thing hurting [twinge.xml]
   LexSem("V","twinge",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("twinge"),arg1))),

 'twinkle-01': # ARG1:entity twinkling [twinkle.xml]
   LexSem("V","twinkle",[":ARG1"],lambda arg1:S(arg1,VP(V("twinkle")))),

 'twirl-01': # ARG0:cause of twirling / ARG1:thing twirling / ARG2:axis [twirl.xml]
   LexSem("V","twirl",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("twirl"),arg1,pp("around",arg2)))),

 'twist-01': # ARG0:cause of change, agent / ARG1:entity twisted [twist.xml]
   LexSem("V","twist",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("twist"),arg1))),

 'twitch-01': # ARG0:causer of motion / ARG1:thing twitching [twitch.xml]
   LexSem("V","twitch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("twitch"),arg1))),

 'twitter-01': # ARG0:twitter-er  (twit?) [twitter.xml]
   LexSem("V","twitter",[":ARG0"],lambda arg0:S(arg0,VP(V("twitter")))),

 'twotime-01': # ARG0:cheater / ARG1:victim / ARG2:accomplice [twotime.xml]
   LexSem("V","twotime",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("twotime"),arg1,pp("with",arg2)))),

 'type-01': # ARG0:writer / ARG1:text [type.xml]
   LexSem("V","type",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("type"),arg1))),

 'type-03': # ARG0:agent, one categorizing / ARG1:thing placed in a category / ARG2:category itself [type.xml]
   LexSem("V","type",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("type"),arg1,arg2))),

 'type-up-02': # ARG0:writer / ARG1:text [type.xml]
   LexSem("V","type",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("type"),Adv("up"),arg1))),

 'typify-01': # ARG0:example / ARG1:class [typify.xml]
   LexSem("V","typify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("typify"),arg1))),

 'tyrannize-01': # ARG0:tyrant / ARG1:people tyrannized / ARG2:instrument(s) of terror! [tyrannize.xml]
   LexSem("V","tyrannize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("tyrannize"),arg1,arg2))),

 'ubiquitinate-01': # ARG0:agent of ubiquitination (e.g. scientist) / ARG1:thing ubiquitinated / ARG2:instrument / ARG3:result of ubiquitination [ubiquitinate.xml]
   LexSem("V","ubiquitinate",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("ubiquitinate"),arg1,pp("with",arg2),pp("to",arg3)))),

 'ulcerate-01': # ARG0:agent, causer of ulcers / ARG1:patient, thing with an ulcer [ulcerate.xml]
   LexSem("V","ulcerate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ulcerate"),arg1))),

 'ululate-01': # ARG0:howler / ARG1:the howl itself [ululate.xml]
   LexSem("V","ululate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ululate"),arg1))),

 'umpire-01': # ARG0:umpire, agent / ARG1:game umpired, theme [umpire.xml]
   LexSem("V","umpire",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("umpire"),arg1))),

 'unblock-01': # ARG0:remover / ARG1:thing blocked [unblock.xml]
   LexSem("V","unblock",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("unblock"),arg1))),

 'unbolt-01': # ARG0:unbolter, agent / ARG1:thing unbolted / ARG2:unbolted from, source [unbolt.xml]
   LexSem("V","unbolt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unbolt"),arg1,pp("from",arg2)))),

 'unbuckle-01': # ARG0:unbuckler, agent / ARG1:thing unbuckled, patient / ARG2:unbuckled from, source [unbuckle.xml]
   LexSem("V","unbuckle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unbuckle"),arg1,pp("from",arg2)))),

 'unburden-01': # ARG0:unloader / ARG1:carrier / ARG2:load [unburden.xml]
   LexSem("V","unburden",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unburden"),arg1,pp("of",arg2)))),

 'unbutton-01': # ARG0:unbuttoner, agent / ARG1:thing unbuttoned, patient / ARG2:unbuttoned from, source [unbutton.xml]
   LexSem("V","unbutton",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unbutton"),arg1,arg2))),

 'uncap-01': # ARG0:remover / ARG1:thing uncapped / ARG2:instrument [uncap.xml]
   LexSem("V","uncap",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("uncap"),arg1,arg2))),

 'unchain-01': # ARG0:unchainer, agent / ARG1:thing unchained, patient / ARG2:unchained from, source [unchain.xml]
   LexSem("V","unchain",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unchain"),arg1,pp("from",arg2)))),

 'unclamp-01': # ARG0:unclamper, agent / ARG1:thing unclamped, patient / ARG2:unclamped from, source [unclamp.xml]
   LexSem("V","unclamp",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unclamp"),arg1,pp("from",arg2)))),

 'unclasp-01': # ARG0:unclasper, agent / ARG1:thing unclasped, patient / ARG2:unclasped from, source [unclasp.xml]
   LexSem("V","unclasp",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unclasp"),arg1,pp("from",arg2)))),

 'unclip-01': # ARG0:unclipper, agent / ARG1:thing unclipped, patient / ARG2:unclipped from, source [unclip.xml]
   LexSem("V","unclip",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unclip"),arg1,pp("from",arg2)))),

 'unclothe-01': # ARG0:stripper / ARG1:thing divested of covering / ARG2:clothing/covering removed [unclothe.xml]
   LexSem("V","unclothe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unclothe"),arg1,arg2))),

 'uncoil-01': # ARG0:uncoiler, agent / ARG1:thing(s) uncoiled, patient / ARG2:instrument, when separate from arg0 [uncoil.xml]
   LexSem("V","uncoil",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("uncoil"),arg1,arg2))),

 'uncover-01': # ARG0:discoverer / ARG1:thing discovered / ARG3:secondary attribute [uncover.xml]
   LexSem("V","uncover",[":ARG0",":ARG1",":ARG3"],lambda arg0,arg1,arg3:S(arg0,VP(V("uncover"),arg1,pp("as",arg3)))),

 'underbid-01': # ARG0:bidder / ARG1:item / ARG2:higher bidder [underbid.xml]
   LexSem("V","underbid",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("underbid"),arg1,arg2))),

 'undercharge-01': # ARG0:undercharger, receiver of money / ARG1:undercharge, money / ARG2:undercharged, giver of money / ARG3:cause, product [undercharge.xml]
   LexSem("V","undercharge",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("undercharge"),pp("by",arg1),arg2,pp("for",arg3)))),

 'undercut-01': # ARG0:preventer, agent / ARG1:thing counteracted [undercut.xml]
   LexSem("V","undercut",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("undercut"),arg1))),

 'underestimate-01': # ARG0:underestimator / ARG1:thing underestimated / ARG2:by how much [underestimate.xml]
   LexSem("V","underestimate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("underestimate"),arg1,pp("by",arg2)))),

 'underfund-01': # ARG0:financier / ARG1:project, whom/what is being underfunded? / ARG2:funds [underfund.xml]
   LexSem("V","underfund",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("underfund"),arg1,arg2))),

 'undergo-28': # ARG1:experiencer / ARG2:experienced [go.xml]
   LexSem("V","undergo",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("undergo"),arg2))),

 'underinflate-01': # ARG0:causer of expansion, agent / ARG1:thing grown / ARG2:amount increased by, EXT or MNR / ARG3:start point / ARG4:end point [underinflate.xml]
   LexSem("V","underinflate",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("underinflate"),arg1,arg2,arg3,arg4))),

 'underlay-01': # ARG0:entity doing the laying / ARG1:thing on top / ARG2:thing being put underneath [underlay.xml]
   LexSem("V","underlay",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("underlay"),pp("under",arg1),arg2))),

 'underlie-01': # ARG0:thing acting as a foundation / ARG1:foundation for what? [underlie.xml]
   LexSem("V","underlie",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("underlie"),arg1))),

 'underline-01': # ARG0:drawer of line, emphasizer, agent / ARG1:entity underlined [underline.xml]
   LexSem("V","underline",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("underline"),arg1))),

 'undermine-01': # ARG0:causal agent / ARG1:thing weakening [undermine.xml]
   LexSem("V","undermine",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("undermine"),arg1))),

 'undermine-02': # ARG0:entity causing seperation / ARG1:thing being divided / ARG2:source, separated from [undermine.xml]
   LexSem("V","undermine",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("undermine"),pp("of",arg1),pp("from",arg2)))),

 'underperform-01': # ARG0:underperformer / ARG1:entity compared to [underperform.xml]
   LexSem("V","underperform",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("underperform"),arg1))),

 'underpin-01': # ARG0:supporter / ARG1:person or project being supported [underpin.xml]
   LexSem("V","underpin",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("underpin"),arg1))),

 'underprice-01': # ARG0:giver of price / ARG1:commodity [underprice.xml]
   LexSem("V","underprice",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("underprice"),arg1))),

 'underscore-01': # ARG0:emphasizer / ARG1:utterance / ARG2:hearer (rare) [underscore.xml]
   LexSem("V","underscore",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("underscore"),arg1,pp("to",arg2)))),

 'undersell-01': # ARG0:seller / ARG1:competition [undersell.xml]
   LexSem("V","undersell",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("undersell"),arg1))),

 'undersell-02': # ARG0:seller witholding a good / ARG1:good, thing being sold / ARG2:buyer, arg 1 sold to whom / ARG3:price paid / ARG4:benefactive [undersell.xml]
   LexSem("V","undersell",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("undersell"),arg1,arg2,arg3,arg4))),

 'understand-01': # ARG0:understander / ARG1:thing understood / ARG2:attribute of arg1 [understand.xml]
   LexSem("V","understand",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("understand"),arg1,pp("about",arg2)))),

 'understate-01': # ARG0:stater / ARG1:entity understated / ARG2:quantity [understate.xml]
   LexSem("V","understate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("understate"),arg1,pp("by",arg2)))),

 'understudy-01': # ARG0:understudy, agent / ARG1:role understudied for, theme [understudy.xml]
   LexSem("V","understudy",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("understudy"),arg1))),

 'undertake-01': # ARG0:entity taking on the endeavor / ARG1:the endeavor [undertake.xml]
   LexSem("V","undertake",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("undertake"),arg1))),

 'underuse-01': # ARG0:underuser, agent / ARG1:entity underused [underuse.xml]
   LexSem("V","underuse",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("underuse"),arg1))),

 'underutilize-01': # ARG0:underutilizer, agent / ARG1:entity underutilized [underutilize.xml]
   LexSem("V","underutilize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("underutilize"),arg1))),

 'undervalue-01': # ARG0:entity establishing value / ARG1:commodity being valued / ARG2:difference from proper value, EXT [undervalue.xml]
   LexSem("V","undervalue",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("undervalue"),arg1,pp("by",arg2)))),

 'underwrite-01': # ARG0:financ(i)er / ARG1:thing financed [underwrite.xml]
   LexSem("V","underwrite",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("underwrite"),arg1))),

 'undo-01': # ARG0:doer of deed, agent / ARG1:entity undone [undo.xml]
   LexSem("V","undo",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("undo"),arg1))),

 'undress-01': # ARG0:person removing clothes / ARG1:person (soon to be not) wearing clothes / ARG2:attribute, clothes removed [undress.xml]
   LexSem("V","undress",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("undress"),arg1,arg2))),

 'undulate-01': # ARG0:cause of motion, agent / ARG1:entity in motion [undulate.xml]
   LexSem("V","undulate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("undulate"),arg1))),

 'unearth-01': # ARG0:agent, causer / ARG1:thing uncovered [unearth.xml]
   LexSem("V","unearth",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("unearth"),arg1))),

 'unfasten-01': # ARG0:unfastener, agent / ARG1:thing unfastened, patient / ARG2:unfastened from, source [unfasten.xml]
   LexSem("V","unfasten",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unfasten"),arg1,pp("from",arg2)))),

 'unfix-01': # ARG0:entity unfixing, agent / ARG1:thing unfixed, patient / ARG2:unfixed from, source [unfix.xml]
   LexSem("V","unfix",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unfix"),arg1,pp("from",arg2)))),

 'unfold-01': # ARG0:unfolder / ARG1:thing that used to be folded [unfold.xml]
   LexSem("V","unfold",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("unfold"),arg1))),

 'unfold-02': # ARG1:topic [unfold.xml]
   LexSem("V","unfold",[":ARG1"],lambda arg1:S(arg1,VP(V("unfold")))),

 'unfreeze-01': # ARG0:agent / ARG1:thing thawing, becoming mobile/active [unfreeze.xml]
   LexSem("V","unfreeze",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("unfreeze"),arg1))),

 'unfurl-01': # ARG0:Agent, cause of unfurling / ARG1:Entity unfurled [unfurl.xml]
   LexSem("V","unfurl",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("unfurl"),arg1))),

 'unglue-01': # ARG0:ungluer, agent / ARG1:thing unglued, patient / ARG2:unglued from, source [unglue.xml]
   LexSem("V","unglue",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unglue"),arg1,pp("from",arg2)))),

 'unhinge-01': # ARG0:cause, agent / ARG1:entity unhinged [unhinge.xml]
   LexSem("V","unhinge",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("unhinge"),arg1))),

 'unhinge-02': # ARG0:agent, causer of disconnection / ARG1:topic, focus / ARG2:disconnected from, if separate from arg1 [unhinge.xml]
   LexSem("V","unhinge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unhinge"),arg1,pp("from",arg2)))),

 'unhitch-01': # ARG0:causer of unfastening / ARG1:horse (or whatever) / ARG2:location of former hitching [unhitch.xml]
   LexSem("V","unhitch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unhitch"),arg1,pp("from",arg2)))),

 'unhook-01': # ARG0:entity unhooking, agent / ARG1:thing unhooked, patient / ARG2:unhooked from, source [unhook.xml]
   LexSem("V","unhook",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unhook"),arg1,pp("from",arg2)))),

 'uniform-01': # ARG0:causer of non-nudity, agent / ARG1:person(s) dressed / ARG2:clothes, uniform [uniform.xml]
   LexSem("V","uniform",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("uniform"),arg1,pp("in",arg2)))),

 'unify-01': # ARG0:joiner, agent / ARG1:first (or all) thing(s) unified / ARG2:second thing unified, if separate from arg1 / ARG3:unification in what domain / ARG4:unified whole [unify.xml]
   LexSem("V","unify",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("unify"),arg1,pp("with",arg2),arg3,pp("into",arg4)))),

 'unionize-01': # ARG0:agent, causer / ARG1:entity joining a union [unionize.xml]
   LexSem("V","unionize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("unionize"),arg1))),

 'unite-01': # ARG0:uniter, agent / ARG1:(first) thing(s) being unified / ARG2:other things, if separate from arg1 / ARG3:unified whole [unite.xml]
   LexSem("V","unite",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("unite"),arg1,pp("with",arg2),pp("in",arg3)))),

 'unlace-01': # ARG0:entity unlacing, agent / ARG1:thing unlaced / ARG2:unlaced from, source [unlace.xml]
   LexSem("V","unlace",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unlace"),arg1,pp("from",arg2)))),

 'unlatch-01': # ARG0:unlatcher, agent / ARG1:thing unlatched, patient / ARG2:unlatched from, source [unlatch.xml]
   LexSem("V","unlatch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unlatch"),arg1,pp("from",arg2)))),

 'unleash-01': # ARG0:letter loose / ARG1:loose thing [unleash.xml]
   LexSem("V","unleash",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("unleash"),arg1))),

 'unload-01': # ARG0:agent, entity getting rid of something / ARG1:thing gotten rid of / ARG2:instrument or manner, if separate from agent [unload.xml]
   LexSem("V","unload",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unload"),pp("but",arg1),pp("by",arg2)))),

 'unload-02': # ARG0:unloader, agent / ARG1:beast of burden / ARG2:cargo / ARG3:instrument [unload.xml]
   LexSem("V","unload",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("unload"),pp("from",arg1),arg2,pp("with",arg3)))),

 'unlock-01': # ARG0:entity with a key, agent / ARG1:thing that was locked / ARG2:what it was locked to [unlock.xml]
   LexSem("V","unlock",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unlock"),arg1,pp("from",arg2)))),

 'unmask-01': # ARG0:discloser, agent / ARG1:entity unmasked [unmask.xml]
   LexSem("V","unmask",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("unmask"),arg1))),

 'unnerve-01': # ARG0:cause / ARG1:patient, entity become nervous / ARG2:instrument or manner [unnerve.xml]
   LexSem("V","unnerve",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unnerve"),arg1,pp("with",arg2)))),

 'unpack-01': # ARG0:unpacker, agent / ARG1:thing(s) unpacked, theme / ARG2:unpacked from, container [unpack.xml]
   LexSem("V","unpack",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unpack"),arg1,pp("from",arg2)))),

 'unpeg-01': # ARG0:entity unpegging, agent / ARG1:thing unpegged / ARG2:unpegged from, source [unpeg.xml]
   LexSem("V","unpeg",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unpeg"),arg1,pp("from",arg2)))),

 'unpin-01': # ARG0:entity unpinning, agent / ARG1:thing unpinned, patient / ARG2:unpinned from, source [unpin.xml]
   LexSem("V","unpin",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unpin"),arg1,pp("from",arg2)))),

 'unplug-01': # ARG0:puller, agent / ARG1:thing unplugged [unplug.xml]
   LexSem("V","unplug",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("unplug"),arg1))),

 'unquote-01': # ARG0:subject, "unquoter", usually null / ARG1:quoted utterance (will not be there if sentence is treed properly) [unquote.xml]
   LexSem("V","unquote",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("unquote"),arg1))),

 'unravel-01': # ARG0:unraveller / ARG1:thing unravelling [unravel.xml]
   LexSem("V","unravel",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("unravel"),arg1))),

 'unreel-01': # ARG0:remover / ARG1:thing removed [unreel.xml]
   LexSem("V","unreel",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("unreel"),arg1))),

 'unroll-01': # ARG0:unroller, agent / ARG1:thing no longer rolled (up) [unroll.xml]
   LexSem("V","unroll",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("unroll"),arg1))),

 'unscrew-01': # ARG0:entity unscrewing, agent / ARG1:thing unscrewed, patient / ARG2:unscrewed from, source [unscrew.xml]
   LexSem("V","unscrew",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unscrew"),arg1,pp("from",arg2)))),

 'unseal-01': # ARG0:agent, causer / ARG1:entity unsealed [unseal.xml]
   LexSem("V","unseal",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("unseal"),arg1))),

 'unseat-01': # ARG0:entity removing / ARG1:thing being removed / ARG2:removed from [unseat.xml]
   LexSem("V","unseat",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unseat"),arg1,arg2))),

 'unsettle-01': # ARG0:causer of anxiety / ARG1:anxious entity / ARG2:instrument [unsettle.xml]
   LexSem("V","unsettle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unsettle"),arg1,arg2))),

 'unshackle-01': # ARG0:agent, unshackler / ARG1:thing unshackled / ARG2:unshackled from what [unshackle.xml]
   LexSem("V","unshackle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unshackle"),arg1,pp("from",arg2)))),

 'unstaple-01': # ARG0:entity unstapling, agent / ARG1:thing unstapled, patient / ARG2:unstapled from, source [unstaple.xml]
   LexSem("V","unstaple",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unstaple"),arg1,pp("from",arg2)))),

 'unstitch-01': # ARG0:entity unstitching, agent / ARG1:thing unstitched, patient / ARG2:unstitched, source [unstitch.xml]
   LexSem("V","unstitch",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unstitch"),arg1,arg2))),

 'unteach-01': # ARG0:unteacher / ARG1:subject / ARG2:(former) student [unteach.xml]
   LexSem("V","unteach",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unteach"),arg1,arg2))),

 'unthaw-01': # ARG0:causer of defrosting / ARG1:item losing its frost [unthaw.xml]
   LexSem("V","unthaw",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("unthaw"),arg1))),

 'untie-01': # ARG0:agent, entity doing the untying / ARG1:patient, thing(s) being untied / ARG2:untied from [untie.xml]
   LexSem("V","untie",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("untie"),arg1,pp("from",arg2)))),

 'unveil-01': # ARG0:agent, entity revealing / ARG1:thing shown / ARG2:viewer [unveil.xml]
   LexSem("V","unveil",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unveil"),arg1,pp("to",arg2)))),

 'unwind-01': # ARG0:unroller / ARG1:thing unrolled or unrolling [unwind.xml]
   LexSem("V","unwind",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("unwind"),arg1))),

 'unwind-02': # ARG1:relaxer / ARG2:instrument [unwind.xml]
   LexSem("V","unwind",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("unwind"),pp("with",arg2)))),

 'unzip-01': # ARG0:unzipper, agent / ARG1:thing unzipped, patient / ARG2:unzipped from, source [unzip.xml]
   LexSem("V","unzip",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("unzip"),arg1,arg2))),

 'up-01': # ARG0:causer / ARG1:ante [up.xml]
   LexSem("V","up",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("up"),arg1))),

 'upbraid-01': # ARG0:upbraider / ARG1:guilty party / ARG2:crime, fault [upbraid.xml]
   LexSem("V","upbraid",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("upbraid"),arg1,pp("for",arg2)))),

 'update-01': # ARG0:updater / ARG1:thing becoming more modern [update.xml]
   LexSem("V","update",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("update"),arg1))),

 'update-02': # ARG0:teller / ARG1:hearer / ARG2:news [update.xml]
   LexSem("V","update",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("update"),arg1,pp("on",arg2)))),

 'upgrade-01': # ARG0:replacer, agent / ARG1:old thing / ARG2:new thing [upgrade.xml]
   LexSem("V","upgrade",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("upgrade"),arg1,pp("to",arg2)))),

 'upgrade-02': # ARG0:cause of improvement, agent / ARG1:thing improving / ARG2:amount, EXT / ARG3:start point / ARG4:end point [upgrade.xml]
   LexSem("V","upgrade",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("upgrade"),arg1,arg2,arg3,pp("to",arg4)))),

 'uphold-01': # ARG0:helper / ARG1:person or project being supported [uphold.xml]
   LexSem("V","uphold",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("uphold"),arg1))),

 'upholster-01': # ARG0:artisan / ARG1:furniture / ARG2:padding, springs, etc [upholster.xml]
   LexSem("V","upholster",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("upholster"),arg1,pp("in",arg2)))),

 'uplift-01': # ARG0:elevator, Agent / ARG1:Logical subject, patient, thing rising [uplift.xml]
   LexSem("V","uplift",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("uplift"),arg1))),

 'upload-01': # ARG0:agent, uploader / ARG1:data, thing uploaded / ARG2:patient, uploaded to what [upload.xml]
   LexSem("V","upload",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("upload"),arg1,pp("to",arg2)))),

 'upregulate-01': # ARG0:intentional agent of upregulation (e.g. scientist) / ARG1:thing upregulated (e.g. protein or another molecule) / ARG2:instrument (e.g. enzyme) [upregulate.xml]
   LexSem("V","upregulate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("upregulate"),arg1,arg2))),

 'uproot-01': # ARG0:remover / ARG1:thing removed [uproot.xml]
   LexSem("V","uproot",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("uproot"),arg1))),

 'ups-01': # ARG0:mailer / ARG1:letter / ARG2:mailed-to [ups.xml]
   LexSem("V","ups",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ups"),arg1,arg2))),

 'upset-01': # ARG0:agent of upsetting / ARG1:upset entity / ARG2:instrument [upset.xml]
   LexSem("V","upset",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("upset"),arg1,arg2))),

 'upset-02': # ARG0:turner / ARG1:turned (container, usually) [upset.xml]
   LexSem("V","upset",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("upset"),arg1))),

 'urbanize-01': # ARG0:causer of urbanization / ARG1:entity urbanized / ARG2:Instrument or Manner if separate from arg 0 [urbanize.xml]
   LexSem("V","urbanize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("urbanize"),arg1,arg2))),

 'urge-01': # ARG0:urger / ARG1:impelled agent / ARG2:impelled action [urge.xml]
   LexSem("V","urge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("urge"),arg1,pp("to",arg2)))),

 'urinate-01': # ARG0:person in the bathroom [urinate.xml]
   LexSem("V","urinate",[":ARG0"],lambda arg0:S(arg0,VP(V("urinate")))),

 'use-01': # ARG0:User / ARG1:thing used / ARG2:purpose [use.xml]
   LexSem("V","use",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("use"),arg1,pp("to",arg2)))),

 'use-02': # ARG0:Accustomed / ARG1:custom [use.xml]
   LexSem("V","use",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("use"),pp("to",arg1)))),

 'use-03': #  [use.xml]
   LexSem("V","use",[],lambda :S(VP(V("use")))),

 'use-up-04': # ARG0:User / ARG1:Thing used / ARG2:For what purpose [use.xml]
   LexSem("V","use",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("use"),Adv("up"),pp("around",arg1),arg2))),

 'usher-02': # ARG0:usher / ARG1:person or event ushered / ARG2:destination [usher.xml]
   LexSem("V","usher",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("usher"),arg1,pp("into",arg2)))),

 'usher-in-01': # ARG0:signal / ARG1:thing starting [usher.xml]
   LexSem("V","usher",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("usher"),Adv("in"),arg1))),

 'usurp-01': # ARG0:usurper, new holder / ARG1:role usurped [usurp.xml]
   LexSem("V","usurp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("usurp"),arg1))),

 'utilize-01': # ARG0:user, agent / ARG1:entity utilized [utilize.xml]
   LexSem("V","utilize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("utilize"),arg1))),

 'utter-01': # ARG0:speaker / ARG1:utterance / ARG2:hearer [utter.xml]
   LexSem("V","utter",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("utter"),arg1,pp("to",arg2)))),

 'vacate-01': # ARG0:cause of emptiness, agent / ARG1:thing becoming empty [vacate.xml]
   LexSem("V","vacate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("vacate"),arg1))),

 'vacation-01': # ARG0:vacationers / ARG1:location of vacation / ARG2:vacation away from what [vacation.xml]
   LexSem("V","vacation",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("vacation"),pp("in",arg1),arg2))),

 'vaccinate-01': # ARG0:Vaccinator, Agent / ARG1:Vaccinated, patient / ARG2:Against what, disease [vaccinate.xml]
   LexSem("V","vaccinate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("vaccinate"),arg1,pp("against",arg2)))),

 'vacillate-01': # ARG0:undecided entity / ARG1:topic, question [vacillate.xml]
   LexSem("V","vacillate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("vacillate"),pp("on",arg1)))),

 'vacuum-01': # ARG0:vacuumer, agent / ARG1:dirt / ARG2:location [vacuum.xml]
   LexSem("V","vacuum",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("vacuum"),arg1,pp("from",arg2)))),

 'valet-01': # ARG0:valeter, car-lender / ARG1:thing lent, car [valet.xml]
   LexSem("V","valet",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("valet"),arg1))),

 'validate-01': # ARG0:causer / ARG1:entity validated [validate.xml]
   LexSem("V","validate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("validate"),arg1))),

 'value-01': # ARG0:entity establishing value / ARG1:commodity being valued / ARG2:value [value.xml]
   LexSem("V","value",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("value"),arg1,pp("at",arg2)))),

 'value-02': # ARG0:entity holding arg1 dear / ARG1:entity held dear/valued by arg0 [value.xml]
   LexSem("V","value",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("value"),arg1))),

 'vamp-up-01': # ARG0:agent / ARG1:thing being spruced up [vamp.xml]
   LexSem("V","vamp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("vamp"),Adv("up"),arg1))),

 'vandalize-01': # ARG0:vandal / ARG1:thing vandalized / ARG2:instrument of vandalism [vandalize.xml]
   LexSem("V","vandalize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("vandalize"),arg1,arg2))),

 'vanish-01': # ARG1:thing disappearing [vanish.xml]
   LexSem("V","vanish",[":ARG1"],lambda arg1:S(arg1,VP(V("vanish")))),

 'vanquish-01': # ARG0:overcomer / ARG1:difficulty [vanquish.xml]
   LexSem("V","vanquish",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("vanquish"),arg1))),

 'vaporize-01': # ARG0:cause / ARG1:entity turned into vapor [vaporize.xml]
   LexSem("V","vaporize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("vaporize"),arg1))),

 'varnish-01': # ARG0:varnisher, agent / ARG1:varnished / ARG2:varnished with what, theme [varnish.xml]
   LexSem("V","varnish",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("varnish"),arg1,arg2))),

 'vary-01': # ARG0:causer of motion / ARG1:thing moving / ARG2:EXT or MNR / ARG3:start point / ARG4:end point / ARG5:medium [vary.xml]
   LexSem("V","vary",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg0,arg1,arg2,arg3,arg4,arg5:S(arg0,VP(V("vary"),arg1,arg2,pp("from",arg3),pp("to",arg4),pp("in",arg5)))),

 'vascularize-01': # ARG0:intentional agent of vascularization(e.g. scientist) / ARG1:vascular entity / ARG2:vessels [vascularize.xml]
   LexSem("V","vascularize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("vascularize"),arg1,pp("with",arg2)))),

 'vaticinate-01': # ARG0:agent, prophet, vaticinator / ARG1:prophecy / ARG2:attributive [vaticinate.xml]
   LexSem("V","vaticinate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("vaticinate"),arg1,pp("on",arg2)))),

 'vault-01': # ARG0:causer of upward movement / ARG1:thing in motion / ARG2:EXT / ARG3:start point / ARG4:end point [vault.xml]
   LexSem("V","vault",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("vault"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'vaunt-01': # ARG0:boaster / ARG1:thing proud of / ARG2:attribute [vaunt.xml]
   LexSem("V","vaunt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("vaunt"),arg1,pp("as",arg2)))),

 'veer-01': # ARG0:agent, thing in motion / ARG1:description of path or change in path [veer.xml]
   LexSem("V","veer",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("veer"),arg1))),

 'vegetate-01': # ARG1:entity in vegetative state / ARG2:place where they're vegetating [vegetate.xml]
   LexSem("V","vegetate",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("vegetate"),pp("in",arg2)))),

 'veil-01': # ARG0:concealer, agent / ARG1:entity concealed [veil.xml]
   LexSem("V","veil",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("veil"),arg1))),

 'vein-01': # ARG0:causer of veins / ARG1:destination of veins [vein.xml]
   LexSem("V","vein",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("vein"),arg1))),

 'vend-01': # ARG0:seller, vendor / ARG1:commodity [vend.xml]
   LexSem("V","vend",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("vend"),arg1))),

 'veneer-01': # ARG0:agent, veneerer / ARG1:veneered with what, theme / ARG2:thing veneered, destination [veneer.xml]
   LexSem("V","veneer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("veneer"),arg1,arg2))),

 'venerate-01': # ARG0:admirer / ARG1:admired [venerate.xml]
   LexSem("V","venerate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("venerate"),arg1))),

 'vent-01': # ARG0:releaser / ARG1:thing vented [vent.xml]
   LexSem("V","vent",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("vent"),arg1))),

 'ventilate-01': # ARG0:allower, agent / ARG1:stuffy room [ventilate.xml]
   LexSem("V","ventilate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("ventilate"),arg1))),

 'venture-01': # ARG0:foolhardy entity in motion [venture.xml]
   LexSem("V","venture",[":ARG0"],lambda arg0:S(arg0,VP(V("venture")))),

 'venture-02': # ARG0:speaker / ARG1:utterance [venture.xml]
   LexSem("V","venture",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("venture"),arg1))),

 'verbalize-01': # ARG0:speaker / ARG1:utterance / ARG2:hearer (in theory possible) [verbalize.xml]
   LexSem("V","verbalize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("verbalize"),arg1,arg2))),

 'verge-01': # ARG1:entity verging / ARG2:entity coming close to [verge.xml]
   LexSem("V","verge",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("verge"),pp("on",arg2)))),

 'verify-01': # ARG0:verifier / ARG1:verified [verify.xml]
   LexSem("V","verify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("verify"),arg1))),

 'verse-01': # ARG0:agent, causer of familiarity / ARG1:entity becoming familiar / ARG2:familiar with [verse.xml]
   LexSem("V","verse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("verse"),arg1,pp("in",arg2)))),

 'vest-01': # ARG0:provider / ARG1:entity vested / ARG2:vested with [vest.xml]
   LexSem("V","vest",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("vest"),arg1,pp("with",arg2)))),

 'vet-01': # ARG0:examiner / ARG1:examined / ARG2:examined for [vet.xml]
   LexSem("V","vet",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("vet"),arg1,pp("for",arg2)))),

 'veto-01': # ARG0:agent, causer / ARG1:entity vetoed / ARG2:attribute [veto.xml]
   LexSem("V","veto",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("veto"),arg1,pp("as",arg2)))),

 'vex-01': # ARG0:causer of emotion / ARG1:experiencer [vex.xml]
   LexSem("V","vex",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("vex"),arg1))),

 'vibrate-01': # ARG0:causer of vibration (rare) / ARG1:thing vibrating [vibrate.xml]
   LexSem("V","vibrate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("vibrate"),arg1))),

 'victimize-01': # ARG0:victimizer / ARG1:victim / ARG2:grounds [victimize.xml]
   LexSem("V","victimize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("victimize"),arg1,pp("for",arg2)))),

 'videotape-01': # ARG0:recorder, agent / ARG1:entity taped [videotape.xml]
   LexSem("V","videotape",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("videotape"),arg1))),

 'vie-01': # ARG0:competitor / ARG1:opponent / ARG2:prize, battled over [vie.xml]
   LexSem("V","vie",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("vie"),arg1,pp("for",arg2)))),

 'view-01': # ARG0:viewer / ARG1:thing viewed [view.xml]
   LexSem("V","view",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("view"),arg1))),

 'view-02': # ARG0:assigner / ARG1:thing labelled / ARG2:attribute [view.xml]
   LexSem("V","view",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("view"),arg1,pp("as",arg2)))),

 'vilify-01': # ARG0:vilifier, agent / ARG1:entity vilified [vilify.xml]
   LexSem("V","vilify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("vilify"),arg1))),

 'vindicate-01': # ARG0:clearer, vindicator / ARG1:person vindicated / ARG2:accusation [vindicate.xml]
   LexSem("V","vindicate",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("vindicate"),arg1,pp("of",arg2)))),

 'violate-01': # ARG0:violator / ARG1:thing violated, usually a rule [violate.xml]
   LexSem("V","violate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("violate"),arg1))),

 'visit-01': # ARG0:visitor / ARG1:visited [visit.xml]
   LexSem("V","visit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("visit"),pp("with",arg1)))),

 'visit-02': # ARG0:first talker / ARG1:second talker / ARG2:subject matter [visit.xml]
   LexSem("V","visit",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("visit"),arg1,arg2))),

 'visualize-01': # ARG0:visionary / ARG1:thing seen / ARG2:attribute [visualize.xml]
   LexSem("V","visualize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("visualize"),arg1,pp("as",arg2)))),

 'vitiate-01': # ARG0:corrupter, agent / ARG1:patient, thing corrupted (etc) [vitiate.xml]
   LexSem("V","vitiate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("vitiate"),arg1))),

 'vitrify-01': # ARG0:agent, vitrifier / ARG1:thing vitrified [vitrify.xml]
   LexSem("V","vitrify",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("vitrify"),arg1))),

 'vocalize-01': # ARG0:speaker / ARG1:utterance / ARG2:listener [vocalize.xml]
   LexSem("V","vocalize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("vocalize"),arg1,arg2))),

 'vociferate-01': # ARG0:complainer, agent / ARG1:complaint(s) [vociferate.xml]
   LexSem("V","vociferate",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("vociferate"),arg1))),

 'voice-01': # ARG0:speaker / ARG1:utterance / ARG2:hearer [voice.xml]
   LexSem("V","voice",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("voice"),arg1,pp("to",arg2)))),

 'void-01': # ARG0:voider, invalidator, agent / ARG1:entity made void [void.xml]
   LexSem("V","void",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("void"),arg1))),

 'void-101': # ARG0:Causal agent/ Person eliminating / ARG1:Container being emptied / ARG2:Substance emptied of [void.xml]
   LexSem("V","void",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("void"),arg1,arg2))),

 'volatilize-01': # ARG0:cause of volatilization / ARG1:entity ionized / ARG2:instrument or manner, if separate from arg 0 [volatilize.xml]
   LexSem("V","volatilize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("volatilize"),arg1,arg2))),

 'volley-01': # ARG0:discharger / ARG1:thing fired / ARG2:recipient [volley.xml]
   LexSem("V","volley",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("volley"),arg1,pp("at",arg2)))),

 'volley-02': # ARG0:hitter / ARG1:thing hit / ARG2:other player [volley.xml]
   LexSem("V","volley",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("volley"),arg1,pp("with",arg2)))),

 'volunteer-01': # ARG0:entity volunteering, voluntary agent / ARG1:thing offered / ARG2:recipient [volunteer.xml]
   LexSem("V","volunteer",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("volunteer"),pp("for",arg1),pp("to",arg2)))),

 'vomit-01': # ARG0:person vomiting / ARG1:vomit [vomit.xml]
   LexSem("V","vomit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("vomit"),arg1))),

 'vomit-up-02': # ARG0:puker / ARG1:former contents of stomach [vomit.xml]
   LexSem("V","vomit",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("vomit"),Adv("up"),arg1))),

 'vote-01': # ARG0:voter / ARG1:candidate or ballot issue / ARG2:numerical count of vote, margin, down/up / ARG3:electorate for whom arg0 is a proxy voter [vote.xml]
   LexSem("V","vote",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("vote"),pp("on",arg1),arg2,arg3))),

 'vote-02': # ARG0:giver / ARG1:gift / ARG2:recipient [vote.xml]
   LexSem("V","vote",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("vote"),arg1,arg2))),

 'vote-down-03': # ARG0:voter / ARG1:defeated issue [vote.xml]
   LexSem("V","vote",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("vote"),Adv("down"),arg1))),

 'vouch-01': # ARG0:guarantor / ARG1:guarantee [vouch.xml]
   LexSem("V","vouch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("vouch"),pp("for",arg1)))),

 'vow-01': # ARG0:promiser, agent / ARG1:promised action / ARG2:promised to whom? [vow.xml]
   LexSem("V","vow",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("vow"),arg1,pp("to",arg2)))),

 'voyage-01': # ARG0:causal agent, voyager / ARG1:destination [voyage.xml]
   LexSem("V","voyage",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("voyage"),pp("to",arg1)))),

 'vroom-01': # ARG0:thing vrooming [vroom.xml]
   LexSem("V","vroom",[":ARG0"],lambda arg0:S(arg0,VP(V("vroom")))),

 'vulcanize-01': # ARG0:agent, vulcanizer / ARG1:thing being vulcanized, patient [vulcanize.xml]
   LexSem("V","vulcanize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("vulcanize"),arg1))),

 'vulgarize-01': # ARG0:agent, cause / ARG1:thing becoming base, common / ARG2:instrument [vulgarize.xml]
   LexSem("V","vulgarize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("vulgarize"),arg1,arg2))),

 'vulgarize-02': # ARG0:entity acting vulgar [vulgarize.xml]
   LexSem("V","vulgarize",[":ARG0"],lambda arg0:S(arg0,VP(V("vulgarize")))),

 'wad-01': # ARG0:former of wad, agent / ARG1:thing wadded / ARG2:explicit mention of wad [wad.xml]
   LexSem("V","wad",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wad"),arg1,pp("into",arg2)))),

 'waddle-01': # ARG0:entity in motion [waddle.xml]
   LexSem("V","waddle",[":ARG0"],lambda arg0:S(arg0,VP(V("waddle")))),

 'wade-01': # ARG0:wader / ARG1:water [wade.xml]
   LexSem("V","wade",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wade"),pp("through",arg1)))),

 'waffle-01': # ARG0:speaker, writer, actor / ARG1:topic [waffle.xml]
   LexSem("V","waffle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("waffle"),pp("on",arg1)))),

 'waft-01': # ARG0:cause or agent / ARG1:thing floating [waft.xml]
   LexSem("V","waft",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("waft"),arg1))),

 'wag-01': # ARG0:causer of motion / ARG1:thing wagging [wag.xml]
   LexSem("V","wag",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wag"),arg1))),

 'wage-01': # ARG0:combatant / ARG1:war / ARG2:foe, if separate from arg0 [wage.xml]
   LexSem("V","wage",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wage"),arg1,pp("with",arg2)))),

 'wager-01': # ARG0:wagerer / ARG1:amount of money wagered / ARG2:basis, proposition, bet on / ARG3:wagered to, hearer of wager [wager.xml]
   LexSem("V","wager",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("wager"),arg1,arg2,arg3))),

 'waggle-01': # ARG0:waggler, agent / ARG1:thing waggled [waggle.xml]
   LexSem("V","waggle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("waggle"),arg1))),

 'wail-01': # ARG0:speaker / ARG1:entity wailed about [wail.xml]
   LexSem("V","wail",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wail"),pp("about",arg1)))),

 'wait-01': # ARG1:wait-er (not waiter, that's the other sense) / ARG2:thing waited for [wait.xml]
   LexSem("V","wait",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("wait"),pp("for",arg2)))),

 'wait-02': # ARG0:waiter / ARG1:table [wait.xml]
   LexSem("V","wait",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wait"),arg1))),

 'wait-out-03': # ARG0:thing lasting longer / ARG1:thing lasting shorter [wait.xml]
   LexSem("V","wait",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wait"),Adv("out"),arg1))),

 'waive-01': # ARG0:waiver / ARG1:thing waived, usually rights / ARG2:benefactive [waive.xml]
   LexSem("V","waive",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("waive"),arg1,pp("for",arg2)))),

 'wake-01': # ARG0:alarm clock, cause of waking / ARG1:(former) sleeper / ARG2:sleep (oft metaphorical) / ARG3:thing awoken to, outside reality [wake.xml]
   LexSem("V","wake",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("wake"),arg1,pp("from",arg2),arg3))),

 'wake-up-02': # ARG0:alarm clock, eg / ARG1:sleeper / ARG2:sleep (oft metaphorical) / ARG3:thing awoken to, outside reality [wake.xml]
   LexSem("V","wake",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("wake"),Adv("up"),arg1,pp("from",arg2),pp("to",arg3)))),

 'walk-01': # ARG0:walker, thing in motion / ARG1:entity being walked, where there is outside Agent / ARG2:path/ underspecified location walked [walk.xml]
   LexSem("V","walk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("walk"),arg1,arg2))),

 'walk-02': # ARG0:pitcher / ARG1:batter [walk.xml]
   LexSem("V","walk",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("walk"),arg1))),

 'walk-03': # ARG0:walker / ARG1:thing affected / ARG2:desired result [walk.xml]
   LexSem("V","walk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("walk"),arg1,arg2))),

 'wall-off-01': # ARG0:builder of walls / ARG1:thing separated / ARG2:from what [wall.xml]
   LexSem("V","wall",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wall"),Adv("off"),arg1,pp("from",arg2)))),

 'wallop-01': # ARG0:walloper / ARG1:thing walloped [wallop.xml]
   LexSem("V","wallop",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wallop"),arg1))),

 'wallow-01': # ARG0:wallower / ARG1:wallowed in [wallow.xml]
   LexSem("V","wallow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wallow"),pp("in",arg1)))),

 'wallpaper-01': # ARG0:wallpaperer / ARG1:wallpaper itself, theme / ARG2:thing wallpapered, destination [wallpaper.xml]
   LexSem("V","wallpaper",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wallpaper"),pp("with",arg1),arg2))),

 'waltz-01': # ARG0:waltzer(s) / ARG1:explicit mention of dance itself (rare), or path [waltz.xml]
   LexSem("V","waltz",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("waltz"),pp("into",arg1)))),

 'wander-01': # ARG0:entity in motion, wanderer / ARG1:path, range [wander.xml]
   LexSem("V","wander",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wander"),pp("among",arg1)))),

 'wane-01': # ARG1:thing waning [wane.xml]
   LexSem("V","wane",[":ARG1"],lambda arg1:S(arg1,VP(V("wane")))),

 'wangle-01': # ARG0:wangler / ARG1:thing wangled / ARG2:wangled from / ARG3:wangled for [wangle.xml]
   LexSem("V","wangle",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("wangle"),arg1,arg2,arg3))),

 'want-01': # ARG0:Wanter / ARG1:thing wanted / ARG2:beneficiary / ARG3:in-exchange-for / ARG4:from [want.xml]
   LexSem("V","want",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("want"),arg1,arg2,arg3,arg4))),

 'war-01': # ARG0:warmonger, agent / ARG1:war against/with, other entity warring with agent. / ARG2:topic, war over what? [war.xml]
   LexSem("V","war",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("war"),pp("over",arg1),pp("regarding",arg2)))),

 'warble-01': # ARG0:warbler [warble.xml]
   LexSem("V","warble",[":ARG0"],lambda arg0:S(arg0,VP(V("warble")))),

 'ward-off-01': # ARG0:avoider, warder / ARG1:thing avoided, warded off / ARG2:explicit instrument [ward.xml]
   LexSem("V","ward",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("ward"),Adv("off"),arg1,pp("with",arg2)))),

 'warehouse-01': # ARG0:storer / ARG1:thing stored / ARG2:warehouse, location [warehouse.xml]
   LexSem("V","warehouse",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("warehouse"),arg1,arg2))),

 'warm-01': # ARG0:cause of warmth / ARG1:thing becoming warm [warm.xml]
   LexSem("V","warm",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("warm"),arg1))),

 'warm-03': # ARG0:entity becoming receptive / ARG1:to what? [warm.xml]
   LexSem("V","warm",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("warm"),pp("to",arg1)))),

 'warm-over-04': # ARG0:causer of warming / ARG1:thing becoming warm [warm.xml]
   LexSem("V","warm",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("warm"),Adv("over"),arg1))),

 'warm-up-02': # ARG0:cause of warmth / ARG1:thing becoming warm [warm.xml]
   LexSem("V","warm",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("warm"),Adv("up"),arg1))),

 'warm-up-05': # ARG0:entity becoming receptive / ARG1:to what? [warm.xml]
   LexSem("V","warm",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("warm"),Adv("up"),arg1))),

 'warmonger-01': # ARG0:agitator [warmonger.xml]
   LexSem("V","warmonger",[":ARG0"],lambda arg0:S(arg0,VP(V("warmonger")))),

 'warn-01': # ARG0:entity giving warning / ARG1:warning, impelled action / ARG2:entity getting warning, impelled agent [warn.xml]
   LexSem("V","warn",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("warn"),arg1,arg2))),

 'warp-01': # ARG0:agent / ARG1:object being bent [warp.xml]
   LexSem("V","warp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("warp"),arg1))),

 'warrant-01': # ARG0:requirer / ARG1:thing required [warrant.xml]
   LexSem("V","warrant",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("warrant"),arg1))),

 'wash-01': # ARG0:agent of washing / ARG1:thing being washed / ARG2:washing liquid / ARG3:source (if in addition to arg1) / ARG4:end state of arg1 [wash.xml]
   LexSem("V","wash",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("wash"),arg1,pp("in",arg2),arg3,arg4))),

 'wash-02': # ARG0:inadequate thing [wash.xml]
   LexSem("V","wash",[":ARG0"],lambda arg0:S(arg0,VP(V("wash")))),

 'wash-down-04': # ARG0:Agent of swallowing / ARG1:Thing being swallowed / ARG2:Liquid enabling swallowing [wash.xml]
   LexSem("V","wash",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wash"),Adv("down"),arg1,pp("with",arg2)))),

 'wash-down-05': # ARG0:washer / ARG1:formerly dirty thing / ARG2:soap/water [wash.xml]
   LexSem("V","wash",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wash"),Adv("down"),arg1,pp("with",arg2)))),

 'wash-up-03': # ARG1:Thing arriving on land from water [wash.xml]
   LexSem("V","wash",[":ARG1"],lambda arg1:S(arg1,VP(V("wash"),Adv("up")))),

 'wash-up-06': # ARG0:washer / ARG1:thing becoming clean / ARG2:washing liquid / ARG3:dirt removed [wash.xml]
   LexSem("V","wash",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("wash"),Adv("up"),arg1,arg2,arg3))),

 'waste-01': # ARG0:destroyer / ARG1:thing wasted / ARG2:instrument of wasting/ destruction, wasted on/doing what (if separate from arg0) [waste.xml]
   LexSem("V","waste",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("waste"),arg1,pp("with",arg2)))),

 'watch-01': # ARG0:observer / ARG1:thing looked at [watch.xml]
   LexSem("V","watch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("watch"),arg1))),

 'watch-out-02': # ARG0:watcher out / ARG1:thing watched out for [watch.xml]
   LexSem("V","watch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("watch"),Adv("out"),pp("for",arg1)))),

 'watch-over-03': # ARG0:guardian / ARG1:entity being guarded [watch.xml]
   LexSem("V","watch",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("watch"),Adv("over"),arg1))),

 'water-01': # ARG0:provider of water, agent / ARG1:entity watered [water.xml]
   LexSem("V","water",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("water"),arg1))),

 'water-down-02': # ARG0:cause of lesser strength / ARG1:entity watered down [water.xml]
   LexSem("V","water",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("water"),Adv("down"),arg1))),

 'wave-01': # ARG0:agent, causer / ARG1:entity moving / ARG2:person waved at [wave.xml]
   LexSem("V","wave",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wave"),arg1,pp("to",arg2)))),

 'wave-02': # ARG0:waver, giver of directions / ARG1:receiver of directions / ARG2:directions [wave.xml]
   LexSem("V","wave",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wave"),arg1,arg2))),

 'waver-01': # ARG0:undecided entity / ARG1:topic, question [waver.xml]
   LexSem("V","waver",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("waver"),pp("on",arg1)))),

 'wax-01': # ARG0:agent, waxer / ARG1:thing waxed / ARG2:explicit mention of wax [wax.xml]
   LexSem("V","wax",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wax"),arg1,pp("with",arg2)))),

 'wax-02': # ARG1:thing growing [wax.xml]
   LexSem("V","wax",[":ARG1"],lambda arg1:S(arg1,VP(V("wax")))),

 'wax-03': # ARG1:topic / ARG2:description [wax.xml]
   LexSem("V","wax",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("wax"),arg2))),

 'weaken-01': # ARG0:causal agent / ARG1:thing weakening / ARG2:EXT / ARG3:start point / ARG4:end point [weaken.xml]
   LexSem("V","weaken",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("weaken"),arg1,arg2,pp("from",arg3),pp("to",arg4)))),

 'wean-01': # ARG0:causer, agent / ARG1:newly independent entity / ARG2:former dependency [wean.xml]
   LexSem("V","wean",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wean"),arg1,pp("from",arg2)))),

 'weaponize-01': # ARG0:mad military scientist / ARG1:thing turning into a weapon  (including recipient of weapons) / ARG2:end state [weaponize.xml]
   LexSem("V","weaponize",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("weaponize"),arg1,pp("into",arg2)))),

 'wear-01': # ARG0:wearer / ARG1:clothing [wear.xml]
   LexSem("V","wear",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wear"),arg1))),

 'wear-06': # ARG0:Cause of erosion, natural force or agent / ARG1:Thing eroded, worn / ARG2:Source location, arg 1 is eroded from/off of what? [wear.xml]
   LexSem("V","wear",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wear"),arg1,arg2))),

 'wear-down-05': # ARG0:cause / ARG1:experiencer [wear.xml]
   LexSem("V","wear",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wear"),Adv("down"),arg1))),

 'wear-off-02': # ARG0:causer of erosion / ARG1:thing disappearing [wear.xml]
   LexSem("V","wear",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wear"),Adv("off"),arg1))),

 'wear-on-04': # ARG1:thing lasting too long [wear.xml]
   LexSem("V","wear",[":ARG1"],lambda arg1:S(arg1,VP(V("wear"),Adv("on")))),

 'wear-out-03': # ARG0:causer of wear / ARG1:thing worn out [wear.xml]
   LexSem("V","wear",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wear"),Adv("out"),arg1))),

 'weary-01': # ARG0:causer of tiredness / ARG1:tired entity / ARG2:Instrment or Manner if separate from arg 0 [weary.xml]
   LexSem("V","weary",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("weary"),arg1,pp("with",arg2)))),

 'weary-02': # ARG0:tired entity / ARG1:cause of weariness [weary.xml]
   LexSem("V","weary",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("weary"),pp("of",arg1)))),

 'weasel-out-01': # ARG0:agent, weaseler / ARG1:thing weaseled out ("his/her way") / ARG2:weaseled from--prepositional compliment [weasel.xml]
   LexSem("V","weasel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("weasel"),Adv("out"),arg1,pp("of",arg2)))),

 'weather-01': # ARG0:survivor / ARG1:situation [weather.xml]
   LexSem("V","weather",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("weather"),arg1))),

 'weave-01': # ARG0:weaver / ARG1:entity woven / ARG2:product [weave.xml]
   LexSem("V","weave",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("weave"),arg1,pp("into",arg2)))),

 'weave-02': # ARG0:entity moving / ARG1:path [weave.xml]
   LexSem("V","weave",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("weave"),arg1))),

 'wed-01': # ARG0:causer / ARG1:one half / ARG2:other half, usually prepositional [wed.xml]
   LexSem("V","wed",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wed"),arg1,pp("to",arg2)))),

 'wedge-01': # ARG0:wedger, agent / ARG1:entity wedged / ARG2:wedged into [wedge.xml]
   LexSem("V","wedge",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wedge"),arg1,pp("into",arg2)))),

 'weed-01': # ARG0:weeder / ARG1:location the weeds are removed from / ARG2:weed, thing removed [weed.xml]
   LexSem("V","weed",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("weed"),arg1,arg2))),

 'weekend-01': # ARG0:weekender(s) / ARG1:location of weekend vacation [weekend.xml]
   LexSem("V","weekend",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("weekend"),arg1))),

 'weep-01': # ARG0:weeper / ARG1:tears [weep.xml]
   LexSem("V","weep",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("weep"),arg1))),

 'weep-02': # ARG0:Oozer, emitter of fluid / ARG1:Fluid oozed [weep.xml]
   LexSem("V","weep",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("weep"),arg1))),

 'weigh-01': # ARG0:measurer / ARG1:thing measured / ARG2:yardstick, standard of measurement / ARG3:measurement [weigh.xml]
   LexSem("V","weigh",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("weigh"),arg1,pp("with",arg2),arg3))),

 'weigh-02': # ARG0:presser / ARG1:pressed (on) [weigh.xml]
   LexSem("V","weigh",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("weigh"),pp("on",arg1)))),

 'weigh-04': # ARG0:agent, comparer, considerer / ARG1:X, thing considered / ARG2:Y, in comparison to [weigh.xml]
   LexSem("V","weigh",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("weigh"),arg1,pp("against",arg2)))),

 'weigh-in-03': # ARG0:contributor, agent / ARG1:entry, thing contributed [weigh.xml]
   LexSem("V","weigh",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("weigh"),Adv("in"),pp("with",arg1)))),

 'weight-01': # ARG0:presenter of bias, agent / ARG1:entity weighted / ARG2:attribute [weight.xml]
   LexSem("V","weight",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("weight"),arg1,pp("against",arg2)))),

 'welcome-01': # ARG0:welcomer / ARG1:thing welcomed / ARG2:welcomed to [welcome.xml]
   LexSem("V","welcome",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("welcome"),arg1,pp("to",arg2)))),

 'weld-01': # ARG0:joiner, agent / ARG1:thing welded [weld.xml]
   LexSem("V","weld",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("weld"),arg1))),

 'well-12': # ARG1:liquidy thing / ARG2:location of gathering [better.xml]
   LexSem("V","well",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("well"),pp("to",arg2)))),

 'well-up-13': # ARG1:liquidy thing / ARG2:location of gathering [better.xml]
   LexSem("V","well",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("well"),Adv("up"),pp("in",arg2)))),

 'welter-01': # ARG0:entity immersed / ARG1:location, immersed in [welter.xml]
   LexSem("V","welter",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("welter"),pp("in",arg1)))),

 'westernize-01': # ARG0:agent / ARG1:patient [westernize.xml]
   LexSem("V","westernize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("westernize"),arg1))),

 'wet-01': # ARG0:cause / ARG1:now-wet thing / ARG2:liquid [wet.xml]
   LexSem("V","wet",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wet"),arg1,pp("with",arg2)))),

 'whack-01': # ARG0:agent, hitter - animate only! / ARG1:thing hit / ARG2:instrument, thing hit by or with [whack.xml]
   LexSem("V","whack",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("whack"),arg1,arg2))),

 'whack-off-02': # ARG0:entity removing / ARG1:thing being removed / ARG2:removed from [whack.xml]
   LexSem("V","whack",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("whack"),Adv("off"),arg1,pp("off",arg2)))),

 'whale-01': # ARG0:agent or causer / ARG1:entity gathered / ARG2:gathered into / ARG3:beneficiary [whale.xml]
   LexSem("V","whale",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("whale"),arg1,arg2,arg3))),

 'whang-01': # ARG0:Attacker / ARG1:Thing hit or attacked / ARG2:Instrument [whang.xml]
   LexSem("V","whang",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("whang"),pp("down",arg1),arg2))),

 'wharf-01': # ARG0:agent, entity building or deciding to build a wharf / ARG1:the shore/bank / ARG2:wharf structure or materials [wharf.xml]
   LexSem("V","wharf",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wharf"),arg1,pp("with",arg2)))),

 'wharf-02': # ARG0:agent, entity dropping off the goods / ARG1:the goods / ARG2:the wharf itself [wharf.xml]
   LexSem("V","wharf",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wharf"),arg1,arg2))),

 'wharf-03': # ARG0:The crew / ARG1:the ship / ARG2:location [wharf.xml]
   LexSem("V","wharf",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wharf"),arg1,arg2))),

 'wheedle-01': # ARG0:coaxer / ARG1:request / ARG2:source of requested object/action [wheedle.xml]
   LexSem("V","wheedle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wheedle"),arg1,arg2))),

 'wheel-01': # ARG0:causer of motion, agent / ARG1:thing on wheels, vehicle [wheel.xml]
   LexSem("V","wheel",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wheel"),arg1))),

 'wheeze-01': # ARG0:speaker / ARG1:utterance / ARG2:hearer [wheeze.xml]
   LexSem("V","wheeze",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wheeze"),arg1,pp("to",arg2)))),

 'wheeze-02': # ARG0:breather, wheezer [wheeze.xml]
   LexSem("V","wheeze",[":ARG0"],lambda arg0:S(arg0,VP(V("wheeze")))),

 'whelk-01': # ARG0:agent or causer / ARG1:entity gathered / ARG2:gathered into / ARG3:beneficiary [whelk.xml]
   LexSem("V","whelk",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("whelk"),arg1,arg2,arg3))),

 'whelp-01': # ARG0:whelper / ARG1:thing whelped (cry, litter, etc.) [whelp.xml]
   LexSem("V","whelp",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("whelp"),arg1))),

 'whiff-01': # ARG0:entity doing the sniffing / ARG1:the scent / ARG2:the air carrying the scent [whiff.xml]
   LexSem("V","whiff",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("whiff"),pp("for",arg1),arg2))),

 'whiff-02': # ARG0:the wind / ARG1:thing being carried on the wind / ARG2:direction [whiff.xml]
   LexSem("V","whiff",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("whiff"),arg1,arg2))),

 'whiff-03': # ARG0:causal agent, pitcher / ARG1:entity swinging and missing / ARG2:thing attempted [whiff.xml]
   LexSem("V","whiff",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("whiff"),arg1,pp("at",arg2)))),

 'whiff-04': # ARG0:smoker / ARG1:cigar, cigarettes, pipe, etc. [whiff.xml]
   LexSem("V","whiff",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("whiff"),arg1))),

 'whiff-05': # ARG0:agent (animate) / ARG1:exhaled puff of air, utterance [whiff.xml]
   LexSem("V","whiff",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("whiff"),arg1))),

 'whiff-06': # ARG0:entity snuffing out the flame / ARG1:the flame [whiff.xml]
   LexSem("V","whiff",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("whiff"),arg1))),

 'while-away-01': # ARG0:bider, spender / ARG1:unit of time / ARG2:activity [while.xml]
   LexSem("V","while",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("while"),Adv("away"),arg1,pp("by",arg2)))),

 'whimper-01': # ARG0:whimper-er [whimper.xml]
   LexSem("V","whimper",[":ARG0"],lambda arg0:S(arg0,VP(V("whimper")))),

 'whine-01': # ARG0:whiner / ARG1:the whine itself / ARG2:hearer / ARG3:subject matter of the whining (about _) [whine.xml]
   LexSem("V","whine",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("whine"),arg1,pp("to",arg2),pp("about",arg3)))),

 'whinny-01': # ARG0:whinny-er [whinny.xml]
   LexSem("V","whinny",[":ARG0"],lambda arg0:S(arg0,VP(V("whinny")))),

 'whip-01': # ARG0:causer / ARG1:entity whipped / ARG2:end state [whip.xml]
   LexSem("V","whip",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("whip"),arg1,pp("into",arg2)))),

 'whip-out-02': # ARG0:causer / ARG1:entity whipped [whip.xml]
   LexSem("V","whip",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("whip"),Adv("out"),arg1))),

 'whip-up-03': # ARG0:causer / ARG1:entity whipped [whip.xml]
   LexSem("V","whip",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("whip"),Adv("up"),arg1))),

 'whipsaw-01': # ARG0:mover / ARG1:thing moved [whipsaw.xml]
   LexSem("V","whipsaw",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("whipsaw"),arg1))),

 'whir-01': # ARG1:emitter of sound [whir.xml]
   LexSem("V","whir",[":ARG1"],lambda arg1:S(arg1,VP(V("whir")))),

 'whish-01': # ARG0:thing whishing (emitting a whishing sound) [whish.xml]
   LexSem("V","whish",[":ARG0"],lambda arg0:S(arg0,VP(V("whish")))),

 'whisk-01': # ARG0:causer / ARG1:entity moving / ARG2:location moving from [whisk.xml]
   LexSem("V","whisk",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("whisk"),arg1,pp("from",arg2)))),

 'whisper-01': # ARG0:speaker / ARG1:utterance / ARG2:hearer [whisper.xml]
   LexSem("V","whisper",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("whisper"),arg1,pp("to",arg2)))),

 'whistle-01': # ARG0:maker of noise / ARG1:noise itself, tune, utterance / ARG2:hearer [whistle.xml]
   LexSem("V","whistle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("whistle"),arg1,pp("at",arg2)))),

 'whiten-01': # ARG0:agent / ARG1:patient [whiten.xml]
   LexSem("V","whiten",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("whiten"),arg1))),

 'whitewash-01': # ARG0:painter / ARG1:thing painted / ARG2:the whitewash [whitewash.xml]
   LexSem("V","whitewash",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("whitewash"),arg1,pp("with",arg2)))),

 'whitewash-02': # ARG0:Agent or organization doing the whitewashing / ARG1:entity being exonerated / ARG2:crimes [whitewash.xml]
   LexSem("V","whitewash",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("whitewash"),arg1,pp("of",arg2)))),

 'whitewash-03': # ARG0:Entity doing the covering up / ARG1:Thing being covered up [whitewash.xml]
   LexSem("V","whitewash",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("whitewash"),arg1))),

 'whittle-01': # ARG0:builder / ARG1:construction / ARG2:material, start state / ARG4:end state [whittle.xml]
   LexSem("V","whittle",[":ARG0",":ARG1",":ARG2",":ARG4"],lambda arg0,arg1,arg2,arg4:S(arg0,VP(V("whittle"),arg1,arg2,pp("into",arg4)))),

 'whittle-down-02': # ARG0:agent of making smaller / ARG1:thing getting smaller / ARG2:EXT / ARG3:start point / ARG4:end point [whittle.xml]
   LexSem("V","whittle",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("whittle"),Adv("down"),arg1,arg2,arg3,pp("to",arg4)))),

 'whiz-01': # ARG1:entity moving / ARG2:EXT / ARG3:start point / ARG4:end point [whiz.xml]
   LexSem("V","whiz",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("whiz"),arg2,arg3,arg4))),

 'whiz-away-03': # ARG0:waster / ARG1:thing wasted / ARG2:what arg1 is wasted on [whiz.xml]
   LexSem("V","whiz",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("whiz"),Adv("away"),arg1,pp("on",arg2)))),

 'wholesale-01': # ARG0:Seller / ARG1:Thing Sold / ARG2:Buyer / ARG3:Price Paid / ARG4:Benefactive [wholesale.xml]
   LexSem("V","wholesale",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("wholesale"),arg1,pp("to",arg2),pp("for",arg3),pp("on",arg4)))),

 'whoop-01': # ARG0:speaker / ARG1:utterance / ARG2:listener [whoop.xml]
   LexSem("V","whoop",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("whoop"),arg1,arg2))),

 'whoosh-01': # ARG0:agent/cause of noise-making, motion / ARG1:thing actually in motion: noise, air, propelled thing / ARG2:path [whoosh.xml]
   LexSem("V","whoosh",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("whoosh"),arg1,pp("in",arg2)))),

 'whore-01': # ARG0:agent (whore, sometimtes) / ARG1:thing whored, often reflexive ("himself/herself") / ARG2:to or for whom [whore.xml]
   LexSem("V","whore",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("whore"),arg1,pp("to",arg2)))),

 'whump-01': # ARG0:thing whumping [whump.xml]
   LexSem("V","whump",[":ARG0"],lambda arg0:S(arg0,VP(V("whump")))),

 'wick-01': # ARG0:absorber, wicker / ARG1:liquid [wick.xml]
   LexSem("V","wick",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wick"),arg1))),

 'widen-01': # ARG0:causal agent / ARG1:thing becoming wider / ARG2:EXT / ARG3:start point / ARG4:end point [widen.xml]
   LexSem("V","widen",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("widen"),arg1,pp("by",arg2),pp("from",arg3),pp("to",arg4)))),

 'widow-01': # ARG0:causer of widowment / ARG1:widow [widow.xml]
   LexSem("V","widow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("widow"),arg1))),

 'wield-01': # ARG0:holder / ARG1:thing held / ARG2:benefactive / ARG3:secondary attribute of thing held [wield.xml]
   LexSem("V","wield",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("wield"),arg1,arg2,pp("as",arg3)))),

 'wiggle-01': # ARG0:entity in motion / ARG1:path [wiggle.xml]
   LexSem("V","wiggle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wiggle"),pp("through",arg1)))),

 'wiggle-02': # ARG0:causer / ARG1:thing wiggling [wiggle.xml]
   LexSem("V","wiggle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wiggle"),arg1))),

 'will-01': # ARG0:bequeather, giver / ARG1:inheritance, gift / ARG2:beneficiary [will.xml]
   LexSem("V","will",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("will"),arg1,arg2))),

 'will-02': # ARG0:desirer / ARG1:state/action desired [will.xml]
   LexSem("V","will",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("will"),arg1))),

 'wilt-01': # ARG0:cause, agent / ARG1:patient, thing wilting / ARG2:end state [wilt.xml]
   LexSem("V","wilt",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wilt"),arg1,arg2))),

 'win-01': # ARG0:winner / ARG1:prize / ARG2:contest / ARG3:beneficiary / ARG4:loser, giver of prize / ARG5:in exchange for [win.xml]
   LexSem("V","win",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg0,arg1,arg2,arg3,arg4,arg5:S(arg0,VP(V("win"),arg1,arg2,pp("for",arg3),pp("from",arg4),pp("for",arg5)))),

 'win-over-02': # ARG0:causer of changing opinion / ARG1:entity with opinion / ARG2:new opinion [win.xml]
   LexSem("V","win",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("win"),Adv("over"),arg1,pp("to",arg2)))),

 'wince-01': # ARG0:wincer / ARG1:reason for wincing [wince.xml]
   LexSem("V","wince",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wince"),pp("in",arg1)))),

 'wind-01': # ARG0:roller / ARG1:thing rolled or rolling, wound / ARG2:secondary attribute of arg1, end state/position [wind.xml]
   LexSem("V","wind",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wind"),arg1,arg2))),

 'wind-down-04': # ARG0:entity causing something else to stop / ARG1:thing stopping [wind.xml]
   LexSem("V","wind",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wind"),Adv("down"),arg1))),

 'wind-up-02': # ARG1:who/what's coming into a condition / ARG2:the condition [wind.xml]
   LexSem("V","wind",[":ARG1",":ARG2"],lambda arg1,arg2:S(arg1,VP(V("wind"),Adv("up"),arg2))),

 'wind-up-03': # ARG0:roller / ARG1:thing rolled or rolling / ARG2:secondary attribute of arg1 [wind.xml]
   LexSem("V","wind",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wind"),Adv("up"),arg1,arg2))),

 'wind-up-05': # ARG0:entity causing something else to stop / ARG1:thing stopping [wind.xml]
   LexSem("V","wind",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wind"),Adv("up"),arg1))),

 'wine-01': # ARG0:wine-giver / ARG1:arg0's date; wine drinker [wine.xml]
   LexSem("V","wine",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wine"),pp("of",arg1)))),

 'wing-01': # ARG0:causal agent / ARG1:thing actually doing the flying / ARG2:benefactive [wing.xml]
   LexSem("V","wing",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wing"),arg1,arg2))),

 'wing-02': # ARG0:innovator / ARG1:'it' [wing.xml]
   LexSem("V","wing",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wing"),arg1))),

 'wink-01': # ARG0:winker / ARG1:eye / ARG2:winked at [wink.xml]
   LexSem("V","wink",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wink"),arg1,pp("at",arg2)))),

 'winkle-01': # ARG0:agent, pry-er / ARG1:thing pried / ARG2:pried from [winkle.xml]
   LexSem("V","winkle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("winkle"),arg1,pp("from",arg2)))),

 'winnow-01': # ARG0:Winnower, agent / ARG1:Thing Winnowed / ARG2:prepositional complement of Arg1 [winnow.xml]
   LexSem("V","winnow",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("winnow"),arg1,pp("to",arg2)))),

 'winter-01': # ARG0:vacationer(s) / ARG1:location of vacation [winter.xml]
   LexSem("V","winter",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("winter"),pp("on",arg1)))),

 'wipe-01': # ARG0:causer of motion, agent / ARG1:thing moved / ARG2:source / ARG3:instrument [wipe.xml]
   LexSem("V","wipe",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("wipe"),arg1,pp("from",arg2),pp("with",arg3)))),

 'wipe-off-03': # ARG0:wiper / ARG1:surface [wipe.xml]
   LexSem("V","wipe",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wipe"),Adv("off"),arg1))),

 'wipe-out-02': # ARG0:user, exhauster, agent / ARG1:thing becoming exhausted / ARG2:instrument [wipe.xml]
   LexSem("V","wipe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wipe"),Adv("out"),arg1,pp("with",arg2)))),

 'wipe-up-04': # ARG0:wiper, remover / ARG1:impurity / ARG2:dirty surface / ARG3:instrument [wipe.xml]
   LexSem("V","wipe",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("wipe"),Adv("up"),arg1,pp("from",arg2),pp("with",arg3)))),

 'wire-01': # ARG0:sender / ARG1:sent, message / ARG2:recipient [wire.xml]
   LexSem("V","wire",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wire"),arg1,pp("to",arg2)))),

 'wire-02': # ARG0:cause of attachment / ARG1:entity wired / ARG2:other entity or end state [wire.xml]
   LexSem("V","wire",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wire"),arg1,arg2))),

 'wireless-01': # ARG0:sender, agent, wirelesser / ARG1:entity sent, faxed / ARG2:sent to, recipient [wireless.xml]
   LexSem("V","wireless",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wireless"),arg1,arg2))),

 'wish-01': # ARG0:wisher / ARG1:thing wished for / ARG2:benefactive [wish.xml]
   LexSem("V","wish",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wish"),arg1,arg2))),

 'withdraw-01': # ARG0:entity removing / ARG1:thing being withdrawn (often understood as 'self') / ARG2:removed from [withdraw.xml]
   LexSem("V","withdraw",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("withdraw"),arg1,pp("from",arg2)))),

 'wither-01': # ARG0:cause of withering / ARG1:plant [wither.xml]
   LexSem("V","wither",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wither"),arg1))),

 'withhold-01': # ARG0:withholder, agent / ARG1:entity withheld / ARG2:entity withheld from [withhold.xml]
   LexSem("V","withhold",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("withhold"),arg1,pp("from",arg2)))),

 'withstand-01': # ARG0:entity withstanding / ARG1:entity opposed [withstand.xml]
   LexSem("V","withstand",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("withstand"),arg1))),

 'witness-01': # ARG0:agent, entity witnessing / ARG1:thing witnessed [witness.xml]
   LexSem("V","witness",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("witness"),arg1))),

 'wobble-01': # ARG0:unsteady thing [wobble.xml]
   LexSem("V","wobble",[":ARG0"],lambda arg0:S(arg0,VP(V("wobble")))),

 'wolf-down-01': # ARG0:eater / ARG1:food [wolf.xml]
   LexSem("V","wolf",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wolf"),Adv("down"),arg1))),

 'womanize-01': # ARG0:Womanizer / ARG1:Woman seduced [womanize.xml]
   LexSem("V","womanize",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("womanize"),pp("of",arg1)))),

 'wonder-01': # ARG0:thinker / ARG1:thought [wonder.xml]
   LexSem("V","wonder",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wonder"),arg1))),

 'wonder-02': # ARG0:experiencer / ARG1:wonderful, awe-inspiring thing [wonder.xml]
   LexSem("V","wonder",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wonder"),pp("at",arg1)))),

 'woo-01': # ARG0:pursuer / ARG1:pursued [woo.xml]
   LexSem("V","woo",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("woo"),arg1))),

 'woof-01': # ARG0:woofer / ARG1:the woof or its subject-matter / ARG2:hearer [woof.xml]
   LexSem("V","woof",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("woof"),arg1,arg2))),

 'woolgather-01': # ARG0:daydreamer / ARG1:thing dreamt about [woolgather.xml]
   LexSem("V","woolgather",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("woolgather"),pp("about",arg1)))),

 'word-01': # ARG0:expresser, agent / ARG1:text [word.xml]
   LexSem("V","word",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("word"),arg1))),

 'work-01': # ARG0:worker / ARG1:job, project / ARG2:employer, benefactive / ARG3:coworker / ARG4:instrumental / ARG5:secondary-theme [work.xml]
   LexSem("V","work",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4",":ARG5"],lambda arg0,arg1,arg2,arg3,arg4,arg5:S(arg0,VP(V("work"),pp("on",arg1),pp("for",arg2),pp("with",arg3),arg4,arg5))),

 'work-06': # ARG0:entity in motion / ARG1:description of path / ARG3:start point / ARG4:end point [work.xml]
   LexSem("V","work",[":ARG0",":ARG1",":ARG3",":ARG4"],lambda arg0,arg1,arg3,arg4:S(arg0,VP(V("work"),arg1,pp("up",arg3),pp("up",arg4)))),

 'work-07': # ARG0:manipulator / ARG1:thing manipulated / ARG2:destination, end state [work.xml]
   LexSem("V","work",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("work"),arg1,pp("into",arg2)))),

 'work-08': # ARG0:worker / ARG1:damage, havoc / ARG2:upon what [work.xml]
   LexSem("V","work",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("work"),arg1,arg2))),

 'work-09': # ARG0:causer / ARG1:thing functioning / ARG2:beneficiary [work.xml]
   LexSem("V","work",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("work"),arg1,arg2))),

 'work-10': # ARG0:Person/Entity working something1 / ARG1:Thing undergoing change of state, unselected object of work / ARG2:End result of thing worked, arg1 [work.xml]
   LexSem("V","work",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("work"),arg1,pp("off",arg2)))),

 'work-out-02': # ARG0:arranger / ARG1:scheme / ARG2:collaborator [work.xml]
   LexSem("V","work",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("work"),Adv("out"),arg1,arg2))),

 'work-out-03': # ARG0:athlete [work.xml]
   LexSem("V","work",[":ARG0"],lambda arg0:S(arg0,VP(V("work"),Adv("out")))),

 'work-out-05': # ARG0:counter / ARG1:thing being counted / ARG2:count, number [work.xml]
   LexSem("V","work",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("work"),Adv("out"),arg1,pp("to",arg2)))),

 'work-up-04': # ARG0:creator / ARG1:thing arising / ARG2:benefactive [work.xml]
   LexSem("V","work",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("work"),Adv("up"),arg1,pp("for",arg2)))),

 'work-up-101': # ARG0:Doctor (Agent) / ARG1:Patient / ARG2:Condition/Illness/Disorder [work.xml]
   LexSem("V","work",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("work"),Adv("up"),arg1,arg2))),

 'worm-01': # ARG0:creeper / ARG1:path [worm.xml]
   LexSem("V","worm",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("worm"),arg1))),

 'worry-01': # ARG0:cause of worrying, troublesome topic / ARG1:worrier / ARG2:instrument, when separate from agent [worry.xml]
   LexSem("V","worry",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("worry"),arg1,pp("with",arg2)))),

 'worry-02': # ARG0:worrier / ARG1:topic of worry [worry.xml]
   LexSem("V","worry",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("worry"),pp("about",arg1)))),

 'worsen-01': # ARG0:causer of badness, worsening / ARG1:generally negative, displeasing entity / ARG2:entity for whom arg1 is getting worse [worsen.xml]
   LexSem("V","worsen",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("worsen"),arg1,arg2))),

 'worship-01': # ARG0:admirer / ARG1:admired [worship.xml]
   LexSem("V","worship",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("worship"),arg1))),

 'wound-01': # ARG0:Stimulus of injury / ARG1:injured party / ARG2:instrument, if separate from arg0 [wound.xml]
   LexSem("V","wound",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wound"),arg1,pp("with",arg2)))),

 'wow-01': # ARG0:Stimulus of amazement / ARG1:amazed entity / ARG2:instrument, if separate from arg0 [wow.xml]
   LexSem("V","wow",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wow"),arg1,pp("with",arg2)))),

 'wrack-01': # ARG0:causer / ARG1:entity wracked [wrack.xml]
   LexSem("V","wrack",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wrack"),arg1))),

 'wrangle-01': # ARG0:speaker / ARG1:entity wrangled with / ARG2:topic [wrangle.xml]
   LexSem("V","wrangle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wrangle"),pp("with",arg1),pp("over",arg2)))),

 'wrap-01': # ARG0:agent/cause of wrapping / ARG1:thing wrapped (e.g., gift) / ARG2:wrapper (e.g., paper) [wrap.xml]
   LexSem("V","wrap",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wrap"),arg1,pp("in",arg2)))),

 'wrap-04': # ARG0:agent finishing / ARG1:thing finished / ARG2:instrument [wrap.xml]
   LexSem("V","wrap",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wrap"),arg1,arg2))),

 'wrap-up-02': # ARG0:Intentional agent / ARG1:Thing finishing / ARG2:Explicit instrument, thing finished with [wrap.xml]
   LexSem("V","wrap",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wrap"),Adv("up"),arg1,arg2))),

 'wrap-up-03': # ARG0:agent/cause of wrapping / ARG1:thing wrapped up (e.g. gift) / ARG2:the wrapper (e.g. wrapping paper) [wrap.xml]
   LexSem("V","wrap",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wrap"),Adv("up"),arg1,arg2))),

 'wreak-01': # ARG0:causer / ARG1:damage / ARG2:wreaked on/with/to [wreak.xml]
   LexSem("V","wreak",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wreak"),arg1,pp("with",arg2)))),

 'wreathe-01': # ARG0:placer of wreath / ARG1:location where wreath is placed / ARG2:wreath or wreath-like object [wreathe.xml]
   LexSem("V","wreathe",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wreathe"),arg1,pp("in",arg2)))),

 'wreathe-02': # ARG0:mover [wreathe.xml]
   LexSem("V","wreathe",[":ARG0"],lambda arg0:S(arg0,VP(V("wreathe")))),

 'wreck-01': # ARG0:destroyer / ARG1:thing destroyed / ARG2:instrument of destruction [wreck.xml]
   LexSem("V","wreck",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wreck"),arg1,pp("with",arg2)))),

 'wrench-01': # ARG0:agent, entity/thing doing the wrenching / ARG1:thing wrenched / ARG2:from where [wrench.xml]
   LexSem("V","wrench",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wrench"),arg1,pp("off",arg2)))),

 'wrench-02': # ARG0:hand-wringer / ARG1:hands [wrench.xml]
   LexSem("V","wrench",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wrench"),arg1))),

 'wrench-03': # ARG0:injured person / ARG1:body part, or self [wrench.xml]
   LexSem("V","wrench",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wrench"),arg1))),

 'wrest-01': # ARG0:agent, entity acquiring something / ARG1:thing acquired / ARG2:acquired-from [wrest.xml]
   LexSem("V","wrest",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wrest"),arg1,pp("from",arg2)))),

 'wrestle-01': # ARG0:first wrestler / ARG1:second wrestler / ARG2:topic, competition [wrestle.xml]
   LexSem("V","wrestle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wrestle"),pp("with",arg1),pp("over",arg2)))),

 'wrestle-02': # ARG0:putter, agent / ARG1:patient, thing put / ARG2:destination, put where [wrestle.xml]
   LexSem("V","wrestle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wrestle"),arg1,pp("into",arg2)))),

 'wrestle-03': # ARG0:taker / ARG1:taken / ARG2:taken from [wrestle.xml]
   LexSem("V","wrestle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wrestle"),arg1,pp("from",arg2)))),

 'wriggle-01': # ARG0:cause of motion, agent / ARG1:body part [wriggle.xml]
   LexSem("V","wriggle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wriggle"),arg1))),

 'wriggle-02': # ARG0:mover / ARG1:path [wriggle.xml]
   LexSem("V","wriggle",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wriggle"),arg1))),

 'wring-01': # ARG0:twister / ARG1:twisted [wring.xml]
   LexSem("V","wring",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wring"),arg1))),

 'wring-02': # ARG0:remover / ARG1:liquid / ARG2:source; rag etc [wring.xml]
   LexSem("V","wring",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wring"),arg1,arg2))),

 'wring-out-03': # ARG0:wringer / ARG1:wrung [wring.xml]
   LexSem("V","wring",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wring"),Adv("out"),arg1))),

 'wrinkle-01': # ARG0:wrinkler, causer / ARG1:thing becoming wrinkled / ARG2:instrument, thing used to wrinkle (rare) [wrinkle.xml]
   LexSem("V","wrinkle",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wrinkle"),arg1,arg2))),

 'write-01': # ARG0:writer / ARG1:thing written / ARG2:benefactive [write.xml]
   LexSem("V","write",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("write"),arg1,pp("to",arg2)))),

 'write-down-03': # ARG0:writer / ARG1:written, recorded [write.xml]
   LexSem("V","write",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("write"),Adv("down"),arg1))),

 'write-down-04': # ARG0:changer of monetary value / ARG1:thing with value / ARG2:amount of change / ARG3:old high value / ARG4:new lower value [write.xml]
   LexSem("V","write",[":ARG0",":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg0,arg1,arg2,arg3,arg4:S(arg0,VP(V("write"),Adv("down"),arg1,pp("by",arg2),arg3,pp("to",arg4)))),

 'write-in-05': # ARG0:writer / ARG1:entry on form [write.xml]
   LexSem("V","write",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("write"),Adv("in"),arg1))),

 'write-off-02': # ARG0:corporation, etc / ARG1:loss / ARG2:current financial holdings? [write.xml]
   LexSem("V","write",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("write"),Adv("off"),pp("about",arg1),pp("against",arg2)))),

 'write-out-06': # ARG0:writer / ARG1:thing issued / ARG2:beneficiary [write.xml]
   LexSem("V","write",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("write"),Adv("out"),arg1,arg2))),

 'write-up-07': # ARG0:writer / ARG1:Thing written / ARG2:Benefactive [write.xml]
   LexSem("V","write",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("write"),Adv("up"),arg1,arg2))),

 'writhe-01': # ARG1:thing writhing [writhe.xml]
   LexSem("V","writhe",[":ARG1"],lambda arg1:S(arg1,VP(V("writhe")))),

 'wrong-01': # ARG0:treater, agent / ARG1:wronged entity [wrong.xml]
   LexSem("V","wrong",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("wrong"),arg1))),

 'wrought-01': # ARG0:Agent / ARG1:Theme, thing wrought / ARG2:Patient, thing wrought upon [wrought.xml]
   LexSem("V","wrought",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("wrought"),arg1,pp("upon",arg2)))),

 'xray-01': # ARG0:x-rayer / ARG1:subject [xray.xml]
   LexSem("V","x-ray",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("x-ray"),arg1))),

 'yacht-01': # ARG0:agent, driver, yachter / ARG1:thing yachted, transported / ARG2:locations, or start point / ARG3:destination [yacht.xml]
   LexSem("V","yacht",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("yacht"),arg1,pp("off",arg2),arg3))),

 'yak-01': # ARG0:talker / ARG1:talked about [yak.xml]
   LexSem("V","yak",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("yak"),pp("about",arg1)))),

 'yak-02': # ARG0:Vomiter, Cougher [yak.xml]
   LexSem("V","yak",[":ARG0"],lambda arg0:S(arg0,VP(V("yak")))),

 'yammer-01': # ARG0:Yammerer / ARG1:Complaint, thing Yammered, topic of Yammering [yammer.xml]
   LexSem("V","yammer",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("yammer"),arg1))),

 'yammer-away-02': # ARG0:Yammerer / ARG1:Complaint, thing Yammered, topic of Yammering [yammer.xml]
   LexSem("V","yammer",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("yammer"),Adv("away"),arg1))),

 'yammer-on-03': # ARG0:Yammerer / ARG1:Complaint, thing Yammered, topic of Yammering [yammer.xml]
   LexSem("V","yammer",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("yammer"),Adv("on"),pp("about",arg1)))),

 'yank-01': # ARG0:puller / ARG1:thing pulled / ARG2:source [yank.xml]
   LexSem("V","yank",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("yank"),pp("about",arg1),pp("from",arg2)))),

 'yap-01': # ARG0:yapper / ARG1:utterance, yap / ARG2:hearer [yap.xml]
   LexSem("V","yap",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("yap"),arg1,arg2))),

 'yaw-01': # ARG0:causal agent (rare) / ARG1:wide open thing / ARG2:location of the wide open thing [yaw.xml]
   LexSem("V","yaw",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("yaw"),arg1,pp("between",arg2)))),

 'yaw-02': # ARG0:causal agent / ARG1:thing swerving / ARG2:location, direction [yaw.xml]
   LexSem("V","yaw",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("yaw"),arg1,arg2))),

 'yawn-01': # ARG0:person yawning [yawn.xml]
   LexSem("V","yawn",[":ARG0"],lambda arg0:S(arg0,VP(V("yawn")))),

 'yearn-01': # ARG0:desirer / ARG1:object of desire [yearn.xml]
   LexSem("V","yearn",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("yearn"),arg1))),

 'yell-01': # ARG0:Yeller / ARG1:Utterance / ARG2:Hearer [yell.xml]
   LexSem("V","yell",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("yell"),arg1,arg2))),

 'yellow-01': # ARG0:causer of yellow coloration / ARG1:thing becoming yellow [yellow.xml]
   LexSem("V","yellow",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("yellow"),arg1))),

 'yelp-01': # ARG0:yelper, speaker / ARG1:utterance / ARG2:listener [yelp.xml]
   LexSem("V","yelp",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("yelp"),arg1,arg2))),

 'yield-01': # ARG0:thing yielding / ARG1:thing yielded [yield.xml]
   LexSem("V","yield",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("yield"),arg1))),

 'yield-02': # ARG0:Thing giving way / ARG1:what's lost / ARG2:recipient [yield.xml]
   LexSem("V","yield",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("yield"),arg1,pp("to",arg2)))),

 'yield-03': # ARG0:thing providing a dividend / ARG1:dividend, earnings / ARG2:recipient [yield.xml]
   LexSem("V","yield",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("yield"),arg1,arg2))),

 'yield-up-04': # ARG0:Giver / ARG1:Thing given away, lost / ARG2:Recipient [yield.xml]
   LexSem("V","yield",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("yield"),Adv("up"),arg1,pp("to",arg2)))),

 'yip-01': # ARG0:yipper, dog [yip.xml]
   LexSem("V","yip",[":ARG0"],lambda arg0:S(arg0,VP(V("yip")))),

 'yodel-01': # ARG0:yodeler / ARG1:song / ARG2:hearer [yodel.xml]
   LexSem("V","yodel",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("yodel"),arg1,arg2))),

 'yoke-01': # ARG0:yoker, joiner / ARG1:first thing(s) yoked / ARG2:yoked to what / ARG3:yoked with what, instrument [yoke.xml]
   LexSem("V","yoke",[":ARG0",":ARG1",":ARG2",":ARG3"],lambda arg0,arg1,arg2,arg3:S(arg0,VP(V("yoke"),arg1,pp("to",arg2),arg3))),

 'yowl-01': # ARG0:yowler / ARG1:utterance / ARG2:hearer [yowl.xml]
   LexSem("V","yowl",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("yowl"),arg1,arg2))),

 'zag-01': # ARG0:cause of zagging / ARG1:entity in motion [zag.xml]
   LexSem("V","zag",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("zag"),arg1))),

 'zap-01': # ARG0:destroyer / ARG1:destroyed [zap.xml]
   LexSem("V","zap",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("zap"),arg1))),

 'zero-in-01': # ARG0:targeter / ARG1:thing aimed at [zero.xml]
   LexSem("V","zero",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("zero"),Adv("in"),pp("on",arg1)))),

 'zero-out-02': # ARG0:entity removing / ARG1:thing being removed [zero.xml]
   LexSem("V","zero",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("zero"),Adv("out"),arg1))),

 'zest-01': # ARG0:zester / ARG1:thing zested, citrus fruit [zest.xml]
   LexSem("V","zest",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("zest"),arg1))),

 'zig-01': # ARG0:cause of zigging / ARG1:entity in motion [zig.xml]
   LexSem("V","zig",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("zig"),arg1))),

 'zigzag-01': # ARG0:cause of zigzagging / ARG1:entity in motion [zigzag.xml]
   LexSem("V","zigzag",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("zigzag"),arg1))),

 'zing-01': # ARG0:Thing Zinging/Zinger [zing.xml]
   LexSem("V","zing",[":ARG0"],lambda arg0:S(arg0,VP(V("zing")))),

 'zip-01': # ARG0:entity in motion [zip.xml]
   LexSem("V","zip",[":ARG0"],lambda arg0:S(arg0,VP(V("zip")))),

 'zip-03': # ARG0:agent, one who zipps / ARG1:patient, entity being zipped up / ARG2:co-patient, zipped to [zip.xml]
   LexSem("V","zip",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("zip"),arg1,pp("to",arg2)))),

 'zip-up-02': # ARG0:one who zips up, agent / ARG1:patient, entity being zipped up [zip.xml]
   LexSem("V","zip",[":ARG0",":ARG1"],lambda arg0,arg1:S(arg0,VP(V("zip"),Adv("up"),arg1))),

 'zipcode-01': # ARG0:zip-coder, code-writer, agent / ARG1:code itself, theme / ARG2:thing zipcoded, destination [zipcode.xml]
   LexSem("V","zipcode",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("zipcode"),arg1,arg2))),

 'zone-01': # ARG0:zoning board / ARG1:area / ARG2:activity [zone.xml]
   LexSem("V","zone",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("zone"),arg1,arg2))),

 'zone-out-02': # ARG0:entity not paying attention / ARG1:thing not payed attention to / ARG2:thing payed attention to [zone.xml]
   LexSem("V","zone",[":ARG0",":ARG1",":ARG2"],lambda arg0,arg1,arg2:S(arg0,VP(V("zone"),Adv("out"),arg1,pp("with",arg2)))),

 'zoom-01': # ARG1:entity moved / ARG2:EXT / ARG3:start point / ARG4:end point [zoom.xml]
   LexSem("V","zoom",[":ARG1",":ARG2",":ARG3",":ARG4"],lambda arg1,arg2,arg3,arg4:S(arg1,VP(V("zoom"),arg2,arg3,pp("to",arg4)))),

}

# ======== New Words from the jsReal lexicon 
prepositions={}
adverbs['aback']="aback"
nouns['abacus']=nounInfo("abacus")
adverbs['abaft']="abaft"
prepositions['abaft']=P("abaft")
nouns['abandon']=nounInfo("abandon")
adjectives['abandoned']=adjInfo("abandoned")
nouns['abandonment']=nounInfo("abandonment")
nouns['abasement']=nounInfo("abasement")
nouns['abatement']=nounInfo("abatement")
nouns['abattoir']=nounInfo("abattoir")
nouns['abbess']=nounInfo("abbess")
nouns['abbey']=nounInfo("abbey")
nouns['abbot']=nounInfo("abbot")
nouns['abbreviation']=nounInfo("abbreviation")
nouns['abdication']=nounInfo("abdication")
nouns['abdomen']=nounInfo("abdomen")
adjectives['abdominal']=adjInfo("abdominal")
nouns['abduction']=nounInfo("abduction")
adverbs['abeam']="abeam"
adverbs['abed']="abed"
adjectives['aberrant']=adjInfo("aberrant")
nouns['aberration']=nounInfo("aberration")
nouns['abeyance']=nounInfo("abeyance")
nouns['abhorrence']=nounInfo("abhorrence")
adjectives['abhorrent']=adjInfo("abhorrent")
adjectives['abiding']=adjInfo("abiding")
nouns['ability']=nounInfo("ability")
adjectives['abject']=adjInfo("abject")
nouns['abjection']=nounInfo("abjection")
adverbs['abjectly']="abjectly"
nouns['abjuration']=nounInfo("abjuration")
adjectives['ablative']=adjInfo("ablative")
nouns['ablative']=nounInfo("ablative")
nouns['ablaut']=nounInfo("ablaut")
adjectives['ablaze']=adjInfo("ablaze")
adverbs['ablaze']="ablaze"
adjectives['able']=adjInfo("able")
nouns['ablution']=nounInfo("ablution")
adverbs['ably']="ably"
nouns['abnegation']=nounInfo("abnegation")
adjectives['abnormal']=adjInfo("abnormal")
nouns['abnormality']=nounInfo("abnormality")
adverbs['abnormally']="abnormally"
adverbs['aboard']="aboard"
prepositions['aboard']=P("aboard")
nouns['abode']=nounInfo("abode")
nouns['abolition']=nounInfo("abolition")
nouns['abolitionist']=nounInfo("abolitionist")
adjectives['abominable']=adjInfo("abominable")
adverbs['abominably']="abominably"
nouns['abomination']=nounInfo("abomination")
adjectives['aboriginal']=adjInfo("aboriginal")
nouns['aboriginal']=nounInfo("aboriginal")
nouns['aborigine']=nounInfo("aborigine")
nouns['abortion']=nounInfo("abortion")
nouns['abortionist']=nounInfo("abortionist")
adjectives['abortive']=adjInfo("abortive")
adverbs['abortively']="abortively"
adverbs['about']="about"
prepositions['about']=P("about")
adverbs['above']="above"
prepositions['above']=P("above")
nouns['abracadabra']=nounInfo("abracadabra")
nouns['abrasion']=nounInfo("abrasion")
adjectives['abrasive']=adjInfo("abrasive")
nouns['abrasive']=nounInfo("abrasive")
adverbs['abreast']="abreast"
nouns['abridgement']=nounInfo("abridgement")
nouns['abridgment']=nounInfo("abridgment")
adverbs['abroad']="abroad"
nouns['abrogation']=nounInfo("abrogation")
adjectives['abrupt']=adjInfo("abrupt")
adverbs['abruptly']="abruptly"
nouns['abruptness']=nounInfo("abruptness")
nouns['abscess']=nounInfo("abscess")
nouns['absence']=nounInfo("absence")
adjectives['absent']=adjInfo("absent")
nouns['absentee']=nounInfo("absentee")
nouns['absenteeism']=nounInfo("absenteeism")
adverbs['absently']="absently"
nouns['absinth']=nounInfo("absinth")
nouns['absinthe']=nounInfo("absinthe")
adjectives['absolute']=adjInfo("absolute")
adverbs['absolutely']="absolutely"
nouns['absolution']=nounInfo("absolution")
nouns['absolutism']=nounInfo("absolutism")
adjectives['absorbent']=adjInfo("absorbent")
nouns['absorbent']=nounInfo("absorbent")
nouns['absorption']=nounInfo("absorption")
nouns['abstainer']=nounInfo("abstainer")
adjectives['abstemious']=adjInfo("abstemious")
adverbs['abstemiously']="abstemiously"
nouns['abstemiousness']=nounInfo("abstemiousness")
nouns['abstention']=nounInfo("abstention")
nouns['abstinence']=nounInfo("abstinence")
adjectives['abstract']=adjInfo("abstract")
nouns['abstract']=nounInfo("abstract")
adjectives['abstracted']=adjInfo("abstracted")
adverbs['abstractedly']="abstractedly"
nouns['abstraction']=nounInfo("abstraction")
adjectives['abstruse']=adjInfo("abstruse")
adverbs['abstrusely']="abstrusely"
nouns['abstruseness']=nounInfo("abstruseness")
adjectives['absurd']=adjInfo("absurd")
nouns['absurdity']=nounInfo("absurdity")
adverbs['absurdly']="absurdly"
nouns['abundance']=nounInfo("abundance")
adjectives['abundant']=adjInfo("abundant")
adverbs['abundantly']="abundantly"
nouns['abuse']=nounInfo("abuse")
adjectives['abusive']=adjInfo("abusive")
adverbs['abusively']="abusively"
nouns['abutment']=nounInfo("abutment")
nouns['abysm']=nounInfo("abysm")
adjectives['abysmal']=adjInfo("abysmal")
adverbs['abysmally']="abysmally"
nouns['abyss']=nounInfo("abyss")
nouns['acacia']=nounInfo("acacia")
adjectives['academic']=adjInfo("academic")
nouns['academic']=nounInfo("academic")
adverbs['academically']="academically"
nouns['academicals']=nounInfo("academicals")
nouns['academician']=nounInfo("academician")
nouns['academy']=nounInfo("academy")
adjectives['accelerando']=adjInfo("accelerando")
adverbs['accelerando']="accelerando"
nouns['accelerando']=nounInfo("accelerando")
nouns['acceleration']=nounInfo("acceleration")
nouns['accelerator']=nounInfo("accelerator")
nouns['accent']=nounInfo("accent")
nouns['accentuation']=nounInfo("accentuation")
nouns['acceptability']=nounInfo("acceptability")
adjectives['acceptable']=adjInfo("acceptable")
adverbs['acceptably']="acceptably"
nouns['acceptance']=nounInfo("acceptance")
nouns['acceptation']=nounInfo("acceptation")
nouns['access']=nounInfo("access")
nouns['accessary']=nounInfo("accessary")
nouns['accessibility']=nounInfo("accessibility")
adjectives['accessible']=adjInfo("accessible")
nouns['accession']=nounInfo("accession")
nouns['accessory']=nounInfo("accessory")
nouns['accidence']=nounInfo("accidence")
nouns['accident']=nounInfo("accident")
adjectives['accidental']=adjInfo("accidental")
adverbs['accidentally']="accidentally"
nouns['acclaim']=nounInfo("acclaim")
nouns['acclamation']=nounInfo("acclamation")
nouns['acclimation']=nounInfo("acclimation")
nouns['acclimatization']=nounInfo("acclimatization")
nouns['acclivity']=nounInfo("acclivity")
nouns['accolade']=nounInfo("accolade")
adjectives['accommodating']=adjInfo("accommodating")
nouns['accommodation']=nounInfo("accommodation")
nouns['accompaniment']=nounInfo("accompaniment")
nouns['accompanist']=nounInfo("accompanist")
nouns['accomplice']=nounInfo("accomplice")
adjectives['accomplished']=adjInfo("accomplished")
nouns['accomplishment']=nounInfo("accomplishment")
nouns['accord']=nounInfo("accord")
nouns['accordance']=nounInfo("accordance")
adverbs['accordingly']="accordingly"
nouns['accordion']=nounInfo("accordion")
nouns['accouchement']=nounInfo("accouchement")
nouns['account']=nounInfo("account")
adjectives['accountable']=adjInfo("accountable")
nouns['accountablility']=nounInfo("accountablility")
nouns['accountancy']=nounInfo("accountancy")
nouns['accountant']=nounInfo("accountant")
nouns['accoutrements']=nounInfo("accoutrements")
nouns['accreditation']=nounInfo("accreditation")
adjectives['accredited']=adjInfo("accredited")
nouns['accretion']=nounInfo("accretion")
nouns['accumulation']=nounInfo("accumulation")
adjectives['accumulative']=adjInfo("accumulative")
nouns['accumulator']=nounInfo("accumulator")
nouns['accuracy']=nounInfo("accuracy")
adjectives['accurate']=adjInfo("accurate")
adverbs['accurately']="accurately"
adjectives['accursed']=adjInfo("accursed")
adjectives['accurst']=adjInfo("accurst")
nouns['accusation']=nounInfo("accusation")
adjectives['accusative']=adjInfo("accusative")
nouns['accusative']=nounInfo("accusative")
nouns['accuser']=nounInfo("accuser")
adverbs['accusingly']="accusingly"
adjectives['accustomed']=adjInfo("accustomed")
nouns['ace']=nounInfo("ace")
nouns['acerbity']=nounInfo("acerbity")
nouns['acetate']=nounInfo("acetate")
adjectives['acetic']=adjInfo("acetic")
nouns['acetylene']=nounInfo("acetylene")
nouns['ache']=nounInfo("ache")
adjectives['achievable']=adjInfo("achievable")
nouns['achievement']=nounInfo("achievement")
adjectives['acid']=adjInfo("acid")
nouns['acid']=nounInfo("acid")
adjectives['acidic']=adjInfo("acidic")
nouns['acidity']=nounInfo("acidity")
adjectives['acidulated']=adjInfo("acidulated")
adjectives['acidulous']=adjInfo("acidulous")
nouns['acme']=nounInfo("acme")
nouns['acne']=nounInfo("acne")
nouns['acolyte']=nounInfo("acolyte")
nouns['aconite']=nounInfo("aconite")
nouns['acorn']=nounInfo("acorn")
adjectives['acoustic']=adjInfo("acoustic")
nouns['acoustic']=nounInfo("acoustic")
nouns['acoustics']=nounInfo("acoustics")
nouns['acquaintance']=nounInfo("acquaintance")
nouns['acquaintanceship']=nounInfo("acquaintanceship")
nouns['acquiescence']=nounInfo("acquiescence")
adjectives['acquiescent']=adjInfo("acquiescent")
nouns['acquirement']=nounInfo("acquirement")
nouns['acquisition']=nounInfo("acquisition")
adjectives['acquisitive']=adjInfo("acquisitive")
nouns['acquittal']=nounInfo("acquittal")
nouns['acre']=nounInfo("acre")
nouns['acreage']=nounInfo("acreage")
adjectives['acrid']=adjInfo("acrid")
adjectives['acrimonious']=adjInfo("acrimonious")
nouns['acrimony']=nounInfo("acrimony")
nouns['acrobat']=nounInfo("acrobat")
adjectives['acrobatic']=adjInfo("acrobatic")
nouns['acrobatics']=nounInfo("acrobatics")
nouns['acronym']=nounInfo("acronym")
nouns['acropolis']=nounInfo("acropolis")
adverbs['across']="across"
prepositions['across']=P("across")
nouns['acrostic']=nounInfo("acrostic")
nouns['acrylic']=nounInfo("acrylic")
nouns['act']=nounInfo("act")
adjectives['acting']=adjInfo("acting")
nouns['acting']=nounInfo("acting")
adjectives['actinic']=adjInfo("actinic")
nouns['actinism']=nounInfo("actinism")
nouns['action']=nounInfo("action")
adjectives['actionable']=adjInfo("actionable")
nouns['activation']=nounInfo("activation")
adjectives['active']=adjInfo("active")
adverbs['actively']="actively"
nouns['activist']=nounInfo("activist")
nouns['activity']=nounInfo("activity")
nouns['actor']=nounInfo("actor").addAttributes({"g":"x"})
nouns['actress']=nounInfo("actress").addAttributes({"g":"f"})
adjectives['actual']=adjInfo("actual")
nouns['actuality']=nounInfo("actuality")
adverbs['actually']="actually"
adjectives['actuarial']=adjInfo("actuarial")
nouns['actuary']=nounInfo("actuary")
nouns['acuity']=nounInfo("acuity")
nouns['acumen']=nounInfo("acumen")
nouns['acupuncture']=nounInfo("acupuncture")
adjectives['acute']=adjInfo("acute")
adverbs['acutely']="acutely"
nouns['acuteness']=nounInfo("acuteness")
nouns['ad']=nounInfo("ad")
nouns['adage']=nounInfo("adage")
adjectives['adagio']=adjInfo("adagio")
adverbs['adagio']="adagio"
nouns['adagio']=nounInfo("adagio")
adjectives['adamant']=adjInfo("adamant")
nouns['adamant']=nounInfo("adamant")
adjectives['adamantine']=adjInfo("adamantine")
nouns['adaptability']=nounInfo("adaptability")
adjectives['adaptable']=adjInfo("adaptable")
nouns['adaptation']=nounInfo("adaptation")
nouns['adapter']=nounInfo("adapter")
nouns['adaptor']=nounInfo("adaptor")
nouns['addendum']=nounInfo("addendum")
nouns['adder']=nounInfo("adder")
nouns['addict']=nounInfo("addict").addAttributes({"g":"x"})
nouns['addiction']=nounInfo("addiction")
adjectives['addictive']=adjInfo("addictive")
nouns['addition']=nounInfo("addition")
adjectives['additional']=adjInfo("additional")
adverbs['additionally']="additionally"
nouns['additive']=nounInfo("additive")
adjectives['addle']=adjInfo("addle")
nouns['address']=nounInfo("address")
nouns['addressee']=nounInfo("addressee")
nouns['adenoid']=nounInfo("adenoid")
adjectives['adenoidal']=adjInfo("adenoidal")
adjectives['adept']=adjInfo("adept")
nouns['adept']=nounInfo("adept")
nouns['adequacy']=nounInfo("adequacy")
adjectives['adequate']=adjInfo("adequate")
adverbs['adequately']="adequately"
nouns['adherence']=nounInfo("adherence")
nouns['adherent']=nounInfo("adherent")
nouns['adhesion']=nounInfo("adhesion")
adjectives['adhesive']=adjInfo("adhesive")
nouns['adhesive']=nounInfo("adhesive")
nouns['adieu']=nounInfo("adieu")
adjectives['adipose']=adjInfo("adipose")
adjectives['adjacent']=adjInfo("adjacent")
adjectives['adjectival']=adjInfo("adjectival")
nouns['adjective']=nounInfo("adjective")
adjectives['adjoining']=adjInfo("adjoining")
nouns['adjournment']=nounInfo("adjournment")
nouns['adjudication']=nounInfo("adjudication")
nouns['adjudicator']=nounInfo("adjudicator")
nouns['adjunct']=nounInfo("adjunct")
nouns['adjuration']=nounInfo("adjuration")
adjectives['adjustable']=adjInfo("adjustable")
nouns['adjuster']=nounInfo("adjuster")
nouns['adjustment']=nounInfo("adjustment")
nouns['adjutant']=nounInfo("adjutant")
nouns['admass']=nounInfo("admass")
nouns['administration']=nounInfo("administration")
adjectives['administrative']=adjInfo("administrative")
adverbs['administratively']="administratively"
nouns['administrator']=nounInfo("administrator").addAttributes({"g":"x"})
adjectives['admirable']=adjInfo("admirable")
adverbs['admirably']="admirably"
nouns['admiral']=nounInfo("admiral")
nouns['admiralty']=nounInfo("admiralty")
nouns['admiration']=nounInfo("admiration")
nouns['admirer']=nounInfo("admirer")
adjectives['admiring']=adjInfo("admiring")
adverbs['admiringly']="admiringly"
nouns['admissibility']=nounInfo("admissibility")
adjectives['admissible']=adjInfo("admissible")
nouns['admission']=nounInfo("admission")
nouns['admittance']=nounInfo("admittance")
adverbs['admittedly']="admittedly"
nouns['admixture']=nounInfo("admixture")
nouns['admonition']=nounInfo("admonition")
adjectives['admonitory']=adjInfo("admonitory")
nouns['ado']=nounInfo("ado")
nouns['adobe']=nounInfo("adobe")
nouns['adolescence']=nounInfo("adolescence")
adjectives['adolescent']=adjInfo("adolescent")
nouns['adolescent']=nounInfo("adolescent").addAttributes({"g":"x"})
nouns['adoption']=nounInfo("adoption")
adjectives['adoptive']=adjInfo("adoptive")
adjectives['adorable']=adjInfo("adorable")
adverbs['adorably']="adorably"
nouns['adoration']=nounInfo("adoration")
nouns['adorer']=nounInfo("adorer")
adjectives['adoring']=adjInfo("adoring")
adverbs['adoringly']="adoringly"
nouns['adornment']=nounInfo("adornment")
adjectives['adrenal']=adjInfo("adrenal")
nouns['adrenalin']=nounInfo("adrenalin")
adjectives['adrift']=adjInfo("adrift")
adverbs['adrift']="adrift"
adjectives['adroit']=adjInfo("adroit")
adverbs['adroitly']="adroitly"
nouns['adroitness']=nounInfo("adroitness")
nouns['adulation']=nounInfo("adulation")
adjectives['adult']=adjInfo("adult")
nouns['adult']=nounInfo("adult").addAttributes({"g":"x"})
nouns['adulterant']=nounInfo("adulterant")
nouns['adulteration']=nounInfo("adulteration")
nouns['adulterer']=nounInfo("adulterer")
nouns['adulteress']=nounInfo("adulteress")
adjectives['adulterous']=adjInfo("adulterous")
nouns['adultery']=nounInfo("adultery")
nouns['adulthood']=nounInfo("adulthood")
nouns['advance']=nounInfo("advance")
adjectives['advanced']=adjInfo("advanced")
nouns['advancement']=nounInfo("advancement")
nouns['advantage']=nounInfo("advantage")
adjectives['advantageous']=adjInfo("advantageous")
adverbs['advantageously']="advantageously"
nouns['advent']=nounInfo("advent")
adjectives['adventitious']=adjInfo("adventitious")
nouns['adventure']=nounInfo("adventure")
nouns['adventurer']=nounInfo("adventurer")
adjectives['adventuresome']=adjInfo("adventuresome")
nouns['adventuress']=nounInfo("adventuress")
adjectives['adventurous']=adjInfo("adventurous")
nouns['adverb']=nounInfo("adverb")
adjectives['adverbial']=adjInfo("adverbial")
adverbs['adverbially']="adverbially"
nouns['adversary']=nounInfo("adversary")
adjectives['adverse']=adjInfo("adverse")
adverbs['adversely']="adversely"
nouns['adversity']=nounInfo("adversity")
nouns['advert']=nounInfo("advert")
nouns['advertisement']=nounInfo("advertisement")
nouns['advertiser']=nounInfo("advertiser")
nouns['advice']=nounInfo("advice")
nouns['advisability']=nounInfo("advisability")
adjectives['advisable']=adjInfo("advisable")
adjectives['advised']=adjInfo("advised")
adverbs['advisedly']="advisedly"
nouns['adviser']=nounInfo("adviser").addAttributes({"g":"x"})
adjectives['advisory']=adjInfo("advisory")
nouns['advocacy']=nounInfo("advocacy")
nouns['advocate']=nounInfo("advocate")
nouns['advowson']=nounInfo("advowson")
nouns['adz']=nounInfo("adz")
nouns['adze']=nounInfo("adze")
nouns['aegis']=nounInfo("aegis")
nouns['aeon']=nounInfo("aeon")
nouns['aeration']=nounInfo("aeration")
adjectives['aerial']=adjInfo("aerial")
nouns['aerial']=nounInfo("aerial")
nouns['aerie']=nounInfo("aerie")
nouns['aerobatics']=nounInfo("aerobatics")
nouns['aerodrome']=nounInfo("aerodrome")
nouns['aerodynamics']=nounInfo("aerodynamics")
nouns['aeronaut']=nounInfo("aeronaut")
nouns['aeronautics']=nounInfo("aeronautics")
nouns['aeroplane']=nounInfo("aeroplane")
nouns['aerosol']=nounInfo("aerosol")
nouns['aerospace']=nounInfo("aerospace")
nouns['aertex']=nounInfo("aertex")
nouns['aery']=nounInfo("aery")
nouns['aesthete']=nounInfo("aesthete")
adjectives['aesthetic']=adjInfo("aesthetic")
nouns['aesthetic']=nounInfo("aesthetic")
adjectives['aesthetical']=adjInfo("aesthetical")
adverbs['aesthetically']="aesthetically"
nouns['aesthetics']=nounInfo("aesthetics")
nouns['aether']=nounInfo("aether")
nouns['aetiology']=nounInfo("aetiology")
adverbs['afar']="afar"
nouns['affability']=nounInfo("affability")
adjectives['affable']=adjInfo("affable")
adverbs['affably']="affably"
nouns['affair']=nounInfo("affair")
nouns['affectation']=nounInfo("affectation")
adjectives['affected']=adjInfo("affected")
adjectives['affecting']=adjInfo("affecting")
adverbs['affectingly']="affectingly"
nouns['affection']=nounInfo("affection")
adjectives['affectionate']=adjInfo("affectionate")
adverbs['affectionately']="affectionately"
nouns['affidavit']=nounInfo("affidavit")
nouns['affiliation']=nounInfo("affiliation")
nouns['affinity']=nounInfo("affinity")
nouns['affirmation']=nounInfo("affirmation")
adjectives['affirmative']=adjInfo("affirmative")
nouns['affirmative']=nounInfo("affirmative")
nouns['affix']=nounInfo("affix")
nouns['afflatus']=nounInfo("afflatus")
nouns['affliction']=nounInfo("affliction")
nouns['affluence']=nounInfo("affluence")
adjectives['affluent']=adjInfo("affluent")
nouns['affluent']=nounInfo("affluent")
adverbs['affordability']="affordability"
adjectives['affordable']=adjInfo("affordable")
nouns['afforestation']=nounInfo("afforestation")
nouns['affray']=nounInfo("affray")
nouns['affront']=nounInfo("affront")
adverbs['afield']="afield"
adjectives['afire']=adjInfo("afire")
adjectives['aflame']=adjInfo("aflame")
adjectives['afloat']=adjInfo("afloat")
adjectives['afoot']=adjInfo("afoot")
adverbs['afore']="afore"
prepositions['afore']=P("afore")
adverbs['afoul']="afoul"
adjectives['afraid']=adjInfo("afraid")
adverbs['afresh']="afresh"
adverbs['aft']="aft"
adjectives['after']=adjInfo("after")
adverbs['after']="after"
prepositions['after']=P("after")
nouns['aftercare']=nounInfo("aftercare")
nouns['afterdamp']=nounInfo("afterdamp")
nouns['afterglow']=nounInfo("afterglow")
nouns['aftermath']=nounInfo("aftermath")
nouns['afternoon']=nounInfo("afternoon")
nouns['afters']=nounInfo("afters")
nouns['afterthought']=nounInfo("afterthought")
adverbs['afterwards']="afterwards"
adverbs['again']="again"
prepositions['against']=P("against")
adjectives['agape']=adjInfo("agape")
nouns['agate']=nounInfo("agate")
nouns['agave']=nounInfo("agave")
nouns['age']=nounInfo("age")
adjectives['aged']=adjInfo("aged")
nouns['ageing']=nounInfo("ageing")
adjectives['ageless']=adjInfo("ageless")
nouns['agency']=nounInfo("agency")
nouns['agenda']=nounInfo("agenda")
nouns['agent']=nounInfo("agent")
adjectives['agglomerate']=adjInfo("agglomerate")
nouns['agglomeration']=nounInfo("agglomeration")
adjectives['agglutinative']=adjInfo("agglutinative")
nouns['aggrandizement']=nounInfo("aggrandizement")
nouns['aggravation']=nounInfo("aggravation")
nouns['aggregate']=nounInfo("aggregate")
nouns['aggregation']=nounInfo("aggregation")
nouns['aggression']=nounInfo("aggression")
adjectives['aggressive']=adjInfo("aggressive")
adverbs['aggressively']="aggressively"
nouns['aggressiveness']=nounInfo("aggressiveness")
nouns['aggressor']=nounInfo("aggressor")
nouns['aggro']=nounInfo("aggro")
adjectives['aghast']=adjInfo("aghast")
adjectives['agile']=adjInfo("agile")
adverbs['agilely']="agilely"
nouns['agility']=nounInfo("agility")
nouns['aging']=nounInfo("aging")
adjectives['agitated']=adjInfo("agitated")
adverbs['agitatedly']="agitatedly"
adjectives['agitating']=adjInfo("agitating")
nouns['agitation']=nounInfo("agitation")
nouns['agitator']=nounInfo("agitator")
adjectives['aglow']=adjInfo("aglow")
nouns['agnail']=nounInfo("agnail")
adjectives['agnostic']=adjInfo("agnostic")
nouns['agnostic']=nounInfo("agnostic")
nouns['agnosticism']=nounInfo("agnosticism")
adverbs['ago']="ago"
adjectives['agog']=adjInfo("agog")
adverbs['agonisingly']="agonisingly"
adjectives['agonized']=adjInfo("agonized")
adjectives['agonizing']=adjInfo("agonizing")
nouns['agony']=nounInfo("agony")
nouns['agora']=nounInfo("agora")
nouns['agoraphobia']=nounInfo("agoraphobia")
adjectives['agrarian']=adjInfo("agrarian")
adjectives['agreeable']=adjInfo("agreeable")
adverbs['agreeably']="agreeably"
nouns['agreement']=nounInfo("agreement")
adjectives['agricultural']=adjInfo("agricultural")
nouns['agriculture']=nounInfo("agriculture")
adjectives['aground']=adjInfo("aground")
adverbs['aground']="aground"
nouns['ague']=nounInfo("ague")
nouns['ah']=nounInfo("ah")
nouns['aha']=nounInfo("aha")
adverbs['ahead']="ahead"
nouns['ahem']=nounInfo("ahem")
nouns['ahoy']=nounInfo("ahoy")
nouns['aid']=nounInfo("aid")
nouns['aigret']=nounInfo("aigret")
nouns['aigrette']=nounInfo("aigrette")
nouns['aileron']=nounInfo("aileron")
nouns['ailment']=nounInfo("ailment")
nouns['aim']=nounInfo("aim")
adjectives['aimless']=adjInfo("aimless")
adverbs['aimlessly']="aimlessly"
nouns['air']=nounInfo("air")
nouns['airbed']=nounInfo("airbed")
adjectives['airborne']=adjInfo("airborne")
nouns['airbrake']=nounInfo("airbrake")
nouns['aircraft']=nounInfo("aircraft")
nouns['aircraftman']=nounInfo("aircraftman")
nouns['aircrew']=nounInfo("aircrew")
nouns['airdrome']=nounInfo("airdrome")
nouns['airfield']=nounInfo("airfield")
nouns['airflow']=nounInfo("airflow")
nouns['airframe']=nounInfo("airframe")
adverbs['airily']="airily"
nouns['airing']=nounInfo("airing")
adjectives['airless']=adjInfo("airless")
nouns['airline']=nounInfo("airline")
nouns['airliner']=nounInfo("airliner")
nouns['airmail']=nounInfo("airmail")
nouns['airman']=nounInfo("airman")
nouns['airplane']=nounInfo("airplane")
nouns['airport']=nounInfo("airport")
nouns['airscrew']=nounInfo("airscrew")
nouns['airship']=nounInfo("airship")
nouns['airstrip']=nounInfo("airstrip")
adjectives['airtight']=adjInfo("airtight")
nouns['airway']=nounInfo("airway")
nouns['airwoman']=nounInfo("airwoman")
nouns['airworthiness']=nounInfo("airworthiness")
adjectives['airworthy']=adjInfo("airworthy")
adjectives['airy']=adjInfo("airy")
nouns['aisle']=nounInfo("aisle")
nouns['aitch']=nounInfo("aitch")
adjectives['ajar']=adjInfo("ajar")
adverbs['akimbo']="akimbo"
adjectives['akin']=adjInfo("akin")
adjectives['alabaster']=adjInfo("alabaster")
nouns['alabaster']=nounInfo("alabaster")
nouns['alack']=nounInfo("alack")
nouns['alacrity']=nounInfo("alacrity")
nouns['alarm']=nounInfo("alarm")
adjectives['alarming']=adjInfo("alarming")
adverbs['alarmingly']="alarmingly"
nouns['alarmist']=nounInfo("alarmist")
nouns['alas']=nounInfo("alas")
nouns['alb']=nounInfo("alb")
nouns['albatross']=nounInfo("albatross")
nouns['albino']=nounInfo("albino")
nouns['album']=nounInfo("album")
nouns['albumen']=nounInfo("albumen")
nouns['alchemist']=nounInfo("alchemist")
nouns['alchemy']=nounInfo("alchemy")
nouns['alcohol']=nounInfo("alcohol")
adjectives['alcoholic']=adjInfo("alcoholic")
nouns['alcoholic']=nounInfo("alcoholic")
nouns['alcoholism']=nounInfo("alcoholism")
nouns['alcove']=nounInfo("alcove")
nouns['alder']=nounInfo("alder")
nouns['alderman']=nounInfo("alderman")
adjectives['aldermanic']=adjInfo("aldermanic")
nouns['ale']=nounInfo("ale")
adjectives['alee']=adjInfo("alee")
adverbs['alee']="alee"
adjectives['alert']=adjInfo("alert")
nouns['alert']=nounInfo("alert")
adverbs['alertly']="alertly"
nouns['alertness']=nounInfo("alertness")
nouns['alexandrine']=nounInfo("alexandrine")
nouns['alexia']=nounInfo("alexia")
adjectives['alexic']=adjInfo("alexic")
nouns['alexic']=nounInfo("alexic")
nouns['alfalfa']=nounInfo("alfalfa")
adjectives['alfresco']=adjInfo("alfresco")
adverbs['alfresco']="alfresco"
nouns['alga']=nounInfo("alga")
nouns['algebra']=nounInfo("algebra")
adjectives['algebraic']=adjInfo("algebraic")
adjectives['algebraical']=adjInfo("algebraical")
adverbs['algebraically']="algebraically"
adverbs['alias']="alias"
nouns['alias']=nounInfo("alias")
nouns['alibi']=nounInfo("alibi")
adjectives['alien']=adjInfo("alien")
nouns['alien']=nounInfo("alien")
nouns['alienation']=nounInfo("alienation")
nouns['alienist']=nounInfo("alienist")
adjectives['alight']=adjInfo("alight")
nouns['alignment']=nounInfo("alignment")
adjectives['alike']=adjInfo("alike")
adverbs['alike']="alike"
adjectives['alimentary']=adjInfo("alimentary")
nouns['alimony']=nounInfo("alimony")
adjectives['alive']=adjInfo("alive")
nouns['alkali']=nounInfo("alkali")
adjectives['alkaline']=adjInfo("alkaline")
adverbs['all']="all"
nouns['allegation']=nounInfo("allegation")
adverbs['allegedly']="allegedly"
nouns['allegiance']=nounInfo("allegiance")
adjectives['allegoric']=adjInfo("allegoric")
adjectives['allegorical']=adjInfo("allegorical")
nouns['allegory']=nounInfo("allegory")
adjectives['allegretto']=adjInfo("allegretto")
adverbs['allegretto']="allegretto"
nouns['allegretto']=nounInfo("allegretto")
adjectives['allegro']=adjInfo("allegro")
adverbs['allegro']="allegro"
nouns['allegro']=nounInfo("allegro")
nouns['alleluia']=nounInfo("alleluia")
nouns['allergen']=nounInfo("allergen")
adjectives['allergic']=adjInfo("allergic")
nouns['allergy']=nounInfo("allergy")
nouns['alleviation']=nounInfo("alleviation")
nouns['alley']=nounInfo("alley")
nouns['alleyway']=nounInfo("alleyway")
nouns['alliance']=nounInfo("alliance")
nouns['alligator']=nounInfo("alligator")
nouns['alliteration']=nounInfo("alliteration")
adjectives['alliterative']=adjInfo("alliterative")
adverbs['alliteratively']="alliteratively"
nouns['allocation']=nounInfo("allocation")
nouns['allotment']=nounInfo("allotment")
adjectives['allowable']=adjInfo("allowable")
nouns['allowance']=nounInfo("allowance")
adjectives['allowed']=adjInfo("allowed")
nouns['alloy']=nounInfo("alloy")
nouns['allspice']=nounInfo("allspice")
nouns['allure']=nounInfo("allure")
nouns['allurement']=nounInfo("allurement")
adjectives['alluring']=adjInfo("alluring")
nouns['allusion']=nounInfo("allusion")
adjectives['allusive']=adjInfo("allusive")
adjectives['alluvial']=adjInfo("alluvial")
nouns['ally']=nounInfo("ally")
nouns['almanac']=nounInfo("almanac")
adjectives['almighty']=adjInfo("almighty")
nouns['almighty']=nounInfo("almighty")
nouns['almond']=nounInfo("almond")
nouns['almoner']=nounInfo("almoner")
adverbs['almost']="almost"
nouns['alms']=nounInfo("alms")
nouns['aloe']=nounInfo("aloe")
adverbs['aloft']="aloft"
adjectives['alone']=adjInfo("alone")
adverbs['alone']="alone"
adverbs['along']="along"
prepositions['along']=P("along")
adverbs['alongside']="alongside"
prepositions['alongside']=P("alongside")
adjectives['aloof']=adjInfo("aloof")
adverbs['aloof']="aloof"
nouns['aloofness']=nounInfo("aloofness")
adverbs['aloud']="aloud"
nouns['alp']=nounInfo("alp")
nouns['alpaca']=nounInfo("alpaca")
nouns['alpenstock']=nounInfo("alpenstock")
nouns['alpha']=nounInfo("alpha")
nouns['alphabet']=nounInfo("alphabet")
adjectives['alphabetical']=adjInfo("alphabetical")
adverbs['alphabetically']="alphabetically"
adjectives['alpine']=adjInfo("alpine")
nouns['alpinist']=nounInfo("alpinist")
adverbs['already']="already"
adjectives['alright']=adjInfo("alright")
adverbs['alright']="alright"
adverbs['also']="also"
nouns['altar']=nounInfo("altar")
adjectives['alterable']=adjInfo("alterable")
nouns['alteration']=nounInfo("alteration")
nouns['altercation']=nounInfo("altercation")
adjectives['alternate']=adjInfo("alternate")
adverbs['alternately']="alternately"
nouns['alternation']=nounInfo("alternation")
adjectives['alternative']=adjInfo("alternative")
nouns['alternative']=nounInfo("alternative")
adverbs['alternatively']="alternatively"
nouns['altimeter']=nounInfo("altimeter")
nouns['altitude']=nounInfo("altitude")
nouns['alto']=nounInfo("alto")
adverbs['altogether']="altogether"
nouns['altruism']=nounInfo("altruism")
nouns['altruist']=nounInfo("altruist")
adjectives['altruistic']=adjInfo("altruistic")
adverbs['altruistically']="altruistically"
nouns['alum']=nounInfo("alum")
nouns['aluminium']=nounInfo("aluminium")
nouns['alumna']=nounInfo("alumna")
nouns['alumnus']=nounInfo("alumnus")
adjectives['alveolar']=adjInfo("alveolar")
nouns['alveolar']=nounInfo("alveolar")
adverbs['always']="always"
nouns['amah']=nounInfo("amah")
adverbs['amain']="amain"
nouns['amalgam']=nounInfo("amalgam")
nouns['amalgamation']=nounInfo("amalgamation")
nouns['amanuensis']=nounInfo("amanuensis")
nouns['amaryllis']=nounInfo("amaryllis")
nouns['amateur']=nounInfo("amateur")
adjectives['amateurish']=adjInfo("amateurish")
nouns['amateurism']=nounInfo("amateurism")
adjectives['amatory']=adjInfo("amatory")
nouns['amazement']=nounInfo("amazement")
adjectives['amazing']=adjInfo("amazing")
adverbs['amazingly']="amazingly"
nouns['ambassador']=nounInfo("ambassador")
adjectives['ambassadorial']=adjInfo("ambassadorial")
nouns['ambassadress']=nounInfo("ambassadress")
nouns['amber']=nounInfo("amber")
nouns['ambergris']=nounInfo("ambergris")
adjectives['ambidextrous']=adjInfo("ambidextrous")
nouns['ambience']=nounInfo("ambience")
adjectives['ambient']=adjInfo("ambient")
nouns['ambiguity']=nounInfo("ambiguity")
adjectives['ambiguous']=adjInfo("ambiguous")
adverbs['ambiguously']="ambiguously"
nouns['ambit']=nounInfo("ambit")
nouns['ambition']=nounInfo("ambition")
adjectives['ambitious']=adjInfo("ambitious")
adverbs['ambitiously']="ambitiously"
nouns['ambivalence']=nounInfo("ambivalence")
adjectives['ambivalent']=adjInfo("ambivalent")
nouns['amble']=nounInfo("amble")
nouns['ambrosia']=nounInfo("ambrosia")
nouns['ambulance']=nounInfo("ambulance")
nouns['ambuscade']=nounInfo("ambuscade")
nouns['ambush']=nounInfo("ambush")
nouns['ameba']=nounInfo("ameba")
nouns['ameer']=nounInfo("ameer")
nouns['amelioration']=nounInfo("amelioration")
nouns['amen']=nounInfo("amen")
adjectives['amenable']=adjInfo("amenable")
adjectives['amendable']=adjInfo("amendable")
nouns['amendment']=nounInfo("amendment")
nouns['amends']=nounInfo("amends")
nouns['amenity']=nounInfo("amenity")
nouns['amethyst']=nounInfo("amethyst")
nouns['amiability']=nounInfo("amiability")
adjectives['amiable']=adjInfo("amiable")
adverbs['amiably']="amiably"
nouns['amicability']=nounInfo("amicability")
adjectives['amicable']=adjInfo("amicable")
adverbs['amicably']="amicably"
prepositions['amid']=P("amid")
adverbs['amidships']="amidships"
prepositions['amidst']=P("amidst")
nouns['amir']=nounInfo("amir")
adjectives['amiss']=adjInfo("amiss")
adverbs['amiss']="amiss"
nouns['amity']=nounInfo("amity")
nouns['ammeter']=nounInfo("ammeter")
nouns['ammonia']=nounInfo("ammonia")
adjectives['ammoniated']=adjInfo("ammoniated")
nouns['ammonite']=nounInfo("ammonite")
nouns['ammunition']=nounInfo("ammunition")
nouns['amnesia']=nounInfo("amnesia")
nouns['amnesty']=nounInfo("amnesty")
nouns['amoeba']=nounInfo("amoeba")
adjectives['amoebic']=adjInfo("amoebic")
adverbs['amok']="amok"
prepositions['among']=P("among")
prepositions['amongst']=P("amongst")
adjectives['amoral']=adjInfo("amoral")
adjectives['amorous']=adjInfo("amorous")
adverbs['amorously']="amorously"
adjectives['amorphous']=adjInfo("amorphous")
nouns['amortization']=nounInfo("amortization")
nouns['amount']=nounInfo("amount")
nouns['amour']=nounInfo("amour")
nouns['amp']=nounInfo("amp")
nouns['ampere']=nounInfo("ampere")
nouns['amphetamine']=nounInfo("amphetamine")
nouns['amphibian']=nounInfo("amphibian")
adjectives['amphibious']=adjInfo("amphibious")
nouns['amphitheatre']=nounInfo("amphitheatre")
nouns['amphora']=nounInfo("amphora")
adjectives['ample']=adjInfo("ample")
nouns['amplification']=nounInfo("amplification")
nouns['amplifier']=nounInfo("amplifier")
nouns['amplitude']=nounInfo("amplitude")
adverbs['amply']="amply"
nouns['ampoule']=nounInfo("ampoule")
nouns['amputation']=nounInfo("amputation")
adverbs['amuck']="amuck"
nouns['amulet']=nounInfo("amulet")
adverbs['amusedly']="amusedly"
nouns['amusement']=nounInfo("amusement")
adjectives['amusing']=adjInfo("amusing")
adverbs['amusingly']="amusingly"
nouns['anachronism']=nounInfo("anachronism")
adjectives['anachronistic']=adjInfo("anachronistic")
nouns['anaconda']=nounInfo("anaconda")
nouns['anaemia']=nounInfo("anaemia")
adjectives['anaemic']=adjInfo("anaemic")
nouns['anaesthesia']=nounInfo("anaesthesia")
adjectives['anaesthetic']=adjInfo("anaesthetic")
nouns['anaesthetic']=nounInfo("anaesthetic")
nouns['anaesthetist']=nounInfo("anaesthetist")
nouns['anagram']=nounInfo("anagram")
adjectives['anal']=adjInfo("anal")
nouns['analecta']=nounInfo("analecta")
nouns['analects']=nounInfo("analects")
nouns['analgesia']=nounInfo("analgesia")
nouns['analgesic']=nounInfo("analgesic")
nouns['analog']=nounInfo("analog")
adjectives['analogous']=adjInfo("analogous")
adverbs['analogously']="analogously"
nouns['analogue']=nounInfo("analogue")
nouns['analogy']=nounInfo("analogy")
nouns['analysis']=nounInfo("analysis")
nouns['analyst']=nounInfo("analyst")
adjectives['analytic']=adjInfo("analytic")
adjectives['analytical']=adjInfo("analytical")
adverbs['analytically']="analytically"
nouns['anapaest']=nounInfo("anapaest")
adjectives['anapaestic']=adjInfo("anapaestic")
adjectives['anarchic']=adjInfo("anarchic")
adverbs['anarchically']="anarchically"
nouns['anarchism']=nounInfo("anarchism")
nouns['anarchist']=nounInfo("anarchist")
nouns['anarchy']=nounInfo("anarchy")
nouns['anathema']=nounInfo("anathema")
adjectives['anatomical']=adjInfo("anatomical")
adverbs['anatomically']="anatomically"
nouns['anatomist']=nounInfo("anatomist")
nouns['anatomy']=nounInfo("anatomy")
nouns['ancestor']=nounInfo("ancestor").addAttributes({"g":"x"})
adjectives['ancestral']=adjInfo("ancestral")
nouns['ancestress']=nounInfo("ancestress")
nouns['ancestry']=nounInfo("ancestry")
nouns['anchor']=nounInfo("anchor")
nouns['anchorage']=nounInfo("anchorage")
nouns['anchorite']=nounInfo("anchorite")
nouns['anchorman']=nounInfo("anchorman")
nouns['anchovy']=nounInfo("anchovy")
adjectives['ancient']=adjInfo("ancient")
adjectives['ancillary']=adjInfo("ancillary")
adjectives['andante']=adjInfo("andante")
adverbs['andante']="andante"
nouns['andante']=nounInfo("andante")
nouns['andiron']=nounInfo("andiron")
nouns['anecdote']=nounInfo("anecdote")
nouns['anemometer']=nounInfo("anemometer")
nouns['anemone']=nounInfo("anemone")
prepositions['anent']=P("anent")
adjectives['aneroid']=adjInfo("aneroid")
nouns['aneroid']=nounInfo("aneroid")
adjectives['anesthetic']=adjInfo("anesthetic")
nouns['anesthetic']=nounInfo("anesthetic")
nouns['anesthetist']=nounInfo("anesthetist")
adverbs['anew']="anew"
nouns['angel']=nounInfo("angel")
adjectives['angelic']=adjInfo("angelic")
nouns['angelica']=nounInfo("angelica")
adverbs['angelically']="angelically"
nouns['angelus']=nounInfo("angelus")
nouns['anger']=nounInfo("anger")
nouns['angina']=nounInfo("angina")
nouns['angle']=nounInfo("angle")
nouns['angler']=nounInfo("angler")
nouns['anglicism']=nounInfo("anglicism")
nouns['angling']=nounInfo("angling")
nouns['angora']=nounInfo("angora")
nouns['angostura']=nounInfo("angostura")
adverbs['angrily']="angrily"
adjectives['angry']=adjInfo("angry")
nouns['angst']=nounInfo("angst")
nouns['anguish']=nounInfo("anguish")
adjectives['anguished']=adjInfo("anguished")
adjectives['angular']=adjInfo("angular")
nouns['angularity']=nounInfo("angularity")
nouns['aniline']=nounInfo("aniline")
nouns['animadversion']=nounInfo("animadversion")
nouns['animal']=nounInfo("animal")
nouns['animalcule']=nounInfo("animalcule")
adjectives['animate']=adjInfo("animate")
adverbs['animatedly']="animatedly"
nouns['animation']=nounInfo("animation")
nouns['animism']=nounInfo("animism")
nouns['animosity']=nounInfo("animosity")
nouns['animus']=nounInfo("animus")
nouns['anise']=nounInfo("anise")
nouns['aniseed']=nounInfo("aniseed")
nouns['ankle']=nounInfo("ankle")
nouns['anklet']=nounInfo("anklet")
nouns['anna']=nounInfo("anna")
nouns['annalist']=nounInfo("annalist")
nouns['annals']=nounInfo("annals")
nouns['annex']=nounInfo("annex")
nouns['annexation']=nounInfo("annexation")
nouns['annexe']=nounInfo("annexe")
nouns['annihilation']=nounInfo("annihilation")
nouns['anniversary']=nounInfo("anniversary")
nouns['annotation']=nounInfo("annotation")
nouns['announcement']=nounInfo("announcement")
nouns['announcer']=nounInfo("announcer")
nouns['annoyance']=nounInfo("annoyance")
adjectives['annoying']=adjInfo("annoying")
adjectives['annual']=adjInfo("annual")
nouns['annual']=nounInfo("annual")
adverbs['annually']="annually"
nouns['annuitant']=nounInfo("annuitant")
nouns['annuity']=nounInfo("annuity")
adjectives['annular']=adjInfo("annular")
nouns['annulment']=nounInfo("annulment")
nouns['annunciation']=nounInfo("annunciation")
nouns['anode']=nounInfo("anode")
adjectives['anodyne']=adjInfo("anodyne")
nouns['anodyne']=nounInfo("anodyne")
nouns['anointment']=nounInfo("anointment")
adjectives['anomalous']=adjInfo("anomalous")
adverbs['anomalously']="anomalously"
nouns['anomaly']=nounInfo("anomaly")
adverbs['anon']="anon"
nouns['anonymity']=nounInfo("anonymity")
adjectives['anonymous']=adjInfo("anonymous")
adverbs['anonymously']="anonymously"
nouns['anopheles']=nounInfo("anopheles")
nouns['anorak']=nounInfo("anorak")
nouns['answer']=nounInfo("answer")
adjectives['answerable']=adjInfo("answerable")
nouns['ant']=nounInfo("ant")
nouns['antagonism']=nounInfo("antagonism")
nouns['antagonist']=nounInfo("antagonist")
adjectives['antagonistic']=adjInfo("antagonistic")
adverbs['antagonistically']="antagonistically"
adjectives['antarctic']=adjInfo("antarctic")
nouns['ante']=nounInfo("ante")
nouns['antecedence']=nounInfo("antecedence")
adjectives['antecedent']=adjInfo("antecedent")
nouns['antecedent']=nounInfo("antecedent")
nouns['antechamber']=nounInfo("antechamber")
adjectives['antediluvian']=adjInfo("antediluvian")
nouns['antediluvian']=nounInfo("antediluvian")
nouns['antelope']=nounInfo("antelope")
adjectives['antenatal']=adjInfo("antenatal")
adverbs['antenatally']="antenatally"
nouns['antenna']=nounInfo("antenna")
adjectives['antenuptial']=adjInfo("antenuptial")
adjectives['antepenultimate']=adjInfo("antepenultimate")
adjectives['anterior']=adjInfo("anterior")
adverbs['anteriorly']="anteriorly"
nouns['anteroom']=nounInfo("anteroom")
nouns['anthem']=nounInfo("anthem")
nouns['anther']=nounInfo("anther")
nouns['anthology']=nounInfo("anthology")
nouns['anthracite']=nounInfo("anthracite")
nouns['anthrax']=nounInfo("anthrax")
adjectives['anthropoid']=adjInfo("anthropoid")
nouns['anthropoid']=nounInfo("anthropoid")
adjectives['anthropological']=adjInfo("anthropological")
nouns['anthropologist']=nounInfo("anthropologist")
nouns['anthropology']=nounInfo("anthropology")
adverbs['anthropomorphically']="anthropomorphically"
adjectives['antibiotic']=adjInfo("antibiotic")
nouns['antibiotic']=nounInfo("antibiotic")
nouns['antibody']=nounInfo("antibody")
nouns['antic']=nounInfo("antic")
nouns['anticipation']=nounInfo("anticipation")
adjectives['anticipatory']=adjInfo("anticipatory")
nouns['anticyclone']=nounInfo("anticyclone")
nouns['antidote']=nounInfo("antidote")
nouns['antifreeze']=nounInfo("antifreeze")
nouns['antiknock']=nounInfo("antiknock")
nouns['antilogarithm']=nounInfo("antilogarithm")
nouns['antimacassar']=nounInfo("antimacassar")
nouns['antimony']=nounInfo("antimony")
adjectives['antipathetic']=adjInfo("antipathetic")
nouns['antipathy']=nounInfo("antipathy")
nouns['antipodes']=nounInfo("antipodes")
adjectives['antipollution']=adjInfo("antipollution")
adjectives['antiquarian']=adjInfo("antiquarian")
nouns['antiquarian']=nounInfo("antiquarian")
nouns['antiquary']=nounInfo("antiquary")
adjectives['antiquated']=adjInfo("antiquated")
adjectives['antique']=adjInfo("antique")
nouns['antique']=nounInfo("antique")
nouns['antiquity']=nounInfo("antiquity")
nouns['antirrhinum']=nounInfo("antirrhinum")
adjectives['antiseptic']=adjInfo("antiseptic")
nouns['antiseptic']=nounInfo("antiseptic")
adjectives['antisocial']=adjInfo("antisocial")
adjectives['antitank']=adjInfo("antitank")
nouns['antithesis']=nounInfo("antithesis")
adjectives['antithetic']=adjInfo("antithetic")
adjectives['antithetical']=adjInfo("antithetical")
adverbs['antithetically']="antithetically"
nouns['antitoxin']=nounInfo("antitoxin")
adjectives['antitrade']=adjInfo("antitrade")
nouns['antitrade']=nounInfo("antitrade")
nouns['antler']=nounInfo("antler")
nouns['antonym']=nounInfo("antonym")
nouns['anus']=nounInfo("anus")
nouns['anvil']=nounInfo("anvil")
nouns['anxiety']=nounInfo("anxiety")
adjectives['anxious']=adjInfo("anxious")
adverbs['anxiously']="anxiously"
adverbs['anyhow']="anyhow"
adverbs['anyplace']="anyplace"
adverbs['anyway']="anyway"
adverbs['anywhere']="anywhere"
nouns['aorta']=nounInfo("aorta")
adverbs['apace']="apace"
nouns['apache']=nounInfo("apache")
nouns['apanage']=nounInfo("apanage")
adverbs['apart']="apart"
nouns['apartheid']=nounInfo("apartheid")
nouns['apartment']=nounInfo("apartment")
adjectives['apathetic']=adjInfo("apathetic")
adverbs['apathetically']="apathetically"
nouns['apathy']=nounInfo("apathy")
nouns['ape']=nounInfo("ape")
adjectives['aperient']=adjInfo("aperient")
nouns['aperient']=nounInfo("aperient")
nouns['aperitif']=nounInfo("aperitif")
nouns['aperture']=nounInfo("aperture")
nouns['apex']=nounInfo("apex")
nouns['aphasia']=nounInfo("aphasia")
nouns['aphid']=nounInfo("aphid")
nouns['aphis']=nounInfo("aphis")
nouns['aphorism']=nounInfo("aphorism")
adjectives['aphrodisiac']=adjInfo("aphrodisiac")
nouns['aphrodisiac']=nounInfo("aphrodisiac")
nouns['apiarist']=nounInfo("apiarist")
nouns['apiary']=nounInfo("apiary")
nouns['apiculture']=nounInfo("apiculture")
adverbs['apiece']="apiece"
adjectives['apish']=adjInfo("apish")
nouns['aplomb']=nounInfo("aplomb")
nouns['apocalypse']=nounInfo("apocalypse")
adjectives['apocalyptic']=adjInfo("apocalyptic")
adjectives['apocryphal']=adjInfo("apocryphal")
nouns['apogee']=nounInfo("apogee")
adjectives['apologetic']=adjInfo("apologetic")
adverbs['apologetically']="apologetically"
nouns['apologetics']=nounInfo("apologetics")
nouns['apologist']=nounInfo("apologist")
nouns['apology']=nounInfo("apology")
nouns['apophthegm']=nounInfo("apophthegm")
adjectives['apoplectic']=adjInfo("apoplectic")
nouns['apoplexy']=nounInfo("apoplexy")
nouns['apostasy']=nounInfo("apostasy")
adjectives['apostate']=adjInfo("apostate")
nouns['apostate']=nounInfo("apostate")
nouns['apostle']=nounInfo("apostle")
adjectives['apostolic']=adjInfo("apostolic")
nouns['apostrophe']=nounInfo("apostrophe")
nouns['apothecary']=nounInfo("apothecary")
nouns['apothegm']=nounInfo("apothegm")
nouns['apotheosis']=nounInfo("apotheosis")
adjectives['appalling']=adjInfo("appalling")
adverbs['appallingly']="appallingly"
nouns['appanage']=nounInfo("appanage")
nouns['apparatus']=nounInfo("apparatus")
nouns['apparel']=nounInfo("apparel")
adjectives['apparent']=adjInfo("apparent")
adverbs['apparently']="apparently"
nouns['apparition']=nounInfo("apparition")
nouns['appeal']=nounInfo("appeal")
adjectives['appealing']=adjInfo("appealing")
adverbs['appealingly']="appealingly"
nouns['appearance']=nounInfo("appearance")
nouns['appeasement']=nounInfo("appeasement")
adjectives['appellant']=adjInfo("appellant")
nouns['appellant']=nounInfo("appellant")
nouns['appellation']=nounInfo("appellation")
nouns['appendage']=nounInfo("appendage")
nouns['appendectomy']=nounInfo("appendectomy")
nouns['appendicitis']=nounInfo("appendicitis")
nouns['appendix']=nounInfo("appendix")
nouns['appetite']=nounInfo("appetite")
nouns['appetizer']=nounInfo("appetizer")
adjectives['appetizing']=adjInfo("appetizing")
adverbs['appetizingly']="appetizingly"
nouns['applause']=nounInfo("applause")
nouns['apple']=nounInfo("apple")
nouns['applejack']=nounInfo("applejack")
nouns['appliance']=nounInfo("appliance")
adjectives['applicable']=adjInfo("applicable")
nouns['applicant']=nounInfo("applicant")
nouns['application']=nounInfo("application")
adjectives['applied']=adjInfo("applied")
nouns['appointee']=nounInfo("appointee")
nouns['appointment']=nounInfo("appointment")
adjectives['apposite']=adjInfo("apposite")
adverbs['appositely']="appositely"
nouns['apposition']=nounInfo("apposition")
nouns['appraisal']=nounInfo("appraisal")
adjectives['appreciable']=adjInfo("appreciable")
adverbs['appreciably']="appreciably"
nouns['appreciation']=nounInfo("appreciation")
adjectives['appreciative']=adjInfo("appreciative")
adverbs['appreciatively']="appreciatively"
adjectives['apprehensible']=adjInfo("apprehensible")
nouns['apprehension']=nounInfo("apprehension")
adjectives['apprehensive']=adjInfo("apprehensive")
nouns['apprentice']=nounInfo("apprentice")
nouns['apprenticeship']=nounInfo("apprenticeship")
nouns['appro']=nounInfo("appro")
nouns['approach']=nounInfo("approach")
adjectives['approachable']=adjInfo("approachable")
nouns['approbation']=nounInfo("approbation")
adjectives['appropriate']=adjInfo("appropriate")
adverbs['appropriately']="appropriately"
nouns['appropriateness']=nounInfo("appropriateness")
nouns['appropriation']=nounInfo("appropriation")
nouns['approval']=nounInfo("approval")
adverbs['approvingly']="approvingly"
adjectives['approximate']=adjInfo("approximate")
adverbs['approximately']="approximately"
nouns['approximation']=nounInfo("approximation")
nouns['appurtenance']=nounInfo("appurtenance")
nouns['apricot']=nounInfo("apricot")
nouns['apron']=nounInfo("apron")
adjectives['apropos']=adjInfo("apropos")
adverbs['apropos']="apropos"
nouns['apse']=nounInfo("apse")
adjectives['apt']=adjInfo("apt")
nouns['aptitude']=nounInfo("aptitude")
adverbs['aptly']="aptly"
nouns['aptness']=nounInfo("aptness")
nouns['aqualung']=nounInfo("aqualung")
nouns['aquamarine']=nounInfo("aquamarine")
nouns['aquanaut']=nounInfo("aquanaut")
nouns['aquaplane']=nounInfo("aquaplane")
nouns['aquarium']=nounInfo("aquarium")
adjectives['aquatic']=adjInfo("aquatic")
nouns['aquatint']=nounInfo("aquatint")
nouns['aquavit']=nounInfo("aquavit")
nouns['aqueduct']=nounInfo("aqueduct")
adjectives['aqueous']=adjInfo("aqueous")
adjectives['aquiline']=adjInfo("aquiline")
nouns['arabesque']=nounInfo("arabesque")
adjectives['arable']=adjInfo("arable")
nouns['arachnid']=nounInfo("arachnid")
nouns['arbiter']=nounInfo("arbiter")
nouns['arbitrament']=nounInfo("arbitrament")
adverbs['arbitrarily']="arbitrarily"
adjectives['arbitrary']=adjInfo("arbitrary")
nouns['arbitration']=nounInfo("arbitration")
nouns['arbitrator']=nounInfo("arbitrator")
adjectives['arboreal']=adjInfo("arboreal")
nouns['arbour']=nounInfo("arbour")
nouns['arc']=nounInfo("arc")
nouns['arcade']=nounInfo("arcade")
adjectives['arcane']=adjInfo("arcane")
adjectives['arch']=adjInfo("arch")
nouns['arch']=nounInfo("arch")
adjectives['archaeological']=adjInfo("archaeological")
nouns['archaeologist']=nounInfo("archaeologist")
nouns['archaeology']=nounInfo("archaeology")
adjectives['archaic']=adjInfo("archaic")
nouns['archaism']=nounInfo("archaism")
nouns['archangel']=nounInfo("archangel")
nouns['archbishop']=nounInfo("archbishop")
nouns['archbishopric']=nounInfo("archbishopric")
nouns['archdeacon']=nounInfo("archdeacon")
nouns['archdeaconry']=nounInfo("archdeaconry")
nouns['archdiocese']=nounInfo("archdiocese")
nouns['archduke']=nounInfo("archduke")
nouns['archeology']=nounInfo("archeology")
nouns['archer']=nounInfo("archer")
nouns['archery']=nounInfo("archery")
adjectives['archetypal']=adjInfo("archetypal")
nouns['archetype']=nounInfo("archetype")
nouns['archimandrite']=nounInfo("archimandrite")
nouns['archipelago']=nounInfo("archipelago")
nouns['architect']=nounInfo("architect")
adjectives['architectural']=adjInfo("architectural")
adverbs['architecturally']="architecturally"
nouns['architecture']=nounInfo("architecture")
nouns['archive']=nounInfo("archive")
nouns['archivist']=nounInfo("archivist")
adverbs['archly']="archly"
nouns['archway']=nounInfo("archway")
adjectives['arctic']=adjInfo("arctic")
adjectives['ardent']=adjInfo("ardent")
adverbs['ardently']="ardently"
nouns['ardour']=nounInfo("ardour")
adjectives['arduous']=adjInfo("arduous")
adverbs['arduously']="arduously"
nouns['are']=nounInfo("are")
nouns['area']=nounInfo("area")
nouns['areca']=nounInfo("areca")
nouns['arena']=nounInfo("arena")
adjectives['argent']=adjInfo("argent")
nouns['argent']=nounInfo("argent")
nouns['argon']=nounInfo("argon")
nouns['argosy']=nounInfo("argosy")
nouns['argot']=nounInfo("argot")
adjectives['arguable']=adjInfo("arguable")
adverbs['arguably']="arguably"
nouns['argument']=nounInfo("argument")
nouns['argumentation']=nounInfo("argumentation")
adjectives['argumentative']=adjInfo("argumentative")
nouns['aria']=nounInfo("aria")
adjectives['arid']=adjInfo("arid")
nouns['aridity']=nounInfo("aridity")
adverbs['aright']="aright"
nouns['aristocracy']=nounInfo("aristocracy")
nouns['aristocrat']=nounInfo("aristocrat")
adjectives['aristocratic']=adjInfo("aristocratic")
adverbs['aristocratically']="aristocratically"
nouns['arithmetic']=nounInfo("arithmetic")
adjectives['arithmetical']=adjInfo("arithmetical")
adverbs['arithmetically']="arithmetically"
nouns['arithmetician']=nounInfo("arithmetician")
nouns['ark']=nounInfo("ark")
nouns['arm']=nounInfo("arm")
nouns['armada']=nounInfo("armada")
nouns['armadillo']=nounInfo("armadillo")
nouns['armament']=nounInfo("armament")
nouns['armature']=nounInfo("armature")
nouns['armchair']=nounInfo("armchair")
nouns['armful']=nounInfo("armful")
nouns['armistice']=nounInfo("armistice")
nouns['armlet']=nounInfo("armlet")
nouns['armoire']=nounInfo("armoire")
adjectives['armorial']=adjInfo("armorial")
nouns['armour']=nounInfo("armour")
adjectives['armoured']=adjInfo("armoured")
nouns['armourer']=nounInfo("armourer")
nouns['armoury']=nounInfo("armoury")
nouns['armpit']=nounInfo("armpit")
nouns['arms']=nounInfo("arms")
nouns['army']=nounInfo("army")
nouns['arnica']=nounInfo("arnica")
nouns['aroma']=nounInfo("aroma")
adjectives['aromatic']=adjInfo("aromatic")
adverbs['around']="around"
prepositions['around']=P("around")
nouns['arpeggio']=nounInfo("arpeggio")
nouns['arquebus']=nounInfo("arquebus")
nouns['arrack']=nounInfo("arrack")
nouns['arraignment']=nounInfo("arraignment")
nouns['arrangement']=nounInfo("arrangement")
adjectives['arrant']=adjInfo("arrant")
nouns['arras']=nounInfo("arras")
nouns['array']=nounInfo("array")
nouns['arrear']=nounInfo("arrear")
nouns['arrest']=nounInfo("arrest")
nouns['arrester']=nounInfo("arrester")
adjectives['arresting']=adjInfo("arresting")
nouns['arrival']=nounInfo("arrival")
nouns['arrogance']=nounInfo("arrogance")
adjectives['arrogant']=adjInfo("arrogant")
adverbs['arrogantly']="arrogantly"
nouns['arrow']=nounInfo("arrow")
nouns['arrowhead']=nounInfo("arrowhead")
nouns['arrowroot']=nounInfo("arrowroot")
nouns['arse']=nounInfo("arse")
nouns['arsehole']=nounInfo("arsehole")
nouns['arsenal']=nounInfo("arsenal")
nouns['arsenic']=nounInfo("arsenic")
nouns['arson']=nounInfo("arson")
nouns['art']=nounInfo("art")
nouns['artefact']=nounInfo("artefact")
adjectives['arterial']=adjInfo("arterial")
nouns['arteriosclerosis']=nounInfo("arteriosclerosis")
nouns['artery']=nounInfo("artery")
adjectives['artesian']=adjInfo("artesian")
adjectives['artful']=adjInfo("artful")
adverbs['artfully']="artfully"
nouns['artfulness']=nounInfo("artfulness")
adjectives['arthritic']=adjInfo("arthritic")
nouns['arthritis']=nounInfo("arthritis")
nouns['artichoke']=nounInfo("artichoke")
nouns['article']=nounInfo("article")
adjectives['articulate']=adjInfo("articulate")
adverbs['articulately']="articulately"
nouns['articulation']=nounInfo("articulation")
nouns['artifact']=nounInfo("artifact")
nouns['artifice']=nounInfo("artifice")
nouns['artificer']=nounInfo("artificer")
adjectives['artificial']=adjInfo("artificial")
adverbs['artificially']="artificially"
nouns['artillery']=nounInfo("artillery")
nouns['artisan']=nounInfo("artisan").addAttributes({"g":"x"})
nouns['artist']=nounInfo("artist").addAttributes({"g":"x"})
nouns['artiste']=nounInfo("artiste").addAttributes({"g":"x"})
adjectives['artistic']=adjInfo("artistic")
adverbs['artistically']="artistically"
nouns['artistry']=nounInfo("artistry")
adjectives['artless']=adjInfo("artless")
adverbs['artlessly']="artlessly"
nouns['artlessness']=nounInfo("artlessness")
adjectives['arty']=adjInfo("arty")
nouns['arum']=nounInfo("arum")
adverbs['as']="as"
prepositions['as']=P("as")
nouns['asbestos']=nounInfo("asbestos")
nouns['ascendancy']=nounInfo("ascendancy")
nouns['ascendant']=nounInfo("ascendant")
nouns['ascendency']=nounInfo("ascendency")
nouns['ascendent']=nounInfo("ascendent")
nouns['ascension']=nounInfo("ascension")
nouns['ascent']=nounInfo("ascent")
adjectives['ascertainable']=adjInfo("ascertainable")
adjectives['ascetic']=adjInfo("ascetic")
nouns['ascetic']=nounInfo("ascetic")
adverbs['ascetically']="ascetically"
nouns['asceticism']=nounInfo("asceticism")
adjectives['ascorbic']=adjInfo("ascorbic")
adjectives['ascribable']=adjInfo("ascribable")
nouns['ascription']=nounInfo("ascription")
nouns['asdic']=nounInfo("asdic")
nouns['asepsis']=nounInfo("asepsis")
adjectives['aseptic']=adjInfo("aseptic")
adjectives['asexual']=adjInfo("asexual")
nouns['asexuality']=nounInfo("asexuality")
nouns['ash']=nounInfo("ash")
adjectives['ashamed']=adjInfo("ashamed")
adverbs['ashamedly']="ashamedly"
adjectives['ashen']=adjInfo("ashen")
nouns['ashes']=nounInfo("ashes")
adverbs['ashore']="ashore"
adjectives['ashy']=adjInfo("ashy")
adverbs['aside']="aside"
nouns['aside']=nounInfo("aside")
adjectives['asinine']=adjInfo("asinine")
adverbs['askance']="askance"
adjectives['askew']=adjInfo("askew")
adverbs['askew']="askew"
adverbs['aslant']="aslant"
prepositions['aslant']=P("aslant")
adjectives['asleep']=adjInfo("asleep")
adverbs['asleep']="asleep"
nouns['asp']=nounInfo("asp")
nouns['asparagus']=nounInfo("asparagus")
nouns['aspect']=nounInfo("aspect")
adjectives['aspectual']=adjInfo("aspectual")
nouns['aspen']=nounInfo("aspen")
nouns['asperity']=nounInfo("asperity")
nouns['aspersion']=nounInfo("aspersion")
nouns['asphalt']=nounInfo("asphalt")
nouns['asphodel']=nounInfo("asphodel")
nouns['asphyxia']=nounInfo("asphyxia")
nouns['asphyxiation']=nounInfo("asphyxiation")
nouns['aspic']=nounInfo("aspic")
nouns['aspidistra']=nounInfo("aspidistra")
nouns['aspirant']=nounInfo("aspirant")
nouns['aspirate']=nounInfo("aspirate")
nouns['aspiration']=nounInfo("aspiration")
nouns['aspirin']=nounInfo("aspirin")
nouns['ass']=nounInfo("ass")
nouns['assagai']=nounInfo("assagai")
adjectives['assailable']=adjInfo("assailable")
nouns['assailant']=nounInfo("assailant")
nouns['assassin']=nounInfo("assassin")
nouns['assassination']=nounInfo("assassination")
nouns['assault']=nounInfo("assault")
nouns['assay']=nounInfo("assay")
nouns['assegai']=nounInfo("assegai")
nouns['assemblage']=nounInfo("assemblage")
nouns['assembly']=nounInfo("assembly")
nouns['assent']=nounInfo("assent")
nouns['assertion']=nounInfo("assertion")
adjectives['assertive']=adjInfo("assertive")
adverbs['assertively']="assertively"
nouns['assessment']=nounInfo("assessment")
nouns['assessor']=nounInfo("assessor")
nouns['asset']=nounInfo("asset")
nouns['asseveration']=nounInfo("asseveration")
nouns['asshole']=nounInfo("asshole")
nouns['assiduity']=nounInfo("assiduity")
adjectives['assiduous']=adjInfo("assiduous")
adverbs['assiduously']="assiduously"
adjectives['assignable']=adjInfo("assignable")
nouns['assignation']=nounInfo("assignation")
nouns['assignment']=nounInfo("assignment")
nouns['assimilation']=nounInfo("assimilation")
nouns['assistance']=nounInfo("assistance")
nouns['assistant']=nounInfo("assistant").addAttributes({"g":"x"})
nouns['assize']=nounInfo("assize")
adjectives['associate']=adjInfo("associate")
nouns['associate']=nounInfo("associate")
nouns['association']=nounInfo("association")
nouns['assonance']=nounInfo("assonance")
adjectives['assorted']=adjInfo("assorted")
nouns['assortment']=nounInfo("assortment")
nouns['assumption']=nounInfo("assumption")
nouns['assurance']=nounInfo("assurance")
adjectives['assured']=adjInfo("assured")
adverbs['assuredly']="assuredly"
nouns['aster']=nounInfo("aster")
nouns['asterisk']=nounInfo("asterisk")
adverbs['astern']="astern"
nouns['asteroid']=nounInfo("asteroid")
nouns['asthma']=nounInfo("asthma")
adjectives['asthmatic']=adjInfo("asthmatic")
adjectives['astigmatic']=adjInfo("astigmatic")
nouns['astigmatism']=nounInfo("astigmatism")
adjectives['astir']=adjInfo("astir")
adverbs['astir']="astir"
adjectives['astonishing']=adjInfo("astonishing")
adverbs['astonishingly']="astonishingly"
nouns['astonishment']=nounInfo("astonishment")
nouns['astrakhan']=nounInfo("astrakhan")
adjectives['astral']=adjInfo("astral")
adjectives['astray']=adjInfo("astray")
adverbs['astray']="astray"
adjectives['astride']=adjInfo("astride")
adverbs['astride']="astride"
prepositions['astride']=P("astride")
nouns['astringency']=nounInfo("astringency")
adjectives['astringent']=adjInfo("astringent")
nouns['astringent']=nounInfo("astringent")
nouns['astrodome']=nounInfo("astrodome")
nouns['astrolabe']=nounInfo("astrolabe")
nouns['astrologer']=nounInfo("astrologer")
adjectives['astrological']=adjInfo("astrological")
nouns['astrology']=nounInfo("astrology")
nouns['astronaut']=nounInfo("astronaut")
nouns['astronautics']=nounInfo("astronautics")
nouns['astronomer']=nounInfo("astronomer")
adjectives['astronomical']=adjInfo("astronomical")
adverbs['astronomically']="astronomically"
nouns['astronomy']=nounInfo("astronomy")
nouns['astrophysics']=nounInfo("astrophysics")
adjectives['astute']=adjInfo("astute")
adverbs['astutely']="astutely"
nouns['astuteness']=nounInfo("astuteness")
adverbs['asunder']="asunder"
nouns['asylum']=nounInfo("asylum")
prepositions['at']=P("at")
nouns['atabrine']=nounInfo("atabrine")
nouns['atavism']=nounInfo("atavism")
adjectives['atavistic']=adjInfo("atavistic")
nouns['atelier']=nounInfo("atelier")
nouns['atheism']=nounInfo("atheism")
nouns['atheist']=nounInfo("atheist")
adjectives['atheistic']=adjInfo("atheistic")
adjectives['athirst']=adjInfo("athirst")
nouns['athlete']=nounInfo("athlete").addAttributes({"g":"x"})
adjectives['athletic']=adjInfo("athletic")
nouns['athletics']=nounInfo("athletics")
adverbs['athwart']="athwart"
prepositions['athwart']=P("athwart")
nouns['atishoo']=nounInfo("atishoo")
nouns['atlas']=nounInfo("atlas")
nouns['atmosphere']=nounInfo("atmosphere")
adjectives['atmospheric']=adjInfo("atmospheric")
nouns['atmospherics']=nounInfo("atmospherics")
nouns['atoll']=nounInfo("atoll")
nouns['atom']=nounInfo("atom")
adjectives['atomic']=adjInfo("atomic")
nouns['atomizer']=nounInfo("atomizer")
adjectives['atonal']=adjInfo("atonal")
nouns['atonality']=nounInfo("atonality")
nouns['atonement']=nounInfo("atonement")
adverbs['atop']="atop"
adjectives['atrabilious']=adjInfo("atrabilious")
adjectives['atrocious']=adjInfo("atrocious")
adverbs['atrociously']="atrociously"
nouns['atrocity']=nounInfo("atrocity")
nouns['atrophy']=nounInfo("atrophy")
nouns['attaboy']=nounInfo("attaboy")
nouns['attachment']=nounInfo("attachment")
nouns['attack']=nounInfo("attack")
nouns['attacker']=nounInfo("attacker")
adjectives['attainable']=adjInfo("attainable")
nouns['attainder']=nounInfo("attainder")
nouns['attainment']=nounInfo("attainment")
nouns['attar']=nounInfo("attar")
nouns['attempt']=nounInfo("attempt")
nouns['attendance']=nounInfo("attendance")
adjectives['attendant']=adjInfo("attendant")
nouns['attendant']=nounInfo("attendant")
nouns['attention']=nounInfo("attention")
adjectives['attentive']=adjInfo("attentive")
adverbs['attentively']="attentively"
nouns['attic']=nounInfo("attic")
nouns['attire']=nounInfo("attire")
nouns['attitude']=nounInfo("attitude")
nouns['attorney']=nounInfo("attorney")
nouns['attraction']=nounInfo("attraction")
adjectives['attractive']=adjInfo("attractive")
adverbs['attractively']="attractively"
adjectives['attributable']=adjInfo("attributable")
nouns['attribute']=nounInfo("attribute")
nouns['attribution']=nounInfo("attribution")
adjectives['attributive']=adjInfo("attributive")
adverbs['attributively']="attributively"
nouns['attrition']=nounInfo("attrition")
nouns['aubergine']=nounInfo("aubergine")
nouns['aubrietia']=nounInfo("aubrietia")
adjectives['auburn']=adjInfo("auburn")
nouns['auction']=nounInfo("auction")
nouns['auctioneer']=nounInfo("auctioneer")
adjectives['audacious']=adjInfo("audacious")
adverbs['audaciously']="audaciously"
nouns['audacity']=nounInfo("audacity")
nouns['audibility']=nounInfo("audibility")
adjectives['audible']=adjInfo("audible")
adverbs['audibly']="audibly"
nouns['audience']=nounInfo("audience")
nouns['audit']=nounInfo("audit")
nouns['audition']=nounInfo("audition")
nouns['auditor']=nounInfo("auditor")
nouns['auditorium']=nounInfo("auditorium")
adjectives['auditory']=adjInfo("auditory")
nouns['auger']=nounInfo("auger")
nouns['aught']=nounInfo("aught")
nouns['augmentation']=nounInfo("augmentation")
nouns['augur']=nounInfo("augur")
nouns['augury']=nounInfo("augury")
adjectives['august']=adjInfo("august")
nouns['auk']=nounInfo("auk")
nouns['aunt']=nounInfo("aunt").addAttributes({"g":"f"})
nouns['auntie']=nounInfo("auntie")
nouns['aunty']=nounInfo("aunty")
nouns['aura']=nounInfo("aura")
adjectives['aural']=adjInfo("aural")
nouns['aureole']=nounInfo("aureole")
nouns['auricle']=nounInfo("auricle")
adjectives['auricular']=adjInfo("auricular")
adjectives['auriferous']=adjInfo("auriferous")
nouns['aurora']=nounInfo("aurora")
nouns['auspice']=nounInfo("auspice")
adjectives['auspicious']=adjInfo("auspicious")
adverbs['auspiciously']="auspiciously"
adjectives['austere']=adjInfo("austere")
adverbs['austerely']="austerely"
nouns['austerity']=nounInfo("austerity")
nouns['austostrade']=nounInfo("austostrade")
nouns['autarchy']=nounInfo("autarchy")
nouns['autarky']=nounInfo("autarky")
adjectives['authentic']=adjInfo("authentic")
adverbs['authentically']="authentically"
nouns['authentication']=nounInfo("authentication")
nouns['authenticity']=nounInfo("authenticity")
nouns['author']=nounInfo("author").addAttributes({"g":"x"})
nouns['authoress']=nounInfo("authoress").addAttributes({"g":"f"})
adjectives['authoritarian']=adjInfo("authoritarian")
nouns['authoritarian']=nounInfo("authoritarian")
nouns['authoritarianism']=nounInfo("authoritarianism")
adjectives['authoritative']=adjInfo("authoritative")
adverbs['authoritatively']="authoritatively"
nouns['authority']=nounInfo("authority")
nouns['authorization']=nounInfo("authorization")
nouns['authorship']=nounInfo("authorship")
nouns['autism']=nounInfo("autism")
adjectives['autistic']=adjInfo("autistic")
nouns['auto']=nounInfo("auto")
nouns['autobahn']=nounInfo("autobahn")
nouns['autobahnen']=nounInfo("autobahnen")
adjectives['autobiographic']=adjInfo("autobiographic")
adjectives['autobiographical']=adjInfo("autobiographical")
nouns['autobiography']=nounInfo("autobiography")
nouns['autocracy']=nounInfo("autocracy")
nouns['autocrat']=nounInfo("autocrat")
adjectives['autocratic']=adjInfo("autocratic")
adverbs['autocratically']="autocratically"
nouns['autogiro']=nounInfo("autogiro")
nouns['autograph']=nounInfo("autograph")
nouns['autogyro']=nounInfo("autogyro")
nouns['automat']=nounInfo("automat")
adjectives['automatic']=adjInfo("automatic")
nouns['automatic']=nounInfo("automatic")
adverbs['automatically']="automatically"
nouns['automation']=nounInfo("automation")
nouns['automaton']=nounInfo("automaton")
nouns['automobile']=nounInfo("automobile")
adjectives['autonomous']=adjInfo("autonomous")
adverbs['autonomously']="autonomously"
nouns['autonomy']=nounInfo("autonomy")
nouns['autopsy']=nounInfo("autopsy")
nouns['autostrada']=nounInfo("autostrada")
nouns['autumn']=nounInfo("autumn")
adjectives['autumnal']=adjInfo("autumnal")
adjectives['auxiliary']=adjInfo("auxiliary")
nouns['auxiliary']=nounInfo("auxiliary")
nouns['avail']=nounInfo("avail")
nouns['availability']=nounInfo("availability")
adjectives['available']=adjInfo("available")
nouns['avalanche']=nounInfo("avalanche")
nouns['avarice']=nounInfo("avarice")
adjectives['avaricious']=adjInfo("avaricious")
adverbs['avariciously']="avariciously"
nouns['avast']=nounInfo("avast")
nouns['avatar']=nounInfo("avatar")
nouns['avaunt']=nounInfo("avaunt")
nouns['avenger']=nounInfo("avenger")
nouns['avenue']=nounInfo("avenue")
adjectives['average']=adjInfo("average")
nouns['average']=nounInfo("average")
adjectives['averse']=adjInfo("averse")
nouns['aversion']=nounInfo("aversion")
nouns['aviary']=nounInfo("aviary")
nouns['aviation']=nounInfo("aviation")
nouns['aviator']=nounInfo("aviator")
adjectives['avid']=adjInfo("avid")
nouns['avidity']=nounInfo("avidity")
adverbs['avidly']="avidly"
nouns['avocado']=nounInfo("avocado")
nouns['avocation']=nounInfo("avocation")
adjectives['avoidable']=adjInfo("avoidable")
nouns['avoidance']=nounInfo("avoidance")
nouns['avoirdupois']=nounInfo("avoirdupois")
nouns['avowal']=nounInfo("avowal")
adverbs['avowedly']="avowedly"
adjectives['avuncular']=adjInfo("avuncular")
adjectives['awake']=adjInfo("awake")
nouns['awakening']=nounInfo("awakening")
nouns['award']=nounInfo("award")
adjectives['aware']=adjInfo("aware")
nouns['awareness']=nounInfo("awareness")
adjectives['awash']=adjInfo("awash")
adverbs['away']="away"
prepositions['away']=P("away")
nouns['awe']=nounInfo("awe")
adverbs['aweigh']="aweigh"
adjectives['awesome']=adjInfo("awesome")
adjectives['awful']=adjInfo("awful")
adverbs['awfully']="awfully"
adverbs['awhile']="awhile"
adjectives['awkward']=adjInfo("awkward")
adverbs['awkwardly']="awkwardly"
nouns['awkwardness']=nounInfo("awkwardness")
nouns['awl']=nounInfo("awl")
nouns['awning']=nounInfo("awning")
adjectives['awry']=adjInfo("awry")
adverbs['awry']="awry"
nouns['ax']=nounInfo("ax")
nouns['axe']=nounInfo("axe")
nouns['axiom']=nounInfo("axiom")
adjectives['axiomatic']=adjInfo("axiomatic")
adverbs['axiomatically']="axiomatically"
nouns['axis']=nounInfo("axis")
nouns['axle']=nounInfo("axle")
adverbs['ay']="ay"
nouns['ay']=nounInfo("ay")
nouns['ayah']=nounInfo("ayah")
adverbs['aye']="aye"
nouns['aye']=nounInfo("aye")
nouns['azalea']=nounInfo("azalea")
nouns['azimuth']=nounInfo("azimuth")
adjectives['azure']=adjInfo("azure")
nouns['azure']=nounInfo("azure")
nouns['baa']=nounInfo("baa")
nouns['baas']=nounInfo("baas")
nouns['babble']=nounInfo("babble")
nouns['babbler']=nounInfo("babbler")
nouns['babe']=nounInfo("babe")
nouns['babel']=nounInfo("babel")
nouns['baboo']=nounInfo("baboo")
nouns['baboon']=nounInfo("baboon")
nouns['babu']=nounInfo("babu")
nouns['baby']=nounInfo("baby").addAttributes({"g":"x"})
nouns['babyhood']=nounInfo("babyhood")
adjectives['babyish']=adjInfo("babyish")
nouns['babysitter']=nounInfo("babysitter")
nouns['baccalaureate']=nounInfo("baccalaureate")
nouns['baccarat']=nounInfo("baccarat")
adjectives['bacchanal']=adjInfo("bacchanal")
nouns['bacchanal']=nounInfo("bacchanal")
adjectives['bacchanalian']=adjInfo("bacchanalian")
nouns['baccy']=nounInfo("baccy")
nouns['bachelor']=nounInfo("bachelor").addAttributes({"g":"m"})
nouns['bacillus']=nounInfo("bacillus")
adverbs['back']="back"
nouns['back']=nounInfo("back")
prepositions['back']=P("back")
nouns['backache']=nounInfo("backache")
nouns['backband']=nounInfo("backband")
nouns['backbiter']=nounInfo("backbiter")
nouns['backblock']=nounInfo("backblock")
nouns['backboard']=nounInfo("backboard")
nouns['backbone']=nounInfo("backbone")
nouns['backchat']=nounInfo("backchat")
nouns['backcloth']=nounInfo("backcloth")
nouns['backdoor']=nounInfo("backdoor")
nouns['backdrop']=nounInfo("backdrop")
nouns['backer']=nounInfo("backer")
nouns['backfire']=nounInfo("backfire")
nouns['backgammon']=nounInfo("backgammon")
nouns['background']=nounInfo("background")
adjectives['backhand']=adjInfo("backhand")
adjectives['backhanded']=adjInfo("backhanded")
nouns['backing']=nounInfo("backing")
nouns['backlash']=nounInfo("backlash")
adjectives['backless']=adjInfo("backless")
nouns['backlog']=nounInfo("backlog")
adjectives['backmost']=adjInfo("backmost")
nouns['backroom']=nounInfo("backroom")
nouns['backscratcher']=nounInfo("backscratcher")
nouns['backseat']=nounInfo("backseat")
nouns['backsheesh']=nounInfo("backsheesh")
nouns['backside']=nounInfo("backside")
adverbs['backstage']="backstage"
adjectives['backstair']=adjInfo("backstair")
nouns['backstairs']=nounInfo("backstairs")
nouns['backstay']=nounInfo("backstay")
nouns['backsword']=nounInfo("backsword")
nouns['backtalk']=nounInfo("backtalk")
adjectives['backward']=adjInfo("backward")
adverbs['backward']="backward"
adjectives['backwards']=adjInfo("backwards")
adverbs['backwards']="backwards"
nouns['backwash']=nounInfo("backwash")
nouns['backwater']=nounInfo("backwater")
nouns['backwoods']=nounInfo("backwoods")
nouns['backwoodsman']=nounInfo("backwoodsman")
nouns['bacon']=nounInfo("bacon")
adjectives['bacterial']=adjInfo("bacterial")
nouns['bacteriologist']=nounInfo("bacteriologist")
nouns['bacteriology']=nounInfo("bacteriology")
nouns['bacterium']=nounInfo("bacterium")
adjectives['bad']=adjInfo("bad")
nouns['bad']=nounInfo("bad")
nouns['badge']=nounInfo("badge")
nouns['badger']=nounInfo("badger")
nouns['badinage']=nounInfo("badinage")
adverbs['badly']="badly"
nouns['badminton']=nounInfo("badminton")
nouns['badness']=nounInfo("badness")
nouns['baffle']=nounInfo("baffle")
nouns['bag']=nounInfo("bag")
nouns['bagatelle']=nounInfo("bagatelle")
nouns['baggage']=nounInfo("baggage")
adjectives['baggy']=adjInfo("baggy")
nouns['bagnio']=nounInfo("bagnio")
nouns['bagpipe']=nounInfo("bagpipe")
nouns['bah']=nounInfo("bah")
nouns['bail']=nounInfo("bail")
nouns['bailee']=nounInfo("bailee")
nouns['bailey']=nounInfo("bailey")
nouns['bailiff']=nounInfo("bailiff")
nouns['bailment']=nounInfo("bailment")
nouns['bailor']=nounInfo("bailor")
nouns['bairn']=nounInfo("bairn")
nouns['bait']=nounInfo("bait")
nouns['baize']=nounInfo("baize")
nouns['bakelite']=nounInfo("bakelite")
nouns['baker']=nounInfo("baker")
nouns['bakery']=nounInfo("bakery")
nouns['baksheesh']=nounInfo("baksheesh")
nouns['balalaika']=nounInfo("balalaika")
nouns['balance']=nounInfo("balance")
adjectives['balconied']=adjInfo("balconied")
nouns['balcony']=nounInfo("balcony")
adjectives['bald']=adjInfo("bald")
nouns['balderdash']=nounInfo("balderdash")
adverbs['baldly']="baldly"
nouns['baldness']=nounInfo("baldness")
nouns['baldric']=nounInfo("baldric")
nouns['bale']=nounInfo("bale")
adjectives['baleful']=adjInfo("baleful")
adverbs['balefully']="balefully"
nouns['balk']=nounInfo("balk")
nouns['ball']=nounInfo("ball")
nouns['ballad']=nounInfo("ballad")
nouns['ballade']=nounInfo("ballade")
nouns['ballast']=nounInfo("ballast")
nouns['ballerina']=nounInfo("ballerina")
nouns['ballet']=nounInfo("ballet")
adjectives['ballistic']=adjInfo("ballistic")
nouns['ballistics']=nounInfo("ballistics")
nouns['ballock']=nounInfo("ballock")
nouns['balloon']=nounInfo("balloon")
nouns['balloonist']=nounInfo("balloonist")
nouns['ballot']=nounInfo("ballot")
nouns['ballroom']=nounInfo("ballroom")
nouns['balls']=nounInfo("balls")
adjectives['bally']=adjInfo("bally")
adverbs['bally']="bally"
nouns['ballyhoo']=nounInfo("ballyhoo")
nouns['balm']=nounInfo("balm")
adjectives['balmy']=adjInfo("balmy")
nouns['baloney']=nounInfo("baloney")
nouns['balsa']=nounInfo("balsa")
nouns['balsam']=nounInfo("balsam")
nouns['baluster']=nounInfo("baluster")
nouns['balustrade']=nounInfo("balustrade")
nouns['bambino']=nounInfo("bambino")
nouns['bamboo']=nounInfo("bamboo")
nouns['ban']=nounInfo("ban")
adjectives['banal']=adjInfo("banal")
nouns['banality']=nounInfo("banality")
nouns['banana']=nounInfo("banana")
nouns['band']=nounInfo("band")
nouns['bandage']=nounInfo("bandage")
nouns['bandanna']=nounInfo("bandanna")
nouns['bandbox']=nounInfo("bandbox")
nouns['bandeau']=nounInfo("bandeau")
nouns['bandit']=nounInfo("bandit")
nouns['banditry']=nounInfo("banditry")
nouns['bandmaster']=nounInfo("bandmaster")
nouns['bandoleer']=nounInfo("bandoleer")
nouns['bandolier']=nounInfo("bandolier")
nouns['bandsman']=nounInfo("bandsman")
nouns['bandstand']=nounInfo("bandstand")
nouns['bandwagon']=nounInfo("bandwagon")
adjectives['bandy']=adjInfo("bandy")
nouns['bane']=nounInfo("bane")
adjectives['baneful']=adjInfo("baneful")
adverbs['banefully']="banefully"
adverbs['bang']="bang"
nouns['bang']=nounInfo("bang")
nouns['banger']=nounInfo("banger")
nouns['bangle']=nounInfo("bangle")
nouns['banian']=nounInfo("banian")
nouns['banishment']=nounInfo("banishment")
nouns['banister']=nounInfo("banister")
nouns['banjo']=nounInfo("banjo")
nouns['bank']=nounInfo("bank")
nouns['banker']=nounInfo("banker")
nouns['banking']=nounInfo("banking")
nouns['banknote']=nounInfo("banknote")
nouns['bankroll']=nounInfo("bankroll")
adjectives['bankrupt']=adjInfo("bankrupt")
nouns['bankrupt']=nounInfo("bankrupt")
nouns['bankruptcy']=nounInfo("bankruptcy")
nouns['banner']=nounInfo("banner")
nouns['bannister']=nounInfo("bannister")
nouns['bannock']=nounInfo("bannock")
nouns['banns']=nounInfo("banns")
nouns['banquet']=nounInfo("banquet")
nouns['banshee']=nounInfo("banshee")
nouns['bantam']=nounInfo("bantam")
nouns['banter']=nounInfo("banter")
adjectives['bantering']=adjInfo("bantering")
adverbs['banteringly']="banteringly"
nouns['banting']=nounInfo("banting")
nouns['banyan']=nounInfo("banyan")
nouns['baobab']=nounInfo("baobab")
nouns['baptism']=nounInfo("baptism")
adjectives['baptismal']=adjInfo("baptismal")
nouns['bar']=nounInfo("bar")
prepositions['bar']=P("bar")
nouns['barb']=nounInfo("barb")
adjectives['barbarian']=adjInfo("barbarian")
nouns['barbarian']=nounInfo("barbarian")
adjectives['barbaric']=adjInfo("barbaric")
nouns['barbarism']=nounInfo("barbarism")
nouns['barbarity']=nounInfo("barbarity")
adjectives['barbarous']=adjInfo("barbarous")
adverbs['barbarously']="barbarously"
nouns['barbecue']=nounInfo("barbecue")
adjectives['barbed']=adjInfo("barbed")
nouns['barbel']=nounInfo("barbel")
nouns['barber']=nounInfo("barber")
nouns['barbican']=nounInfo("barbican")
nouns['barbitone']=nounInfo("barbitone")
nouns['barbiturate']=nounInfo("barbiturate")
nouns['barcarole']=nounInfo("barcarole")
nouns['bard']=nounInfo("bard")
adjectives['bardic']=adjInfo("bardic")
nouns['bardolatry']=nounInfo("bardolatry")
adjectives['bare']=adjInfo("bare")
adverbs['bareback']="bareback"
adjectives['barebacked']=adjInfo("barebacked")
adverbs['barebacked']="barebacked"
adjectives['barefaced']=adjInfo("barefaced")
adverbs['barefacedly']="barefacedly"
adverbs['barefoot']="barefoot"
adjectives['barefooted']=adjInfo("barefooted")
adverbs['barefooted']="barefooted"
adjectives['bareheaded']=adjInfo("bareheaded")
adjectives['barelegged']=adjInfo("barelegged")
adverbs['barely']="barely"
nouns['bareness']=nounInfo("bareness")
nouns['bargain']=nounInfo("bargain")
nouns['barge']=nounInfo("barge")
nouns['bargee']=nounInfo("bargee")
nouns['baritone']=nounInfo("baritone")
nouns['barium']=nounInfo("barium")
nouns['bark']=nounInfo("bark")
nouns['barker']=nounInfo("barker")
nouns['barley']=nounInfo("barley")
nouns['barm']=nounInfo("barm")
nouns['barmaid']=nounInfo("barmaid")
nouns['barman']=nounInfo("barman")
adjectives['barmy']=adjInfo("barmy")
nouns['barn']=nounInfo("barn")
nouns['barnacle']=nounInfo("barnacle")
nouns['barnstormer']=nounInfo("barnstormer")
nouns['barometer']=nounInfo("barometer")
adjectives['barometric']=adjInfo("barometric")
nouns['baron']=nounInfo("baron")
nouns['baronage']=nounInfo("baronage")
nouns['baroness']=nounInfo("baroness")
nouns['baronet']=nounInfo("baronet")
nouns['baronetcy']=nounInfo("baronetcy")
adjectives['baronial']=adjInfo("baronial")
nouns['barony']=nounInfo("barony")
adjectives['baroque']=adjInfo("baroque")
nouns['baroque']=nounInfo("baroque")
nouns['barouche']=nounInfo("barouche")
nouns['barque']=nounInfo("barque")
nouns['barrack']=nounInfo("barrack")
nouns['barracking']=nounInfo("barracking")
nouns['barracks']=nounInfo("barracks")
nouns['barracuda']=nounInfo("barracuda")
nouns['barrage']=nounInfo("barrage")
nouns['barrel']=nounInfo("barrel")
adjectives['barrelled']=adjInfo("barrelled")
adjectives['barren']=adjInfo("barren")
nouns['barrenness']=nounInfo("barrenness")
nouns['barricade']=nounInfo("barricade")
nouns['barrier']=nounInfo("barrier")
prepositions['barring']=P("barring")
nouns['barrister']=nounInfo("barrister")
nouns['barrow']=nounInfo("barrow")
nouns['bartender']=nounInfo("bartender")
nouns['barter']=nounInfo("barter")
nouns['barterer']=nounInfo("barterer")
nouns['basalt']=nounInfo("basalt")
nouns['bascule']=nounInfo("bascule")
adjectives['base']=adjInfo("base")
nouns['base']=nounInfo("base")
nouns['baseball']=nounInfo("baseball")
nouns['baseboard']=nounInfo("baseboard")
nouns['basement']=nounInfo("basement")
nouns['bash']=nounInfo("bash")
adjectives['bashful']=adjInfo("bashful")
adverbs['bashfully']="bashfully"
adjectives['basic']=adjInfo("basic")
adverbs['basically']="basically"
nouns['basil']=nounInfo("basil")
nouns['basilica']=nounInfo("basilica")
nouns['basilisk']=nounInfo("basilisk")
nouns['basin']=nounInfo("basin")
nouns['basis']=nounInfo("basis")
nouns['basket']=nounInfo("basket")
nouns['basketball']=nounInfo("basketball")
adjectives['bass']=adjInfo("bass")
nouns['bass']=nounInfo("bass")
nouns['bassinet']=nounInfo("bassinet")
nouns['bassoon']=nounInfo("bassoon")
nouns['bast']=nounInfo("bast")
nouns['bastard']=nounInfo("bastard")
nouns['bastardy']=nounInfo("bastardy")
nouns['bastinado']=nounInfo("bastinado")
nouns['bastion']=nounInfo("bastion")
nouns['bat']=nounInfo("bat")
nouns['batch']=nounInfo("batch")
nouns['bath']=nounInfo("bath")
nouns['bathe']=nounInfo("bathe")
nouns['bather']=nounInfo("bather")
nouns['bathing']=nounInfo("bathing")
nouns['bathos']=nounInfo("bathos")
nouns['bathrobe']=nounInfo("bathrobe")
nouns['bathroom']=nounInfo("bathroom")
nouns['baths']=nounInfo("baths")
nouns['bathtub']=nounInfo("bathtub")
nouns['bathysphere']=nounInfo("bathysphere")
nouns['batik']=nounInfo("batik")
nouns['batiste']=nounInfo("batiste")
nouns['batman']=nounInfo("batman")
nouns['baton']=nounInfo("baton")
adjectives['bats']=adjInfo("bats")
nouns['batsman']=nounInfo("batsman")
nouns['battalion']=nounInfo("battalion")
nouns['batten']=nounInfo("batten")
nouns['batter']=nounInfo("batter")
nouns['battery']=nounInfo("battery")
nouns['batting']=nounInfo("batting")
nouns['battle']=nounInfo("battle")
nouns['battledore']=nounInfo("battledore")
nouns['battledress']=nounInfo("battledress")
nouns['battlefield']=nounInfo("battlefield")
nouns['battleground']=nounInfo("battleground")
nouns['battlements']=nounInfo("battlements")
nouns['battleship']=nounInfo("battleship")
nouns['battue']=nounInfo("battue")
adjectives['batty']=adjInfo("batty")
nouns['bauble']=nounInfo("bauble")
nouns['baulk']=nounInfo("baulk")
nouns['bauxite']=nounInfo("bauxite")
nouns['bawbee']=nounInfo("bawbee")
nouns['bawd']=nounInfo("bawd")
adverbs['bawdily']="bawdily"
adjectives['bawdy']=adjInfo("bawdy")
nouns['bawdy']=nounInfo("bawdy")
adjectives['bay']=adjInfo("bay")
nouns['bay']=nounInfo("bay")
nouns['bayonet']=nounInfo("bayonet")
nouns['bayou']=nounInfo("bayou")
nouns['bazaar']=nounInfo("bazaar")
nouns['bazooka']=nounInfo("bazooka")
nouns['beach']=nounInfo("beach")
nouns['beachcomber']=nounInfo("beachcomber")
nouns['beachhead']=nounInfo("beachhead")
nouns['beachwear']=nounInfo("beachwear")
nouns['beacon']=nounInfo("beacon")
nouns['bead']=nounInfo("bead")
nouns['beading']=nounInfo("beading")
nouns['beadle']=nounInfo("beadle")
adjectives['beady']=adjInfo("beady")
nouns['beagle']=nounInfo("beagle")
nouns['beagling']=nounInfo("beagling")
nouns['beak']=nounInfo("beak")
nouns['beaker']=nounInfo("beaker")
nouns['beam']=nounInfo("beam")
nouns['bean']=nounInfo("bean")
nouns['beano']=nounInfo("beano")
nouns['beanstalk']=nounInfo("beanstalk")
nouns['bear']=nounInfo("bear")
adjectives['bearable']=adjInfo("bearable")
nouns['beard']=nounInfo("beard")
adjectives['bearded']=adjInfo("bearded")
adjectives['beardless']=adjInfo("beardless")
nouns['bearer']=nounInfo("bearer")
nouns['bearing']=nounInfo("bearing")
adjectives['bearish']=adjInfo("bearish")
nouns['bearskin']=nounInfo("bearskin")
nouns['beast']=nounInfo("beast")
nouns['beastliness']=nounInfo("beastliness")
adjectives['beastly']=adjInfo("beastly")
adverbs['beastly']="beastly"
adjectives['beat']=adjInfo("beat")
nouns['beat']=nounInfo("beat")
adjectives['beaten']=adjInfo("beaten")
nouns['beater']=nounInfo("beater")
adjectives['beatific']=adjInfo("beatific")
nouns['beatification']=nounInfo("beatification")
nouns['beating']=nounInfo("beating")
nouns['beatitude']=nounInfo("beatitude")
nouns['beatnik']=nounInfo("beatnik")
nouns['beau']=nounInfo("beau")
adjectives['beauteous']=adjInfo("beauteous")
nouns['beautician']=nounInfo("beautician")
adjectives['beautiful']=adjInfo("beautiful")
adverbs['beautifully']="beautifully"
nouns['beauty']=nounInfo("beauty")
nouns['beaver']=nounInfo("beaver")
adjectives['becalmed']=adjInfo("becalmed")
nouns['beck']=nounInfo("beck")
adjectives['becoming']=adjInfo("becoming")
adverbs['becomingly']="becomingly"
nouns['bed']=nounInfo("bed")
adjectives['bedaubed']=adjInfo("bedaubed")
adjectives['bedded']=adjInfo("bedded")
nouns['bedding']=nounInfo("bedding")
adjectives['bedecked']=adjInfo("bedecked")
nouns['bedevilment']=nounInfo("bedevilment")
adjectives['bedewed']=adjInfo("bedewed")
adjectives['bedimmed']=adjInfo("bedimmed")
nouns['bedlam']=nounInfo("bedlam")
nouns['bedpan']=nounInfo("bedpan")
nouns['bedpost']=nounInfo("bedpost")
adjectives['bedraggled']=adjInfo("bedraggled")
adjectives['bedridden']=adjInfo("bedridden")
nouns['bedroom']=nounInfo("bedroom")
nouns['bedside']=nounInfo("bedside")
nouns['bedsit']=nounInfo("bedsit")
nouns['bedsitter']=nounInfo("bedsitter")
nouns['bedsore']=nounInfo("bedsore")
nouns['bedspread']=nounInfo("bedspread")
nouns['bedstead']=nounInfo("bedstead")
nouns['bedtime']=nounInfo("bedtime")
nouns['bee']=nounInfo("bee")
nouns['beech']=nounInfo("beech")
nouns['beef']=nounInfo("beef")
nouns['beefeater']=nounInfo("beefeater")
nouns['beefsteak']=nounInfo("beefsteak")
adjectives['beefy']=adjInfo("beefy")
nouns['beehive']=nounInfo("beehive")
nouns['beep']=nounInfo("beep")
nouns['beer']=nounInfo("beer")
adjectives['beery']=adjInfo("beery")
nouns['beeswax']=nounInfo("beeswax")
nouns['beet']=nounInfo("beet")
nouns['beetle']=nounInfo("beetle")
nouns['beetroot']=nounInfo("beetroot")
adjectives['befitting']=adjInfo("befitting")
adverbs['befittingly']="befittingly"
adjectives['befogged']=adjInfo("befogged")
adverbs['before']="before"
prepositions['before']=P("before")
adjectives['beforehand']=adjInfo("beforehand")
adverbs['beforehand']="beforehand"
nouns['begad']=nounInfo("begad")
nouns['begetter']=nounInfo("begetter")
nouns['beggar']=nounInfo("beggar")
adjectives['beggarly']=adjInfo("beggarly")
nouns['beggarman']=nounInfo("beggarman")
nouns['beggarwoman']=nounInfo("beggarwoman")
nouns['beggary']=nounInfo("beggary")
nouns['beginner']=nounInfo("beginner")
nouns['beginning']=nounInfo("beginning")
nouns['begonia']=nounInfo("begonia")
nouns['begorra']=nounInfo("begorra")
adjectives['begrimed']=adjInfo("begrimed")
nouns['begum']=nounInfo("begum")
nouns['behalf']=nounInfo("behalf")
adjectives['behaved']=adjInfo("behaved")
nouns['behaviour']=nounInfo("behaviour")
nouns['behaviourism']=nounInfo("behaviourism")
nouns['behaviourist']=nounInfo("behaviourist")
nouns['behest']=nounInfo("behest")
adverbs['behind']="behind"
nouns['behind']=nounInfo("behind")
prepositions['behind']=P("behind")
adjectives['behindhand']=adjInfo("behindhand")
adjectives['beholden']=adjInfo("beholden")
nouns['beholder']=nounInfo("beholder")
nouns['beige']=nounInfo("beige")
nouns['being']=nounInfo("being")
adjectives['bejewelled']=adjInfo("bejewelled")
adjectives['belated']=adjInfo("belated")
adverbs['belatedly']="belatedly"
nouns['belay']=nounInfo("belay")
nouns['belch']=nounInfo("belch")
nouns['beldam']=nounInfo("beldam")
nouns['beldame']=nounInfo("beldame")
nouns['belfry']=nounInfo("belfry")
nouns['belief']=nounInfo("belief")
adjectives['believable']=adjInfo("believable")
nouns['believer']=nounInfo("believer")
nouns['believing']=nounInfo("believing")
adverbs['belike']="belike"
nouns['bell']=nounInfo("bell")
nouns['belladonna']=nounInfo("belladonna")
nouns['bellboy']=nounInfo("bellboy")
nouns['belle']=nounInfo("belle")
nouns['bellhop']=nounInfo("bellhop")
adjectives['bellicose']=adjInfo("bellicose")
adjectives['bellied']=adjInfo("bellied")
nouns['belligerency']=nounInfo("belligerency")
adjectives['belligerent']=adjInfo("belligerent")
nouns['belligerent']=nounInfo("belligerent")
adverbs['belligerently']="belligerently"
nouns['bellows']=nounInfo("bellows")
nouns['belly']=nounInfo("belly")
nouns['bellyful']=nounInfo("bellyful")
nouns['belongings']=nounInfo("belongings")
adjectives['beloved']=adjInfo("beloved")
nouns['beloved']=nounInfo("beloved")
adverbs['below']="below"
prepositions['below']=P("below")
nouns['belt']=nounInfo("belt")
nouns['belting']=nounInfo("belting")
adjectives['bemused']=adjInfo("bemused")
nouns['ben']=nounInfo("ben")
nouns['bench']=nounInfo("bench")
nouns['benchmark']=nounInfo("benchmark")
nouns['bend']=nounInfo("bend")
adverbs['beneath']="beneath"
prepositions['beneath']=P("beneath")
nouns['benedick']=nounInfo("benedick")
nouns['benediction']=nounInfo("benediction")
nouns['benefaction']=nounInfo("benefaction")
nouns['benefactor']=nounInfo("benefactor")
nouns['benefactress']=nounInfo("benefactress")
nouns['benefice']=nounInfo("benefice")
adjectives['beneficed']=adjInfo("beneficed")
nouns['beneficence']=nounInfo("beneficence")
adjectives['beneficent']=adjInfo("beneficent")
adjectives['beneficial']=adjInfo("beneficial")
adverbs['beneficially']="beneficially"
nouns['beneficiary']=nounInfo("beneficiary")
nouns['benefit']=nounInfo("benefit")
nouns['benevolence']=nounInfo("benevolence")
adjectives['benevolent']=adjInfo("benevolent")
adverbs['benevolently']="benevolently"
adjectives['benighted']=adjInfo("benighted")
adjectives['benign']=adjInfo("benign")
adjectives['benignant']=adjInfo("benignant")
adverbs['benignantly']="benignantly"
nouns['benignity']=nounInfo("benignity")
adverbs['benignly']="benignly"
nouns['benison']=nounInfo("benison")
adjectives['bent']=adjInfo("bent")
nouns['bent']=nounInfo("bent")
adjectives['benumbed']=adjInfo("benumbed")
nouns['benzene']=nounInfo("benzene")
nouns['benzine']=nounInfo("benzine")
nouns['benzol']=nounInfo("benzol")
nouns['bequest']=nounInfo("bequest")
nouns['bereavement']=nounInfo("bereavement")
nouns['beret']=nounInfo("beret")
nouns['berg']=nounInfo("berg")
nouns['berry']=nounInfo("berry")
adjectives['berserk']=adjInfo("berserk")
nouns['berth']=nounInfo("berth")
nouns['beryl']=nounInfo("beryl")
adjectives['beseeching']=adjInfo("beseeching")
adverbs['beseechingly']="beseechingly"
prepositions['beside']=P("beside")
adverbs['besides']="besides"
prepositions['besides']=P("besides")
nouns['besieger']=nounInfo("besieger")
nouns['besom']=nounInfo("besom")
adjectives['besotted']=adjInfo("besotted")
adjectives['bespangled']=adjInfo("bespangled")
adjectives['bespattered']=adjInfo("bespattered")
adjectives['bestial']=adjInfo("bestial")
nouns['bestiality']=nounInfo("bestiality")
adverbs['bestially']="bestially"
nouns['bestiary']=nounInfo("bestiary")
nouns['bestowal']=nounInfo("bestowal")
nouns['bet']=nounInfo("bet")
nouns['beta']=nounInfo("beta")
nouns['betel']=nounInfo("betel")
nouns['bethel']=nounInfo("bethel")
adverbs['betimes']="betimes"
nouns['betrayal']=nounInfo("betrayal")
nouns['betrayer']=nounInfo("betrayer")
nouns['betrothal']=nounInfo("betrothal")
nouns['betrothed']=nounInfo("betrothed")
nouns['better']=nounInfo("better")
nouns['betterment']=nounInfo("betterment")
nouns['bettor']=nounInfo("bettor")
adverbs['between']="between"
prepositions['between']=P("between")
adverbs['betwixt']="betwixt"
prepositions['betwixt']=P("betwixt")
nouns['bevel']=nounInfo("bevel")
nouns['beverage']=nounInfo("beverage")
nouns['bevy']=nounInfo("bevy")
adjectives['bewildering']=adjInfo("bewildering")
nouns['bewilderment']=nounInfo("bewilderment")
adjectives['bewitching']=adjInfo("bewitching")
adverbs['bewitchingly']="bewitchingly"
nouns['bey']=nounInfo("bey")
adverbs['beyond']="beyond"
prepositions['beyond']=P("beyond")
nouns['bezique']=nounInfo("bezique")
nouns['bhang']=nounInfo("bhang")
nouns['bias']=nounInfo("bias")
nouns['bib']=nounInfo("bib")
adjectives['biblical']=adjInfo("biblical")
nouns['bibliographer']=nounInfo("bibliographer")
nouns['bibliography']=nounInfo("bibliography")
nouns['bibliophile']=nounInfo("bibliophile")
adjectives['bibulous']=adjInfo("bibulous")
adjectives['bicameral']=adjInfo("bicameral")
nouns['bicarbonate']=nounInfo("bicarbonate")
nouns['bicentenary']=nounInfo("bicentenary")
adjectives['bicentennial']=adjInfo("bicentennial")
nouns['bicentennial']=nounInfo("bicentennial")
nouns['biceps']=nounInfo("biceps")
nouns['biculturalism']=nounInfo("biculturalism")
nouns['bicycle']=nounInfo("bicycle")
nouns['bid']=nounInfo("bid")
adjectives['biddable']=adjInfo("biddable")
nouns['bidder']=nounInfo("bidder")
nouns['bidding']=nounInfo("bidding")
nouns['bidet']=nounInfo("bidet")
adjectives['biennial']=adjInfo("biennial")
nouns['biennial']=nounInfo("biennial")
adverbs['biennially']="biennially"
nouns['bier']=nounInfo("bier")
nouns['biff']=nounInfo("biff")
adjectives['bifocal']=adjInfo("bifocal")
nouns['bifocals']=nounInfo("bifocals")
adjectives['bifurcate']=adjInfo("bifurcate")
adjectives['bifurcated']=adjInfo("bifurcated")
nouns['bifurcation']=nounInfo("bifurcation")
adjectives['big']=adjInfo("big")
nouns['bigamist']=nounInfo("bigamist")
adjectives['bigamous']=adjInfo("bigamous")
nouns['bigamy']=nounInfo("bigamy")
nouns['bight']=nounInfo("bight")
nouns['bigot']=nounInfo("bigot")
adjectives['bigoted']=adjInfo("bigoted")
nouns['bigotry']=nounInfo("bigotry")
nouns['bigwig']=nounInfo("bigwig")
adjectives['bijou']=adjInfo("bijou")
nouns['bijou']=nounInfo("bijou")
nouns['bike']=nounInfo("bike")
nouns['bikini']=nounInfo("bikini")
adjectives['bilabial']=adjInfo("bilabial")
nouns['bilabial']=nounInfo("bilabial")
adjectives['bilateral']=adjInfo("bilateral")
nouns['bilateralism']=nounInfo("bilateralism")
adverbs['bilaterally']="bilaterally"
nouns['bilberry']=nounInfo("bilberry")
nouns['bile']=nounInfo("bile")
nouns['bilge']=nounInfo("bilge")
nouns['bilharzia']=nounInfo("bilharzia")
adjectives['bilingual']=adjInfo("bilingual")
nouns['bilingual']=nounInfo("bilingual")
nouns['bilingualism']=nounInfo("bilingualism")
adjectives['bilious']=adjInfo("bilious")
nouns['biliousness']=nounInfo("biliousness")
nouns['bill']=nounInfo("bill")
nouns['billboard']=nounInfo("billboard")
nouns['billet']=nounInfo("billet")
nouns['billfold']=nounInfo("billfold")
nouns['billhook']=nounInfo("billhook")
nouns['billiards']=nounInfo("billiards")
nouns['billingsgate']=nounInfo("billingsgate")
nouns['billion']=nounInfo("billion")
adjectives['billionth']=adjInfo("billionth")
nouns['billionth']=nounInfo("billionth")
nouns['billow']=nounInfo("billow")
adjectives['billowy']=adjInfo("billowy")
nouns['billy']=nounInfo("billy")
nouns['biltong']=nounInfo("biltong")
adjectives['bimetallic']=adjInfo("bimetallic")
nouns['bimetallism']=nounInfo("bimetallism")
nouns['bin']=nounInfo("bin")
adjectives['binary']=adjInfo("binary")
nouns['bind']=nounInfo("bind")
nouns['binder']=nounInfo("binder")
nouns['bindery']=nounInfo("bindery")
adjectives['binding']=adjInfo("binding")
nouns['bindweed']=nounInfo("bindweed")
nouns['bine']=nounInfo("bine")
nouns['binge']=nounInfo("binge")
nouns['bingo']=nounInfo("bingo")
nouns['binnacle']=nounInfo("binnacle")
nouns['binoculars']=nounInfo("binoculars")
adjectives['binomial']=adjInfo("binomial")
adjectives['biochemical']=adjInfo("biochemical")
nouns['biochemistry']=nounInfo("biochemistry")
adjectives['biodegradable']=adjInfo("biodegradable")
nouns['biograph']=nounInfo("biograph")
nouns['biographer']=nounInfo("biographer")
adjectives['biographic']=adjInfo("biographic")
adjectives['biographical']=adjInfo("biographical")
nouns['biography']=nounInfo("biography")
adjectives['biological']=adjInfo("biological")
adverbs['biologically']="biologically"
nouns['biologist']=nounInfo("biologist")
nouns['biology']=nounInfo("biology")
nouns['bioscope']=nounInfo("bioscope")
adjectives['bipartisan']=adjInfo("bipartisan")
nouns['biped']=nounInfo("biped")
nouns['biplane']=nounInfo("biplane")
nouns['birch']=nounInfo("birch")
nouns['bird']=nounInfo("bird")
nouns['biretta']=nounInfo("biretta")
nouns['biro']=nounInfo("biro")
nouns['birth']=nounInfo("birth")
nouns['birthday']=nounInfo("birthday")
nouns['birthmark']=nounInfo("birthmark")
nouns['birthplace']=nounInfo("birthplace")
nouns['birthrate']=nounInfo("birthrate")
nouns['birthright']=nounInfo("birthright")
nouns['biscuit']=nounInfo("biscuit")
nouns['bisection']=nounInfo("bisection")
adjectives['bisexual']=adjInfo("bisexual")
nouns['bisexual']=nounInfo("bisexual")
nouns['bisexuality']=nounInfo("bisexuality")
nouns['bishop']=nounInfo("bishop")
nouns['bishopric']=nounInfo("bishopric")
nouns['bismuth']=nounInfo("bismuth")
nouns['bison']=nounInfo("bison")
nouns['bistro']=nounInfo("bistro")
nouns['bit']=nounInfo("bit")
nouns['bitch']=nounInfo("bitch")
adjectives['bitchy']=adjInfo("bitchy")
nouns['bite']=nounInfo("bite")
adjectives['biting']=adjInfo("biting")
adverbs['bitingly']="bitingly"
adjectives['bitter']=adjInfo("bitter")
nouns['bitter']=nounInfo("bitter")
adverbs['bitterly']="bitterly"
nouns['bittern']=nounInfo("bittern")
nouns['bitterness']=nounInfo("bitterness")
nouns['bitumen']=nounInfo("bitumen")
adjectives['bituminous']=adjInfo("bituminous")
nouns['bivalve']=nounInfo("bivalve")
nouns['bivouac']=nounInfo("bivouac")
nouns['biz']=nounInfo("biz")
adjectives['bizarre']=adjInfo("bizarre")
adjectives['bizonal']=adjInfo("bizonal")
nouns['blabbermouth']=nounInfo("blabbermouth")
adjectives['black']=adjInfo("black")
nouns['black']=nounInfo("black")
nouns['blackamoor']=nounInfo("blackamoor")
nouns['blackberry']=nounInfo("blackberry")
nouns['blackbird']=nounInfo("blackbird")
nouns['blackboard']=nounInfo("blackboard")
nouns['blackcurrant']=nounInfo("blackcurrant")
nouns['blackguard']=nounInfo("blackguard")
adjectives['blackguardly']=adjInfo("blackguardly")
nouns['blackhead']=nounInfo("blackhead")
nouns['blacking']=nounInfo("blacking")
nouns['blackleg']=nounInfo("blackleg")
nouns['blacklist']=nounInfo("blacklist")
nouns['blackmail']=nounInfo("blackmail")
nouns['blackmailer']=nounInfo("blackmailer")
nouns['blackout']=nounInfo("blackout")
nouns['blacksmith']=nounInfo("blacksmith")
nouns['blackthorn']=nounInfo("blackthorn")
adjectives['blackwater']=adjInfo("blackwater")
nouns['bladder']=nounInfo("bladder")
nouns['blade']=nounInfo("blade")
nouns['blaeberry']=nounInfo("blaeberry")
nouns['blah']=nounInfo("blah")
nouns['blame']=nounInfo("blame")
adjectives['blameless']=adjInfo("blameless")
adverbs['blamelessly']="blamelessly"
adjectives['blameworthy']=adjInfo("blameworthy")
nouns['blancmange']=nounInfo("blancmange")
adjectives['bland']=adjInfo("bland")
nouns['blandishment']=nounInfo("blandishment")
adverbs['blandly']="blandly"
nouns['blandness']=nounInfo("blandness")
adjectives['blank']=adjInfo("blank")
nouns['blank']=nounInfo("blank")
nouns['blanket']=nounInfo("blanket")
adverbs['blankly']="blankly"
nouns['blare']=nounInfo("blare")
nouns['blarney']=nounInfo("blarney")
nouns['blasphemer']=nounInfo("blasphemer")
adjectives['blasphemous']=adjInfo("blasphemous")
adverbs['blasphemously']="blasphemously"
nouns['blasphemy']=nounInfo("blasphemy")
nouns['blast']=nounInfo("blast")
adjectives['blasted']=adjInfo("blasted")
adjectives['blatant']=adjInfo("blatant")
adverbs['blatantly']="blatantly"
nouns['blather']=nounInfo("blather")
nouns['blaze']=nounInfo("blaze")
nouns['blazer']=nounInfo("blazer")
adjectives['blazing']=adjInfo("blazing")
nouns['blazon']=nounInfo("blazon")
nouns['blazonry']=nounInfo("blazonry")
nouns['bleach']=nounInfo("bleach")
nouns['bleachers']=nounInfo("bleachers")
adjectives['bleak']=adjInfo("bleak")
adverbs['bleakly']="bleakly"
adjectives['bleary']=adjInfo("bleary")
nouns['bleat']=nounInfo("bleat")
nouns['bleep']=nounInfo("bleep")
nouns['blemish']=nounInfo("blemish")
nouns['blend']=nounInfo("blend")
adjectives['blessed']=adjInfo("blessed")
adverbs['blessedly']="blessedly"
nouns['blessedness']=nounInfo("blessedness")
nouns['blessing']=nounInfo("blessing")
nouns['blether']=nounInfo("blether")
nouns['blight']=nounInfo("blight")
nouns['blighter']=nounInfo("blighter")
nouns['blimey']=nounInfo("blimey")
nouns['blimp']=nounInfo("blimp")
adjectives['blind']=adjInfo("blind")
nouns['blind']=nounInfo("blind")
nouns['blinders']=nounInfo("blinders")
adjectives['blindfold']=adjInfo("blindfold")
nouns['blindfold']=nounInfo("blindfold")
adverbs['blindly']="blindly"
nouns['blindness']=nounInfo("blindness")
nouns['blink']=nounInfo("blink")
nouns['blinkers']=nounInfo("blinkers")
adjectives['blinking']=adjInfo("blinking")
nouns['blip']=nounInfo("blip")
nouns['bliss']=nounInfo("bliss")
adjectives['blissful']=adjInfo("blissful")
adverbs['blissfully']="blissfully"
nouns['blister']=nounInfo("blister")
adjectives['blithe']=adjInfo("blithe")
adverbs['blithely']="blithely"
adjectives['blithering']=adjInfo("blithering")
adjectives['blithesome']=adjInfo("blithesome")
nouns['blitz']=nounInfo("blitz")
nouns['blizzard']=nounInfo("blizzard")
adjectives['bloated']=adjInfo("bloated")
nouns['bloater']=nounInfo("bloater")
nouns['blob']=nounInfo("blob")
nouns['bloc']=nounInfo("bloc")
nouns['block']=nounInfo("block")
nouns['blockade']=nounInfo("blockade")
nouns['blockage']=nounInfo("blockage")
nouns['blockbuster']=nounInfo("blockbuster")
nouns['blockhead']=nounInfo("blockhead")
nouns['blockhouse']=nounInfo("blockhouse")
nouns['bloke']=nounInfo("bloke")
adjectives['blond']=adjInfo("blond")
nouns['blond']=nounInfo("blond")
adjectives['blonde']=adjInfo("blonde")
nouns['blonde']=nounInfo("blonde")
nouns['blood']=nounInfo("blood")
nouns['bloodhound']=nounInfo("bloodhound")
adjectives['bloodless']=adjInfo("bloodless")
adverbs['bloodlessly']="bloodlessly"
nouns['bloodlust']=nounInfo("bloodlust")
nouns['bloodshed']=nounInfo("bloodshed")
adjectives['bloodshot']=adjInfo("bloodshot")
adjectives['bloodstained']=adjInfo("bloodstained")
nouns['bloodstock']=nounInfo("bloodstock")
nouns['bloodsucker']=nounInfo("bloodsucker")
nouns['bloodthirstiness']=nounInfo("bloodthirstiness")
adjectives['bloodthirsty']=adjInfo("bloodthirsty")
adjectives['bloody']=adjInfo("bloody")
adverbs['bloody']="bloody"
nouns['bloom']=nounInfo("bloom")
nouns['bloomer']=nounInfo("bloomer")
nouns['bloomers']=nounInfo("bloomers")
adjectives['blooming']=adjInfo("blooming")
nouns['blossom']=nounInfo("blossom")
nouns['blot']=nounInfo("blot")
nouns['blotch']=nounInfo("blotch")
nouns['blotter']=nounInfo("blotter")
adjectives['blotto']=adjInfo("blotto")
nouns['blouse']=nounInfo("blouse")
nouns['blow']=nounInfo("blow")
nouns['blowback']=nounInfo("blowback")
nouns['blower']=nounInfo("blower")
nouns['blowfly']=nounInfo("blowfly")
nouns['blowhole']=nounInfo("blowhole")
nouns['blowlamp']=nounInfo("blowlamp")
nouns['blowout']=nounInfo("blowout")
nouns['blowpipe']=nounInfo("blowpipe")
nouns['blowtorch']=nounInfo("blowtorch")
adjectives['blowzy']=adjInfo("blowzy")
nouns['blubber']=nounInfo("blubber")
nouns['bludgeon']=nounInfo("bludgeon")
adjectives['blue']=adjInfo("blue")
nouns['blue']=nounInfo("blue")
nouns['bluebell']=nounInfo("bluebell")
nouns['bluebottle']=nounInfo("bluebottle")
nouns['blueprint']=nounInfo("blueprint")
nouns['bluestocking']=nounInfo("bluestocking")
adjectives['bluff']=adjInfo("bluff")
nouns['bluff']=nounInfo("bluff")
nouns['bluffer']=nounInfo("bluffer")
adverbs['bluffly']="bluffly"
nouns['bluffness']=nounInfo("bluffness")
adjectives['bluish']=adjInfo("bluish")
nouns['blunder']=nounInfo("blunder")
nouns['blunderbuss']=nounInfo("blunderbuss")
nouns['blunderer']=nounInfo("blunderer")
adjectives['blunt']=adjInfo("blunt")
adverbs['bluntly']="bluntly"
nouns['bluntness']=nounInfo("bluntness")
nouns['blur']=nounInfo("blur")
nouns['blurb']=nounInfo("blurb")
nouns['blush']=nounInfo("blush")
adjectives['blushing']=adjInfo("blushing")
adverbs['blushingly']="blushingly"
nouns['bluster']=nounInfo("bluster")
adjectives['blustery']=adjInfo("blustery")
nouns['bo']=nounInfo("bo")
nouns['boa']=nounInfo("boa")
nouns['boar']=nounInfo("boar")
nouns['board']=nounInfo("board")
nouns['boarder']=nounInfo("boarder")
nouns['boarding']=nounInfo("boarding")
nouns['boardroom']=nounInfo("boardroom")
nouns['boardwalk']=nounInfo("boardwalk")
nouns['boast']=nounInfo("boast")
nouns['boaster']=nounInfo("boaster")
adjectives['boastful']=adjInfo("boastful")
adverbs['boastfully']="boastfully"
nouns['boat']=nounInfo("boat")
nouns['boater']=nounInfo("boater")
nouns['boatman']=nounInfo("boatman")
nouns['boatswain']=nounInfo("boatswain")
nouns['bob']=nounInfo("bob")
nouns['bobbin']=nounInfo("bobbin")
nouns['bobby']=nounInfo("bobby")
nouns['bobolink']=nounInfo("bobolink")
nouns['bobsled']=nounInfo("bobsled")
nouns['bobsleigh']=nounInfo("bobsleigh")
nouns['bobtail']=nounInfo("bobtail")
nouns['bodice']=nounInfo("bodice")
adjectives['bodied']=adjInfo("bodied")
adjectives['bodily']=adjInfo("bodily")
adverbs['bodily']="bodily"
nouns['boding']=nounInfo("boding")
nouns['bodkin']=nounInfo("bodkin")
nouns['body']=nounInfo("body")
nouns['bodyguard']=nounInfo("bodyguard")
nouns['bodywork']=nounInfo("bodywork")
nouns['boffin']=nounInfo("boffin")
nouns['bog']=nounInfo("bog")
nouns['bogey']=nounInfo("bogey")
adjectives['boggy']=adjInfo("boggy")
nouns['bogie']=nounInfo("bogie")
adjectives['bogus']=adjInfo("bogus")
nouns['bogy']=nounInfo("bogy")
nouns['boh']=nounInfo("boh")
adjectives['bohemian']=adjInfo("bohemian")
nouns['bohemian']=nounInfo("bohemian")
nouns['boil']=nounInfo("boil")
nouns['boiler']=nounInfo("boiler")
nouns['boilersuit']=nounInfo("boilersuit")
adjectives['boisterous']=adjInfo("boisterous")
adverbs['boisterously']="boisterously"
adjectives['bold']=adjInfo("bold")
adverbs['boldly']="boldly"
nouns['boldness']=nounInfo("boldness")
nouns['bole']=nounInfo("bole")
nouns['bolero']=nounInfo("bolero")
nouns['boll']=nounInfo("boll")
nouns['bollard']=nounInfo("bollard")
nouns['bollock']=nounInfo("bollock")
nouns['boloney']=nounInfo("boloney")
adjectives['bolshy']=adjInfo("bolshy")
nouns['bolster']=nounInfo("bolster")
adverbs['bolt']="bolt"
nouns['bolt']=nounInfo("bolt")
nouns['bomb']=nounInfo("bomb")
nouns['bombardier']=nounInfo("bombardier")
nouns['bombardment']=nounInfo("bombardment")
nouns['bombast']=nounInfo("bombast")
adjectives['bombastic']=adjInfo("bombastic")
adverbs['bombastically']="bombastically"
nouns['bomber']=nounInfo("bomber")
nouns['bombshell']=nounInfo("bombshell")
nouns['bonanza']=nounInfo("bonanza")
nouns['bonbon']=nounInfo("bonbon")
nouns['bond']=nounInfo("bond")
nouns['bondage']=nounInfo("bondage")
nouns['bone']=nounInfo("bone")
nouns['bonemeal']=nounInfo("bonemeal")
nouns['boner']=nounInfo("boner")
nouns['boneshaker']=nounInfo("boneshaker")
nouns['bonfire']=nounInfo("bonfire")
nouns['bongo']=nounInfo("bongo")
nouns['bonhomie']=nounInfo("bonhomie")
nouns['bonito']=nounInfo("bonito")
adjectives['bonkers']=adjInfo("bonkers")
nouns['bonnet']=nounInfo("bonnet")
adverbs['bonnily']="bonnily"
adjectives['bonny']=adjInfo("bonny")
nouns['bonus']=nounInfo("bonus")
adjectives['bony']=adjInfo("bony")
nouns['boo']=nounInfo("boo")
nouns['boob']=nounInfo("boob")
nouns['booby']=nounInfo("booby")
nouns['boogie']=nounInfo("boogie")
nouns['book']=nounInfo("book")
adjectives['bookable']=adjInfo("bookable")
nouns['bookcase']=nounInfo("bookcase")
nouns['bookclub']=nounInfo("bookclub")
nouns['bookie']=nounInfo("bookie")
adjectives['bookish']=adjInfo("bookish")
nouns['bookishness']=nounInfo("bookishness")
nouns['bookkeeper']=nounInfo("bookkeeper")
nouns['bookkeeping']=nounInfo("bookkeeping")
nouns['booklet']=nounInfo("booklet")
nouns['bookmaker']=nounInfo("bookmaker")
nouns['bookmark']=nounInfo("bookmark")
nouns['bookmarker']=nounInfo("bookmarker")
nouns['bookmobile']=nounInfo("bookmobile")
nouns['bookseller']=nounInfo("bookseller")
nouns['bookstall']=nounInfo("bookstall")
nouns['bookworm']=nounInfo("bookworm")
nouns['boom']=nounInfo("boom")
nouns['boomerang']=nounInfo("boomerang")
adjectives['boon']=adjInfo("boon")
nouns['boon']=nounInfo("boon")
nouns['boor']=nounInfo("boor")
adjectives['boorish']=adjInfo("boorish")
adverbs['boorishly']="boorishly"
nouns['boorishness']=nounInfo("boorishness")
nouns['boost']=nounInfo("boost")
nouns['booster']=nounInfo("booster")
nouns['boot']=nounInfo("boot")
adjectives['booted']=adjInfo("booted")
nouns['bootee']=nounInfo("bootee")
nouns['booth']=nounInfo("booth")
nouns['bootlace']=nounInfo("bootlace")
nouns['bootlegger']=nounInfo("bootlegger")
adjectives['bootless']=adjInfo("bootless")
nouns['booty']=nounInfo("booty")
nouns['booze']=nounInfo("booze")
nouns['boozer']=nounInfo("boozer")
adjectives['boozy']=adjInfo("boozy")
nouns['bopeep']=nounInfo("bopeep")
adjectives['boracic']=adjInfo("boracic")
nouns['borage']=nounInfo("borage")
nouns['borax']=nounInfo("borax")
nouns['border']=nounInfo("border")
nouns['borderer']=nounInfo("borderer")
nouns['borderland']=nounInfo("borderland")
nouns['borderline']=nounInfo("borderline")
nouns['bore']=nounInfo("bore")
adverbs['boredly']="boredly"
nouns['boredom']=nounInfo("boredom")
nouns['borer']=nounInfo("borer")
adjectives['boric']=adjInfo("boric")
adjectives['boring']=adjInfo("boring")
nouns['boron']=nounInfo("boron")
nouns['borough']=nounInfo("borough")
nouns['borrower']=nounInfo("borrower")
nouns['borsch']=nounInfo("borsch")
nouns['borstal']=nounInfo("borstal")
nouns['bortsch']=nounInfo("bortsch")
nouns['borzoi']=nounInfo("borzoi")
nouns['bosh']=nounInfo("bosh")
adjectives['bosky']=adjInfo("bosky")
nouns['bosom']=nounInfo("bosom")
nouns['boss']=nounInfo("boss")
adjectives['bossy']=adjInfo("bossy")
adjectives['botanical']=adjInfo("botanical")
nouns['botanist']=nounInfo("botanist")
nouns['botany']=nounInfo("botany")
nouns['botch']=nounInfo("botch")
nouns['botcher']=nounInfo("botcher")
nouns['bother']=nounInfo("bother")
nouns['botheration']=nounInfo("botheration")
adjectives['bothersome']=adjInfo("bothersome")
nouns['bottle']=nounInfo("bottle")
nouns['bottom']=nounInfo("bottom")
adjectives['bottomless']=adjInfo("bottomless")
nouns['botulism']=nounInfo("botulism")
nouns['boudoir']=nounInfo("boudoir")
nouns['bougainvillea']=nounInfo("bougainvillea")
nouns['bough']=nounInfo("bough")
nouns['bouillon']=nounInfo("bouillon")
nouns['boulder']=nounInfo("boulder")
nouns['boulevard']=nounInfo("boulevard")
nouns['bounce']=nounInfo("bounce")
adjectives['bouncing']=adjInfo("bouncing")
adjectives['bound']=adjInfo("bound")
nouns['bound']=nounInfo("bound")
nouns['boundary']=nounInfo("boundary")
adjectives['bounden']=adjInfo("bounden")
nouns['bounder']=nounInfo("bounder")
adjectives['boundless']=adjInfo("boundless")
adverbs['boundlessly']="boundlessly"
adjectives['bounteous']=adjInfo("bounteous")
adverbs['bounteously']="bounteously"
adjectives['bountiful']=adjInfo("bountiful")
adverbs['bountifully']="bountifully"
nouns['bounty']=nounInfo("bounty")
nouns['bouquet']=nounInfo("bouquet")
nouns['bourbon']=nounInfo("bourbon")
adjectives['bourgeois']=adjInfo("bourgeois")
nouns['bourgeois']=nounInfo("bourgeois")
nouns['bourgeoisie']=nounInfo("bourgeoisie")
nouns['bourn']=nounInfo("bourn")
nouns['bourne']=nounInfo("bourne")
nouns['bourse']=nounInfo("bourse")
nouns['bout']=nounInfo("bout")
nouns['boutique']=nounInfo("boutique")
adjectives['bovine']=adjInfo("bovine")
nouns['bovril']=nounInfo("bovril")
nouns['bow']=nounInfo("bow")
nouns['bowel']=nounInfo("bowel")
nouns['bower']=nounInfo("bower")
nouns['bowing']=nounInfo("bowing")
nouns['bowl']=nounInfo("bowl")
nouns['bowler']=nounInfo("bowler")
nouns['bowline']=nounInfo("bowline")
nouns['bowls']=nounInfo("bowls")
nouns['bowman']=nounInfo("bowman")
nouns['bowsprit']=nounInfo("bowsprit")
nouns['box']=nounInfo("box")
nouns['boxer']=nounInfo("boxer")
nouns['boxful']=nounInfo("boxful")
nouns['boxing']=nounInfo("boxing")
nouns['boxwood']=nounInfo("boxwood")
nouns['boy']=nounInfo("boy").addAttributes({"g":"m"})
nouns['boycott']=nounInfo("boycott")
nouns['boyfriend']=nounInfo("boyfriend")
nouns['boyhood']=nounInfo("boyhood")
adjectives['boyish']=adjInfo("boyish")
adverbs['boyishly']="boyishly"
nouns['bra']=nounInfo("bra")
nouns['brace']=nounInfo("brace")
nouns['bracelet']=nounInfo("bracelet")
nouns['braces']=nounInfo("braces")
nouns['bracken']=nounInfo("bracken")
nouns['bracket']=nounInfo("bracket")
adjectives['brackish']=adjInfo("brackish")
nouns['bract']=nounInfo("bract")
nouns['brad']=nounInfo("brad")
nouns['bradawl']=nounInfo("bradawl")
nouns['brae']=nounInfo("brae")
nouns['braggart']=nounInfo("braggart")
nouns['bragging']=nounInfo("bragging")
nouns['braid']=nounInfo("braid")
nouns['braille']=nounInfo("braille")
nouns['brain']=nounInfo("brain")
adjectives['brainless']=adjInfo("brainless")
adjectives['brainy']=adjInfo("brainy")
nouns['brake']=nounInfo("brake")
nouns['brakeman']=nounInfo("brakeman")
nouns['bramble']=nounInfo("bramble")
nouns['bran']=nounInfo("bran")
nouns['branch']=nounInfo("branch")
adjectives['branchy']=adjInfo("branchy")
nouns['brand']=nounInfo("brand")
nouns['brandy']=nounInfo("brandy")
adjectives['brash']=adjInfo("brash")
nouns['brass']=nounInfo("brass")
nouns['brassard']=nounInfo("brassard")
nouns['brasserie']=nounInfo("brasserie")
nouns['brassiere']=nounInfo("brassiere")
adjectives['brassy']=adjInfo("brassy")
nouns['brat']=nounInfo("brat")
nouns['bravado']=nounInfo("bravado")
adjectives['brave']=adjInfo("brave")
nouns['brave']=nounInfo("brave").addAttributes({"g":"m"})
adverbs['bravely']="bravely"
nouns['bravery']=nounInfo("bravery")
nouns['bravo']=nounInfo("bravo")
nouns['brawl']=nounInfo("brawl")
nouns['brawler']=nounInfo("brawler")
nouns['brawn']=nounInfo("brawn")
adjectives['brawny']=adjInfo("brawny")
nouns['bray']=nounInfo("bray")
adjectives['brazen']=adjInfo("brazen")
nouns['brazier']=nounInfo("brazier")
nouns['breach']=nounInfo("breach")
nouns['bread']=nounInfo("bread")
nouns['breadcrumb']=nounInfo("breadcrumb")
nouns['breadfruit']=nounInfo("breadfruit")
nouns['breadline']=nounInfo("breadline")
nouns['breadth']=nounInfo("breadth")
adverbs['breadthways']="breadthways"
adverbs['breadthwise']="breadthwise"
nouns['breadwinner']=nounInfo("breadwinner").addAttributes({"g":"x"})
nouns['break']=nounInfo("break")
adjectives['breakable']=adjInfo("breakable")
nouns['breakables']=nounInfo("breakables")
nouns['breakage']=nounInfo("breakage")
nouns['breakdown']=nounInfo("breakdown")
nouns['breaker']=nounInfo("breaker")
nouns['breakfast']=nounInfo("breakfast")
adjectives['breakneck']=adjInfo("breakneck")
nouns['breakthrough']=nounInfo("breakthrough")
nouns['breakwater']=nounInfo("breakwater")
nouns['bream']=nounInfo("bream")
nouns['breast']=nounInfo("breast")
nouns['breaststroke']=nounInfo("breaststroke")
nouns['breastwork']=nounInfo("breastwork")
nouns['breath']=nounInfo("breath")
nouns['breathalyser']=nounInfo("breathalyser")
nouns['breather']=nounInfo("breather")
nouns['breathing']=nounInfo("breathing")
adjectives['breathless']=adjInfo("breathless")
adverbs['breathlessly']="breathlessly"
adjectives['breathtaking']=adjInfo("breathtaking")
nouns['breech']=nounInfo("breech")
nouns['breeches']=nounInfo("breeches")
nouns['breed']=nounInfo("breed")
nouns['breeder']=nounInfo("breeder")
nouns['breeding']=nounInfo("breeding")
nouns['breeze']=nounInfo("breeze")
adverbs['breezily']="breezily"
nouns['breeziness']=nounInfo("breeziness")
adjectives['breezy']=adjInfo("breezy")
nouns['breve']=nounInfo("breve")
nouns['brevet']=nounInfo("brevet")
nouns['breviary']=nounInfo("breviary")
nouns['brevity']=nounInfo("brevity")
nouns['brew']=nounInfo("brew")
nouns['brewer']=nounInfo("brewer")
nouns['brewery']=nounInfo("brewery")
nouns['briar']=nounInfo("briar")
adjectives['bribable']=adjInfo("bribable")
nouns['bribe']=nounInfo("bribe")
nouns['bribery']=nounInfo("bribery")
nouns['brick']=nounInfo("brick")
nouns['brickbat']=nounInfo("brickbat")
nouns['brickkiln']=nounInfo("brickkiln")
nouns['bricklayer']=nounInfo("bricklayer")
nouns['brickwork']=nounInfo("brickwork")
adjectives['bridal']=adjInfo("bridal")
nouns['bridal']=nounInfo("bridal")
nouns['bride']=nounInfo("bride").addAttributes({"g":"f"})
nouns['bridecake']=nounInfo("bridecake")
nouns['bridegroom']=nounInfo("bridegroom").addAttributes({"g":"m"})
nouns['bridesmaid']=nounInfo("bridesmaid")
nouns['bridge']=nounInfo("bridge")
nouns['bridgehead']=nounInfo("bridgehead")
nouns['bridle']=nounInfo("bridle")
adjectives['brief']=adjInfo("brief")
nouns['brief']=nounInfo("brief")
nouns['briefcase']=nounInfo("briefcase")
nouns['briefing']=nounInfo("briefing")
adverbs['briefly']="briefly"
nouns['briefs']=nounInfo("briefs")
nouns['brier']=nounInfo("brier")
nouns['brig']=nounInfo("brig")
nouns['brigade']=nounInfo("brigade")
nouns['brigand']=nounInfo("brigand")
nouns['brigantine']=nounInfo("brigantine")
adjectives['bright']=adjInfo("bright")
adverbs['bright']="bright"
adverbs['brightly']="brightly"
nouns['brightness']=nounInfo("brightness")
nouns['brill']=nounInfo("brill")
nouns['brilliance']=nounInfo("brilliance")
nouns['brilliancy']=nounInfo("brilliancy")
adjectives['brilliant']=adjInfo("brilliant")
nouns['brilliantine']=nounInfo("brilliantine")
adverbs['brilliantly']="brilliantly"
nouns['brim']=nounInfo("brim")
adjectives['brimful']=adjInfo("brimful")
adjectives['brimfull']=adjInfo("brimfull")
nouns['brimstone']=nounInfo("brimstone")
adjectives['brindled']=adjInfo("brindled")
nouns['brine']=nounInfo("brine")
nouns['brink']=nounInfo("brink")
nouns['brinkmanship']=nounInfo("brinkmanship")
adjectives['briny']=adjInfo("briny")
nouns['brioche']=nounInfo("brioche")
nouns['briquet']=nounInfo("briquet")
nouns['briquette']=nounInfo("briquette")
adjectives['brisk']=adjInfo("brisk")
nouns['brisket']=nounInfo("brisket")
adverbs['briskly']="briskly"
nouns['bristle']=nounInfo("bristle")
adjectives['bristly']=adjInfo("bristly")
adjectives['brittle']=adjInfo("brittle")
adjectives['broad']=adjInfo("broad")
nouns['broad']=nounInfo("broad")
adverbs['broadcast']="broadcast"
nouns['broadcast']=nounInfo("broadcast")
adjectives['broadcasting']=adjInfo("broadcasting")
nouns['broadcasting']=nounInfo("broadcasting")
nouns['broadcloth']=nounInfo("broadcloth")
adverbs['broadly']="broadly"
nouns['broadness']=nounInfo("broadness")
nouns['broadsheet']=nounInfo("broadsheet")
nouns['broadside']=nounInfo("broadside")
adverbs['broadways']="broadways"
adverbs['broadwise']="broadwise"
nouns['brocade']=nounInfo("brocade")
nouns['broccoli']=nounInfo("broccoli")
nouns['brochure']=nounInfo("brochure")
nouns['brogue']=nounInfo("brogue")
nouns['broiler']=nounInfo("broiler")
adjectives['broke']=adjInfo("broke")
nouns['broker']=nounInfo("broker")
nouns['brokerage']=nounInfo("brokerage")
nouns['brolly']=nounInfo("brolly")
nouns['bromide']=nounInfo("bromide")
nouns['bromine']=nounInfo("bromine")
adjectives['bronchial']=adjInfo("bronchial")
adjectives['bronchitic']=adjInfo("bronchitic")
nouns['bronchitis']=nounInfo("bronchitis")
nouns['bronchus']=nounInfo("bronchus")
nouns['bronco']=nounInfo("bronco")
nouns['bronze']=nounInfo("bronze")
nouns['brooch']=nounInfo("brooch")
nouns['brood']=nounInfo("brood")
adjectives['broody']=adjInfo("broody")
nouns['brook']=nounInfo("brook")
nouns['broom']=nounInfo("broom")
nouns['broomstick']=nounInfo("broomstick")
nouns['broth']=nounInfo("broth")
nouns['brothel']=nounInfo("brothel")
nouns['brother']=nounInfo("brother").addAttributes({"g":"m"})
nouns['brotherhood']=nounInfo("brotherhood")
adjectives['brotherly']=adjInfo("brotherly")
nouns['brougham']=nounInfo("brougham")
nouns['brouhaha']=nounInfo("brouhaha")
nouns['brow']=nounInfo("brow")
adjectives['brown']=adjInfo("brown")
nouns['brownie']=nounInfo("brownie")
nouns['brownstone']=nounInfo("brownstone")
nouns['browse']=nounInfo("browse")
nouns['bruin']=nounInfo("bruin")
nouns['bruise']=nounInfo("bruise")
nouns['bruiser']=nounInfo("bruiser")
nouns['brunch']=nounInfo("brunch")
nouns['brunette']=nounInfo("brunette")
nouns['brunt']=nounInfo("brunt")
nouns['brush']=nounInfo("brush")
nouns['brushwood']=nounInfo("brushwood")
nouns['brushwork']=nounInfo("brushwork")
adjectives['brusque']=adjInfo("brusque")
adverbs['brusquely']="brusquely"
nouns['brusqueness']=nounInfo("brusqueness")
adjectives['brutal']=adjInfo("brutal")
nouns['brutality']=nounInfo("brutality")
adverbs['brutally']="brutally"
nouns['brute']=nounInfo("brute")
adjectives['brutish']=adjInfo("brutish")
adverbs['brutishly']="brutishly"
nouns['bubble']=nounInfo("bubble")
adjectives['bubbly']=adjInfo("bubbly")
nouns['bubbly']=nounInfo("bubbly")
adjectives['bubonic']=adjInfo("bubonic")
nouns['buccaneer']=nounInfo("buccaneer")
nouns['buck']=nounInfo("buck")
nouns['bucket']=nounInfo("bucket")
nouns['bucketful']=nounInfo("bucketful")
nouns['buckle']=nounInfo("buckle")
nouns['buckler']=nounInfo("buckler")
nouns['buckram']=nounInfo("buckram")
nouns['buckshot']=nounInfo("buckshot")
nouns['buckskin']=nounInfo("buckskin")
nouns['bucktooth']=nounInfo("bucktooth")
nouns['buckwheat']=nounInfo("buckwheat")
adjectives['bucolic']=adjInfo("bucolic")
nouns['bucolics']=nounInfo("bucolics")
nouns['bud']=nounInfo("bud")
adjectives['budding']=adjInfo("budding")
nouns['buddy']=nounInfo("buddy")
nouns['budgerigar']=nounInfo("budgerigar")
nouns['budget']=nounInfo("budget")
adjectives['budgetary']=adjInfo("budgetary")
nouns['budgie']=nounInfo("budgie")
nouns['buff']=nounInfo("buff")
nouns['buffalo']=nounInfo("buffalo")
nouns['buffer']=nounInfo("buffer")
nouns['buffet']=nounInfo("buffet")
nouns['buffoon']=nounInfo("buffoon")
nouns['buffoonery']=nounInfo("buffoonery")
nouns['bug']=nounInfo("bug")
nouns['bugaboo']=nounInfo("bugaboo")
nouns['bugbear']=nounInfo("bugbear")
nouns['bugger']=nounInfo("bugger")
nouns['buggery']=nounInfo("buggery")
nouns['buggy']=nounInfo("buggy")
nouns['bugle']=nounInfo("bugle")
nouns['bugler']=nounInfo("bugler")
nouns['buhl']=nounInfo("buhl")
nouns['build']=nounInfo("build")
nouns['builder']=nounInfo("builder")
nouns['building']=nounInfo("building")
nouns['bulb']=nounInfo("bulb")
adjectives['bulbous']=adjInfo("bulbous")
nouns['bulbul']=nounInfo("bulbul")
nouns['bulge']=nounInfo("bulge")
nouns['bulk']=nounInfo("bulk")
nouns['bulkhead']=nounInfo("bulkhead")
adjectives['bulky']=adjInfo("bulky")
nouns['bull']=nounInfo("bull")
nouns['bulldog']=nounInfo("bulldog")
nouns['bulldozer']=nounInfo("bulldozer")
nouns['bullet']=nounInfo("bullet")
nouns['bulletin']=nounInfo("bulletin")
nouns['bullfight']=nounInfo("bullfight")
nouns['bullfighter']=nounInfo("bullfighter")
nouns['bullfinch']=nounInfo("bullfinch")
nouns['bullfrog']=nounInfo("bullfrog")
nouns['bullion']=nounInfo("bullion")
nouns['bullock']=nounInfo("bullock")
nouns['bullring']=nounInfo("bullring")
nouns['bullshit']=nounInfo("bullshit")
adjectives['bully']=adjInfo("bully")
nouns['bully']=nounInfo("bully").addAttributes({"g":"x"})
nouns['bulrush']=nounInfo("bulrush")
nouns['bulwark']=nounInfo("bulwark")
adjectives['bum']=adjInfo("bum")
nouns['bum']=nounInfo("bum")
nouns['bumboat']=nounInfo("bumboat")
adverbs['bump']="bump"
nouns['bump']=nounInfo("bump")
nouns['bumper']=nounInfo("bumper")
nouns['bumpkin']=nounInfo("bumpkin")
adjectives['bumptious']=adjInfo("bumptious")
adverbs['bumptiously']="bumptiously"
nouns['bumptiousness']=nounInfo("bumptiousness")
adjectives['bumpy']=adjInfo("bumpy")
nouns['bun']=nounInfo("bun")
nouns['buna']=nounInfo("buna")
nouns['bunch']=nounInfo("bunch")
nouns['bundle']=nounInfo("bundle")
nouns['bung']=nounInfo("bung")
adjectives['bungaloid']=adjInfo("bungaloid")
nouns['bungalow']=nounInfo("bungalow")
nouns['bungle']=nounInfo("bungle")
nouns['bungler']=nounInfo("bungler")
nouns['bunion']=nounInfo("bunion")
nouns['bunk']=nounInfo("bunk")
nouns['bunker']=nounInfo("bunker")
nouns['bunkum']=nounInfo("bunkum")
nouns['bunny']=nounInfo("bunny")
nouns['bunting']=nounInfo("bunting")
nouns['buoy']=nounInfo("buoy")
nouns['buoyancy']=nounInfo("buoyancy")
adjectives['buoyant']=adjInfo("buoyant")
adverbs['buoyantly']="buoyantly"
nouns['bur']=nounInfo("bur")
nouns['burden']=nounInfo("burden")
adjectives['burdensome']=adjInfo("burdensome")
nouns['burdock']=nounInfo("burdock")
nouns['bureau']=nounInfo("bureau")
nouns['bureaucracy']=nounInfo("bureaucracy")
nouns['bureaucrat']=nounInfo("bureaucrat")
adjectives['bureaucratic']=adjInfo("bureaucratic")
adverbs['bureaucratically']="bureaucratically"
nouns['burette']=nounInfo("burette")
nouns['burg']=nounInfo("burg")
nouns['burgess']=nounInfo("burgess")
nouns['burgh']=nounInfo("burgh")
nouns['burgher']=nounInfo("burgher")
nouns['burglar']=nounInfo("burglar")
adjectives['burglarious']=adjInfo("burglarious")
nouns['burglary']=nounInfo("burglary")
nouns['burgomaster']=nounInfo("burgomaster")
nouns['burial']=nounInfo("burial")
nouns['burlap']=nounInfo("burlap")
nouns['burlesque']=nounInfo("burlesque")
adjectives['burly']=adjInfo("burly")
nouns['burn']=nounInfo("burn")
nouns['burner']=nounInfo("burner")
adjectives['burning']=adjInfo("burning")
nouns['burnouse']=nounInfo("burnouse")
nouns['burp']=nounInfo("burp")
nouns['burr']=nounInfo("burr")
nouns['burrow']=nounInfo("burrow")
nouns['bursar']=nounInfo("bursar")
nouns['bursary']=nounInfo("bursary")
nouns['burst']=nounInfo("burst")
nouns['burthen']=nounInfo("burthen")
nouns['burton']=nounInfo("burton")
nouns['bus']=nounInfo("bus")
nouns['busby']=nounInfo("busby")
nouns['bush']=nounInfo("bush")
nouns['bushel']=nounInfo("bushel")
adjectives['bushy']=adjInfo("bushy")
adverbs['busily']="busily"
nouns['business']=nounInfo("business")
nouns['businessman']=nounInfo("businessman")
nouns['busker']=nounInfo("busker")
nouns['busman']=nounInfo("busman")
nouns['bust']=nounInfo("bust")
nouns['bustard']=nounInfo("bustard")
nouns['buster']=nounInfo("buster")
nouns['bustle']=nounInfo("bustle")
adjectives['busy']=adjInfo("busy")
nouns['busybody']=nounInfo("busybody")
adverbs['but']="but"
nouns['butane']=nounInfo("butane")
adjectives['butch']=adjInfo("butch")
nouns['butcher']=nounInfo("butcher")
nouns['butchery']=nounInfo("butchery")
nouns['butler']=nounInfo("butler")
nouns['butt']=nounInfo("butt")
nouns['butter']=nounInfo("butter")
nouns['butterbean']=nounInfo("butterbean")
nouns['buttercup']=nounInfo("buttercup")
nouns['butterfingers']=nounInfo("butterfingers")
nouns['butterfly']=nounInfo("butterfly")
nouns['buttermilk']=nounInfo("buttermilk")
nouns['butterscotch']=nounInfo("butterscotch")
nouns['buttery']=nounInfo("buttery")
nouns['buttock']=nounInfo("buttock")
nouns['button']=nounInfo("button")
nouns['buttonhole']=nounInfo("buttonhole")
nouns['buttonhook']=nounInfo("buttonhook")
nouns['buttonwood']=nounInfo("buttonwood")
nouns['buttress']=nounInfo("buttress")
adjectives['buxom']=adjInfo("buxom")
nouns['buy']=nounInfo("buy")
nouns['buyer']=nounInfo("buyer").addAttributes({"g":"x"})
nouns['buzz']=nounInfo("buzz")
nouns['buzzard']=nounInfo("buzzard")
nouns['buzzer']=nounInfo("buzzer")
prepositions['by']=P("by")
nouns['bye']=nounInfo("bye")
adjectives['bygone']=adjInfo("bygone")
nouns['bygones']=nounInfo("bygones")
nouns['bypass']=nounInfo("bypass")
nouns['bypath']=nounInfo("bypath")
nouns['byplay']=nounInfo("byplay")
nouns['bystander']=nounInfo("bystander")
nouns['byword']=nounInfo("byword")
nouns['cab']=nounInfo("cab")
nouns['cabal']=nounInfo("cabal")
nouns['cabaret']=nounInfo("cabaret")
nouns['cabbage']=nounInfo("cabbage")
nouns['cabby']=nounInfo("cabby")
nouns['caber']=nounInfo("caber")
nouns['cabin']=nounInfo("cabin")
nouns['cabinet']=nounInfo("cabinet")
nouns['cable']=nounInfo("cable")
nouns['cablegram']=nounInfo("cablegram")
nouns['cabman']=nounInfo("cabman")
nouns['caboodle']=nounInfo("caboodle")
nouns['caboose']=nounInfo("caboose")
nouns['cabstand']=nounInfo("cabstand")
nouns['cacao']=nounInfo("cacao")
nouns['cache']=nounInfo("cache")
nouns['cachet']=nounInfo("cachet")
nouns['cachou']=nounInfo("cachou")
nouns['cackle']=nounInfo("cackle")
nouns['cackler']=nounInfo("cackler")
adjectives['cacophonous']=adjInfo("cacophonous")
nouns['cacophony']=nounInfo("cacophony")
nouns['cactus']=nounInfo("cactus")
nouns['cad']=nounInfo("cad")
nouns['cadaver']=nounInfo("cadaver")
adjectives['cadaverous']=adjInfo("cadaverous")
nouns['caddie']=nounInfo("caddie")
adjectives['caddish']=adjInfo("caddish")
nouns['caddy']=nounInfo("caddy")
nouns['cadence']=nounInfo("cadence")
nouns['cadenza']=nounInfo("cadenza")
nouns['cadet']=nounInfo("cadet")
nouns['cadger']=nounInfo("cadger")
nouns['cadmium']=nounInfo("cadmium")
nouns['cadre']=nounInfo("cadre")
nouns['caesura']=nounInfo("caesura")
nouns['cafeteria']=nounInfo("cafeteria")
nouns['caff']=nounInfo("caff")
nouns['caffeine']=nounInfo("caffeine")
nouns['caftan']=nounInfo("caftan")
nouns['cage']=nounInfo("cage")
adjectives['cagey']=adjInfo("cagey")
adverbs['cagily']="cagily"
nouns['cagoule']=nounInfo("cagoule")
nouns['cahoots']=nounInfo("cahoots")
nouns['caiman']=nounInfo("caiman")
nouns['cairn']=nounInfo("cairn")
nouns['caisson']=nounInfo("caisson")
nouns['caitiff']=nounInfo("caitiff")
nouns['cajolery']=nounInfo("cajolery")
nouns['cake']=nounInfo("cake")
nouns['calabash']=nounInfo("calabash")
adjectives['calamitous']=adjInfo("calamitous")
nouns['calamity']=nounInfo("calamity")
nouns['calcination']=nounInfo("calcination")
nouns['calcium']=nounInfo("calcium")
adjectives['calculable']=adjInfo("calculable")
adjectives['calculating']=adjInfo("calculating")
nouns['calculation']=nounInfo("calculation")
nouns['calculator']=nounInfo("calculator")
nouns['calculus']=nounInfo("calculus")
nouns['caldron']=nounInfo("caldron")
nouns['calendar']=nounInfo("calendar")
nouns['calender']=nounInfo("calender")
nouns['calends']=nounInfo("calends")
nouns['calf']=nounInfo("calf")
nouns['caliber']=nounInfo("caliber")
nouns['calibration']=nounInfo("calibration")
nouns['calibre']=nounInfo("calibre")
nouns['calico']=nounInfo("calico")
nouns['calif']=nounInfo("calif")
nouns['calipers']=nounInfo("calipers")
nouns['caliph']=nounInfo("caliph")
nouns['caliphate']=nounInfo("caliphate")
nouns['calisthenics']=nounInfo("calisthenics")
nouns['calk']=nounInfo("calk")
nouns['call']=nounInfo("call")
nouns['caller']=nounInfo("caller")
nouns['calligraphy']=nounInfo("calligraphy")
nouns['calling']=nounInfo("calling")
nouns['calliope']=nounInfo("calliope")
nouns['callipers']=nounInfo("callipers")
nouns['callisthenics']=nounInfo("callisthenics")
nouns['callosity']=nounInfo("callosity")
adjectives['callous']=adjInfo("callous")
nouns['callousness']=nounInfo("callousness")
adjectives['callow']=adjInfo("callow")
nouns['callowness']=nounInfo("callowness")
nouns['callus']=nounInfo("callus")
adjectives['calm']=adjInfo("calm")
nouns['calm']=nounInfo("calm")
adverbs['calmly']="calmly"
nouns['calmness']=nounInfo("calmness")
nouns['calomel']=nounInfo("calomel")
nouns['calorie']=nounInfo("calorie")
adjectives['calorific']=adjInfo("calorific")
nouns['calumny']=nounInfo("calumny")
nouns['calypso']=nounInfo("calypso")
nouns['calyx']=nounInfo("calyx")
nouns['cam']=nounInfo("cam")
nouns['camaraderie']=nounInfo("camaraderie")
nouns['camber']=nounInfo("camber")
nouns['cambric']=nounInfo("cambric")
nouns['camel']=nounInfo("camel")
nouns['camellia']=nounInfo("camellia")
nouns['cameo']=nounInfo("cameo")
nouns['camera']=nounInfo("camera")
nouns['camion']=nounInfo("camion")
nouns['camomile']=nounInfo("camomile")
nouns['camouflage']=nounInfo("camouflage")
adjectives['camp']=adjInfo("camp")
nouns['camp']=nounInfo("camp")
nouns['campaign']=nounInfo("campaign")
nouns['campaigner']=nounInfo("campaigner")
nouns['campanile']=nounInfo("campanile")
nouns['campanula']=nounInfo("campanula")
nouns['camper']=nounInfo("camper")
nouns['camphor']=nounInfo("camphor")
adjectives['camphorated']=adjInfo("camphorated")
nouns['camping']=nounInfo("camping")
nouns['campion']=nounInfo("campion")
nouns['campus']=nounInfo("campus")
nouns['camshaft']=nounInfo("camshaft")
nouns['can']=nounInfo("can")
nouns['canal']=nounInfo("canal")
nouns['canalization']=nounInfo("canalization")
nouns['canard']=nounInfo("canard")
nouns['canary']=nounInfo("canary")
nouns['canasta']=nounInfo("canasta")
nouns['cancan']=nounInfo("cancan")
nouns['cancellation']=nounInfo("cancellation")
nouns['cancer']=nounInfo("cancer")
adjectives['cancerous']=adjInfo("cancerous")
nouns['candelabrum']=nounInfo("candelabrum")
adjectives['candid']=adjInfo("candid")
nouns['candidate']=nounInfo("candidate")
nouns['candidature']=nounInfo("candidature")
adverbs['candidly']="candidly"
adjectives['candied']=adjInfo("candied")
nouns['candle']=nounInfo("candle")
nouns['candlelight']=nounInfo("candlelight")
nouns['candlestick']=nounInfo("candlestick")
nouns['candour']=nounInfo("candour")
nouns['candy']=nounInfo("candy")
nouns['candytuft']=nounInfo("candytuft")
nouns['cane']=nounInfo("cane")
adjectives['canine']=adjInfo("canine")
nouns['canister']=nounInfo("canister")
nouns['canker']=nounInfo("canker")
adjectives['cankerous']=adjInfo("cankerous")
nouns['canna']=nounInfo("canna")
nouns['cannabis']=nounInfo("cannabis")
adjectives['canned']=adjInfo("canned")
nouns['cannery']=nounInfo("cannery")
nouns['cannibal']=nounInfo("cannibal")
nouns['cannibalism']=nounInfo("cannibalism")
adjectives['cannibalistic']=adjInfo("cannibalistic")
adverbs['cannily']="cannily"
nouns['cannon']=nounInfo("cannon")
nouns['cannonade']=nounInfo("cannonade")
adjectives['canny']=adjInfo("canny")
nouns['canoe']=nounInfo("canoe")
nouns['canoeist']=nounInfo("canoeist")
nouns['canon']=nounInfo("canon")
adjectives['canonical']=adjInfo("canonical")
nouns['canonization']=nounInfo("canonization")
nouns['canopy']=nounInfo("canopy")
nouns['cant']=nounInfo("cant")
nouns['cantaloup']=nounInfo("cantaloup")
nouns['cantaloupe']=nounInfo("cantaloupe")
adjectives['cantankerous']=adjInfo("cantankerous")
adverbs['cantankerously']="cantankerously"
nouns['cantata']=nounInfo("cantata")
nouns['canteen']=nounInfo("canteen")
nouns['canter']=nounInfo("canter")
nouns['canticle']=nounInfo("canticle")
nouns['cantilever']=nounInfo("cantilever")
nouns['canto']=nounInfo("canto")
nouns['canton']=nounInfo("canton")
nouns['cantonment']=nounInfo("cantonment")
nouns['cantor']=nounInfo("cantor")
nouns['canvas']=nounInfo("canvas")
nouns['canvass']=nounInfo("canvass")
nouns['canyon']=nounInfo("canyon")
nouns['cap']=nounInfo("cap")
nouns['capability']=nounInfo("capability")
adjectives['capable']=adjInfo("capable")
adverbs['capably']="capably"
adjectives['capacious']=adjInfo("capacious")
nouns['capacity']=nounInfo("capacity")
nouns['caparison']=nounInfo("caparison")
nouns['cape']=nounInfo("cape")
nouns['caper']=nounInfo("caper")
nouns['capillary']=nounInfo("capillary")
adjectives['capital']=adjInfo("capital")
nouns['capital']=nounInfo("capital")
adjectives['capitalism']=adjInfo("capitalism")
nouns['capitalism']=nounInfo("capitalism")
nouns['capitalist']=nounInfo("capitalist")
adjectives['capitalistic']=adjInfo("capitalistic")
nouns['capitalization']=nounInfo("capitalization")
adverbs['capitally']="capitally"
nouns['capitation']=nounInfo("capitation")
nouns['capitulation']=nounInfo("capitulation")
nouns['capon']=nounInfo("capon")
nouns['caprice']=nounInfo("caprice")
adjectives['capricious']=adjInfo("capricious")
adverbs['capriciously']="capriciously"
nouns['capsicum']=nounInfo("capsicum")
nouns['capstan']=nounInfo("capstan")
nouns['capsule']=nounInfo("capsule")
nouns['captain']=nounInfo("captain").addAttributes({"g":"x"})
nouns['caption']=nounInfo("caption")
adjectives['captious']=adjInfo("captious")
adverbs['captiously']="captiously"
adjectives['captive']=adjInfo("captive")
nouns['captive']=nounInfo("captive")
nouns['captivity']=nounInfo("captivity")
nouns['captor']=nounInfo("captor")
nouns['capture']=nounInfo("capture")
nouns['car']=nounInfo("car")
nouns['carafe']=nounInfo("carafe")
nouns['caramel']=nounInfo("caramel")
nouns['carapace']=nounInfo("carapace")
nouns['carat']=nounInfo("carat")
nouns['caravan']=nounInfo("caravan")
nouns['caravanning']=nounInfo("caravanning")
nouns['caravansary']=nounInfo("caravansary")
nouns['caravanserai']=nounInfo("caravanserai")
nouns['caraway']=nounInfo("caraway")
nouns['carbide']=nounInfo("carbide")
nouns['carbine']=nounInfo("carbine")
nouns['carbohydrate']=nounInfo("carbohydrate")
adjectives['carbolic']=adjInfo("carbolic")
nouns['carbon']=nounInfo("carbon")
adjectives['carbonated']=adjInfo("carbonated")
adjectives['carbonic']=adjInfo("carbonic")
adjectives['carboniferous']=adjInfo("carboniferous")
nouns['carbonization']=nounInfo("carbonization")
nouns['carborundum']=nounInfo("carborundum")
nouns['carboy']=nounInfo("carboy")
nouns['carbuncle']=nounInfo("carbuncle")
nouns['carburettor']=nounInfo("carburettor")
nouns['carcase']=nounInfo("carcase")
nouns['carcass']=nounInfo("carcass")
nouns['card']=nounInfo("card")
nouns['cardamom']=nounInfo("cardamom")
nouns['cardboard']=nounInfo("cardboard")
adjectives['cardiac']=adjInfo("cardiac")
nouns['cardigan']=nounInfo("cardigan")
adjectives['cardinal']=adjInfo("cardinal")
nouns['cardinal']=nounInfo("cardinal")
nouns['care']=nounInfo("care")
nouns['career']=nounInfo("career")
nouns['careerist']=nounInfo("careerist")
adjectives['carefree']=adjInfo("carefree")
adjectives['careful']=adjInfo("careful")
adverbs['carefully']="carefully"
nouns['carefulness']=nounInfo("carefulness")
adjectives['careladen']=adjInfo("careladen")
adjectives['careless']=adjInfo("careless")
adverbs['carelessly']="carelessly"
nouns['carelessness']=nounInfo("carelessness")
nouns['caress']=nounInfo("caress")
adjectives['caressing']=adjInfo("caressing")
adverbs['caressingly']="caressingly"
nouns['caret']=nounInfo("caret")
nouns['caretaker']=nounInfo("caretaker")
adjectives['careworn']=adjInfo("careworn")
nouns['cargo']=nounInfo("cargo")
nouns['caribou']=nounInfo("caribou")
nouns['caricature']=nounInfo("caricature")
nouns['caricaturist']=nounInfo("caricaturist")
nouns['caries']=nounInfo("caries")
nouns['carillon']=nounInfo("carillon")
adjectives['carious']=adjInfo("carious")
adjectives['carmine']=adjInfo("carmine")
nouns['carmine']=nounInfo("carmine")
nouns['carnage']=nounInfo("carnage")
adjectives['carnal']=adjInfo("carnal")
adverbs['carnally']="carnally"
nouns['carnation']=nounInfo("carnation")
nouns['carnival']=nounInfo("carnival")
nouns['carnivore']=nounInfo("carnivore")
adjectives['carnivorous']=adjInfo("carnivorous")
nouns['carol']=nounInfo("carol")
nouns['caroller']=nounInfo("caroller")
nouns['carousal']=nounInfo("carousal")
nouns['carp']=nounInfo("carp")
adjectives['carpal']=adjInfo("carpal")
nouns['carpal']=nounInfo("carpal")
nouns['carpenter']=nounInfo("carpenter")
nouns['carpentry']=nounInfo("carpentry")
nouns['carpet']=nounInfo("carpet")
nouns['carpetbagger']=nounInfo("carpetbagger")
nouns['carriage']=nounInfo("carriage")
nouns['carriageway']=nounInfo("carriageway")
nouns['carrier']=nounInfo("carrier")
nouns['carrion']=nounInfo("carrion")
nouns['carrot']=nounInfo("carrot")
adjectives['carroty']=adjInfo("carroty")
nouns['carry']=nounInfo("carry")
nouns['cart']=nounInfo("cart")
nouns['cartage']=nounInfo("cartage")
nouns['cartel']=nounInfo("cartel")
nouns['carter']=nounInfo("carter")
nouns['cartilage']=nounInfo("cartilage")
adjectives['cartilaginous']=adjInfo("cartilaginous")
nouns['cartographer']=nounInfo("cartographer")
nouns['cartography']=nounInfo("cartography")
nouns['carton']=nounInfo("carton")
nouns['cartoon']=nounInfo("cartoon")
nouns['cartoonist']=nounInfo("cartoonist")
nouns['cartridge']=nounInfo("cartridge")
nouns['carver']=nounInfo("carver")
nouns['carving']=nounInfo("carving")
nouns['caryatid']=nounInfo("caryatid")
nouns['cascade']=nounInfo("cascade")
nouns['case']=nounInfo("case")
nouns['casebook']=nounInfo("casebook")
nouns['casein']=nounInfo("casein")
nouns['casement']=nounInfo("casement")
nouns['casework']=nounInfo("casework")
nouns['cash']=nounInfo("cash")
adjectives['cashable']=adjInfo("cashable")
nouns['cashew']=nounInfo("cashew")
nouns['cashier']=nounInfo("cashier")
nouns['cashmere']=nounInfo("cashmere")
nouns['casing']=nounInfo("casing")
nouns['casino']=nounInfo("casino")
nouns['cask']=nounInfo("cask")
nouns['casket']=nounInfo("casket")
nouns['cassava']=nounInfo("cassava")
nouns['casserole']=nounInfo("casserole")
nouns['cassette']=nounInfo("cassette")
nouns['cassock']=nounInfo("cassock")
nouns['cassowary']=nounInfo("cassowary")
nouns['cast']=nounInfo("cast")
nouns['castanets']=nounInfo("castanets")
nouns['castaway']=nounInfo("castaway").addAttributes({"g":"x"})
nouns['caste']=nounInfo("caste")
adjectives['castellated']=adjInfo("castellated")
nouns['caster']=nounInfo("caster")
nouns['castigation']=nounInfo("castigation")
nouns['casting']=nounInfo("casting")
nouns['castle']=nounInfo("castle")
nouns['castor']=nounInfo("castor")
nouns['castration']=nounInfo("castration")
adjectives['casual']=adjInfo("casual")
adverbs['casually']="casually"
nouns['casualty']=nounInfo("casualty")
nouns['casuist']=nounInfo("casuist")
adjectives['casuistic']=adjInfo("casuistic")
adjectives['casuistical']=adjInfo("casuistical")
nouns['casuistry']=nounInfo("casuistry")
nouns['cat']=nounInfo("cat")
nouns['cataclysm']=nounInfo("cataclysm")
adjectives['cataclysmic']=adjInfo("cataclysmic")
nouns['catacomb']=nounInfo("catacomb")
nouns['catafalque']=nounInfo("catafalque")
nouns['catalepsy']=nounInfo("catalepsy")
adjectives['cataleptic']=adjInfo("cataleptic")
nouns['cataleptic']=nounInfo("cataleptic")
nouns['catalogue']=nounInfo("catalogue")
nouns['catalpa']=nounInfo("catalpa")
nouns['catalysis']=nounInfo("catalysis")
nouns['catalyst']=nounInfo("catalyst")
adjectives['catalytic']=adjInfo("catalytic")
adverbs['catalytically']="catalytically"
nouns['catamaran']=nounInfo("catamaran")
nouns['catapult']=nounInfo("catapult")
nouns['cataract']=nounInfo("cataract")
nouns['catarrh']=nounInfo("catarrh")
nouns['catastrophe']=nounInfo("catastrophe")
adjectives['catastrophic']=adjInfo("catastrophic")
adverbs['catastrophically']="catastrophically"
nouns['catcall']=nounInfo("catcall")
nouns['catch']=nounInfo("catch")
nouns['catcher']=nounInfo("catcher")
adjectives['catching']=adjInfo("catching")
nouns['catchment']=nounInfo("catchment")
adjectives['catchpenny']=adjInfo("catchpenny")
nouns['catchup']=nounInfo("catchup")
nouns['catchword']=nounInfo("catchword")
adjectives['catchy']=adjInfo("catchy")
nouns['catechism']=nounInfo("catechism")
adjectives['categorical']=adjInfo("categorical")
adverbs['categorically']="categorically"
nouns['categorization']=nounInfo("categorization")
nouns['category']=nounInfo("category")
nouns['caterer']=nounInfo("caterer")
nouns['caterpillar']=nounInfo("caterpillar")
nouns['caterwaul']=nounInfo("caterwaul")
nouns['catfish']=nounInfo("catfish")
nouns['catgut']=nounInfo("catgut")
nouns['catharsis']=nounInfo("catharsis")
nouns['cathartic']=nounInfo("cathartic")
nouns['cathedral']=nounInfo("cathedral")
nouns['cathode']=nounInfo("cathode")
adjectives['catholic']=adjInfo("catholic")
nouns['catholicity']=nounInfo("catholicity")
nouns['catkin']=nounInfo("catkin")
nouns['catsup']=nounInfo("catsup")
nouns['cattiness']=nounInfo("cattiness")
adjectives['cattish']=adjInfo("cattish")
nouns['cattle']=nounInfo("cattle")
nouns['cattleman']=nounInfo("cattleman")
adjectives['catty']=adjInfo("catty")
nouns['caucus']=nounInfo("caucus")
nouns['caul']=nounInfo("caul")
nouns['cauldron']=nounInfo("cauldron")
nouns['cauliflower']=nounInfo("cauliflower")
adjectives['causal']=adjInfo("causal")
nouns['causality']=nounInfo("causality")
nouns['causation']=nounInfo("causation")
adjectives['causative']=adjInfo("causative")
nouns['cause']=nounInfo("cause")
adjectives['causeless']=adjInfo("causeless")
nouns['causerie']=nounInfo("causerie")
nouns['causeway']=nounInfo("causeway")
adjectives['caustic']=adjInfo("caustic")
adverbs['caustically']="caustically"
nouns['caution']=nounInfo("caution")
adjectives['cautionary']=adjInfo("cautionary")
adjectives['cautious']=adjInfo("cautious")
adverbs['cautiously']="cautiously"
nouns['cavalcade']=nounInfo("cavalcade")
adjectives['cavalier']=adjInfo("cavalier")
nouns['cavalier']=nounInfo("cavalier")
adverbs['cavalierly']="cavalierly"
nouns['cavalry']=nounInfo("cavalry")
nouns['cave']=nounInfo("cave")
nouns['caveat']=nounInfo("caveat")
nouns['caveman']=nounInfo("caveman")
nouns['cavern']=nounInfo("cavern")
adjectives['cavernous']=adjInfo("cavernous")
nouns['caviar']=nounInfo("caviar")
nouns['caviare']=nounInfo("caviare")
nouns['cavity']=nounInfo("cavity")
nouns['caw']=nounInfo("caw")
nouns['cayenne']=nounInfo("cayenne")
nouns['cayman']=nounInfo("cayman")
nouns['cease']=nounInfo("cease")
adjectives['ceaseless']=adjInfo("ceaseless")
adverbs['ceaselessly']="ceaselessly"
nouns['cedar']=nounInfo("cedar")
nouns['cedilla']=nounInfo("cedilla")
nouns['ceiling']=nounInfo("ceiling")
nouns['celandine']=nounInfo("celandine")
nouns['celebrant']=nounInfo("celebrant")
adjectives['celebrated']=adjInfo("celebrated")
nouns['celebration']=nounInfo("celebration")
nouns['celebrity']=nounInfo("celebrity")
nouns['celerity']=nounInfo("celerity")
nouns['celery']=nounInfo("celery")
adjectives['celestial']=adjInfo("celestial")
nouns['celibacy']=nounInfo("celibacy")
nouns['celibate']=nounInfo("celibate")
nouns['cell']=nounInfo("cell")
nouns['cellar']=nounInfo("cellar")
nouns['cellarage']=nounInfo("cellarage")
nouns['cellist']=nounInfo("cellist")
nouns['cello']=nounInfo("cello")
nouns['cellophane']=nounInfo("cellophane")
adjectives['cellular']=adjInfo("cellular")
nouns['celluloid']=nounInfo("celluloid")
nouns['cellulose']=nounInfo("cellulose")
nouns['cement']=nounInfo("cement")
nouns['cemetery']=nounInfo("cemetery")
nouns['cenotaph']=nounInfo("cenotaph")
nouns['censer']=nounInfo("censer")
nouns['censor']=nounInfo("censor")
adjectives['censorious']=adjInfo("censorious")
nouns['censorship']=nounInfo("censorship")
nouns['censure']=nounInfo("censure")
nouns['census']=nounInfo("census")
nouns['cent']=nounInfo("cent")
nouns['centaur']=nounInfo("centaur")
adjectives['centenarian']=adjInfo("centenarian")
nouns['centenarian']=nounInfo("centenarian")
adjectives['centenary']=adjInfo("centenary")
nouns['centenary']=nounInfo("centenary")
adjectives['centennial']=adjInfo("centennial")
nouns['centennial']=nounInfo("centennial")
adverbs['centennially']="centennially"
nouns['centerpiece']=nounInfo("centerpiece")
adjectives['centigrade']=adjInfo("centigrade")
nouns['centime']=nounInfo("centime")
nouns['centimetre']=nounInfo("centimetre")
nouns['centipede']=nounInfo("centipede")
adjectives['central']=adjInfo("central")
nouns['central']=nounInfo("central")
nouns['centralization']=nounInfo("centralization")
adverbs['centrally']="centrally"
nouns['centre']=nounInfo("centre")
adjectives['centrifugal']=adjInfo("centrifugal")
nouns['centrifuge']=nounInfo("centrifuge")
adjectives['centripetal']=adjInfo("centripetal")
nouns['centurion']=nounInfo("centurion")
nouns['century']=nounInfo("century")
adjectives['ceramic']=adjInfo("ceramic")
nouns['ceramics']=nounInfo("ceramics")
nouns['cereal']=nounInfo("cereal")
adjectives['cerebral']=adjInfo("cerebral")
nouns['cerebration']=nounInfo("cerebration")
adjectives['ceremonial']=adjInfo("ceremonial")
nouns['ceremonial']=nounInfo("ceremonial")
adverbs['ceremonially']="ceremonially"
adjectives['ceremonious']=adjInfo("ceremonious")
adverbs['ceremoniously']="ceremoniously"
nouns['ceremony']=nounInfo("ceremony")
adjectives['cerise']=adjInfo("cerise")
nouns['cerise']=nounInfo("cerise")
nouns['cert']=nounInfo("cert")
adjectives['certain']=adjInfo("certain")
adverbs['certainly']="certainly"
nouns['certainty']=nounInfo("certainty")
adjectives['certifiable']=adjInfo("certifiable")
nouns['certificate']=nounInfo("certificate")
adjectives['certificated']=adjInfo("certificated")
nouns['certification']=nounInfo("certification")
nouns['certitude']=nounInfo("certitude")
adjectives['cerulean']=adjInfo("cerulean")
adjectives['cervical']=adjInfo("cervical")
nouns['cervix']=nounInfo("cervix")
nouns['cessation']=nounInfo("cessation")
nouns['cession']=nounInfo("cession")
nouns['cesspit']=nounInfo("cesspit")
nouns['cesspool']=nounInfo("cesspool")
nouns['chafe']=nounInfo("chafe")
nouns['chaff']=nounInfo("chaff")
nouns['chaffinch']=nounInfo("chaffinch")
nouns['chagrin']=nounInfo("chagrin")
nouns['chain']=nounInfo("chain")
nouns['chair']=nounInfo("chair")
nouns['chairman']=nounInfo("chairman")
nouns['chairperson']=nounInfo("chairperson").addAttributes({"g":"x"})
nouns['chaise']=nounInfo("chaise")
nouns['chalet']=nounInfo("chalet")
nouns['chalice']=nounInfo("chalice")
nouns['chalk']=nounInfo("chalk")
nouns['chalkpit']=nounInfo("chalkpit")
adjectives['chalky']=adjInfo("chalky")
nouns['challenge']=nounInfo("challenge")
nouns['challenger']=nounInfo("challenger")
nouns['chamber']=nounInfo("chamber")
nouns['chamberlain']=nounInfo("chamberlain")
nouns['chambermaid']=nounInfo("chambermaid")
nouns['chamberpot']=nounInfo("chamberpot")
nouns['chameleon']=nounInfo("chameleon")
nouns['chamois']=nounInfo("chamois")
nouns['champ']=nounInfo("champ")
nouns['champagne']=nounInfo("champagne")
adjectives['champion']=adjInfo("champion")
adverbs['champion']="champion"
nouns['champion']=nounInfo("champion")
nouns['championship']=nounInfo("championship")
nouns['chance']=nounInfo("chance")
nouns['chancel']=nounInfo("chancel")
nouns['chancellery']=nounInfo("chancellery")
nouns['chancellor']=nounInfo("chancellor")
nouns['chancery']=nounInfo("chancery")
adjectives['chancy']=adjInfo("chancy")
nouns['chandelier']=nounInfo("chandelier")
nouns['chandler']=nounInfo("chandler")
nouns['change']=nounInfo("change")
adjectives['changeable']=adjInfo("changeable")
nouns['changeableness']=nounInfo("changeableness")
adjectives['changeful']=adjInfo("changeful")
adjectives['changeless']=adjInfo("changeless")
nouns['changeling']=nounInfo("changeling")
nouns['channel']=nounInfo("channel")
nouns['chant']=nounInfo("chant")
nouns['chaos']=nounInfo("chaos")
adjectives['chaotic']=adjInfo("chaotic")
adverbs['chaotically']="chaotically"
nouns['chap']=nounInfo("chap")
nouns['chapel']=nounInfo("chapel")
nouns['chapelgoer']=nounInfo("chapelgoer")
nouns['chaperon']=nounInfo("chaperon")
adjectives['chapfallen']=adjInfo("chapfallen")
nouns['chaplain']=nounInfo("chaplain")
nouns['chaplaincy']=nounInfo("chaplaincy")
nouns['chaplet']=nounInfo("chaplet")
nouns['chapman']=nounInfo("chapman")
nouns['chapter']=nounInfo("chapter")
nouns['char']=nounInfo("char")
nouns['charabanc']=nounInfo("charabanc")
nouns['character']=nounInfo("character")
adjectives['characteristic']=adjInfo("characteristic")
adverbs['characteristically']="characteristically"
adjectives['characterless']=adjInfo("characterless")
nouns['charade']=nounInfo("charade")
nouns['charcoal']=nounInfo("charcoal")
nouns['chard']=nounInfo("chard")
nouns['charge']=nounInfo("charge")
adjectives['chargeable']=adjInfo("chargeable")
nouns['charger']=nounInfo("charger")
adverbs['charily']="charily"
nouns['chariot']=nounInfo("chariot")
nouns['charioteer']=nounInfo("charioteer")
nouns['charisma']=nounInfo("charisma")
adjectives['charismatic']=adjInfo("charismatic")
adjectives['charitable']=adjInfo("charitable")
adverbs['charitably']="charitably"
nouns['charity']=nounInfo("charity")
nouns['charivari']=nounInfo("charivari")
nouns['charlady']=nounInfo("charlady")
nouns['charlatan']=nounInfo("charlatan")
nouns['charlock']=nounInfo("charlock")
nouns['charm']=nounInfo("charm")
nouns['charmer']=nounInfo("charmer")
adjectives['charming']=adjInfo("charming")
adverbs['charmingly']="charmingly"
nouns['chart']=nounInfo("chart")
nouns['charter']=nounInfo("charter")
nouns['chartreuse']=nounInfo("chartreuse")
nouns['charwoman']=nounInfo("charwoman")
adjectives['chary']=adjInfo("chary")
nouns['chase']=nounInfo("chase")
nouns['chaser']=nounInfo("chaser")
nouns['chasm']=nounInfo("chasm")
nouns['chassis']=nounInfo("chassis")
adjectives['chaste']=adjInfo("chaste")
adverbs['chastely']="chastely"
nouns['chastisement']=nounInfo("chastisement")
nouns['chastity']=nounInfo("chastity")
nouns['chasuble']=nounInfo("chasuble")
nouns['chat']=nounInfo("chat")
nouns['chateau']=nounInfo("chateau")
nouns['chatelaine']=nounInfo("chatelaine")
nouns['chattel']=nounInfo("chattel")
nouns['chatter']=nounInfo("chatter")
nouns['chatterbox']=nounInfo("chatterbox")
adverbs['chattily']="chattily"
adjectives['chatty']=adjInfo("chatty")
nouns['chauffeur']=nounInfo("chauffeur")
nouns['chauffeuse']=nounInfo("chauffeuse")
nouns['chauvinism']=nounInfo("chauvinism")
nouns['chauvinist']=nounInfo("chauvinist")
adjectives['chauvinistic']=adjInfo("chauvinistic")
nouns['chaw']=nounInfo("chaw")
adjectives['cheap']=adjInfo("cheap")
adjectives['cheapjack']=adjInfo("cheapjack")
adverbs['cheaply']="cheaply"
nouns['cheapness']=nounInfo("cheapness")
nouns['cheat']=nounInfo("cheat")
nouns['check']=nounInfo("check")
nouns['checkbook']=nounInfo("checkbook")
adjectives['checked']=adjInfo("checked")
nouns['checker']=nounInfo("checker")
nouns['checkers']=nounInfo("checkers")
nouns['checkmate']=nounInfo("checkmate")
nouns['checkout']=nounInfo("checkout")
nouns['checkpoint']=nounInfo("checkpoint")
nouns['checkroom']=nounInfo("checkroom")
nouns['checkup']=nounInfo("checkup")
nouns['cheek']=nounInfo("cheek")
nouns['cheekbone']=nounInfo("cheekbone")
adjectives['cheeked']=adjInfo("cheeked")
adverbs['cheekily']="cheekily"
adjectives['cheeky']=adjInfo("cheeky")
nouns['cheep']=nounInfo("cheep")
nouns['cheer']=nounInfo("cheer")
adjectives['cheerful']=adjInfo("cheerful")
adverbs['cheerfully']="cheerfully"
nouns['cheerfulness']=nounInfo("cheerfulness")
adverbs['cheerily']="cheerily"
adjectives['cheering']=adjInfo("cheering")
nouns['cheering']=nounInfo("cheering")
nouns['cheerio']=nounInfo("cheerio")
adjectives['cheerless']=adjInfo("cheerless")
adverbs['cheerlessly']="cheerlessly"
nouns['cheerlessness']=nounInfo("cheerlessness")
adjectives['cheery']=adjInfo("cheery")
nouns['cheese']=nounInfo("cheese")
nouns['cheetah']=nounInfo("cheetah")
nouns['chef']=nounInfo("chef")
adjectives['chemical']=adjInfo("chemical")
nouns['chemical']=nounInfo("chemical")
adverbs['chemically']="chemically"
nouns['chemise']=nounInfo("chemise")
nouns['chemist']=nounInfo("chemist")
nouns['chemistry']=nounInfo("chemistry")
nouns['chemotherapy']=nounInfo("chemotherapy")
nouns['chenille']=nounInfo("chenille")
nouns['cheque']=nounInfo("cheque")
nouns['cheroot']=nounInfo("cheroot")
adjectives['cherry']=adjInfo("cherry")
nouns['cherry']=nounInfo("cherry")
nouns['cherub']=nounInfo("cherub")
adjectives['cherubic']=adjInfo("cherubic")
nouns['chervil']=nounInfo("chervil")
nouns['chess']=nounInfo("chess")
nouns['chessboard']=nounInfo("chessboard")
nouns['chessman']=nounInfo("chessman")
nouns['chest']=nounInfo("chest")
nouns['chesterfield']=nounInfo("chesterfield")
nouns['chestnut']=nounInfo("chestnut")
nouns['chevron']=nounInfo("chevron")
nouns['chew']=nounInfo("chew")
nouns['chiaroscuro']=nounInfo("chiaroscuro")
adjectives['chic']=adjInfo("chic")
nouns['chic']=nounInfo("chic")
nouns['chicanery']=nounInfo("chicanery")
adjectives['chichi']=adjInfo("chichi")
nouns['chick']=nounInfo("chick")
nouns['chicken']=nounInfo("chicken")
nouns['chickenfeed']=nounInfo("chickenfeed")
nouns['chickenpox']=nounInfo("chickenpox")
nouns['chickpea']=nounInfo("chickpea")
nouns['chickweed']=nounInfo("chickweed")
nouns['chicle']=nounInfo("chicle")
nouns['chicory']=nounInfo("chicory")
adjectives['chief']=adjInfo("chief")
nouns['chief']=nounInfo("chief")
adverbs['chiefly']="chiefly"
nouns['chieftain']=nounInfo("chieftain")
nouns['chieftaincy']=nounInfo("chieftaincy")
nouns['chiffon']=nounInfo("chiffon")
nouns['chiffonier']=nounInfo("chiffonier")
nouns['chignon']=nounInfo("chignon")
nouns['chilblain']=nounInfo("chilblain")
adjectives['chilblained']=adjInfo("chilblained")
nouns['child']=nounInfo("child").addAttributes({"g":"x"})
nouns['childbirth']=nounInfo("childbirth")
nouns['childhood']=nounInfo("childhood")
adjectives['childish']=adjInfo("childish")
adverbs['childishly']="childishly"
adjectives['childless']=adjInfo("childless")
adjectives['childlike']=adjInfo("childlike")
adjectives['chill']=adjInfo("chill")
nouns['chill']=nounInfo("chill")
nouns['chilli']=nounInfo("chilli")
adjectives['chilly']=adjInfo("chilly")
nouns['chilly']=nounInfo("chilly")
nouns['chimaera']=nounInfo("chimaera")
nouns['chime']=nounInfo("chime")
nouns['chimera']=nounInfo("chimera")
adjectives['chimerical']=adjInfo("chimerical")
nouns['chimney']=nounInfo("chimney")
nouns['chimneybreast']=nounInfo("chimneybreast")
nouns['chimneypiece']=nounInfo("chimneypiece")
nouns['chimneypot']=nounInfo("chimneypot")
nouns['chimneystack']=nounInfo("chimneystack")
nouns['chimneysweep']=nounInfo("chimneysweep")
nouns['chimneysweeper']=nounInfo("chimneysweeper")
nouns['chimp']=nounInfo("chimp")
nouns['chimpanzee']=nounInfo("chimpanzee")
nouns['chin']=nounInfo("chin")
nouns['china']=nounInfo("china")
nouns['chinaware']=nounInfo("chinaware")
nouns['chinchilla']=nounInfo("chinchilla")
nouns['chine']=nounInfo("chine")
nouns['chink']=nounInfo("chink")
nouns['chintz']=nounInfo("chintz")
nouns['chip']=nounInfo("chip")
nouns['chipboard']=nounInfo("chipboard")
nouns['chipmunk']=nounInfo("chipmunk")
nouns['chippings']=nounInfo("chippings")
nouns['chiropodist']=nounInfo("chiropodist")
nouns['chiropody']=nounInfo("chiropody")
nouns['chiropractor']=nounInfo("chiropractor")
nouns['chirp']=nounInfo("chirp")
adverbs['chirpily']="chirpily"
nouns['chirpiness']=nounInfo("chirpiness")
adjectives['chirpy']=adjInfo("chirpy")
nouns['chirrup']=nounInfo("chirrup")
nouns['chisel']=nounInfo("chisel")
nouns['chiseller']=nounInfo("chiseller")
nouns['chit']=nounInfo("chit")
adjectives['chivalrous']=adjInfo("chivalrous")
nouns['chivalry']=nounInfo("chivalry")
nouns['chive']=nounInfo("chive")
nouns['chloride']=nounInfo("chloride")
nouns['chlorination']=nounInfo("chlorination")
nouns['chlorine']=nounInfo("chlorine")
nouns['chloroform']=nounInfo("chloroform")
nouns['chlorophyll']=nounInfo("chlorophyll")
nouns['choc']=nounInfo("choc")
nouns['chock']=nounInfo("chock")
nouns['chocolate']=nounInfo("chocolate")
adjectives['choice']=adjInfo("choice")
nouns['choice']=nounInfo("choice")
nouns['choir']=nounInfo("choir")
nouns['choke']=nounInfo("choke")
nouns['choker']=nounInfo("choker")
nouns['chokey']=nounInfo("chokey")
nouns['choky']=nounInfo("choky")
nouns['choler']=nounInfo("choler")
nouns['cholera']=nounInfo("cholera")
adjectives['choleric']=adjInfo("choleric")
adjectives['choosey']=adjInfo("choosey")
adjectives['choosy']=adjInfo("choosy")
nouns['chop']=nounInfo("chop")
nouns['chopper']=nounInfo("chopper")
adjectives['choppy']=adjInfo("choppy")
nouns['chopstick']=nounInfo("chopstick")
adjectives['choral']=adjInfo("choral")
nouns['chorale']=nounInfo("chorale")
nouns['chord']=nounInfo("chord")
nouns['chore']=nounInfo("chore")
nouns['choreographer']=nounInfo("choreographer")
nouns['choreography']=nounInfo("choreography")
nouns['chorister']=nounInfo("chorister")
nouns['chortle']=nounInfo("chortle")
nouns['chorus']=nounInfo("chorus")
nouns['chow']=nounInfo("chow")
nouns['chowder']=nounInfo("chowder")
nouns['christening']=nounInfo("christening")
adjectives['chromatic']=adjInfo("chromatic")
nouns['chrome']=nounInfo("chrome")
nouns['chromium']=nounInfo("chromium")
nouns['chromosome']=nounInfo("chromosome")
adjectives['chronic']=adjInfo("chronic")
adverbs['chronically']="chronically"
nouns['chronicle']=nounInfo("chronicle")
adjectives['chronological']=adjInfo("chronological")
adverbs['chronologically']="chronologically"
nouns['chronology']=nounInfo("chronology")
nouns['chronometer']=nounInfo("chronometer")
nouns['chrysalis']=nounInfo("chrysalis")
nouns['chrysanthemum']=nounInfo("chrysanthemum")
adjectives['chubby']=adjInfo("chubby")
nouns['chuck']=nounInfo("chuck")
nouns['chuckle']=nounInfo("chuckle")
nouns['chug']=nounInfo("chug")
nouns['chukker']=nounInfo("chukker")
nouns['chum']=nounInfo("chum")
adjectives['chummy']=adjInfo("chummy")
nouns['chump']=nounInfo("chump")
nouns['chunk']=nounInfo("chunk")
adjectives['chunky']=adjInfo("chunky")
nouns['church']=nounInfo("church")
nouns['churchgoer']=nounInfo("churchgoer")
nouns['churchwarden']=nounInfo("churchwarden")
nouns['churchyard']=nounInfo("churchyard")
nouns['churl']=nounInfo("churl")
adverbs['churlish']="churlish"
adverbs['churlishly']="churlishly"
nouns['churn']=nounInfo("churn")
nouns['chute']=nounInfo("chute")
nouns['chutney']=nounInfo("chutney")
nouns['cicada']=nounInfo("cicada")
nouns['cicala']=nounInfo("cicala")
nouns['cicatrice']=nounInfo("cicatrice")
nouns['cicatrix']=nounInfo("cicatrix")
nouns['cicerone']=nounInfo("cicerone")
nouns['cider']=nounInfo("cider")
nouns['ciderpress']=nounInfo("ciderpress")
nouns['cigar']=nounInfo("cigar")
nouns['cigarette']=nounInfo("cigarette")
nouns['cinch']=nounInfo("cinch")
nouns['cinchona']=nounInfo("cinchona")
nouns['cincture']=nounInfo("cincture")
nouns['cinder']=nounInfo("cinder")
nouns['cinema']=nounInfo("cinema")
adjectives['cinematic']=adjInfo("cinematic")
nouns['cinematography']=nounInfo("cinematography")
nouns['cinnamon']=nounInfo("cinnamon")
nouns['cinquefoil']=nounInfo("cinquefoil")
nouns['cipher']=nounInfo("cipher")
prepositions['circa']=P("circa")
nouns['circle']=nounInfo("circle")
nouns['circlet']=nounInfo("circlet")
nouns['circuit']=nounInfo("circuit")
adjectives['circuitous']=adjInfo("circuitous")
adjectives['circular']=adjInfo("circular")
nouns['circular']=nounInfo("circular")
nouns['circulation']=nounInfo("circulation")
nouns['circumcision']=nounInfo("circumcision")
nouns['circumference']=nounInfo("circumference")
nouns['circumflex']=nounInfo("circumflex")
nouns['circumlocution']=nounInfo("circumlocution")
nouns['circumnavigation']=nounInfo("circumnavigation")
nouns['circumscription']=nounInfo("circumscription")
adjectives['circumspect']=adjInfo("circumspect")
nouns['circumspection']=nounInfo("circumspection")
adverbs['circumspectly']="circumspectly"
nouns['circumstance']=nounInfo("circumstance")
adjectives['circumstantial']=adjInfo("circumstantial")
adverbs['circumstantially']="circumstantially"
nouns['circumvention']=nounInfo("circumvention")
nouns['circus']=nounInfo("circus")
nouns['cirrhosis']=nounInfo("cirrhosis")
nouns['cirrus']=nounInfo("cirrus")
adjectives['cissy']=adjInfo("cissy")
nouns['cissy']=nounInfo("cissy")
nouns['cistern']=nounInfo("cistern")
nouns['citadel']=nounInfo("citadel")
nouns['citation']=nounInfo("citation")
nouns['citizen']=nounInfo("citizen").addAttributes({"g":"x"})
nouns['citizenship']=nounInfo("citizenship")
adjectives['citric']=adjInfo("citric")
nouns['citron']=nounInfo("citron")
adjectives['citrous']=adjInfo("citrous")
nouns['citrus']=nounInfo("citrus")
nouns['city']=nounInfo("city")
nouns['civet']=nounInfo("civet")
adjectives['civic']=adjInfo("civic")
nouns['civics']=nounInfo("civics")
nouns['civie']=nounInfo("civie")
adjectives['civil']=adjInfo("civil")
adjectives['civilian']=adjInfo("civilian")
nouns['civilian']=nounInfo("civilian")
adverbs['civilisedly']="civilisedly"
nouns['civility']=nounInfo("civility")
nouns['civilization']=nounInfo("civilization")
adverbs['civilly']="civilly"
nouns['civvy']=nounInfo("civvy")
nouns['clack']=nounInfo("clack")
nouns['claim']=nounInfo("claim")
nouns['claimant']=nounInfo("claimant")
nouns['clairvoyance']=nounInfo("clairvoyance")
nouns['clairvoyant']=nounInfo("clairvoyant")
nouns['clam']=nounInfo("clam")
nouns['clambake']=nounInfo("clambake")
nouns['clamber']=nounInfo("clamber")
adverbs['clammily']="clammily"
adjectives['clammy']=adjInfo("clammy")
adjectives['clamorous']=adjInfo("clamorous")
nouns['clamour']=nounInfo("clamour")
nouns['clamp']=nounInfo("clamp")
nouns['clan']=nounInfo("clan")
adjectives['clandestine']=adjInfo("clandestine")
adverbs['clandestinely']="clandestinely"
nouns['clang']=nounInfo("clang")
nouns['clanger']=nounInfo("clanger")
adjectives['clangorous']=adjInfo("clangorous")
nouns['clangour']=nounInfo("clangour")
nouns['clank']=nounInfo("clank")
adjectives['clannish']=adjInfo("clannish")
adverbs['clannishly']="clannishly"
nouns['clansman']=nounInfo("clansman")
nouns['clap']=nounInfo("clap")
nouns['clapboard']=nounInfo("clapboard")
nouns['clapper']=nounInfo("clapper")
nouns['clapperboard']=nounInfo("clapperboard")
nouns['claptrap']=nounInfo("claptrap")
nouns['claque']=nounInfo("claque")
nouns['claret']=nounInfo("claret")
nouns['clarification']=nounInfo("clarification")
nouns['clarinet']=nounInfo("clarinet")
nouns['clarinetist']=nounInfo("clarinetist")
nouns['clarinettist']=nounInfo("clarinettist")
nouns['clarion']=nounInfo("clarion")
nouns['clarity']=nounInfo("clarity")
nouns['clash']=nounInfo("clash")
nouns['clasp']=nounInfo("clasp")
nouns['class']=nounInfo("class")
adjectives['classic']=adjInfo("classic")
nouns['classic']=nounInfo("classic")
adjectives['classical']=adjInfo("classical")
adverbs['classically']="classically"
nouns['classicist']=nounInfo("classicist")
adjectives['classifiable']=adjInfo("classifiable")
nouns['classification']=nounInfo("classification")
adjectives['classified']=adjInfo("classified")
adjectives['classless']=adjInfo("classless")
nouns['classroom']=nounInfo("classroom")
adjectives['classy']=adjInfo("classy")
nouns['clatter']=nounInfo("clatter")
nouns['clause']=nounInfo("clause")
nouns['claustrophobia']=nounInfo("claustrophobia")
nouns['clavichord']=nounInfo("clavichord")
nouns['clavicle']=nounInfo("clavicle")
nouns['claw']=nounInfo("claw")
nouns['clay']=nounInfo("clay")
adjectives['clayey']=adjInfo("clayey")
adjectives['clean']=adjInfo("clean")
adverbs['clean']="clean"
nouns['clean']=nounInfo("clean")
nouns['cleaner']=nounInfo("cleaner")
nouns['cleanliness']=nounInfo("cleanliness")
adjectives['cleanly']=adjInfo("cleanly")
adverbs['cleanly']="cleanly"
nouns['cleanser']=nounInfo("cleanser")
adjectives['clear']=adjInfo("clear")
adverbs['clear']="clear"
nouns['clear']=nounInfo("clear")
nouns['clearance']=nounInfo("clearance")
nouns['clearing']=nounInfo("clearing")
adverbs['clearly']="clearly"
nouns['clearness']=nounInfo("clearness")
nouns['clearway']=nounInfo("clearway")
nouns['cleat']=nounInfo("cleat")
nouns['cleavage']=nounInfo("cleavage")
nouns['cleaver']=nounInfo("cleaver")
nouns['clef']=nounInfo("clef")
nouns['cleft']=nounInfo("cleft")
nouns['clematis']=nounInfo("clematis")
nouns['clemency']=nounInfo("clemency")
adjectives['clement']=adjInfo("clement")
nouns['clerestory']=nounInfo("clerestory")
nouns['clergy']=nounInfo("clergy")
nouns['clergyman']=nounInfo("clergyman")
nouns['cleric']=nounInfo("cleric")
adjectives['clerical']=adjInfo("clerical")
nouns['clerihew']=nounInfo("clerihew")
nouns['clerk']=nounInfo("clerk").addAttributes({"g":"x"})
adjectives['clever']=adjInfo("clever")
adverbs['cleverly']="cleverly"
nouns['cleverness']=nounInfo("cleverness")
nouns['clew']=nounInfo("clew")
nouns['click']=nounInfo("click")
nouns['client']=nounInfo("client")
nouns['clientele']=nounInfo("clientele")
nouns['cliff']=nounInfo("cliff")
nouns['climacteric']=nounInfo("climacteric")
adjectives['climactic']=adjInfo("climactic")
nouns['climate']=nounInfo("climate")
adjectives['climatic']=adjInfo("climatic")
adverbs['climatically']="climatically"
nouns['climatology']=nounInfo("climatology")
nouns['climax']=nounInfo("climax")
nouns['climb']=nounInfo("climb")
nouns['climber']=nounInfo("climber")
nouns['clime']=nounInfo("clime")
nouns['clinch']=nounInfo("clinch")
nouns['clincher']=nounInfo("clincher")
nouns['clinic']=nounInfo("clinic")
adjectives['clinical']=adjInfo("clinical")
adverbs['clinically']="clinically"
nouns['clink']=nounInfo("clink")
nouns['clinker']=nounInfo("clinker")
nouns['clip']=nounInfo("clip")
nouns['clipper']=nounInfo("clipper")
nouns['clipping']=nounInfo("clipping")
nouns['clique']=nounInfo("clique")
adjectives['cliquish']=adjInfo("cliquish")
nouns['clitoris']=nounInfo("clitoris")
nouns['cloak']=nounInfo("cloak")
nouns['cloakroom']=nounInfo("cloakroom")
nouns['clobber']=nounInfo("clobber")
nouns['cloche']=nounInfo("cloche")
nouns['clock']=nounInfo("clock")
adverbs['clockwise']="clockwise"
nouns['clockwork']=nounInfo("clockwork")
nouns['clod']=nounInfo("clod")
nouns['clodhopper']=nounInfo("clodhopper")
nouns['clog']=nounInfo("clog")
adjectives['cloggy']=adjInfo("cloggy")
nouns['cloister']=nounInfo("cloister")
nouns['clone']=nounInfo("clone")
adjectives['close']=adjInfo("close")
adverbs['close']="close"
nouns['close']=nounInfo("close")
adverbs['closely']="closely"
nouns['closeness']=nounInfo("closeness")
adjectives['closet']=adjInfo("closet")
nouns['closet']=nounInfo("closet")
nouns['closure']=nounInfo("closure")
nouns['clot']=nounInfo("clot")
nouns['cloth']=nounInfo("cloth")
nouns['clothes']=nounInfo("clothes")
nouns['clothier']=nounInfo("clothier")
nouns['clothing']=nounInfo("clothing")
nouns['cloud']=nounInfo("cloud")
adjectives['cloudless']=adjInfo("cloudless")
adjectives['cloudy']=adjInfo("cloudy")
nouns['clout']=nounInfo("clout")
nouns['clove']=nounInfo("clove")
nouns['clover']=nounInfo("clover")
nouns['clown']=nounInfo("clown")
adjectives['clownish']=adjInfo("clownish")
nouns['club']=nounInfo("club")
adjectives['clubbable']=adjInfo("clubbable")
nouns['clubhouse']=nounInfo("clubhouse")
nouns['cluck']=nounInfo("cluck")
nouns['clue']=nounInfo("clue")
nouns['clump']=nounInfo("clump")
adverbs['clumsily']="clumsily"
nouns['clumsiness']=nounInfo("clumsiness")
adjectives['clumsy']=adjInfo("clumsy")
nouns['clunk']=nounInfo("clunk")
nouns['cluster']=nounInfo("cluster")
nouns['clutch']=nounInfo("clutch")
nouns['clutter']=nounInfo("clutter")
nouns['coach']=nounInfo("coach")
nouns['coagulation']=nounInfo("coagulation")
nouns['coal']=nounInfo("coal")
nouns['coalescence']=nounInfo("coalescence")
nouns['coalface']=nounInfo("coalface")
nouns['coalfield']=nounInfo("coalfield")
nouns['coalition']=nounInfo("coalition")
nouns['coaming']=nounInfo("coaming")
adjectives['coarse']=adjInfo("coarse")
adverbs['coarsely']="coarsely"
nouns['coarseness']=nounInfo("coarseness")
nouns['coast']=nounInfo("coast")
adjectives['coastal']=adjInfo("coastal")
nouns['coaster']=nounInfo("coaster")
nouns['coastguard']=nounInfo("coastguard")
nouns['coastline']=nounInfo("coastline")
adjectives['coastwise']=adjInfo("coastwise")
adverbs['coastwise']="coastwise"
nouns['coat']=nounInfo("coat")
nouns['coatee']=nounInfo("coatee")
nouns['coating']=nounInfo("coating")
nouns['coaxing']=nounInfo("coaxing")
adverbs['coaxingly']="coaxingly"
nouns['cob']=nounInfo("cob")
nouns['cobalt']=nounInfo("cobalt")
nouns['cobber']=nounInfo("cobber")
nouns['cobble']=nounInfo("cobble")
nouns['cobbler']=nounInfo("cobbler")
nouns['cobra']=nounInfo("cobra")
nouns['cobweb']=nounInfo("cobweb")
nouns['cocaine']=nounInfo("cocaine")
nouns['cochineal']=nounInfo("cochineal")
nouns['cochlea']=nounInfo("cochlea")
nouns['cock']=nounInfo("cock")
nouns['cockade']=nounInfo("cockade")
nouns['cockatoo']=nounInfo("cockatoo")
nouns['cockchafer']=nounInfo("cockchafer")
nouns['cocker']=nounInfo("cocker")
nouns['cockerel']=nounInfo("cockerel")
nouns['cockhorse']=nounInfo("cockhorse")
nouns['cockle']=nounInfo("cockle")
adjectives['cockney']=adjInfo("cockney")
nouns['cockney']=nounInfo("cockney")
nouns['cockpit']=nounInfo("cockpit")
nouns['cockroach']=nounInfo("cockroach")
nouns['cockscomb']=nounInfo("cockscomb")
adjectives['cocksure']=adjInfo("cocksure")
nouns['cocktail']=nounInfo("cocktail")
adjectives['cocky']=adjInfo("cocky")
nouns['coco']=nounInfo("coco")
nouns['cocoa']=nounInfo("cocoa")
nouns['coconut']=nounInfo("coconut")
nouns['cocoon']=nounInfo("cocoon")
nouns['cocotte']=nounInfo("cocotte")
nouns['cod']=nounInfo("cod")
nouns['coda']=nounInfo("coda")
nouns['code']=nounInfo("code")
nouns['codeine']=nounInfo("codeine")
nouns['codex']=nounInfo("codex")
nouns['codfish']=nounInfo("codfish")
nouns['codger']=nounInfo("codger")
nouns['codicil']=nounInfo("codicil")
nouns['codification']=nounInfo("codification")
nouns['codling']=nounInfo("codling")
nouns['codpiece']=nounInfo("codpiece")
nouns['coercion']=nounInfo("coercion")
adjectives['coercive']=adjInfo("coercive")
adjectives['coeval']=adjInfo("coeval")
nouns['coeval']=nounInfo("coeval")
nouns['coexistence']=nounInfo("coexistence")
nouns['coffee']=nounInfo("coffee")
nouns['coffer']=nounInfo("coffer")
nouns['coffin']=nounInfo("coffin")
nouns['cog']=nounInfo("cog")
nouns['cogency']=nounInfo("cogency")
adjectives['cogent']=adjInfo("cogent")
nouns['cogitation']=nounInfo("cogitation")
nouns['cognac']=nounInfo("cognac")
adjectives['cognate']=adjInfo("cognate")
nouns['cognate']=nounInfo("cognate")
nouns['cognition']=nounInfo("cognition")
nouns['cognizance']=nounInfo("cognizance")
adjectives['cognizant']=adjInfo("cognizant")
nouns['cognomen']=nounInfo("cognomen")
nouns['cogwheel']=nounInfo("cogwheel")
nouns['cohabitation']=nounInfo("cohabitation")
nouns['coherence']=nounInfo("coherence")
nouns['coherency']=nounInfo("coherency")
adjectives['coherent']=adjInfo("coherent")
adverbs['coherently']="coherently"
nouns['cohesion']=nounInfo("cohesion")
adjectives['cohesive']=adjInfo("cohesive")
nouns['cohort']=nounInfo("cohort")
nouns['coif']=nounInfo("coif")
nouns['coiffeur']=nounInfo("coiffeur")
nouns['coiffure']=nounInfo("coiffure")
nouns['coign']=nounInfo("coign")
nouns['coil']=nounInfo("coil")
nouns['coin']=nounInfo("coin")
nouns['coinage']=nounInfo("coinage")
nouns['coincidence']=nounInfo("coincidence")
adjectives['coincident']=adjInfo("coincident")
adjectives['coincidental']=adjInfo("coincidental")
nouns['coiner']=nounInfo("coiner")
nouns['coir']=nounInfo("coir")
nouns['coition']=nounInfo("coition")
nouns['coitus']=nounInfo("coitus")
nouns['coke']=nounInfo("coke")
nouns['col']=nounInfo("col")
nouns['cola']=nounInfo("cola")
nouns['colander']=nounInfo("colander")
adjectives['cold']=adjInfo("cold")
nouns['cold']=nounInfo("cold")
adverbs['coldly']="coldly"
nouns['coldness']=nounInfo("coldness")
nouns['coleslaw']=nounInfo("coleslaw")
nouns['colic']=nounInfo("colic")
nouns['colitis']=nounInfo("colitis")
nouns['collaboration']=nounInfo("collaboration")
nouns['collaborationist']=nounInfo("collaborationist")
nouns['collaborator']=nounInfo("collaborator")
nouns['collage']=nounInfo("collage")
adjectives['collapsable']=adjInfo("collapsable")
nouns['collapse']=nounInfo("collapse")
adjectives['collapsible']=adjInfo("collapsible")
nouns['collar']=nounInfo("collar")
adjectives['collateral']=adjInfo("collateral")
nouns['collateral']=nounInfo("collateral")
nouns['collation']=nounInfo("collation")
nouns['colleague']=nounInfo("colleague")
adjectives['collect']=adjInfo("collect")
adverbs['collect']="collect"
nouns['collect']=nounInfo("collect")
adjectives['collected']=adjInfo("collected")
adverbs['collectedly']="collectedly"
nouns['collection']=nounInfo("collection")
adjectives['collective']=adjInfo("collective")
adverbs['collectively']="collectively"
nouns['collectivization']=nounInfo("collectivization")
nouns['collector']=nounInfo("collector")
nouns['colleen']=nounInfo("colleen")
nouns['college']=nounInfo("college")
adjectives['collegiate']=adjInfo("collegiate")
nouns['collie']=nounInfo("collie")
nouns['collier']=nounInfo("collier")
nouns['colliery']=nounInfo("colliery")
nouns['collision']=nounInfo("collision")
nouns['collocation']=nounInfo("collocation")
adjectives['colloquial']=adjInfo("colloquial")
nouns['colloquialism']=nounInfo("colloquialism")
adverbs['colloquially']="colloquially"
nouns['colloquy']=nounInfo("colloquy")
nouns['collusion']=nounInfo("collusion")
adjectives['collusive']=adjInfo("collusive")
nouns['collywobbles']=nounInfo("collywobbles")
nouns['colon']=nounInfo("colon")
nouns['colonel']=nounInfo("colonel")
adjectives['colonial']=adjInfo("colonial")
nouns['colonial']=nounInfo("colonial")
nouns['colonialism']=nounInfo("colonialism")
nouns['colonialist']=nounInfo("colonialist")
nouns['colonist']=nounInfo("colonist")
nouns['colonization']=nounInfo("colonization")
nouns['colonizer']=nounInfo("colonizer")
nouns['colonnade']=nounInfo("colonnade")
adjectives['colonnaded']=adjInfo("colonnaded")
nouns['colony']=nounInfo("colony")
nouns['coloratura']=nounInfo("coloratura")
adjectives['colossal']=adjInfo("colossal")
nouns['colossus']=nounInfo("colossus")
nouns['colour']=nounInfo("colour")
adjectives['coloured']=adjInfo("coloured")
adjectives['colourful']=adjInfo("colourful")
nouns['colouring']=nounInfo("colouring")
adjectives['colourless']=adjInfo("colourless")
nouns['colt']=nounInfo("colt")
adjectives['coltish']=adjInfo("coltish")
nouns['columbine']=nounInfo("columbine")
nouns['column']=nounInfo("column")
nouns['columnist']=nounInfo("columnist")
nouns['coma']=nounInfo("coma")
adjectives['comatose']=adjInfo("comatose")
nouns['comb']=nounInfo("comb")
nouns['combat']=nounInfo("combat")
adjectives['combatant']=adjInfo("combatant")
nouns['combatant']=nounInfo("combatant")
adjectives['combative']=adjInfo("combative")
adverbs['combatively']="combatively"
nouns['combination']=nounInfo("combination")
nouns['combine']=nounInfo("combine")
adjectives['combustible']=adjInfo("combustible")
nouns['combustible']=nounInfo("combustible")
nouns['combustion']=nounInfo("combustion")
nouns['comedian']=nounInfo("comedian")
nouns['comedienne']=nounInfo("comedienne")
nouns['comedy']=nounInfo("comedy")
nouns['comeliness']=nounInfo("comeliness")
adjectives['comely']=adjInfo("comely")
nouns['comer']=nounInfo("comer")
nouns['comestible']=nounInfo("comestible")
nouns['comet']=nounInfo("comet")
nouns['comfit']=nounInfo("comfit")
nouns['comfort']=nounInfo("comfort")
adjectives['comfortable']=adjInfo("comfortable")
adverbs['comfortably']="comfortably"
nouns['comforter']=nounInfo("comforter")
adjectives['comfortless']=adjInfo("comfortless")
nouns['comfrey']=nounInfo("comfrey")
adjectives['comfy']=adjInfo("comfy")
adjectives['comic']=adjInfo("comic")
nouns['comic']=nounInfo("comic")
adjectives['comical']=adjInfo("comical")
adverbs['comically']="comically"
adjectives['coming']=adjInfo("coming")
nouns['coming']=nounInfo("coming")
nouns['comity']=nounInfo("comity")
nouns['comma']=nounInfo("comma")
nouns['command']=nounInfo("command")
nouns['commandant']=nounInfo("commandant")
nouns['commander']=nounInfo("commander")
adjectives['commanding']=adjInfo("commanding")
nouns['commandment']=nounInfo("commandment")
nouns['commando']=nounInfo("commando")
nouns['commemoration']=nounInfo("commemoration")
adjectives['commemorative']=adjInfo("commemorative")
nouns['commencement']=nounInfo("commencement")
adjectives['commendable']=adjInfo("commendable")
nouns['commendation']=nounInfo("commendation")
adjectives['commensurable']=adjInfo("commensurable")
adjectives['commensurate']=adjInfo("commensurate")
nouns['comment']=nounInfo("comment")
nouns['commentary']=nounInfo("commentary")
nouns['commentator']=nounInfo("commentator")
nouns['commerce']=nounInfo("commerce")
adjectives['commercial']=adjInfo("commercial")
nouns['commercial']=nounInfo("commercial")
adverbs['commercially']="commercially"
nouns['commination']=nounInfo("commination")
adjectives['comminatory']=adjInfo("comminatory")
nouns['commiseration']=nounInfo("commiseration")
nouns['commissar']=nounInfo("commissar")
nouns['commissariat']=nounInfo("commissariat")
nouns['commissary']=nounInfo("commissary")
nouns['commission']=nounInfo("commission")
nouns['commissionaire']=nounInfo("commissionaire")
adjectives['commissioned']=adjInfo("commissioned")
nouns['commissioner']=nounInfo("commissioner")
nouns['commitment']=nounInfo("commitment")
nouns['committee']=nounInfo("committee")
nouns['commode']=nounInfo("commode")
adjectives['commodious']=adjInfo("commodious")
nouns['commodity']=nounInfo("commodity")
nouns['commodore']=nounInfo("commodore")
adjectives['common']=adjInfo("common")
nouns['common']=nounInfo("common")
nouns['commonalty']=nounInfo("commonalty")
nouns['commoner']=nounInfo("commoner").addAttributes({"g":"x"})
adverbs['commonly']="commonly"
adjectives['commonplace']=adjInfo("commonplace")
nouns['commonplace']=nounInfo("commonplace")
nouns['commons']=nounInfo("commons")
nouns['commonwealth']=nounInfo("commonwealth")
nouns['commotion']=nounInfo("commotion")
adjectives['communal']=adjInfo("communal")
adverbs['communally']="communally"
nouns['commune']=nounInfo("commune")
adjectives['communicable']=adjInfo("communicable")
nouns['communicant']=nounInfo("communicant")
nouns['communication']=nounInfo("communication")
adjectives['communicative']=adjInfo("communicative")
nouns['communion']=nounInfo("communion")
nouns['communism']=nounInfo("communism")
adjectives['communist']=adjInfo("communist")
nouns['communist']=nounInfo("communist")
nouns['community']=nounInfo("community")
adjectives['commutable']=adjInfo("commutable")
nouns['commutation']=nounInfo("commutation")
nouns['commutator']=nounInfo("commutator")
nouns['commuter']=nounInfo("commuter")
adjectives['compact']=adjInfo("compact")
nouns['compact']=nounInfo("compact")
adverbs['compactly']="compactly"
nouns['compactness']=nounInfo("compactness")
nouns['companion']=nounInfo("companion").addAttributes({"g":"x"})
adjectives['companionable']=adjInfo("companionable")
nouns['companionship']=nounInfo("companionship")
nouns['companionway']=nounInfo("companionway")
nouns['company']=nounInfo("company")
adjectives['comparable']=adjInfo("comparable")
adjectives['comparative']=adjInfo("comparative")
nouns['comparative']=nounInfo("comparative")
adverbs['comparatively']="comparatively"
nouns['compare']=nounInfo("compare")
nouns['comparison']=nounInfo("comparison")
nouns['compartment']=nounInfo("compartment")
nouns['compass']=nounInfo("compass")
nouns['compassion']=nounInfo("compassion")
adjectives['compassionate']=adjInfo("compassionate")
adverbs['compassionately']="compassionately"
nouns['compatibility']=nounInfo("compatibility")
adjectives['compatible']=adjInfo("compatible")
adverbs['compatibly']="compatibly"
nouns['compatriot']=nounInfo("compatriot")
nouns['compeer']=nounInfo("compeer")
adjectives['compendious']=adjInfo("compendious")
nouns['compendium']=nounInfo("compendium")
nouns['compensation']=nounInfo("compensation")
adjectives['compensatory']=adjInfo("compensatory")
nouns['competence']=nounInfo("competence")
adjectives['competent']=adjInfo("competent")
adverbs['competently']="competently"
nouns['competition']=nounInfo("competition")
adjectives['competitive']=adjInfo("competitive")
nouns['competitor']=nounInfo("competitor")
nouns['compilation']=nounInfo("compilation")
nouns['compiler']=nounInfo("compiler")
nouns['complacence']=nounInfo("complacence")
nouns['complacency']=nounInfo("complacency")
adjectives['complacent']=adjInfo("complacent")
adverbs['complacently']="complacently"
nouns['complainant']=nounInfo("complainant")
adverbs['complainingly']="complainingly"
nouns['complaint']=nounInfo("complaint")
nouns['complaisance']=nounInfo("complaisance")
adjectives['complaisant']=adjInfo("complaisant")
nouns['complement']=nounInfo("complement")
adjectives['complementary']=adjInfo("complementary")
adjectives['complete']=adjInfo("complete")
adverbs['completely']="completely"
nouns['completeness']=nounInfo("completeness")
nouns['completion']=nounInfo("completion")
adjectives['complex']=adjInfo("complex")
nouns['complex']=nounInfo("complex")
nouns['complexion']=nounInfo("complexion")
nouns['complexity']=nounInfo("complexity")
nouns['compliance']=nounInfo("compliance")
adjectives['compliant']=adjInfo("compliant")
adjectives['complicated']=adjInfo("complicated")
nouns['complication']=nounInfo("complication")
nouns['complicity']=nounInfo("complicity")
nouns['compliment']=nounInfo("compliment")
adjectives['complimentary']=adjInfo("complimentary")
nouns['complin']=nounInfo("complin")
nouns['compline']=nounInfo("compline")
adjectives['component']=adjInfo("component")
nouns['component']=nounInfo("component")
nouns['comportment']=nounInfo("comportment")
adjectives['composed']=adjInfo("composed")
adverbs['composedly']="composedly"
nouns['composer']=nounInfo("composer")
adjectives['composite']=adjInfo("composite")
nouns['composition']=nounInfo("composition")
nouns['compositor']=nounInfo("compositor")
nouns['compost']=nounInfo("compost")
nouns['composure']=nounInfo("composure")
nouns['compote']=nounInfo("compote")
adjectives['compound']=adjInfo("compound")
nouns['compound']=nounInfo("compound")
nouns['comprehensibility']=nounInfo("comprehensibility")
adjectives['comprehensible']=adjInfo("comprehensible")
nouns['comprehension']=nounInfo("comprehension")
adjectives['comprehensive']=adjInfo("comprehensive")
adverbs['comprehensively']="comprehensively"
nouns['comprehensiveness']=nounInfo("comprehensiveness")
nouns['compress']=nounInfo("compress")
nouns['compression']=nounInfo("compression")
nouns['compromise']=nounInfo("compromise")
nouns['comptroller']=nounInfo("comptroller")
nouns['compulsion']=nounInfo("compulsion")
adjectives['compulsive']=adjInfo("compulsive")
adverbs['compulsively']="compulsively"
adverbs['compulsorily']="compulsorily"
adjectives['compulsory']=adjInfo("compulsory")
nouns['compunction']=nounInfo("compunction")
nouns['computation']=nounInfo("computation")
nouns['computer']=nounInfo("computer")
nouns['comrade']=nounInfo("comrade").addAttributes({"g":"x"})
adverbs['comradely']="comradely"
nouns['comradeship']=nounInfo("comradeship")
adverbs['con']="con"
nouns['con']=nounInfo("con")
nouns['concatenation']=nounInfo("concatenation")
adjectives['concave']=adjInfo("concave")
nouns['concavity']=nounInfo("concavity")
nouns['concealment']=nounInfo("concealment")
nouns['conceit']=nounInfo("conceit")
adjectives['conceited']=adjInfo("conceited")
adverbs['conceitedly']="conceitedly"
adjectives['conceivable']=adjInfo("conceivable")
adverbs['conceivably']="conceivably"
adverbs['conceiveably']="conceiveably"
nouns['concentrate']=nounInfo("concentrate")
adjectives['concentrated']=adjInfo("concentrated")
nouns['concentration']=nounInfo("concentration")
adjectives['concentric']=adjInfo("concentric")
nouns['concept']=nounInfo("concept")
nouns['conception']=nounInfo("conception")
adverbs['conceptually']="conceptually"
nouns['concern']=nounInfo("concern")
adjectives['concerned']=adjInfo("concerned")
adverbs['concernedly']="concernedly"
prepositions['concerning']=P("concerning")
nouns['concert']=nounInfo("concert")
adjectives['concerted']=adjInfo("concerted")
nouns['concertina']=nounInfo("concertina")
nouns['concerto']=nounInfo("concerto")
nouns['concession']=nounInfo("concession")
nouns['concessionaire']=nounInfo("concessionaire")
adjectives['concessive']=adjInfo("concessive")
nouns['conch']=nounInfo("conch")
nouns['conchology']=nounInfo("conchology")
nouns['concierge']=nounInfo("concierge")
nouns['conciliation']=nounInfo("conciliation")
adjectives['conciliatory']=adjInfo("conciliatory")
adjectives['concise']=adjInfo("concise")
adverbs['concisely']="concisely"
nouns['conciseness']=nounInfo("conciseness")
nouns['conclave']=nounInfo("conclave")
nouns['conclusion']=nounInfo("conclusion")
adjectives['conclusive']=adjInfo("conclusive")
adverbs['conclusively']="conclusively"
nouns['concoction']=nounInfo("concoction")
adjectives['concomitant']=adjInfo("concomitant")
nouns['concomitant']=nounInfo("concomitant")
nouns['concord']=nounInfo("concord")
nouns['concordance']=nounInfo("concordance")
adjectives['concordant']=adjInfo("concordant")
nouns['concordat']=nounInfo("concordat")
nouns['concourse']=nounInfo("concourse")
adjectives['concrete']=adjInfo("concrete")
nouns['concrete']=nounInfo("concrete")
adverbs['concretely']="concretely"
nouns['concretion']=nounInfo("concretion")
nouns['concubine']=nounInfo("concubine")
nouns['concupiscence']=nounInfo("concupiscence")
nouns['concurrence']=nounInfo("concurrence")
adjectives['concurrent']=adjInfo("concurrent")
adverbs['concurrently']="concurrently"
nouns['concussion']=nounInfo("concussion")
nouns['condemnation']=nounInfo("condemnation")
nouns['condensation']=nounInfo("condensation")
nouns['condenser']=nounInfo("condenser")
adjectives['condescending']=adjInfo("condescending")
adverbs['condescendingly']="condescendingly"
nouns['condescension']=nounInfo("condescension")
adjectives['condign']=adjInfo("condign")
nouns['condiment']=nounInfo("condiment")
nouns['condition']=nounInfo("condition")
adjectives['conditional']=adjInfo("conditional")
adverbs['conditionally']="conditionally"
adjectives['conditioned']=adjInfo("conditioned")
nouns['condolence']=nounInfo("condolence")
nouns['condominium']=nounInfo("condominium")
nouns['condonation']=nounInfo("condonation")
nouns['condor']=nounInfo("condor")
adjectives['conducive']=adjInfo("conducive")
nouns['conduct']=nounInfo("conduct")
nouns['conduction']=nounInfo("conduction")
adjectives['conductive']=adjInfo("conductive")
nouns['conductivity']=nounInfo("conductivity")
nouns['conductor']=nounInfo("conductor").addAttributes({"g":"m"})
nouns['conductress']=nounInfo("conductress").addAttributes({"g":"f"})
nouns['conduit']=nounInfo("conduit")
nouns['cone']=nounInfo("cone")
nouns['coney']=nounInfo("coney")
nouns['confab']=nounInfo("confab")
nouns['confabulation']=nounInfo("confabulation")
nouns['confection']=nounInfo("confection")
nouns['confectioner']=nounInfo("confectioner")
nouns['confectionery']=nounInfo("confectionery")
nouns['confederacy']=nounInfo("confederacy")
adjectives['confederate']=adjInfo("confederate")
nouns['confederate']=nounInfo("confederate")
nouns['confederation']=nounInfo("confederation")
nouns['conference']=nounInfo("conference")
nouns['conferment']=nounInfo("conferment")
adverbs['confessedly']="confessedly"
nouns['confession']=nounInfo("confession")
nouns['confessional']=nounInfo("confessional")
nouns['confessor']=nounInfo("confessor")
nouns['confetti']=nounInfo("confetti")
nouns['confidant']=nounInfo("confidant")
nouns['confidence']=nounInfo("confidence")
adjectives['confident']=adjInfo("confident")
adjectives['confidential']=adjInfo("confidential")
nouns['confidentiality']=nounInfo("confidentiality")
adverbs['confidentially']="confidentially"
adverbs['confidently']="confidently"
adjectives['confiding']=adjInfo("confiding")
adverbs['confidingly']="confidingly"
nouns['configuration']=nounInfo("configuration")
adjectives['confined']=adjInfo("confined")
nouns['confinement']=nounInfo("confinement")
nouns['confines']=nounInfo("confines")
nouns['confirmation']=nounInfo("confirmation")
adjectives['confirmed']=adjInfo("confirmed")
nouns['confiscation']=nounInfo("confiscation")
nouns['conflagration']=nounInfo("conflagration")
nouns['conflict']=nounInfo("conflict")
adjectives['conflicting']=adjInfo("conflicting")
nouns['confluence']=nounInfo("confluence")
adjectives['confluent']=adjInfo("confluent")
adjectives['conformable']=adjInfo("conformable")
nouns['conformation']=nounInfo("conformation")
nouns['conformist']=nounInfo("conformist")
nouns['conformity']=nounInfo("conformity")
adjectives['confounded']=adjInfo("confounded")
adverbs['confoundedly']="confoundedly"
nouns['confrontation']=nounInfo("confrontation")
adverbs['confusedly']="confusedly"
nouns['confusion']=nounInfo("confusion")
nouns['confutation']=nounInfo("confutation")
adjectives['congenial']=adjInfo("congenial")
adverbs['congenially']="congenially"
adjectives['congenital']=adjInfo("congenital")
nouns['conger']=nounInfo("conger")
adjectives['congested']=adjInfo("congested")
nouns['congestion']=nounInfo("congestion")
adjectives['conglomerate']=adjInfo("conglomerate")
nouns['conglomerate']=nounInfo("conglomerate")
nouns['conglomeration']=nounInfo("conglomeration")
nouns['congratulation']=nounInfo("congratulation")
adjectives['congratulatory']=adjInfo("congratulatory")
nouns['congregation']=nounInfo("congregation")
adjectives['congregational']=adjInfo("congregational")
nouns['congress']=nounInfo("congress")
adjectives['congressional']=adjInfo("congressional")
nouns['congressman']=nounInfo("congressman")
nouns['congresswoman']=nounInfo("congresswoman")
adjectives['congruent']=adjInfo("congruent")
adjectives['congruous']=adjInfo("congruous")
adjectives['conic']=adjInfo("conic")
adjectives['conical']=adjInfo("conical")
nouns['conifer']=nounInfo("conifer")
adjectives['coniferous']=adjInfo("coniferous")
adjectives['conjectural']=adjInfo("conjectural")
nouns['conjecture']=nounInfo("conjecture")
adjectives['conjoint']=adjInfo("conjoint")
adverbs['conjointly']="conjointly"
adjectives['conjugal']=adjInfo("conjugal")
adverbs['conjugally']="conjugally"
nouns['conjugation']=nounInfo("conjugation")
nouns['conjunction']=nounInfo("conjunction")
adjectives['conjunctive']=adjInfo("conjunctive")
nouns['conjunctive']=nounInfo("conjunctive")
nouns['conjuncture']=nounInfo("conjuncture")
nouns['conjuration']=nounInfo("conjuration")
nouns['conjurer']=nounInfo("conjurer")
nouns['conjuror']=nounInfo("conjuror").addAttributes({"g":"x"})
nouns['conk']=nounInfo("conk")
nouns['conker']=nounInfo("conker")
nouns['connection']=nounInfo("connection")
adjectives['connective']=adjInfo("connective")
nouns['connective']=nounInfo("connective")
nouns['connexion']=nounInfo("connexion")
adjectives['conning']=adjInfo("conning")
nouns['connivance']=nounInfo("connivance")
nouns['connoisseur']=nounInfo("connoisseur")
nouns['connotation']=nounInfo("connotation")
adjectives['connubial']=adjInfo("connubial")
nouns['conqueror']=nounInfo("conqueror")
nouns['conquest']=nounInfo("conquest")
nouns['conquistador']=nounInfo("conquistador")
nouns['consanguinity']=nounInfo("consanguinity")
nouns['conscience']=nounInfo("conscience")
adjectives['conscientious']=adjInfo("conscientious")
adverbs['conscientiously']="conscientiously"
nouns['conscientiousness']=nounInfo("conscientiousness")
adjectives['conscious']=adjInfo("conscious")
adverbs['consciously']="consciously"
nouns['consciousness']=nounInfo("consciousness")
nouns['conscript']=nounInfo("conscript")
nouns['conscription']=nounInfo("conscription")
nouns['consecration']=nounInfo("consecration")
adjectives['consecutive']=adjInfo("consecutive")
adverbs['consecutively']="consecutively"
nouns['consensus']=nounInfo("consensus")
nouns['consent']=nounInfo("consent")
nouns['consequence']=nounInfo("consequence")
adjectives['consequent']=adjInfo("consequent")
adjectives['consequential']=adjInfo("consequential")
adverbs['consequentially']="consequentially"
adverbs['consequently']="consequently"
nouns['conservancy']=nounInfo("conservancy")
nouns['conservation']=nounInfo("conservation")
nouns['conservatism']=nounInfo("conservatism")
adjectives['conservative']=adjInfo("conservative")
nouns['conservative']=nounInfo("conservative")
adverbs['conservatively']="conservatively"
nouns['conservatoire']=nounInfo("conservatoire")
nouns['conservatory']=nounInfo("conservatory")
nouns['conserve']=nounInfo("conserve")
adjectives['considerable']=adjInfo("considerable")
adverbs['considerably']="considerably"
adjectives['considerate']=adjInfo("considerate")
adverbs['considerately']="considerately"
nouns['considerateness']=nounInfo("considerateness")
nouns['consideration']=nounInfo("consideration")
prepositions['considering']=P("considering")
nouns['consignee']=nounInfo("consignee")
nouns['consigner']=nounInfo("consigner")
nouns['consignment']=nounInfo("consignment")
nouns['consignor']=nounInfo("consignor")
nouns['consistence']=nounInfo("consistence")
nouns['consistency']=nounInfo("consistency")
adjectives['consistent']=adjInfo("consistent")
adverbs['consistently']="consistently"
nouns['consistory']=nounInfo("consistory")
adjectives['consolable']=adjInfo("consolable")
nouns['consolation']=nounInfo("consolation")
adjectives['consolatory']=adjInfo("consolatory")
nouns['console']=nounInfo("console")
nouns['consolidation']=nounInfo("consolidation")
adverbs['consolingly']="consolingly"
nouns['consols']=nounInfo("consols")
nouns['consonance']=nounInfo("consonance")
adjectives['consonant']=adjInfo("consonant")
nouns['consonant']=nounInfo("consonant")
nouns['consort']=nounInfo("consort")
nouns['consortium']=nounInfo("consortium")
nouns['conspectus']=nounInfo("conspectus")
adjectives['conspicuous']=adjInfo("conspicuous")
adverbs['conspicuously']="conspicuously"
nouns['conspicuousness']=nounInfo("conspicuousness")
nouns['conspiracy']=nounInfo("conspiracy")
nouns['conspirator']=nounInfo("conspirator")
adjectives['conspiratorial']=adjInfo("conspiratorial")
nouns['constable']=nounInfo("constable")
nouns['constabulary']=nounInfo("constabulary")
nouns['constancy']=nounInfo("constancy")
adjectives['constant']=adjInfo("constant")
nouns['constant']=nounInfo("constant")
adverbs['constantly']="constantly"
nouns['constellation']=nounInfo("constellation")
nouns['consternation']=nounInfo("consternation")
adjectives['constipated']=adjInfo("constipated")
nouns['constipation']=nounInfo("constipation")
nouns['constituency']=nounInfo("constituency")
adjectives['constituent']=adjInfo("constituent")
nouns['constituent']=nounInfo("constituent")
nouns['constitution']=nounInfo("constitution")
adjectives['constitutional']=adjInfo("constitutional")
nouns['constitutional']=nounInfo("constitutional")
nouns['constitutionalism']=nounInfo("constitutionalism")
nouns['constitutionalist']=nounInfo("constitutionalist")
adverbs['constitutionally']="constitutionally"
adjectives['constitutive']=adjInfo("constitutive")
adjectives['constrained']=adjInfo("constrained")
adverbs['constrainedly']="constrainedly"
nouns['constraint']=nounInfo("constraint")
nouns['constriction']=nounInfo("constriction")
nouns['construction']=nounInfo("construction")
adjectives['constructive']=adjInfo("constructive")
adverbs['constructively']="constructively"
nouns['constructor']=nounInfo("constructor")
nouns['consubstantiation']=nounInfo("consubstantiation")
nouns['consul']=nounInfo("consul")
adjectives['consular']=adjInfo("consular")
nouns['consulate']=nounInfo("consulate")
nouns['consulship']=nounInfo("consulship")
nouns['consultant']=nounInfo("consultant").addAttributes({"g":"x"})
nouns['consultation']=nounInfo("consultation")
adjectives['consultative']=adjInfo("consultative")
nouns['consumer']=nounInfo("consumer")
adjectives['consuming']=adjInfo("consuming")
adjectives['consummate']=adjInfo("consummate")
nouns['consummation']=nounInfo("consummation")
nouns['consumption']=nounInfo("consumption")
adjectives['consumptive']=adjInfo("consumptive")
nouns['consumptive']=nounInfo("consumptive")
nouns['contact']=nounInfo("contact")
nouns['contagion']=nounInfo("contagion")
adjectives['contagious']=adjInfo("contagious")
adverbs['contagiously']="contagiously"
nouns['container']=nounInfo("container")
nouns['containment']=nounInfo("containment")
nouns['contamination']=nounInfo("contamination")
nouns['contemplation']=nounInfo("contemplation")
adjectives['contemplative']=adjInfo("contemplative")
adjectives['contemporaneous']=adjInfo("contemporaneous")
adverbs['contemporaneously']="contemporaneously"
adjectives['contemporary']=adjInfo("contemporary")
nouns['contemporary']=nounInfo("contemporary")
nouns['contempt']=nounInfo("contempt")
adjectives['contemptible']=adjInfo("contemptible")
adjectives['contemptuous']=adjInfo("contemptuous")
adverbs['contemptuously']="contemptuously"
nouns['contender']=nounInfo("contender")
adjectives['content']=adjInfo("content")
nouns['content']=nounInfo("content")
adjectives['contented']=adjInfo("contented")
adverbs['contentedly']="contentedly"
nouns['contention']=nounInfo("contention")
adjectives['contentious']=adjInfo("contentious")
nouns['contentment']=nounInfo("contentment")
adjectives['conterminous']=adjInfo("conterminous")
nouns['contest']=nounInfo("contest")
nouns['contestant']=nounInfo("contestant")
nouns['context']=nounInfo("context")
adjectives['contextual']=adjInfo("contextual")
nouns['contiguity']=nounInfo("contiguity")
adjectives['contiguous']=adjInfo("contiguous")
adverbs['contiguously']="contiguously"
nouns['continence']=nounInfo("continence")
adjectives['continent']=adjInfo("continent")
nouns['continent']=nounInfo("continent")
adjectives['continental']=adjInfo("continental")
nouns['contingency']=nounInfo("contingency")
adjectives['contingent']=adjInfo("contingent")
nouns['contingent']=nounInfo("contingent")
adjectives['continual']=adjInfo("continual")
adverbs['continually']="continually"
nouns['continuance']=nounInfo("continuance")
nouns['continuation']=nounInfo("continuation")
nouns['continuity']=nounInfo("continuity")
adjectives['continuous']=adjInfo("continuous")
adverbs['continuously']="continuously"
nouns['contortion']=nounInfo("contortion")
nouns['contortionist']=nounInfo("contortionist")
nouns['contour']=nounInfo("contour")
nouns['contraband']=nounInfo("contraband")
nouns['contrabass']=nounInfo("contrabass")
nouns['contraception']=nounInfo("contraception")
adjectives['contraceptive']=adjInfo("contraceptive")
nouns['contraceptive']=nounInfo("contraceptive")
nouns['contract']=nounInfo("contract")
adjectives['contractible']=adjInfo("contractible")
adjectives['contractile']=adjInfo("contractile")
nouns['contraction']=nounInfo("contraction")
nouns['contractor']=nounInfo("contractor")
adjectives['contractual']=adjInfo("contractual")
nouns['contradiction']=nounInfo("contradiction")
adjectives['contradictory']=adjInfo("contradictory")
nouns['contradistinction']=nounInfo("contradistinction")
nouns['contralto']=nounInfo("contralto")
nouns['contraption']=nounInfo("contraption")
adjectives['contrapuntal']=adjInfo("contrapuntal")
adverbs['contrapuntally']="contrapuntally"
nouns['contrariety']=nounInfo("contrariety")
adverbs['contrarily']="contrarily"
nouns['contrariness']=nounInfo("contrariness")
adverbs['contrariwise']="contrariwise"
adjectives['contrary']=adjInfo("contrary")
nouns['contrary']=nounInfo("contrary")
nouns['contrast']=nounInfo("contrast")
adverbs['contrastingly']="contrastingly"
nouns['contravention']=nounInfo("contravention")
nouns['contretemps']=nounInfo("contretemps")
nouns['contribution']=nounInfo("contribution")
nouns['contributor']=nounInfo("contributor")
adjectives['contributory']=adjInfo("contributory")
adjectives['contrite']=adjInfo("contrite")
adverbs['contritely']="contritely"
nouns['contrition']=nounInfo("contrition")
nouns['contrivance']=nounInfo("contrivance")
nouns['contriver']=nounInfo("contriver")
nouns['control']=nounInfo("control")
adjectives['controllable']=adjInfo("controllable")
nouns['controller']=nounInfo("controller")
adjectives['controversial']=adjInfo("controversial")
nouns['controversialist']=nounInfo("controversialist")
adverbs['controversially']="controversially"
nouns['controversy']=nounInfo("controversy")
adjectives['contumacious']=adjInfo("contumacious")
adverbs['contumaciously']="contumaciously"
nouns['contumacy']=nounInfo("contumacy")
adjectives['contumelious']=adjInfo("contumelious")
adverbs['contumeliously']="contumeliously"
nouns['contumely']=nounInfo("contumely")
nouns['contusion']=nounInfo("contusion")
nouns['conundrum']=nounInfo("conundrum")
nouns['conurbation']=nounInfo("conurbation")
nouns['convalescence']=nounInfo("convalescence")
adjectives['convalescent']=adjInfo("convalescent")
nouns['convalescent']=nounInfo("convalescent")
nouns['convection']=nounInfo("convection")
nouns['convector']=nounInfo("convector")
nouns['convener']=nounInfo("convener")
nouns['convenience']=nounInfo("convenience")
adjectives['convenient']=adjInfo("convenient")
adverbs['conveniently']="conveniently"
nouns['convent']=nounInfo("convent")
nouns['conventicle']=nounInfo("conventicle")
nouns['convention']=nounInfo("convention")
adjectives['conventional']=adjInfo("conventional")
nouns['conventionality']=nounInfo("conventionality")
adverbs['conventionally']="conventionally"
nouns['convergence']=nounInfo("convergence")
adjectives['convergent']=adjInfo("convergent")
adjectives['conversant']=adjInfo("conversant")
nouns['conversation']=nounInfo("conversation")
adjectives['conversational']=adjInfo("conversational")
adverbs['conversationally']="conversationally"
adjectives['converse']=adjInfo("converse")
nouns['converse']=nounInfo("converse")
adverbs['conversely']="conversely"
nouns['conversion']=nounInfo("conversion")
nouns['convert']=nounInfo("convert")
adjectives['converted']=adjInfo("converted")
nouns['convertibility']=nounInfo("convertibility")
adjectives['convertible']=adjInfo("convertible")
nouns['convertible']=nounInfo("convertible")
adjectives['convex']=adjInfo("convex")
nouns['convexity']=nounInfo("convexity")
adverbs['convexly']="convexly"
nouns['conveyance']=nounInfo("conveyance")
nouns['conveyancer']=nounInfo("conveyancer")
nouns['conveyer']=nounInfo("conveyer")
nouns['conveyor']=nounInfo("conveyor")
nouns['convict']=nounInfo("convict")
nouns['conviction']=nounInfo("conviction")
adjectives['convincible']=adjInfo("convincible")
adjectives['convincing']=adjInfo("convincing")
adverbs['convincingly']="convincingly"
adjectives['convivial']=adjInfo("convivial")
nouns['conviviality']=nounInfo("conviviality")
adverbs['convivially']="convivially"
nouns['convocation']=nounInfo("convocation")
adjectives['convoluted']=adjInfo("convoluted")
nouns['convolution']=nounInfo("convolution")
nouns['convolvulus']=nounInfo("convolvulus")
nouns['convoy']=nounInfo("convoy")
nouns['convulsion']=nounInfo("convulsion")
adjectives['convulsive']=adjInfo("convulsive")
adverbs['convulsively']="convulsively"
nouns['cony']=nounInfo("cony")
nouns['coo']=nounInfo("coo")
nouns['cook']=nounInfo("cook").addAttributes({"g":"x"})
nouns['cookbook']=nounInfo("cookbook")
nouns['cooker']=nounInfo("cooker")
nouns['cookery']=nounInfo("cookery")
nouns['cookie']=nounInfo("cookie")
nouns['cooking']=nounInfo("cooking")
nouns['cooky']=nounInfo("cooky")
adjectives['cool']=adjInfo("cool")
nouns['cool']=nounInfo("cool")
nouns['coolant']=nounInfo("coolant")
nouns['cooler']=nounInfo("cooler")
nouns['coolie']=nounInfo("coolie")
adverbs['coolly']="coolly"
nouns['coolness']=nounInfo("coolness")
nouns['coon']=nounInfo("coon")
nouns['coop']=nounInfo("coop")
nouns['cooper']=nounInfo("cooper")
nouns['cooperation']=nounInfo("cooperation")
nouns['coot']=nounInfo("coot")
nouns['cop']=nounInfo("cop")
nouns['cope']=nounInfo("cope")
nouns['copeck']=nounInfo("copeck")
nouns['coping']=nounInfo("coping")
adjectives['copious']=adjInfo("copious")
adverbs['copiously']="copiously"
nouns['copper']=nounInfo("copper")
nouns['copperhead']=nounInfo("copperhead")
nouns['copperplate']=nounInfo("copperplate")
nouns['coppersmith']=nounInfo("coppersmith")
nouns['coppice']=nounInfo("coppice")
nouns['copra']=nounInfo("copra")
nouns['copse']=nounInfo("copse")
nouns['copula']=nounInfo("copula")
nouns['copulation']=nounInfo("copulation")
adjectives['copulative']=adjInfo("copulative")
nouns['copulative']=nounInfo("copulative")
nouns['copy']=nounInfo("copy")
nouns['copybook']=nounInfo("copybook")
nouns['copycat']=nounInfo("copycat")
nouns['copyhold']=nounInfo("copyhold")
nouns['copyholder']=nounInfo("copyholder")
nouns['copyist']=nounInfo("copyist")
nouns['copyright']=nounInfo("copyright")
nouns['coquetry']=nounInfo("coquetry")
nouns['coquette']=nounInfo("coquette")
adjectives['coquettish']=adjInfo("coquettish")
adverbs['coquettishly']="coquettishly"
nouns['coracle']=nounInfo("coracle")
adjectives['coral']=adjInfo("coral")
nouns['coral']=nounInfo("coral")
nouns['corbel']=nounInfo("corbel")
nouns['cord']=nounInfo("cord")
nouns['cordage']=nounInfo("cordage")
adjectives['cordial']=adjInfo("cordial")
nouns['cordial']=nounInfo("cordial")
nouns['cordiality']=nounInfo("cordiality")
adverbs['cordially']="cordially"
nouns['cordite']=nounInfo("cordite")
nouns['cordon']=nounInfo("cordon")
nouns['corduroy']=nounInfo("corduroy")
nouns['core']=nounInfo("core")
nouns['corgi']=nounInfo("corgi")
nouns['cork']=nounInfo("cork")
nouns['corkage']=nounInfo("corkage")
adjectives['corked']=adjInfo("corked")
nouns['corker']=nounInfo("corker")
nouns['corm']=nounInfo("corm")
nouns['cormorant']=nounInfo("cormorant")
nouns['corn']=nounInfo("corn")
nouns['corncrake']=nounInfo("corncrake")
nouns['cornea']=nounInfo("cornea")
nouns['cornelian']=nounInfo("cornelian")
nouns['corner']=nounInfo("corner")
adjectives['cornered']=adjInfo("cornered")
nouns['cornerstone']=nounInfo("cornerstone")
nouns['cornet']=nounInfo("cornet")
nouns['cornflake']=nounInfo("cornflake")
nouns['cornflour']=nounInfo("cornflour")
nouns['cornflower']=nounInfo("cornflower")
nouns['cornice']=nounInfo("cornice")
nouns['cornpone']=nounInfo("cornpone")
nouns['cornstarch']=nounInfo("cornstarch")
nouns['cornucopia']=nounInfo("cornucopia")
adjectives['corny']=adjInfo("corny")
nouns['corolla']=nounInfo("corolla")
nouns['corollary']=nounInfo("corollary")
nouns['corona']=nounInfo("corona")
adjectives['coronary']=adjInfo("coronary")
nouns['coronary']=nounInfo("coronary")
nouns['coronation']=nounInfo("coronation")
nouns['coroner']=nounInfo("coroner")
nouns['coronet']=nounInfo("coronet")
adjectives['corporal']=adjInfo("corporal")
nouns['corporal']=nounInfo("corporal")
adjectives['corporate']=adjInfo("corporate")
nouns['corporation']=nounInfo("corporation")
adjectives['corporeal']=adjInfo("corporeal")
nouns['corps']=nounInfo("corps")
nouns['corpse']=nounInfo("corpse")
nouns['corpulence']=nounInfo("corpulence")
adjectives['corpulent']=adjInfo("corpulent")
nouns['corpus']=nounInfo("corpus")
nouns['corpuscle']=nounInfo("corpuscle")
nouns['corral']=nounInfo("corral")
adjectives['correct']=adjInfo("correct")
nouns['correction']=nounInfo("correction")
adjectives['correctional']=adjInfo("correctional")
nouns['correctitude']=nounInfo("correctitude")
adjectives['corrective']=adjInfo("corrective")
nouns['corrective']=nounInfo("corrective")
adverbs['correctly']="correctly"
nouns['correctness']=nounInfo("correctness")
nouns['correlation']=nounInfo("correlation")
adjectives['correlative']=adjInfo("correlative")
nouns['correlative']=nounInfo("correlative")
nouns['correspondence']=nounInfo("correspondence")
nouns['correspondent']=nounInfo("correspondent")
adjectives['corresponding']=adjInfo("corresponding")
adverbs['correspondingly']="correspondingly"
nouns['corridor']=nounInfo("corridor")
nouns['corrie']=nounInfo("corrie")
nouns['corrigendum']=nounInfo("corrigendum")
adjectives['corrigible']=adjInfo("corrigible")
nouns['corroboration']=nounInfo("corroboration")
adjectives['corroborative']=adjInfo("corroborative")
nouns['corrosion']=nounInfo("corrosion")
adjectives['corrosive']=adjInfo("corrosive")
nouns['corrosive']=nounInfo("corrosive")
nouns['corrugation']=nounInfo("corrugation")
adjectives['corrupt']=adjInfo("corrupt")
nouns['corruptibility']=nounInfo("corruptibility")
adjectives['corruptible']=adjInfo("corruptible")
nouns['corruption']=nounInfo("corruption")
adverbs['corruptly']="corruptly"
nouns['corruptness']=nounInfo("corruptness")
nouns['corsage']=nounInfo("corsage")
nouns['corsair']=nounInfo("corsair")
nouns['corse']=nounInfo("corse")
nouns['corselet']=nounInfo("corselet")
nouns['corset']=nounInfo("corset")
nouns['corslet']=nounInfo("corslet")
nouns['cortege']=nounInfo("cortege")
nouns['cortex']=nounInfo("cortex")
adjectives['cortical']=adjInfo("cortical")
nouns['cortisone']=nounInfo("cortisone")
nouns['corundum']=nounInfo("corundum")
nouns['coruscation']=nounInfo("coruscation")
nouns['corvette']=nounInfo("corvette")
nouns['cos']=nounInfo("cos")
nouns['cosh']=nounInfo("cosh")
adjectives['cosher']=adjInfo("cosher")
adverbs['cosily']="cosily"
nouns['cosine']=nounInfo("cosine")
nouns['cosiness']=nounInfo("cosiness")
adjectives['cosmetic']=adjInfo("cosmetic")
nouns['cosmetic']=nounInfo("cosmetic")
nouns['cosmetician']=nounInfo("cosmetician")
adjectives['cosmic']=adjInfo("cosmic")
nouns['cosmogony']=nounInfo("cosmogony")
nouns['cosmonaut']=nounInfo("cosmonaut")
adjectives['cosmopolitan']=adjInfo("cosmopolitan")
nouns['cosmopolitan']=nounInfo("cosmopolitan")
nouns['cosmos']=nounInfo("cosmos")
nouns['cost']=nounInfo("cost")
nouns['costermonger']=nounInfo("costermonger")
nouns['costing']=nounInfo("costing")
adjectives['costive']=adjInfo("costive")
nouns['costliness']=nounInfo("costliness")
adjectives['costly']=adjInfo("costly")
nouns['costume']=nounInfo("costume")
nouns['costumier']=nounInfo("costumier")
adjectives['cosy']=adjInfo("cosy")
nouns['cosy']=nounInfo("cosy")
nouns['cot']=nounInfo("cot")
nouns['cote']=nounInfo("cote")
nouns['coterie']=nounInfo("coterie")
adjectives['coterminous']=adjInfo("coterminous")
nouns['cotilion']=nounInfo("cotilion")
nouns['cotillion']=nounInfo("cotillion")
nouns['cottage']=nounInfo("cottage")
nouns['cottar']=nounInfo("cottar")
nouns['cotter']=nounInfo("cotter")
nouns['cotton']=nounInfo("cotton")
nouns['cotyledon']=nounInfo("cotyledon")
nouns['couch']=nounInfo("couch")
adjectives['couchant']=adjInfo("couchant")
nouns['couchette']=nounInfo("couchette")
nouns['cougar']=nounInfo("cougar")
nouns['cough']=nounInfo("cough")
nouns['coulter']=nounInfo("coulter")
nouns['council']=nounInfo("council")
nouns['councillor']=nounInfo("councillor")
nouns['counsel']=nounInfo("counsel")
nouns['counsellor']=nounInfo("counsellor")
nouns['count']=nounInfo("count").addAttributes({"g":"m"})
adjectives['countable']=adjInfo("countable")
nouns['countenance']=nounInfo("countenance")
adverbs['counter']="counter"
nouns['counter']=nounInfo("counter")
nouns['counteraction']=nounInfo("counteraction")
nouns['counterbalance']=nounInfo("counterbalance")
nouns['counterblast']=nounInfo("counterblast")
nouns['counterclaim']=nounInfo("counterclaim")
adjectives['counterfeit']=adjInfo("counterfeit")
nouns['counterfeit']=nounInfo("counterfeit")
nouns['counterfeiter']=nounInfo("counterfeiter")
nouns['counterfoil']=nounInfo("counterfoil")
nouns['countermine']=nounInfo("countermine")
nouns['counteroffer']=nounInfo("counteroffer")
nouns['counterpane']=nounInfo("counterpane")
nouns['counterpart']=nounInfo("counterpart")
nouns['counterplot']=nounInfo("counterplot")
nouns['counterpoint']=nounInfo("counterpoint")
nouns['counterpoise']=nounInfo("counterpoise")
adjectives['counterproductive']=adjInfo("counterproductive")
nouns['countersign']=nounInfo("countersign")
nouns['countertenor']=nounInfo("countertenor")
nouns['countess']=nounInfo("countess").addAttributes({"g":"f"})
adjectives['countless']=adjInfo("countless")
adjectives['countrified']=adjInfo("countrified")
nouns['country']=nounInfo("country")
nouns['countryman']=nounInfo("countryman")
nouns['countryside']=nounInfo("countryside")
nouns['countrywoman']=nounInfo("countrywoman")
nouns['county']=nounInfo("county")
nouns['coup']=nounInfo("coup")
nouns['couple']=nounInfo("couple")
nouns['couplet']=nounInfo("couplet")
nouns['coupling']=nounInfo("coupling")
nouns['coupon']=nounInfo("coupon")
nouns['courage']=nounInfo("courage")
adjectives['courageous']=adjInfo("courageous")
adverbs['courageously']="courageously"
nouns['courgette']=nounInfo("courgette")
nouns['courier']=nounInfo("courier")
nouns['course']=nounInfo("course")
nouns['courser']=nounInfo("courser")
nouns['coursing']=nounInfo("coursing")
nouns['court']=nounInfo("court")
adjectives['courteous']=adjInfo("courteous")
adverbs['courteously']="courteously"
nouns['courtesan']=nounInfo("courtesan")
nouns['courtesy']=nounInfo("courtesy")
nouns['courtier']=nounInfo("courtier")
nouns['courtliness']=nounInfo("courtliness")
adjectives['courtly']=adjInfo("courtly")
nouns['courtship']=nounInfo("courtship")
nouns['courtyard']=nounInfo("courtyard")
nouns['cousin']=nounInfo("cousin").addAttributes({"g":"x"})
adjectives['cousinly']=adjInfo("cousinly")
nouns['cove']=nounInfo("cove")
nouns['coven']=nounInfo("coven")
nouns['covenant']=nounInfo("covenant")
nouns['cover']=nounInfo("cover")
nouns['coverage']=nounInfo("coverage")
adjectives['covering']=adjInfo("covering")
nouns['covering']=nounInfo("covering")
nouns['coverlet']=nounInfo("coverlet")
adjectives['covert']=adjInfo("covert")
nouns['covert']=nounInfo("covert")
adverbs['covertly']="covertly"
adjectives['covetous']=adjInfo("covetous")
adverbs['covetously']="covetously"
nouns['covetousness']=nounInfo("covetousness")
nouns['covey']=nounInfo("covey")
nouns['cow']=nounInfo("cow")
nouns['coward']=nounInfo("coward")
nouns['cowardice']=nounInfo("cowardice")
adjectives['cowardly']=adjInfo("cowardly")
nouns['cowbell']=nounInfo("cowbell")
nouns['cowboy']=nounInfo("cowboy")
nouns['cowhand']=nounInfo("cowhand")
nouns['cowherd']=nounInfo("cowherd")
nouns['cowhide']=nounInfo("cowhide")
nouns['cowhouse']=nounInfo("cowhouse")
nouns['cowl']=nounInfo("cowl")
nouns['cowling']=nounInfo("cowling")
nouns['cowman']=nounInfo("cowman")
nouns['cowpox']=nounInfo("cowpox")
nouns['cowrie']=nounInfo("cowrie")
nouns['cowshed']=nounInfo("cowshed")
nouns['cowskin']=nounInfo("cowskin")
nouns['cowslip']=nounInfo("cowslip")
nouns['cox']=nounInfo("cox")
nouns['coxcomb']=nounInfo("coxcomb")
nouns['coxswain']=nounInfo("coxswain")
adjectives['coy']=adjInfo("coy")
adverbs['coyly']="coyly"
nouns['coyness']=nounInfo("coyness")
nouns['coyote']=nounInfo("coyote")
nouns['coypu']=nounInfo("coypu")
adjectives['cozy']=adjInfo("cozy")
nouns['crab']=nounInfo("crab")
adjectives['crabbed']=adjInfo("crabbed")
nouns['crack']=nounInfo("crack")
nouns['cracker']=nounInfo("cracker")
adjectives['crackers']=adjInfo("crackers")
nouns['crackle']=nounInfo("crackle")
nouns['crackling']=nounInfo("crackling")
nouns['crackpot']=nounInfo("crackpot")
nouns['cracksman']=nounInfo("cracksman")
nouns['cradle']=nounInfo("cradle")
nouns['craft']=nounInfo("craft")
adverbs['craftily']="craftily"
nouns['craftiness']=nounInfo("craftiness")
nouns['craftsman']=nounInfo("craftsman")
nouns['craftsmanship']=nounInfo("craftsmanship")
adjectives['crafty']=adjInfo("crafty")
nouns['crag']=nounInfo("crag")
adjectives['cragged']=adjInfo("cragged")
adjectives['craggy']=adjInfo("craggy")
nouns['cragsman']=nounInfo("cragsman")
nouns['crake']=nounInfo("crake")
nouns['crammer']=nounInfo("crammer")
nouns['cramp']=nounInfo("cramp")
adjectives['cramped']=adjInfo("cramped")
nouns['crampon']=nounInfo("crampon")
nouns['cranberry']=nounInfo("cranberry")
nouns['crane']=nounInfo("crane")
adjectives['cranial']=adjInfo("cranial")
nouns['cranium']=nounInfo("cranium")
nouns['crank']=nounInfo("crank")
nouns['crankshaft']=nounInfo("crankshaft")
adjectives['cranky']=adjInfo("cranky")
adjectives['crannied']=adjInfo("crannied")
nouns['cranny']=nounInfo("cranny")
nouns['crap']=nounInfo("crap")
nouns['crape']=nounInfo("crape")
nouns['craps']=nounInfo("craps")
adverbs['crash']="crash"
nouns['crash']=nounInfo("crash")
adjectives['crass']=adjInfo("crass")
nouns['crate']=nounInfo("crate")
nouns['crater']=nounInfo("crater")
nouns['cravat']=nounInfo("cravat")
adjectives['craven']=adjInfo("craven")
nouns['craven']=nounInfo("craven")
nouns['craving']=nounInfo("craving")
nouns['crawfish']=nounInfo("crawfish")
nouns['crawl']=nounInfo("crawl")
nouns['crawler']=nounInfo("crawler")
nouns['crayfish']=nounInfo("crayfish")
nouns['crayon']=nounInfo("crayon")
nouns['craze']=nounInfo("craze")
adjectives['crazed']=adjInfo("crazed")
adverbs['crazily']="crazily"
nouns['craziness']=nounInfo("craziness")
adjectives['crazy']=adjInfo("crazy")
nouns['creak']=nounInfo("creak")
adverbs['creakily']="creakily"
adjectives['creaky']=adjInfo("creaky")
nouns['cream']=nounInfo("cream")
nouns['creamery']=nounInfo("creamery")
adjectives['creamy']=adjInfo("creamy")
nouns['crease']=nounInfo("crease")
nouns['creation']=nounInfo("creation")
adjectives['creative']=adjInfo("creative")
adverbs['creatively']="creatively"
nouns['creativeness']=nounInfo("creativeness")
nouns['creator']=nounInfo("creator")
nouns['creature']=nounInfo("creature")
nouns['credence']=nounInfo("credence")
nouns['credential']=nounInfo("credential")
nouns['credibility']=nounInfo("credibility")
adjectives['credible']=adjInfo("credible")
adverbs['credibly']="credibly"
nouns['credit']=nounInfo("credit")
adjectives['creditable']=adjInfo("creditable")
adverbs['creditably']="creditably"
nouns['creditor']=nounInfo("creditor")
nouns['credo']=nounInfo("credo")
nouns['credulity']=nounInfo("credulity")
adjectives['credulous']=adjInfo("credulous")
adverbs['credulously']="credulously"
nouns['creed']=nounInfo("creed")
nouns['creek']=nounInfo("creek")
nouns['creel']=nounInfo("creel")
nouns['creep']=nounInfo("creep")
nouns['creeper']=nounInfo("creeper")
adjectives['creepy']=adjInfo("creepy")
nouns['cremation']=nounInfo("cremation")
nouns['crematorium']=nounInfo("crematorium")
nouns['crematory']=nounInfo("crematory")
adjectives['crenellated']=adjInfo("crenellated")
nouns['creosote']=nounInfo("creosote")
nouns['crepe']=nounInfo("crepe")
nouns['crepitation']=nounInfo("crepitation")
adjectives['crepuscular']=adjInfo("crepuscular")
nouns['crescendo']=nounInfo("crescendo")
nouns['crescent']=nounInfo("crescent")
nouns['cress']=nounInfo("cress")
nouns['crest']=nounInfo("crest")
adjectives['crested']=adjInfo("crested")
adjectives['cretaceous']=adjInfo("cretaceous")
nouns['cretin']=nounInfo("cretin")
adjectives['cretinous']=adjInfo("cretinous")
nouns['cretonne']=nounInfo("cretonne")
nouns['crevasse']=nounInfo("crevasse")
nouns['crevice']=nounInfo("crevice")
nouns['crew']=nounInfo("crew")
nouns['crib']=nounInfo("crib")
nouns['cribbage']=nounInfo("cribbage")
nouns['crick']=nounInfo("crick")
nouns['cricket']=nounInfo("cricket")
nouns['cricketer']=nounInfo("cricketer")
nouns['crier']=nounInfo("crier")
nouns['crikey']=nounInfo("crikey")
nouns['crime']=nounInfo("crime")
adjectives['criminal']=adjInfo("criminal")
nouns['criminal']=nounInfo("criminal").addAttributes({"g":"x"})
adverbs['criminally']="criminally"
nouns['criminology']=nounInfo("criminology")
adjectives['crimson']=adjInfo("crimson")
nouns['crimson']=nounInfo("crimson")
nouns['crinkle']=nounInfo("crinkle")
adjectives['crinkly']=adjInfo("crinkly")
nouns['crinoline']=nounInfo("crinoline")
nouns['cripes']=nounInfo("cripes")
nouns['cripple']=nounInfo("cripple")
nouns['crisis']=nounInfo("crisis")
adjectives['crisp']=adjInfo("crisp")
nouns['crisp']=nounInfo("crisp")
adverbs['crisply']="crisply"
nouns['crispness']=nounInfo("crispness")
adjectives['crisscross']=adjInfo("crisscross")
adverbs['crisscross']="crisscross"
nouns['criterion']=nounInfo("criterion")
nouns['critic']=nounInfo("critic")
adjectives['critical']=adjInfo("critical")
adverbs['critically']="critically"
nouns['criticism']=nounInfo("criticism")
nouns['critique']=nounInfo("critique")
nouns['croak']=nounInfo("croak")
nouns['crochet']=nounInfo("crochet")
nouns['crock']=nounInfo("crock")
nouns['crockery']=nounInfo("crockery")
nouns['crocodile']=nounInfo("crocodile")
nouns['crocus']=nounInfo("crocus")
nouns['croft']=nounInfo("croft")
nouns['crofter']=nounInfo("crofter")
nouns['cromlech']=nounInfo("cromlech")
nouns['crone']=nounInfo("crone")
nouns['crony']=nounInfo("crony")
nouns['crook']=nounInfo("crook")
adjectives['crooked']=adjInfo("crooked")
adverbs['crookedly']="crookedly"
nouns['crookedness']=nounInfo("crookedness")
nouns['crooner']=nounInfo("crooner")
nouns['crop']=nounInfo("crop")
nouns['cropper']=nounInfo("cropper")
nouns['croquet']=nounInfo("croquet")
nouns['croquette']=nounInfo("croquette")
nouns['crore']=nounInfo("crore")
nouns['crosier']=nounInfo("crosier")
adjectives['cross']=adjInfo("cross")
nouns['cross']=nounInfo("cross")
nouns['crossbar']=nounInfo("crossbar")
nouns['crossbeam']=nounInfo("crossbeam")
nouns['crossbones']=nounInfo("crossbones")
nouns['crossbow']=nounInfo("crossbow")
adjectives['crossbred']=adjInfo("crossbred")
nouns['crossbreed']=nounInfo("crossbreed")
adjectives['crosscountry']=adjInfo("crosscountry")
adverbs['crosscountry']="crosscountry"
adjectives['crosscut']=adjInfo("crosscut")
nouns['crosscut']=nounInfo("crosscut")
nouns['crosse']=nounInfo("crosse")
adjectives['crosseyed']=adjInfo("crosseyed")
nouns['crossfire']=nounInfo("crossfire")
nouns['crossing']=nounInfo("crossing")
nouns['crosskeys']=nounInfo("crosskeys")
adverbs['crossly']="crossly"
nouns['crossness']=nounInfo("crossness")
nouns['crosspatch']=nounInfo("crosspatch")
nouns['crossroad']=nounInfo("crossroad")
nouns['crosstrees']=nounInfo("crosstrees")
nouns['crosswalk']=nounInfo("crosswalk")
nouns['crosswind']=nounInfo("crosswind")
nouns['crossword']=nounInfo("crossword")
nouns['crotch']=nounInfo("crotch")
nouns['crotchet']=nounInfo("crotchet")
adjectives['crotchety']=adjInfo("crotchety")
nouns['crouch']=nounInfo("crouch")
nouns['croup']=nounInfo("croup")
nouns['croupier']=nounInfo("croupier")
nouns['crow']=nounInfo("crow")
nouns['crowbar']=nounInfo("crowbar")
nouns['crowd']=nounInfo("crowd")
adjectives['crowded']=adjInfo("crowded")
nouns['crown']=nounInfo("crown")
adjectives['crowning']=adjInfo("crowning")
nouns['crozier']=nounInfo("crozier")
adjectives['crucial']=adjInfo("crucial")
adverbs['crucially']="crucially"
nouns['crucible']=nounInfo("crucible")
nouns['crucifix']=nounInfo("crucifix")
nouns['crucifixion']=nounInfo("crucifixion")
adjectives['cruciform']=adjInfo("cruciform")
adjectives['crude']=adjInfo("crude")
adverbs['crudely']="crudely"
nouns['crudity']=nounInfo("crudity")
adjectives['cruel']=adjInfo("cruel")
adverbs['cruelly']="cruelly"
nouns['cruelty']=nounInfo("cruelty")
nouns['cruet']=nounInfo("cruet")
nouns['cruise']=nounInfo("cruise")
nouns['cruiser']=nounInfo("cruiser")
nouns['crumb']=nounInfo("crumb")
adjectives['crumbly']=adjInfo("crumbly")
nouns['crumpet']=nounInfo("crumpet")
nouns['crunch']=nounInfo("crunch")
nouns['crupper']=nounInfo("crupper")
nouns['crusade']=nounInfo("crusade")
nouns['crusader']=nounInfo("crusader")
nouns['cruse']=nounInfo("cruse")
nouns['crush']=nounInfo("crush")
adjectives['crushing']=adjInfo("crushing")
adverbs['crushingly']="crushingly"
nouns['crust']=nounInfo("crust")
nouns['crustacean']=nounInfo("crustacean")
adjectives['crusted']=adjInfo("crusted")
adjectives['crusty']=adjInfo("crusty")
nouns['crutch']=nounInfo("crutch")
nouns['crux']=nounInfo("crux")
nouns['cruzeiro']=nounInfo("cruzeiro")
nouns['cry']=nounInfo("cry")
adjectives['crying']=adjInfo("crying")
nouns['crypt']=nounInfo("crypt")
adjectives['cryptic']=adjInfo("cryptic")
adverbs['cryptically']="cryptically"
nouns['cryptogram']=nounInfo("cryptogram")
nouns['crystal']=nounInfo("crystal")
adjectives['crystalline']=adjInfo("crystalline")
nouns['crystallization']=nounInfo("crystallization")
nouns['cub']=nounInfo("cub")
nouns['cube']=nounInfo("cube")
adjectives['cubic']=adjInfo("cubic")
adjectives['cubical']=adjInfo("cubical")
nouns['cubicle']=nounInfo("cubicle")
nouns['cubism']=nounInfo("cubism")
nouns['cubist']=nounInfo("cubist")
nouns['cubit']=nounInfo("cubit")
nouns['cuckold']=nounInfo("cuckold")
nouns['cuckoo']=nounInfo("cuckoo")
nouns['cucumber']=nounInfo("cucumber")
nouns['cud']=nounInfo("cud")
nouns['cuddle']=nounInfo("cuddle")
adjectives['cuddlesome']=adjInfo("cuddlesome")
adjectives['cuddly']=adjInfo("cuddly")
nouns['cudgel']=nounInfo("cudgel")
nouns['cue']=nounInfo("cue")
nouns['cuff']=nounInfo("cuff")
nouns['cuirass']=nounInfo("cuirass")
nouns['cuirassier']=nounInfo("cuirassier")
nouns['cuisine']=nounInfo("cuisine")
adjectives['culinary']=adjInfo("culinary")
nouns['cull']=nounInfo("cull")
nouns['cullender']=nounInfo("cullender")
nouns['culmination']=nounInfo("culmination")
nouns['culpability']=nounInfo("culpability")
adjectives['culpable']=adjInfo("culpable")
adverbs['culpably']="culpably"
nouns['culprit']=nounInfo("culprit")
nouns['cult']=nounInfo("cult")
adjectives['cultivable']=adjInfo("cultivable")
adjectives['cultivated']=adjInfo("cultivated")
nouns['cultivation']=nounInfo("cultivation")
nouns['cultivator']=nounInfo("cultivator")
adjectives['cultural']=adjInfo("cultural")
nouns['culture']=nounInfo("culture")
adjectives['cultured']=adjInfo("cultured")
nouns['culvert']=nounInfo("culvert")
adjectives['cumbersome']=adjInfo("cumbersome")
adjectives['cumbrous']=adjInfo("cumbrous")
nouns['cummerbund']=nounInfo("cummerbund")
adjectives['cumulative']=adjInfo("cumulative")
adverbs['cumulatively']="cumulatively"
nouns['cumulus']=nounInfo("cumulus")
adjectives['cuneiform']=adjInfo("cuneiform")
adjectives['cunning']=adjInfo("cunning")
nouns['cunning']=nounInfo("cunning")
adverbs['cunningly']="cunningly"
nouns['cunt']=nounInfo("cunt")
nouns['cup']=nounInfo("cup")
nouns['cupboard']=nounInfo("cupboard")
nouns['cupful']=nounInfo("cupful")
nouns['cupidity']=nounInfo("cupidity")
nouns['cupola']=nounInfo("cupola")
nouns['cuppa']=nounInfo("cuppa")
nouns['cupping']=nounInfo("cupping")
adjectives['cupric']=adjInfo("cupric")
nouns['cur']=nounInfo("cur")
nouns['curability']=nounInfo("curability")
adjectives['curable']=adjInfo("curable")
nouns['curacy']=nounInfo("curacy")
nouns['curate']=nounInfo("curate")
adjectives['curative']=adjInfo("curative")
nouns['curator']=nounInfo("curator")
nouns['curb']=nounInfo("curb")
nouns['curd']=nounInfo("curd")
nouns['cure']=nounInfo("cure")
nouns['curfew']=nounInfo("curfew")
nouns['curio']=nounInfo("curio")
nouns['curiosity']=nounInfo("curiosity")
adjectives['curious']=adjInfo("curious")
adverbs['curiously']="curiously"
nouns['curl']=nounInfo("curl")
nouns['curler']=nounInfo("curler")
nouns['curlew']=nounInfo("curlew")
nouns['curling']=nounInfo("curling")
adjectives['curly']=adjInfo("curly")
nouns['curmudgeon']=nounInfo("curmudgeon")
nouns['currant']=nounInfo("currant")
nouns['currency']=nounInfo("currency")
adjectives['current']=adjInfo("current")
nouns['current']=nounInfo("current")
adverbs['currently']="currently"
nouns['curriculum']=nounInfo("curriculum")
adjectives['currish']=adjInfo("currish")
adverbs['currishly']="currishly"
nouns['curry']=nounInfo("curry")
nouns['curse']=nounInfo("curse")
adjectives['cursed']=adjInfo("cursed")
adverbs['cursedly']="cursedly"
adjectives['cursive']=adjInfo("cursive")
adverbs['cursorily']="cursorily"
adjectives['cursory']=adjInfo("cursory")
adjectives['curst']=adjInfo("curst")
adjectives['curt']=adjInfo("curt")
nouns['curtailment']=nounInfo("curtailment")
nouns['curtain']=nounInfo("curtain")
adverbs['curtly']="curtly"
nouns['curtness']=nounInfo("curtness")
nouns['curtsey']=nounInfo("curtsey")
nouns['curtsy']=nounInfo("curtsy")
nouns['curvature']=nounInfo("curvature")
nouns['curve']=nounInfo("curve")
nouns['cushion']=nounInfo("cushion")
adjectives['cushy']=adjInfo("cushy")
nouns['cusp']=nounInfo("cusp")
nouns['cuspidor']=nounInfo("cuspidor")
nouns['cuss']=nounInfo("cuss")
adjectives['cussed']=adjInfo("cussed")
adverbs['cussedly']="cussedly"
nouns['cussedness']=nounInfo("cussedness")
nouns['custard']=nounInfo("custard")
nouns['custodian']=nounInfo("custodian")
nouns['custody']=nounInfo("custody")
nouns['custom']=nounInfo("custom")
adverbs['customarily']="customarily"
adjectives['customary']=adjInfo("customary")
nouns['customer']=nounInfo("customer").addAttributes({"g":"x"})
nouns['cut']=nounInfo("cut")
nouns['cutback']=nounInfo("cutback")
adjectives['cute']=adjInfo("cute")
adverbs['cutely']="cutely"
nouns['cuteness']=nounInfo("cuteness")
nouns['cuticle']=nounInfo("cuticle")
nouns['cutlass']=nounInfo("cutlass")
nouns['cutler']=nounInfo("cutler")
nouns['cutlery']=nounInfo("cutlery")
nouns['cutlet']=nounInfo("cutlet")
nouns['cutpurse']=nounInfo("cutpurse")
nouns['cutter']=nounInfo("cutter")
adjectives['cutting']=adjInfo("cutting")
nouns['cutting']=nounInfo("cutting")
adverbs['cuttingly']="cuttingly"
nouns['cuttlefish']=nounInfo("cuttlefish")
nouns['cutworm']=nounInfo("cutworm")
nouns['cyanide']=nounInfo("cyanide")
adjectives['cyber']=adjInfo("cyber")
adjectives['cybernetic']=adjInfo("cybernetic")
nouns['cybernetics']=nounInfo("cybernetics")
nouns['cyclamen']=nounInfo("cyclamen")
nouns['cycle']=nounInfo("cycle")
adjectives['cyclic']=adjInfo("cyclic")
adjectives['cyclical']=adjInfo("cyclical")
nouns['cyclist']=nounInfo("cyclist").addAttributes({"g":"x"})
nouns['cyclone']=nounInfo("cyclone")
adjectives['cyclonic']=adjInfo("cyclonic")
nouns['cyclopaedia']=nounInfo("cyclopaedia")
nouns['cyclostyle']=nounInfo("cyclostyle")
nouns['cyclotron']=nounInfo("cyclotron")
nouns['cyder']=nounInfo("cyder")
nouns['cygnet']=nounInfo("cygnet")
nouns['cylinder']=nounInfo("cylinder")
adjectives['cylindrical']=adjInfo("cylindrical")
nouns['cymbal']=nounInfo("cymbal")
nouns['cynic']=nounInfo("cynic")
adjectives['cynical']=adjInfo("cynical")
adverbs['cynically']="cynically"
nouns['cynicism']=nounInfo("cynicism")
nouns['cynosure']=nounInfo("cynosure")
nouns['cypher']=nounInfo("cypher")
nouns['cypress']=nounInfo("cypress")
nouns['cyst']=nounInfo("cyst")
nouns['czar']=nounInfo("czar").addAttributes({"g":"m"})
nouns['czarina']=nounInfo("czarina").addAttributes({"g":"f"})
nouns['dab']=nounInfo("dab")
nouns['dabbler']=nounInfo("dabbler")
nouns['dace']=nounInfo("dace")
nouns['dacha']=nounInfo("dacha")
nouns['dachshund']=nounInfo("dachshund")
nouns['dacoit']=nounInfo("dacoit")
nouns['dacoity']=nounInfo("dacoity")
nouns['dactyl']=nounInfo("dactyl")
adjectives['dactylic']=adjInfo("dactylic")
nouns['dad']=nounInfo("dad").addAttributes({"g":"m"})
nouns['daddy']=nounInfo("daddy").addAttributes({"g":"m"})
nouns['dado']=nounInfo("dado")
nouns['daemon']=nounInfo("daemon")
nouns['daffodil']=nounInfo("daffodil")
adjectives['daft']=adjInfo("daft")
adverbs['daftly']="daftly"
nouns['dagger']=nounInfo("dagger")
nouns['dago']=nounInfo("dago")
nouns['daguerreotype']=nounInfo("daguerreotype")
nouns['dahlia']=nounInfo("dahlia")
adjectives['daily']=adjInfo("daily")
adverbs['daily']="daily"
nouns['daily']=nounInfo("daily")
adverbs['daintily']="daintily"
nouns['daintiness']=nounInfo("daintiness")
adjectives['dainty']=adjInfo("dainty")
nouns['dainty']=nounInfo("dainty")
nouns['dairy']=nounInfo("dairy")
nouns['dairying']=nounInfo("dairying")
nouns['dairymaid']=nounInfo("dairymaid")
nouns['dais']=nounInfo("dais")
nouns['daisy']=nounInfo("daisy")
nouns['dale']=nounInfo("dale")
nouns['dalesman']=nounInfo("dalesman")
nouns['dalliance']=nounInfo("dalliance")
nouns['dalmation']=nounInfo("dalmation")
nouns['dam']=nounInfo("dam")
nouns['damage']=nounInfo("damage")
adjectives['damascene']=adjInfo("damascene")
nouns['damask']=nounInfo("damask")
nouns['dame']=nounInfo("dame")
adjectives['damn']=adjInfo("damn")
adverbs['damn']="damn"
nouns['damn']=nounInfo("damn")
adjectives['damnable']=adjInfo("damnable")
adverbs['damnably']="damnably"
nouns['damnation']=nounInfo("damnation")
adjectives['damned']=adjInfo("damned")
adverbs['damned']="damned"
adjectives['damp']=adjInfo("damp")
nouns['damp']=nounInfo("damp")
nouns['damper']=nounInfo("damper")
adjectives['dampish']=adjInfo("dampish")
adverbs['damply']="damply"
nouns['dampness']=nounInfo("dampness")
nouns['damsel']=nounInfo("damsel")
nouns['damson']=nounInfo("damson")
nouns['dance']=nounInfo("dance")
nouns['dancer']=nounInfo("dancer").addAttributes({"g":"x"})
adjectives['dancing']=adjInfo("dancing")
nouns['dancing']=nounInfo("dancing")
nouns['dandelion']=nounInfo("dandelion")
nouns['dander']=nounInfo("dander")
adjectives['dandified']=adjInfo("dandified")
nouns['dandruff']=nounInfo("dandruff")
adjectives['dandy']=adjInfo("dandy")
nouns['dandy']=nounInfo("dandy")
nouns['danger']=nounInfo("danger")
adjectives['dangerous']=adjInfo("dangerous")
adverbs['dangerously']="dangerously"
adjectives['dank']=adjInfo("dank")
nouns['daphne']=nounInfo("daphne")
adjectives['dapper']=adjInfo("dapper")
nouns['dare']=nounInfo("dare")
adjectives['daring']=adjInfo("daring")
nouns['daring']=nounInfo("daring")
adverbs['daringly']="daringly"
adjectives['dark']=adjInfo("dark")
nouns['dark']=nounInfo("dark")
adverbs['darkly']="darkly"
nouns['darkness']=nounInfo("darkness")
nouns['darkroom']=nounInfo("darkroom")
nouns['darling']=nounInfo("darling").addAttributes({"g":"x"})
nouns['darn']=nounInfo("darn")
nouns['darning']=nounInfo("darning")
nouns['dart']=nounInfo("dart")
nouns['dash']=nounInfo("dash")
nouns['dashboard']=nounInfo("dashboard")
adjectives['dashing']=adjInfo("dashing")
adverbs['dashingly']="dashingly"
nouns['dastard']=nounInfo("dastard")
adjectives['dastardly']=adjInfo("dastardly")
nouns['data']=nounInfo("data")
adjectives['datable']=adjInfo("datable")
nouns['date']=nounInfo("date")
adjectives['dated']=adjInfo("dated")
adjectives['dateless']=adjInfo("dateless")
adjectives['dative']=adjInfo("dative")
nouns['dative']=nounInfo("dative")
nouns['datum']=nounInfo("datum")
nouns['daub']=nounInfo("daub")
nouns['dauber']=nounInfo("dauber")
nouns['daughter']=nounInfo("daughter").addAttributes({"g":"f"})
adjectives['daughterly']=adjInfo("daughterly")
adjectives['dauntless']=adjInfo("dauntless")
adverbs['dauntlessly']="dauntlessly"
nouns['dauphin']=nounInfo("dauphin")
nouns['davenport']=nounInfo("davenport")
nouns['davit']=nounInfo("davit")
nouns['daw']=nounInfo("daw")
nouns['dawdler']=nounInfo("dawdler")
nouns['dawn']=nounInfo("dawn")
nouns['day']=nounInfo("day")
nouns['daybreak']=nounInfo("daybreak")
nouns['daylight']=nounInfo("daylight")
nouns['daze']=nounInfo("daze")
adverbs['dazedly']="dazedly"
nouns['dazzle']=nounInfo("dazzle")
nouns['deacon']=nounInfo("deacon")
nouns['deaconess']=nounInfo("deaconess")
adjectives['dead']=adjInfo("dead")
adverbs['dead']="dead"
nouns['deadline']=nounInfo("deadline")
nouns['deadlock']=nounInfo("deadlock")
adjectives['deadly']=adjInfo("deadly")
adverbs['deadly']="deadly"
adjectives['deadpan']=adjInfo("deadpan")
adjectives['deaf']=adjInfo("deaf")
nouns['deafness']=nounInfo("deafness")
adverbs['deal']="deal"
nouns['deal']=nounInfo("deal")
nouns['dealer']=nounInfo("dealer")
nouns['dealing']=nounInfo("dealing")
nouns['dean']=nounInfo("dean")
nouns['deanery']=nounInfo("deanery")
adjectives['dear']=adjInfo("dear")
adverbs['dear']="dear"
nouns['dear']=nounInfo("dear").addAttributes({"g":"x"})
nouns['dearest']=nounInfo("dearest")
nouns['dearie']=nounInfo("dearie")
adverbs['dearly']="dearly"
nouns['dearness']=nounInfo("dearness")
nouns['dearth']=nounInfo("dearth")
nouns['deary']=nounInfo("deary")
nouns['death']=nounInfo("death")
adjectives['deathless']=adjInfo("deathless")
adjectives['deathlike']=adjInfo("deathlike")
adjectives['deathly']=adjInfo("deathly")
adverbs['deathly']="deathly"
nouns['deb']=nounInfo("deb")
nouns['debarkation']=nounInfo("debarkation")
nouns['debasement']=nounInfo("debasement")
adjectives['debatable']=adjInfo("debatable")
nouns['debate']=nounInfo("debate")
nouns['debater']=nounInfo("debater")
nouns['debauch']=nounInfo("debauch")
nouns['debauchee']=nounInfo("debauchee")
nouns['debauchery']=nounInfo("debauchery")
nouns['debenture']=nounInfo("debenture")
nouns['debility']=nounInfo("debility")
nouns['debit']=nounInfo("debit")
adjectives['debonair']=adjInfo("debonair")
nouns['debris']=nounInfo("debris")
nouns['debt']=nounInfo("debt")
nouns['debtor']=nounInfo("debtor")
nouns['debut']=nounInfo("debut")
nouns['debutante']=nounInfo("debutante")
nouns['decade']=nounInfo("decade")
nouns['decadence']=nounInfo("decadence")
adjectives['decadent']=adjInfo("decadent")
nouns['decadent']=nounInfo("decadent")
nouns['decanter']=nounInfo("decanter")
nouns['decapitation']=nounInfo("decapitation")
adjectives['decasyllabic']=adjInfo("decasyllabic")
nouns['decasyllable']=nounInfo("decasyllable")
nouns['decay']=nounInfo("decay")
nouns['decease']=nounInfo("decease")
nouns['deceit']=nounInfo("deceit")
adjectives['deceitful']=adjInfo("deceitful")
adverbs['deceitfully']="deceitfully"
nouns['deceitfulness']=nounInfo("deceitfulness")
nouns['deceiver']=nounInfo("deceiver")
adverbs['deceivingly']="deceivingly"
nouns['decency']=nounInfo("decency")
adjectives['decent']=adjInfo("decent")
adverbs['decently']="decently"
nouns['decentralization']=nounInfo("decentralization")
nouns['deception']=nounInfo("deception")
adjectives['deceptive']=adjInfo("deceptive")
adverbs['deceptively']="deceptively"
nouns['decibel']=nounInfo("decibel")
adjectives['decided']=adjInfo("decided")
adverbs['decidedly']="decidedly"
adjectives['deciduous']=adjInfo("deciduous")
adjectives['decimal']=adjInfo("decimal")
nouns['decimalization']=nounInfo("decimalization")
adjectives['decipherable']=adjInfo("decipherable")
nouns['decision']=nounInfo("decision")
adjectives['decisive']=adjInfo("decisive")
adverbs['decisively']="decisively"
nouns['deck']=nounInfo("deck")
nouns['decker']=nounInfo("decker")
nouns['declamation']=nounInfo("declamation")
adjectives['declamatory']=adjInfo("declamatory")
adjectives['declarable']=adjInfo("declarable")
nouns['declaration']=nounInfo("declaration")
nouns['declassification']=nounInfo("declassification")
nouns['declension']=nounInfo("declension")
nouns['declination']=nounInfo("declination")
nouns['decline']=nounInfo("decline")
nouns['declivity']=nounInfo("declivity")
nouns['decoder']=nounInfo("decoder")
nouns['decolonization']=nounInfo("decolonization")
nouns['decomposition']=nounInfo("decomposition")
nouns['decompression']=nounInfo("decompression")
nouns['decontamination']=nounInfo("decontamination")
nouns['decoration']=nounInfo("decoration")
adjectives['decorative']=adjInfo("decorative")
nouns['decorator']=nounInfo("decorator")
adjectives['decorous']=adjInfo("decorous")
adverbs['decorously']="decorously"
nouns['decorum']=nounInfo("decorum")
nouns['decoy']=nounInfo("decoy")
nouns['decrease']=nounInfo("decrease")
nouns['decree']=nounInfo("decree")
adjectives['decrepit']=adjInfo("decrepit")
nouns['decrepitude']=nounInfo("decrepitude")
nouns['dedication']=nounInfo("dedication")
adjectives['deductible']=adjInfo("deductible")
nouns['deduction']=nounInfo("deduction")
adjectives['deductive']=adjInfo("deductive")
nouns['deed']=nounInfo("deed")
nouns['deedpoll']=nounInfo("deedpoll")
adjectives['deep']=adjInfo("deep")
adverbs['deep']="deep"
nouns['deep']=nounInfo("deep")
adverbs['deeply']="deeply"
nouns['deepness']=nounInfo("deepness")
nouns['deer']=nounInfo("deer")
nouns['deerskin']=nounInfo("deerskin")
nouns['defacement']=nounInfo("defacement")
nouns['defalcation']=nounInfo("defalcation")
nouns['defamation']=nounInfo("defamation")
adjectives['defamatory']=adjInfo("defamatory")
nouns['default']=nounInfo("default")
nouns['defaulter']=nounInfo("defaulter")
nouns['defeat']=nounInfo("defeat")
nouns['defeatism']=nounInfo("defeatism")
nouns['defeatist']=nounInfo("defeatist")
nouns['defecation']=nounInfo("defecation")
nouns['defect']=nounInfo("defect")
nouns['defection']=nounInfo("defection")
adjectives['defective']=adjInfo("defective")
adverbs['defectively']="defectively"
nouns['defectiveness']=nounInfo("defectiveness")
nouns['defector']=nounInfo("defector")
nouns['defence']=nounInfo("defence")
adjectives['defenceless']=adjInfo("defenceless")
adverbs['defencelessly']="defencelessly"
nouns['defencelessness']=nounInfo("defencelessness")
nouns['defendant']=nounInfo("defendant")
nouns['defender']=nounInfo("defender")
nouns['defense']=nounInfo("defense")
adjectives['defensible']=adjInfo("defensible")
adjectives['defensive']=adjInfo("defensive")
nouns['defensive']=nounInfo("defensive")
adverbs['defensively']="defensively"
nouns['deference']=nounInfo("deference")
adjectives['deferential']=adjInfo("deferential")
adverbs['deferentially']="deferentially"
nouns['deferment']=nounInfo("deferment")
nouns['defiance']=nounInfo("defiance")
adjectives['defiant']=adjInfo("defiant")
adverbs['defiantly']="defiantly"
nouns['deficiency']=nounInfo("deficiency")
adjectives['deficient']=adjInfo("deficient")
nouns['deficit']=nounInfo("deficit")
nouns['defile']=nounInfo("defile")
nouns['defilement']=nounInfo("defilement")
adjectives['definable']=adjInfo("definable")
adjectives['definite']=adjInfo("definite")
adverbs['definitely']="definitely"
nouns['definition']=nounInfo("definition")
adjectives['definitive']=adjInfo("definitive")
nouns['deflation']=nounInfo("deflation")
adjectives['deflationary']=adjInfo("deflationary")
nouns['deflection']=nounInfo("deflection")
nouns['defoliant']=nounInfo("defoliant")
nouns['defoliation']=nounInfo("defoliation")
adjectives['deformed']=adjInfo("deformed")
nouns['deformity']=nounInfo("deformity")
nouns['defrayal']=nounInfo("defrayal")
nouns['defrayment']=nounInfo("defrayment")
nouns['defroster']=nounInfo("defroster")
adjectives['deft']=adjInfo("deft")
adverbs['deftly']="deftly"
nouns['deftness']=nounInfo("deftness")
adjectives['defunct']=adjInfo("defunct")
nouns['degeneracy']=nounInfo("degeneracy")
adjectives['degenerate']=adjInfo("degenerate")
nouns['degenerate']=nounInfo("degenerate")
nouns['degeneration']=nounInfo("degeneration")
nouns['degradation']=nounInfo("degradation")
nouns['degree']=nounInfo("degree")
nouns['deification']=nounInfo("deification")
nouns['deindexation']=nounInfo("deindexation")
nouns['deism']=nounInfo("deism")
nouns['deist']=nounInfo("deist")
nouns['deity']=nounInfo("deity")
adverbs['dejectedly']="dejectedly"
nouns['dejection']=nounInfo("dejection")
nouns['dekko']=nounInfo("dekko")
nouns['delay']=nounInfo("delay")
adjectives['delectable']=adjInfo("delectable")
nouns['delectation']=nounInfo("delectation")
nouns['delegacy']=nounInfo("delegacy")
nouns['delegate']=nounInfo("delegate")
nouns['delegation']=nounInfo("delegation")
adjectives['deleterious']=adjInfo("deleterious")
nouns['deletion']=nounInfo("deletion")
nouns['delf']=nounInfo("delf")
nouns['delft']=nounInfo("delft")
adjectives['deliberate']=adjInfo("deliberate")
adverbs['deliberately']="deliberately"
nouns['deliberation']=nounInfo("deliberation")
adjectives['deliberative']=adjInfo("deliberative")
nouns['delicacy']=nounInfo("delicacy")
adjectives['delicate']=adjInfo("delicate")
adverbs['delicately']="delicately"
nouns['delicatessen']=nounInfo("delicatessen")
adjectives['delicious']=adjInfo("delicious")
adverbs['deliciously']="deliciously"
nouns['delight']=nounInfo("delight")
adverbs['delightedly']="delightedly"
adjectives['delightful']=adjInfo("delightful")
adverbs['delightfully']="delightfully"
nouns['delimitation']=nounInfo("delimitation")
nouns['delineation']=nounInfo("delineation")
nouns['delinquency']=nounInfo("delinquency")
adjectives['delinquent']=adjInfo("delinquent")
nouns['delinquent']=nounInfo("delinquent")
adjectives['deliquescent']=adjInfo("deliquescent")
adjectives['delirious']=adjInfo("delirious")
adverbs['deliriously']="deliriously"
nouns['delirium']=nounInfo("delirium")
nouns['deliverance']=nounInfo("deliverance")
nouns['deliverer']=nounInfo("deliverer")
nouns['delivery']=nounInfo("delivery")
nouns['dell']=nounInfo("dell")
nouns['delphinium']=nounInfo("delphinium")
nouns['delta']=nounInfo("delta")
nouns['deluge']=nounInfo("deluge")
nouns['delusion']=nounInfo("delusion")
adjectives['delusive']=adjInfo("delusive")
adverbs['delusively']="delusively"
nouns['demagnetization']=nounInfo("demagnetization")
adjectives['demagogic']=adjInfo("demagogic")
nouns['demagogue']=nounInfo("demagogue")
nouns['demagoguery']=nounInfo("demagoguery")
nouns['demagogy']=nounInfo("demagogy")
nouns['demand']=nounInfo("demand")
nouns['demarcation']=nounInfo("demarcation")
nouns['demeanour']=nounInfo("demeanour")
adjectives['demented']=adjInfo("demented")
adverbs['dementedly']="dementedly"
nouns['demerara']=nounInfo("demerara")
nouns['demerit']=nounInfo("demerit")
nouns['demesne']=nounInfo("demesne")
nouns['demigod']=nounInfo("demigod")
nouns['demijohn']=nounInfo("demijohn")
nouns['demimondaine']=nounInfo("demimondaine")
nouns['demimonde']=nounInfo("demimonde")
nouns['demise']=nounInfo("demise")
nouns['demister']=nounInfo("demister")
nouns['demo']=nounInfo("demo")
nouns['demobilization']=nounInfo("demobilization")
nouns['democracy']=nounInfo("democracy")
nouns['democrat']=nounInfo("democrat")
adjectives['democratic']=adjInfo("democratic")
adverbs['democratically']="democratically"
nouns['democratization']=nounInfo("democratization")
adjectives['demographic']=adjInfo("demographic")
nouns['demography']=nounInfo("demography")
nouns['demolition']=nounInfo("demolition")
nouns['demon']=nounInfo("demon")
nouns['demonetization']=nounInfo("demonetization")
adjectives['demoniac']=adjInfo("demoniac")
nouns['demoniac']=nounInfo("demoniac")
adjectives['demoniacal']=adjInfo("demoniacal")
adverbs['demoniacally']="demoniacally"
adjectives['demonic']=adjInfo("demonic")
nouns['demonstrability']=nounInfo("demonstrability")
adjectives['demonstrable']=adjInfo("demonstrable")
adverbs['demonstrably']="demonstrably"
nouns['demonstration']=nounInfo("demonstration")
adjectives['demonstrative']=adjInfo("demonstrative")
adverbs['demonstratively']="demonstratively"
nouns['demonstrator']=nounInfo("demonstrator")
nouns['demoralization']=nounInfo("demoralization")
adjectives['demotic']=adjInfo("demotic")
nouns['demotion']=nounInfo("demotion")
nouns['demur']=nounInfo("demur")
adjectives['demure']=adjInfo("demure")
adverbs['demurely']="demurely"
nouns['demureness']=nounInfo("demureness")
nouns['den']=nounInfo("den")
adjectives['denary']=adjInfo("denary")
nouns['denationalization']=nounInfo("denationalization")
adjectives['denatured']=adjInfo("denatured")
adjectives['deniable']=adjInfo("deniable")
nouns['denial']=nounInfo("denial")
nouns['denier']=nounInfo("denier")
nouns['denigration']=nounInfo("denigration")
nouns['denim']=nounInfo("denim")
nouns['denims']=nounInfo("denims")
nouns['denizen']=nounInfo("denizen")
nouns['denomination']=nounInfo("denomination")
adjectives['denominational']=adjInfo("denominational")
nouns['denominator']=nounInfo("denominator")
adjectives['dense']=adjInfo("dense")
adverbs['densely']="densely"
nouns['denseness']=nounInfo("denseness")
nouns['density']=nounInfo("density")
nouns['dent']=nounInfo("dent")
adjectives['dental']=adjInfo("dental")
nouns['dentifrice']=nounInfo("dentifrice")
nouns['dentist']=nounInfo("dentist").addAttributes({"g":"x"})
nouns['dentistry']=nounInfo("dentistry")
nouns['denture']=nounInfo("denture")
nouns['denudation']=nounInfo("denudation")
nouns['denunciation']=nounInfo("denunciation")
nouns['deodar']=nounInfo("deodar")
nouns['deodorant']=nounInfo("deodorant")
adjectives['departed']=adjInfo("departed")
nouns['departed']=nounInfo("departed")
nouns['department']=nounInfo("department")
adjectives['departmental']=adjInfo("departmental")
nouns['departure']=nounInfo("departure")
adjectives['dependable']=adjInfo("dependable")
nouns['dependant']=nounInfo("dependant")
nouns['dependence']=nounInfo("dependence")
nouns['dependency']=nounInfo("dependency")
adjectives['dependent']=adjInfo("dependent")
nouns['dependent']=nounInfo("dependent")
nouns['depiction']=nounInfo("depiction")
adjectives['depilatory']=adjInfo("depilatory")
nouns['depilatory']=nounInfo("depilatory")
nouns['depletion']=nounInfo("depletion")
adjectives['deplorable']=adjInfo("deplorable")
adverbs['deplorably']="deplorably"
nouns['deployment']=nounInfo("deployment")
nouns['deponent']=nounInfo("deponent")
nouns['depopulation']=nounInfo("depopulation")
nouns['deportation']=nounInfo("deportation")
nouns['deportee']=nounInfo("deportee")
nouns['deportment']=nounInfo("deportment")
nouns['deposit']=nounInfo("deposit")
nouns['deposition']=nounInfo("deposition")
nouns['depositor']=nounInfo("depositor")
nouns['depository']=nounInfo("depository")
nouns['depot']=nounInfo("depot")
nouns['depravity']=nounInfo("depravity")
nouns['deprecation']=nounInfo("deprecation")
nouns['depreciation']=nounInfo("depreciation")
adjectives['depreciatory']=adjInfo("depreciatory")
nouns['depredation']=nounInfo("depredation")
nouns['depression']=nounInfo("depression")
adjectives['depressive']=adjInfo("depressive")
nouns['depressive']=nounInfo("depressive")
nouns['deprivation']=nounInfo("deprivation")
adjectives['deprived']=adjInfo("deprived")
nouns['depth']=nounInfo("depth")
nouns['deputation']=nounInfo("deputation")
nouns['deputy']=nounInfo("deputy")
nouns['derailment']=nounInfo("derailment")
nouns['derangement']=nounInfo("derangement")
nouns['derby']=nounInfo("derby")
nouns['deregulation']=nounInfo("deregulation")
adjectives['derelict']=adjInfo("derelict")
nouns['dereliction']=nounInfo("dereliction")
nouns['derision']=nounInfo("derision")
adjectives['derisive']=adjInfo("derisive")
adverbs['derisively']="derisively"
adjectives['derisory']=adjInfo("derisory")
nouns['derivation']=nounInfo("derivation")
adjectives['derivative']=adjInfo("derivative")
nouns['derivative']=nounInfo("derivative")
nouns['dermatologist']=nounInfo("dermatologist")
nouns['dermatology']=nounInfo("dermatology")
nouns['derogation']=nounInfo("derogation")
adjectives['derogatory']=adjInfo("derogatory")
nouns['derrick']=nounInfo("derrick")
nouns['derv']=nounInfo("derv")
nouns['dervish']=nounInfo("dervish")
nouns['desalination']=nounInfo("desalination")
nouns['desalinization']=nounInfo("desalinization")
nouns['descant']=nounInfo("descant")
nouns['descendant']=nounInfo("descendant")
nouns['descent']=nounInfo("descent")
nouns['description']=nounInfo("description")
adjectives['descriptive']=adjInfo("descriptive")
adverbs['descriptively']="descriptively"
nouns['desecration']=nounInfo("desecration")
nouns['desegregation']=nounInfo("desegregation")
nouns['desensitization']=nounInfo("desensitization")
adjectives['desert']=adjInfo("desert")
nouns['desert']=nounInfo("desert")
nouns['deserter']=nounInfo("deserter")
nouns['desertion']=nounInfo("desertion")
adjectives['deserved']=adjInfo("deserved")
adverbs['deservedly']="deservedly"
adjectives['deserving']=adjInfo("deserving")
nouns['desiccant']=nounInfo("desiccant")
nouns['desideratum']=nounInfo("desideratum")
nouns['design']=nounInfo("design")
adjectives['designate']=adjInfo("designate")
nouns['designation']=nounInfo("designation")
adverbs['designedly']="designedly"
nouns['designer']=nounInfo("designer")
adjectives['designing']=adjInfo("designing")
nouns['designing']=nounInfo("designing")
nouns['desirability']=nounInfo("desirability")
adjectives['desirable']=adjInfo("desirable")
nouns['desire']=nounInfo("desire")
adjectives['desirous']=adjInfo("desirous")
nouns['desk']=nounInfo("desk")
adjectives['desolate']=adjInfo("desolate")
adverbs['desolately']="desolately"
nouns['desolation']=nounInfo("desolation")
nouns['despair']=nounInfo("despair")
adverbs['despairingly']="despairingly"
nouns['despatch']=nounInfo("despatch")
nouns['desperado']=nounInfo("desperado")
adjectives['desperate']=adjInfo("desperate")
adverbs['desperately']="desperately"
nouns['desperation']=nounInfo("desperation")
adjectives['despicable']=adjInfo("despicable")
adverbs['despicably']="despicably"
nouns['despite']=nounInfo("despite")
prepositions['despite']=P("despite")
adjectives['despiteful']=adjInfo("despiteful")
adverbs['despitefully']="despitefully"
nouns['despondency']=nounInfo("despondency")
adjectives['despondent']=adjInfo("despondent")
adverbs['despondently']="despondently"
nouns['despot']=nounInfo("despot")
adjectives['despotic']=adjInfo("despotic")
nouns['despotism']=nounInfo("despotism")
nouns['dessert']=nounInfo("dessert")
nouns['dessertspoon']=nounInfo("dessertspoon")
nouns['dessertspoonful']=nounInfo("dessertspoonful")
nouns['destination']=nounInfo("destination")
nouns['destiny']=nounInfo("destiny")
adjectives['destitute']=adjInfo("destitute")
nouns['destitution']=nounInfo("destitution")
nouns['destroyer']=nounInfo("destroyer")
nouns['destructibility']=nounInfo("destructibility")
adjectives['destructible']=adjInfo("destructible")
nouns['destruction']=nounInfo("destruction")
adjectives['destructive']=adjInfo("destructive")
adverbs['destructively']="destructively"
nouns['destructiveness']=nounInfo("destructiveness")
nouns['desuetude']=nounInfo("desuetude")
adjectives['desultory']=adjInfo("desultory")
adjectives['detachable']=adjInfo("detachable")
adjectives['detached']=adjInfo("detached")
nouns['detachment']=nounInfo("detachment")
nouns['detail']=nounInfo("detail")
nouns['detainee']=nounInfo("detainee")
adjectives['detectable']=adjInfo("detectable")
nouns['detection']=nounInfo("detection")
nouns['detective']=nounInfo("detective")
nouns['detector']=nounInfo("detector")
nouns['detention']=nounInfo("detention")
adjectives['detergent']=adjInfo("detergent")
nouns['detergent']=nounInfo("detergent")
adverbs['detergently']="detergently"
nouns['deterioration']=nounInfo("deterioration")
adjectives['determinable']=adjInfo("determinable")
adjectives['determinant']=adjInfo("determinant")
nouns['determinant']=nounInfo("determinant")
adjectives['determinate']=adjInfo("determinate")
nouns['determination']=nounInfo("determination")
adjectives['determinative']=adjInfo("determinative")
nouns['determinative']=nounInfo("determinative")
adverbs['determinedly']="determinedly"
nouns['determiner']=nounInfo("determiner")
adjectives['deterrent']=adjInfo("deterrent")
nouns['deterrent']=nounInfo("deterrent")
adjectives['detestable']=adjInfo("detestable")
adverbs['detestably']="detestably"
nouns['detestation']=nounInfo("detestation")
nouns['dethronement']=nounInfo("dethronement")
nouns['detonation']=nounInfo("detonation")
nouns['detonator']=nounInfo("detonator")
nouns['detour']=nounInfo("detour")
nouns['detraction']=nounInfo("detraction")
nouns['detractor']=nounInfo("detractor")
nouns['detribalization']=nounInfo("detribalization")
nouns['detriment']=nounInfo("detriment")
adjectives['detrimental']=adjInfo("detrimental")
adverbs['detrimentally']="detrimentally"
nouns['detritus']=nounInfo("detritus")
nouns['deuce']=nounInfo("deuce")
adjectives['deuced']=adjInfo("deuced")
adverbs['deucedly']="deucedly"
nouns['devaluation']=nounInfo("devaluation")
nouns['devastation']=nounInfo("devastation")
nouns['developer']=nounInfo("developer")
nouns['development']=nounInfo("development")
adjectives['developmental']=adjInfo("developmental")
adjectives['deviant']=adjInfo("deviant")
nouns['deviant']=nounInfo("deviant")
nouns['deviation']=nounInfo("deviation")
nouns['deviationism']=nounInfo("deviationism")
nouns['deviationist']=nounInfo("deviationist")
nouns['device']=nounInfo("device")
nouns['devil']=nounInfo("devil")
adjectives['devilish']=adjInfo("devilish")
adverbs['devilish']="devilish"
adverbs['devilishly']="devilishly"
nouns['devilment']=nounInfo("devilment")
nouns['devilry']=nounInfo("devilry")
adjectives['devious']=adjInfo("devious")
adverbs['deviously']="deviously"
nouns['deviousness']=nounInfo("deviousness")
nouns['devitalization']=nounInfo("devitalization")
adjectives['devoid']=adjInfo("devoid")
nouns['devolution']=nounInfo("devolution")
adjectives['devoted']=adjInfo("devoted")
adverbs['devotedly']="devotedly"
nouns['devotee']=nounInfo("devotee")
nouns['devotion']=nounInfo("devotion")
adjectives['devotional']=adjInfo("devotional")
adjectives['devout']=adjInfo("devout")
adverbs['devoutly']="devoutly"
nouns['devoutness']=nounInfo("devoutness")
nouns['dew']=nounInfo("dew")
nouns['dewlap']=nounInfo("dewlap")
adjectives['dewy']=adjInfo("dewy")
nouns['dexterity']=nounInfo("dexterity")
adjectives['dexterous']=adjInfo("dexterous")
adverbs['dexterously']="dexterously"
nouns['dextrose']=nounInfo("dextrose")
adjectives['dextrous']=adjInfo("dextrous")
nouns['dhoti']=nounInfo("dhoti")
nouns['dhow']=nounInfo("dhow")
nouns['diabetes']=nounInfo("diabetes")
adjectives['diabetic']=adjInfo("diabetic")
nouns['diabetic']=nounInfo("diabetic")
adjectives['diabolic']=adjInfo("diabolic")
adjectives['diabolical']=adjInfo("diabolical")
adverbs['diabolically']="diabolically"
adjectives['diacritic']=adjInfo("diacritic")
nouns['diacritic']=nounInfo("diacritic")
adjectives['diacritical']=adjInfo("diacritical")
nouns['diadem']=nounInfo("diadem")
nouns['diaeresis']=nounInfo("diaeresis")
nouns['diagnosis']=nounInfo("diagnosis")
adjectives['diagnostic']=adjInfo("diagnostic")
adjectives['diagonal']=adjInfo("diagonal")
nouns['diagonal']=nounInfo("diagonal")
adverbs['diagonally']="diagonally"
nouns['diagram']=nounInfo("diagram")
adjectives['diagrammatic']=adjInfo("diagrammatic")
adjectives['diagrammatical']=adjInfo("diagrammatical")
adverbs['diagrammatically']="diagrammatically"
nouns['dial']=nounInfo("dial")
nouns['dialect']=nounInfo("dialect")
adjectives['dialectal']=adjInfo("dialectal")
nouns['dialectic']=nounInfo("dialectic")
adjectives['dialectical']=adjInfo("dialectical")
adverbs['dialectically']="dialectically"
nouns['dialectician']=nounInfo("dialectician")
nouns['dialectics']=nounInfo("dialectics")
nouns['dialogue']=nounInfo("dialogue")
nouns['diameter']=nounInfo("diameter")
adverbs['diametrically']="diametrically"
nouns['diamond']=nounInfo("diamond")
nouns['diaper']=nounInfo("diaper")
adjectives['diaphanous']=adjInfo("diaphanous")
nouns['diaphragm']=nounInfo("diaphragm")
nouns['diarchy']=nounInfo("diarchy")
nouns['diarist']=nounInfo("diarist")
nouns['diarrhea']=nounInfo("diarrhea")
nouns['diarrhoea']=nounInfo("diarrhoea")
nouns['diary']=nounInfo("diary")
adjectives['diatonic']=adjInfo("diatonic")
nouns['diatribe']=nounInfo("diatribe")
nouns['dibber']=nounInfo("dibber")
nouns['dibble']=nounInfo("dibble")
nouns['dice']=nounInfo("dice")
adjectives['dicey']=adjInfo("dicey")
nouns['dichotomy']=nounInfo("dichotomy")
nouns['dickens']=nounInfo("dickens")
nouns['dickey']=nounInfo("dickey")
adjectives['dicky']=adjInfo("dicky")
nouns['dicky']=nounInfo("dicky")
nouns['dictate']=nounInfo("dictate")
nouns['dictation']=nounInfo("dictation")
nouns['dictator']=nounInfo("dictator")
adjectives['dictatorial']=adjInfo("dictatorial")
adverbs['dictatorially']="dictatorially"
nouns['dictatorship']=nounInfo("dictatorship")
nouns['diction']=nounInfo("diction")
nouns['dictionary']=nounInfo("dictionary")
nouns['dictum']=nounInfo("dictum")
adjectives['didactic']=adjInfo("didactic")
adverbs['didactically']="didactically"
nouns['die']=nounInfo("die")
nouns['dieresis']=nounInfo("dieresis")
nouns['diesel']=nounInfo("diesel")
nouns['diet']=nounInfo("diet")
adjectives['dietary']=adjInfo("dietary")
nouns['dietetics']=nounInfo("dietetics")
nouns['dietician']=nounInfo("dietician")
nouns['dietitian']=nounInfo("dietitian")
nouns['difference']=nounInfo("difference")
adjectives['different']=adjInfo("different")
adjectives['differential']=adjInfo("differential")
nouns['differential']=nounInfo("differential")
nouns['differentiation']=nounInfo("differentiation")
adverbs['differently']="differently"
adjectives['difficult']=adjInfo("difficult")
nouns['difficulty']=nounInfo("difficulty")
nouns['diffidence']=nounInfo("diffidence")
adjectives['diffident']=adjInfo("diffident")
adverbs['diffidently']="diffidently"
nouns['diffraction']=nounInfo("diffraction")
adjectives['diffuse']=adjInfo("diffuse")
adverbs['diffusely']="diffusely"
nouns['diffuseness']=nounInfo("diffuseness")
nouns['diffusion']=nounInfo("diffusion")
nouns['dig']=nounInfo("dig")
nouns['digest']=nounInfo("digest")
nouns['digestibility']=nounInfo("digestibility")
adjectives['digestible']=adjInfo("digestible")
nouns['digestion']=nounInfo("digestion")
adjectives['digestive']=adjInfo("digestive")
nouns['digger']=nounInfo("digger")
nouns['digging']=nounInfo("digging")
nouns['digit']=nounInfo("digit")
adjectives['digital']=adjInfo("digital")
adverbs['digitally']="digitally"
adjectives['dignified']=adjInfo("dignified")
nouns['dignitary']=nounInfo("dignitary")
nouns['dignity']=nounInfo("dignity")
nouns['digraph']=nounInfo("digraph")
nouns['digression']=nounInfo("digression")
nouns['dike']=nounInfo("dike")
adjectives['dilapidated']=adjInfo("dilapidated")
nouns['dilapidation']=nounInfo("dilapidation")
nouns['dilation']=nounInfo("dilation")
adjectives['dilatory']=adjInfo("dilatory")
nouns['dilemma']=nounInfo("dilemma")
nouns['dilettante']=nounInfo("dilettante")
nouns['diligence']=nounInfo("diligence")
adjectives['diligent']=adjInfo("diligent")
adverbs['diligently']="diligently"
nouns['dill']=nounInfo("dill")
adjectives['dilute']=adjInfo("dilute")
nouns['dilution']=nounInfo("dilution")
adjectives['dim']=adjInfo("dim")
nouns['dime']=nounInfo("dime")
nouns['dimension']=nounInfo("dimension")
adjectives['dimensional']=adjInfo("dimensional")
nouns['diminuendo']=nounInfo("diminuendo")
nouns['diminution']=nounInfo("diminution")
adjectives['diminutive']=adjInfo("diminutive")
nouns['diminutive']=nounInfo("diminutive")
nouns['dimity']=nounInfo("dimity")
adverbs['dimly']="dimly"
nouns['dimness']=nounInfo("dimness")
nouns['dimple']=nounInfo("dimple")
nouns['din']=nounInfo("din")
nouns['dinar']=nounInfo("dinar")
nouns['diner']=nounInfo("diner").addAttributes({"g":"x"})
nouns['dinghy']=nounInfo("dinghy")
adverbs['dingily']="dingily"
nouns['dinginess']=nounInfo("dinginess")
nouns['dingle']=nounInfo("dingle")
adjectives['dingy']=adjInfo("dingy")
adjectives['dinky']=adjInfo("dinky")
nouns['dinner']=nounInfo("dinner")
nouns['dinosaur']=nounInfo("dinosaur")
nouns['dint']=nounInfo("dint")
adjectives['diocesan']=adjInfo("diocesan")
nouns['diocesan']=nounInfo("diocesan")
nouns['diocese']=nounInfo("diocese")
nouns['dioxide']=nounInfo("dioxide")
nouns['dip']=nounInfo("dip")
nouns['diphtheria']=nounInfo("diphtheria")
nouns['diphthong']=nounInfo("diphthong")
nouns['diploma']=nounInfo("diploma")
nouns['diplomacy']=nounInfo("diplomacy")
nouns['diplomat']=nounInfo("diplomat")
adjectives['diplomatic']=adjInfo("diplomatic")
adverbs['diplomatically']="diplomatically"
nouns['diplomatist']=nounInfo("diplomatist")
nouns['dipper']=nounInfo("dipper")
nouns['dipsomania']=nounInfo("dipsomania")
nouns['dipsomaniac']=nounInfo("dipsomaniac")
nouns['diptych']=nounInfo("diptych")
adjectives['dire']=adjInfo("dire")
adjectives['direct']=adjInfo("direct")
adverbs['direct']="direct"
nouns['direction']=nounInfo("direction")
adjectives['directional']=adjInfo("directional")
nouns['directive']=nounInfo("directive")
adverbs['directly']="directly"
nouns['directness']=nounInfo("directness")
nouns['director']=nounInfo("director")
nouns['directorate']=nounInfo("directorate")
nouns['directorship']=nounInfo("directorship")
nouns['directory']=nounInfo("directory")
adjectives['direful']=adjInfo("direful")
adverbs['direfully']="direfully"
nouns['dirge']=nounInfo("dirge")
nouns['dirigible']=nounInfo("dirigible")
nouns['dirk']=nounInfo("dirk")
nouns['dirndl']=nounInfo("dirndl")
nouns['dirt']=nounInfo("dirt")
adverbs['dirtily']="dirtily"
adjectives['dirty']=adjInfo("dirty")
nouns['disability']=nounInfo("disability")
nouns['disablement']=nounInfo("disablement")
nouns['disadvantage']=nounInfo("disadvantage")
adjectives['disadvantaged']=adjInfo("disadvantaged")
adjectives['disadvantageous']=adjInfo("disadvantageous")
adverbs['disadvantageously']="disadvantageously"
adjectives['disaffected']=adjInfo("disaffected")
nouns['disaffection']=nounInfo("disaffection")
adjectives['disagreeable']=adjInfo("disagreeable")
nouns['disagreeableness']=nounInfo("disagreeableness")
adverbs['disagreeably']="disagreeably"
nouns['disagreement']=nounInfo("disagreement")
nouns['disappearance']=nounInfo("disappearance")
adjectives['disappointed']=adjInfo("disappointed")
adverbs['disappointedly']="disappointedly"
adjectives['disappointing']=adjInfo("disappointing")
adverbs['disappointingly']="disappointingly"
nouns['disappointment']=nounInfo("disappointment")
nouns['disapprobation']=nounInfo("disapprobation")
nouns['disapproval']=nounInfo("disapproval")
adverbs['disapprovingly']="disapprovingly"
nouns['disarmament']=nounInfo("disarmament")
adverbs['disarmingly']="disarmingly"
nouns['disarrangement']=nounInfo("disarrangement")
nouns['disarray']=nounInfo("disarray")
nouns['disaster']=nounInfo("disaster")
adjectives['disastrous']=adjInfo("disastrous")
adverbs['disastrously']="disastrously"
nouns['disavowal']=nounInfo("disavowal")
nouns['disbandment']=nounInfo("disbandment")
nouns['disbelief']=nounInfo("disbelief")
adverbs['disbelievingly']="disbelievingly"
nouns['disbursement']=nounInfo("disbursement")
nouns['disc']=nounInfo("disc")
nouns['discard']=nounInfo("discard")
adjectives['discernible']=adjInfo("discernible")
adjectives['discerning']=adjInfo("discerning")
nouns['discernment']=nounInfo("discernment")
nouns['discharge']=nounInfo("discharge")
nouns['disciple']=nounInfo("disciple")
nouns['disciplinarian']=nounInfo("disciplinarian")
adjectives['disciplinary']=adjInfo("disciplinary")
nouns['discipline']=nounInfo("discipline")
nouns['disclaimer']=nounInfo("disclaimer")
nouns['disclosure']=nounInfo("disclosure")
nouns['disco']=nounInfo("disco")
nouns['discolouration']=nounInfo("discolouration")
nouns['discomfiture']=nounInfo("discomfiture")
nouns['discomfort']=nounInfo("discomfort")
nouns['discomposure']=nounInfo("discomposure")
adverbs['disconcertingly']="disconcertingly"
adjectives['disconnected']=adjInfo("disconnected")
adjectives['disconsolate']=adjInfo("disconsolate")
adverbs['disconsolately']="disconsolately"
nouns['discontent']=nounInfo("discontent")
adverbs['discontentedly']="discontentedly"
nouns['discontinuance']=nounInfo("discontinuance")
adjectives['discontinuous']=adjInfo("discontinuous")
nouns['discord']=nounInfo("discord")
nouns['discordance']=nounInfo("discordance")
adjectives['discordant']=adjInfo("discordant")
adverbs['discordantly']="discordantly"
nouns['discotheque']=nounInfo("discotheque")
nouns['discount']=nounInfo("discount")
nouns['discouragement']=nounInfo("discouragement")
nouns['discourse']=nounInfo("discourse")
adjectives['discourteous']=adjInfo("discourteous")
adverbs['discourteously']="discourteously"
nouns['discourtesy']=nounInfo("discourtesy")
nouns['discoverer']=nounInfo("discoverer")
nouns['discovery']=nounInfo("discovery")
nouns['discredit']=nounInfo("discredit")
adjectives['discreditable']=adjInfo("discreditable")
adverbs['discreditably']="discreditably"
adjectives['discreet']=adjInfo("discreet")
adverbs['discreetly']="discreetly"
nouns['discrepancy']=nounInfo("discrepancy")
adjectives['discrete']=adjInfo("discrete")
nouns['discreteness']=nounInfo("discreteness")
nouns['discretion']=nounInfo("discretion")
adjectives['discretionary']=adjInfo("discretionary")
adjectives['discriminating']=adjInfo("discriminating")
nouns['discrimination']=nounInfo("discrimination")
adjectives['discriminatory']=adjInfo("discriminatory")
adjectives['discursive']=adjInfo("discursive")
adverbs['discursively']="discursively"
nouns['discursiveness']=nounInfo("discursiveness")
nouns['discus']=nounInfo("discus")
nouns['discussion']=nounInfo("discussion")
nouns['disdain']=nounInfo("disdain")
adjectives['disdainful']=adjInfo("disdainful")
adverbs['disdainfully']="disdainfully"
nouns['disease']=nounInfo("disease")
adjectives['diseased']=adjInfo("diseased")
nouns['disembarkation']=nounInfo("disembarkation")
nouns['disembarrassment']=nounInfo("disembarrassment")
nouns['disenchantment']=nounInfo("disenchantment")
nouns['disengagement']=nounInfo("disengagement")
nouns['disentanglement']=nounInfo("disentanglement")
nouns['disequilibrium']=nounInfo("disequilibrium")
nouns['disestablishment']=nounInfo("disestablishment")
nouns['disfavour']=nounInfo("disfavour")
nouns['disfigurement']=nounInfo("disfigurement")
nouns['disfranchisement']=nounInfo("disfranchisement")
nouns['disgrace']=nounInfo("disgrace")
adjectives['disgraceful']=adjInfo("disgraceful")
adverbs['disgracefully']="disgracefully"
adjectives['disgruntled']=adjInfo("disgruntled")
nouns['disguise']=nounInfo("disguise")
nouns['disgust']=nounInfo("disgust")
adverbs['disgustedly']="disgustedly"
adjectives['disgusting']=adjInfo("disgusting")
adverbs['disgustingly']="disgustingly"
nouns['dish']=nounInfo("dish")
nouns['dishabille']=nounInfo("dishabille")
adjectives['disharmonious']=adjInfo("disharmonious")
nouns['disharmony']=nounInfo("disharmony")
nouns['dishcloth']=nounInfo("dishcloth")
adjectives['dishevelled']=adjInfo("dishevelled")
nouns['dishful']=nounInfo("dishful")
adjectives['dishonest']=adjInfo("dishonest")
adverbs['dishonestly']="dishonestly"
nouns['dishonesty']=nounInfo("dishonesty")
nouns['dishonour']=nounInfo("dishonour")
adjectives['dishonourable']=adjInfo("dishonourable")
adverbs['dishonourably']="dishonourably"
nouns['dishwasher']=nounInfo("dishwasher")
nouns['dishwater']=nounInfo("dishwater")
adjectives['dishy']=adjInfo("dishy")
nouns['disillusion']=nounInfo("disillusion")
nouns['disillusionment']=nounInfo("disillusionment")
nouns['disincentive']=nounInfo("disincentive")
nouns['disinclination']=nounInfo("disinclination")
adjectives['disinfectant']=adjInfo("disinfectant")
nouns['disinfectant']=nounInfo("disinfectant")
nouns['disinfection']=nounInfo("disinfection")
nouns['disinfestation']=nounInfo("disinfestation")
nouns['disinflation']=nounInfo("disinflation")
adjectives['disingenuous']=adjInfo("disingenuous")
adverbs['disingenuously']="disingenuously"
nouns['disingenuousness']=nounInfo("disingenuousness")
nouns['disinheritance']=nounInfo("disinheritance")
nouns['disintegration']=nounInfo("disintegration")
adjectives['disinterested']=adjInfo("disinterested")
adverbs['disinterestedly']="disinterestedly"
nouns['disinterestedness']=nounInfo("disinterestedness")
nouns['disinterment']=nounInfo("disinterment")
adjectives['disjointed']=adjInfo("disjointed")
adverbs['disjointedly']="disjointedly"
nouns['disjointedness']=nounInfo("disjointedness")
adjectives['disjunctive']=adjInfo("disjunctive")
nouns['disk']=nounInfo("disk")
nouns['dislike']=nounInfo("dislike")
nouns['dislocation']=nounInfo("dislocation")
nouns['dislodgement']=nounInfo("dislodgement")
adjectives['disloyal']=adjInfo("disloyal")
adverbs['disloyally']="disloyally"
nouns['disloyalty']=nounInfo("disloyalty")
adjectives['dismal']=adjInfo("dismal")
adverbs['dismally']="dismally"
nouns['dismantlement']=nounInfo("dismantlement")
nouns['dismay']=nounInfo("dismay")
nouns['dismemberment']=nounInfo("dismemberment")
nouns['dismissal']=nounInfo("dismissal")
adjectives['dismounted']=adjInfo("dismounted")
nouns['disobedience']=nounInfo("disobedience")
adjectives['disobedient']=adjInfo("disobedient")
adverbs['disobediently']="disobediently"
nouns['disorder']=nounInfo("disorder")
adjectives['disorderly']=adjInfo("disorderly")
nouns['disorganization']=nounInfo("disorganization")
nouns['disparagement']=nounInfo("disparagement")
adverbs['disparagingly']="disparagingly"
adjectives['disparate']=adjInfo("disparate")
nouns['disparate']=nounInfo("disparate")
nouns['disparity']=nounInfo("disparity")
adjectives['dispassionate']=adjInfo("dispassionate")
adverbs['dispassionately']="dispassionately"
nouns['dispassionateness']=nounInfo("dispassionateness")
nouns['dispatch']=nounInfo("dispatch")
adjectives['dispensable']=adjInfo("dispensable")
nouns['dispensary']=nounInfo("dispensary")
nouns['dispensation']=nounInfo("dispensation")
nouns['dispenser']=nounInfo("dispenser")
nouns['dispersal']=nounInfo("dispersal")
nouns['dispersion']=nounInfo("dispersion")
adverbs['dispiritedly']="dispiritedly"
nouns['displacement']=nounInfo("displacement")
nouns['display']=nounInfo("display")
adjectives['displeasing']=adjInfo("displeasing")
adverbs['displeasingly']="displeasingly"
nouns['displeasure']=nounInfo("displeasure")
adjectives['disposable']=adjInfo("disposable")
nouns['disposal']=nounInfo("disposal")
nouns['disposition']=nounInfo("disposition")
nouns['dispossession']=nounInfo("dispossession")
nouns['disproof']=nounInfo("disproof")
nouns['disproportion']=nounInfo("disproportion")
adjectives['disproportionate']=adjInfo("disproportionate")
adverbs['disproportionately']="disproportionately"
adjectives['disputable']=adjInfo("disputable")
nouns['disputant']=nounInfo("disputant")
nouns['disputation']=nounInfo("disputation")
adjectives['disputatious']=adjInfo("disputatious")
adverbs['disputatiously']="disputatiously"
nouns['dispute']=nounInfo("dispute")
nouns['disqualification']=nounInfo("disqualification")
nouns['disquiet']=nounInfo("disquiet")
adjectives['disquieting']=adjInfo("disquieting")
adverbs['disquietingly']="disquietingly"
nouns['disquietude']=nounInfo("disquietude")
nouns['disquisition']=nounInfo("disquisition")
nouns['disregard']=nounInfo("disregard")
nouns['disrepair']=nounInfo("disrepair")
adjectives['disreputable']=adjInfo("disreputable")
adverbs['disreputably']="disreputably"
nouns['disrepute']=nounInfo("disrepute")
nouns['disrespect']=nounInfo("disrespect")
adjectives['disrespectful']=adjInfo("disrespectful")
adverbs['disrespectfully']="disrespectfully"
nouns['disruption']=nounInfo("disruption")
adjectives['disruptive']=adjInfo("disruptive")
nouns['dissatisfaction']=nounInfo("dissatisfaction")
nouns['dissection']=nounInfo("dissection")
nouns['dissembler']=nounInfo("dissembler")
nouns['dissemination']=nounInfo("dissemination")
nouns['dissension']=nounInfo("dissension")
nouns['dissent']=nounInfo("dissent")
nouns['dissenter']=nounInfo("dissenter")
nouns['dissertation']=nounInfo("dissertation")
nouns['disservice']=nounInfo("disservice")
nouns['dissidence']=nounInfo("dissidence")
adjectives['dissident']=adjInfo("dissident")
nouns['dissident']=nounInfo("dissident")
adjectives['dissimilar']=adjInfo("dissimilar")
nouns['dissimilarity']=nounInfo("dissimilarity")
nouns['dissimilitude']=nounInfo("dissimilitude")
nouns['dissimulation']=nounInfo("dissimulation")
adjectives['dissipated']=adjInfo("dissipated")
nouns['dissipation']=nounInfo("dissipation")
nouns['dissociation']=nounInfo("dissociation")
nouns['dissolubility']=nounInfo("dissolubility")
adjectives['dissoluble']=adjInfo("dissoluble")
adjectives['dissolute']=adjInfo("dissolute")
adverbs['dissolutely']="dissolutely"
nouns['dissolution']=nounInfo("dissolution")
nouns['dissonance']=nounInfo("dissonance")
adjectives['dissonant']=adjInfo("dissonant")
nouns['dissuasion']=nounInfo("dissuasion")
nouns['dissyllable']=nounInfo("dissyllable")
nouns['distaff']=nounInfo("distaff")
nouns['distance']=nounInfo("distance")
adjectives['distant']=adjInfo("distant")
adverbs['distantly']="distantly"
nouns['distaste']=nounInfo("distaste")
adjectives['distasteful']=adjInfo("distasteful")
adverbs['distastefully']="distastefully"
nouns['distastefulness']=nounInfo("distastefulness")
nouns['distemper']=nounInfo("distemper")
nouns['distension']=nounInfo("distension")
nouns['distillation']=nounInfo("distillation")
nouns['distiller']=nounInfo("distiller")
nouns['distillery']=nounInfo("distillery")
adjectives['distinct']=adjInfo("distinct")
nouns['distinction']=nounInfo("distinction")
adjectives['distinctive']=adjInfo("distinctive")
adverbs['distinctively']="distinctively"
adverbs['distinctly']="distinctly"
nouns['distinctness']=nounInfo("distinctness")
adjectives['distinguishable']=adjInfo("distinguishable")
adjectives['distinguished']=adjInfo("distinguished")
nouns['distortion']=nounInfo("distortion")
adjectives['distracted']=adjInfo("distracted")
adverbs['distractedly']="distractedly"
adjectives['distracting']=adjInfo("distracting")
nouns['distraction']=nounInfo("distraction")
nouns['distraint']=nounInfo("distraint")
adjectives['distrait']=adjInfo("distrait")
adjectives['distraught']=adjInfo("distraught")
nouns['distress']=nounInfo("distress")
adjectives['distressful']=adjInfo("distressful")
adverbs['distressfully']="distressfully"
adjectives['distressing']=adjInfo("distressing")
adverbs['distressingly']="distressingly"
nouns['distribution']=nounInfo("distribution")
adjectives['distributive']=adjInfo("distributive")
adverbs['distributively']="distributively"
nouns['distributor']=nounInfo("distributor")
nouns['district']=nounInfo("district")
nouns['distrust']=nounInfo("distrust")
adjectives['distrustful']=adjInfo("distrustful")
adverbs['distrustfully']="distrustfully"
nouns['distrustfulness']=nounInfo("distrustfulness")
nouns['disturbance']=nounInfo("disturbance")
adverbs['disturbedly']="disturbedly"
adverbs['disturbingly']="disturbingly"
nouns['disunion']=nounInfo("disunion")
nouns['disunity']=nounInfo("disunity")
nouns['disuse']=nounInfo("disuse")
adjectives['disused']=adjInfo("disused")
adjectives['disyllabic']=adjInfo("disyllabic")
nouns['disyllable']=nounInfo("disyllable")
nouns['ditch']=nounInfo("ditch")
nouns['dither']=nounInfo("dither")
nouns['ditto']=nounInfo("ditto")
nouns['ditty']=nounInfo("ditty")
adjectives['diurnal']=adjInfo("diurnal")
adverbs['diurnally']="diurnally"
nouns['divagation']=nounInfo("divagation")
nouns['divan']=nounInfo("divan")
nouns['dive']=nounInfo("dive")
nouns['diver']=nounInfo("diver")
nouns['divergence']=nounInfo("divergence")
nouns['divergency']=nounInfo("divergency")
adjectives['divergent']=adjInfo("divergent")
adjectives['divers']=adjInfo("divers")
adjectives['diverse']=adjInfo("diverse")
adverbs['diversely']="diversely"
nouns['diversification']=nounInfo("diversification")
nouns['diversion']=nounInfo("diversion")
adjectives['diversionary']=adjInfo("diversionary")
nouns['diversionist']=nounInfo("diversionist")
nouns['diversity']=nounInfo("diversity")
adjectives['diverting']=adjInfo("diverting")
adverbs['divertingly']="divertingly"
nouns['divide']=nounInfo("divide")
nouns['dividend']=nounInfo("dividend")
nouns['dividers']=nounInfo("dividers")
nouns['divination']=nounInfo("divination")
adjectives['divine']=adjInfo("divine")
nouns['divine']=nounInfo("divine")
adverbs['divinely']="divinely"
nouns['diviner']=nounInfo("diviner")
nouns['divinity']=nounInfo("divinity")
adjectives['divisible']=adjInfo("divisible")
nouns['division']=nounInfo("division")
nouns['divisor']=nounInfo("divisor")
nouns['divorce']=nounInfo("divorce")
nouns['divorcee']=nounInfo("divorcee").addAttributes({"g":"x"})
nouns['divot']=nounInfo("divot")
nouns['divulgence']=nounInfo("divulgence")
nouns['divvy']=nounInfo("divvy")
nouns['dixie']=nounInfo("dixie")
adverbs['dizzily']="dizzily"
nouns['dizziness']=nounInfo("dizziness")
adjectives['dizzy']=adjInfo("dizzy")
nouns['djinn']=nounInfo("djinn")
nouns['do']=nounInfo("do")
nouns['dobbin']=nounInfo("dobbin")
adjectives['docile']=adjInfo("docile")
nouns['docility']=nounInfo("docility")
nouns['dock']=nounInfo("dock")
nouns['docker']=nounInfo("docker")
nouns['docket']=nounInfo("docket")
nouns['dockyard']=nounInfo("dockyard")
nouns['doctor']=nounInfo("doctor").addAttributes({"g":"x"})
nouns['doctorate']=nounInfo("doctorate")
adjectives['doctrinaire']=adjInfo("doctrinaire")
nouns['doctrinaire']=nounInfo("doctrinaire")
adjectives['doctrinal']=adjInfo("doctrinal")
nouns['doctrine']=nounInfo("doctrine")
nouns['document']=nounInfo("document")
adjectives['documentary']=adjInfo("documentary")
nouns['documentation']=nounInfo("documentation")
nouns['dodderer']=nounInfo("dodderer")
adjectives['doddering']=adjInfo("doddering")
adjectives['doddery']=adjInfo("doddery")
nouns['dodge']=nounInfo("dodge")
nouns['dodgem']=nounInfo("dodgem")
nouns['dodger']=nounInfo("dodger")
adjectives['dodgy']=adjInfo("dodgy")
nouns['dodo']=nounInfo("dodo")
nouns['doe']=nounInfo("doe")
nouns['doer']=nounInfo("doer")
nouns['dog']=nounInfo("dog")
nouns['doge']=nounInfo("doge")
nouns['dogfish']=nounInfo("dogfish")
adjectives['dogged']=adjInfo("dogged")
adverbs['doggedly']="doggedly"
nouns['doggedness']=nounInfo("doggedness")
nouns['doggerel']=nounInfo("doggerel")
nouns['doggie']=nounInfo("doggie")
adverbs['doggo']="doggo"
nouns['doggy']=nounInfo("doggy")
nouns['doghouse']=nounInfo("doghouse")
nouns['dogma']=nounInfo("dogma")
adjectives['dogmatic']=adjInfo("dogmatic")
adverbs['dogmatically']="dogmatically"
nouns['dogmatism']=nounInfo("dogmatism")
nouns['dogsbody']=nounInfo("dogsbody")
nouns['dogtooth']=nounInfo("dogtooth")
nouns['dogtrot']=nounInfo("dogtrot")
nouns['dogwatch']=nounInfo("dogwatch")
nouns['dogwood']=nounInfo("dogwood")
nouns['doily']=nounInfo("doily")
nouns['doings']=nounInfo("doings")
nouns['doldrums']=nounInfo("doldrums")
nouns['dole']=nounInfo("dole")
adjectives['doleful']=adjInfo("doleful")
adverbs['dolefully']="dolefully"
nouns['doll']=nounInfo("doll")
nouns['dollar']=nounInfo("dollar")
nouns['dollop']=nounInfo("dollop")
nouns['dolly']=nounInfo("dolly")
nouns['dolmen']=nounInfo("dolmen")
nouns['dolour']=nounInfo("dolour")
adjectives['dolourous']=adjInfo("dolourous")
nouns['dolphin']=nounInfo("dolphin")
nouns['dolt']=nounInfo("dolt")
adjectives['doltish']=adjInfo("doltish")
nouns['domain']=nounInfo("domain")
nouns['dome']=nounInfo("dome")
adjectives['domed']=adjInfo("domed")
adjectives['domestic']=adjInfo("domestic")
adverbs['domestically']="domestically"
nouns['domestication']=nounInfo("domestication")
nouns['domesticity']=nounInfo("domesticity")
nouns['domicile']=nounInfo("domicile")
adjectives['domiciliary']=adjInfo("domiciliary")
nouns['dominance']=nounInfo("dominance")
adjectives['dominant']=adjInfo("dominant")
adverbs['dominantly']="dominantly"
nouns['domination']=nounInfo("domination")
adjectives['domineering']=adjInfo("domineering")
adverbs['domineeringly']="domineeringly"
nouns['dominie']=nounInfo("dominie")
nouns['dominion']=nounInfo("dominion")
nouns['domino']=nounInfo("domino")
nouns['don']=nounInfo("don")
nouns['donation']=nounInfo("donation")
nouns['donjon']=nounInfo("donjon")
nouns['donkey']=nounInfo("donkey")
adjectives['donnish']=adjInfo("donnish")
nouns['donor']=nounInfo("donor")
nouns['doodlebug']=nounInfo("doodlebug")
nouns['doom']=nounInfo("doom")
nouns['door']=nounInfo("door")
nouns['doorbell']=nounInfo("doorbell")
nouns['doorhandle']=nounInfo("doorhandle")
nouns['doorman']=nounInfo("doorman")
nouns['doorstep']=nounInfo("doorstep")
nouns['doorstopper']=nounInfo("doorstopper")
nouns['doorway']=nounInfo("doorway")
nouns['dope']=nounInfo("dope")
adjectives['dopey']=adjInfo("dopey")
adjectives['dormant']=adjInfo("dormant")
nouns['dormer']=nounInfo("dormer")
nouns['dormitory']=nounInfo("dormitory")
nouns['dormouse']=nounInfo("dormouse")
adjectives['dorsal']=adjInfo("dorsal")
nouns['dory']=nounInfo("dory")
nouns['dosage']=nounInfo("dosage")
nouns['dose']=nounInfo("dose")
nouns['dosser']=nounInfo("dosser")
nouns['dossier']=nounInfo("dossier")
nouns['dot']=nounInfo("dot")
nouns['dotage']=nounInfo("dotage")
nouns['dotard']=nounInfo("dotard")
adverbs['dotingly']="dotingly"
nouns['dottle']=nounInfo("dottle")
adjectives['dotty']=adjInfo("dotty")
adjectives['double']=adjInfo("double")
adverbs['double']="double"
nouns['double']=nounInfo("double")
nouns['doublet']=nounInfo("doublet")
nouns['doubloon']=nounInfo("doubloon")
adverbs['doubly']="doubly"
nouns['doubt']=nounInfo("doubt")
adjectives['doubtful']=adjInfo("doubtful")
adverbs['doubtfully']="doubtfully"
adverbs['doubtingly']="doubtingly"
adverbs['doubtless']="doubtless"
nouns['douche']=nounInfo("douche")
nouns['dough']=nounInfo("dough")
nouns['doughnut']=nounInfo("doughnut")
adjectives['doughty']=adjInfo("doughty")
adjectives['doughy']=adjInfo("doughy")
adjectives['dour']=adjInfo("dour")
adverbs['dourly']="dourly"
nouns['dove']=nounInfo("dove")
nouns['dovetail']=nounInfo("dovetail")
nouns['dowager']=nounInfo("dowager")
adverbs['dowdily']="dowdily"
nouns['dowdiness']=nounInfo("dowdiness")
adjectives['dowdy']=adjInfo("dowdy")
nouns['dowel']=nounInfo("dowel")
nouns['dower']=nounInfo("dower")
adverbs['down']="down"
nouns['down']=nounInfo("down")
prepositions['down']=P("down")
nouns['downbeat']=nounInfo("downbeat")
adjectives['downcast']=adjInfo("downcast")
nouns['downfall']=nounInfo("downfall")
adjectives['downhearted']=adjInfo("downhearted")
adverbs['downhill']="downhill"
nouns['downpour']=nounInfo("downpour")
adjectives['downright']=adjInfo("downright")
adverbs['downright']="downright"
nouns['downrightness']=nounInfo("downrightness")
nouns['downs']=nounInfo("downs")
adjectives['downstair']=adjInfo("downstair")
adjectives['downstairs']=adjInfo("downstairs")
adverbs['downstairs']="downstairs"
adverbs['downtown']="downtown"
adjectives['downtrodden']=adjInfo("downtrodden")
adjectives['downward']=adjInfo("downward")
adverbs['downward']="downward"
adverbs['downwards']="downwards"
adjectives['downy']=adjInfo("downy")
nouns['dowry']=nounInfo("dowry")
nouns['dowser']=nounInfo("dowser")
nouns['dowsing']=nounInfo("dowsing")
nouns['doxology']=nounInfo("doxology")
nouns['doyen']=nounInfo("doyen")
nouns['doyley']=nounInfo("doyley")
nouns['doyly']=nounInfo("doyly")
nouns['doze']=nounInfo("doze")
nouns['dozen']=nounInfo("dozen")
adjectives['drab']=adjInfo("drab")
adverbs['drably']="drably"
nouns['drabness']=nounInfo("drabness")
nouns['drachm']=nounInfo("drachm")
nouns['drachma']=nounInfo("drachma")
adjectives['draconian']=adjInfo("draconian")
nouns['draft']=nounInfo("draft")
nouns['draftee']=nounInfo("draftee")
nouns['drafting']=nounInfo("drafting")
nouns['draftsman']=nounInfo("draftsman")
nouns['drag']=nounInfo("drag")
adjectives['draggled']=adjInfo("draggled")
nouns['dragoman']=nounInfo("dragoman")
nouns['dragon']=nounInfo("dragon")
nouns['dragonfly']=nounInfo("dragonfly")
nouns['dragoon']=nounInfo("dragoon")
nouns['drain']=nounInfo("drain")
nouns['drainage']=nounInfo("drainage")
nouns['drainpipe']=nounInfo("drainpipe")
nouns['drake']=nounInfo("drake")
nouns['dram']=nounInfo("dram")
nouns['drama']=nounInfo("drama")
adjectives['dramatic']=adjInfo("dramatic")
adverbs['dramatically']="dramatically"
nouns['dramatics']=nounInfo("dramatics")
nouns['dramatist']=nounInfo("dramatist")
nouns['dramatization']=nounInfo("dramatization")
nouns['drape']=nounInfo("drape")
nouns['draper']=nounInfo("draper")
nouns['drapery']=nounInfo("drapery")
adjectives['drastic']=adjInfo("drastic")
adverbs['drastically']="drastically"
nouns['draught']=nounInfo("draught")
nouns['draughts']=nounInfo("draughts")
nouns['draughtsman']=nounInfo("draughtsman")
adjectives['draughty']=adjInfo("draughty")
nouns['draw']=nounInfo("draw")
nouns['drawback']=nounInfo("drawback")
nouns['drawbridge']=nounInfo("drawbridge")
nouns['drawer']=nounInfo("drawer")
nouns['drawing']=nounInfo("drawing")
nouns['drawl']=nounInfo("drawl")
nouns['dray']=nounInfo("dray")
nouns['dread']=nounInfo("dread")
adjectives['dreaded']=adjInfo("dreaded")
adjectives['dreadful']=adjInfo("dreadful")
adverbs['dreadfully']="dreadfully"
nouns['dreadfulness']=nounInfo("dreadfulness")
nouns['dreadnought']=nounInfo("dreadnought")
nouns['dream']=nounInfo("dream")
nouns['dreamer']=nounInfo("dreamer")
adverbs['dreamily']="dreamily"
nouns['dreamland']=nounInfo("dreamland")
adjectives['dreamless']=adjInfo("dreamless")
adjectives['dreamlike']=adjInfo("dreamlike")
nouns['dreamworld']=nounInfo("dreamworld")
adjectives['dreamy']=adjInfo("dreamy")
adjectives['drear']=adjInfo("drear")
adverbs['drearily']="drearily"
adjectives['dreary']=adjInfo("dreary")
nouns['dredge']=nounInfo("dredge")
nouns['dredger']=nounInfo("dredger")
nouns['dregs']=nounInfo("dregs")
nouns['drenching']=nounInfo("drenching")
nouns['dress']=nounInfo("dress")
nouns['dressage']=nounInfo("dressage")
nouns['dresser']=nounInfo("dresser")
nouns['dressing']=nounInfo("dressing")
nouns['dressmaker']=nounInfo("dressmaker")
adjectives['dressy']=adjInfo("dressy")
nouns['dribbler']=nounInfo("dribbler")
nouns['driblet']=nounInfo("driblet")
nouns['drier']=nounInfo("drier")
nouns['drift']=nounInfo("drift")
nouns['driftage']=nounInfo("driftage")
nouns['drifter']=nounInfo("drifter")
nouns['drill']=nounInfo("drill")
adverbs['drily']="drily"
nouns['drink']=nounInfo("drink")
adjectives['drinkable']=adjInfo("drinkable")
nouns['drinker']=nounInfo("drinker")
nouns['drinking']=nounInfo("drinking")
nouns['drip']=nounInfo("drip")
nouns['dripping']=nounInfo("dripping")
nouns['drive']=nounInfo("drive")
nouns['drivel']=nounInfo("drivel")
nouns['driveller']=nounInfo("driveller")
nouns['driver']=nounInfo("driver").addAttributes({"g":"x"})
nouns['driveway']=nounInfo("driveway")
nouns['drizzle']=nounInfo("drizzle")
adjectives['drizzly']=adjInfo("drizzly")
nouns['drogue']=nounInfo("drogue")
adjectives['droll']=adjInfo("droll")
nouns['drollery']=nounInfo("drollery")
nouns['dromedary']=nounInfo("dromedary")
nouns['drone']=nounInfo("drone")
nouns['droop']=nounInfo("droop")
adverbs['droopingly']="droopingly"
nouns['drop']=nounInfo("drop")
adjectives['dropsical']=adjInfo("dropsical")
nouns['dropsy']=nounInfo("dropsy")
nouns['droshky']=nounInfo("droshky")
nouns['dross']=nounInfo("dross")
nouns['drought']=nounInfo("drought")
nouns['drove']=nounInfo("drove")
nouns['drover']=nounInfo("drover")
nouns['drowse']=nounInfo("drowse")
adverbs['drowsily']="drowsily"
nouns['drowsiness']=nounInfo("drowsiness")
adjectives['drowsy']=adjInfo("drowsy")
nouns['drubbing']=nounInfo("drubbing")
nouns['drudge']=nounInfo("drudge")
nouns['drudgery']=nounInfo("drudgery")
nouns['drug']=nounInfo("drug")
nouns['drugget']=nounInfo("drugget")
nouns['druggist']=nounInfo("druggist")
nouns['drugstore']=nounInfo("drugstore")
nouns['druid']=nounInfo("druid")
nouns['drum']=nounInfo("drum")
nouns['drumfire']=nounInfo("drumfire")
adjectives['drumhead']=adjInfo("drumhead")
nouns['drummer']=nounInfo("drummer")
nouns['drumstick']=nounInfo("drumstick")
adjectives['drunk']=adjInfo("drunk")
nouns['drunk']=nounInfo("drunk")
nouns['drunkard']=nounInfo("drunkard")
adjectives['drunken']=adjInfo("drunken")
adverbs['drunkenly']="drunkenly"
nouns['drunkenness']=nounInfo("drunkenness")
nouns['drupe']=nounInfo("drupe")
adjectives['dry']=adjInfo("dry")
nouns['dryad']=nounInfo("dryad")
nouns['dryer']=nounInfo("dryer")
adverbs['dryly']="dryly"
nouns['dryness']=nounInfo("dryness")
adjectives['dual']=adjInfo("dual")
nouns['dubbin']=nounInfo("dubbin")
nouns['dubiety']=nounInfo("dubiety")
adjectives['dubious']=adjInfo("dubious")
adverbs['dubiously']="dubiously"
nouns['dubiousness']=nounInfo("dubiousness")
adjectives['ducal']=adjInfo("ducal")
nouns['ducat']=nounInfo("ducat")
nouns['duchess']=nounInfo("duchess").addAttributes({"g":"f"})
nouns['duchy']=nounInfo("duchy")
nouns['duck']=nounInfo("duck")
adjectives['duckbilled']=adjInfo("duckbilled")
nouns['duckboards']=nounInfo("duckboards")
nouns['ducking']=nounInfo("ducking")
nouns['duckling']=nounInfo("duckling")
nouns['duckweed']=nounInfo("duckweed")
nouns['ducky']=nounInfo("ducky")
nouns['duct']=nounInfo("duct")
adjectives['ductile']=adjInfo("ductile")
nouns['ductility']=nounInfo("ductility")
adjectives['dud']=adjInfo("dud")
nouns['dud']=nounInfo("dud")
nouns['dude']=nounInfo("dude")
nouns['dudgeon']=nounInfo("dudgeon")
nouns['duds']=nounInfo("duds")
adjectives['due']=adjInfo("due")
adverbs['due']="due"
nouns['due']=nounInfo("due")
nouns['duel']=nounInfo("duel")
nouns['duelist']=nounInfo("duelist")
nouns['duellist']=nounInfo("duellist")
nouns['duenna']=nounInfo("duenna")
nouns['duet']=nounInfo("duet")
nouns['duffel']=nounInfo("duffel")
nouns['duffer']=nounInfo("duffer")
nouns['duffle']=nounInfo("duffle")
nouns['dug']=nounInfo("dug")
nouns['dugong']=nounInfo("dugong")
nouns['duke']=nounInfo("duke").addAttributes({"g":"m"})
nouns['dukedom']=nounInfo("dukedom")
adjectives['dulcet']=adjInfo("dulcet")
nouns['dulcimer']=nounInfo("dulcimer")
adjectives['dull']=adjInfo("dull")
nouns['dullard']=nounInfo("dullard")
nouns['dullness']=nounInfo("dullness")
adverbs['dully']="dully"
adverbs['duly']="duly"
adjectives['dumb']=adjInfo("dumb")
nouns['dumbbell']=nounInfo("dumbbell")
adverbs['dumbly']="dumbly"
nouns['dumbness']=nounInfo("dumbness")
nouns['dumbwaiter']=nounInfo("dumbwaiter")
nouns['dumdum']=nounInfo("dumdum")
nouns['dummy']=nounInfo("dummy")
nouns['dump']=nounInfo("dump")
nouns['dumper']=nounInfo("dumper")
nouns['dumpling']=nounInfo("dumpling")
nouns['dumps']=nounInfo("dumps")
adjectives['dumpy']=adjInfo("dumpy")
adjectives['dun']=adjInfo("dun")
nouns['dun']=nounInfo("dun")
nouns['dunce']=nounInfo("dunce")
nouns['dunderhead']=nounInfo("dunderhead")
nouns['dune']=nounInfo("dune")
nouns['dung']=nounInfo("dung")
nouns['dungarees']=nounInfo("dungarees")
nouns['dungeon']=nounInfo("dungeon")
nouns['dunghill']=nounInfo("dunghill")
adjectives['duodecimal']=adjInfo("duodecimal")
adjectives['duodenal']=adjInfo("duodenal")
nouns['duodenum']=nounInfo("duodenum")
nouns['duologue']=nounInfo("duologue")
nouns['dupe']=nounInfo("dupe")
adjectives['duplex']=adjInfo("duplex")
adjectives['duplicate']=adjInfo("duplicate")
nouns['duplicate']=nounInfo("duplicate")
nouns['duplication']=nounInfo("duplication")
nouns['duplicator']=nounInfo("duplicator")
nouns['duplicity']=nounInfo("duplicity")
nouns['durability']=nounInfo("durability")
adjectives['durable']=adjInfo("durable")
nouns['durable']=nounInfo("durable")
nouns['durance']=nounInfo("durance")
nouns['duration']=nounInfo("duration")
nouns['durbar']=nounInfo("durbar")
nouns['duress']=nounInfo("duress")
prepositions['during']=P("during")
nouns['dusk']=nounInfo("dusk")
adverbs['duskily']="duskily"
adjectives['dusky']=adjInfo("dusky")
nouns['dust']=nounInfo("dust")
nouns['dustbin']=nounInfo("dustbin")
nouns['duster']=nounInfo("duster")
nouns['dustman']=nounInfo("dustman")
nouns['dustpan']=nounInfo("dustpan")
adjectives['dusty']=adjInfo("dusty")
adjectives['duteous']=adjInfo("duteous")
adjectives['dutiable']=adjInfo("dutiable")
adjectives['dutiful']=adjInfo("dutiful")
adverbs['dutifully']="dutifully"
nouns['duty']=nounInfo("duty")
nouns['duvet']=nounInfo("duvet")
nouns['dwarf']=nounInfo("dwarf")
adjectives['dwarfish']=adjInfo("dwarfish")
nouns['dweller']=nounInfo("dweller")
nouns['dwelling']=nounInfo("dwelling")
nouns['dyarchy']=nounInfo("dyarchy")
nouns['dye']=nounInfo("dye")
nouns['dyer']=nounInfo("dyer")
nouns['dyke']=nounInfo("dyke")
adjectives['dynamic']=adjInfo("dynamic")
nouns['dynamic']=nounInfo("dynamic")
adverbs['dynamically']="dynamically"
nouns['dynamics']=nounInfo("dynamics")
nouns['dynamism']=nounInfo("dynamism")
nouns['dynamite']=nounInfo("dynamite")
nouns['dynamo']=nounInfo("dynamo")
nouns['dynast']=nounInfo("dynast")
adjectives['dynastic']=adjInfo("dynastic")
nouns['dynasty']=nounInfo("dynasty")
nouns['dyne']=nounInfo("dyne")
nouns['dysentery']=nounInfo("dysentery")
nouns['dyslexia']=nounInfo("dyslexia")
adjectives['dyslexic']=adjInfo("dyslexic")
nouns['dyspepsia']=nounInfo("dyspepsia")
adjectives['dyspeptic']=adjInfo("dyspeptic")
nouns['dyspeptic']=nounInfo("dyspeptic")
adjectives['eager']=adjInfo("eager")
adverbs['eagerly']="eagerly"
nouns['eagerness']=nounInfo("eagerness")
nouns['eagle']=nounInfo("eagle")
nouns['eaglet']=nounInfo("eaglet")
nouns['ear']=nounInfo("ear")
nouns['earache']=nounInfo("earache")
nouns['eardrop']=nounInfo("eardrop")
nouns['eardrum']=nounInfo("eardrum")
nouns['earful']=nounInfo("earful")
nouns['earl']=nounInfo("earl")
nouns['earldom']=nounInfo("earldom")
adjectives['early']=adjInfo("early")
adverbs['early']="early"
nouns['earmark']=nounInfo("earmark")
nouns['earner']=nounInfo("earner")
adjectives['earnest']=adjInfo("earnest")
nouns['earnest']=nounInfo("earnest")
adverbs['earnestly']="earnestly"
nouns['earnestness']=nounInfo("earnestness")
nouns['earnings']=nounInfo("earnings")
nouns['earphone']=nounInfo("earphone")
nouns['earpiece']=nounInfo("earpiece")
nouns['earring']=nounInfo("earring")
nouns['earshot']=nounInfo("earshot")
nouns['earth']=nounInfo("earth")
adjectives['earthen']=adjInfo("earthen")
nouns['earthenware']=nounInfo("earthenware")
adjectives['earthly']=adjInfo("earthly")
nouns['earthquake']=nounInfo("earthquake")
nouns['earthwork']=nounInfo("earthwork")
nouns['earthworm']=nounInfo("earthworm")
adjectives['earthy']=adjInfo("earthy")
nouns['earwax']=nounInfo("earwax")
nouns['earwig']=nounInfo("earwig")
nouns['ease']=nounInfo("ease")
nouns['easel']=nounInfo("easel")
adverbs['easily']="easily"
adverbs['east']="east"
nouns['east']=nounInfo("east")
adjectives['easterly']=adjInfo("easterly")
adverbs['easterly']="easterly"
adjectives['eastern']=adjInfo("eastern")
adjectives['easternmost']=adjInfo("easternmost")
adjectives['eastward']=adjInfo("eastward")
adverbs['eastward']="eastward"
adverbs['eastwards']="eastwards"
adjectives['easy']=adjInfo("easy")
adverbs['easy']="easy"
adjectives['easygoing']=adjInfo("easygoing")
adjectives['eatable']=adjInfo("eatable")
nouns['eatable']=nounInfo("eatable")
nouns['eater']=nounInfo("eater")
nouns['eats']=nounInfo("eats")
nouns['eaves']=nounInfo("eaves")
nouns['eavesdropper']=nounInfo("eavesdropper")
nouns['ebb']=nounInfo("ebb")
nouns['ebbtide']=nounInfo("ebbtide")
nouns['ebonite']=nounInfo("ebonite")
adjectives['ebony']=adjInfo("ebony")
nouns['ebony']=nounInfo("ebony")
nouns['ebullience']=nounInfo("ebullience")
adjectives['ebullient']=adjInfo("ebullient")
adverbs['ebulliently']="ebulliently"
adjectives['eccentric']=adjInfo("eccentric")
nouns['eccentric']=nounInfo("eccentric")
nouns['eccentricity']=nounInfo("eccentricity")
nouns['ecclesiastic']=nounInfo("ecclesiastic")
adjectives['ecclesiastical']=adjInfo("ecclesiastical")
adverbs['ecclesiastically']="ecclesiastically"
nouns['echelon']=nounInfo("echelon")
nouns['echo']=nounInfo("echo")
adjectives['eclectic']=adjInfo("eclectic")
nouns['eclecticism']=nounInfo("eclecticism")
nouns['eclipse']=nounInfo("eclipse")
nouns['ecliptic']=nounInfo("ecliptic")
adjectives['ecological']=adjInfo("ecological")
adverbs['ecologically']="ecologically"
nouns['ecologist']=nounInfo("ecologist")
nouns['ecology']=nounInfo("ecology")
adjectives['economic']=adjInfo("economic")
adjectives['economical']=adjInfo("economical")
adverbs['economically']="economically"
nouns['economics']=nounInfo("economics")
nouns['economist']=nounInfo("economist")
nouns['economy']=nounInfo("economy")
nouns['ecosystem']=nounInfo("ecosystem")
nouns['ecstasy']=nounInfo("ecstasy")
adjectives['ecstatic']=adjInfo("ecstatic")
adverbs['ecstatically']="ecstatically"
nouns['ectoplasm']=nounInfo("ectoplasm")
adjectives['ecumenical']=adjInfo("ecumenical")
nouns['eczema']=nounInfo("eczema")
nouns['eddy']=nounInfo("eddy")
nouns['edelweiss']=nounInfo("edelweiss")
nouns['edge']=nounInfo("edge")
adverbs['edgeways']="edgeways"
adverbs['edgewise']="edgewise"
nouns['edging']=nounInfo("edging")
adjectives['edgy']=adjInfo("edgy")
nouns['edibility']=nounInfo("edibility")
adjectives['edible']=adjInfo("edible")
nouns['edible']=nounInfo("edible")
nouns['edict']=nounInfo("edict")
nouns['edification']=nounInfo("edification")
nouns['edifice']=nounInfo("edifice")
nouns['edition']=nounInfo("edition")
nouns['editor']=nounInfo("editor")
adjectives['editorial']=adjInfo("editorial")
nouns['editorial']=nounInfo("editorial")
nouns['education']=nounInfo("education")
adjectives['educational']=adjInfo("educational")
nouns['educationalist']=nounInfo("educationalist")
adverbs['educationally']="educationally"
nouns['educationist']=nounInfo("educationist")
nouns['educator']=nounInfo("educator")
nouns['eel']=nounInfo("eel")
adjectives['eerie']=adjInfo("eerie")
adverbs['eerily']="eerily"
nouns['eeriness']=nounInfo("eeriness")
adjectives['eery']=adjInfo("eery")
nouns['effacement']=nounInfo("effacement")
nouns['effect']=nounInfo("effect")
adjectives['effective']=adjInfo("effective")
adverbs['effectively']="effectively"
nouns['effectiveness']=nounInfo("effectiveness")
adjectives['effectual']=adjInfo("effectual")
nouns['effectuality']=nounInfo("effectuality")
adverbs['effectually']="effectually"
nouns['effectualness']=nounInfo("effectualness")
nouns['effeminacy']=nounInfo("effeminacy")
adjectives['effeminate']=adjInfo("effeminate")
nouns['effendi']=nounInfo("effendi")
nouns['effervescence']=nounInfo("effervescence")
adjectives['effervescent']=adjInfo("effervescent")
adjectives['effete']=adjInfo("effete")
nouns['effeteness']=nounInfo("effeteness")
adjectives['efficacious']=adjInfo("efficacious")
adverbs['efficaciously']="efficaciously"
nouns['efficacy']=nounInfo("efficacy")
nouns['efficiency']=nounInfo("efficiency")
adjectives['efficient']=adjInfo("efficient")
adverbs['efficiently']="efficiently"
nouns['effigy']=nounInfo("effigy")
nouns['efflorescence']=nounInfo("efflorescence")
adjectives['efflorescent']=adjInfo("efflorescent")
nouns['effluent']=nounInfo("effluent")
nouns['efflux']=nounInfo("efflux")
nouns['effort']=nounInfo("effort")
adjectives['effortless']=adjInfo("effortless")
adverbs['effortlessly']="effortlessly"
nouns['effrontery']=nounInfo("effrontery")
nouns['effulgence']=nounInfo("effulgence")
adjectives['effulgent']=adjInfo("effulgent")
nouns['effusion']=nounInfo("effusion")
adjectives['effusive']=adjInfo("effusive")
adverbs['effusively']="effusively"
nouns['effusiveness']=nounInfo("effusiveness")
nouns['eft']=nounInfo("eft")
adjectives['egalitarian']=adjInfo("egalitarian")
nouns['egalitarian']=nounInfo("egalitarian")
nouns['egalitarianism']=nounInfo("egalitarianism")
nouns['egg']=nounInfo("egg")
nouns['eggplant']=nounInfo("eggplant")
nouns['eglantine']=nounInfo("eglantine")
nouns['ego']=nounInfo("ego")
adjectives['egocentric']=adjInfo("egocentric")
nouns['egoism']=nounInfo("egoism")
nouns['egoist']=nounInfo("egoist")
adjectives['egoistic']=adjInfo("egoistic")
adjectives['egoistical']=adjInfo("egoistical")
nouns['egotism']=nounInfo("egotism")
nouns['egotist']=nounInfo("egotist")
adjectives['egotistic']=adjInfo("egotistic")
adverbs['egotistically']="egotistically"
nouns['egotrip']=nounInfo("egotrip")
adjectives['egregious']=adjInfo("egregious")
nouns['egress']=nounInfo("egress")
nouns['egret']=nounInfo("egret")
nouns['eh']=nounInfo("eh")
nouns['eiderdown']=nounInfo("eiderdown")
nouns['eight']=nounInfo("eight")
nouns['eighteen']=nounInfo("eighteen")
adjectives['eighteenth']=adjInfo("eighteenth")
nouns['eighteenth']=nounInfo("eighteenth")
adjectives['eighth']=adjInfo("eighth")
nouns['eighth']=nounInfo("eighth")
adverbs['eighthly']="eighthly"
adjectives['eightieth']=adjInfo("eightieth")
nouns['eightieth']=nounInfo("eightieth")
nouns['eightpence']=nounInfo("eightpence")
adjectives['eightpenny']=adjInfo("eightpenny")
nouns['eightsome']=nounInfo("eightsome")
nouns['eighty']=nounInfo("eighty")
nouns['eisteddfod']=nounInfo("eisteddfod")
adverbs['either']="either"
nouns['ejaculation']=nounInfo("ejaculation")
nouns['ejection']=nounInfo("ejection")
nouns['ejector']=nounInfo("ejector")
adjectives['elaborate']=adjInfo("elaborate")
adverbs['elaborately']="elaborately"
nouns['elaborateness']=nounInfo("elaborateness")
nouns['elaboration']=nounInfo("elaboration")
nouns['eland']=nounInfo("eland")
adjectives['elastic']=adjInfo("elastic")
nouns['elastic']=nounInfo("elastic")
nouns['elasticity']=nounInfo("elasticity")
nouns['elation']=nounInfo("elation")
nouns['elbow']=nounInfo("elbow")
nouns['elder']=nounInfo("elder")
adjectives['elderly']=adjInfo("elderly")
adjectives['elect']=adjInfo("elect")
nouns['election']=nounInfo("election")
nouns['electioneering']=nounInfo("electioneering")
adjectives['elective']=adjInfo("elective")
nouns['elector']=nounInfo("elector")
adjectives['electoral']=adjInfo("electoral")
nouns['electorate']=nounInfo("electorate")
adjectives['electric']=adjInfo("electric")
adjectives['electrical']=adjInfo("electrical")
adverbs['electrically']="electrically"
nouns['electrician']=nounInfo("electrician")
nouns['electricity']=nounInfo("electricity")
nouns['electrification']=nounInfo("electrification")
nouns['electrocardiogram']=nounInfo("electrocardiogram")
nouns['electrocardiograph']=nounInfo("electrocardiograph")
nouns['electrochemistry']=nounInfo("electrochemistry")
nouns['electrocution']=nounInfo("electrocution")
nouns['electrode']=nounInfo("electrode")
nouns['electrolysis']=nounInfo("electrolysis")
nouns['electromagnet']=nounInfo("electromagnet")
adjectives['electromagnetic']=adjInfo("electromagnetic")
nouns['electromagnetism']=nounInfo("electromagnetism")
nouns['electron']=nounInfo("electron")
adjectives['electronic']=adjInfo("electronic")
nouns['electronics']=nounInfo("electronics")
nouns['electroplate']=nounInfo("electroplate")
adjectives['eleemosynary']=adjInfo("eleemosynary")
nouns['elegance']=nounInfo("elegance")
adjectives['elegant']=adjInfo("elegant")
adverbs['elegantly']="elegantly"
adjectives['elegiac']=adjInfo("elegiac")
nouns['elegiac']=nounInfo("elegiac")
nouns['elegy']=nounInfo("elegy")
nouns['element']=nounInfo("element")
adjectives['elemental']=adjInfo("elemental")
adverbs['elementarily']="elementarily"
adjectives['elementary']=adjInfo("elementary")
nouns['elephant']=nounInfo("elephant")
nouns['elephantiasis']=nounInfo("elephantiasis")
adjectives['elephantine']=adjInfo("elephantine")
nouns['elevation']=nounInfo("elevation")
nouns['elevator']=nounInfo("elevator")
nouns['eleven']=nounInfo("eleven")
nouns['elevenses']=nounInfo("elevenses")
adjectives['eleventh']=adjInfo("eleventh")
nouns['eleventh']=nounInfo("eleventh")
adverbs['eleventhly']="eleventhly"
nouns['elf']=nounInfo("elf")
adjectives['elfin']=adjInfo("elfin")
adjectives['elfish']=adjInfo("elfish")
nouns['elicitation']=nounInfo("elicitation")
nouns['eligibility']=nounInfo("eligibility")
adjectives['eligible']=adjInfo("eligible")
nouns['elimination']=nounInfo("elimination")
nouns['elision']=nounInfo("elision")
adjectives['elite']=adjInfo("elite")
nouns['elite']=nounInfo("elite")
nouns['elitism']=nounInfo("elitism")
nouns['elitist']=nounInfo("elitist")
nouns['elixir']=nounInfo("elixir")
nouns['elk']=nounInfo("elk")
nouns['ellipse']=nounInfo("ellipse")
nouns['ellipsis']=nounInfo("ellipsis")
adjectives['elliptic']=adjInfo("elliptic")
adjectives['elliptical']=adjInfo("elliptical")
nouns['elm']=nounInfo("elm")
nouns['elocution']=nounInfo("elocution")
adjectives['elocutionary']=adjInfo("elocutionary")
nouns['elocutionist']=nounInfo("elocutionist")
nouns['elongation']=nounInfo("elongation")
nouns['elopement']=nounInfo("elopement")
nouns['eloquence']=nounInfo("eloquence")
adjectives['eloquent']=adjInfo("eloquent")
adverbs['eloquently']="eloquently"
adverbs['else']="else"
adverbs['elsewhere']="elsewhere"
nouns['elucidation']=nounInfo("elucidation")
adjectives['elusive']=adjInfo("elusive")
nouns['elver']=nounInfo("elver")
adjectives['elvish']=adjInfo("elvish")
nouns['emaciation']=nounInfo("emaciation")
nouns['emanation']=nounInfo("emanation")
nouns['emancipation']=nounInfo("emancipation")
nouns['emasculation']=nounInfo("emasculation")
nouns['embalmment']=nounInfo("embalmment")
nouns['embankment']=nounInfo("embankment")
nouns['embargo']=nounInfo("embargo")
nouns['embarkation']=nounInfo("embarkation")
adjectives['embarrassing']=adjInfo("embarrassing")
adverbs['embarrassingly']="embarrassingly"
nouns['embarrassment']=nounInfo("embarrassment")
nouns['embassy']=nounInfo("embassy")
adjectives['embattled']=adjInfo("embattled")
nouns['embellishment']=nounInfo("embellishment")
nouns['ember']=nounInfo("ember")
nouns['embezzlement']=nounInfo("embezzlement")
nouns['embitterment']=nounInfo("embitterment")
nouns['emblem']=nounInfo("emblem")
adjectives['emblematic']=adjInfo("emblematic")
nouns['embodiment']=nounInfo("embodiment")
adjectives['embonpoint']=adjInfo("embonpoint")
nouns['embonpoint']=nounInfo("embonpoint")
nouns['embrace']=nounInfo("embrace")
nouns['embrasure']=nounInfo("embrasure")
nouns['embrocation']=nounInfo("embrocation")
nouns['embroidery']=nounInfo("embroidery")
nouns['embryo']=nounInfo("embryo")
adjectives['embryonic']=adjInfo("embryonic")
nouns['emeer']=nounInfo("emeer")
nouns['emendation']=nounInfo("emendation")
nouns['emerald']=nounInfo("emerald")
nouns['emergence']=nounInfo("emergence")
nouns['emergency']=nounInfo("emergency")
adjectives['emergent']=adjInfo("emergent")
adjectives['emeritus']=adjInfo("emeritus")
nouns['emery']=nounInfo("emery")
nouns['emetic']=nounInfo("emetic")
nouns['emigrant']=nounInfo("emigrant")
nouns['emigration']=nounInfo("emigration")
nouns['eminence']=nounInfo("eminence")
adjectives['eminent']=adjInfo("eminent")
adverbs['eminently']="eminently"
nouns['emir']=nounInfo("emir")
nouns['emirate']=nounInfo("emirate")
nouns['emissary']=nounInfo("emissary")
nouns['emission']=nounInfo("emission")
nouns['emolument']=nounInfo("emolument")
nouns['emotion']=nounInfo("emotion")
adjectives['emotional']=adjInfo("emotional")
adverbs['emotionally']="emotionally"
adjectives['emotionless']=adjInfo("emotionless")
adjectives['emotive']=adjInfo("emotive")
nouns['empathy']=nounInfo("empathy")
nouns['emperor']=nounInfo("emperor").addAttributes({"g":"m"})
nouns['emphasis']=nounInfo("emphasis")
adjectives['emphatic']=adjInfo("emphatic")
adverbs['emphatically']="emphatically"
nouns['empire']=nounInfo("empire")
adjectives['empiric']=adjInfo("empiric")
adjectives['empirical']=adjInfo("empirical")
adverbs['empirically']="empirically"
nouns['empiricism']=nounInfo("empiricism")
nouns['empiricist']=nounInfo("empiricist")
nouns['emplacement']=nounInfo("emplacement")
nouns['employ']=nounInfo("employ")
adjectives['employable']=adjInfo("employable")
nouns['employee']=nounInfo("employee")
nouns['employer']=nounInfo("employer")
nouns['employment']=nounInfo("employment")
nouns['emporium']=nounInfo("emporium")
nouns['empress']=nounInfo("empress").addAttributes({"g":"f"})
nouns['emptiness']=nounInfo("emptiness")
adjectives['empty']=adjInfo("empty")
nouns['empty']=nounInfo("empty")
adjectives['empurpled']=adjInfo("empurpled")
adjectives['empyrean']=adjInfo("empyrean")
nouns['empyrean']=nounInfo("empyrean")
nouns['emu']=nounInfo("emu")
nouns['emulation']=nounInfo("emulation")
adjectives['emulous']=adjInfo("emulous")
adverbs['emulously']="emulously"
nouns['emulsion']=nounInfo("emulsion")
adjectives['enabling']=adjInfo("enabling")
nouns['enactment']=nounInfo("enactment")
nouns['enamel']=nounInfo("enamel")
nouns['encampment']=nounInfo("encampment")
adjectives['encaustic']=adjInfo("encaustic")
nouns['encephalitis']=nounInfo("encephalitis")
nouns['enchanter']=nounInfo("enchanter")
adverbs['enchantingly']="enchantingly"
nouns['enchantment']=nounInfo("enchantment")
nouns['enchantress']=nounInfo("enchantress")
nouns['encirclement']=nounInfo("encirclement")
nouns['enclave']=nounInfo("enclave")
nouns['enclosure']=nounInfo("enclosure")
nouns['encomium']=nounInfo("encomium")
nouns['encore']=nounInfo("encore")
nouns['encounter']=nounInfo("encounter")
nouns['encouragement']=nounInfo("encouragement")
adverbs['encouragingly']="encouragingly"
nouns['encroachment']=nounInfo("encroachment")
nouns['encumbrance']=nounInfo("encumbrance")
adjectives['encyclical']=adjInfo("encyclical")
nouns['encyclical']=nounInfo("encyclical")
nouns['encyclopaedia']=nounInfo("encyclopaedia")
adjectives['encyclopaedic']=adjInfo("encyclopaedic")
nouns['encyclopedia']=nounInfo("encyclopedia")
adjectives['encyclopedic']=adjInfo("encyclopedic")
nouns['end']=nounInfo("end")
adverbs['endearingly']="endearingly"
nouns['endearment']=nounInfo("endearment")
nouns['endeavor']=nounInfo("endeavor")
nouns['endeavour']=nounInfo("endeavour")
adjectives['endemic']=adjInfo("endemic")
nouns['endemic']=nounInfo("endemic")
nouns['ending']=nounInfo("ending")
nouns['endive']=nounInfo("endive")
adjectives['endless']=adjInfo("endless")
adverbs['endlessly']="endlessly"
nouns['endorsement']=nounInfo("endorsement")
nouns['endowment']=nounInfo("endowment")
adjectives['endurable']=adjInfo("endurable")
nouns['endurance']=nounInfo("endurance")
adjectives['enduring']=adjInfo("enduring")
adverbs['enduringly']="enduringly"
adverbs['endways']="endways"
adverbs['endwise']="endwise"
nouns['enema']=nounInfo("enema")
nouns['enemy']=nounInfo("enemy").addAttributes({"g":"x"})
adjectives['energetic']=adjInfo("energetic")
adverbs['energetically']="energetically"
nouns['energy']=nounInfo("energy")
adjectives['enervating']=adjInfo("enervating")
adjectives['enforceable']=adjInfo("enforceable")
nouns['enforcement']=nounInfo("enforcement")
nouns['enforcer']=nounInfo("enforcer")
nouns['enfranchisement']=nounInfo("enfranchisement")
nouns['engagement']=nounInfo("engagement")
adjectives['engaging']=adjInfo("engaging")
adverbs['engagingly']="engagingly"
nouns['engine']=nounInfo("engine")
nouns['engineer']=nounInfo("engineer")
nouns['engineering']=nounInfo("engineering")
nouns['engraver']=nounInfo("engraver")
nouns['engraving']=nounInfo("engraving")
nouns['enhancement']=nounInfo("enhancement")
nouns['enigma']=nounInfo("enigma")
adjectives['enigmatic']=adjInfo("enigmatic")
adverbs['enigmatically']="enigmatically"
adjectives['enjoyable']=adjInfo("enjoyable")
adverbs['enjoyably']="enjoyably"
nouns['enjoyment']=nounInfo("enjoyment")
nouns['enlargement']=nounInfo("enlargement")
adjectives['enlightened']=adjInfo("enlightened")
nouns['enlightenment']=nounInfo("enlightenment")
nouns['enlistment']=nounInfo("enlistment")
nouns['enmity']=nounInfo("enmity")
nouns['ennoblement']=nounInfo("ennoblement")
nouns['ennui']=nounInfo("ennui")
nouns['enormity']=nounInfo("enormity")
adjectives['enormous']=adjInfo("enormous")
adverbs['enormously']="enormously"
nouns['enormousness']=nounInfo("enormousness")
adverbs['enough']="enough"
nouns['enough']=nounInfo("enough")
adverbs['enquiringly']="enquiringly"
nouns['enquiry']=nounInfo("enquiry")
nouns['enrichment']=nounInfo("enrichment")
nouns['enrolment']=nounInfo("enrolment")
nouns['ensemble']=nounInfo("ensemble")
nouns['ensign']=nounInfo("ensign")
nouns['ensilage']=nounInfo("ensilage")
nouns['enslavement']=nounInfo("enslavement")
nouns['entail']=nounInfo("entail")
nouns['entanglement']=nounInfo("entanglement")
nouns['entente']=nounInfo("entente")
adjectives['enteric']=adjInfo("enteric")
nouns['enteritis']=nounInfo("enteritis")
nouns['enterprise']=nounInfo("enterprise")
adjectives['enterprising']=adjInfo("enterprising")
adverbs['enterprisingly']="enterprisingly"
nouns['entertainer']=nounInfo("entertainer")
adjectives['entertaining']=adjInfo("entertaining")
adverbs['entertainingly']="entertainingly"
nouns['entertainment']=nounInfo("entertainment")
nouns['enthronement']=nounInfo("enthronement")
nouns['enthusiasm']=nounInfo("enthusiasm")
nouns['enthusiast']=nounInfo("enthusiast")
adjectives['enthusiastic']=adjInfo("enthusiastic")
adverbs['enthusiastically']="enthusiastically"
nouns['enticement']=nounInfo("enticement")
adjectives['entire']=adjInfo("entire")
adverbs['entirely']="entirely"
nouns['entirety']=nounInfo("entirety")
nouns['entitlement']=nounInfo("entitlement")
nouns['entity']=nounInfo("entity")
adjectives['entomological']=adjInfo("entomological")
nouns['entomologist']=nounInfo("entomologist")
nouns['entomology']=nounInfo("entomology")
nouns['entourage']=nounInfo("entourage")
nouns['entrails']=nounInfo("entrails")
nouns['entrance']=nounInfo("entrance")
nouns['entrant']=nounInfo("entrant")
adverbs['entreatingly']="entreatingly"
nouns['entreaty']=nounInfo("entreaty")
nouns['entrenchment']=nounInfo("entrenchment")
nouns['entrepot']=nounInfo("entrepot")
nouns['entrepreneur']=nounInfo("entrepreneur")
adjectives['entrepreneurial']=adjInfo("entrepreneurial")
nouns['entry']=nounInfo("entry")
nouns['enumeration']=nounInfo("enumeration")
nouns['enunciation']=nounInfo("enunciation")
nouns['envelope']=nounInfo("envelope")
nouns['envelopment']=nounInfo("envelopment")
adjectives['enviable']=adjInfo("enviable")
adjectives['envious']=adjInfo("envious")
adverbs['enviously']="enviously"
nouns['environment']=nounInfo("environment")
adjectives['environmental']=adjInfo("environmental")
nouns['environmentalist']=nounInfo("environmentalist")
adverbs['environmentally']="environmentally"
nouns['environs']=nounInfo("environs")
nouns['envoi']=nounInfo("envoi")
nouns['envoy']=nounInfo("envoy")
nouns['envy']=nounInfo("envy")
nouns['enzyme']=nounInfo("enzyme")
nouns['eon']=nounInfo("eon")
nouns['epaulet']=nounInfo("epaulet")
nouns['epaulette']=nounInfo("epaulette")
adjectives['ephemeral']=adjInfo("ephemeral")
adjectives['epic']=adjInfo("epic")
nouns['epic']=nounInfo("epic")
nouns['epicentre']=nounInfo("epicentre")
nouns['epicure']=nounInfo("epicure")
adjectives['epicurean']=adjInfo("epicurean")
nouns['epicurean']=nounInfo("epicurean")
adjectives['epidemic']=adjInfo("epidemic")
nouns['epidemic']=nounInfo("epidemic")
nouns['epidermis']=nounInfo("epidermis")
nouns['epidiascope']=nounInfo("epidiascope")
nouns['epiglottis']=nounInfo("epiglottis")
nouns['epigram']=nounInfo("epigram")
adjectives['epigrammatic']=adjInfo("epigrammatic")
adverbs['epigrammatically']="epigrammatically"
nouns['epilepsy']=nounInfo("epilepsy")
adjectives['epileptic']=adjInfo("epileptic")
nouns['epileptic']=nounInfo("epileptic")
nouns['epilogue']=nounInfo("epilogue")
adjectives['episcopal']=adjInfo("episcopal")
adjectives['episcopalian']=adjInfo("episcopalian")
nouns['episcopalian']=nounInfo("episcopalian")
nouns['episode']=nounInfo("episode")
adjectives['episodic']=adjInfo("episodic")
nouns['epistle']=nounInfo("epistle")
adjectives['epistolary']=adjInfo("epistolary")
nouns['epitaph']=nounInfo("epitaph")
nouns['epithet']=nounInfo("epithet")
nouns['epitome']=nounInfo("epitome")
nouns['epoch']=nounInfo("epoch")
adjectives['equable']=adjInfo("equable")
adverbs['equably']="equably"
adjectives['equal']=adjInfo("equal")
nouns['equal']=nounInfo("equal")
nouns['equalitarian']=nounInfo("equalitarian")
nouns['equality']=nounInfo("equality")
nouns['equalization']=nounInfo("equalization")
adverbs['equally']="equally"
nouns['equanimity']=nounInfo("equanimity")
nouns['equation']=nounInfo("equation")
nouns['equator']=nounInfo("equator")
adjectives['equatorial']=adjInfo("equatorial")
nouns['equerry']=nounInfo("equerry")
adjectives['equestrian']=adjInfo("equestrian")
nouns['equestrian']=nounInfo("equestrian")
adjectives['equidistant']=adjInfo("equidistant")
adjectives['equilateral']=adjInfo("equilateral")
nouns['equilibrium']=nounInfo("equilibrium")
adjectives['equine']=adjInfo("equine")
adjectives['equinoctial']=adjInfo("equinoctial")
nouns['equinox']=nounInfo("equinox")
nouns['equipage']=nounInfo("equipage")
nouns['equipment']=nounInfo("equipment")
nouns['equipoise']=nounInfo("equipoise")
adjectives['equitable']=adjInfo("equitable")
adverbs['equitably']="equitably"
nouns['equity']=nounInfo("equity")
nouns['equivalence']=nounInfo("equivalence")
adjectives['equivalent']=adjInfo("equivalent")
nouns['equivalent']=nounInfo("equivalent")
adjectives['equivocal']=adjInfo("equivocal")
nouns['equivocation']=nounInfo("equivocation")
nouns['era']=nounInfo("era")
nouns['eradication']=nounInfo("eradication")
nouns['eraser']=nounInfo("eraser")
nouns['erasure']=nounInfo("erasure")
adverbs['ere']="ere"
prepositions['ere']=P("ere")
adjectives['erect']=adjInfo("erect")
adjectives['erectile']=adjInfo("erectile")
nouns['erection']=nounInfo("erection")
adverbs['erectly']="erectly"
nouns['erectness']=nounInfo("erectness")
nouns['eremite']=nounInfo("eremite")
nouns['erg']=nounInfo("erg")
adverbs['ergo']="ergo"
nouns['ergonomics']=nounInfo("ergonomics")
nouns['ermine']=nounInfo("ermine")
adjectives['erogenous']=adjInfo("erogenous")
nouns['erosion']=nounInfo("erosion")
adjectives['erosive']=adjInfo("erosive")
adjectives['erotic']=adjInfo("erotic")
nouns['erotica']=nounInfo("erotica")
nouns['eroticism']=nounInfo("eroticism")
nouns['errand']=nounInfo("errand")
adjectives['errant']=adjInfo("errant")
adjectives['erratic']=adjInfo("erratic")
adverbs['erratically']="erratically"
nouns['erratum']=nounInfo("erratum")
adjectives['erroneous']=adjInfo("erroneous")
adverbs['erroneously']="erroneously"
nouns['error']=nounInfo("error")
nouns['eructation']=nounInfo("eructation")
adjectives['erudite']=adjInfo("erudite")
adverbs['eruditely']="eruditely"
nouns['erudition']=nounInfo("erudition")
nouns['eruption']=nounInfo("eruption")
nouns['erysipelas']=nounInfo("erysipelas")
nouns['escalation']=nounInfo("escalation")
nouns['escalator']=nounInfo("escalator")
nouns['escalope']=nounInfo("escalope")
nouns['escapade']=nounInfo("escapade")
nouns['escape']=nounInfo("escape")
nouns['escapee']=nounInfo("escapee")
nouns['escapement']=nounInfo("escapement")
nouns['escapism']=nounInfo("escapism")
nouns['escapist']=nounInfo("escapist")
nouns['escarpment']=nounInfo("escarpment")
nouns['eschatology']=nounInfo("eschatology")
nouns['escort']=nounInfo("escort")
nouns['escritoire']=nounInfo("escritoire")
nouns['escudo']=nounInfo("escudo")
nouns['escutcheon']=nounInfo("escutcheon")
nouns['esophagus']=nounInfo("esophagus")
adjectives['esoteric']=adjInfo("esoteric")
nouns['espalier']=nounInfo("espalier")
adjectives['especial']=adjInfo("especial")
adverbs['especially']="especially"
nouns['espionage']=nounInfo("espionage")
nouns['esplanade']=nounInfo("esplanade")
nouns['espousal']=nounInfo("espousal")
nouns['espresso']=nounInfo("espresso")
nouns['esprit']=nounInfo("esprit")
nouns['essay']=nounInfo("essay")
nouns['essayist']=nounInfo("essayist")
nouns['essence']=nounInfo("essence")
adjectives['essential']=adjInfo("essential")
nouns['essential']=nounInfo("essential")
adverbs['essentially']="essentially"
nouns['establishment']=nounInfo("establishment")
nouns['estaminet']=nounInfo("estaminet")
nouns['estate']=nounInfo("estate")
nouns['esteem']=nounInfo("esteem")
nouns['esthete']=nounInfo("esthete")
adjectives['esthetic']=adjInfo("esthetic")
nouns['esthetic']=nounInfo("esthetic")
adjectives['esthetical']=adjInfo("esthetical")
nouns['esthetics']=nounInfo("esthetics")
adjectives['estimable']=adjInfo("estimable")
nouns['estimate']=nounInfo("estimate")
nouns['estimation']=nounInfo("estimation")
nouns['estrangement']=nounInfo("estrangement")
nouns['estuary']=nounInfo("estuary")
adverbs['etc']="etc"
nouns['etcher']=nounInfo("etcher")
nouns['etching']=nounInfo("etching")
adjectives['eternal']=adjInfo("eternal")
adverbs['eternally']="eternally"
nouns['eternity']=nounInfo("eternity")
nouns['ether']=nounInfo("ether")
adjectives['ethereal']=adjInfo("ethereal")
nouns['ethic']=nounInfo("ethic")
adjectives['ethical']=adjInfo("ethical")
adverbs['ethically']="ethically"
nouns['ethics']=nounInfo("ethics")
adjectives['ethnic']=adjInfo("ethnic")
adverbs['ethnically']="ethnically"
adjectives['ethnocultural']=adjInfo("ethnocultural")
nouns['ethnographer']=nounInfo("ethnographer")
adjectives['ethnographic']=adjInfo("ethnographic")
nouns['ethnography']=nounInfo("ethnography")
adjectives['ethnological']=adjInfo("ethnological")
nouns['ethnologist']=nounInfo("ethnologist")
nouns['ethnology']=nounInfo("ethnology")
nouns['ethos']=nounInfo("ethos")
nouns['ethyl']=nounInfo("ethyl")
nouns['etiology']=nounInfo("etiology")
nouns['etiquette']=nounInfo("etiquette")
adjectives['etymological']=adjInfo("etymological")
nouns['etymologist']=nounInfo("etymologist")
nouns['etymology']=nounInfo("etymology")
nouns['eucalyptus']=nounInfo("eucalyptus")
nouns['eugenics']=nounInfo("eugenics")
nouns['eulogist']=nounInfo("eulogist")
adjectives['eulogistic']=adjInfo("eulogistic")
nouns['eulogy']=nounInfo("eulogy")
nouns['eunuch']=nounInfo("eunuch")
nouns['euphemism']=nounInfo("euphemism")
adjectives['euphemistic']=adjInfo("euphemistic")
adverbs['euphemistically']="euphemistically"
nouns['euphony']=nounInfo("euphony")
nouns['euphoria']=nounInfo("euphoria")
adjectives['euphoric']=adjInfo("euphoric")
nouns['euphuism']=nounInfo("euphuism")
nouns['eureka']=nounInfo("eureka")
nouns['eurhythmics']=nounInfo("eurhythmics")
nouns['eurythmics']=nounInfo("eurythmics")
nouns['euthanasia']=nounInfo("euthanasia")
nouns['evacuation']=nounInfo("evacuation")
nouns['evacuee']=nounInfo("evacuee")
nouns['evaluation']=nounInfo("evaluation")
nouns['evanescence']=nounInfo("evanescence")
adjectives['evanescent']=adjInfo("evanescent")
adjectives['evangelical']=adjInfo("evangelical")
nouns['evangelicalism']=nounInfo("evangelicalism")
nouns['evangelist']=nounInfo("evangelist")
adjectives['evangelistic']=adjInfo("evangelistic")
nouns['evaporation']=nounInfo("evaporation")
nouns['evasion']=nounInfo("evasion")
adjectives['evasive']=adjInfo("evasive")
adverbs['evasively']="evasively"
nouns['evasiveness']=nounInfo("evasiveness")
nouns['eve']=nounInfo("eve")
adjectives['even']=adjInfo("even")
adverbs['even']="even"
nouns['even']=nounInfo("even")
nouns['evening']=nounInfo("evening")
adverbs['evenly']="evenly"
nouns['evenness']=nounInfo("evenness")
nouns['evensong']=nounInfo("evensong")
nouns['event']=nounInfo("event")
adjectives['eventful']=adjInfo("eventful")
nouns['eventide']=nounInfo("eventide")
adjectives['eventual']=adjInfo("eventual")
nouns['eventuality']=nounInfo("eventuality")
adverbs['eventually']="eventually"
adverbs['ever']="ever"
adjectives['evergreen']=adjInfo("evergreen")
nouns['evergreen']=nounInfo("evergreen")
adjectives['everlasting']=adjInfo("everlasting")
adverbs['evermore']="evermore"
adjectives['everyday']=adjInfo("everyday")
adverbs['everyplace']="everyplace"
adverbs['everytime']="everytime"
adverbs['everywhere']="everywhere"
nouns['eviction']=nounInfo("eviction")
nouns['evidence']=nounInfo("evidence")
adjectives['evident']=adjInfo("evident")
adverbs['evidently']="evidently"
adjectives['evil']=adjInfo("evil")
nouns['evil']=nounInfo("evil")
adverbs['evilly']="evilly"
nouns['evocation']=nounInfo("evocation")
adjectives['evocative']=adjInfo("evocative")
nouns['evolution']=nounInfo("evolution")
adjectives['evolutionary']=adjInfo("evolutionary")
nouns['ewe']=nounInfo("ewe")
nouns['ewer']=nounInfo("ewer")
nouns['exacerbation']=nounInfo("exacerbation")
adjectives['exact']=adjInfo("exact")
adjectives['exacting']=adjInfo("exacting")
nouns['exaction']=nounInfo("exaction")
nouns['exactitude']=nounInfo("exactitude")
adverbs['exactly']="exactly"
nouns['exactness']=nounInfo("exactness")
nouns['exaggeration']=nounInfo("exaggeration")
nouns['exaltation']=nounInfo("exaltation")
adjectives['exalted']=adjInfo("exalted")
nouns['exam']=nounInfo("exam")
nouns['examination']=nounInfo("examination")
nouns['examiner']=nounInfo("examiner")
nouns['example']=nounInfo("example")
nouns['exasperation']=nounInfo("exasperation")
nouns['excavation']=nounInfo("excavation")
nouns['excavator']=nounInfo("excavator")
adverbs['exceedingly']="exceedingly"
nouns['excellence']=nounInfo("excellence")
adjectives['excellent']=adjInfo("excellent")
adverbs['excellently']="excellently"
nouns['excelsior']=nounInfo("excelsior")
prepositions['except']=P("except")
prepositions['excepting']=P("excepting")
nouns['exception']=nounInfo("exception")
adjectives['exceptionable']=adjInfo("exceptionable")
adjectives['exceptional']=adjInfo("exceptional")
adverbs['exceptionally']="exceptionally"
nouns['excerpt']=nounInfo("excerpt")
adjectives['excess']=adjInfo("excess")
nouns['excess']=nounInfo("excess")
adjectives['excessive']=adjInfo("excessive")
adverbs['excessively']="excessively"
nouns['exchange']=nounInfo("exchange")
adjectives['exchangeable']=adjInfo("exchangeable")
nouns['exchequer']=nounInfo("exchequer")
nouns['excise']=nounInfo("excise")
nouns['exciseman']=nounInfo("exciseman")
nouns['excision']=nounInfo("excision")
nouns['excitability']=nounInfo("excitability")
adjectives['excitable']=adjInfo("excitable")
adverbs['excitedly']="excitedly"
nouns['excitement']=nounInfo("excitement")
adjectives['exciting']=adjInfo("exciting")
adverbs['excitingly']="excitingly"
nouns['exclamation']=nounInfo("exclamation")
adjectives['exclamatory']=adjInfo("exclamatory")
nouns['exclusion']=nounInfo("exclusion")
adjectives['exclusionary']=adjInfo("exclusionary")
adjectives['exclusive']=adjInfo("exclusive")
adverbs['exclusively']="exclusively"
nouns['excogitation']=nounInfo("excogitation")
nouns['excommunication']=nounInfo("excommunication")
nouns['excoriation']=nounInfo("excoriation")
nouns['excrement']=nounInfo("excrement")
nouns['excrescence']=nounInfo("excrescence")
nouns['excreta']=nounInfo("excreta")
nouns['excretion']=nounInfo("excretion")
adjectives['excruciating']=adjInfo("excruciating")
adverbs['excruciatingly']="excruciatingly"
nouns['excursion']=nounInfo("excursion")
nouns['excursionist']=nounInfo("excursionist")
adjectives['excusable']=adjInfo("excusable")
adverbs['excusably']="excusably"
nouns['excuse']=nounInfo("excuse")
adjectives['execrable']=adjInfo("execrable")
nouns['execration']=nounInfo("execration")
nouns['executant']=nounInfo("executant")
nouns['execution']=nounInfo("execution")
nouns['executioner']=nounInfo("executioner")
adjectives['executive']=adjInfo("executive")
nouns['executive']=nounInfo("executive")
nouns['executor']=nounInfo("executor")
nouns['executrix']=nounInfo("executrix")
nouns['exegesis']=nounInfo("exegesis")
adjectives['exemplary']=adjInfo("exemplary")
nouns['exemplification']=nounInfo("exemplification")
adjectives['exempt']=adjInfo("exempt")
nouns['exemption']=nounInfo("exemption")
nouns['exercise']=nounInfo("exercise")
nouns['exertion']=nounInfo("exertion")
nouns['exhalation']=nounInfo("exhalation")
nouns['exhaust']=nounInfo("exhaust")
nouns['exhaustion']=nounInfo("exhaustion")
adjectives['exhaustive']=adjInfo("exhaustive")
adverbs['exhaustively']="exhaustively"
nouns['exhibit']=nounInfo("exhibit")
nouns['exhibition']=nounInfo("exhibition")
nouns['exhibitioner']=nounInfo("exhibitioner")
nouns['exhibitionism']=nounInfo("exhibitionism")
nouns['exhibitionist']=nounInfo("exhibitionist")
nouns['exhibitor']=nounInfo("exhibitor")
nouns['exhilaration']=nounInfo("exhilaration")
nouns['exhortation']=nounInfo("exhortation")
nouns['exhumation']=nounInfo("exhumation")
nouns['exigency']=nounInfo("exigency")
adjectives['exigent']=adjInfo("exigent")
adjectives['exiguous']=adjInfo("exiguous")
nouns['exile']=nounInfo("exile")
nouns['existence']=nounInfo("existence")
adjectives['existent']=adjInfo("existent")
nouns['existentialism']=nounInfo("existentialism")
nouns['exit']=nounInfo("exit")
nouns['exodus']=nounInfo("exodus")
nouns['exoneration']=nounInfo("exoneration")
nouns['exorbitance']=nounInfo("exorbitance")
adjectives['exorbitant']=adjInfo("exorbitant")
adverbs['exorbitantly']="exorbitantly"
adjectives['exotic']=adjInfo("exotic")
nouns['expanse']=nounInfo("expanse")
nouns['expansion']=nounInfo("expansion")
adjectives['expansive']=adjInfo("expansive")
adverbs['expansively']="expansively"
nouns['expansiveness']=nounInfo("expansiveness")
nouns['expatriate']=nounInfo("expatriate")
nouns['expectancy']=nounInfo("expectancy")
adjectives['expectant']=adjInfo("expectant")
adverbs['expectantly']="expectantly"
nouns['expectation']=nounInfo("expectation")
adjectives['expected']=adjInfo("expected")
nouns['expectorant']=nounInfo("expectorant")
nouns['expedience']=nounInfo("expedience")
nouns['expediency']=nounInfo("expediency")
adjectives['expedient']=adjInfo("expedient")
nouns['expedient']=nounInfo("expedient")
adverbs['expediently']="expediently"
nouns['expedition']=nounInfo("expedition")
adjectives['expeditionary']=adjInfo("expeditionary")
adjectives['expeditious']=adjInfo("expeditious")
adverbs['expeditiously']="expeditiously"
adjectives['expendable']=adjInfo("expendable")
nouns['expenditure']=nounInfo("expenditure")
nouns['expense']=nounInfo("expense")
adjectives['expensive']=adjInfo("expensive")
adverbs['expensively']="expensively"
nouns['experience']=nounInfo("experience")
adjectives['experienced']=adjInfo("experienced")
nouns['experiment']=nounInfo("experiment")
adjectives['experimental']=adjInfo("experimental")
adverbs['experimentally']="experimentally"
nouns['experimentation']=nounInfo("experimentation")
adjectives['expert']=adjInfo("expert")
nouns['expert']=nounInfo("expert").addAttributes({"g":"x"})
nouns['expertise']=nounInfo("expertise")
adverbs['expertly']="expertly"
nouns['expertness']=nounInfo("expertness")
nouns['expiation']=nounInfo("expiation")
nouns['expiration']=nounInfo("expiration")
nouns['expiry']=nounInfo("expiry")
nouns['explanation']=nounInfo("explanation")
adjectives['explanatory']=adjInfo("explanatory")
nouns['expletive']=nounInfo("expletive")
adjectives['explicable']=adjInfo("explicable")
adverbs['explicably']="explicably"
adjectives['explicit']=adjInfo("explicit")
adverbs['explicitly']="explicitly"
nouns['explicitness']=nounInfo("explicitness")
nouns['exploit']=nounInfo("exploit")
nouns['exploitation']=nounInfo("exploitation")
nouns['exploration']=nounInfo("exploration")
adjectives['exploratory']=adjInfo("exploratory")
nouns['explorer']=nounInfo("explorer")
nouns['explosion']=nounInfo("explosion")
adjectives['explosive']=adjInfo("explosive")
nouns['explosive']=nounInfo("explosive")
adverbs['explosively']="explosively"
nouns['expo']=nounInfo("expo")
nouns['exponent']=nounInfo("exponent")
adverbs['exponentially']="exponentially"
nouns['export']=nounInfo("export")
adjectives['exportable']=adjInfo("exportable")
nouns['exportation']=nounInfo("exportation")
nouns['exporter']=nounInfo("exporter")
nouns['exposition']=nounInfo("exposition")
nouns['expostulation']=nounInfo("expostulation")
nouns['exposure']=nounInfo("exposure")
adjectives['express']=adjInfo("express")
adverbs['express']="express"
nouns['express']=nounInfo("express")
nouns['expression']=nounInfo("expression")
nouns['expressionism']=nounInfo("expressionism")
nouns['expressionist']=nounInfo("expressionist")
adjectives['expressionless']=adjInfo("expressionless")
adjectives['expressive']=adjInfo("expressive")
adverbs['expressively']="expressively"
adverbs['expressly']="expressly"
nouns['expressway']=nounInfo("expressway")
nouns['expropriation']=nounInfo("expropriation")
nouns['expulsion']=nounInfo("expulsion")
nouns['expurgation']=nounInfo("expurgation")
adjectives['exquisite']=adjInfo("exquisite")
adverbs['exquisitely']="exquisitely"
nouns['exquisiteness']=nounInfo("exquisiteness")
adjectives['extant']=adjInfo("extant")
adjectives['extemporaneous']=adjInfo("extemporaneous")
adverbs['extemporaneously']="extemporaneously"
adverbs['extemporarily']="extemporarily"
adjectives['extemporary']=adjInfo("extemporary")
adjectives['extempore']=adjInfo("extempore")
adverbs['extempore']="extempore"
nouns['extension']=nounInfo("extension")
adjectives['extensive']=adjInfo("extensive")
adverbs['extensively']="extensively"
nouns['extent']=nounInfo("extent")
adjectives['extenuating']=adjInfo("extenuating")
nouns['extenuation']=nounInfo("extenuation")
adjectives['exterior']=adjInfo("exterior")
nouns['exterior']=nounInfo("exterior")
nouns['extermination']=nounInfo("extermination")
adjectives['external']=adjInfo("external")
nouns['external']=nounInfo("external")
adverbs['externally']="externally"
adjectives['exterritorial']=adjInfo("exterritorial")
adjectives['extinct']=adjInfo("extinct")
nouns['extinction']=nounInfo("extinction")
nouns['extinguisher']=nounInfo("extinguisher")
nouns['extirpation']=nounInfo("extirpation")
nouns['extortion']=nounInfo("extortion")
adjectives['extortionate']=adjInfo("extortionate")
adverbs['extortionately']="extortionately"
adjectives['extra']=adjInfo("extra")
adverbs['extra']="extra"
nouns['extra']=nounInfo("extra")
nouns['extract']=nounInfo("extract")
nouns['extraction']=nounInfo("extraction")
adjectives['extracurricular']=adjInfo("extracurricular")
nouns['extradition']=nounInfo("extradition")
adjectives['extrajudicial']=adjInfo("extrajudicial")
adjectives['extramarital']=adjInfo("extramarital")
adjectives['extramural']=adjInfo("extramural")
adjectives['extraneous']=adjInfo("extraneous")
adverbs['extraordinarily']="extraordinarily"
adjectives['extraordinary']=adjInfo("extraordinary")
adjectives['extrasensory']=adjInfo("extrasensory")
adjectives['extraterritorial']=adjInfo("extraterritorial")
nouns['extravagance']=nounInfo("extravagance")
adjectives['extravagant']=adjInfo("extravagant")
adverbs['extravagantly']="extravagantly"
nouns['extravaganza']=nounInfo("extravaganza")
adjectives['extreme']=adjInfo("extreme")
nouns['extreme']=nounInfo("extreme")
adverbs['extremely']="extremely"
nouns['extremist']=nounInfo("extremist")
nouns['extremity']=nounInfo("extremity")
adjectives['extricable']=adjInfo("extricable")
nouns['extrication']=nounInfo("extrication")
adjectives['extrinsic']=adjInfo("extrinsic")
nouns['extroversion']=nounInfo("extroversion")
nouns['extrovert']=nounInfo("extrovert")
nouns['extrusion']=nounInfo("extrusion")
nouns['exuberance']=nounInfo("exuberance")
adjectives['exuberant']=adjInfo("exuberant")
adverbs['exuberantly']="exuberantly"
adjectives['exultant']=adjInfo("exultant")
adverbs['exultantly']="exultantly"
nouns['exultation']=nounInfo("exultation")
nouns['eye']=nounInfo("eye")
nouns['eyeball']=nounInfo("eyeball")
nouns['eyebrow']=nounInfo("eyebrow")
adjectives['eyecatching']=adjInfo("eyecatching")
adjectives['eyed']=adjInfo("eyed")
nouns['eyeful']=nounInfo("eyeful")
nouns['eyelash']=nounInfo("eyelash")
adjectives['eyeless']=adjInfo("eyeless")
nouns['eyelet']=nounInfo("eyelet")
nouns['eyelid']=nounInfo("eyelid")
nouns['eyepiece']=nounInfo("eyepiece")
nouns['eyeshot']=nounInfo("eyeshot")
nouns['eyesight']=nounInfo("eyesight")
nouns['eyesore']=nounInfo("eyesore")
nouns['eyewash']=nounInfo("eyewash")
nouns['eyrie']=nounInfo("eyrie")
nouns['eyry']=nounInfo("eyry")
nouns['fa']=nounInfo("fa")
adjectives['fab']=adjInfo("fab")
nouns['fable']=nounInfo("fable")
adjectives['fabled']=adjInfo("fabled")
nouns['fabric']=nounInfo("fabric")
nouns['fabrication']=nounInfo("fabrication")
adjectives['fabulous']=adjInfo("fabulous")
adverbs['fabulously']="fabulously"
nouns['face']=nounInfo("face")
adjectives['faceless']=adjInfo("faceless")
nouns['facer']=nounInfo("facer")
nouns['facet']=nounInfo("facet")
adjectives['facetious']=adjInfo("facetious")
adverbs['facetiously']="facetiously"
nouns['facetiousness']=nounInfo("facetiousness")
nouns['facia']=nounInfo("facia")
adjectives['facial']=adjInfo("facial")
nouns['facial']=nounInfo("facial")
adjectives['facile']=adjInfo("facile")
nouns['facilitator']=nounInfo("facilitator")
nouns['facility']=nounInfo("facility")
nouns['facing']=nounInfo("facing")
nouns['facsimile']=nounInfo("facsimile")
nouns['fact']=nounInfo("fact")
nouns['faction']=nounInfo("faction")
adjectives['factious']=adjInfo("factious")
adjectives['factitious']=adjInfo("factitious")
nouns['factor']=nounInfo("factor")
nouns['factory']=nounInfo("factory")
nouns['factotum']=nounInfo("factotum")
adjectives['factual']=adjInfo("factual")
adverbs['factually']="factually"
nouns['faculty']=nounInfo("faculty")
nouns['fad']=nounInfo("fad")
adverbs['faddily']="faddily"
adjectives['faddy']=adjInfo("faddy")
nouns['faeces']=nounInfo("faeces")
nouns['faerie']=nounInfo("faerie")
nouns['faery']=nounInfo("faery")
nouns['fag']=nounInfo("fag")
nouns['faggot']=nounInfo("faggot")
nouns['faience']=nounInfo("faience")
nouns['fail']=nounInfo("fail")
nouns['failing']=nounInfo("failing")
prepositions['failing']=P("failing")
nouns['failure']=nounInfo("failure")
adverbs['fain']="fain"
adjectives['faint']=adjInfo("faint")
nouns['faint']=nounInfo("faint")
adverbs['faintly']="faintly"
nouns['faintness']=nounInfo("faintness")
adjectives['fair']=adjInfo("fair")
adverbs['fair']="fair"
nouns['fair']=nounInfo("fair")
nouns['fairground']=nounInfo("fairground")
adjectives['fairish']=adjInfo("fairish")
adverbs['fairly']="fairly"
nouns['fairness']=nounInfo("fairness")
nouns['fairway']=nounInfo("fairway")
nouns['fairy']=nounInfo("fairy")
nouns['fairyland']=nounInfo("fairyland")
nouns['fairytale']=nounInfo("fairytale")
nouns['faith']=nounInfo("faith")
adjectives['faithful']=adjInfo("faithful")
adverbs['faithfully']="faithfully"
nouns['faithfulness']=nounInfo("faithfulness")
adjectives['faithless']=adjInfo("faithless")
adverbs['faithlessly']="faithlessly"
nouns['faithlessness']=nounInfo("faithlessness")
nouns['fake']=nounInfo("fake")
nouns['fakir']=nounInfo("fakir")
nouns['falcon']=nounInfo("falcon")
nouns['falconry']=nounInfo("falconry")
nouns['fall']=nounInfo("fall")
adjectives['fallacious']=adjInfo("fallacious")
nouns['fallacy']=nounInfo("fallacy")
nouns['fallibility']=nounInfo("fallibility")
adjectives['fallible']=adjInfo("fallible")
adjectives['fallow']=adjInfo("fallow")
nouns['fallow']=nounInfo("fallow")
adjectives['false']=adjInfo("false")
adverbs['false']="false"
nouns['falsehood']=nounInfo("falsehood")
adverbs['falsely']="falsely"
nouns['falseness']=nounInfo("falseness")
adjectives['falsetto']=adjInfo("falsetto")
nouns['falsetto']=nounInfo("falsetto")
nouns['falsies']=nounInfo("falsies")
nouns['falsification']=nounInfo("falsification")
nouns['falsity']=nounInfo("falsity")
adverbs['falteringly']="falteringly"
nouns['fame']=nounInfo("fame")
adjectives['famed']=adjInfo("famed")
adjectives['familiar']=adjInfo("familiar")
nouns['familiar']=nounInfo("familiar")
nouns['familiarity']=nounInfo("familiarity")
adverbs['familiarly']="familiarly"
nouns['family']=nounInfo("family")
nouns['famine']=nounInfo("famine")
adjectives['famous']=adjInfo("famous")
adverbs['famously']="famously"
nouns['fan']=nounInfo("fan").addAttributes({"g":"x"})
adjectives['fanatic']=adjInfo("fanatic")
nouns['fanatic']=nounInfo("fanatic")
adjectives['fanatical']=adjInfo("fanatical")
adverbs['fanatically']="fanatically"
nouns['fanaticism']=nounInfo("fanaticism")
nouns['fancier']=nounInfo("fancier")
adjectives['fanciful']=adjInfo("fanciful")
adverbs['fancifully']="fancifully"
adjectives['fancy']=adjInfo("fancy")
nouns['fancy']=nounInfo("fancy")
nouns['fandango']=nounInfo("fandango")
nouns['fanfare']=nounInfo("fanfare")
nouns['fang']=nounInfo("fang")
nouns['fanlight']=nounInfo("fanlight")
nouns['fanny']=nounInfo("fanny")
nouns['fantan']=nounInfo("fantan")
nouns['fantasia']=nounInfo("fantasia")
adjectives['fantastic']=adjInfo("fantastic")
adverbs['fantastically']="fantastically"
nouns['fantasy']=nounInfo("fantasy")
adjectives['far']=adjInfo("far")
adverbs['far']="far"
nouns['farce']=nounInfo("farce")
adjectives['farcical']=adjInfo("farcical")
adverbs['farcically']="farcically"
nouns['fare']=nounInfo("fare")
nouns['farewell']=nounInfo("farewell")
adjectives['farinaceous']=adjInfo("farinaceous")
nouns['farm']=nounInfo("farm")
nouns['farmer']=nounInfo("farmer").addAttributes({"g":"x"})
nouns['farmhand']=nounInfo("farmhand")
nouns['farmhouse']=nounInfo("farmhouse")
nouns['farmstead']=nounInfo("farmstead")
nouns['farmyard']=nounInfo("farmyard")
nouns['farrago']=nounInfo("farrago")
nouns['farrier']=nounInfo("farrier")
nouns['farrow']=nounInfo("farrow")
nouns['fart']=nounInfo("fart")
nouns['farthing']=nounInfo("farthing")
nouns['fascia']=nounInfo("fascia")
adjectives['fascinating']=adjInfo("fascinating")
adverbs['fascinatingly']="fascinatingly"
nouns['fascination']=nounInfo("fascination")
nouns['fascism']=nounInfo("fascism")
adjectives['fascist']=adjInfo("fascist")
nouns['fascist']=nounInfo("fascist")
nouns['fashion']=nounInfo("fashion")
adjectives['fashionable']=adjInfo("fashionable")
adverbs['fashionably']="fashionably"
adjectives['fast']=adjInfo("fast")
adverbs['fast']="fast"
nouns['fast']=nounInfo("fast")
nouns['fastener']=nounInfo("fastener")
nouns['fastening']=nounInfo("fastening")
adjectives['fastidious']=adjInfo("fastidious")
adverbs['fastidiously']="fastidiously"
nouns['fastidiousness']=nounInfo("fastidiousness")
nouns['fastness']=nounInfo("fastness")
adjectives['fat']=adjInfo("fat")
nouns['fat']=nounInfo("fat")
adjectives['fatal']=adjInfo("fatal")
nouns['fatalism']=nounInfo("fatalism")
nouns['fatalist']=nounInfo("fatalist")
adjectives['fatalistic']=adjInfo("fatalistic")
nouns['fatality']=nounInfo("fatality")
adverbs['fatally']="fatally"
nouns['fate']=nounInfo("fate")
adjectives['fateful']=adjInfo("fateful")
adverbs['fatefully']="fatefully"
nouns['father']=nounInfo("father").addAttributes({"g":"m"})
nouns['fatherhood']=nounInfo("fatherhood")
nouns['fatherland']=nounInfo("fatherland")
adjectives['fatherless']=adjInfo("fatherless")
adjectives['fatherly']=adjInfo("fatherly")
nouns['fathom']=nounInfo("fathom")
adjectives['fathomless']=adjInfo("fathomless")
nouns['fatigue']=nounInfo("fatigue")
adjectives['fatless']=adjInfo("fatless")
nouns['fatness']=nounInfo("fatness")
adjectives['fattish']=adjInfo("fattish")
adjectives['fatty']=adjInfo("fatty")
nouns['fatuity']=nounInfo("fatuity")
adjectives['fatuous']=adjInfo("fatuous")
adverbs['fatuously']="fatuously"
nouns['fatuousness']=nounInfo("fatuousness")
nouns['faucet']=nounInfo("faucet")
nouns['faugh']=nounInfo("faugh")
nouns['fault']=nounInfo("fault")
adverbs['faultily']="faultily"
adjectives['faultless']=adjInfo("faultless")
adverbs['faultlessly']="faultlessly"
adjectives['faulty']=adjInfo("faulty")
nouns['faun']=nounInfo("faun")
nouns['fauna']=nounInfo("fauna")
nouns['favour']=nounInfo("favour")
adjectives['favourable']=adjInfo("favourable")
adverbs['favourably']="favourably"
adjectives['favourite']=adjInfo("favourite")
nouns['favourite']=nounInfo("favourite")
nouns['favouritism']=nounInfo("favouritism")
nouns['fawn']=nounInfo("fawn")
nouns['fealty']=nounInfo("fealty")
nouns['fear']=nounInfo("fear")
adjectives['fearful']=adjInfo("fearful")
adverbs['fearfully']="fearfully"
nouns['fearfulness']=nounInfo("fearfulness")
adjectives['fearless']=adjInfo("fearless")
adverbs['fearlessly']="fearlessly"
nouns['fearlessness']=nounInfo("fearlessness")
adjectives['fearsome']=adjInfo("fearsome")
adverbs['fearsomely']="fearsomely"
nouns['feasibility']=nounInfo("feasibility")
adjectives['feasible']=adjInfo("feasible")
nouns['feast']=nounInfo("feast")
nouns['feat']=nounInfo("feat")
nouns['feather']=nounInfo("feather")
nouns['featherweight']=nounInfo("featherweight")
adjectives['feathery']=adjInfo("feathery")
nouns['feature']=nounInfo("feature")
adjectives['featureless']=adjInfo("featureless")
adjectives['febrile']=adjInfo("febrile")
adjectives['feckless']=adjInfo("feckless")
adverbs['fecklessly']="fecklessly"
nouns['fecklessness']=nounInfo("fecklessness")
adjectives['fecund']=adjInfo("fecund")
nouns['fecundity']=nounInfo("fecundity")
adjectives['federal']=adjInfo("federal")
nouns['federalism']=nounInfo("federalism")
nouns['federalist']=nounInfo("federalist")
adverbs['federally']="federally"
nouns['federation']=nounInfo("federation")
nouns['fee']=nounInfo("fee")
adjectives['feeble']=adjInfo("feeble")
nouns['feebleness']=nounInfo("feebleness")
adverbs['feebly']="feebly"
nouns['feed']=nounInfo("feed")
nouns['feedback']=nounInfo("feedback")
nouns['feeder']=nounInfo("feeder")
nouns['feel']=nounInfo("feel")
nouns['feeler']=nounInfo("feeler")
adjectives['feeling']=adjInfo("feeling")
nouns['feeling']=nounInfo("feeling")
adverbs['feelingly']="feelingly"
nouns['feint']=nounInfo("feint")
nouns['feldspar']=nounInfo("feldspar")
nouns['felicitation']=nounInfo("felicitation")
adjectives['felicitous']=adjInfo("felicitous")
adverbs['felicitously']="felicitously"
nouns['felicity']=nounInfo("felicity")
adjectives['feline']=adjInfo("feline")
adjectives['fell']=adjInfo("fell")
nouns['fellah']=nounInfo("fellah")
nouns['fellow']=nounInfo("fellow")
nouns['fellowship']=nounInfo("fellowship")
nouns['felon']=nounInfo("felon")
adjectives['felonious']=adjInfo("felonious")
nouns['felony']=nounInfo("felony")
nouns['felspar']=nounInfo("felspar")
nouns['felt']=nounInfo("felt")
nouns['felucca']=nounInfo("felucca")
adjectives['female']=adjInfo("female")
nouns['female']=nounInfo("female").addAttributes({"g":"f"})
adjectives['feminine']=adjInfo("feminine")
nouns['femininity']=nounInfo("femininity")
nouns['feminism']=nounInfo("feminism")
nouns['feminist']=nounInfo("feminist")
nouns['femur']=nounInfo("femur")
nouns['fen']=nounInfo("fen")
nouns['fence']=nounInfo("fence")
nouns['fencer']=nounInfo("fencer")
nouns['fencing']=nounInfo("fencing")
nouns['fender']=nounInfo("fender")
nouns['fennel']=nounInfo("fennel")
nouns['feoff']=nounInfo("feoff")
adjectives['feral']=adjInfo("feral")
nouns['ferment']=nounInfo("ferment")
nouns['fermentation']=nounInfo("fermentation")
nouns['fern']=nounInfo("fern")
adjectives['ferny']=adjInfo("ferny")
adjectives['ferocious']=adjInfo("ferocious")
adverbs['ferociously']="ferociously"
nouns['ferocity']=nounInfo("ferocity")
nouns['ferret']=nounInfo("ferret")
nouns['ferroconcrete']=nounInfo("ferroconcrete")
adjectives['ferrous']=adjInfo("ferrous")
nouns['ferrule']=nounInfo("ferrule")
nouns['ferry']=nounInfo("ferry")
adjectives['fertile']=adjInfo("fertile")
nouns['fertility']=nounInfo("fertility")
nouns['fertilization']=nounInfo("fertilization")
nouns['fertilizer']=nounInfo("fertilizer")
nouns['ferule']=nounInfo("ferule")
nouns['fervency']=nounInfo("fervency")
adjectives['fervent']=adjInfo("fervent")
adverbs['fervently']="fervently"
adjectives['fervid']=adjInfo("fervid")
adverbs['fervidly']="fervidly"
nouns['fervour']=nounInfo("fervour")
adjectives['festal']=adjInfo("festal")
nouns['festival']=nounInfo("festival")
adjectives['festive']=adjInfo("festive")
nouns['festivity']=nounInfo("festivity")
nouns['festoon']=nounInfo("festoon")
adjectives['fetal']=adjInfo("fetal")
adjectives['fetching']=adjInfo("fetching")
adjectives['fetid']=adjInfo("fetid")
nouns['fetish']=nounInfo("fetish")
nouns['fetlock']=nounInfo("fetlock")
nouns['fetter']=nounInfo("fetter")
nouns['fettle']=nounInfo("fettle")
nouns['feud']=nounInfo("feud")
adjectives['feudal']=adjInfo("feudal")
nouns['feudalism']=nounInfo("feudalism")
adjectives['feudatory']=adjInfo("feudatory")
nouns['feudatory']=nounInfo("feudatory")
nouns['fever']=nounInfo("fever")
adjectives['fevered']=adjInfo("fevered")
adjectives['feverish']=adjInfo("feverish")
adverbs['feverishly']="feverishly"
adjectives['few']=adjInfo("few")
nouns['fewness']=nounInfo("fewness")
adjectives['fey']=adjInfo("fey")
nouns['fez']=nounInfo("fez")
nouns['fiasco']=nounInfo("fiasco")
nouns['fiat']=nounInfo("fiat")
nouns['fib']=nounInfo("fib")
nouns['fibber']=nounInfo("fibber")
nouns['fibbing']=nounInfo("fibbing")
nouns['fibre']=nounInfo("fibre")
nouns['fibreboard']=nounInfo("fibreboard")
nouns['fibreglass']=nounInfo("fibreglass")
adjectives['fibrous']=adjInfo("fibrous")
nouns['fibula']=nounInfo("fibula")
adjectives['fickle']=adjInfo("fickle")
nouns['fickleness']=nounInfo("fickleness")
nouns['fiction']=nounInfo("fiction")
adjectives['fictitious']=adjInfo("fictitious")
nouns['fiddle']=nounInfo("fiddle")
nouns['fiddler']=nounInfo("fiddler")
adjectives['fiddling']=adjInfo("fiddling")
nouns['fidelity']=nounInfo("fidelity")
nouns['fidget']=nounInfo("fidget")
adjectives['fidgety']=adjInfo("fidgety")
nouns['fie']=nounInfo("fie")
nouns['fief']=nounInfo("fief")
nouns['field']=nounInfo("field")
nouns['fielder']=nounInfo("fielder")
nouns['fieldsman']=nounInfo("fieldsman")
nouns['fieldwork']=nounInfo("fieldwork")
nouns['fiend']=nounInfo("fiend")
adjectives['fiendish']=adjInfo("fiendish")
adverbs['fiendishly']="fiendishly"
adjectives['fierce']=adjInfo("fierce")
adverbs['fiercely']="fiercely"
nouns['fierceness']=nounInfo("fierceness")
adverbs['fierily']="fierily"
nouns['fieriness']=nounInfo("fieriness")
adjectives['fiery']=adjInfo("fiery")
nouns['fiesta']=nounInfo("fiesta")
nouns['fife']=nounInfo("fife")
nouns['fifteen']=nounInfo("fifteen")
adjectives['fifteenth']=adjInfo("fifteenth")
nouns['fifteenth']=nounInfo("fifteenth")
adjectives['fifth']=adjInfo("fifth")
nouns['fifth']=nounInfo("fifth")
adverbs['fifthly']="fifthly"
adjectives['fiftieth']=adjInfo("fiftieth")
nouns['fiftieth']=nounInfo("fiftieth")
nouns['fifty']=nounInfo("fifty")
nouns['fig']=nounInfo("fig")
nouns['fight']=nounInfo("fight")
nouns['fighter']=nounInfo("fighter")
nouns['fighting']=nounInfo("fighting")
nouns['figment']=nounInfo("figment")
adjectives['figurative']=adjInfo("figurative")
adverbs['figuratively']="figuratively"
nouns['figure']=nounInfo("figure")
adjectives['figured']=adjInfo("figured")
nouns['filament']=nounInfo("filament")
nouns['filature']=nounInfo("filature")
nouns['filbert']=nounInfo("filbert")
nouns['file']=nounInfo("file")
adjectives['filial']=adjInfo("filial")
nouns['filibuster']=nounInfo("filibuster")
nouns['filigree']=nounInfo("filigree")
nouns['filings']=nounInfo("filings")
nouns['fill']=nounInfo("fill")
nouns['fillet']=nounInfo("fillet")
nouns['filling']=nounInfo("filling")
nouns['fillip']=nounInfo("fillip")
nouns['filly']=nounInfo("filly")
nouns['film']=nounInfo("film")
adjectives['filmable']=adjInfo("filmable")
adjectives['filmy']=adjInfo("filmy")
nouns['filter']=nounInfo("filter")
adjectives['filtertipped']=adjInfo("filtertipped")
nouns['filth']=nounInfo("filth")
adverbs['filthily']="filthily"
nouns['filthiness']=nounInfo("filthiness")
adjectives['filthy']=adjInfo("filthy")
nouns['filtrate']=nounInfo("filtrate")
nouns['filtration']=nounInfo("filtration")
nouns['fin']=nounInfo("fin")
adjectives['finable']=adjInfo("finable")
adjectives['final']=adjInfo("final")
nouns['final']=nounInfo("final")
nouns['finale']=nounInfo("finale")
nouns['finalist']=nounInfo("finalist")
nouns['finality']=nounInfo("finality")
adverbs['finally']="finally"
nouns['finance']=nounInfo("finance")
adjectives['financial']=adjInfo("financial")
adverbs['financially']="financially"
nouns['financier']=nounInfo("financier")
nouns['finch']=nounInfo("finch")
nouns['find']=nounInfo("find")
nouns['finder']=nounInfo("finder")
nouns['finding']=nounInfo("finding")
adjectives['fine']=adjInfo("fine")
adverbs['fine']="fine"
nouns['fine']=nounInfo("fine")
adjectives['fineable']=adjInfo("fineable")
adverbs['finely']="finely"
nouns['fineness']=nounInfo("fineness")
nouns['finery']=nounInfo("finery")
nouns['finesse']=nounInfo("finesse")
nouns['finger']=nounInfo("finger")
nouns['fingerboard']=nounInfo("fingerboard")
nouns['fingerprint']=nounInfo("fingerprint")
nouns['fingerstall']=nounInfo("fingerstall")
nouns['fingertip']=nounInfo("fingertip")
adjectives['finical']=adjInfo("finical")
adjectives['finicky']=adjInfo("finicky")
nouns['finis']=nounInfo("finis")
nouns['finish']=nounInfo("finish")
adjectives['finite']=adjInfo("finite")
nouns['finnan']=nounInfo("finnan")
nouns['fiord']=nounInfo("fiord")
nouns['fir']=nounInfo("fir")
nouns['fire']=nounInfo("fire")
nouns['firearm']=nounInfo("firearm")
nouns['fireball']=nounInfo("fireball")
nouns['firebird']=nounInfo("firebird")
nouns['firebox']=nounInfo("firebox")
nouns['firebrand']=nounInfo("firebrand")
nouns['firebreak']=nounInfo("firebreak")
nouns['firebrick']=nounInfo("firebrick")
nouns['fireclay']=nounInfo("fireclay")
nouns['firedamp']=nounInfo("firedamp")
nouns['firedog']=nounInfo("firedog")
nouns['firefly']=nounInfo("firefly")
nouns['fireguard']=nounInfo("fireguard")
nouns['firelight']=nounInfo("firelight")
nouns['firelighter']=nounInfo("firelighter")
nouns['fireman']=nounInfo("fireman")
nouns['fireplace']=nounInfo("fireplace")
adjectives['fireproof']=adjInfo("fireproof")
nouns['fireside']=nounInfo("fireside")
nouns['firestone']=nounInfo("firestone")
nouns['firewood']=nounInfo("firewood")
nouns['firework']=nounInfo("firework")
nouns['firkin']=nounInfo("firkin")
adjectives['firm']=adjInfo("firm")
adverbs['firm']="firm"
nouns['firm']=nounInfo("firm")
nouns['firmament']=nounInfo("firmament")
adverbs['firmly']="firmly"
nouns['firmness']=nounInfo("firmness")
adjectives['first']=adjInfo("first")
adverbs['first']="first"
nouns['first']=nounInfo("first")
adjectives['firstborn']=adjInfo("firstborn")
nouns['firstborn']=nounInfo("firstborn")
adverbs['firstly']="firstly"
nouns['firth']=nounInfo("firth")
adjectives['fiscal']=adjInfo("fiscal")
nouns['fish']=nounInfo("fish")
nouns['fishball']=nounInfo("fishball")
nouns['fishbone']=nounInfo("fishbone")
nouns['fishcake']=nounInfo("fishcake")
nouns['fisher']=nounInfo("fisher")
nouns['fisherman']=nounInfo("fisherman")
nouns['fishery']=nounInfo("fishery")
nouns['fishing']=nounInfo("fishing")
nouns['fishmonger']=nounInfo("fishmonger").addAttributes({"g":"x"})
nouns['fishpaste']=nounInfo("fishpaste")
nouns['fishplate']=nounInfo("fishplate")
nouns['fishwife']=nounInfo("fishwife")
adjectives['fishy']=adjInfo("fishy")
adjectives['fissile']=adjInfo("fissile")
nouns['fission']=nounInfo("fission")
adjectives['fissionable']=adjInfo("fissionable")
adjectives['fissiparous']=adjInfo("fissiparous")
nouns['fissure']=nounInfo("fissure")
nouns['fist']=nounInfo("fist")
nouns['fisticuffs']=nounInfo("fisticuffs")
nouns['fistula']=nounInfo("fistula")
adjectives['fit']=adjInfo("fit")
nouns['fit']=nounInfo("fit")
adjectives['fitful']=adjInfo("fitful")
adverbs['fitfully']="fitfully"
adverbs['fitly']="fitly"
nouns['fitment']=nounInfo("fitment")
nouns['fitness']=nounInfo("fitness")
nouns['fitter']=nounInfo("fitter")
adjectives['fitting']=adjInfo("fitting")
nouns['fitting']=nounInfo("fitting")
nouns['five']=nounInfo("five")
adjectives['fivefold']=adjInfo("fivefold")
nouns['fivepence']=nounInfo("fivepence")
adjectives['fivepenny']=adjInfo("fivepenny")
nouns['fiver']=nounInfo("fiver")
nouns['fives']=nounInfo("fives")
nouns['fix']=nounInfo("fix")
nouns['fixation']=nounInfo("fixation")
nouns['fixative']=nounInfo("fixative")
adjectives['fixed']=adjInfo("fixed")
adverbs['fixedly']="fixedly"
nouns['fixture']=nounInfo("fixture")
nouns['fizz']=nounInfo("fizz")
adjectives['fizzy']=adjInfo("fizzy")
nouns['fjord']=nounInfo("fjord")
adverbs['flabbily']="flabbily"
nouns['flabbiness']=nounInfo("flabbiness")
adjectives['flabby']=adjInfo("flabby")
adjectives['flaccid']=adjInfo("flaccid")
nouns['flaccidity']=nounInfo("flaccidity")
nouns['flag']=nounInfo("flag")
nouns['flagellant']=nounInfo("flagellant")
nouns['flagellation']=nounInfo("flagellation")
nouns['flageolet']=nounInfo("flageolet")
nouns['flagon']=nounInfo("flagon")
nouns['flagpole']=nounInfo("flagpole")
adjectives['flagrant']=adjInfo("flagrant")
adverbs['flagrantly']="flagrantly"
nouns['flagship']=nounInfo("flagship")
nouns['flagstaff']=nounInfo("flagstaff")
nouns['flagstone']=nounInfo("flagstone")
nouns['flail']=nounInfo("flail")
nouns['flair']=nounInfo("flair")
nouns['flak']=nounInfo("flak")
nouns['flake']=nounInfo("flake")
nouns['flakiness']=nounInfo("flakiness")
adjectives['flaky']=adjInfo("flaky")
nouns['flambeau']=nounInfo("flambeau")
nouns['flamboyance']=nounInfo("flamboyance")
adjectives['flamboyant']=adjInfo("flamboyant")
adverbs['flamboyantly']="flamboyantly"
nouns['flame']=nounInfo("flame")
nouns['flamethrower']=nounInfo("flamethrower")
adjectives['flaming']=adjInfo("flaming")
nouns['flamingo']=nounInfo("flamingo")
adjectives['flammable']=adjInfo("flammable")
nouns['flan']=nounInfo("flan")
nouns['flange']=nounInfo("flange")
nouns['flank']=nounInfo("flank")
nouns['flannel']=nounInfo("flannel")
nouns['flannelette']=nounInfo("flannelette")
nouns['flap']=nounInfo("flap")
nouns['flapjack']=nounInfo("flapjack")
nouns['flapper']=nounInfo("flapper")
nouns['flare']=nounInfo("flare")
nouns['flash']=nounInfo("flash")
nouns['flashback']=nounInfo("flashback")
nouns['flashbulb']=nounInfo("flashbulb")
nouns['flashgun']=nounInfo("flashgun")
adverbs['flashily']="flashily"
nouns['flashlight']=nounInfo("flashlight")
nouns['flashpoint']=nounInfo("flashpoint")
adjectives['flashy']=adjInfo("flashy")
nouns['flask']=nounInfo("flask")
adjectives['flat']=adjInfo("flat")
adverbs['flat']="flat"
nouns['flat']=nounInfo("flat")
nouns['flatfish']=nounInfo("flatfish")
nouns['flatlet']=nounInfo("flatlet")
adverbs['flatly']="flatly"
nouns['flatness']=nounInfo("flatness")
nouns['flatterer']=nounInfo("flatterer")
nouns['flattery']=nounInfo("flattery")
nouns['flattop']=nounInfo("flattop")
nouns['flatulence']=nounInfo("flatulence")
nouns['flautist']=nounInfo("flautist")
nouns['flavour']=nounInfo("flavour")
nouns['flavouring']=nounInfo("flavouring")
adjectives['flavourless']=adjInfo("flavourless")
nouns['flaw']=nounInfo("flaw")
adjectives['flawed']=adjInfo("flawed")
adjectives['flawless']=adjInfo("flawless")
adverbs['flawlessly']="flawlessly"
nouns['flax']=nounInfo("flax")
adjectives['flaxen']=adjInfo("flaxen")
nouns['flea']=nounInfo("flea")
nouns['fleapit']=nounInfo("fleapit")
nouns['fleck']=nounInfo("fleck")
adjectives['fledged']=adjInfo("fledged")
nouns['fledgeling']=nounInfo("fledgeling")
nouns['fledgling']=nounInfo("fledgling")
nouns['fleece']=nounInfo("fleece")
adjectives['fleecy']=adjInfo("fleecy")
adjectives['fleet']=adjInfo("fleet")
nouns['fleet']=nounInfo("fleet")
adjectives['fleeting']=adjInfo("fleeting")
adverbs['fleetly']="fleetly"
nouns['fleetness']=nounInfo("fleetness")
nouns['flesh']=nounInfo("flesh")
nouns['fleshings']=nounInfo("fleshings")
adjectives['fleshly']=adjInfo("fleshly")
adjectives['fleshy']=adjInfo("fleshy")
nouns['flex']=nounInfo("flex")
nouns['flexibility']=nounInfo("flexibility")
adjectives['flexible']=adjInfo("flexible")
adverbs['flexibly']="flexibly"
nouns['flibbertigibbet']=nounInfo("flibbertigibbet")
nouns['flick']=nounInfo("flick")
nouns['flicker']=nounInfo("flicker")
nouns['flier']=nounInfo("flier")
nouns['flight']=nounInfo("flight")
adjectives['flightless']=adjInfo("flightless")
adjectives['flighty']=adjInfo("flighty")
adverbs['flimsily']="flimsily"
nouns['flimsiness']=nounInfo("flimsiness")
adjectives['flimsy']=adjInfo("flimsy")
nouns['flimsy']=nounInfo("flimsy")
nouns['fling']=nounInfo("fling")
nouns['flint']=nounInfo("flint")
nouns['flintstone']=nounInfo("flintstone")
adjectives['flinty']=adjInfo("flinty")
adjectives['flip']=adjInfo("flip")
nouns['flip']=nounInfo("flip")
nouns['flippancy']=nounInfo("flippancy")
adjectives['flippant']=adjInfo("flippant")
adverbs['flippantly']="flippantly"
nouns['flipper']=nounInfo("flipper")
nouns['flirt']=nounInfo("flirt")
nouns['flirtation']=nounInfo("flirtation")
adjectives['flirtatious']=adjInfo("flirtatious")
nouns['flit']=nounInfo("flit")
nouns['float']=nounInfo("float")
nouns['floatation']=nounInfo("floatation")
adjectives['floating']=adjInfo("floating")
nouns['flock']=nounInfo("flock")
nouns['floe']=nounInfo("floe")
nouns['flogging']=nounInfo("flogging")
nouns['flood']=nounInfo("flood")
nouns['floodlight']=nounInfo("floodlight")
nouns['floor']=nounInfo("floor")
nouns['floorboard']=nounInfo("floorboard")
nouns['flooring']=nounInfo("flooring")
nouns['floozie']=nounInfo("floozie")
nouns['floozy']=nounInfo("floozy")
adverbs['flop']="flop"
nouns['flop']=nounInfo("flop")
adjectives['floppy']=adjInfo("floppy")
nouns['flora']=nounInfo("flora")
adjectives['floral']=adjInfo("floral")
nouns['floriculture']=nounInfo("floriculture")
adjectives['florid']=adjInfo("florid")
adverbs['floridly']="floridly"
nouns['florin']=nounInfo("florin")
nouns['florist']=nounInfo("florist")
nouns['floss']=nounInfo("floss")
nouns['flotation']=nounInfo("flotation")
nouns['flotilla']=nounInfo("flotilla")
nouns['flotsam']=nounInfo("flotsam")
nouns['flounce']=nounInfo("flounce")
nouns['flounder']=nounInfo("flounder")
nouns['flour']=nounInfo("flour")
nouns['flourish']=nounInfo("flourish")
adjectives['floury']=adjInfo("floury")
nouns['flow']=nounInfo("flow")
nouns['flower']=nounInfo("flower")
nouns['flowerbed']=nounInfo("flowerbed")
adjectives['flowered']=adjInfo("flowered")
adjectives['flowerless']=adjInfo("flowerless")
nouns['flowerpot']=nounInfo("flowerpot")
adjectives['flowery']=adjInfo("flowery")
nouns['flu']=nounInfo("flu")
nouns['fluctuation']=nounInfo("fluctuation")
nouns['flue']=nounInfo("flue")
nouns['fluency']=nounInfo("fluency")
adjectives['fluent']=adjInfo("fluent")
adverbs['fluently']="fluently"
nouns['fluff']=nounInfo("fluff")
adjectives['fluffy']=adjInfo("fluffy")
adjectives['fluid']=adjInfo("fluid")
nouns['fluid']=nounInfo("fluid")
nouns['fluidity']=nounInfo("fluidity")
nouns['fluke']=nounInfo("fluke")
nouns['flume']=nounInfo("flume")
nouns['flunkey']=nounInfo("flunkey")
nouns['flunky']=nounInfo("flunky")
nouns['fluorescence']=nounInfo("fluorescence")
adjectives['fluorescent']=adjInfo("fluorescent")
nouns['fluoridation']=nounInfo("fluoridation")
nouns['fluoride']=nounInfo("fluoride")
nouns['fluoridization']=nounInfo("fluoridization")
nouns['fluorine']=nounInfo("fluorine")
nouns['flurry']=nounInfo("flurry")
adjectives['flush']=adjInfo("flush")
nouns['flush']=nounInfo("flush")
nouns['fluster']=nounInfo("fluster")
nouns['flute']=nounInfo("flute")
nouns['fluting']=nounInfo("fluting")
nouns['flutist']=nounInfo("flutist")
nouns['flutter']=nounInfo("flutter")
adjectives['fluvial']=adjInfo("fluvial")
nouns['flux']=nounInfo("flux")
adjectives['fly']=adjInfo("fly")
nouns['fly']=nounInfo("fly")
nouns['flycatcher']=nounInfo("flycatcher")
nouns['flyer']=nounInfo("flyer")
adjectives['flying']=adjInfo("flying")
nouns['flyleaf']=nounInfo("flyleaf")
nouns['flyover']=nounInfo("flyover")
nouns['flypast']=nounInfo("flypast")
nouns['flyweight']=nounInfo("flyweight")
nouns['flywheel']=nounInfo("flywheel")
nouns['foal']=nounInfo("foal")
nouns['foam']=nounInfo("foam")
adjectives['foamy']=adjInfo("foamy")
adjectives['focal']=adjInfo("focal")
nouns['focus']=nounInfo("focus")
nouns['fodder']=nounInfo("fodder")
nouns['foe']=nounInfo("foe")
adjectives['foetal']=adjInfo("foetal")
nouns['foetus']=nounInfo("foetus")
nouns['fog']=nounInfo("fog")
nouns['fogbank']=nounInfo("fogbank")
adjectives['fogbound']=adjInfo("fogbound")
nouns['fogey']=nounInfo("fogey")
adjectives['foggy']=adjInfo("foggy")
nouns['foghorn']=nounInfo("foghorn")
nouns['foglamp']=nounInfo("foglamp")
nouns['fogsignal']=nounInfo("fogsignal")
nouns['foible']=nounInfo("foible")
nouns['foil']=nounInfo("foil")
nouns['fold']=nounInfo("fold")
nouns['folder']=nounInfo("folder")
nouns['foliage']=nounInfo("foliage")
nouns['folio']=nounInfo("folio")
nouns['folk']=nounInfo("folk")
nouns['folklore']=nounInfo("folklore")
adjectives['folksy']=adjInfo("folksy")
nouns['folktale']=nounInfo("folktale")
nouns['follower']=nounInfo("follower")
adjectives['following']=adjInfo("following")
nouns['following']=nounInfo("following")
nouns['folly']=nounInfo("folly")
nouns['fomentation']=nounInfo("fomentation")
adjectives['fond']=adjInfo("fond")
nouns['fondant']=nounInfo("fondant")
adverbs['fondly']="fondly"
nouns['fondness']=nounInfo("fondness")
nouns['font']=nounInfo("font")
nouns['food']=nounInfo("food")
adjectives['foodless']=adjInfo("foodless")
nouns['fool']=nounInfo("fool")
nouns['foolery']=nounInfo("foolery")
adverbs['foolhardily']="foolhardily"
nouns['foolhardiness']=nounInfo("foolhardiness")
adjectives['foolhardy']=adjInfo("foolhardy")
adjectives['foolish']=adjInfo("foolish")
adverbs['foolishly']="foolishly"
nouns['foolishness']=nounInfo("foolishness")
adjectives['foolproof']=adjInfo("foolproof")
nouns['foolscap']=nounInfo("foolscap")
nouns['foot']=nounInfo("foot")
nouns['footage']=nounInfo("footage")
nouns['football']=nounInfo("football")
nouns['footboard']=nounInfo("footboard")
nouns['footbridge']=nounInfo("footbridge")
adjectives['footed']=adjInfo("footed")
nouns['footer']=nounInfo("footer")
nouns['footfall']=nounInfo("footfall")
nouns['footfault']=nounInfo("footfault")
nouns['foothold']=nounInfo("foothold")
nouns['footing']=nounInfo("footing")
nouns['footlights']=nounInfo("footlights")
adjectives['footling']=adjInfo("footling")
adjectives['footloose']=adjInfo("footloose")
nouns['footman']=nounInfo("footman")
nouns['footmark']=nounInfo("footmark")
nouns['footnote']=nounInfo("footnote")
nouns['footpath']=nounInfo("footpath")
nouns['footplate']=nounInfo("footplate")
nouns['footprint']=nounInfo("footprint")
adjectives['footsore']=adjInfo("footsore")
nouns['footstep']=nounInfo("footstep")
nouns['footstool']=nounInfo("footstool")
adjectives['footsure']=adjInfo("footsure")
nouns['footwear']=nounInfo("footwear")
nouns['footwork']=nounInfo("footwork")
nouns['fop']=nounInfo("fop")
adjectives['foppish']=adjInfo("foppish")
prepositions['for']=P("for")
nouns['forage']=nounInfo("forage")
nouns['foray']=nounInfo("foray")
nouns['forbear']=nounInfo("forbear")
nouns['forbearance']=nounInfo("forbearance")
adjectives['forbidding']=adjInfo("forbidding")
adverbs['forbiddingly']="forbiddingly"
nouns['force']=nounInfo("force")
adjectives['forceful']=adjInfo("forceful")
adverbs['forcefully']="forcefully"
nouns['forcefulness']=nounInfo("forcefulness")
nouns['forcemeat']=nounInfo("forcemeat")
nouns['forcep']=nounInfo("forcep")
adjectives['forcible']=adjInfo("forcible")
adverbs['forcibly']="forcibly"
nouns['ford']=nounInfo("ford")
adjectives['fordable']=adjInfo("fordable")
adjectives['fore']=adjInfo("fore")
adverbs['fore']="fore"
nouns['fore']=nounInfo("fore")
nouns['forearm']=nounInfo("forearm")
nouns['foreboding']=nounInfo("foreboding")
nouns['forecast']=nounInfo("forecast")
nouns['forecastle']=nounInfo("forecastle")
nouns['foreclosure']=nounInfo("foreclosure")
nouns['forecourt']=nounInfo("forecourt")
nouns['forefather']=nounInfo("forefather")
nouns['forefinger']=nounInfo("forefinger")
nouns['forefoot']=nounInfo("forefoot")
nouns['forefront']=nounInfo("forefront")
adjectives['foregoing']=adjInfo("foregoing")
nouns['foreground']=nounInfo("foreground")
adjectives['forehand']=adjInfo("forehand")
nouns['forehead']=nounInfo("forehead")
adjectives['foreign']=adjInfo("foreign")
nouns['foreigner']=nounInfo("foreigner").addAttributes({"g":"x"})
nouns['foreknowledge']=nounInfo("foreknowledge")
nouns['foreland']=nounInfo("foreland")
nouns['foreleg']=nounInfo("foreleg")
nouns['forelock']=nounInfo("forelock")
nouns['foreman']=nounInfo("foreman")
nouns['foremast']=nounInfo("foremast")
adjectives['foremost']=adjInfo("foremost")
adverbs['foremost']="foremost"
nouns['forename']=nounInfo("forename")
nouns['forenoon']=nounInfo("forenoon")
adjectives['forensic']=adjInfo("forensic")
nouns['forerunner']=nounInfo("forerunner")
nouns['foresail']=nounInfo("foresail")
adjectives['foreseeable']=adjInfo("foreseeable")
nouns['foreshore']=nounInfo("foreshore")
nouns['foresight']=nounInfo("foresight")
nouns['foreskin']=nounInfo("foreskin")
nouns['forest']=nounInfo("forest")
nouns['forester']=nounInfo("forester")
nouns['forestry']=nounInfo("forestry")
nouns['foretaste']=nounInfo("foretaste")
nouns['forethought']=nounInfo("forethought")
nouns['foretop']=nounInfo("foretop")
adverbs['forever']="forever"
nouns['forewoman']=nounInfo("forewoman")
nouns['foreword']=nounInfo("foreword")
nouns['forfeit']=nounInfo("forfeit")
nouns['forfeiture']=nounInfo("forfeiture")
nouns['forge']=nounInfo("forge")
nouns['forger']=nounInfo("forger")
nouns['forgery']=nounInfo("forgery")
adjectives['forgetful']=adjInfo("forgetful")
adverbs['forgetfully']="forgetfully"
nouns['forgetfulness']=nounInfo("forgetfulness")
nouns['forging']=nounInfo("forging")
adjectives['forgivable']=adjInfo("forgivable")
nouns['forgiveness']=nounInfo("forgiveness")
adjectives['forgiving']=adjInfo("forgiving")
adverbs['forgivingly']="forgivingly"
nouns['fork']=nounInfo("fork")
adjectives['forked']=adjInfo("forked")
adjectives['forlorn']=adjInfo("forlorn")
adverbs['forlornly']="forlornly"
nouns['forlornness']=nounInfo("forlornness")
nouns['form']=nounInfo("form")
adjectives['formal']=adjInfo("formal")
nouns['formaldehyde']=nounInfo("formaldehyde")
nouns['formalin']=nounInfo("formalin")
nouns['formalism']=nounInfo("formalism")
nouns['formality']=nounInfo("formality")
adverbs['formally']="formally"
nouns['format']=nounInfo("format")
nouns['formation']=nounInfo("formation")
adjectives['formative']=adjInfo("formative")
adjectives['former']=adjInfo("former")
adverbs['formerly']="formerly"
adjectives['formic']=adjInfo("formic")
adjectives['formidable']=adjInfo("formidable")
adverbs['formidably']="formidably"
adjectives['formless']=adjInfo("formless")
adverbs['formlessly']="formlessly"
nouns['formula']=nounInfo("formula")
nouns['formulation']=nounInfo("formulation")
nouns['fornication']=nounInfo("fornication")
adverbs['forrader']="forrader"
adverbs['forsooth']="forsooth"
nouns['forsythia']=nounInfo("forsythia")
nouns['fort']=nounInfo("fort")
adjectives['forte']=adjInfo("forte")
adverbs['forte']="forte"
nouns['forte']=nounInfo("forte")
adverbs['forth']="forth"
adjectives['forthcoming']=adjInfo("forthcoming")
adjectives['forthright']=adjInfo("forthright")
adverbs['forthwith']="forthwith"
adjectives['fortieth']=adjInfo("fortieth")
nouns['fortieth']=nounInfo("fortieth")
nouns['fortification']=nounInfo("fortification")
adjectives['fortissimo']=adjInfo("fortissimo")
adverbs['fortissimo']="fortissimo"
nouns['fortitude']=nounInfo("fortitude")
nouns['fortnight']=nounInfo("fortnight")
adjectives['fortnightly']=adjInfo("fortnightly")
adverbs['fortnightly']="fortnightly"
nouns['fortress']=nounInfo("fortress")
adjectives['fortuitous']=adjInfo("fortuitous")
adverbs['fortuitously']="fortuitously"
adjectives['fortunate']=adjInfo("fortunate")
adverbs['fortunately']="fortunately"
nouns['fortune']=nounInfo("fortune")
nouns['forty']=nounInfo("forty")
nouns['forum']=nounInfo("forum")
adjectives['forward']=adjInfo("forward")
adverbs['forward']="forward"
nouns['forward']=nounInfo("forward")
nouns['forwardness']=nounInfo("forwardness")
adverbs['forwards']="forwards"
nouns['fosse']=nounInfo("fosse")
nouns['fossil']=nounInfo("fossil")
nouns['fossilization']=nounInfo("fossilization")
adjectives['foul']=adjInfo("foul")
nouns['foul']=nounInfo("foul")
adverbs['foully']="foully"
nouns['foulness']=nounInfo("foulness")
nouns['foundation']=nounInfo("foundation")
nouns['founder']=nounInfo("founder")
nouns['foundling']=nounInfo("foundling")
nouns['foundress']=nounInfo("foundress")
nouns['foundry']=nounInfo("foundry")
nouns['fount']=nounInfo("fount")
nouns['fountain']=nounInfo("fountain")
nouns['four']=nounInfo("four")
adjectives['fourfold']=adjInfo("fourfold")
adverbs['fourfold']="fourfold"
nouns['fourpence']=nounInfo("fourpence")
adjectives['fourpenny']=adjInfo("fourpenny")
adjectives['fourscore']=adjInfo("fourscore")
nouns['fourscore']=nounInfo("fourscore")
nouns['foursome']=nounInfo("foursome")
adjectives['foursquare']=adjInfo("foursquare")
nouns['fourteen']=nounInfo("fourteen")
adjectives['fourteenth']=adjInfo("fourteenth")
nouns['fourteenth']=nounInfo("fourteenth")
adjectives['fourth']=adjInfo("fourth")
nouns['fourth']=nounInfo("fourth")
adverbs['fourthly']="fourthly"
nouns['fowl']=nounInfo("fowl")
nouns['fowler']=nounInfo("fowler")
nouns['fowlingpiece']=nounInfo("fowlingpiece")
nouns['fowlpest']=nounInfo("fowlpest")
nouns['fox']=nounInfo("fox")
nouns['foxglove']=nounInfo("foxglove")
nouns['foxhole']=nounInfo("foxhole")
nouns['foxhound']=nounInfo("foxhound")
nouns['foxhunt']=nounInfo("foxhunt")
nouns['foxtrot']=nounInfo("foxtrot")
adjectives['foxy']=adjInfo("foxy")
nouns['foyer']=nounInfo("foyer")
nouns['fracas']=nounInfo("fracas")
nouns['fraction']=nounInfo("fraction")
adjectives['fractional']=adjInfo("fractional")
adjectives['fractious']=adjInfo("fractious")
adverbs['fractiously']="fractiously"
nouns['fractiousness']=nounInfo("fractiousness")
nouns['fracture']=nounInfo("fracture")
adjectives['fragile']=adjInfo("fragile")
nouns['fragility']=nounInfo("fragility")
nouns['fragment']=nounInfo("fragment")
adjectives['fragmentary']=adjInfo("fragmentary")
nouns['fragmentation']=nounInfo("fragmentation")
nouns['fragrance']=nounInfo("fragrance")
adjectives['fragrant']=adjInfo("fragrant")
adjectives['frail']=adjInfo("frail")
nouns['frailty']=nounInfo("frailty")
nouns['frame']=nounInfo("frame")
nouns['framework']=nounInfo("framework")
nouns['franc']=nounInfo("franc")
nouns['franchise']=nounInfo("franchise")
adjectives['frank']=adjInfo("frank")
nouns['frankfurter']=nounInfo("frankfurter")
nouns['frankincense']=nounInfo("frankincense")
nouns['franklin']=nounInfo("franklin")
adverbs['frankly']="frankly"
nouns['frankness']=nounInfo("frankness")
adjectives['frantic']=adjInfo("frantic")
adverbs['frantically']="frantically"
adjectives['fraternal']=adjInfo("fraternal")
adverbs['fraternally']="fraternally"
nouns['fraternity']=nounInfo("fraternity")
nouns['fraternization']=nounInfo("fraternization")
nouns['fratricide']=nounInfo("fratricide")
nouns['fraud']=nounInfo("fraud")
adjectives['fraudulent']=adjInfo("fraudulent")
adverbs['fraudulently']="fraudulently"
adjectives['fraught']=adjInfo("fraught")
nouns['fray']=nounInfo("fray")
nouns['frazzle']=nounInfo("frazzle")
nouns['freak']=nounInfo("freak")
adjectives['freakish']=adjInfo("freakish")
adverbs['freakishly']="freakishly"
nouns['freakishness']=nounInfo("freakishness")
adjectives['freaky']=adjInfo("freaky")
nouns['freckle']=nounInfo("freckle")
adjectives['free']=adjInfo("free")
nouns['freebooter']=nounInfo("freebooter")
adjectives['freeborn']=adjInfo("freeborn")
nouns['freedman']=nounInfo("freedman")
nouns['freedom']=nounInfo("freedom")
adjectives['freehand']=adjInfo("freehand")
nouns['freehold']=nounInfo("freehold")
nouns['freeholder']=nounInfo("freeholder")
nouns['freelance']=nounInfo("freelance")
adverbs['freely']="freely"
nouns['freeman']=nounInfo("freeman")
nouns['freesia']=nounInfo("freesia")
nouns['freestone']=nounInfo("freestone")
nouns['freestyle']=nounInfo("freestyle")
nouns['freeway']=nounInfo("freeway")
adjectives['freewill']=adjInfo("freewill")
nouns['freeze']=nounInfo("freeze")
nouns['freezer']=nounInfo("freezer")
nouns['freight']=nounInfo("freight")
nouns['freighter']=nounInfo("freighter")
nouns['freightliner']=nounInfo("freightliner")
adjectives['frenetic']=adjInfo("frenetic")
adjectives['frenzied']=adjInfo("frenzied")
adverbs['frenziedly']="frenziedly"
nouns['frenzy']=nounInfo("frenzy")
nouns['frequency']=nounInfo("frequency")
adjectives['frequent']=adjInfo("frequent")
adverbs['frequently']="frequently"
nouns['fresco']=nounInfo("fresco")
adjectives['fresh']=adjInfo("fresh")
adverbs['fresh']="fresh"
nouns['fresher']=nounInfo("fresher")
adverbs['freshly']="freshly"
nouns['freshman']=nounInfo("freshman")
nouns['freshness']=nounInfo("freshness")
adjectives['freshwater']=adjInfo("freshwater")
nouns['fret']=nounInfo("fret")
adjectives['fretful']=adjInfo("fretful")
adverbs['fretfully']="fretfully"
nouns['fretsaw']=nounInfo("fretsaw")
nouns['fretwork']=nounInfo("fretwork")
nouns['friability']=nounInfo("friability")
adjectives['friable']=adjInfo("friable")
nouns['friar']=nounInfo("friar")
nouns['fricassee']=nounInfo("fricassee")
adjectives['fricative']=adjInfo("fricative")
nouns['fricative']=nounInfo("fricative")
nouns['friction']=nounInfo("friction")
nouns['fridge']=nounInfo("fridge")
nouns['friend']=nounInfo("friend").addAttributes({"g":"x"})
adjectives['friendless']=adjInfo("friendless")
nouns['friendlessness']=nounInfo("friendlessness")
nouns['friendliness']=nounInfo("friendliness")
adjectives['friendly']=adjInfo("friendly")
nouns['friendship']=nounInfo("friendship")
nouns['frier']=nounInfo("frier")
nouns['frieze']=nounInfo("frieze")
nouns['frigate']=nounInfo("frigate")
nouns['fright']=nounInfo("fright")
adjectives['frightened']=adjInfo("frightened")
adjectives['frightening']=adjInfo("frightening")
adverbs['frighteningly']="frighteningly"
adjectives['frightful']=adjInfo("frightful")
adverbs['frightfully']="frightfully"
nouns['frightfulness']=nounInfo("frightfulness")
adjectives['frigid']=adjInfo("frigid")
nouns['frigidity']=nounInfo("frigidity")
adverbs['frigidly']="frigidly"
nouns['frill']=nounInfo("frill")
adjectives['frilled']=adjInfo("frilled")
adjectives['frilly']=adjInfo("frilly")
nouns['fringe']=nounInfo("fringe")
nouns['frippery']=nounInfo("frippery")
adverbs['friskily']="friskily"
adjectives['frisky']=adjInfo("frisky")
nouns['frisson']=nounInfo("frisson")
nouns['fritter']=nounInfo("fritter")
nouns['frivolity']=nounInfo("frivolity")
adjectives['frivolous']=adjInfo("frivolous")
adverbs['frivolously']="frivolously"
adjectives['frizzy']=adjInfo("frizzy")
adverbs['fro']="fro"
nouns['frock']=nounInfo("frock")
nouns['frog']=nounInfo("frog")
nouns['frogman']=nounInfo("frogman")
nouns['frolic']=nounInfo("frolic")
adjectives['frolicsome']=adjInfo("frolicsome")
prepositions['from']=P("from")
nouns['frond']=nounInfo("frond")
nouns['front']=nounInfo("front")
nouns['frontage']=nounInfo("frontage")
adjectives['frontal']=adjInfo("frontal")
nouns['frontier']=nounInfo("frontier")
nouns['frontiersman']=nounInfo("frontiersman")
nouns['frontispiece']=nounInfo("frontispiece")
nouns['frost']=nounInfo("frost")
adverbs['frostily']="frostily"
nouns['frostiness']=nounInfo("frostiness")
nouns['frosting']=nounInfo("frosting")
adjectives['frosty']=adjInfo("frosty")
nouns['froth']=nounInfo("froth")
adverbs['frothily']="frothily"
nouns['frothiness']=nounInfo("frothiness")
adjectives['frothy']=adjInfo("frothy")
adjectives['froward']=adjInfo("froward")
nouns['frown']=nounInfo("frown")
adverbs['frowningly']="frowningly"
adjectives['frowsty']=adjInfo("frowsty")
adjectives['frowzy']=adjInfo("frowzy")
nouns['fructification']=nounInfo("fructification")
adjectives['frugal']=adjInfo("frugal")
nouns['frugality']=nounInfo("frugality")
adverbs['frugally']="frugally"
nouns['fruit']=nounInfo("fruit")
nouns['fruiterer']=nounInfo("fruiterer")
adjectives['fruitful']=adjInfo("fruitful")
adverbs['fruitfully']="fruitfully"
nouns['fruitfulness']=nounInfo("fruitfulness")
nouns['fruition']=nounInfo("fruition")
adjectives['fruitless']=adjInfo("fruitless")
adverbs['fruitlessly']="fruitlessly"
nouns['fruitlessness']=nounInfo("fruitlessness")
adjectives['fruity']=adjInfo("fruity")
nouns['frump']=nounInfo("frump")
adjectives['frumpish']=adjInfo("frumpish")
adjectives['frumpy']=adjInfo("frumpy")
nouns['frustration']=nounInfo("frustration")
nouns['fry']=nounInfo("fry")
nouns['fryer']=nounInfo("fryer")
nouns['fuchsia']=nounInfo("fuchsia")
nouns['fucker']=nounInfo("fucker")
adjectives['fucking']=adjInfo("fucking")
nouns['fudge']=nounInfo("fudge")
nouns['fuel']=nounInfo("fuel")
nouns['fug']=nounInfo("fug")
adjectives['fuggy']=adjInfo("fuggy")
adjectives['fugitive']=adjInfo("fugitive")
nouns['fugitive']=nounInfo("fugitive")
nouns['fugue']=nounInfo("fugue")
nouns['fulcrum']=nounInfo("fulcrum")
nouns['fulfilment']=nounInfo("fulfilment")
adjectives['full']=adjInfo("full")
nouns['fuller']=nounInfo("fuller")
nouns['fullness']=nounInfo("fullness")
adverbs['fully']="fully"
nouns['fulmar']=nounInfo("fulmar")
nouns['fulmination']=nounInfo("fulmination")
adjectives['fulsome']=adjInfo("fulsome")
adverbs['fulsomely']="fulsomely"
nouns['fulsomeness']=nounInfo("fulsomeness")
nouns['fumbler']=nounInfo("fumbler")
nouns['fume']=nounInfo("fume")
nouns['fumigation']=nounInfo("fumigation")
nouns['fun']=nounInfo("fun")
nouns['function']=nounInfo("function")
adjectives['functional']=adjInfo("functional")
nouns['functionalism']=nounInfo("functionalism")
nouns['functionalist']=nounInfo("functionalist")
adverbs['functionally']="functionally"
nouns['functionary']=nounInfo("functionary")
nouns['fund']=nounInfo("fund")
adjectives['fundamental']=adjInfo("fundamental")
nouns['fundamental']=nounInfo("fundamental")
nouns['fundamentalism']=nounInfo("fundamentalism")
nouns['fundamentalist']=nounInfo("fundamentalist")
adverbs['fundamentally']="fundamentally"
nouns['fundraising']=nounInfo("fundraising")
nouns['funeral']=nounInfo("funeral")
adjectives['funereal']=adjInfo("funereal")
nouns['funfair']=nounInfo("funfair")
nouns['fungicide']=nounInfo("fungicide")
adjectives['fungoid']=adjInfo("fungoid")
adjectives['fungous']=adjInfo("fungous")
nouns['fungus']=nounInfo("fungus")
nouns['funicular']=nounInfo("funicular")
nouns['funk']=nounInfo("funk")
adjectives['funky']=adjInfo("funky")
nouns['funnel']=nounInfo("funnel")
adverbs['funnily']="funnily"
nouns['funniness']=nounInfo("funniness")
adjectives['funny']=adjInfo("funny")
nouns['fur']=nounInfo("fur")
nouns['furbelow']=nounInfo("furbelow")
adjectives['furious']=adjInfo("furious")
adverbs['furiously']="furiously"
nouns['furlong']=nounInfo("furlong")
nouns['furlough']=nounInfo("furlough")
nouns['furnace']=nounInfo("furnace")
nouns['furnishing']=nounInfo("furnishing")
nouns['furniture']=nounInfo("furniture")
nouns['furore']=nounInfo("furore")
nouns['furrier']=nounInfo("furrier")
nouns['furrow']=nounInfo("furrow")
adjectives['furry']=adjInfo("furry")
nouns['furtherance']=nounInfo("furtherance")
adverbs['furthermore']="furthermore"
adjectives['furthermost']=adjInfo("furthermost")
adverbs['furthest']="furthest"
adjectives['furtive']=adjInfo("furtive")
adverbs['furtively']="furtively"
nouns['furtiveness']=nounInfo("furtiveness")
nouns['fury']=nounInfo("fury")
nouns['furze']=nounInfo("furze")
nouns['fuse']=nounInfo("fuse")
nouns['fuselage']=nounInfo("fuselage")
nouns['fusilier']=nounInfo("fusilier")
nouns['fusillade']=nounInfo("fusillade")
nouns['fusion']=nounInfo("fusion")
nouns['fuss']=nounInfo("fuss")
adverbs['fussily']="fussily"
nouns['fussiness']=nounInfo("fussiness")
nouns['fusspot']=nounInfo("fusspot")
adjectives['fussy']=adjInfo("fussy")
nouns['fustian']=nounInfo("fustian")
adjectives['fusty']=adjInfo("fusty")
adjectives['futile']=adjInfo("futile")
nouns['futility']=nounInfo("futility")
adjectives['future']=adjInfo("future")
nouns['future']=nounInfo("future")
adjectives['futureless']=adjInfo("futureless")
nouns['futurism']=nounInfo("futurism")
nouns['futurist']=nounInfo("futurist")
nouns['futurity']=nounInfo("futurity")
nouns['fuze']=nounInfo("fuze")
nouns['fuzz']=nounInfo("fuzz")
adjectives['fuzzy']=adjInfo("fuzzy")
nouns['gab']=nounInfo("gab")
nouns['gabardine']=nounInfo("gabardine")
nouns['gabble']=nounInfo("gabble")
nouns['gaberdine']=nounInfo("gaberdine")
nouns['gable']=nounInfo("gable")
adjectives['gabled']=adjInfo("gabled")
nouns['gad']=nounInfo("gad")
nouns['gadabout']=nounInfo("gadabout")
nouns['gadfly']=nounInfo("gadfly")
nouns['gadget']=nounInfo("gadget")
nouns['gadgetry']=nounInfo("gadgetry")
nouns['gaff']=nounInfo("gaff")
nouns['gaffe']=nounInfo("gaffe")
nouns['gaffer']=nounInfo("gaffer")
nouns['gag']=nounInfo("gag")
adjectives['gaga']=adjInfo("gaga")
nouns['gage']=nounInfo("gage")
nouns['gaggle']=nounInfo("gaggle")
nouns['gaiety']=nounInfo("gaiety")
adverbs['gaily']="gaily"
nouns['gain']=nounInfo("gain")
adjectives['gainful']=adjInfo("gainful")
adverbs['gainfully']="gainfully"
nouns['gainings']=nounInfo("gainings")
nouns['gait']=nounInfo("gait")
nouns['gaiter']=nounInfo("gaiter")
nouns['gal']=nounInfo("gal")
nouns['gala']=nounInfo("gala")
adjectives['galactic']=adjInfo("galactic")
nouns['galantine']=nounInfo("galantine")
nouns['galaxy']=nounInfo("galaxy")
nouns['gale']=nounInfo("gale")
nouns['gall']=nounInfo("gall")
adjectives['gallant']=adjInfo("gallant")
nouns['gallant']=nounInfo("gallant")
adverbs['gallantly']="gallantly"
nouns['gallantry']=nounInfo("gallantry")
nouns['galleon']=nounInfo("galleon")
nouns['gallery']=nounInfo("gallery")
nouns['galley']=nounInfo("galley")
nouns['gallicism']=nounInfo("gallicism")
nouns['gallon']=nounInfo("gallon")
nouns['gallop']=nounInfo("gallop")
nouns['gallows']=nounInfo("gallows")
nouns['gallstone']=nounInfo("gallstone")
adverbs['galore']="galore"
nouns['galosh']=nounInfo("galosh")
adjectives['galvanic']=adjInfo("galvanic")
nouns['galvanism']=nounInfo("galvanism")
nouns['gambit']=nounInfo("gambit")
nouns['gamble']=nounInfo("gamble")
nouns['gambler']=nounInfo("gambler")
nouns['gambling']=nounInfo("gambling")
nouns['gamboge']=nounInfo("gamboge")
nouns['gambol']=nounInfo("gambol")
adjectives['game']=adjInfo("game")
nouns['game']=nounInfo("game")
nouns['gamecock']=nounInfo("gamecock")
nouns['gamekeeper']=nounInfo("gamekeeper")
adverbs['gamely']="gamely"
nouns['gamesmanship']=nounInfo("gamesmanship")
nouns['gamma']=nounInfo("gamma")
nouns['gammon']=nounInfo("gammon")
adjectives['gammy']=adjInfo("gammy")
nouns['gamp']=nounInfo("gamp")
nouns['gamut']=nounInfo("gamut")
adjectives['gamy']=adjInfo("gamy")
nouns['gander']=nounInfo("gander")
nouns['gang']=nounInfo("gang")
nouns['ganger']=nounInfo("ganger")
adjectives['gangling']=adjInfo("gangling")
nouns['ganglion']=nounInfo("ganglion")
nouns['gangplank']=nounInfo("gangplank")
nouns['gangrene']=nounInfo("gangrene")
adjectives['gangrenous']=adjInfo("gangrenous")
nouns['gangster']=nounInfo("gangster")
nouns['gangway']=nounInfo("gangway")
nouns['gannet']=nounInfo("gannet")
nouns['gantry']=nounInfo("gantry")
nouns['gaol']=nounInfo("gaol")
nouns['gaoler']=nounInfo("gaoler")
nouns['gap']=nounInfo("gap")
nouns['gape']=nounInfo("gape")
nouns['garage']=nounInfo("garage")
nouns['garb']=nounInfo("garb")
nouns['garbage']=nounInfo("garbage")
nouns['garden']=nounInfo("garden")
nouns['gardener']=nounInfo("gardener").addAttributes({"g":"x"})
nouns['gardenia']=nounInfo("gardenia")
nouns['gardening']=nounInfo("gardening")
adjectives['gargantuan']=adjInfo("gargantuan")
nouns['gargle']=nounInfo("gargle")
nouns['gargoyle']=nounInfo("gargoyle")
adjectives['garish']=adjInfo("garish")
adverbs['garishly']="garishly"
nouns['garland']=nounInfo("garland")
nouns['garlic']=nounInfo("garlic")
nouns['garment']=nounInfo("garment")
nouns['garner']=nounInfo("garner")
nouns['garnet']=nounInfo("garnet")
nouns['garnish']=nounInfo("garnish")
nouns['garotte']=nounInfo("garotte")
nouns['garret']=nounInfo("garret")
nouns['garrison']=nounInfo("garrison")
nouns['garrotte']=nounInfo("garrotte")
nouns['garrulity']=nounInfo("garrulity")
adjectives['garrulous']=adjInfo("garrulous")
nouns['garter']=nounInfo("garter")
nouns['gas']=nounInfo("gas")
adjectives['gaseous']=adjInfo("gaseous")
nouns['gash']=nounInfo("gash")
nouns['gasification']=nounInfo("gasification")
nouns['gasket']=nounInfo("gasket")
nouns['gaslight']=nounInfo("gaslight")
nouns['gasmask']=nounInfo("gasmask")
nouns['gasolene']=nounInfo("gasolene")
nouns['gasoline']=nounInfo("gasoline")
nouns['gasometer']=nounInfo("gasometer")
nouns['gasp']=nounInfo("gasp")
nouns['gassing']=nounInfo("gassing")
adjectives['gassy']=adjInfo("gassy")
adjectives['gastric']=adjInfo("gastric")
nouns['gastritis']=nounInfo("gastritis")
adjectives['gastronomic']=adjInfo("gastronomic")
nouns['gastronomy']=nounInfo("gastronomy")
nouns['gate']=nounInfo("gate")
nouns['gateau']=nounInfo("gateau")
nouns['gatecrasher']=nounInfo("gatecrasher")
nouns['gateway']=nounInfo("gateway")
nouns['gathering']=nounInfo("gathering")
adjectives['gauche']=adjInfo("gauche")
nouns['gaucherie']=nounInfo("gaucherie")
nouns['gaucho']=nounInfo("gaucho")
nouns['gaud']=nounInfo("gaud")
adverbs['gaudily']="gaudily"
adjectives['gaudy']=adjInfo("gaudy")
nouns['gaudy']=nounInfo("gaudy")
nouns['gauge']=nounInfo("gauge")
adjectives['gaunt']=adjInfo("gaunt")
nouns['gauntlet']=nounInfo("gauntlet")
nouns['gauntness']=nounInfo("gauntness")
nouns['gauze']=nounInfo("gauze")
adjectives['gauzy']=adjInfo("gauzy")
nouns['gavel']=nounInfo("gavel")
nouns['gavotte']=nounInfo("gavotte")
nouns['gawk']=nounInfo("gawk")
nouns['gawkiness']=nounInfo("gawkiness")
adjectives['gawky']=adjInfo("gawky")
adjectives['gay']=adjInfo("gay")
nouns['gay']=nounInfo("gay")
nouns['gayness']=nounInfo("gayness")
nouns['gaze']=nounInfo("gaze")
nouns['gazelle']=nounInfo("gazelle")
nouns['gazette']=nounInfo("gazette")
nouns['gazetteer']=nounInfo("gazetteer")
nouns['gear']=nounInfo("gear")
nouns['gecko']=nounInfo("gecko")
nouns['gee']=nounInfo("gee")
nouns['geezer']=nounInfo("geezer")
nouns['geisha']=nounInfo("geisha")
nouns['gel']=nounInfo("gel")
nouns['gelatin']=nounInfo("gelatin")
nouns['gelatine']=nounInfo("gelatine")
adjectives['gelatinous']=adjInfo("gelatinous")
nouns['gelding']=nounInfo("gelding")
nouns['gelignite']=nounInfo("gelignite")
nouns['gem']=nounInfo("gem")
adjectives['gemmed']=adjInfo("gemmed")
nouns['gen']=nounInfo("gen")
nouns['gendarme']=nounInfo("gendarme")
nouns['gendarmerie']=nounInfo("gendarmerie")
nouns['gender']=nounInfo("gender")
nouns['gene']=nounInfo("gene")
adjectives['genealogical']=adjInfo("genealogical")
adverbs['genealogically']="genealogically"
nouns['genealogist']=nounInfo("genealogist")
nouns['genealogy']=nounInfo("genealogy")
adjectives['general']=adjInfo("general")
nouns['general']=nounInfo("general")
nouns['generalissimo']=nounInfo("generalissimo")
nouns['generality']=nounInfo("generality")
nouns['generalization']=nounInfo("generalization")
adverbs['generally']="generally"
nouns['generation']=nounInfo("generation")
adjectives['generative']=adjInfo("generative")
nouns['generator']=nounInfo("generator")
adjectives['generic']=adjInfo("generic")
adverbs['generically']="generically"
nouns['generosity']=nounInfo("generosity")
adjectives['generous']=adjInfo("generous")
adverbs['generously']="generously"
nouns['genesis']=nounInfo("genesis")
adjectives['genetic']=adjInfo("genetic")
adverbs['genetically']="genetically"
nouns['geneticist']=nounInfo("geneticist")
nouns['genetics']=nounInfo("genetics")
adjectives['genial']=adjInfo("genial")
nouns['geniality']=nounInfo("geniality")
adverbs['genially']="genially"
nouns['genie']=nounInfo("genie")
adjectives['genital']=adjInfo("genital")
nouns['genitals']=nounInfo("genitals")
adjectives['genitive']=adjInfo("genitive")
nouns['genius']=nounInfo("genius").addAttributes({"g":"x"})
nouns['genocide']=nounInfo("genocide")
nouns['genre']=nounInfo("genre")
nouns['gent']=nounInfo("gent")
adjectives['genteel']=adjInfo("genteel")
adverbs['genteelly']="genteelly"
nouns['gentian']=nounInfo("gentian")
adjectives['gentile']=adjInfo("gentile")
nouns['gentile']=nounInfo("gentile")
nouns['gentility']=nounInfo("gentility")
adjectives['gentle']=adjInfo("gentle")
nouns['gentlefolk']=nounInfo("gentlefolk")
nouns['gentleman']=nounInfo("gentleman").addAttributes({"g":"m"})
adjectives['gentlemanly']=adjInfo("gentlemanly")
nouns['gentleness']=nounInfo("gentleness")
nouns['gentlewoman']=nounInfo("gentlewoman")
adverbs['gently']="gently"
nouns['gentry']=nounInfo("gentry")
nouns['genuflection']=nounInfo("genuflection")
nouns['genuflexion']=nounInfo("genuflexion")
adjectives['genuine']=adjInfo("genuine")
adverbs['genuinely']="genuinely"
nouns['genuineness']=nounInfo("genuineness")
nouns['genus']=nounInfo("genus")
adjectives['geocentric']=adjInfo("geocentric")
nouns['geographer']=nounInfo("geographer")
adjectives['geographical']=adjInfo("geographical")
adverbs['geographically']="geographically"
nouns['geography']=nounInfo("geography")
adjectives['geological']=adjInfo("geological")
adverbs['geologically']="geologically"
nouns['geologist']=nounInfo("geologist")
nouns['geology']=nounInfo("geology")
adjectives['geometric']=adjInfo("geometric")
adjectives['geometrical']=adjInfo("geometrical")
adverbs['geometrically']="geometrically"
nouns['geometry']=nounInfo("geometry")
adjectives['geophysical']=adjInfo("geophysical")
nouns['geophysics']=nounInfo("geophysics")
nouns['geopolitics']=nounInfo("geopolitics")
nouns['georgette']=nounInfo("georgette")
nouns['geranium']=nounInfo("geranium")
adjectives['geriatric']=adjInfo("geriatric")
nouns['geriatrician']=nounInfo("geriatrician")
nouns['geriatrics']=nounInfo("geriatrics")
nouns['germ']=nounInfo("germ")
adjectives['germane']=adjInfo("germane")
nouns['germicide']=nounInfo("germicide")
nouns['germination']=nounInfo("germination")
nouns['gerontology']=nounInfo("gerontology")
nouns['gerrymander']=nounInfo("gerrymander")
nouns['gerund']=nounInfo("gerund")
nouns['gestation']=nounInfo("gestation")
nouns['gesticulation']=nounInfo("gesticulation")
nouns['gesture']=nounInfo("gesture")
nouns['geum']=nounInfo("geum")
nouns['geyser']=nounInfo("geyser")
nouns['gharry']=nounInfo("gharry")
adjectives['ghastly']=adjInfo("ghastly")
nouns['ghat']=nounInfo("ghat")
nouns['ghee']=nounInfo("ghee")
nouns['gherkin']=nounInfo("gherkin")
nouns['ghetto']=nounInfo("ghetto")
nouns['ghost']=nounInfo("ghost")
nouns['ghostliness']=nounInfo("ghostliness")
adjectives['ghostly']=adjInfo("ghostly")
nouns['ghoul']=nounInfo("ghoul")
adjectives['ghoulish']=adjInfo("ghoulish")
adverbs['ghoulishly']="ghoulishly"
nouns['giant']=nounInfo("giant").addAttributes({"g":"x"})
nouns['giantess']=nounInfo("giantess").addAttributes({"g":"f"})
nouns['gibberish']=nounInfo("gibberish")
nouns['gibbet']=nounInfo("gibbet")
nouns['gibbon']=nounInfo("gibbon")
adjectives['gibbous']=adjInfo("gibbous")
nouns['gibe']=nounInfo("gibe")
adverbs['gibingly']="gibingly"
nouns['giblets']=nounInfo("giblets")
adverbs['giddily']="giddily"
nouns['giddiness']=nounInfo("giddiness")
adjectives['giddy']=adjInfo("giddy")
nouns['gift']=nounInfo("gift")
adjectives['gifted']=adjInfo("gifted")
nouns['gig']=nounInfo("gig")
adjectives['gigantic']=adjInfo("gigantic")
nouns['giggle']=nounInfo("giggle")
adverbs['gigglingly']="gigglingly"
nouns['gigolo']=nounInfo("gigolo")
nouns['gild']=nounInfo("gild")
nouns['gilder']=nounInfo("gilder")
nouns['gilding']=nounInfo("gilding")
nouns['gill']=nounInfo("gill")
nouns['gillie']=nounInfo("gillie")
nouns['gilt']=nounInfo("gilt")
nouns['gimbals']=nounInfo("gimbals")
adjectives['gimcrack']=adjInfo("gimcrack")
nouns['gimlet']=nounInfo("gimlet")
nouns['gimmick']=nounInfo("gimmick")
nouns['gin']=nounInfo("gin")
nouns['ginger']=nounInfo("ginger")
nouns['gingerbread']=nounInfo("gingerbread")
adjectives['gingerly']=adjInfo("gingerly")
adverbs['gingerly']="gingerly"
nouns['gingham']=nounInfo("gingham")
nouns['gingko']=nounInfo("gingko")
nouns['ginseng']=nounInfo("ginseng")
nouns['gipsy']=nounInfo("gipsy")
nouns['giraffe']=nounInfo("giraffe")
nouns['girder']=nounInfo("girder")
nouns['girdle']=nounInfo("girdle")
nouns['girl']=nounInfo("girl").addAttributes({"g":"f"})
nouns['girlfriend']=nounInfo("girlfriend")
nouns['girlhood']=nounInfo("girlhood")
adjectives['girlish']=adjInfo("girlish")
adverbs['girlishly']="girlishly"
nouns['girlishness']=nounInfo("girlishness")
nouns['giro']=nounInfo("giro")
nouns['girth']=nounInfo("girth")
nouns['gist']=nounInfo("gist")
nouns['give']=nounInfo("give")
nouns['giveaway']=nounInfo("giveaway")
nouns['giver']=nounInfo("giver")
nouns['gizzard']=nounInfo("gizzard")
adjectives['glacial']=adjInfo("glacial")
nouns['glacier']=nounInfo("glacier")
adjectives['glad']=adjInfo("glad")
nouns['glade']=nounInfo("glade")
nouns['gladiator']=nounInfo("gladiator")
adjectives['gladiatorial']=adjInfo("gladiatorial")
nouns['gladiolus']=nounInfo("gladiolus")
adverbs['gladly']="gladly"
nouns['gladness']=nounInfo("gladness")
adjectives['gladsome']=adjInfo("gladsome")
nouns['glamorization']=nounInfo("glamorization")
adjectives['glamorous']=adjInfo("glamorous")
nouns['glamour']=nounInfo("glamour")
nouns['glance']=nounInfo("glance")
nouns['gland']=nounInfo("gland")
nouns['glanders']=nounInfo("glanders")
adjectives['glandular']=adjInfo("glandular")
nouns['glare']=nounInfo("glare")
adjectives['glaring']=adjInfo("glaring")
nouns['glass']=nounInfo("glass")
nouns['glassful']=nounInfo("glassful")
nouns['glasshouse']=nounInfo("glasshouse")
adverbs['glassily']="glassily"
nouns['glassware']=nounInfo("glassware")
nouns['glassworks']=nounInfo("glassworks")
adjectives['glassy']=adjInfo("glassy")
nouns['glaucoma']=nounInfo("glaucoma")
adjectives['glaucous']=adjInfo("glaucous")
nouns['glaze']=nounInfo("glaze")
nouns['glazier']=nounInfo("glazier")
nouns['gleam']=nounInfo("gleam")
nouns['gleaner']=nounInfo("gleaner")
nouns['gleanings']=nounInfo("gleanings")
nouns['glebe']=nounInfo("glebe")
nouns['glee']=nounInfo("glee")
adjectives['gleeful']=adjInfo("gleeful")
adverbs['gleefully']="gleefully"
nouns['glen']=nounInfo("glen")
adjectives['glib']=adjInfo("glib")
adverbs['glibly']="glibly"
nouns['glibness']=nounInfo("glibness")
nouns['glide']=nounInfo("glide")
nouns['glider']=nounInfo("glider")
nouns['gliding']=nounInfo("gliding")
nouns['glimmer']=nounInfo("glimmer")
nouns['glimpse']=nounInfo("glimpse")
nouns['glint']=nounInfo("glint")
nouns['glissade']=nounInfo("glissade")
adjectives['glissando']=adjInfo("glissando")
adverbs['glissando']="glissando"
nouns['glister']=nounInfo("glister")
nouns['glitter']=nounInfo("glitter")
adjectives['glittering']=adjInfo("glittering")
nouns['gloaming']=nounInfo("gloaming")
adverbs['gloatingly']="gloatingly"
adjectives['global']=adjInfo("global")
nouns['globe']=nounInfo("globe")
adjectives['globular']=adjInfo("globular")
nouns['globule']=nounInfo("globule")
nouns['glockenspiel']=nounInfo("glockenspiel")
nouns['gloom']=nounInfo("gloom")
adverbs['gloomily']="gloomily"
adjectives['gloomy']=adjInfo("gloomy")
nouns['glorification']=nounInfo("glorification")
adjectives['glorious']=adjInfo("glorious")
adverbs['gloriously']="gloriously"
nouns['glory']=nounInfo("glory")
nouns['gloss']=nounInfo("gloss")
nouns['glossary']=nounInfo("glossary")
adverbs['glossily']="glossily"
nouns['glossiness']=nounInfo("glossiness")
adjectives['glossy']=adjInfo("glossy")
adjectives['glottal']=adjInfo("glottal")
nouns['glottis']=nounInfo("glottis")
nouns['glove']=nounInfo("glove")
nouns['glow']=nounInfo("glow")
adverbs['gloweringly']="gloweringly"
adjectives['glowing']=adjInfo("glowing")
adverbs['glowingly']="glowingly"
nouns['glucose']=nounInfo("glucose")
nouns['glue']=nounInfo("glue")
adjectives['gluey']=adjInfo("gluey")
adjectives['glum']=adjInfo("glum")
adverbs['glumly']="glumly"
nouns['glumness']=nounInfo("glumness")
nouns['glut']=nounInfo("glut")
nouns['gluten']=nounInfo("gluten")
adjectives['glutinous']=adjInfo("glutinous")
nouns['glutton']=nounInfo("glutton")
adjectives['gluttonous']=adjInfo("gluttonous")
adverbs['gluttonously']="gluttonously"
nouns['gluttony']=nounInfo("gluttony")
nouns['glycerine']=nounInfo("glycerine")
adjectives['gnarled']=adjInfo("gnarled")
nouns['gnat']=nounInfo("gnat")
nouns['gnome']=nounInfo("gnome")
nouns['gnu']=nounInfo("gnu")
nouns['go']=nounInfo("go")
nouns['goad']=nounInfo("goad")
nouns['goal']=nounInfo("goal")
nouns['goalie']=nounInfo("goalie")
nouns['goalkeeper']=nounInfo("goalkeeper")
nouns['goat']=nounInfo("goat")
nouns['goatee']=nounInfo("goatee")
nouns['goatskin']=nounInfo("goatskin")
nouns['gob']=nounInfo("gob")
nouns['gobbet']=nounInfo("gobbet")
nouns['gobble']=nounInfo("gobble")
nouns['gobbledygook']=nounInfo("gobbledygook")
nouns['gobbler']=nounInfo("gobbler")
nouns['goblet']=nounInfo("goblet")
nouns['goblin']=nounInfo("goblin")
nouns['god']=nounInfo("god").addAttributes({"g":"m"})
nouns['godchild']=nounInfo("godchild")
adjectives['goddam']=adjInfo("goddam")
adverbs['goddam']="goddam"
nouns['goddaughter']=nounInfo("goddaughter")
nouns['goddess']=nounInfo("goddess").addAttributes({"g":"f"})
nouns['godfather']=nounInfo("godfather")
adjectives['godfearing']=adjInfo("godfearing")
adjectives['godforsaken']=adjInfo("godforsaken")
nouns['godhead']=nounInfo("godhead")
adjectives['godless']=adjInfo("godless")
nouns['godlessness']=nounInfo("godlessness")
adjectives['godlike']=adjInfo("godlike")
nouns['godliness']=nounInfo("godliness")
adjectives['godly']=adjInfo("godly")
nouns['godmother']=nounInfo("godmother")
nouns['godown']=nounInfo("godown")
nouns['godparent']=nounInfo("godparent")
nouns['godsend']=nounInfo("godsend")
nouns['godson']=nounInfo("godson")
nouns['godspeed']=nounInfo("godspeed")
nouns['goggles']=nounInfo("goggles")
adjectives['going']=adjInfo("going")
nouns['going']=nounInfo("going")
nouns['goitre']=nounInfo("goitre")
nouns['gold']=nounInfo("gold")
adjectives['golden']=adjInfo("golden")
nouns['goldfield']=nounInfo("goldfield")
nouns['goldfinch']=nounInfo("goldfinch")
nouns['goldfish']=nounInfo("goldfish")
nouns['goldmine']=nounInfo("goldmine")
nouns['goldsmith']=nounInfo("goldsmith")
nouns['golf']=nounInfo("golf")
nouns['golfer']=nounInfo("golfer")
nouns['golliwog']=nounInfo("golliwog")
nouns['golly']=nounInfo("golly")
nouns['golosh']=nounInfo("golosh")
nouns['gondola']=nounInfo("gondola")
nouns['gondolier']=nounInfo("gondolier")
nouns['goner']=nounInfo("goner")
nouns['gong']=nounInfo("gong")
nouns['gonorrhea']=nounInfo("gonorrhea")
nouns['gonorrhoea']=nounInfo("gonorrhoea")
nouns['goo']=nounInfo("goo")
adjectives['good']=adjInfo("good")
nouns['good']=nounInfo("good")
nouns['goodbye']=nounInfo("goodbye")
adjectives['goodish']=adjInfo("goodish")
adjectives['goodly']=adjInfo("goodly")
nouns['goodness']=nounInfo("goodness")
nouns['goods']=nounInfo("goods")
nouns['goodwill']=nounInfo("goodwill")
nouns['goody']=nounInfo("goody")
adjectives['gooey']=adjInfo("gooey")
nouns['goof']=nounInfo("goof")
adjectives['goofy']=adjInfo("goofy")
nouns['google']=nounInfo("google")
nouns['googly']=nounInfo("googly")
nouns['goon']=nounInfo("goon")
nouns['goose']=nounInfo("goose")
nouns['gooseberry']=nounInfo("gooseberry")
nouns['gopher']=nounInfo("gopher")
nouns['gore']=nounInfo("gore")
nouns['gorge']=nounInfo("gorge")
adjectives['gorgeous']=adjInfo("gorgeous")
adverbs['gorgeously']="gorgeously"
nouns['gorilla']=nounInfo("gorilla")
nouns['gorse']=nounInfo("gorse")
adjectives['gory']=adjInfo("gory")
nouns['gosh']=nounInfo("gosh")
nouns['gosling']=nounInfo("gosling")
nouns['gospel']=nounInfo("gospel")
nouns['gossamer']=nounInfo("gossamer")
nouns['gossip']=nounInfo("gossip")
nouns['gouache']=nounInfo("gouache")
nouns['gouge']=nounInfo("gouge")
nouns['goulash']=nounInfo("goulash")
nouns['gourd']=nounInfo("gourd")
nouns['gourmand']=nounInfo("gourmand")
nouns['gourmet']=nounInfo("gourmet")
nouns['gout']=nounInfo("gout")
adjectives['gouty']=adjInfo("gouty")
nouns['governance']=nounInfo("governance")
nouns['governess']=nounInfo("governess")
adjectives['governing']=adjInfo("governing")
nouns['government']=nounInfo("government")
adjectives['governmental']=adjInfo("governmental")
nouns['governor']=nounInfo("governor").addAttributes({"g":"x"})
nouns['gown']=nounInfo("gown")
nouns['grab']=nounInfo("grab")
nouns['grabber']=nounInfo("grabber")
nouns['grace']=nounInfo("grace")
adjectives['graceful']=adjInfo("graceful")
adverbs['gracefully']="gracefully"
adjectives['graceless']=adjInfo("graceless")
adverbs['gracelessly']="gracelessly"
adjectives['gracious']=adjInfo("gracious")
adverbs['graciously']="graciously"
nouns['graciousness']=nounInfo("graciousness")
nouns['gradation']=nounInfo("gradation")
nouns['grade']=nounInfo("grade")
nouns['gradient']=nounInfo("gradient")
adjectives['gradual']=adjInfo("gradual")
adverbs['gradually']="gradually"
nouns['gradualness']=nounInfo("gradualness")
nouns['graduate']=nounInfo("graduate").addAttributes({"g":"x"})
nouns['graduation']=nounInfo("graduation")
nouns['graffito']=nounInfo("graffito")
nouns['graft']=nounInfo("graft")
nouns['grail']=nounInfo("grail")
nouns['grain']=nounInfo("grain")
nouns['gram']=nounInfo("gram")
nouns['grammar']=nounInfo("grammar")
nouns['grammarian']=nounInfo("grammarian")
adjectives['grammatical']=adjInfo("grammatical")
adverbs['grammatically']="grammatically"
nouns['gramme']=nounInfo("gramme")
nouns['gramophone']=nounInfo("gramophone")
nouns['grampus']=nounInfo("grampus")
nouns['granary']=nounInfo("granary")
adjectives['grand']=adjInfo("grand")
nouns['grandad']=nounInfo("grandad")
nouns['grandaunt']=nounInfo("grandaunt")
nouns['grandchild']=nounInfo("grandchild")
nouns['granddaughter']=nounInfo("granddaughter").addAttributes({"g":"f"})
nouns['grandee']=nounInfo("grandee")
nouns['grandeur']=nounInfo("grandeur")
nouns['grandfather']=nounInfo("grandfather").addAttributes({"g":"m"})
nouns['grandiloquence']=nounInfo("grandiloquence")
adjectives['grandiloquent']=adjInfo("grandiloquent")
adjectives['grandiose']=adjInfo("grandiose")
adverbs['grandly']="grandly"
nouns['grandma']=nounInfo("grandma")
nouns['grandmother']=nounInfo("grandmother").addAttributes({"g":"f"})
nouns['grandnephew']=nounInfo("grandnephew")
nouns['grandniece']=nounInfo("grandniece")
nouns['grandpa']=nounInfo("grandpa")
nouns['grandparent']=nounInfo("grandparent")
nouns['grandson']=nounInfo("grandson").addAttributes({"g":"m"})
nouns['grandstand']=nounInfo("grandstand")
nouns['granduncle']=nounInfo("granduncle")
nouns['grange']=nounInfo("grange")
nouns['granite']=nounInfo("granite")
nouns['grannie']=nounInfo("grannie")
nouns['granny']=nounInfo("granny")
nouns['grant']=nounInfo("grant")
adjectives['granular']=adjInfo("granular")
nouns['granule']=nounInfo("granule")
nouns['grape']=nounInfo("grape")
nouns['grapefruit']=nounInfo("grapefruit")
nouns['graph']=nounInfo("graph")
adjectives['graphic']=adjInfo("graphic")
adverbs['graphically']="graphically"
nouns['graphics']=nounInfo("graphics")
nouns['graphite']=nounInfo("graphite")
nouns['grapnel']=nounInfo("grapnel")
nouns['grasp']=nounInfo("grasp")
adjectives['grasping']=adjInfo("grasping")
nouns['grass']=nounInfo("grass")
nouns['grasshopper']=nounInfo("grasshopper")
nouns['grassland']=nounInfo("grassland")
nouns['grassroots']=nounInfo("grassroots")
adjectives['grassy']=adjInfo("grassy")
nouns['grate']=nounInfo("grate")
adjectives['grateful']=adjInfo("grateful")
adverbs['gratefully']="gratefully"
nouns['grater']=nounInfo("grater")
nouns['gratification']=nounInfo("gratification")
adjectives['gratifying']=adjInfo("gratifying")
nouns['grating']=nounInfo("grating")
adverbs['gratingly']="gratingly"
adjectives['gratis']=adjInfo("gratis")
adverbs['gratis']="gratis"
nouns['gratitude']=nounInfo("gratitude")
adjectives['gratuitous']=adjInfo("gratuitous")
adverbs['gratuitously']="gratuitously"
nouns['gratuity']=nounInfo("gratuity")
adjectives['grave']=adjInfo("grave")
nouns['grave']=nounInfo("grave")
nouns['gravel']=nounInfo("gravel")
adjectives['gravelly']=adjInfo("gravelly")
adverbs['gravely']="gravely"
adjectives['graven']=adjInfo("graven")
nouns['gravestone']=nounInfo("gravestone")
nouns['graveyard']=nounInfo("graveyard")
nouns['gravitation']=nounInfo("gravitation")
nouns['gravity']=nounInfo("gravity")
nouns['gravure']=nounInfo("gravure")
nouns['gravy']=nounInfo("gravy")
adjectives['gray']=adjInfo("gray")
nouns['gray']=nounInfo("gray")
nouns['graze']=nounInfo("graze")
nouns['grazier']=nounInfo("grazier")
nouns['grease']=nounInfo("grease")
nouns['greaser']=nounInfo("greaser")
adverbs['greasily']="greasily"
nouns['greasiness']=nounInfo("greasiness")
adjectives['greasy']=adjInfo("greasy")
adjectives['great']=adjInfo("great")
adverbs['greatly']="greatly"
nouns['greatness']=nounInfo("greatness")
nouns['greaves']=nounInfo("greaves")
nouns['grebe']=nounInfo("grebe")
nouns['greed']=nounInfo("greed")
adverbs['greedily']="greedily"
nouns['greediness']=nounInfo("greediness")
adjectives['greedy']=adjInfo("greedy")
adjectives['green']=adjInfo("green")
nouns['green']=nounInfo("green")
nouns['greenback']=nounInfo("greenback")
nouns['greenery']=nounInfo("greenery")
nouns['greenfly']=nounInfo("greenfly")
nouns['greengage']=nounInfo("greengage")
nouns['greengrocer']=nounInfo("greengrocer")
nouns['greengrocery']=nounInfo("greengrocery")
nouns['greenhorn']=nounInfo("greenhorn")
nouns['greenhouse']=nounInfo("greenhouse")
adjectives['greenish']=adjInfo("greenish")
nouns['greenishness']=nounInfo("greenishness")
nouns['greens']=nounInfo("greens")
nouns['greenstuff']=nounInfo("greenstuff")
nouns['greensward']=nounInfo("greensward")
nouns['greenwood']=nounInfo("greenwood")
nouns['greeting']=nounInfo("greeting")
adjectives['gregarious']=adjInfo("gregarious")
adverbs['gregariously']="gregariously"
nouns['gregariousness']=nounInfo("gregariousness")
nouns['gremlin']=nounInfo("gremlin")
nouns['grenade']=nounInfo("grenade")
nouns['grenadier']=nounInfo("grenadier")
adjectives['grey']=adjInfo("grey")
nouns['grey']=nounInfo("grey")
nouns['greybeard']=nounInfo("greybeard")
nouns['greyhound']=nounInfo("greyhound")
adjectives['greyish']=adjInfo("greyish")
adverbs['greyly']="greyly"
nouns['grid']=nounInfo("grid")
nouns['griddle']=nounInfo("griddle")
nouns['gridiron']=nounInfo("gridiron")
nouns['grief']=nounInfo("grief")
nouns['grievance']=nounInfo("grievance")
adjectives['grievous']=adjInfo("grievous")
adverbs['grievously']="grievously"
nouns['griffin']=nounInfo("griffin")
nouns['griffon']=nounInfo("griffon")
nouns['grill']=nounInfo("grill")
nouns['grille']=nounInfo("grille")
adjectives['grim']=adjInfo("grim")
nouns['grimace']=nounInfo("grimace")
nouns['grime']=nounInfo("grime")
adverbs['grimly']="grimly"
nouns['grimness']=nounInfo("grimness")
adjectives['grimy']=adjInfo("grimy")
nouns['grin']=nounInfo("grin")
nouns['grind']=nounInfo("grind")
nouns['grinder']=nounInfo("grinder")
nouns['grindstone']=nounInfo("grindstone")
nouns['grip']=nounInfo("grip")
nouns['gripes']=nounInfo("gripes")
nouns['grippe']=nounInfo("grippe")
nouns['gripsack']=nounInfo("gripsack")
adjectives['grisly']=adjInfo("grisly")
nouns['grist']=nounInfo("grist")
nouns['gristle']=nounInfo("gristle")
nouns['grit']=nounInfo("grit")
nouns['grits']=nounInfo("grits")
adjectives['gritty']=adjInfo("gritty")
adjectives['grizzled']=adjInfo("grizzled")
nouns['grizzly']=nounInfo("grizzly")
nouns['groan']=nounInfo("groan")
nouns['groat']=nounInfo("groat")
nouns['groats']=nounInfo("groats")
nouns['grocer']=nounInfo("grocer")
nouns['grocery']=nounInfo("grocery")
nouns['grog']=nounInfo("grog")
adjectives['groggy']=adjInfo("groggy")
nouns['groin']=nounInfo("groin")
nouns['groom']=nounInfo("groom")
nouns['groove']=nounInfo("groove")
nouns['groover']=nounInfo("groover")
adjectives['groovy']=adjInfo("groovy")
adverbs['gropingly']="gropingly"
adjectives['gross']=adjInfo("gross")
nouns['gross']=nounInfo("gross")
adverbs['grossly']="grossly"
nouns['grossness']=nounInfo("grossness")
nouns['grot']=nounInfo("grot")
adjectives['grotesque']=adjInfo("grotesque")
nouns['grotesque']=nounInfo("grotesque")
adverbs['grotesquely']="grotesquely"
nouns['grotesqueness']=nounInfo("grotesqueness")
nouns['grotto']=nounInfo("grotto")
adjectives['grotty']=adjInfo("grotty")
nouns['grouch']=nounInfo("grouch")
adjectives['grouchy']=adjInfo("grouchy")
nouns['ground']=nounInfo("ground")
nouns['grounding']=nounInfo("grounding")
adjectives['groundless']=adjInfo("groundless")
nouns['groundnut']=nounInfo("groundnut")
nouns['groundsel']=nounInfo("groundsel")
nouns['groundsheet']=nounInfo("groundsheet")
nouns['groundsman']=nounInfo("groundsman")
nouns['groundwork']=nounInfo("groundwork")
nouns['group']=nounInfo("group")
nouns['grouse']=nounInfo("grouse")
nouns['grove']=nounInfo("grove")
nouns['groveller']=nounInfo("groveller")
nouns['grower']=nounInfo("grower")
adverbs['growingly']="growingly"
nouns['growl']=nounInfo("growl")
nouns['growler']=nounInfo("growler")
adverbs['growlingly']="growlingly"
nouns['growth']=nounInfo("growth")
nouns['groyne']=nounInfo("groyne")
nouns['grub']=nounInfo("grub")
adjectives['grubby']=adjInfo("grubby")
nouns['grudge']=nounInfo("grudge")
adverbs['grudgingly']="grudgingly"
nouns['gruel']=nounInfo("gruel")
adjectives['gruelling']=adjInfo("gruelling")
adjectives['gruesome']=adjInfo("gruesome")
adverbs['gruesomely']="gruesomely"
nouns['gruesomeness']=nounInfo("gruesomeness")
adjectives['gruff']=adjInfo("gruff")
adverbs['gruffly']="gruffly"
nouns['gruffness']=nounInfo("gruffness")
nouns['grumble']=nounInfo("grumble")
nouns['grumbler']=nounInfo("grumbler")
adverbs['grumpily']="grumpily"
nouns['grumpiness']=nounInfo("grumpiness")
adjectives['grumpy']=adjInfo("grumpy")
nouns['grunt']=nounInfo("grunt")
nouns['gryphon']=nounInfo("gryphon")
nouns['guano']=nounInfo("guano")
nouns['guarantee']=nounInfo("guarantee")
nouns['guarantor']=nounInfo("guarantor")
nouns['guaranty']=nounInfo("guaranty")
nouns['guard']=nounInfo("guard").addAttributes({"g":"x"})
adjectives['guarded']=adjInfo("guarded")
adverbs['guardedly']="guardedly"
nouns['guardhouse']=nounInfo("guardhouse")
nouns['guardian']=nounInfo("guardian").addAttributes({"g":"x"})
nouns['guardianship']=nounInfo("guardianship")
nouns['guardroom']=nounInfo("guardroom")
nouns['guardsman']=nounInfo("guardsman")
nouns['guava']=nounInfo("guava")
nouns['gudgeon']=nounInfo("gudgeon")
nouns['guerilla']=nounInfo("guerilla")
nouns['guerrilla']=nounInfo("guerrilla")
nouns['guess']=nounInfo("guess")
nouns['guesstimate']=nounInfo("guesstimate")
nouns['guest']=nounInfo("guest").addAttributes({"g":"x"})
nouns['guesthouse']=nounInfo("guesthouse")
nouns['guestroom']=nounInfo("guestroom")
nouns['guffaw']=nounInfo("guffaw")
nouns['guidance']=nounInfo("guidance")
nouns['guide']=nounInfo("guide").addAttributes({"g":"x"})
nouns['guidebook']=nounInfo("guidebook")
nouns['guideline']=nounInfo("guideline")
nouns['guild']=nounInfo("guild")
nouns['guilder']=nounInfo("guilder")
nouns['guile']=nounInfo("guile")
adjectives['guileful']=adjInfo("guileful")
adjectives['guileless']=adjInfo("guileless")
nouns['guillemot']=nounInfo("guillemot")
nouns['guillotine']=nounInfo("guillotine")
nouns['guilt']=nounInfo("guilt")
adverbs['guiltily']="guiltily"
nouns['guiltiness']=nounInfo("guiltiness")
adjectives['guiltless']=adjInfo("guiltless")
adjectives['guilty']=adjInfo("guilty")
nouns['guinea']=nounInfo("guinea")
nouns['guise']=nounInfo("guise")
nouns['guitar']=nounInfo("guitar")
nouns['gulch']=nounInfo("gulch")
nouns['gulden']=nounInfo("gulden")
nouns['gulf']=nounInfo("gulf")
nouns['gull']=nounInfo("gull")
nouns['gullet']=nounInfo("gullet")
nouns['gullibility']=nounInfo("gullibility")
adjectives['gullible']=adjInfo("gullible")
nouns['gully']=nounInfo("gully")
nouns['gulp']=nounInfo("gulp")
nouns['gum']=nounInfo("gum")
nouns['gumbo']=nounInfo("gumbo")
nouns['gumboil']=nounInfo("gumboil")
nouns['gumboot']=nounInfo("gumboot")
adjectives['gummy']=adjInfo("gummy")
nouns['gumption']=nounInfo("gumption")
nouns['gumshoe']=nounInfo("gumshoe")
nouns['gun']=nounInfo("gun")
nouns['gunboat']=nounInfo("gunboat")
nouns['gunfire']=nounInfo("gunfire")
nouns['gunman']=nounInfo("gunman")
nouns['gunner']=nounInfo("gunner")
nouns['gunnery']=nounInfo("gunnery")
nouns['gunny']=nounInfo("gunny")
nouns['gunpowder']=nounInfo("gunpowder")
nouns['gunroom']=nounInfo("gunroom")
nouns['gunshot']=nounInfo("gunshot")
nouns['gunsmith']=nounInfo("gunsmith")
nouns['gunwale']=nounInfo("gunwale")
nouns['gurgle']=nounInfo("gurgle")
nouns['guru']=nounInfo("guru")
nouns['gush']=nounInfo("gush")
nouns['gusher']=nounInfo("gusher")
adjectives['gushing']=adjInfo("gushing")
adverbs['gushingly']="gushingly"
nouns['gusset']=nounInfo("gusset")
nouns['gust']=nounInfo("gust")
nouns['gustation']=nounInfo("gustation")
nouns['gusto']=nounInfo("gusto")
adjectives['gusty']=adjInfo("gusty")
nouns['gut']=nounInfo("gut")
adjectives['gutless']=adjInfo("gutless")
nouns['gutter']=nounInfo("gutter")
nouns['guttersnipe']=nounInfo("guttersnipe")
adjectives['guttural']=adjInfo("guttural")
nouns['guttural']=nounInfo("guttural")
adverbs['gutturally']="gutturally"
nouns['guvnor']=nounInfo("guvnor")
nouns['guy']=nounInfo("guy")
nouns['guzzler']=nounInfo("guzzler")
nouns['gym']=nounInfo("gym")
nouns['gymkhana']=nounInfo("gymkhana")
nouns['gymnasium']=nounInfo("gymnasium")
nouns['gymnast']=nounInfo("gymnast").addAttributes({"g":"x"})
adjectives['gymnastic']=adjInfo("gymnastic")
nouns['gymnastics']=nounInfo("gymnastics")
adjectives['gynaecological']=adjInfo("gynaecological")
nouns['gynaecologist']=nounInfo("gynaecologist")
nouns['gynaecology']=nounInfo("gynaecology")
adjectives['gynecological']=adjInfo("gynecological")
nouns['gynecologist']=nounInfo("gynecologist")
nouns['gyp']=nounInfo("gyp")
nouns['gypsum']=nounInfo("gypsum")
nouns['gyration']=nounInfo("gyration")
nouns['gyro']=nounInfo("gyro")
nouns['gyroscope']=nounInfo("gyroscope")
adjectives['gyroscopic']=adjInfo("gyroscopic")
nouns['ha']=nounInfo("ha")
nouns['haberdasher']=nounInfo("haberdasher")
nouns['haberdashery']=nounInfo("haberdashery")
nouns['habiliment']=nounInfo("habiliment")
nouns['habit']=nounInfo("habit")
adjectives['habitable']=adjInfo("habitable")
nouns['habitat']=nounInfo("habitat")
nouns['habitation']=nounInfo("habitation")
adjectives['habitual']=adjInfo("habitual")
adverbs['habitually']="habitually"
nouns['habitude']=nounInfo("habitude")
nouns['hacienda']=nounInfo("hacienda")
nouns['hack']=nounInfo("hack")
nouns['hackles']=nounInfo("hackles")
nouns['hackney']=nounInfo("hackney")
adjectives['hackneyed']=adjInfo("hackneyed")
nouns['hacksaw']=nounInfo("hacksaw")
nouns['haddock']=nounInfo("haddock")
nouns['haematite']=nounInfo("haematite")
nouns['haemoglobin']=nounInfo("haemoglobin")
nouns['haemophilia']=nounInfo("haemophilia")
nouns['haemophiliac']=nounInfo("haemophiliac")
nouns['haemorrhage']=nounInfo("haemorrhage")
nouns['haemorrhoids']=nounInfo("haemorrhoids")
nouns['haft']=nounInfo("haft")
nouns['hag']=nounInfo("hag")
adjectives['haggard']=adjInfo("haggard")
nouns['haggis']=nounInfo("haggis")
nouns['hagiology']=nounInfo("hagiology")
nouns['haha']=nounInfo("haha")
nouns['hail']=nounInfo("hail")
nouns['hailstone']=nounInfo("hailstone")
nouns['hailstorm']=nounInfo("hailstorm")
nouns['hair']=nounInfo("hair")
nouns['hairbrush']=nounInfo("hairbrush")
nouns['haircloth']=nounInfo("haircloth")
nouns['haircut']=nounInfo("haircut")
nouns['hairdresser']=nounInfo("hairdresser")
nouns['hairiness']=nounInfo("hairiness")
adjectives['hairless']=adjInfo("hairless")
adjectives['hairlike']=adjInfo("hairlike")
nouns['hairline']=nounInfo("hairline")
nouns['hairnet']=nounInfo("hairnet")
nouns['hairpiece']=nounInfo("hairpiece")
nouns['hairpin']=nounInfo("hairpin")
nouns['hairspring']=nounInfo("hairspring")
nouns['hairstyle']=nounInfo("hairstyle")
nouns['hairstylist']=nounInfo("hairstylist")
adjectives['hairy']=adjInfo("hairy")
nouns['hake']=nounInfo("hake")
nouns['halberd']=nounInfo("halberd")
nouns['halberdier']=nounInfo("halberdier")
adjectives['halcyon']=adjInfo("halcyon")
adjectives['hale']=adjInfo("hale")
adjectives['half']=adjInfo("half")
adverbs['half']="half"
nouns['half']=nounInfo("half")
nouns['halfpenny']=nounInfo("halfpenny")
nouns['halfpennyworth']=nounInfo("halfpennyworth")
nouns['halibut']=nounInfo("halibut")
nouns['halitosis']=nounInfo("halitosis")
nouns['hall']=nounInfo("hall")
nouns['hallelujah']=nounInfo("hallelujah")
nouns['halliard']=nounInfo("halliard")
nouns['hallmark']=nounInfo("hallmark")
nouns['hallo']=nounInfo("hallo")
nouns['halloo']=nounInfo("halloo")
nouns['hallow']=nounInfo("hallow")
nouns['hallucination']=nounInfo("hallucination")
adjectives['hallucinatory']=adjInfo("hallucinatory")
adjectives['hallucinogenic']=adjInfo("hallucinogenic")
nouns['halma']=nounInfo("halma")
nouns['halo']=nounInfo("halo")
adjectives['halt']=adjInfo("halt")
nouns['halt']=nounInfo("halt")
nouns['halter']=nounInfo("halter")
adverbs['haltingly']="haltingly"
nouns['halyard']=nounInfo("halyard")
nouns['ham']=nounInfo("ham")
nouns['hamadryad']=nounInfo("hamadryad")
nouns['hamburger']=nounInfo("hamburger")
nouns['hamlet']=nounInfo("hamlet")
nouns['hammer']=nounInfo("hammer")
nouns['hammock']=nounInfo("hammock")
nouns['hamper']=nounInfo("hamper")
nouns['hamster']=nounInfo("hamster")
nouns['hand']=nounInfo("hand")
nouns['handbag']=nounInfo("handbag")
nouns['handbill']=nounInfo("handbill")
nouns['handbook']=nounInfo("handbook")
nouns['handbrake']=nounInfo("handbrake")
nouns['handcart']=nounInfo("handcart")
nouns['handclap']=nounInfo("handclap")
nouns['handcuff']=nounInfo("handcuff")
nouns['handful']=nounInfo("handful")
nouns['handicap']=nounInfo("handicap")
nouns['handicraft']=nounInfo("handicraft")
adverbs['handily']="handily"
nouns['handiness']=nounInfo("handiness")
nouns['handiwork']=nounInfo("handiwork")
nouns['handkerchief']=nounInfo("handkerchief")
nouns['handle']=nounInfo("handle")
nouns['handlebar']=nounInfo("handlebar")
nouns['handler']=nounInfo("handler")
nouns['handmaid']=nounInfo("handmaid")
nouns['handrail']=nounInfo("handrail")
nouns['handsaw']=nounInfo("handsaw")
nouns['handshake']=nounInfo("handshake")
adjectives['handsome']=adjInfo("handsome")
adverbs['handsomely']="handsomely"
nouns['handstand']=nounInfo("handstand")
nouns['handwork']=nounInfo("handwork")
nouns['handwriting']=nounInfo("handwriting")
adjectives['handy']=adjInfo("handy")
nouns['handyman']=nounInfo("handyman")
nouns['hang']=nounInfo("hang")
nouns['hangar']=nounInfo("hangar")
adjectives['hangdog']=adjInfo("hangdog")
nouns['hanger']=nounInfo("hanger")
nouns['hanging']=nounInfo("hanging")
nouns['hangman']=nounInfo("hangman")
nouns['hangnail']=nounInfo("hangnail")
nouns['hangover']=nounInfo("hangover")
nouns['hank']=nounInfo("hank")
nouns['hankering']=nounInfo("hankering")
nouns['hanky']=nounInfo("hanky")
nouns['hansom']=nounInfo("hansom")
nouns['hap']=nounInfo("hap")
adjectives['haphazard']=adjInfo("haphazard")
adverbs['haphazard']="haphazard"
adverbs['haphazardly']="haphazardly"
adjectives['hapless']=adjInfo("hapless")
adverbs['haply']="haply"
nouns['happening']=nounInfo("happening")
adverbs['happily']="happily"
nouns['happiness']=nounInfo("happiness")
adjectives['happy']=adjInfo("happy")
nouns['harangue']=nounInfo("harangue")
nouns['harassment']=nounInfo("harassment")
nouns['harbinger']=nounInfo("harbinger")
nouns['harbour']=nounInfo("harbour")
nouns['harbourage']=nounInfo("harbourage")
adjectives['hard']=adjInfo("hard")
adverbs['hard']="hard"
nouns['hardback']=nounInfo("hardback")
adjectives['hardbacked']=adjInfo("hardbacked")
nouns['hardboard']=nounInfo("hardboard")
adjectives['hardbound']=adjInfo("hardbound")
nouns['hardcover']=nounInfo("hardcover")
adjectives['hardcovered']=adjInfo("hardcovered")
adjectives['hardhitting']=adjInfo("hardhitting")
nouns['hardihood']=nounInfo("hardihood")
nouns['hardiness']=nounInfo("hardiness")
adverbs['hardly']="hardly"
nouns['hardness']=nounInfo("hardness")
nouns['hardship']=nounInfo("hardship")
nouns['hardtop']=nounInfo("hardtop")
nouns['hardware']=nounInfo("hardware")
nouns['hardwood']=nounInfo("hardwood")
adjectives['hardworking']=adjInfo("hardworking")
adjectives['hardy']=adjInfo("hardy")
nouns['hare']=nounInfo("hare")
nouns['harebell']=nounInfo("harebell")
nouns['harelip']=nounInfo("harelip")
nouns['harem']=nounInfo("harem")
nouns['haricot']=nounInfo("haricot")
nouns['harlequin']=nounInfo("harlequin")
nouns['harlequinade']=nounInfo("harlequinade")
nouns['harlot']=nounInfo("harlot")
nouns['harm']=nounInfo("harm")
nouns['harmattan']=nounInfo("harmattan")
adjectives['harmful']=adjInfo("harmful")
adverbs['harmfully']="harmfully"
adjectives['harmless']=adjInfo("harmless")
adverbs['harmlessly']="harmlessly"
nouns['harmonic']=nounInfo("harmonic")
nouns['harmonica']=nounInfo("harmonica")
adjectives['harmonious']=adjInfo("harmonious")
adverbs['harmoniously']="harmoniously"
nouns['harmonium']=nounInfo("harmonium")
nouns['harmonization']=nounInfo("harmonization")
nouns['harmony']=nounInfo("harmony")
nouns['harness']=nounInfo("harness")
nouns['harp']=nounInfo("harp")
nouns['harper']=nounInfo("harper")
nouns['harpist']=nounInfo("harpist")
nouns['harpoon']=nounInfo("harpoon")
nouns['harpsichord']=nounInfo("harpsichord")
nouns['harpy']=nounInfo("harpy")
nouns['harridan']=nounInfo("harridan")
nouns['harrier']=nounInfo("harrier")
nouns['harrow']=nounInfo("harrow")
adjectives['harsh']=adjInfo("harsh")
adverbs['harshly']="harshly"
nouns['harshness']=nounInfo("harshness")
nouns['hart']=nounInfo("hart")
nouns['harvest']=nounInfo("harvest")
nouns['harvester']=nounInfo("harvester")
nouns['hash']=nounInfo("hash")
nouns['hashish']=nounInfo("hashish")
nouns['hasp']=nounInfo("hasp")
nouns['hassle']=nounInfo("hassle")
nouns['hassock']=nounInfo("hassock")
nouns['haste']=nounInfo("haste")
adverbs['hastily']="hastily"
nouns['hastiness']=nounInfo("hastiness")
adjectives['hasty']=adjInfo("hasty")
nouns['hat']=nounInfo("hat")
nouns['hatch']=nounInfo("hatch")
nouns['hatchery']=nounInfo("hatchery")
nouns['hatchet']=nounInfo("hatchet")
nouns['hatching']=nounInfo("hatching")
nouns['hatchway']=nounInfo("hatchway")
nouns['hate']=nounInfo("hate")
adjectives['hateful']=adjInfo("hateful")
adverbs['hatefully']="hatefully"
nouns['hatful']=nounInfo("hatful")
adjectives['hatless']=adjInfo("hatless")
nouns['hatred']=nounInfo("hatred")
nouns['hatter']=nounInfo("hatter")
nouns['hauberk']=nounInfo("hauberk")
adverbs['haughtily']="haughtily"
nouns['haughtiness']=nounInfo("haughtiness")
adjectives['haughty']=adjInfo("haughty")
nouns['haul']=nounInfo("haul")
nouns['haulage']=nounInfo("haulage")
nouns['haulier']=nounInfo("haulier")
nouns['haulm']=nounInfo("haulm")
nouns['haunch']=nounInfo("haunch")
nouns['haunt']=nounInfo("haunt")
nouns['hautboy']=nounInfo("hautboy")
nouns['hauteur']=nounInfo("hauteur")
nouns['haven']=nounInfo("haven")
nouns['haversack']=nounInfo("haversack")
nouns['haves']=nounInfo("haves")
nouns['havoc']=nounInfo("havoc")
nouns['haw']=nounInfo("haw")
nouns['hawk']=nounInfo("hawk")
nouns['hawker']=nounInfo("hawker").addAttributes({"g":"x"})
nouns['hawser']=nounInfo("hawser")
nouns['hawthorn']=nounInfo("hawthorn")
nouns['hay']=nounInfo("hay")
nouns['haycock']=nounInfo("haycock")
nouns['hayrick']=nounInfo("hayrick")
nouns['haystack']=nounInfo("haystack")
adjectives['haywire']=adjInfo("haywire")
nouns['haywire']=nounInfo("haywire")
nouns['hazard']=nounInfo("hazard")
adjectives['hazardous']=adjInfo("hazardous")
nouns['haze']=nounInfo("haze")
nouns['hazel']=nounInfo("hazel")
adverbs['hazily']="hazily"
nouns['haziness']=nounInfo("haziness")
adjectives['hazy']=adjInfo("hazy")
nouns['head']=nounInfo("head")
nouns['headache']=nounInfo("headache")
nouns['headband']=nounInfo("headband")
nouns['headdress']=nounInfo("headdress")
adjectives['headed']=adjInfo("headed")
nouns['header']=nounInfo("header")
nouns['headgear']=nounInfo("headgear")
nouns['heading']=nounInfo("heading")
nouns['headlamp']=nounInfo("headlamp")
nouns['headland']=nounInfo("headland")
adjectives['headless']=adjInfo("headless")
nouns['headlight']=nounInfo("headlight")
nouns['headline']=nounInfo("headline")
adjectives['headlong']=adjInfo("headlong")
adverbs['headlong']="headlong"
nouns['headman']=nounInfo("headman")
nouns['headmaster']=nounInfo("headmaster").addAttributes({"g":"x"})
nouns['headmistress']=nounInfo("headmistress").addAttributes({"g":"f"})
nouns['headphones']=nounInfo("headphones")
nouns['headpiece']=nounInfo("headpiece")
nouns['headquarters']=nounInfo("headquarters")
nouns['headroom']=nounInfo("headroom")
nouns['headset']=nounInfo("headset")
nouns['headship']=nounInfo("headship")
nouns['headstall']=nounInfo("headstall")
nouns['headstone']=nounInfo("headstone")
adjectives['headstrong']=adjInfo("headstrong")
nouns['headway']=nounInfo("headway")
nouns['headword']=nounInfo("headword")
adjectives['heady']=adjInfo("heady")
nouns['healer']=nounInfo("healer")
adjectives['healing']=adjInfo("healing")
nouns['health']=nounInfo("health")
adjectives['healthful']=adjInfo("healthful")
adverbs['healthily']="healthily"
adjectives['healthy']=adjInfo("healthy")
nouns['heap']=nounInfo("heap")
adverbs['heaps']="heaps"
nouns['hearer']=nounInfo("hearer")
nouns['hearing']=nounInfo("hearing")
nouns['hearsay']=nounInfo("hearsay")
nouns['hearse']=nounInfo("hearse")
nouns['heart']=nounInfo("heart")
nouns['heartache']=nounInfo("heartache")
nouns['heartbeat']=nounInfo("heartbeat")
nouns['heartbreak']=nounInfo("heartbreak")
adjectives['heartbreaking']=adjInfo("heartbreaking")
adjectives['heartbroken']=adjInfo("heartbroken")
nouns['heartburn']=nounInfo("heartburn")
nouns['heartburning']=nounInfo("heartburning")
adjectives['hearted']=adjInfo("hearted")
adjectives['heartfelt']=adjInfo("heartfelt")
nouns['hearth']=nounInfo("hearth")
adverbs['heartily']="heartily"
adjectives['heartless']=adjInfo("heartless")
adverbs['heartlessly']="heartlessly"
nouns['heartlessness']=nounInfo("heartlessness")
adjectives['heartsick']=adjInfo("heartsick")
nouns['heartstrings']=nounInfo("heartstrings")
adjectives['hearty']=adjInfo("hearty")
nouns['heat']=nounInfo("heat")
adjectives['heated']=adjInfo("heated")
adverbs['heatedly']="heatedly"
nouns['heater']=nounInfo("heater")
nouns['heath']=nounInfo("heath")
nouns['heathen']=nounInfo("heathen")
adjectives['heathenish']=adjInfo("heathenish")
nouns['heather']=nounInfo("heather")
nouns['heating']=nounInfo("heating")
nouns['heatspot']=nounInfo("heatspot")
nouns['heatwave']=nounInfo("heatwave")
nouns['heave']=nounInfo("heave")
nouns['heaven']=nounInfo("heaven")
adjectives['heavenly']=adjInfo("heavenly")
adjectives['heavensent']=adjInfo("heavensent")
adjectives['heavenward']=adjInfo("heavenward")
adverbs['heavenward']="heavenward"
adjectives['heavenwards']=adjInfo("heavenwards")
adverbs['heavenwards']="heavenwards"
adverbs['heavily']="heavily"
nouns['heaviness']=nounInfo("heaviness")
adjectives['heavy']=adjInfo("heavy")
adverbs['heavy']="heavy"
nouns['heavyweight']=nounInfo("heavyweight")
adjectives['hebdomadal']=adjInfo("hebdomadal")
nouns['hecatomb']=nounInfo("hecatomb")
nouns['heck']=nounInfo("heck")
nouns['heckler']=nounInfo("heckler")
nouns['hectare']=nounInfo("hectare")
adjectives['hectic']=adjInfo("hectic")
nouns['hedge']=nounInfo("hedge")
nouns['hedgehog']=nounInfo("hedgehog")
nouns['hedgerow']=nounInfo("hedgerow")
nouns['hedonism']=nounInfo("hedonism")
nouns['hedonist']=nounInfo("hedonist")
adjectives['hedonistic']=adjInfo("hedonistic")
nouns['heed']=nounInfo("heed")
adjectives['heedful']=adjInfo("heedful")
adjectives['heedless']=adjInfo("heedless")
adverbs['heedlessly']="heedlessly"
nouns['heehaw']=nounInfo("heehaw")
nouns['heel']=nounInfo("heel")
adjectives['hefty']=adjInfo("hefty")
nouns['hegemony']=nounInfo("hegemony")
nouns['heifer']=nounInfo("heifer")
nouns['heighho']=nounInfo("heighho")
nouns['height']=nounInfo("height")
adjectives['heinous']=adjInfo("heinous")
adverbs['heinously']="heinously"
nouns['heinousness']=nounInfo("heinousness")
nouns['heir']=nounInfo("heir").addAttributes({"g":"m"})
nouns['heiress']=nounInfo("heiress").addAttributes({"g":"f"})
nouns['heirloom']=nounInfo("heirloom")
nouns['helicopter']=nounInfo("helicopter")
nouns['heliograph']=nounInfo("heliograph")
nouns['heliotrope']=nounInfo("heliotrope")
nouns['heliport']=nounInfo("heliport")
nouns['helium']=nounInfo("helium")
nouns['hell']=nounInfo("hell")
adjectives['hellish']=adjInfo("hellish")
nouns['hello']=nounInfo("hello")
nouns['helm']=nounInfo("helm")
nouns['helmet']=nounInfo("helmet")
adjectives['helmeted']=adjInfo("helmeted")
nouns['helmsman']=nounInfo("helmsman")
nouns['helot']=nounInfo("helot")
nouns['help']=nounInfo("help")
nouns['helper']=nounInfo("helper").addAttributes({"g":"x"})
adjectives['helpful']=adjInfo("helpful")
adverbs['helpfully']="helpfully"
nouns['helpfulness']=nounInfo("helpfulness")
nouns['helping']=nounInfo("helping")
adjectives['helpless']=adjInfo("helpless")
adverbs['helplessly']="helplessly"
nouns['helplessness']=nounInfo("helplessness")
nouns['helpmate']=nounInfo("helpmate")
nouns['helpmeet']=nounInfo("helpmeet")
nouns['helve']=nounInfo("helve")
nouns['hem']=nounInfo("hem")
nouns['hematite']=nounInfo("hematite")
nouns['hemisphere']=nounInfo("hemisphere")
nouns['hemlock']=nounInfo("hemlock")
nouns['hemoglobin']=nounInfo("hemoglobin")
nouns['hemophilia']=nounInfo("hemophilia")
nouns['hemophiliac']=nounInfo("hemophiliac")
nouns['hemorrhage']=nounInfo("hemorrhage")
nouns['hemorrhoids']=nounInfo("hemorrhoids")
nouns['hemp']=nounInfo("hemp")
adjectives['hempen']=adjInfo("hempen")
nouns['hemstitch']=nounInfo("hemstitch")
nouns['hen']=nounInfo("hen")
nouns['henbane']=nounInfo("henbane")
adverbs['hence']="hence"
adverbs['henceforth']="henceforth"
adverbs['henceforward']="henceforward"
nouns['henchman']=nounInfo("henchman")
nouns['henna']=nounInfo("henna")
adjectives['hennaed']=adjInfo("hennaed")
adjectives['hep']=adjInfo("hep")
nouns['hepatitis']=nounInfo("hepatitis")
nouns['heptagon']=nounInfo("heptagon")
nouns['herald']=nounInfo("herald")
adjectives['heraldic']=adjInfo("heraldic")
nouns['heraldry']=nounInfo("heraldry")
nouns['herb']=nounInfo("herb").addAttributes({"hAn":"1"})
adjectives['herbaceous']=adjInfo("herbaceous")
nouns['herbage']=nounInfo("herbage")
adjectives['herbal']=adjInfo("herbal")
nouns['herbalist']=nounInfo("herbalist")
adjectives['herbivorous']=adjInfo("herbivorous")
adjectives['herculean']=adjInfo("herculean")
nouns['herd']=nounInfo("herd")
nouns['herdsman']=nounInfo("herdsman")
adverbs['here']="here"
adverbs['hereabouts']="hereabouts"
adverbs['hereafter']="hereafter"
nouns['hereafter']=nounInfo("hereafter")
adverbs['hereby']="hereby"
nouns['hereditament']=nounInfo("hereditament")
adjectives['hereditary']=adjInfo("hereditary")
nouns['heredity']=nounInfo("heredity")
adverbs['herein']="herein"
adverbs['hereof']="hereof"
nouns['heresy']=nounInfo("heresy")
nouns['heretic']=nounInfo("heretic")
adjectives['heretical']=adjInfo("heretical")
adverbs['hereto']="hereto"
adverbs['heretofore']="heretofore"
adverbs['hereupon']="hereupon"
adverbs['herewith']="herewith"
adjectives['heritable']=adjInfo("heritable")
nouns['heritage']=nounInfo("heritage")
nouns['hermaphrodite']=nounInfo("hermaphrodite")
adjectives['hermetic']=adjInfo("hermetic")
adverbs['hermetically']="hermetically"
nouns['hermit']=nounInfo("hermit")
nouns['hermitage']=nounInfo("hermitage")
nouns['hernia']=nounInfo("hernia")
nouns['hero']=nounInfo("hero").addAttributes({"g":"m"})
adjectives['heroic']=adjInfo("heroic")
adverbs['heroically']="heroically"
nouns['heroics']=nounInfo("heroics")
nouns['heroin']=nounInfo("heroin")
nouns['heroine']=nounInfo("heroine").addAttributes({"g":"f"})
nouns['heroism']=nounInfo("heroism")
nouns['heron']=nounInfo("heron")
nouns['heronry']=nounInfo("heronry")
nouns['herring']=nounInfo("herring")
nouns['herringbone']=nounInfo("herringbone")
nouns['hertz']=nounInfo("hertz")
nouns['hesitance']=nounInfo("hesitance")
nouns['hesitancy']=nounInfo("hesitancy")
adjectives['hesitant']=adjInfo("hesitant")
adverbs['hesitantly']="hesitantly"
adverbs['hesitatingly']="hesitatingly"
nouns['hesitation']=nounInfo("hesitation")
nouns['hessian']=nounInfo("hessian")
adjectives['heterodox']=adjInfo("heterodox")
nouns['heterodoxy']=nounInfo("heterodoxy")
adjectives['heterogeneous']=adjInfo("heterogeneous")
adjectives['heterosexual']=adjInfo("heterosexual")
nouns['heterosexual']=nounInfo("heterosexual")
nouns['heterosexuality']=nounInfo("heterosexuality")
adjectives['heuristic']=adjInfo("heuristic")
nouns['heuristics']=nounInfo("heuristics")
nouns['hewer']=nounInfo("hewer")
nouns['hexagon']=nounInfo("hexagon")
adjectives['hexagonal']=adjInfo("hexagonal")
nouns['hexameter']=nounInfo("hexameter")
nouns['hey']=nounInfo("hey")
nouns['hi']=nounInfo("hi")
nouns['hiatus']=nounInfo("hiatus")
nouns['hibernation']=nounInfo("hibernation")
nouns['hibiscus']=nounInfo("hibiscus")
nouns['hiccough']=nounInfo("hiccough")
nouns['hiccup']=nounInfo("hiccup")
adjectives['hick']=adjInfo("hick")
nouns['hick']=nounInfo("hick")
nouns['hickory']=nounInfo("hickory")
nouns['hide']=nounInfo("hide")
adjectives['hidebound']=adjInfo("hidebound")
adjectives['hideous']=adjInfo("hideous")
adverbs['hideously']="hideously"
nouns['hiding']=nounInfo("hiding")
adjectives['hierarchic']=adjInfo("hierarchic")
adjectives['hierarchical']=adjInfo("hierarchical")
adverbs['hierarchically']="hierarchically"
nouns['hierarchy']=nounInfo("hierarchy")
nouns['hieroglyph']=nounInfo("hieroglyph")
adjectives['hieroglyphic']=adjInfo("hieroglyphic")
nouns['hieroglyphics']=nounInfo("hieroglyphics")
adjectives['high']=adjInfo("high")
adverbs['high']="high"
nouns['highball']=nounInfo("highball")
adjectives['highborn']=adjInfo("highborn")
nouns['highboy']=nounInfo("highboy")
adjectives['highbrow']=adjInfo("highbrow")
nouns['highbrow']=nounInfo("highbrow")
nouns['highflier']=nounInfo("highflier")
adjectives['highflown']=adjInfo("highflown")
nouns['highflyer']=nounInfo("highflyer")
adjectives['highflying']=adjInfo("highflying")
nouns['highjack']=nounInfo("highjack")
nouns['highland']=nounInfo("highland")
nouns['highlight']=nounInfo("highlight")
adverbs['highly']="highly"
nouns['highness']=nounInfo("highness")
nouns['highroad']=nounInfo("highroad")
nouns['highway']=nounInfo("highway")
nouns['highwayman']=nounInfo("highwayman")
nouns['hijack']=nounInfo("hijack")
nouns['hijacker']=nounInfo("hijacker")
nouns['hike']=nounInfo("hike")
nouns['hiker']=nounInfo("hiker")
adjectives['hilarious']=adjInfo("hilarious")
adverbs['hilariously']="hilariously"
nouns['hilarity']=nounInfo("hilarity")
nouns['hill']=nounInfo("hill")
nouns['hillock']=nounInfo("hillock")
nouns['hillside']=nounInfo("hillside")
adjectives['hilly']=adjInfo("hilly")
nouns['hilt']=nounInfo("hilt")
adjectives['hind']=adjInfo("hind")
nouns['hind']=nounInfo("hind")
adjectives['hindmost']=adjInfo("hindmost")
nouns['hindrance']=nounInfo("hindrance")
nouns['hindsight']=nounInfo("hindsight")
nouns['hinge']=nounInfo("hinge")
nouns['hint']=nounInfo("hint")
nouns['hinterland']=nounInfo("hinterland")
adjectives['hip']=adjInfo("hip")
nouns['hip']=nounInfo("hip")
nouns['hippie']=nounInfo("hippie")
nouns['hippo']=nounInfo("hippo")
nouns['hippodrome']=nounInfo("hippodrome")
nouns['hippopotamus']=nounInfo("hippopotamus")
nouns['hippy']=nounInfo("hippy")
nouns['hire']=nounInfo("hire")
nouns['hireling']=nounInfo("hireling")
adjectives['hirsute']=adjInfo("hirsute")
nouns['hiss']=nounInfo("hiss")
nouns['historian']=nounInfo("historian").addAttributes({"g":"x"})
adjectives['historic']=adjInfo("historic")
adjectives['historical']=adjInfo("historical")
adverbs['historically']="historically"
nouns['history']=nounInfo("history")
adjectives['histrionic']=adjInfo("histrionic")
nouns['histrionics']=nounInfo("histrionics")
nouns['hit']=nounInfo("hit")
nouns['hitch']=nounInfo("hitch")
nouns['hitchhiker']=nounInfo("hitchhiker")
adverbs['hither']="hither"
adverbs['hitherto']="hitherto"
nouns['hive']=nounInfo("hive")
nouns['hives']=nounInfo("hives")
nouns['ho']=nounInfo("ho")
adjectives['hoar']=adjInfo("hoar")
nouns['hoard']=nounInfo("hoard")
nouns['hoarder']=nounInfo("hoarder")
nouns['hoarding']=nounInfo("hoarding")
nouns['hoarfrost']=nounInfo("hoarfrost")
nouns['hoariness']=nounInfo("hoariness")
adjectives['hoarse']=adjInfo("hoarse")
adverbs['hoarsely']="hoarsely"
nouns['hoarseness']=nounInfo("hoarseness")
adjectives['hoary']=adjInfo("hoary")
nouns['hoax']=nounInfo("hoax")
nouns['hoaxer']=nounInfo("hoaxer")
nouns['hob']=nounInfo("hob")
nouns['hobble']=nounInfo("hobble")
nouns['hobbledehoy']=nounInfo("hobbledehoy")
nouns['hobby']=nounInfo("hobby")
nouns['hobbyhorse']=nounInfo("hobbyhorse")
nouns['hobgoblin']=nounInfo("hobgoblin")
nouns['hobnail']=nounInfo("hobnail")
adjectives['hobnailed']=adjInfo("hobnailed")
nouns['hobo']=nounInfo("hobo")
nouns['hock']=nounInfo("hock")
nouns['hockey']=nounInfo("hockey")
nouns['hod']=nounInfo("hod")
nouns['hodgepodge']=nounInfo("hodgepodge")
nouns['hoe']=nounInfo("hoe")
nouns['hog']=nounInfo("hog")
adjectives['hoggish']=adjInfo("hoggish")
nouns['hogshead']=nounInfo("hogshead")
nouns['hogwash']=nounInfo("hogwash")
nouns['hoist']=nounInfo("hoist")
nouns['hold']=nounInfo("hold")
nouns['holder']=nounInfo("holder")
nouns['holding']=nounInfo("holding")
nouns['holdup']=nounInfo("holdup")
nouns['hole']=nounInfo("hole")
nouns['holiday']=nounInfo("holiday")
nouns['holiness']=nounInfo("holiness")
nouns['holloa']=nounInfo("holloa")
adjectives['hollow']=adjInfo("hollow")
nouns['hollow']=nounInfo("hollow")
nouns['holly']=nounInfo("holly")
nouns['hollyhock']=nounInfo("hollyhock")
nouns['holocaust']=nounInfo("holocaust")
nouns['holograph']=nounInfo("holograph")
nouns['holster']=nounInfo("holster")
adjectives['holy']=adjInfo("holy")
nouns['holy']=nounInfo("holy")
nouns['holystone']=nounInfo("holystone")
nouns['homage']=nounInfo("homage")
adverbs['home']="home"
nouns['home']=nounInfo("home")
nouns['homecoming']=nounInfo("homecoming")
nouns['homeland']=nounInfo("homeland")
adjectives['homeless']=adjInfo("homeless")
adjectives['homelike']=adjInfo("homelike")
nouns['homeliness']=nounInfo("homeliness")
adjectives['homely']=adjInfo("homely")
nouns['homeopath']=nounInfo("homeopath")
adjectives['homesick']=adjInfo("homesick")
nouns['homesickness']=nounInfo("homesickness")
adjectives['homespun']=adjInfo("homespun")
nouns['homespun']=nounInfo("homespun")
nouns['homestead']=nounInfo("homestead")
adjectives['homeward']=adjInfo("homeward")
adverbs['homeward']="homeward"
adverbs['homewards']="homewards"
nouns['homework']=nounInfo("homework")
adjectives['homey']=adjInfo("homey")
adjectives['homicidal']=adjInfo("homicidal")
nouns['homicide']=nounInfo("homicide")
adjectives['homiletic']=adjInfo("homiletic")
nouns['homiletics']=nounInfo("homiletics")
nouns['homily']=nounInfo("homily")
adjectives['homing']=adjInfo("homing")
nouns['hominy']=nounInfo("hominy")
nouns['homo']=nounInfo("homo")
nouns['homoeopath']=nounInfo("homoeopath")
nouns['homoeopathy']=nounInfo("homoeopathy")
nouns['homogeneity']=nounInfo("homogeneity")
adjectives['homogeneous']=adjInfo("homogeneous")
nouns['homograph']=nounInfo("homograph")
nouns['homonym']=nounInfo("homonym")
nouns['homophone']=nounInfo("homophone")
adjectives['homosexual']=adjInfo("homosexual")
nouns['homosexual']=nounInfo("homosexual")
nouns['homosexuality']=nounInfo("homosexuality")
nouns['hone']=nounInfo("hone")
adjectives['honest']=adjInfo("honest")
adverbs['honestly']="honestly"
nouns['honesty']=nounInfo("honesty")
nouns['honey']=nounInfo("honey")
nouns['honeybee']=nounInfo("honeybee")
nouns['honeycomb']=nounInfo("honeycomb")
nouns['honeydew']=nounInfo("honeydew")
adjectives['honeyed']=adjInfo("honeyed")
nouns['honeymoon']=nounInfo("honeymoon")
nouns['honeysuckle']=nounInfo("honeysuckle")
nouns['honk']=nounInfo("honk")
nouns['honorarium']=nounInfo("honorarium")
adjectives['honorary']=adjInfo("honorary")
adjectives['honorific']=adjInfo("honorific")
nouns['honorific']=nounInfo("honorific")
nouns['honour']=nounInfo("honour").addAttributes({"hAn":"1"})
adjectives['honourable']=adjInfo("honourable")
adverbs['honourably']="honourably"
nouns['hooch']=nounInfo("hooch")
nouns['hood']=nounInfo("hood")
nouns['hoodlum']=nounInfo("hoodlum")
nouns['hoodoo']=nounInfo("hoodoo")
nouns['hooey']=nounInfo("hooey")
nouns['hoof']=nounInfo("hoof")
nouns['hook']=nounInfo("hook")
nouns['hookah']=nounInfo("hookah")
adjectives['hooked']=adjInfo("hooked")
nouns['hookworm']=nounInfo("hookworm")
nouns['hooky']=nounInfo("hooky")
nouns['hooligan']=nounInfo("hooligan")
nouns['hooliganism']=nounInfo("hooliganism")
nouns['hoop']=nounInfo("hoop")
nouns['hooray']=nounInfo("hooray")
nouns['hoot']=nounInfo("hoot")
nouns['hooter']=nounInfo("hooter")
nouns['hop']=nounInfo("hop")
nouns['hope']=nounInfo("hope")
adjectives['hopeful']=adjInfo("hopeful")
adverbs['hopefully']="hopefully"
nouns['hopefulness']=nounInfo("hopefulness")
adjectives['hopeless']=adjInfo("hopeless")
adverbs['hopelessly']="hopelessly"
nouns['hopelessness']=nounInfo("hopelessness")
nouns['hopper']=nounInfo("hopper")
nouns['hopscotch']=nounInfo("hopscotch")
nouns['horde']=nounInfo("horde")
nouns['horizon']=nounInfo("horizon")
adjectives['horizontal']=adjInfo("horizontal")
adverbs['horizontally']="horizontally"
nouns['hormone']=nounInfo("hormone")
nouns['horn']=nounInfo("horn")
nouns['hornbeam']=nounInfo("hornbeam")
nouns['hornbill']=nounInfo("hornbill")
adjectives['horned']=adjInfo("horned")
nouns['hornet']=nounInfo("hornet")
adjectives['hornless']=adjInfo("hornless")
adjectives['hornlike']=adjInfo("hornlike")
nouns['hornpipe']=nounInfo("hornpipe")
adjectives['horny']=adjInfo("horny")
nouns['horology']=nounInfo("horology")
nouns['horoscope']=nounInfo("horoscope")
adjectives['horrible']=adjInfo("horrible")
adverbs['horribly']="horribly"
adjectives['horrid']=adjInfo("horrid")
adverbs['horridly']="horridly"
nouns['horridness']=nounInfo("horridness")
adjectives['horrific']=adjInfo("horrific")
adverbs['horrifyingly']="horrifyingly"
nouns['horror']=nounInfo("horror")
nouns['horse']=nounInfo("horse")
nouns['horseback']=nounInfo("horseback")
nouns['horsebox']=nounInfo("horsebox")
nouns['horseflesh']=nounInfo("horseflesh")
nouns['horsefly']=nounInfo("horsefly")
nouns['horsehair']=nounInfo("horsehair")
nouns['horseman']=nounInfo("horseman")
nouns['horsemanship']=nounInfo("horsemanship")
nouns['horsemeat']=nounInfo("horsemeat")
nouns['horsepower']=nounInfo("horsepower")
nouns['horseshoe']=nounInfo("horseshoe")
nouns['horsewhip']=nounInfo("horsewhip")
nouns['horsewoman']=nounInfo("horsewoman")
adjectives['horsy']=adjInfo("horsy")
adjectives['hortative']=adjInfo("hortative")
adjectives['horticultural']=adjInfo("horticultural")
nouns['horticulture']=nounInfo("horticulture")
nouns['horticulturist']=nounInfo("horticulturist")
nouns['hosanna']=nounInfo("hosanna")
nouns['hose']=nounInfo("hose")
nouns['hosepipe']=nounInfo("hosepipe")
nouns['hosier']=nounInfo("hosier")
nouns['hosiery']=nounInfo("hosiery")
nouns['hospice']=nounInfo("hospice")
adjectives['hospitable']=adjInfo("hospitable")
adverbs['hospitably']="hospitably"
nouns['hospital']=nounInfo("hospital")
nouns['hospitality']=nounInfo("hospitality")
nouns['hospitalization']=nounInfo("hospitalization")
nouns['host']=nounInfo("host").addAttributes({"g":"m"})
nouns['hostage']=nounInfo("hostage").addAttributes({"g":"x"})
nouns['hostel']=nounInfo("hostel")
nouns['hosteller']=nounInfo("hosteller")
nouns['hostelry']=nounInfo("hostelry")
nouns['hostess']=nounInfo("hostess").addAttributes({"g":"f"})
adjectives['hostile']=adjInfo("hostile")
adverbs['hostilely']="hostilely"
nouns['hostility']=nounInfo("hostility")
adjectives['hot']=adjInfo("hot")
nouns['hotbed']=nounInfo("hotbed")
nouns['hotchpotch']=nounInfo("hotchpotch")
nouns['hotel']=nounInfo("hotel")
nouns['hotelier']=nounInfo("hotelier")
adverbs['hotfoot']="hotfoot"
nouns['hothead']=nounInfo("hothead")
adverbs['hotly']="hotly"
nouns['hotplate']=nounInfo("hotplate")
nouns['hound']=nounInfo("hound")
nouns['hour']=nounInfo("hour").addAttributes({"hAn":"1"})
nouns['hourglass']=nounInfo("hourglass")
nouns['houri']=nounInfo("houri")
adjectives['hourly']=adjInfo("hourly")
adverbs['hourly']="hourly"
nouns['house']=nounInfo("house")
nouns['houseboat']=nounInfo("houseboat")
adjectives['housebound']=adjInfo("housebound")
nouns['housebreaker']=nounInfo("housebreaker")
nouns['housecoat']=nounInfo("housecoat")
nouns['housecraft']=nounInfo("housecraft")
nouns['housedog']=nounInfo("housedog")
nouns['housefather']=nounInfo("housefather")
nouns['housefly']=nounInfo("housefly")
nouns['houseful']=nounInfo("houseful")
nouns['household']=nounInfo("household")
nouns['householder']=nounInfo("householder")
nouns['housekeeper']=nounInfo("housekeeper")
nouns['houselights']=nounInfo("houselights")
nouns['housemaid']=nounInfo("housemaid")
nouns['houseman']=nounInfo("houseman")
nouns['housemaster']=nounInfo("housemaster")
nouns['housemother']=nounInfo("housemother")
adjectives['houseproud']=adjInfo("houseproud")
nouns['houseroom']=nounInfo("houseroom")
nouns['housetop']=nounInfo("housetop")
adjectives['housetrained']=adjInfo("housetrained")
nouns['housewife']=nounInfo("housewife")
adjectives['housewifely']=adjInfo("housewifely")
nouns['housewifery']=nounInfo("housewifery")
nouns['housework']=nounInfo("housework")
nouns['housewrecker']=nounInfo("housewrecker")
nouns['housing']=nounInfo("housing")
nouns['hovel']=nounInfo("hovel")
nouns['hovercraft']=nounInfo("hovercraft")
adverbs['how']="how"
nouns['howdah']=nounInfo("howdah")
adverbs['however']="however"
nouns['howitzer']=nounInfo("howitzer")
nouns['howl']=nounInfo("howl")
nouns['howler']=nounInfo("howler")
adjectives['howling']=adjInfo("howling")
nouns['hoyden']=nounInfo("hoyden")
adjectives['hoydenish']=adjInfo("hoydenish")
nouns['hub']=nounInfo("hub")
nouns['hubbub']=nounInfo("hubbub")
nouns['hubby']=nounInfo("hubby")
nouns['hubris']=nounInfo("hubris")
nouns['huckaback']=nounInfo("huckaback")
nouns['huckleberry']=nounInfo("huckleberry")
nouns['huckster']=nounInfo("huckster")
nouns['huddle']=nounInfo("huddle")
nouns['hue']=nounInfo("hue")
adjectives['hued']=adjInfo("hued")
nouns['huff']=nounInfo("huff")
adverbs['huffily']="huffily"
adjectives['huffish']=adjInfo("huffish")
adjectives['huffy']=adjInfo("huffy")
nouns['hug']=nounInfo("hug")
adjectives['huge']=adjInfo("huge")
adverbs['hugely']="hugely"
nouns['hula']=nounInfo("hula")
nouns['hulk']=nounInfo("hulk")
adjectives['hulking']=adjInfo("hulking")
nouns['hull']=nounInfo("hull")
nouns['hullabaloo']=nounInfo("hullabaloo")
nouns['hullo']=nounInfo("hullo")
nouns['hum']=nounInfo("hum")
adjectives['human']=adjInfo("human")
nouns['human']=nounInfo("human").addAttributes({"g":"x"})
adjectives['humane']=adjInfo("humane")
adverbs['humanely']="humanely"
nouns['humanism']=nounInfo("humanism")
nouns['humanist']=nounInfo("humanist")
adjectives['humanitarian']=adjInfo("humanitarian")
nouns['humanitarian']=nounInfo("humanitarian")
nouns['humanitarianism']=nounInfo("humanitarianism")
nouns['humanity']=nounInfo("humanity")
nouns['humankind']=nounInfo("humankind")
adverbs['humanly']="humanly"
adjectives['humble']=adjInfo("humble")
adverbs['humbly']="humbly"
nouns['humbug']=nounInfo("humbug")
nouns['humdinger']=nounInfo("humdinger")
adjectives['humdrum']=adjInfo("humdrum")
nouns['humerus']=nounInfo("humerus")
adjectives['humid']=adjInfo("humid")
nouns['humidity']=nounInfo("humidity")
nouns['humiliation']=nounInfo("humiliation")
nouns['humility']=nounInfo("humility")
nouns['hummingbird']=nounInfo("hummingbird")
nouns['hummock']=nounInfo("hummock")
nouns['humorist']=nounInfo("humorist")
adjectives['humorous']=adjInfo("humorous")
adverbs['humorously']="humorously"
nouns['humour']=nounInfo("humour")
nouns['hump']=nounInfo("hump")
nouns['humpback']=nounInfo("humpback")
adjectives['humpbacked']=adjInfo("humpbacked")
nouns['humph']=nounInfo("humph")
nouns['humus']=nounInfo("humus")
nouns['hunch']=nounInfo("hunch")
nouns['hundred']=nounInfo("hundred")
adverbs['hundredfold']="hundredfold"
adjectives['hundredth']=adjInfo("hundredth")
nouns['hundredth']=nounInfo("hundredth")
nouns['hundredweight']=nounInfo("hundredweight")
nouns['hunger']=nounInfo("hunger")
adverbs['hungrily']="hungrily"
adjectives['hungry']=adjInfo("hungry")
nouns['hunk']=nounInfo("hunk")
nouns['hunker']=nounInfo("hunker")
nouns['hunt']=nounInfo("hunt")
nouns['hunter']=nounInfo("hunter").addAttributes({"g":"x"})
nouns['hunting']=nounInfo("hunting")
nouns['huntress']=nounInfo("huntress").addAttributes({"g":"f"})
nouns['huntsman']=nounInfo("huntsman")
nouns['hurdle']=nounInfo("hurdle")
nouns['hurdler']=nounInfo("hurdler")
nouns['hurl']=nounInfo("hurl")
nouns['hurling']=nounInfo("hurling")
nouns['hurrah']=nounInfo("hurrah")
nouns['hurray']=nounInfo("hurray")
nouns['hurricane']=nounInfo("hurricane")
adjectives['hurried']=adjInfo("hurried")
adverbs['hurriedly']="hurriedly"
nouns['hurry']=nounInfo("hurry")
nouns['hurt']=nounInfo("hurt")
adjectives['hurtful']=adjInfo("hurtful")
nouns['husband']=nounInfo("husband").addAttributes({"g":"m"})
nouns['husbandman']=nounInfo("husbandman")
nouns['husbandry']=nounInfo("husbandry")
nouns['hush']=nounInfo("hush")
nouns['husk']=nounInfo("husk")
adverbs['huskily']="huskily"
nouns['huskiness']=nounInfo("huskiness")
adjectives['husky']=adjInfo("husky")
nouns['husky']=nounInfo("husky")
nouns['hussar']=nounInfo("hussar")
nouns['hussy']=nounInfo("hussy")
nouns['hustings']=nounInfo("hustings")
nouns['hustle']=nounInfo("hustle")
nouns['hustler']=nounInfo("hustler")
nouns['hut']=nounInfo("hut")
nouns['hutch']=nounInfo("hutch")
nouns['hutment']=nounInfo("hutment")
adjectives['hutted']=adjInfo("hutted")
nouns['hyacinth']=nounInfo("hyacinth")
nouns['hyaena']=nounInfo("hyaena")
adjectives['hybrid']=adjInfo("hybrid")
nouns['hybrid']=nounInfo("hybrid")
nouns['hydra']=nounInfo("hydra")
nouns['hydrangea']=nounInfo("hydrangea")
nouns['hydrant']=nounInfo("hydrant")
nouns['hydrate']=nounInfo("hydrate")
adjectives['hydraulic']=adjInfo("hydraulic")
adverbs['hydraulically']="hydraulically"
nouns['hydraulics']=nounInfo("hydraulics")
nouns['hydrocarbon']=nounInfo("hydrocarbon")
adjectives['hydrochloric']=adjInfo("hydrochloric")
adjectives['hydroelectric']=adjInfo("hydroelectric")
nouns['hydrofoil']=nounInfo("hydrofoil")
nouns['hydrogen']=nounInfo("hydrogen")
adjectives['hydropathic']=adjInfo("hydropathic")
nouns['hydropathy']=nounInfo("hydropathy")
nouns['hydrophobia']=nounInfo("hydrophobia")
nouns['hydroplane']=nounInfo("hydroplane")
nouns['hydroponics']=nounInfo("hydroponics")
nouns['hyena']=nounInfo("hyena")
nouns['hygiene']=nounInfo("hygiene")
adjectives['hygienic']=adjInfo("hygienic")
adverbs['hygienically']="hygienically"
nouns['hymen']=nounInfo("hymen")
nouns['hymn']=nounInfo("hymn")
nouns['hymnal']=nounInfo("hymnal")
nouns['hyperbola']=nounInfo("hyperbola")
nouns['hyperbole']=nounInfo("hyperbole")
adjectives['hypercritical']=adjInfo("hypercritical")
nouns['hyperlink']=nounInfo("hyperlink")
nouns['hypermarket']=nounInfo("hypermarket")
nouns['hyphen']=nounInfo("hyphen")
nouns['hypnosis']=nounInfo("hypnosis")
adjectives['hypnotic']=adjInfo("hypnotic")
nouns['hypnotism']=nounInfo("hypnotism")
nouns['hypnotist']=nounInfo("hypnotist")
nouns['hypo']=nounInfo("hypo")
nouns['hypochondria']=nounInfo("hypochondria")
adjectives['hypochondriac']=adjInfo("hypochondriac")
nouns['hypochondriac']=nounInfo("hypochondriac")
nouns['hypocrisy']=nounInfo("hypocrisy")
nouns['hypocrite']=nounInfo("hypocrite")
adjectives['hypocritical']=adjInfo("hypocritical")
adverbs['hypocritically']="hypocritically"
adjectives['hypodermic']=adjInfo("hypodermic")
nouns['hypodermic']=nounInfo("hypodermic")
nouns['hypotenuse']=nounInfo("hypotenuse")
nouns['hypothesis']=nounInfo("hypothesis")
adjectives['hypothetical']=adjInfo("hypothetical")
nouns['hyssop']=nounInfo("hyssop")
nouns['hysteria']=nounInfo("hysteria")
adjectives['hysterical']=adjInfo("hysterical")
adverbs['hysterically']="hysterically"
nouns['hysterics']=nounInfo("hysterics")
nouns['iamb']=nounInfo("iamb")
adjectives['iambic']=adjInfo("iambic")
nouns['iambics']=nounInfo("iambics")
nouns['iambus']=nounInfo("iambus")
nouns['ibex']=nounInfo("ibex")
adverbs['ibidem']="ibidem"
nouns['ibis']=nounInfo("ibis")
nouns['ice']=nounInfo("ice")
nouns['iceberg']=nounInfo("iceberg")
nouns['iceboat']=nounInfo("iceboat")
adjectives['icebound']=adjInfo("icebound")
nouns['icebox']=nounInfo("icebox")
nouns['icebreaker']=nounInfo("icebreaker")
nouns['icecap']=nounInfo("icecap")
nouns['icecube']=nounInfo("icecube")
nouns['icefall']=nounInfo("icefall")
nouns['icefield']=nounInfo("icefield")
nouns['icefloe']=nounInfo("icefloe")
adjectives['icefree']=adjInfo("icefree")
nouns['icehouse']=nounInfo("icehouse")
nouns['icepack']=nounInfo("icepack")
nouns['icepick']=nounInfo("icepick")
nouns['icerink']=nounInfo("icerink")
nouns['ichneumon']=nounInfo("ichneumon")
nouns['icicle']=nounInfo("icicle")
adverbs['icily']="icily"
nouns['icing']=nounInfo("icing")
nouns['icon']=nounInfo("icon")
nouns['iconoclast']=nounInfo("iconoclast")
adjectives['icy']=adjInfo("icy")
nouns['id']=nounInfo("id")
nouns['idea']=nounInfo("idea")
adjectives['ideal']=adjInfo("ideal")
nouns['ideal']=nounInfo("ideal")
nouns['idealism']=nounInfo("idealism")
nouns['idealist']=nounInfo("idealist")
adjectives['idealistic']=adjInfo("idealistic")
nouns['idealization']=nounInfo("idealization")
adverbs['ideally']="ideally"
adverbs['idem']="idem"
adjectives['identical']=adjInfo("identical")
adverbs['identically']="identically"
nouns['identification']=nounInfo("identification")
nouns['identikit']=nounInfo("identikit")
nouns['identity']=nounInfo("identity")
nouns['ideogram']=nounInfo("ideogram")
nouns['ideograph']=nounInfo("ideograph")
adjectives['ideographic']=adjInfo("ideographic")
adjectives['ideological']=adjInfo("ideological")
adverbs['ideologically']="ideologically"
nouns['ideology']=nounInfo("ideology")
nouns['ides']=nounInfo("ides")
nouns['idiocy']=nounInfo("idiocy")
nouns['idiolect']=nounInfo("idiolect")
nouns['idiom']=nounInfo("idiom")
adjectives['idiomatic']=adjInfo("idiomatic")
adverbs['idiomatically']="idiomatically"
nouns['idiosyncrasy']=nounInfo("idiosyncrasy")
adjectives['idiosyncratic']=adjInfo("idiosyncratic")
nouns['idiot']=nounInfo("idiot")
adjectives['idiotic']=adjInfo("idiotic")
adverbs['idiotically']="idiotically"
adjectives['idle']=adjInfo("idle")
nouns['idleness']=nounInfo("idleness")
nouns['idler']=nounInfo("idler")
adverbs['idly']="idly"
nouns['idol']=nounInfo("idol")
nouns['idolater']=nounInfo("idolater")
nouns['idolatress']=nounInfo("idolatress")
adjectives['idolatrous']=adjInfo("idolatrous")
adverbs['idolatrously']="idolatrously"
nouns['idolatry']=nounInfo("idolatry")
nouns['idolization']=nounInfo("idolization")
nouns['idyll']=nounInfo("idyll")
adjectives['idyllic']=adjInfo("idyllic")
nouns['igloo']=nounInfo("igloo")
adjectives['igneous']=adjInfo("igneous")
nouns['ignition']=nounInfo("ignition")
adjectives['ignoble']=adjInfo("ignoble")
adverbs['ignobly']="ignobly"
adjectives['ignominious']=adjInfo("ignominious")
adverbs['ignominiously']="ignominiously"
nouns['ignominy']=nounInfo("ignominy")
nouns['ignoramus']=nounInfo("ignoramus")
nouns['ignorance']=nounInfo("ignorance")
adjectives['ignorant']=adjInfo("ignorant")
adverbs['ignorantly']="ignorantly"
nouns['iguana']=nounInfo("iguana")
nouns['ikon']=nounInfo("ikon")
nouns['ilex']=nounInfo("ilex")
nouns['ilk']=nounInfo("ilk")
adjectives['ill']=adjInfo("ill")
adverbs['ill']="ill"
nouns['ill']=nounInfo("ill")
adjectives['illegal']=adjInfo("illegal")
nouns['illegality']=nounInfo("illegality")
adverbs['illegally']="illegally"
nouns['illegibility']=nounInfo("illegibility")
adjectives['illegible']=adjInfo("illegible")
adverbs['illegibly']="illegibly"
nouns['illegitimacy']=nounInfo("illegitimacy")
adjectives['illegitimate']=adjInfo("illegitimate")
nouns['illegitimate']=nounInfo("illegitimate")
adverbs['illegitimately']="illegitimately"
adjectives['illiberal']=adjInfo("illiberal")
nouns['illiberality']=nounInfo("illiberality")
adverbs['illiberally']="illiberally"
adjectives['illicit']=adjInfo("illicit")
adverbs['illicitly']="illicitly"
adjectives['illimitable']=adjInfo("illimitable")
nouns['illiteracy']=nounInfo("illiteracy")
adjectives['illiterate']=adjInfo("illiterate")
nouns['illiterate']=nounInfo("illiterate")
nouns['illness']=nounInfo("illness")
adjectives['illogical']=adjInfo("illogical")
nouns['illogicality']=nounInfo("illogicality")
adverbs['illogically']="illogically"
nouns['illogicalness']=nounInfo("illogicalness")
nouns['illumination']=nounInfo("illumination")
nouns['illusion']=nounInfo("illusion")
nouns['illusionist']=nounInfo("illusionist")
adjectives['illusive']=adjInfo("illusive")
adjectives['illusory']=adjInfo("illusory")
nouns['illustration']=nounInfo("illustration")
adjectives['illustrative']=adjInfo("illustrative")
nouns['illustrator']=nounInfo("illustrator")
adjectives['illustrious']=adjInfo("illustrious")
adverbs['illustriously']="illustriously"
nouns['image']=nounInfo("image")
nouns['imagery']=nounInfo("imagery")
adjectives['imaginable']=adjInfo("imaginable")
adjectives['imaginary']=adjInfo("imaginary")
nouns['imagination']=nounInfo("imagination")
adjectives['imaginative']=adjInfo("imaginative")
nouns['imam']=nounInfo("imam")
nouns['imbalance']=nounInfo("imbalance")
adjectives['imbecile']=adjInfo("imbecile")
nouns['imbecile']=nounInfo("imbecile")
nouns['imbecility']=nounInfo("imbecility")
nouns['imbroglio']=nounInfo("imbroglio")
nouns['imitation']=nounInfo("imitation")
adjectives['imitative']=adjInfo("imitative")
nouns['imitator']=nounInfo("imitator")
adjectives['immaculate']=adjInfo("immaculate")
adverbs['immaculately']="immaculately"
nouns['immanence']=nounInfo("immanence")
adjectives['immanent']=adjInfo("immanent")
adjectives['immaterial']=adjInfo("immaterial")
adjectives['immature']=adjInfo("immature")
nouns['immaturity']=nounInfo("immaturity")
adjectives['immeasurable']=adjInfo("immeasurable")
adverbs['immeasurably']="immeasurably"
nouns['immediacy']=nounInfo("immediacy")
adjectives['immediate']=adjInfo("immediate")
adverbs['immediately']="immediately"
adjectives['immemorial']=adjInfo("immemorial")
adjectives['immense']=adjInfo("immense")
adverbs['immensely']="immensely"
nouns['immensity']=nounInfo("immensity")
nouns['immersion']=nounInfo("immersion")
nouns['immigrant']=nounInfo("immigrant").addAttributes({"g":"x"})
nouns['immigration']=nounInfo("immigration")
nouns['imminence']=nounInfo("imminence")
adjectives['imminent']=adjInfo("imminent")
adverbs['imminently']="imminently"
adjectives['immobile']=adjInfo("immobile")
nouns['immobility']=nounInfo("immobility")
nouns['immobilization']=nounInfo("immobilization")
adjectives['immoderate']=adjInfo("immoderate")
adverbs['immoderately']="immoderately"
adjectives['immodest']=adjInfo("immodest")
adverbs['immodestly']="immodestly"
nouns['immodesty']=nounInfo("immodesty")
nouns['immolation']=nounInfo("immolation")
adjectives['immoral']=adjInfo("immoral")
nouns['immorality']=nounInfo("immorality")
adverbs['immorally']="immorally"
adjectives['immortal']=adjInfo("immortal")
nouns['immortal']=nounInfo("immortal")
nouns['immortality']=nounInfo("immortality")
adjectives['immovable']=adjInfo("immovable")
adverbs['immovably']="immovably"
adjectives['immune']=adjInfo("immune")
nouns['immunity']=nounInfo("immunity")
nouns['immunization']=nounInfo("immunization")
nouns['immunology']=nounInfo("immunology")
nouns['immutability']=nounInfo("immutability")
adjectives['immutable']=adjInfo("immutable")
adverbs['immutably']="immutably"
nouns['imp']=nounInfo("imp")
nouns['impact']=nounInfo("impact")
nouns['impairment']=nounInfo("impairment")
nouns['impala']=nounInfo("impala")
nouns['impalement']=nounInfo("impalement")
adjectives['impalpable']=adjInfo("impalpable")
adjectives['impartial']=adjInfo("impartial")
nouns['impartiality']=nounInfo("impartiality")
adverbs['impartially']="impartially"
adjectives['impassable']=adjInfo("impassable")
nouns['impasse']=nounInfo("impasse")
adjectives['impassioned']=adjInfo("impassioned")
adjectives['impassive']=adjInfo("impassive")
adverbs['impassively']="impassively"
nouns['impassiveness']=nounInfo("impassiveness")
nouns['impassivity']=nounInfo("impassivity")
nouns['impatience']=nounInfo("impatience")
adjectives['impatient']=adjInfo("impatient")
adverbs['impatiently']="impatiently"
nouns['impeachment']=nounInfo("impeachment")
adjectives['impeccable']=adjInfo("impeccable")
adverbs['impeccably']="impeccably"
adjectives['impecunious']=adjInfo("impecunious")
nouns['impediment']=nounInfo("impediment")
nouns['impedimenta']=nounInfo("impedimenta")
nouns['impeller']=nounInfo("impeller")
adjectives['impenetrable']=adjInfo("impenetrable")
nouns['impenitence']=nounInfo("impenitence")
adjectives['impenitent']=adjInfo("impenitent")
adverbs['impenitently']="impenitently"
adjectives['imperative']=adjInfo("imperative")
adverbs['imperatively']="imperatively"
adjectives['imperceptible']=adjInfo("imperceptible")
adverbs['imperceptibly']="imperceptibly"
adjectives['imperfect']=adjInfo("imperfect")
nouns['imperfect']=nounInfo("imperfect")
nouns['imperfection']=nounInfo("imperfection")
adverbs['imperfectly']="imperfectly"
adjectives['imperial']=adjInfo("imperial")
nouns['imperial']=nounInfo("imperial")
nouns['imperialism']=nounInfo("imperialism")
nouns['imperialist']=nounInfo("imperialist")
adjectives['imperialistic']=adjInfo("imperialistic")
adverbs['imperially']="imperially"
adjectives['imperious']=adjInfo("imperious")
adverbs['imperiously']="imperiously"
nouns['imperiousness']=nounInfo("imperiousness")
adjectives['imperishable']=adjInfo("imperishable")
nouns['impermanence']=nounInfo("impermanence")
adjectives['impermanent']=adjInfo("impermanent")
adjectives['impermeable']=adjInfo("impermeable")
adjectives['impersonal']=adjInfo("impersonal")
adverbs['impersonally']="impersonally"
nouns['impersonation']=nounInfo("impersonation")
nouns['impersonator']=nounInfo("impersonator")
nouns['impertinence']=nounInfo("impertinence")
adjectives['impertinent']=adjInfo("impertinent")
adverbs['impertinently']="impertinently"
nouns['imperturbability']=nounInfo("imperturbability")
adjectives['imperturbable']=adjInfo("imperturbable")
adjectives['impervious']=adjInfo("impervious")
nouns['impetigo']=nounInfo("impetigo")
nouns['impetuosity']=nounInfo("impetuosity")
adjectives['impetuous']=adjInfo("impetuous")
adverbs['impetuously']="impetuously"
nouns['impetus']=nounInfo("impetus")
nouns['impiety']=nounInfo("impiety")
nouns['impingement']=nounInfo("impingement")
adjectives['impious']=adjInfo("impious")
adverbs['impiously']="impiously"
adjectives['impish']=adjInfo("impish")
adverbs['impishly']="impishly"
nouns['impishness']=nounInfo("impishness")
adjectives['implacable']=adjInfo("implacable")
nouns['implement']=nounInfo("implement")
nouns['implementation']=nounInfo("implementation")
nouns['implication']=nounInfo("implication")
adjectives['implicit']=adjInfo("implicit")
adverbs['implicitly']="implicitly"
adverbs['imploringly']="imploringly"
nouns['implosion']=nounInfo("implosion")
adjectives['impolite']=adjInfo("impolite")
adverbs['impolitely']="impolitely"
nouns['impoliteness']=nounInfo("impoliteness")
adjectives['impolitic']=adjInfo("impolitic")
adjectives['imponderable']=adjInfo("imponderable")
nouns['imponderable']=nounInfo("imponderable")
nouns['import']=nounInfo("import")
nouns['importance']=nounInfo("importance")
adjectives['important']=adjInfo("important")
adverbs['importantly']="importantly"
nouns['importation']=nounInfo("importation")
nouns['importer']=nounInfo("importer")
adjectives['importunate']=adjInfo("importunate")
adverbs['importunately']="importunately"
nouns['importunity']=nounInfo("importunity")
adjectives['imposing']=adjInfo("imposing")
adverbs['imposingly']="imposingly"
nouns['imposition']=nounInfo("imposition")
nouns['impossibility']=nounInfo("impossibility")
adjectives['impossible']=adjInfo("impossible")
adverbs['impossibly']="impossibly"
nouns['impostor']=nounInfo("impostor")
nouns['imposture']=nounInfo("imposture")
nouns['impotence']=nounInfo("impotence")
adjectives['impotent']=adjInfo("impotent")
adverbs['impotently']="impotently"
nouns['impoverishment']=nounInfo("impoverishment")
nouns['impracticability']=nounInfo("impracticability")
adjectives['impracticable']=adjInfo("impracticable")
nouns['impracticableness']=nounInfo("impracticableness")
adverbs['impracticably']="impracticably"
adjectives['impractical']=adjInfo("impractical")
nouns['imprecation']=nounInfo("imprecation")
nouns['impregnability']=nounInfo("impregnability")
adjectives['impregnable']=adjInfo("impregnable")
adverbs['impregnably']="impregnably"
nouns['impresario']=nounInfo("impresario")
nouns['impress']=nounInfo("impress")
nouns['impression']=nounInfo("impression")
adjectives['impressionable']=adjInfo("impressionable")
nouns['impressionism']=nounInfo("impressionism")
nouns['impressionist']=nounInfo("impressionist")
adjectives['impressionistic']=adjInfo("impressionistic")
adjectives['impressive']=adjInfo("impressive")
adverbs['impressively']="impressively"
nouns['impressiveness']=nounInfo("impressiveness")
nouns['imprimatur']=nounInfo("imprimatur")
nouns['imprint']=nounInfo("imprint")
nouns['imprisonment']=nounInfo("imprisonment")
nouns['improbability']=nounInfo("improbability")
adjectives['improbable']=adjInfo("improbable")
adverbs['improbably']="improbably"
adjectives['impromptu']=adjInfo("impromptu")
adverbs['impromptu']="impromptu"
nouns['impromptu']=nounInfo("impromptu")
adjectives['improper']=adjInfo("improper")
adverbs['improperly']="improperly"
nouns['impropriety']=nounInfo("impropriety")
nouns['improvement']=nounInfo("improvement")
nouns['improvidence']=nounInfo("improvidence")
adjectives['improvident']=adjInfo("improvident")
adverbs['improvidently']="improvidently"
nouns['improvisation']=nounInfo("improvisation")
nouns['imprudence']=nounInfo("imprudence")
adjectives['imprudent']=adjInfo("imprudent")
adverbs['imprudently']="imprudently"
nouns['impudence']=nounInfo("impudence")
adjectives['impudent']=adjInfo("impudent")
adverbs['impudently']="impudently"
nouns['impulse']=nounInfo("impulse")
nouns['impulsion']=nounInfo("impulsion")
adjectives['impulsive']=adjInfo("impulsive")
adverbs['impulsively']="impulsively"
nouns['impulsiveness']=nounInfo("impulsiveness")
nouns['impunity']=nounInfo("impunity")
adjectives['impure']=adjInfo("impure")
nouns['impurity']=nounInfo("impurity")
nouns['imputation']=nounInfo("imputation")
adverbs['in']="in"
nouns['in']=nounInfo("in")
prepositions['in']=P("in")
nouns['inability']=nounInfo("inability")
nouns['inaccessibility']=nounInfo("inaccessibility")
adjectives['inaccessible']=adjInfo("inaccessible")
nouns['inaccuracy']=nounInfo("inaccuracy")
adjectives['inaccurate']=adjInfo("inaccurate")
adverbs['inaccurately']="inaccurately"
nouns['inaction']=nounInfo("inaction")
adjectives['inactive']=adjInfo("inactive")
nouns['inactivity']=nounInfo("inactivity")
nouns['inadequacy']=nounInfo("inadequacy")
adjectives['inadequate']=adjInfo("inadequate")
adverbs['inadequately']="inadequately"
adjectives['inadmissible']=adjInfo("inadmissible")
nouns['inadvertence']=nounInfo("inadvertence")
adjectives['inadvertent']=adjInfo("inadvertent")
adverbs['inadvertently']="inadvertently"
adjectives['inalienable']=adjInfo("inalienable")
adjectives['inane']=adjInfo("inane")
adverbs['inanely']="inanely"
adjectives['inanimate']=adjInfo("inanimate")
nouns['inanition']=nounInfo("inanition")
nouns['inanity']=nounInfo("inanity")
adjectives['inapplicable']=adjInfo("inapplicable")
adjectives['inappreciable']=adjInfo("inappreciable")
adjectives['inappropriate']=adjInfo("inappropriate")
adverbs['inappropriately']="inappropriately"
adjectives['inapt']=adjInfo("inapt")
nouns['inaptitude']=nounInfo("inaptitude")
adverbs['inarguably']="inarguably"
adjectives['inarticulate']=adjInfo("inarticulate")
nouns['inattention']=nounInfo("inattention")
adjectives['inattentive']=adjInfo("inattentive")
nouns['inaudibility']=nounInfo("inaudibility")
adjectives['inaudible']=adjInfo("inaudible")
adjectives['inaugural']=adjInfo("inaugural")
nouns['inaugural']=nounInfo("inaugural")
nouns['inauguration']=nounInfo("inauguration")
adjectives['inauspicious']=adjInfo("inauspicious")
adverbs['inauspiciously']="inauspiciously"
adjectives['inboard']=adjInfo("inboard")
adjectives['inborn']=adjInfo("inborn")
adjectives['inbound']=adjInfo("inbound")
adjectives['inbred']=adjInfo("inbred")
nouns['inbreeding']=nounInfo("inbreeding")
adjectives['inbuilt']=adjInfo("inbuilt")
adjectives['incalculable']=adjInfo("incalculable")
nouns['incandescence']=nounInfo("incandescence")
adjectives['incandescent']=adjInfo("incandescent")
nouns['incantation']=nounInfo("incantation")
nouns['incapability']=nounInfo("incapability")
adjectives['incapable']=adjInfo("incapable")
nouns['incapacity']=nounInfo("incapacity")
nouns['incarceration']=nounInfo("incarceration")
adjectives['incarnate']=adjInfo("incarnate")
nouns['incarnation']=nounInfo("incarnation")
adjectives['incautious']=adjInfo("incautious")
adverbs['incautiously']="incautiously"
nouns['incendiarism']=nounInfo("incendiarism")
nouns['incendiary']=nounInfo("incendiary")
nouns['incense']=nounInfo("incense")
nouns['incentive']=nounInfo("incentive")
nouns['inception']=nounInfo("inception")
nouns['incertitude']=nounInfo("incertitude")
adjectives['incessant']=adjInfo("incessant")
adverbs['incessantly']="incessantly"
nouns['incest']=nounInfo("incest")
adjectives['incestuous']=adjInfo("incestuous")
nouns['inch']=nounInfo("inch")
adjectives['inchoate']=adjInfo("inchoate")
adjectives['inchoative']=adjInfo("inchoative")
nouns['incidence']=nounInfo("incidence")
adjectives['incident']=adjInfo("incident")
nouns['incident']=nounInfo("incident")
adjectives['incidental']=adjInfo("incidental")
adverbs['incidentally']="incidentally"
nouns['incineration']=nounInfo("incineration")
nouns['incinerator']=nounInfo("incinerator")
adjectives['incipient']=adjInfo("incipient")
nouns['incision']=nounInfo("incision")
adjectives['incisive']=adjInfo("incisive")
adverbs['incisively']="incisively"
nouns['incisor']=nounInfo("incisor")
nouns['incitement']=nounInfo("incitement")
nouns['incivility']=nounInfo("incivility")
nouns['inclemency']=nounInfo("inclemency")
adjectives['inclement']=adjInfo("inclement")
nouns['inclination']=nounInfo("inclination")
nouns['incline']=nounInfo("incline")
nouns['inclosure']=nounInfo("inclosure")
nouns['inclusion']=nounInfo("inclusion")
adjectives['inclusive']=adjInfo("inclusive")
adverbs['inclusively']="inclusively"
adjectives['incognito']=adjInfo("incognito")
adverbs['incognito']="incognito"
nouns['incoherence']=nounInfo("incoherence")
adjectives['incoherent']=adjInfo("incoherent")
adverbs['incoherently']="incoherently"
adjectives['incombustible']=adjInfo("incombustible")
nouns['income']=nounInfo("income")
adjectives['incoming']=adjInfo("incoming")
adjectives['incommensurate']=adjInfo("incommensurate")
adjectives['incommunicado']=adjInfo("incommunicado")
adjectives['incomparable']=adjInfo("incomparable")
adverbs['incomparably']="incomparably"
nouns['incompatibility']=nounInfo("incompatibility")
adjectives['incompatible']=adjInfo("incompatible")
nouns['incompetence']=nounInfo("incompetence")
nouns['incompetency']=nounInfo("incompetency")
adjectives['incompetent']=adjInfo("incompetent")
adverbs['incompetently']="incompetently"
adjectives['incomplete']=adjInfo("incomplete")
adverbs['incompletely']="incompletely"
nouns['incomprehensibility']=nounInfo("incomprehensibility")
adjectives['incomprehensible']=adjInfo("incomprehensible")
nouns['incomprehension']=nounInfo("incomprehension")
adjectives['incompressible']=adjInfo("incompressible")
adjectives['inconceivable']=adjInfo("inconceivable")
adjectives['inconclusive']=adjInfo("inconclusive")
adverbs['inconclusively']="inconclusively"
nouns['incongruity']=nounInfo("incongruity")
adjectives['incongruous']=adjInfo("incongruous")
adverbs['incongruously']="incongruously"
adjectives['inconsequent']=adjInfo("inconsequent")
adjectives['inconsequential']=adjInfo("inconsequential")
adverbs['inconsequentially']="inconsequentially"
adverbs['inconsequently']="inconsequently"
adjectives['inconsiderable']=adjInfo("inconsiderable")
adjectives['inconsiderate']=adjInfo("inconsiderate")
adverbs['inconsiderately']="inconsiderately"
nouns['inconsistency']=nounInfo("inconsistency")
adjectives['inconsistent']=adjInfo("inconsistent")
adverbs['inconsistently']="inconsistently"
adjectives['inconsolable']=adjInfo("inconsolable")
adjectives['inconspicuous']=adjInfo("inconspicuous")
adverbs['inconspicuously']="inconspicuously"
nouns['inconstancy']=nounInfo("inconstancy")
adjectives['inconstant']=adjInfo("inconstant")
adjectives['incontestable']=adjInfo("incontestable")
nouns['incontinence']=nounInfo("incontinence")
adjectives['incontinent']=adjInfo("incontinent")
adjectives['incontrovertible']=adjInfo("incontrovertible")
nouns['inconvenience']=nounInfo("inconvenience")
adjectives['inconvenient']=adjInfo("inconvenient")
adverbs['inconveniently']="inconveniently"
nouns['inconvertibility']=nounInfo("inconvertibility")
adjectives['inconvertible']=adjInfo("inconvertible")
adjectives['incorporate']=adjInfo("incorporate")
nouns['incorporation']=nounInfo("incorporation")
adjectives['incorporeal']=adjInfo("incorporeal")
adjectives['incorrect']=adjInfo("incorrect")
adverbs['incorrectly']="incorrectly"
nouns['incorrectness']=nounInfo("incorrectness")
adjectives['incorrigible']=adjInfo("incorrigible")
nouns['incorruptibility']=nounInfo("incorruptibility")
adjectives['incorruptible']=adjInfo("incorruptible")
nouns['increase']=nounInfo("increase")
adverbs['increasingly']="increasingly"
nouns['incredibility']=nounInfo("incredibility")
adjectives['incredible']=adjInfo("incredible")
adverbs['incredibly']="incredibly"
nouns['incredulity']=nounInfo("incredulity")
adjectives['incredulous']=adjInfo("incredulous")
adverbs['incredulously']="incredulously"
nouns['increment']=nounInfo("increment")
nouns['incrustation']=nounInfo("incrustation")
nouns['incubation']=nounInfo("incubation")
nouns['incubator']=nounInfo("incubator")
nouns['incubus']=nounInfo("incubus")
nouns['incumbency']=nounInfo("incumbency")
adjectives['incumbent']=adjInfo("incumbent")
nouns['incumbent']=nounInfo("incumbent")
adjectives['incurable']=adjInfo("incurable")
nouns['incurable']=nounInfo("incurable")
adverbs['incurably']="incurably"
adjectives['incurious']=adjInfo("incurious")
nouns['incursion']=nounInfo("incursion")
adjectives['incurved']=adjInfo("incurved")
adjectives['indebted']=adjInfo("indebted")
nouns['indebtedness']=nounInfo("indebtedness")
nouns['indecency']=nounInfo("indecency")
adjectives['indecent']=adjInfo("indecent")
adverbs['indecently']="indecently"
adjectives['indecipherable']=adjInfo("indecipherable")
nouns['indecision']=nounInfo("indecision")
adjectives['indecisive']=adjInfo("indecisive")
adverbs['indecisively']="indecisively"
adjectives['indecorous']=adjInfo("indecorous")
adverbs['indecorously']="indecorously"
nouns['indecorum']=nounInfo("indecorum")
adverbs['indeed']="indeed"
adjectives['indefatigable']=adjInfo("indefatigable")
adjectives['indefeasible']=adjInfo("indefeasible")
adjectives['indefensible']=adjInfo("indefensible")
adjectives['indefinable']=adjInfo("indefinable")
adjectives['indefinite']=adjInfo("indefinite")
adverbs['indefinitely']="indefinitely"
adjectives['indelible']=adjInfo("indelible")
adverbs['indelibly']="indelibly"
nouns['indelicacy']=nounInfo("indelicacy")
adjectives['indelicate']=adjInfo("indelicate")
nouns['indemnification']=nounInfo("indemnification")
nouns['indemnity']=nounInfo("indemnity")
nouns['indent']=nounInfo("indent")
nouns['indentation']=nounInfo("indentation")
nouns['indenture']=nounInfo("indenture")
nouns['independence']=nounInfo("independence")
adjectives['independent']=adjInfo("independent")
nouns['independent']=nounInfo("independent")
adverbs['independently']="independently"
adjectives['indescribable']=adjInfo("indescribable")
adverbs['indescribably']="indescribably"
nouns['indestructibility']=nounInfo("indestructibility")
adjectives['indestructible']=adjInfo("indestructible")
adjectives['indeterminable']=adjInfo("indeterminable")
adverbs['indeterminably']="indeterminably"
nouns['indeterminacy']=nounInfo("indeterminacy")
adjectives['indeterminate']=adjInfo("indeterminate")
nouns['index']=nounInfo("index")
nouns['indexation']=nounInfo("indexation")
nouns['indexer']=nounInfo("indexer")
nouns['indication']=nounInfo("indication")
adjectives['indicative']=adjInfo("indicative")
nouns['indicator']=nounInfo("indicator")
adjectives['indictable']=adjInfo("indictable")
nouns['indictment']=nounInfo("indictment")
nouns['indifference']=nounInfo("indifference")
adjectives['indifferent']=adjInfo("indifferent")
adverbs['indifferently']="indifferently"
nouns['indigence']=nounInfo("indigence")
adjectives['indigenous']=adjInfo("indigenous")
adjectives['indigent']=adjInfo("indigent")
adjectives['indigestible']=adjInfo("indigestible")
nouns['indigestion']=nounInfo("indigestion")
adjectives['indignant']=adjInfo("indignant")
adverbs['indignantly']="indignantly"
nouns['indignation']=nounInfo("indignation")
nouns['indignity']=nounInfo("indignity")
nouns['indigo']=nounInfo("indigo")
adjectives['indirect']=adjInfo("indirect")
adverbs['indirectly']="indirectly"
nouns['indirectness']=nounInfo("indirectness")
adjectives['indiscernible']=adjInfo("indiscernible")
nouns['indiscipline']=nounInfo("indiscipline")
adjectives['indiscreet']=adjInfo("indiscreet")
adverbs['indiscreetly']="indiscreetly"
adjectives['indiscrete']=adjInfo("indiscrete")
nouns['indiscretion']=nounInfo("indiscretion")
adjectives['indiscriminate']=adjInfo("indiscriminate")
adverbs['indiscriminately']="indiscriminately"
nouns['indispensability']=nounInfo("indispensability")
adjectives['indispensable']=adjInfo("indispensable")
adjectives['indisposed']=adjInfo("indisposed")
nouns['indisposition']=nounInfo("indisposition")
adjectives['indisputable']=adjInfo("indisputable")
adjectives['indissoluble']=adjInfo("indissoluble")
adverbs['indissolvably']="indissolvably"
adjectives['indistinct']=adjInfo("indistinct")
adverbs['indistinctly']="indistinctly"
nouns['indistinctness']=nounInfo("indistinctness")
adjectives['indistinguishable']=adjInfo("indistinguishable")
adjectives['individual']=adjInfo("individual")
nouns['individual']=nounInfo("individual")
nouns['individualism']=nounInfo("individualism")
nouns['individualist']=nounInfo("individualist")
adjectives['individualistic']=adjInfo("individualistic")
nouns['individuality']=nounInfo("individuality")
adverbs['individually']="individually"
adjectives['indivisible']=adjInfo("indivisible")
nouns['indoctrination']=nounInfo("indoctrination")
nouns['indolence']=nounInfo("indolence")
adjectives['indolent']=adjInfo("indolent")
adverbs['indolently']="indolently"
adjectives['indomitable']=adjInfo("indomitable")
adjectives['indoor']=adjInfo("indoor")
adverbs['indoors']="indoors"
adjectives['indrawn']=adjInfo("indrawn")
adjectives['indubitable']=adjInfo("indubitable")
adverbs['indubitably']="indubitably"
nouns['inducement']=nounInfo("inducement")
nouns['induction']=nounInfo("induction")
adjectives['inductive']=adjInfo("inductive")
nouns['indulgence']=nounInfo("indulgence")
adjectives['indulgent']=adjInfo("indulgent")
adverbs['indulgently']="indulgently"
adjectives['industrial']=adjInfo("industrial")
nouns['industrialism']=nounInfo("industrialism")
nouns['industrialist']=nounInfo("industrialist")
adjectives['industrialized']=adjInfo("industrialized")
adjectives['industrious']=adjInfo("industrious")
adverbs['industriously']="industriously"
nouns['industry']=nounInfo("industry")
adjectives['indwelling']=adjInfo("indwelling")
adjectives['inebriate']=adjInfo("inebriate")
nouns['inebriate']=nounInfo("inebriate")
nouns['inebriation']=nounInfo("inebriation")
nouns['inebriety']=nounInfo("inebriety")
adjectives['inedible']=adjInfo("inedible")
adjectives['ineffable']=adjInfo("ineffable")
adverbs['ineffably']="ineffably"
adjectives['ineffective']=adjInfo("ineffective")
adverbs['ineffectively']="ineffectively"
nouns['ineffectiveness']=nounInfo("ineffectiveness")
adjectives['ineffectual']=adjInfo("ineffectual")
adverbs['ineffectually']="ineffectually"
nouns['inefficiency']=nounInfo("inefficiency")
adjectives['inefficient']=adjInfo("inefficient")
adverbs['inefficiently']="inefficiently"
adjectives['inelastic']=adjInfo("inelastic")
nouns['inelegance']=nounInfo("inelegance")
adjectives['inelegant']=adjInfo("inelegant")
adverbs['inelegantly']="inelegantly"
nouns['ineligibility']=nounInfo("ineligibility")
adjectives['ineligible']=adjInfo("ineligible")
adjectives['ineluctable']=adjInfo("ineluctable")
adjectives['inept']=adjInfo("inept")
nouns['ineptitude']=nounInfo("ineptitude")
adverbs['ineptly']="ineptly"
nouns['inequality']=nounInfo("inequality")
adjectives['inequitable']=adjInfo("inequitable")
nouns['inequity']=nounInfo("inequity")
adjectives['ineradicable']=adjInfo("ineradicable")
adjectives['inert']=adjInfo("inert")
nouns['inertia']=nounInfo("inertia")
adjectives['inescapable']=adjInfo("inescapable")
adverbs['inescapably']="inescapably"
adjectives['inestimable']=adjInfo("inestimable")
nouns['inevitability']=nounInfo("inevitability")
adjectives['inevitable']=adjInfo("inevitable")
adverbs['inevitably']="inevitably"
adjectives['inexact']=adjInfo("inexact")
nouns['inexactitude']=nounInfo("inexactitude")
adjectives['inexcusable']=adjInfo("inexcusable")
adjectives['inexhaustible']=adjInfo("inexhaustible")
adjectives['inexistent']=adjInfo("inexistent")
adjectives['inexorable']=adjInfo("inexorable")
adverbs['inexorably']="inexorably"
nouns['inexpediency']=nounInfo("inexpediency")
adjectives['inexpedient']=adjInfo("inexpedient")
adjectives['inexpensive']=adjInfo("inexpensive")
adverbs['inexpensively']="inexpensively"
nouns['inexperience']=nounInfo("inexperience")
adjectives['inexperienced']=adjInfo("inexperienced")
adjectives['inexpert']=adjInfo("inexpert")
adverbs['inexpertly']="inexpertly"
adjectives['inexpiable']=adjInfo("inexpiable")
adjectives['inexplicable']=adjInfo("inexplicable")
adjectives['inexpressible']=adjInfo("inexpressible")
adjectives['inextinguishable']=adjInfo("inextinguishable")
adjectives['inextricable']=adjInfo("inextricable")
adverbs['inextricably']="inextricably"
nouns['infallibility']=nounInfo("infallibility")
adjectives['infallible']=adjInfo("infallible")
adjectives['infamous']=adjInfo("infamous")
nouns['infamy']=nounInfo("infamy")
nouns['infancy']=nounInfo("infancy")
nouns['infant']=nounInfo("infant").addAttributes({"g":"x"})
nouns['infanticide']=nounInfo("infanticide")
adjectives['infantile']=adjInfo("infantile")
nouns['infantilism']=nounInfo("infantilism")
nouns['infantry']=nounInfo("infantry")
nouns['infantryman']=nounInfo("infantryman")
nouns['infatuation']=nounInfo("infatuation")
nouns['infection']=nounInfo("infection")
adjectives['infectious']=adjInfo("infectious")
nouns['inference']=nounInfo("inference")
adjectives['inferential']=adjInfo("inferential")
adjectives['inferior']=adjInfo("inferior")
nouns['inferior']=nounInfo("inferior")
nouns['inferiority']=nounInfo("inferiority")
adjectives['infernal']=adjInfo("infernal")
adverbs['infernally']="infernally"
nouns['inferno']=nounInfo("inferno")
adjectives['infertile']=adjInfo("infertile")
nouns['infertility']=nounInfo("infertility")
nouns['infestation']=nounInfo("infestation")
nouns['infidel']=nounInfo("infidel")
nouns['infidelity']=nounInfo("infidelity")
nouns['infield']=nounInfo("infield")
nouns['infiltration']=nounInfo("infiltration")
adjectives['infinite']=adjInfo("infinite")
adverbs['infinitely']="infinitely"
adjectives['infinitesimal']=adjInfo("infinitesimal")
adjectives['infinitive']=adjInfo("infinitive")
nouns['infinitive']=nounInfo("infinitive")
nouns['infinitude']=nounInfo("infinitude")
nouns['infinity']=nounInfo("infinity")
adjectives['infirm']=adjInfo("infirm")
nouns['infirmary']=nounInfo("infirmary")
nouns['infirmity']=nounInfo("infirmity")
adjectives['inflammable']=adjInfo("inflammable")
nouns['inflammation']=nounInfo("inflammation")
adjectives['inflammatory']=adjInfo("inflammatory")
adjectives['inflatable']=adjInfo("inflatable")
nouns['inflation']=nounInfo("inflation")
adjectives['inflationary']=adjInfo("inflationary")
nouns['inflection']=nounInfo("inflection")
adjectives['inflectional']=adjInfo("inflectional")
nouns['inflexibility']=nounInfo("inflexibility")
adjectives['inflexible']=adjInfo("inflexible")
adverbs['inflexibly']="inflexibly"
nouns['inflexion']=nounInfo("inflexion")
nouns['infliction']=nounInfo("infliction")
nouns['inflorescence']=nounInfo("inflorescence")
nouns['inflow']=nounInfo("inflow")
nouns['influence']=nounInfo("influence")
adjectives['influential']=adjInfo("influential")
adverbs['influentially']="influentially"
nouns['influenza']=nounInfo("influenza")
nouns['influx']=nounInfo("influx")
adjectives['informal']=adjInfo("informal")
nouns['informality']=nounInfo("informality")
adverbs['informally']="informally"
nouns['informant']=nounInfo("informant")
nouns['information']=nounInfo("information")
adjectives['informative']=adjInfo("informative")
adverbs['informatively']="informatively"
nouns['informer']=nounInfo("informer").addAttributes({"g":"x"})
adverbs['infra']="infra"
nouns['infraction']=nounInfo("infraction")
nouns['infrastructure']=nounInfo("infrastructure")
nouns['infrequency']=nounInfo("infrequency")
adjectives['infrequent']=adjInfo("infrequent")
adverbs['infrequently']="infrequently"
nouns['infringement']=nounInfo("infringement")
nouns['infusion']=nounInfo("infusion")
nouns['ingathering']=nounInfo("ingathering")
adjectives['ingenious']=adjInfo("ingenious")
adverbs['ingeniously']="ingeniously"
nouns['ingenuity']=nounInfo("ingenuity")
adjectives['ingenuous']=adjInfo("ingenuous")
adverbs['ingenuously']="ingenuously"
nouns['ingenuousness']=nounInfo("ingenuousness")
adjectives['inglorious']=adjInfo("inglorious")
adverbs['ingloriously']="ingloriously"
adjectives['ingoing']=adjInfo("ingoing")
nouns['ingot']=nounInfo("ingot")
adjectives['ingrained']=adjInfo("ingrained")
adverbs['ingratiatingly']="ingratiatingly"
nouns['ingratitude']=nounInfo("ingratitude")
nouns['ingredient']=nounInfo("ingredient")
nouns['ingress']=nounInfo("ingress")
adjectives['ingrowing']=adjInfo("ingrowing")
adjectives['inhabitable']=adjInfo("inhabitable")
nouns['inhabitant']=nounInfo("inhabitant")
nouns['inhaler']=nounInfo("inhaler")
adjectives['inharmonious']=adjInfo("inharmonious")
adjectives['inherent']=adjInfo("inherent")
adverbs['inherently']="inherently"
nouns['inheritance']=nounInfo("inheritance")
nouns['inhibition']=nounInfo("inhibition")
adjectives['inhibitory']=adjInfo("inhibitory")
adjectives['inhospitable']=adjInfo("inhospitable")
adjectives['inhuman']=adjInfo("inhuman")
adjectives['inhumane']=adjInfo("inhumane")
adverbs['inhumanely']="inhumanely"
nouns['inhumanity']=nounInfo("inhumanity")
adjectives['inimical']=adjInfo("inimical")
adjectives['inimitable']=adjInfo("inimitable")
adverbs['inimitably']="inimitably"
adjectives['iniquitous']=adjInfo("iniquitous")
adverbs['iniquitously']="iniquitously"
nouns['iniquity']=nounInfo("iniquity")
adjectives['initial']=adjInfo("initial")
nouns['initial']=nounInfo("initial")
adverbs['initially']="initially"
adjectives['initiate']=adjInfo("initiate")
nouns['initiate']=nounInfo("initiate")
nouns['initiation']=nounInfo("initiation")
nouns['initiative']=nounInfo("initiative")
nouns['injection']=nounInfo("injection")
adjectives['injudicious']=adjInfo("injudicious")
adverbs['injudiciously']="injudiciously"
nouns['injunction']=nounInfo("injunction")
adjectives['injured']=adjInfo("injured")
adjectives['injurious']=adjInfo("injurious")
nouns['injury']=nounInfo("injury")
nouns['injustice']=nounInfo("injustice")
nouns['ink']=nounInfo("ink")
nouns['inkling']=nounInfo("inkling")
nouns['inkstand']=nounInfo("inkstand")
adjectives['inky']=adjInfo("inky")
adjectives['inland']=adjInfo("inland")
adverbs['inland']="inland"
nouns['inlay']=nounInfo("inlay")
nouns['inlet']=nounInfo("inlet")
nouns['inmate']=nounInfo("inmate")
adjectives['inmost']=adjInfo("inmost")
nouns['inn']=nounInfo("inn")
nouns['innards']=nounInfo("innards")
adjectives['innate']=adjInfo("innate")
adverbs['innately']="innately"
adjectives['inner']=adjInfo("inner")
adjectives['innermost']=adjInfo("innermost")
nouns['inning']=nounInfo("inning")
nouns['innings']=nounInfo("innings")
nouns['innkeeper']=nounInfo("innkeeper")
nouns['innocence']=nounInfo("innocence")
adjectives['innocent']=adjInfo("innocent")
nouns['innocent']=nounInfo("innocent")
adverbs['innocently']="innocently"
adjectives['innocuous']=adjInfo("innocuous")
nouns['innovation']=nounInfo("innovation")
adjectives['innovative']=adjInfo("innovative")
nouns['innovator']=nounInfo("innovator")
nouns['innuendo']=nounInfo("innuendo")
adjectives['innumerable']=adjInfo("innumerable")
nouns['inoculation']=nounInfo("inoculation")
adjectives['inoffensive']=adjInfo("inoffensive")
adverbs['inoffensively']="inoffensively"
adjectives['inoperable']=adjInfo("inoperable")
adjectives['inoperative']=adjInfo("inoperative")
adjectives['inopportune']=adjInfo("inopportune")
adverbs['inopportunely']="inopportunely"
adjectives['inordinate']=adjInfo("inordinate")
adverbs['inordinately']="inordinately"
adjectives['inorganic']=adjInfo("inorganic")
adverbs['inorganically']="inorganically"
adjectives['inpouring']=adjInfo("inpouring")
nouns['inpouring']=nounInfo("inpouring")
nouns['input']=nounInfo("input")
nouns['inquest']=nounInfo("inquest")
nouns['inquietude']=nounInfo("inquietude")
nouns['inquirer']=nounInfo("inquirer")
adjectives['inquiring']=adjInfo("inquiring")
adverbs['inquiringly']="inquiringly"
nouns['inquiry']=nounInfo("inquiry")
nouns['inquisition']=nounInfo("inquisition")
adjectives['inquisitive']=adjInfo("inquisitive")
adverbs['inquisitively']="inquisitively"
nouns['inquisitiveness']=nounInfo("inquisitiveness")
nouns['inquisitor']=nounInfo("inquisitor")
adjectives['inquisitorial']=adjInfo("inquisitorial")
nouns['inroad']=nounInfo("inroad")
nouns['inrush']=nounInfo("inrush")
adjectives['insane']=adjInfo("insane")
adverbs['insanely']="insanely"
adjectives['insanitary']=adjInfo("insanitary")
nouns['insanity']=nounInfo("insanity")
adjectives['insatiable']=adjInfo("insatiable")
adverbs['insatiably']="insatiably"
adjectives['insatiate']=adjInfo("insatiate")
nouns['inscription']=nounInfo("inscription")
adjectives['inscrutable']=adjInfo("inscrutable")
nouns['insect']=nounInfo("insect")
nouns['insecticide']=nounInfo("insecticide")
adjectives['insectivorous']=adjInfo("insectivorous")
adjectives['insecure']=adjInfo("insecure")
adverbs['insecurely']="insecurely"
nouns['insecurity']=nounInfo("insecurity")
nouns['insemination']=nounInfo("insemination")
adjectives['insensate']=adjInfo("insensate")
nouns['insensibility']=nounInfo("insensibility")
adjectives['insensible']=adjInfo("insensible")
adverbs['insensibly']="insensibly"
adjectives['insensitive']=adjInfo("insensitive")
adverbs['insensitively']="insensitively"
nouns['insensitivity']=nounInfo("insensitivity")
adjectives['insentient']=adjInfo("insentient")
adjectives['inseparable']=adjInfo("inseparable")
nouns['insert']=nounInfo("insert")
nouns['insertion']=nounInfo("insertion")
nouns['inset']=nounInfo("inset")
adjectives['inshore']=adjInfo("inshore")
adverbs['inshore']="inshore"
adjectives['inside']=adjInfo("inside")
adverbs['inside']="inside"
nouns['inside']=nounInfo("inside")
prepositions['inside']=P("inside")
nouns['insider']=nounInfo("insider")
adjectives['insidious']=adjInfo("insidious")
adverbs['insidiously']="insidiously"
nouns['insidiousness']=nounInfo("insidiousness")
nouns['insight']=nounInfo("insight")
adjectives['insightful']=adjInfo("insightful")
nouns['insignia']=nounInfo("insignia")
nouns['insignificance']=nounInfo("insignificance")
adjectives['insignificant']=adjInfo("insignificant")
adverbs['insignificantly']="insignificantly"
adjectives['insincere']=adjInfo("insincere")
adverbs['insincerely']="insincerely"
nouns['insincerity']=nounInfo("insincerity")
adverbs['insinuatingly']="insinuatingly"
nouns['insinuation']=nounInfo("insinuation")
adjectives['insipid']=adjInfo("insipid")
nouns['insipidity']=nounInfo("insipidity")
adverbs['insipidly']="insipidly"
nouns['insipidness']=nounInfo("insipidness")
nouns['insistence']=nounInfo("insistence")
adjectives['insistent']=adjInfo("insistent")
adverbs['insofar']="insofar"
nouns['insole']=nounInfo("insole")
nouns['insolence']=nounInfo("insolence")
adjectives['insolent']=adjInfo("insolent")
adverbs['insolently']="insolently"
adjectives['insoluble']=adjInfo("insoluble")
nouns['insolvency']=nounInfo("insolvency")
adjectives['insolvent']=adjInfo("insolvent")
nouns['insolvent']=nounInfo("insolvent")
nouns['insomnia']=nounInfo("insomnia")
nouns['insomniac']=nounInfo("insomniac")
adverbs['insomuch']="insomuch"
nouns['insouciance']=nounInfo("insouciance")
adjectives['insouciant']=adjInfo("insouciant")
nouns['inspection']=nounInfo("inspection")
nouns['inspector']=nounInfo("inspector")
nouns['inspectorate']=nounInfo("inspectorate")
nouns['inspiration']=nounInfo("inspiration")
adjectives['inspired']=adjInfo("inspired")
nouns['instability']=nounInfo("instability")
nouns['installation']=nounInfo("installation")
nouns['instalment']=nounInfo("instalment")
nouns['instance']=nounInfo("instance")
adjectives['instant']=adjInfo("instant")
nouns['instant']=nounInfo("instant")
adjectives['instantaneous']=adjInfo("instantaneous")
adverbs['instantaneously']="instantaneously"
adverbs['instantly']="instantly"
adverbs['instead']="instead"
nouns['instep']=nounInfo("instep")
nouns['instigation']=nounInfo("instigation")
nouns['instigator']=nounInfo("instigator")
nouns['instillation']=nounInfo("instillation")
adjectives['instinct']=adjInfo("instinct")
nouns['instinct']=nounInfo("instinct")
adjectives['instinctive']=adjInfo("instinctive")
adverbs['instinctively']="instinctively"
nouns['institute']=nounInfo("institute")
nouns['institution']=nounInfo("institution")
adjectives['institutional']=adjInfo("institutional")
adverbs['institutionally']="institutionally"
nouns['instruction']=nounInfo("instruction")
adjectives['instructional']=adjInfo("instructional")
adjectives['instructive']=adjInfo("instructive")
adverbs['instructively']="instructively"
nouns['instructor']=nounInfo("instructor")
nouns['instructress']=nounInfo("instructress")
nouns['instrument']=nounInfo("instrument")
adjectives['instrumental']=adjInfo("instrumental")
nouns['instrumentalist']=nounInfo("instrumentalist")
nouns['instrumentality']=nounInfo("instrumentality")
nouns['instrumentation']=nounInfo("instrumentation")
adjectives['insubordinate']=adjInfo("insubordinate")
nouns['insubordination']=nounInfo("insubordination")
adjectives['insubstantial']=adjInfo("insubstantial")
adverbs['insubstantially']="insubstantially"
adjectives['insufferable']=adjInfo("insufferable")
nouns['insufficiency']=nounInfo("insufficiency")
adjectives['insufficient']=adjInfo("insufficient")
adverbs['insufficiently']="insufficiently"
adjectives['insular']=adjInfo("insular")
nouns['insularism']=nounInfo("insularism")
nouns['insularity']=nounInfo("insularity")
nouns['insulation']=nounInfo("insulation")
nouns['insulator']=nounInfo("insulator")
nouns['insulin']=nounInfo("insulin")
nouns['insult']=nounInfo("insult")
adjectives['insulting']=adjInfo("insulting")
adverbs['insultingly']="insultingly"
adjectives['insuperable']=adjInfo("insuperable")
adverbs['insuperably']="insuperably"
adjectives['insupportable']=adjInfo("insupportable")
nouns['insurance']=nounInfo("insurance")
adjectives['insurgent']=adjInfo("insurgent")
nouns['insurgent']=nounInfo("insurgent")
adjectives['insurmountable']=adjInfo("insurmountable")
nouns['insurrection']=nounInfo("insurrection")
adjectives['intact']=adjInfo("intact")
nouns['intaglio']=nounInfo("intaglio")
nouns['intake']=nounInfo("intake")
nouns['intangibility']=nounInfo("intangibility")
adjectives['intangible']=adjInfo("intangible")
nouns['integer']=nounInfo("integer")
adjectives['integral']=adjInfo("integral")
adverbs['integrally']="integrally"
nouns['integration']=nounInfo("integration")
nouns['integrity']=nounInfo("integrity")
nouns['integument']=nounInfo("integument")
nouns['intellect']=nounInfo("intellect")
adjectives['intellectual']=adjInfo("intellectual")
nouns['intellectual']=nounInfo("intellectual")
adverbs['intellectually']="intellectually"
nouns['intelligence']=nounInfo("intelligence")
adjectives['intelligent']=adjInfo("intelligent")
adverbs['intelligently']="intelligently"
nouns['intelligentsia']=nounInfo("intelligentsia")
nouns['intelligibility']=nounInfo("intelligibility")
adjectives['intelligible']=adjInfo("intelligible")
adverbs['intelligibly']="intelligibly"
nouns['intemperance']=nounInfo("intemperance")
adjectives['intemperate']=adjInfo("intemperate")
adverbs['intemperately']="intemperately"
adjectives['intense']=adjInfo("intense")
adverbs['intensely']="intensely"
nouns['intensification']=nounInfo("intensification")
nouns['intensity']=nounInfo("intensity")
adjectives['intensive']=adjInfo("intensive")
adverbs['intensively']="intensively"
adjectives['intent']=adjInfo("intent")
nouns['intent']=nounInfo("intent")
nouns['intention']=nounInfo("intention")
adjectives['intentional']=adjInfo("intentional")
adverbs['intentionally']="intentionally"
adverbs['intently']="intently"
nouns['intentness']=nounInfo("intentness")
nouns['interaction']=nounInfo("interaction")
adjectives['interactive']=adjInfo("interactive")
adjectives['intercalary']=adjInfo("intercalary")
nouns['interception']=nounInfo("interception")
nouns['interceptor']=nounInfo("interceptor")
nouns['intercession']=nounInfo("intercession")
nouns['interchange']=nounInfo("interchange")
adjectives['interchangeable']=adjInfo("interchangeable")
adverbs['interchangeably']="interchangeably"
adjectives['intercollegiate']=adjInfo("intercollegiate")
nouns['intercom']=nounInfo("intercom")
nouns['intercommunication']=nounInfo("intercommunication")
nouns['intercommunion']=nounInfo("intercommunion")
adjectives['intercontinental']=adjInfo("intercontinental")
nouns['intercourse']=nounInfo("intercourse")
adjectives['interdenominational']=adjInfo("interdenominational")
nouns['interdependence']=nounInfo("interdependence")
adjectives['interdependent']=adjInfo("interdependent")
nouns['interdict']=nounInfo("interdict")
nouns['interdiction']=nounInfo("interdiction")
adjectives['interdisciplinary']=adjInfo("interdisciplinary")
nouns['interest']=nounInfo("interest")
adjectives['interested']=adjInfo("interested")
adjectives['interesting']=adjInfo("interesting")
adverbs['interestingly']="interestingly"
nouns['interface']=nounInfo("interface")
nouns['interference']=nounInfo("interference")
nouns['interim']=nounInfo("interim")
adjectives['interior']=adjInfo("interior")
nouns['interior']=nounInfo("interior")
nouns['interjection']=nounInfo("interjection")
nouns['interlocutor']=nounInfo("interlocutor")
nouns['interloper']=nounInfo("interloper")
nouns['interlude']=nounInfo("interlude")
nouns['intermarriage']=nounInfo("intermarriage")
nouns['intermediary']=nounInfo("intermediary")
adjectives['intermediate']=adjInfo("intermediate")
nouns['intermediate']=nounInfo("intermediate")
adverbs['intermediately']="intermediately"
nouns['interment']=nounInfo("interment")
nouns['intermezzo']=nounInfo("intermezzo")
adjectives['interminable']=adjInfo("interminable")
adverbs['interminably']="interminably"
nouns['intermission']=nounInfo("intermission")
adjectives['intermittent']=adjInfo("intermittent")
adverbs['intermittently']="intermittently"
nouns['intermixture']=nounInfo("intermixture")
nouns['intern']=nounInfo("intern")
adjectives['internal']=adjInfo("internal")
adverbs['internally']="internally"
adjectives['international']=adjInfo("international")
nouns['international']=nounInfo("international")
nouns['internationale']=nounInfo("internationale")
nouns['internationalism']=nounInfo("internationalism")
nouns['internationalist']=nounInfo("internationalist")
nouns['internationalization']=nounInfo("internationalization")
adverbs['internationally']="internationally"
nouns['interne']=nounInfo("interne")
adjectives['internecine']=adjInfo("internecine")
nouns['internee']=nounInfo("internee")
nouns['internet']=nounInfo("internet")
nouns['internment']=nounInfo("internment")
nouns['internship']=nounInfo("internship")
nouns['interpellation']=nounInfo("interpellation")
nouns['interphone']=nounInfo("interphone")
adjectives['interplanetary']=adjInfo("interplanetary")
nouns['interplay']=nounInfo("interplay")
nouns['interpolation']=nounInfo("interpolation")
nouns['interposition']=nounInfo("interposition")
nouns['interpretation']=nounInfo("interpretation")
nouns['interpreter']=nounInfo("interpreter")
adjectives['interracial']=adjInfo("interracial")
nouns['interregnum']=nounInfo("interregnum")
nouns['interrelation']=nounInfo("interrelation")
nouns['interrelationship']=nounInfo("interrelationship")
nouns['interrogation']=nounInfo("interrogation")
adjectives['interrogative']=adjInfo("interrogative")
nouns['interrogative']=nounInfo("interrogative")
adverbs['interrogatively']="interrogatively"
nouns['interrogator']=nounInfo("interrogator")
adjectives['interrogatory']=adjInfo("interrogatory")
nouns['interrupter']=nounInfo("interrupter")
nouns['interruption']=nounInfo("interruption")
nouns['intersection']=nounInfo("intersection")
adjectives['interstate']=adjInfo("interstate")
adjectives['interstellar']=adjInfo("interstellar")
nouns['interstice']=nounInfo("interstice")
adjectives['intertribal']=adjInfo("intertribal")
nouns['interval']=nounInfo("interval")
nouns['intervention']=nounInfo("intervention")
nouns['interview']=nounInfo("interview")
adjectives['intestate']=adjInfo("intestate")
adjectives['intestinal']=adjInfo("intestinal")
nouns['intestine']=nounInfo("intestine")
nouns['intimacy']=nounInfo("intimacy")
adjectives['intimate']=adjInfo("intimate")
nouns['intimate']=nounInfo("intimate")
adverbs['intimately']="intimately"
nouns['intimation']=nounInfo("intimation")
nouns['intimidation']=nounInfo("intimidation")
prepositions['into']=P("into")
adjectives['intolerable']=adjInfo("intolerable")
adverbs['intolerably']="intolerably"
nouns['intolerance']=nounInfo("intolerance")
adjectives['intolerant']=adjInfo("intolerant")
adverbs['intolerantly']="intolerantly"
nouns['intonation']=nounInfo("intonation")
adjectives['intoxicant']=adjInfo("intoxicant")
nouns['intoxicant']=nounInfo("intoxicant")
nouns['intoxication']=nounInfo("intoxication")
nouns['intractability']=nounInfo("intractability")
adjectives['intractable']=adjInfo("intractable")
adjectives['intramural']=adjInfo("intramural")
nouns['intransigence']=nounInfo("intransigence")
adjectives['intransigent']=adjInfo("intransigent")
adjectives['intransitive']=adjInfo("intransitive")
adverbs['intransitively']="intransitively"
adjectives['intravenous']=adjInfo("intravenous")
adverbs['intravenously']="intravenously"
adjectives['intrepid']=adjInfo("intrepid")
nouns['intrepidity']=nounInfo("intrepidity")
adverbs['intrepidly']="intrepidly"
nouns['intricacy']=nounInfo("intricacy")
adjectives['intricate']=adjInfo("intricate")
adverbs['intricately']="intricately"
nouns['intrigue']=nounInfo("intrigue")
adjectives['intrinsic']=adjInfo("intrinsic")
adverbs['intrinsically']="intrinsically"
nouns['introduction']=nounInfo("introduction")
adjectives['introductory']=adjInfo("introductory")
nouns['introspection']=nounInfo("introspection")
adjectives['introspective']=adjInfo("introspective")
nouns['introversion']=nounInfo("introversion")
nouns['introvert']=nounInfo("introvert")
nouns['intruder']=nounInfo("intruder")
nouns['intrusion']=nounInfo("intrusion")
adjectives['intrusive']=adjInfo("intrusive")
nouns['intuition']=nounInfo("intuition")
adjectives['intuitive']=adjInfo("intuitive")
adverbs['intuitively']="intuitively"
nouns['intumescence']=nounInfo("intumescence")
nouns['inundation']=nounInfo("inundation")
nouns['invader']=nounInfo("invader")
adjectives['invalid']=adjInfo("invalid")
nouns['invalid']=nounInfo("invalid")
nouns['invalidation']=nounInfo("invalidation")
nouns['invalidism']=nounInfo("invalidism")
nouns['invalidity']=nounInfo("invalidity")
adjectives['invaluable']=adjInfo("invaluable")
adjectives['invariable']=adjInfo("invariable")
adverbs['invariably']="invariably"
nouns['invasion']=nounInfo("invasion")
adjectives['invasive']=adjInfo("invasive")
nouns['invective']=nounInfo("invective")
nouns['invention']=nounInfo("invention")
adjectives['inventive']=adjInfo("inventive")
adverbs['inventively']="inventively"
nouns['inventor']=nounInfo("inventor")
nouns['inventory']=nounInfo("inventory")
adjectives['inverse']=adjInfo("inverse")
nouns['inverse']=nounInfo("inverse")
adverbs['inversely']="inversely"
nouns['inversion']=nounInfo("inversion")
adjectives['invertebrate']=adjInfo("invertebrate")
nouns['invertebrate']=nounInfo("invertebrate")
nouns['investigation']=nounInfo("investigation")
adjectives['investigative']=adjInfo("investigative")
nouns['investigator']=nounInfo("investigator")
nouns['investiture']=nounInfo("investiture")
nouns['investment']=nounInfo("investment")
nouns['investor']=nounInfo("investor")
adjectives['inveterate']=adjInfo("inveterate")
adjectives['invidious']=adjInfo("invidious")
adverbs['invidiously']="invidiously"
nouns['invigilation']=nounInfo("invigilation")
nouns['invigilator']=nounInfo("invigilator")
nouns['invincibility']=nounInfo("invincibility")
adjectives['invincible']=adjInfo("invincible")
adverbs['invincibly']="invincibly"
adjectives['inviolable']=adjInfo("inviolable")
adjectives['inviolate']=adjInfo("inviolate")
nouns['invisibility']=nounInfo("invisibility")
adjectives['invisible']=adjInfo("invisible")
adverbs['invisibly']="invisibly"
nouns['invitation']=nounInfo("invitation")
nouns['invite']=nounInfo("invite")
adjectives['inviting']=adjInfo("inviting")
adverbs['invitingly']="invitingly"
nouns['invocation']=nounInfo("invocation")
nouns['invoice']=nounInfo("invoice")
adverbs['involuntarily']="involuntarily"
adjectives['involuntary']=adjInfo("involuntary")
adjectives['involute']=adjInfo("involute")
nouns['involution']=nounInfo("involution")
adjectives['involved']=adjInfo("involved")
nouns['involvement']=nounInfo("involvement")
adjectives['invulnerable']=adjInfo("invulnerable")
adjectives['inward']=adjInfo("inward")
adverbs['inward']="inward"
adverbs['inwardly']="inwardly"
nouns['inwardness']=nounInfo("inwardness")
adverbs['inwards']="inwards"
adjectives['inwrought']=adjInfo("inwrought")
nouns['iodine']=nounInfo("iodine")
nouns['ion']=nounInfo("ion")
nouns['ionization']=nounInfo("ionization")
nouns['ionosphere']=nounInfo("ionosphere")
nouns['iota']=nounInfo("iota")
nouns['irascibility']=nounInfo("irascibility")
adjectives['irascible']=adjInfo("irascible")
adjectives['irate']=adjInfo("irate")
adverbs['irately']="irately"
nouns['ire']=nounInfo("ire")
adjectives['ireful']=adjInfo("ireful")
nouns['iridescence']=nounInfo("iridescence")
adjectives['iridescent']=adjInfo("iridescent")
nouns['iridium']=nounInfo("iridium")
nouns['iris']=nounInfo("iris")
adjectives['irksome']=adjInfo("irksome")
nouns['iron']=nounInfo("iron")
adjectives['ironclad']=adjInfo("ironclad")
adjectives['ironic']=adjInfo("ironic")
adjectives['ironical']=adjInfo("ironical")
adverbs['ironically']="ironically"
nouns['ironmonger']=nounInfo("ironmonger")
nouns['ironmongery']=nounInfo("ironmongery")
nouns['ironmould']=nounInfo("ironmould")
nouns['ironside']=nounInfo("ironside")
nouns['ironware']=nounInfo("ironware")
nouns['ironwork']=nounInfo("ironwork")
nouns['ironworks']=nounInfo("ironworks")
nouns['irony']=nounInfo("irony")
adjectives['irrational']=adjInfo("irrational")
adverbs['irrationally']="irrationally"
adverbs['irreally']="irreally"
adjectives['irreconcilable']=adjInfo("irreconcilable")
adjectives['irrecoverable']=adjInfo("irrecoverable")
adjectives['irredeemable']=adjInfo("irredeemable")
nouns['irredentist']=nounInfo("irredentist")
adjectives['irreducible']=adjInfo("irreducible")
adjectives['irrefutable']=adjInfo("irrefutable")
adjectives['irregular']=adjInfo("irregular")
nouns['irregular']=nounInfo("irregular")
nouns['irregularity']=nounInfo("irregularity")
adverbs['irregularly']="irregularly"
nouns['irrelevance']=nounInfo("irrelevance")
nouns['irrelevancy']=nounInfo("irrelevancy")
adjectives['irrelevant']=adjInfo("irrelevant")
adverbs['irrelevantly']="irrelevantly"
adjectives['irreligious']=adjInfo("irreligious")
adjectives['irremediable']=adjInfo("irremediable")
adjectives['irremovable']=adjInfo("irremovable")
adjectives['irreparable']=adjInfo("irreparable")
adjectives['irreplaceable']=adjInfo("irreplaceable")
adjectives['irrepressible']=adjInfo("irrepressible")
adjectives['irreproachable']=adjInfo("irreproachable")
adjectives['irresistible']=adjInfo("irresistible")
adjectives['irresolute']=adjInfo("irresolute")
nouns['irresolution']=nounInfo("irresolution")
adjectives['irrespective']=adjInfo("irrespective")
nouns['irresponsibility']=nounInfo("irresponsibility")
adjectives['irresponsible']=adjInfo("irresponsible")
adjectives['irretrievable']=adjInfo("irretrievable")
adverbs['irretrievably']="irretrievably"
nouns['irreverence']=nounInfo("irreverence")
adjectives['irreverent']=adjInfo("irreverent")
adverbs['irreverently']="irreverently"
adjectives['irreversible']=adjInfo("irreversible")
adverbs['irreversibly']="irreversibly"
adjectives['irrevocable']=adjInfo("irrevocable")
nouns['irridentism']=nounInfo("irridentism")
nouns['irrigation']=nounInfo("irrigation")
nouns['irritability']=nounInfo("irritability")
adjectives['irritable']=adjInfo("irritable")
adverbs['irritably']="irritably"
adjectives['irritant']=adjInfo("irritant")
nouns['irritant']=nounInfo("irritant")
nouns['irritation']=nounInfo("irritation")
nouns['irruption']=nounInfo("irruption")
nouns['isinglass']=nounInfo("isinglass")
nouns['island']=nounInfo("island")
nouns['islander']=nounInfo("islander")
nouns['isle']=nounInfo("isle")
nouns['islet']=nounInfo("islet")
nouns['ism']=nounInfo("ism")
nouns['isobar']=nounInfo("isobar")
nouns['isolation']=nounInfo("isolation")
nouns['isolationism']=nounInfo("isolationism")
nouns['isolationist']=nounInfo("isolationist")
adjectives['isosceles']=adjInfo("isosceles")
nouns['isotherm']=nounInfo("isotherm")
nouns['isotope']=nounInfo("isotope")
nouns['issue']=nounInfo("issue")
nouns['isthmus']=nounInfo("isthmus")
adjectives['italic']=adjInfo("italic")
nouns['italic']=nounInfo("italic")
nouns['itch']=nounInfo("itch")
adjectives['itchy']=adjInfo("itchy")
adverbs['item']="item"
nouns['item']=nounInfo("item")
nouns['iteration']=nounInfo("iteration")
adjectives['itinerant']=adjInfo("itinerant")
nouns['itinerary']=nounInfo("itinerary")
adjectives['ivied']=adjInfo("ivied")
nouns['ivory']=nounInfo("ivory")
nouns['ivy']=nounInfo("ivy")
nouns['jab']=nounInfo("jab")
nouns['jabber']=nounInfo("jabber")
nouns['jabberer']=nounInfo("jabberer")
nouns['jabot']=nounInfo("jabot")
nouns['jack']=nounInfo("jack")
nouns['jackal']=nounInfo("jackal")
nouns['jackass']=nounInfo("jackass")
nouns['jackdaw']=nounInfo("jackdaw")
nouns['jacket']=nounInfo("jacket")
nouns['jackpot']=nounInfo("jackpot")
nouns['jade']=nounInfo("jade")
adjectives['jaded']=adjInfo("jaded")
nouns['jag']=nounInfo("jag")
adjectives['jagged']=adjInfo("jagged")
adjectives['jaggy']=adjInfo("jaggy")
nouns['jaguar']=nounInfo("jaguar")
nouns['jail']=nounInfo("jail")
nouns['jailer']=nounInfo("jailer")
nouns['jailor']=nounInfo("jailor")
nouns['jalopy']=nounInfo("jalopy")
nouns['jam']=nounInfo("jam")
nouns['jamb']=nounInfo("jamb")
nouns['jamboree']=nounInfo("jamboree")
nouns['jangle']=nounInfo("jangle")
nouns['janitor']=nounInfo("janitor")
nouns['jape']=nounInfo("jape")
nouns['japonica']=nounInfo("japonica")
nouns['jar']=nounInfo("jar")
nouns['jarful']=nounInfo("jarful")
nouns['jargon']=nounInfo("jargon")
adjectives['jarring']=adjInfo("jarring")
adverbs['jarringly']="jarringly"
nouns['jasmine']=nounInfo("jasmine")
nouns['jasper']=nounInfo("jasper")
nouns['jaundice']=nounInfo("jaundice")
nouns['jaunt']=nounInfo("jaunt")
adverbs['jauntily']="jauntily"
nouns['jauntiness']=nounInfo("jauntiness")
adjectives['jaunty']=adjInfo("jaunty")
nouns['javelin']=nounInfo("javelin")
nouns['jaw']=nounInfo("jaw")
nouns['jay']=nounInfo("jay")
nouns['jazz']=nounInfo("jazz")
adjectives['jazzy']=adjInfo("jazzy")
adjectives['jealous']=adjInfo("jealous")
adverbs['jealously']="jealously"
nouns['jealousy']=nounInfo("jealousy")
nouns['jean']=nounInfo("jean")
nouns['jeans']=nounInfo("jeans")
nouns['jeep']=nounInfo("jeep")
nouns['jeer']=nounInfo("jeer")
adverbs['jeeringly']="jeeringly"
adjectives['jejune']=adjInfo("jejune")
adverbs['jejunely']="jejunely"
nouns['jejuneness']=nounInfo("jejuneness")
nouns['jellaba']=nounInfo("jellaba")
adjectives['jellied']=adjInfo("jellied")
nouns['jelly']=nounInfo("jelly")
nouns['jemmy']=nounInfo("jemmy")
nouns['jenny']=nounInfo("jenny")
nouns['jeopardy']=nounInfo("jeopardy")
nouns['jerboa']=nounInfo("jerboa")
nouns['jeremiad']=nounInfo("jeremiad")
nouns['jerk']=nounInfo("jerk")
adverbs['jerkily']="jerkily"
nouns['jerkin']=nounInfo("jerkin")
nouns['jerkiness']=nounInfo("jerkiness")
adjectives['jerky']=adjInfo("jerky")
nouns['jerry']=nounInfo("jerry")
nouns['jersey']=nounInfo("jersey")
nouns['jest']=nounInfo("jest")
nouns['jester']=nounInfo("jester")
adjectives['jesting']=adjInfo("jesting")
adverbs['jestingly']="jestingly"
nouns['jet']=nounInfo("jet")
nouns['jetsam']=nounInfo("jetsam")
nouns['jetty']=nounInfo("jetty")
nouns['jewel']=nounInfo("jewel")
nouns['jeweller']=nounInfo("jeweller")
nouns['jewellery']=nounInfo("jewellery")
nouns['jewelry']=nounInfo("jewelry")
nouns['jib']=nounInfo("jib")
nouns['jibe']=nounInfo("jibe")
nouns['jiffy']=nounInfo("jiffy")
nouns['jig']=nounInfo("jig")
nouns['jigger']=nounInfo("jigger")
adjectives['jiggered']=adjInfo("jiggered")
nouns['jiggle']=nounInfo("jiggle")
nouns['jigsaw']=nounInfo("jigsaw")
nouns['jihad']=nounInfo("jihad")
nouns['jilt']=nounInfo("jilt")
nouns['jiminy']=nounInfo("jiminy")
nouns['jimmy']=nounInfo("jimmy")
nouns['jingle']=nounInfo("jingle")
nouns['jingo']=nounInfo("jingo")
nouns['jingoism']=nounInfo("jingoism")
nouns['jingoist']=nounInfo("jingoist")
adjectives['jingoistic']=adjInfo("jingoistic")
nouns['jinks']=nounInfo("jinks")
nouns['jinn']=nounInfo("jinn")
nouns['jinx']=nounInfo("jinx")
nouns['jitney']=nounInfo("jitney")
nouns['jitters']=nounInfo("jitters")
adjectives['jittery']=adjInfo("jittery")
nouns['jive']=nounInfo("jive")
nouns['job']=nounInfo("job")
nouns['jobber']=nounInfo("jobber")
nouns['jobbery']=nounInfo("jobbery")
nouns['jockey']=nounInfo("jockey")
adjectives['jocose']=adjInfo("jocose")
adverbs['jocosely']="jocosely"
nouns['jocoseness']=nounInfo("jocoseness")
nouns['jocosity']=nounInfo("jocosity")
adjectives['jocular']=adjInfo("jocular")
nouns['jocularity']=nounInfo("jocularity")
adverbs['jocularly']="jocularly"
adjectives['jocund']=adjInfo("jocund")
nouns['jocundity']=nounInfo("jocundity")
nouns['jodhpurs']=nounInfo("jodhpurs")
nouns['jog']=nounInfo("jog")
nouns['jogger']=nounInfo("jogger").addAttributes({"g":"x"})
nouns['jogging']=nounInfo("jogging")
nouns['joggle']=nounInfo("joggle")
nouns['john']=nounInfo("john")
nouns['join']=nounInfo("join")
nouns['joiner']=nounInfo("joiner")
nouns['joinery']=nounInfo("joinery")
adjectives['joint']=adjInfo("joint")
nouns['joint']=nounInfo("joint")
adverbs['jointly']="jointly"
nouns['jointure']=nounInfo("jointure")
nouns['joist']=nounInfo("joist")
nouns['joke']=nounInfo("joke")
nouns['joker']=nounInfo("joker")
adverbs['jokingly']="jokingly"
nouns['jollification']=nounInfo("jollification")
nouns['jollity']=nounInfo("jollity")
adjectives['jolly']=adjInfo("jolly")
adverbs['jolly']="jolly"
nouns['jollyboat']=nounInfo("jollyboat")
nouns['jolt']=nounInfo("jolt")
adjectives['jolty']=adjInfo("jolty")
nouns['jonquil']=nounInfo("jonquil")
nouns['joss']=nounInfo("joss")
nouns['jot']=nounInfo("jot")
nouns['jotter']=nounInfo("jotter")
nouns['jottings']=nounInfo("jottings")
nouns['joule']=nounInfo("joule")
nouns['journal']=nounInfo("journal")
nouns['journalese']=nounInfo("journalese")
nouns['journalism']=nounInfo("journalism")
nouns['journalist']=nounInfo("journalist").addAttributes({"g":"x"})
adjectives['journalistic']=adjInfo("journalistic")
adverbs['journalistically']="journalistically"
nouns['journey']=nounInfo("journey")
nouns['journeyman']=nounInfo("journeyman")
nouns['joust']=nounInfo("joust")
adjectives['jovial']=adjInfo("jovial")
nouns['joviality']=nounInfo("joviality")
adverbs['jovially']="jovially"
nouns['jowl']=nounInfo("jowl")
adjectives['jowly']=adjInfo("jowly")
nouns['joy']=nounInfo("joy")
adjectives['joyful']=adjInfo("joyful")
adverbs['joyfully']="joyfully"
nouns['joyfulness']=nounInfo("joyfulness")
adjectives['joyless']=adjInfo("joyless")
adverbs['joylessly']="joylessly"
nouns['joylessness']=nounInfo("joylessness")
adjectives['joyous']=adjInfo("joyous")
adverbs['joyously']="joyously"
nouns['joyousness']=nounInfo("joyousness")
adjectives['jubilant']=adjInfo("jubilant")
adverbs['jubilantly']="jubilantly"
nouns['jubilation']=nounInfo("jubilation")
nouns['jubilee']=nounInfo("jubilee")
nouns['judge']=nounInfo("judge").addAttributes({"g":"x"})
nouns['judgement']=nounInfo("judgement")
nouns['judgment']=nounInfo("judgment")
nouns['judicature']=nounInfo("judicature")
adjectives['judicial']=adjInfo("judicial")
nouns['judiciary']=nounInfo("judiciary")
adjectives['judicious']=adjInfo("judicious")
adverbs['judiciously']="judiciously"
nouns['judiciousness']=nounInfo("judiciousness")
nouns['judo']=nounInfo("judo")
nouns['jug']=nounInfo("jug")
nouns['jugful']=nounInfo("jugful")
nouns['juggernaut']=nounInfo("juggernaut")
nouns['juggler']=nounInfo("juggler")
adjectives['jugular']=adjInfo("jugular")
nouns['juice']=nounInfo("juice")
nouns['juiciness']=nounInfo("juiciness")
adjectives['juicy']=adjInfo("juicy")
nouns['juju']=nounInfo("juju")
nouns['jujube']=nounInfo("jujube")
nouns['julep']=nounInfo("julep")
nouns['jumble']=nounInfo("jumble")
adjectives['jumbo']=adjInfo("jumbo")
nouns['jump']=nounInfo("jump")
nouns['jumper']=nounInfo("jumper")
nouns['jumpiness']=nounInfo("jumpiness")
adjectives['jumpy']=adjInfo("jumpy")
nouns['junction']=nounInfo("junction")
nouns['juncture']=nounInfo("juncture")
nouns['jungle']=nounInfo("jungle")
adjectives['jungly']=adjInfo("jungly")
adjectives['junior']=adjInfo("junior")
nouns['junior']=nounInfo("junior")
nouns['juniper']=nounInfo("juniper")
nouns['junk']=nounInfo("junk")
nouns['junket']=nounInfo("junket")
nouns['junketing']=nounInfo("junketing")
nouns['junkie']=nounInfo("junkie")
nouns['junky']=nounInfo("junky")
nouns['junta']=nounInfo("junta")
adjectives['juridical']=adjInfo("juridical")
nouns['jurisdiction']=nounInfo("jurisdiction")
nouns['jurisprudence']=nounInfo("jurisprudence")
nouns['jurist']=nounInfo("jurist")
nouns['juror']=nounInfo("juror")
nouns['jury']=nounInfo("jury")
nouns['juryman']=nounInfo("juryman")
adjectives['just']=adjInfo("just")
adverbs['just']="just"
nouns['justice']=nounInfo("justice")
nouns['justiciary']=nounInfo("justiciary")
adjectives['justifiable']=adjInfo("justifiable")
adverbs['justifiably']="justifiably"
nouns['justification']=nounInfo("justification")
adverbs['justly']="justly"
nouns['justness']=nounInfo("justness")
nouns['jute']=nounInfo("jute")
adjectives['juvenile']=adjInfo("juvenile")
nouns['juvenile']=nounInfo("juvenile")
nouns['juxtaposition']=nounInfo("juxtaposition")
nouns['kaffir']=nounInfo("kaffir")
nouns['kail']=nounInfo("kail")
nouns['kakemono']=nounInfo("kakemono")
nouns['kale']=nounInfo("kale")
nouns['kaleidoscope']=nounInfo("kaleidoscope")
adjectives['kaleidoscopic']=adjInfo("kaleidoscopic")
nouns['kalends']=nounInfo("kalends")
nouns['kampong']=nounInfo("kampong")
nouns['kangaroo']=nounInfo("kangaroo")
nouns['kaolin']=nounInfo("kaolin")
nouns['kapok']=nounInfo("kapok")
adjectives['kaput']=adjInfo("kaput")
nouns['karat']=nounInfo("karat")
nouns['karate']=nounInfo("karate")
nouns['karma']=nounInfo("karma")
nouns['kava']=nounInfo("kava")
nouns['kayak']=nounInfo("kayak")
nouns['kebab']=nounInfo("kebab")
nouns['kedgeree']=nounInfo("kedgeree")
nouns['keel']=nounInfo("keel")
adjectives['keen']=adjInfo("keen")
nouns['keen']=nounInfo("keen")
adverbs['keenly']="keenly"
nouns['keenness']=nounInfo("keenness")
nouns['keep']=nounInfo("keep")
nouns['keeper']=nounInfo("keeper")
nouns['keeping']=nounInfo("keeping")
nouns['keepsake']=nounInfo("keepsake")
nouns['keg']=nounInfo("keg")
nouns['kelp']=nounInfo("kelp")
nouns['ken']=nounInfo("ken")
nouns['kennel']=nounInfo("kennel")
nouns['kepi']=nounInfo("kepi")
nouns['kerb']=nounInfo("kerb")
nouns['kerbstone']=nounInfo("kerbstone")
nouns['kerchief']=nounInfo("kerchief")
nouns['kernel']=nounInfo("kernel")
nouns['kerosene']=nounInfo("kerosene")
nouns['kestrel']=nounInfo("kestrel")
nouns['ketch']=nounInfo("ketch")
nouns['ketchup']=nounInfo("ketchup")
nouns['kettle']=nounInfo("kettle")
nouns['kettledrum']=nounInfo("kettledrum")
nouns['key']=nounInfo("key")
nouns['keyboard']=nounInfo("keyboard")
nouns['keyhole']=nounInfo("keyhole")
adjectives['keyless']=adjInfo("keyless")
nouns['keynote']=nounInfo("keynote")
nouns['keystone']=nounInfo("keystone")
adjectives['khaki']=adjInfo("khaki")
nouns['khaki']=nounInfo("khaki")
nouns['khan']=nounInfo("khan")
nouns['kibbutz']=nounInfo("kibbutz")
nouns['kibbutznik']=nounInfo("kibbutznik")
nouns['kick']=nounInfo("kick")
nouns['kid']=nounInfo("kid")
nouns['kiddy']=nounInfo("kiddy")
nouns['kidnapper']=nounInfo("kidnapper")
nouns['kidney']=nounInfo("kidney")
nouns['kill']=nounInfo("kill")
nouns['killer']=nounInfo("killer").addAttributes({"g":"x"})
adjectives['killing']=adjInfo("killing")
nouns['killing']=nounInfo("killing")
adverbs['killingly']="killingly"
nouns['killjoy']=nounInfo("killjoy")
nouns['kiln']=nounInfo("kiln")
nouns['kilo']=nounInfo("kilo")
nouns['kilocycle']=nounInfo("kilocycle")
nouns['kilogram']=nounInfo("kilogram")
nouns['kilolitre']=nounInfo("kilolitre")
nouns['kilometre']=nounInfo("kilometre")
nouns['kilowatt']=nounInfo("kilowatt")
nouns['kilt']=nounInfo("kilt")
nouns['kimono']=nounInfo("kimono")
nouns['kin']=nounInfo("kin")
adjectives['kind']=adjInfo("kind")
nouns['kind']=nounInfo("kind")
adverbs['kinda']="kinda"
nouns['kindergarten']=nounInfo("kindergarten")
nouns['kindling']=nounInfo("kindling")
adjectives['kindly']=adjInfo("kindly")
adverbs['kindly']="kindly"
nouns['kindness']=nounInfo("kindness")
adjectives['kindred']=adjInfo("kindred")
nouns['kindred']=nounInfo("kindred")
adjectives['kinetic']=adjInfo("kinetic")
nouns['kinetics']=nounInfo("kinetics")
nouns['king']=nounInfo("king").addAttributes({"g":"m"})
nouns['kingcup']=nounInfo("kingcup")
nouns['kingdom']=nounInfo("kingdom")
nouns['kingfisher']=nounInfo("kingfisher")
adjectives['kinglike']=adjInfo("kinglike")
adjectives['kingly']=adjInfo("kingly")
nouns['kingpin']=nounInfo("kingpin")
nouns['kingship']=nounInfo("kingship")
nouns['kink']=nounInfo("kink")
adjectives['kinky']=adjInfo("kinky")
nouns['kinsfolk']=nounInfo("kinsfolk")
nouns['kinship']=nounInfo("kinship")
nouns['kinsman']=nounInfo("kinsman")
nouns['kinswoman']=nounInfo("kinswoman")
nouns['kiosk']=nounInfo("kiosk")
nouns['kip']=nounInfo("kip")
nouns['kipper']=nounInfo("kipper")
nouns['kirk']=nounInfo("kirk")
nouns['kirsch']=nounInfo("kirsch")
nouns['kirtle']=nounInfo("kirtle")
nouns['kismet']=nounInfo("kismet")
nouns['kiss']=nounInfo("kiss")
nouns['kisser']=nounInfo("kisser")
nouns['kit']=nounInfo("kit")
nouns['kitchen']=nounInfo("kitchen")
nouns['kitchenette']=nounInfo("kitchenette")
nouns['kite']=nounInfo("kite")
nouns['kith']=nounInfo("kith")
adjectives['kitsch']=adjInfo("kitsch")
nouns['kitten']=nounInfo("kitten")
adjectives['kittenish']=adjInfo("kittenish")
nouns['kitty']=nounInfo("kitty")
nouns['kiwi']=nounInfo("kiwi")
nouns['klaxon']=nounInfo("klaxon")
nouns['kleenex']=nounInfo("kleenex")
nouns['kleptomania']=nounInfo("kleptomania")
nouns['kleptomaniac']=nounInfo("kleptomaniac")
nouns['knack']=nounInfo("knack")
nouns['knacker']=nounInfo("knacker")
nouns['knapsack']=nounInfo("knapsack")
nouns['knave']=nounInfo("knave")
nouns['knavery']=nounInfo("knavery")
adjectives['knavish']=adjInfo("knavish")
adverbs['knavishly']="knavishly"
nouns['knee']=nounInfo("knee")
nouns['kneecap']=nounInfo("kneecap")
nouns['knell']=nounInfo("knell")
nouns['knickerbockers']=nounInfo("knickerbockers")
nouns['knickers']=nounInfo("knickers")
nouns['knife']=nounInfo("knife")
nouns['knight']=nounInfo("knight")
nouns['knighthood']=nounInfo("knighthood")
adjectives['knightly']=adjInfo("knightly")
nouns['knitter']=nounInfo("knitter")
nouns['knitting']=nounInfo("knitting")
nouns['knitwear']=nounInfo("knitwear")
nouns['knob']=nounInfo("knob")
nouns['knobble']=nounInfo("knobble")
adjectives['knobbly']=adjInfo("knobbly")
nouns['knobkerrie']=nounInfo("knobkerrie")
nouns['knock']=nounInfo("knock")
nouns['knocker']=nounInfo("knocker")
nouns['knoll']=nounInfo("knoll")
nouns['knot']=nounInfo("knot")
adjectives['knotty']=adjInfo("knotty")
nouns['knout']=nounInfo("knout")
nouns['know']=nounInfo("know")
adjectives['knowing']=adjInfo("knowing")
adverbs['knowingly']="knowingly"
nouns['knowledge']=nounInfo("knowledge")
adjectives['knowledgeable']=adjInfo("knowledgeable")
nouns['knuckle']=nounInfo("knuckle")
nouns['koala']=nounInfo("koala")
nouns['kobo']=nounInfo("kobo")
nouns['kohl']=nounInfo("kohl")
nouns['kohlrabi']=nounInfo("kohlrabi")
nouns['kola']=nounInfo("kola")
nouns['kookaburra']=nounInfo("kookaburra")
nouns['kopeck']=nounInfo("kopeck")
nouns['kopje']=nounInfo("kopje")
nouns['koppie']=nounInfo("koppie")
adjectives['kosher']=adjInfo("kosher")
nouns['kosher']=nounInfo("kosher")
nouns['kotow']=nounInfo("kotow")
nouns['koumiss']=nounInfo("koumiss")
nouns['kowtow']=nounInfo("kowtow")
nouns['kraal']=nounInfo("kraal")
nouns['krona']=nounInfo("krona")
nouns['krone']=nounInfo("krone")
nouns['kudos']=nounInfo("kudos")
nouns['kumis']=nounInfo("kumis")
nouns['kvass']=nounInfo("kvass")
nouns['kwacha']=nounInfo("kwacha")
nouns['kwela']=nounInfo("kwela")
nouns['la']=nounInfo("la")
nouns['laager']=nounInfo("laager")
nouns['lab']=nounInfo("lab")
nouns['label']=nounInfo("label")
adjectives['labial']=adjInfo("labial")
nouns['laboratory']=nounInfo("laboratory")
adjectives['laborious']=adjInfo("laborious")
adverbs['laboriously']="laboriously"
nouns['labour']=nounInfo("labour")
adjectives['laboured']=adjInfo("laboured")
nouns['labourer']=nounInfo("labourer")
nouns['laburnum']=nounInfo("laburnum")
nouns['labyrinth']=nounInfo("labyrinth")
adjectives['labyrinthine']=adjInfo("labyrinthine")
nouns['lace']=nounInfo("lace")
nouns['laceration']=nounInfo("laceration")
adjectives['lachrymal']=adjInfo("lachrymal")
adjectives['lachrymose']=adjInfo("lachrymose")
nouns['lack']=nounInfo("lack")
adjectives['lackadaisical']=adjInfo("lackadaisical")
adverbs['lackadaisically']="lackadaisically"
nouns['lackey']=nounInfo("lackey")
adjectives['laconic']=adjInfo("laconic")
adverbs['laconically']="laconically"
nouns['laconicism']=nounInfo("laconicism")
nouns['laconism']=nounInfo("laconism")
nouns['lacquer']=nounInfo("lacquer")
nouns['lacrosse']=nounInfo("lacrosse")
adjectives['lactic']=adjInfo("lactic")
nouns['lacuna']=nounInfo("lacuna")
adjectives['lacy']=adjInfo("lacy")
nouns['lad']=nounInfo("lad").addAttributes({"g":"m"})
nouns['ladder']=nounInfo("ladder")
nouns['laddie']=nounInfo("laddie")
adjectives['laden']=adjInfo("laden")
nouns['lading']=nounInfo("lading")
nouns['ladle']=nounInfo("ladle")
nouns['lady']=nounInfo("lady").addAttributes({"g":"f"})
nouns['ladybird']=nounInfo("ladybird")
adjectives['ladylike']=adjInfo("ladylike")
nouns['ladyship']=nounInfo("ladyship")
nouns['lag']=nounInfo("lag")
nouns['lager']=nounInfo("lager")
nouns['laggard']=nounInfo("laggard")
nouns['lagging']=nounInfo("lagging")
nouns['lagoon']=nounInfo("lagoon")
adjectives['laic']=adjInfo("laic")
nouns['lair']=nounInfo("lair")
nouns['laird']=nounInfo("laird")
nouns['laity']=nounInfo("laity")
nouns['lake']=nounInfo("lake")
nouns['lakh']=nounInfo("lakh")
nouns['lama']=nounInfo("lama")
nouns['lamasery']=nounInfo("lamasery")
nouns['lamb']=nounInfo("lamb")
nouns['lambency']=nounInfo("lambency")
adjectives['lambent']=adjInfo("lambent")
nouns['lambkin']=nounInfo("lambkin")
nouns['lambskin']=nounInfo("lambskin")
adjectives['lame']=adjInfo("lame")
adverbs['lamely']="lamely"
nouns['lameness']=nounInfo("lameness")
nouns['lament']=nounInfo("lament")
adjectives['lamentable']=adjInfo("lamentable")
adverbs['lamentably']="lamentably"
nouns['lamentation']=nounInfo("lamentation")
nouns['lamp']=nounInfo("lamp")
nouns['lamplight']=nounInfo("lamplight")
nouns['lamplighter']=nounInfo("lamplighter")
nouns['lampoon']=nounInfo("lampoon")
nouns['lamprey']=nounInfo("lamprey")
nouns['lampshade']=nounInfo("lampshade")
nouns['lance']=nounInfo("lance")
nouns['lancer']=nounInfo("lancer")
nouns['lancers']=nounInfo("lancers")
nouns['lancet']=nounInfo("lancet")
nouns['land']=nounInfo("land")
nouns['landau']=nounInfo("landau")
adjectives['landed']=adjInfo("landed")
nouns['landfall']=nounInfo("landfall")
nouns['landgrave']=nounInfo("landgrave")
nouns['landholder']=nounInfo("landholder")
nouns['landing']=nounInfo("landing")
nouns['landlady']=nounInfo("landlady").addAttributes({"g":"f"})
adjectives['landless']=adjInfo("landless")
nouns['landlord']=nounInfo("landlord").addAttributes({"g":"x"})
nouns['landmark']=nounInfo("landmark")
nouns['landmine']=nounInfo("landmine")
nouns['landowner']=nounInfo("landowner")
nouns['landscape']=nounInfo("landscape")
nouns['landslide']=nounInfo("landslide")
nouns['landslip']=nounInfo("landslip")
nouns['landsman']=nounInfo("landsman")
nouns['lane']=nounInfo("lane")
adverbs['langsyne']="langsyne"
nouns['langsyne']=nounInfo("langsyne")
nouns['language']=nounInfo("language")
adjectives['languid']=adjInfo("languid")
adverbs['languidly']="languidly"
nouns['languor']=nounInfo("languor")
adjectives['languorous']=adjInfo("languorous")
adverbs['languorously']="languorously"
nouns['langur']=nounInfo("langur")
adjectives['lank']=adjInfo("lank")
adjectives['lanky']=adjInfo("lanky")
nouns['lanolin']=nounInfo("lanolin")
nouns['lantern']=nounInfo("lantern")
nouns['lanyard']=nounInfo("lanyard")
nouns['lap']=nounInfo("lap")
nouns['lapel']=nounInfo("lapel")
adjectives['lapidary']=adjInfo("lapidary")
nouns['lapidary']=nounInfo("lapidary")
nouns['lapse']=nounInfo("lapse")
nouns['lapwing']=nounInfo("lapwing")
adjectives['larboard']=adjInfo("larboard")
nouns['larboard']=nounInfo("larboard")
nouns['larceny']=nounInfo("larceny")
nouns['larch']=nounInfo("larch")
nouns['lard']=nounInfo("lard")
nouns['larder']=nounInfo("larder")
adjectives['large']=adjInfo("large")
adverbs['large']="large"
nouns['large']=nounInfo("large")
adjectives['largeish']=adjInfo("largeish")
adverbs['largely']="largely"
nouns['largeness']=nounInfo("largeness")
nouns['largesse']=nounInfo("largesse")
nouns['largo']=nounInfo("largo")
nouns['lariat']=nounInfo("lariat")
nouns['lark']=nounInfo("lark")
nouns['larkspur']=nounInfo("larkspur")
nouns['larva']=nounInfo("larva")
adjectives['larval']=adjInfo("larval")
nouns['laryngitis']=nounInfo("laryngitis")
nouns['larynx']=nounInfo("larynx")
nouns['lascar']=nounInfo("lascar")
adjectives['lascivious']=adjInfo("lascivious")
adverbs['lasciviously']="lasciviously"
nouns['lasciviousness']=nounInfo("lasciviousness")
nouns['laser']=nounInfo("laser")
nouns['lash']=nounInfo("lash")
nouns['lashing']=nounInfo("lashing")
nouns['lass']=nounInfo("lass").addAttributes({"g":"f"})
nouns['lassie']=nounInfo("lassie")
nouns['lassitude']=nounInfo("lassitude")
nouns['lasso']=nounInfo("lasso")
nouns['last']=nounInfo("last")
adjectives['lasting']=adjInfo("lasting")
adverbs['lastly']="lastly"
nouns['latch']=nounInfo("latch")
nouns['latchkey']=nounInfo("latchkey")
adjectives['late']=adjInfo("late")
adverbs['late']="late"
adjectives['lateen']=adjInfo("lateen")
adverbs['lately']="lately"
adjectives['latent']=adjInfo("latent")
adjectives['lateral']=adjInfo("lateral")
adverbs['laterally']="laterally"
nouns['laterite']=nounInfo("laterite")
nouns['latex']=nounInfo("latex")
nouns['lath']=nounInfo("lath")
nouns['lathe']=nounInfo("lathe")
nouns['lather']=nounInfo("lather")
nouns['lathi']=nounInfo("lathi")
adjectives['latish']=adjInfo("latish")
nouns['latitude']=nounInfo("latitude")
adjectives['latitudinal']=adjInfo("latitudinal")
adjectives['latitudinarian']=adjInfo("latitudinarian")
nouns['latitudinarian']=nounInfo("latitudinarian")
nouns['latrine']=nounInfo("latrine")
adjectives['latter']=adjInfo("latter")
adverbs['latterly']="latterly"
nouns['lattice']=nounInfo("lattice")
adjectives['latticed']=adjInfo("latticed")
adjectives['laudable']=adjInfo("laudable")
adverbs['laudably']="laudably"
nouns['laudanum']=nounInfo("laudanum")
adjectives['laudatory']=adjInfo("laudatory")
nouns['laugh']=nounInfo("laugh")
adjectives['laughable']=adjInfo("laughable")
adverbs['laughably']="laughably"
adjectives['laughing']=adjInfo("laughing")
adverbs['laughingly']="laughingly"
nouns['laughter']=nounInfo("laughter")
nouns['launch']=nounInfo("launch")
nouns['launderette']=nounInfo("launderette")
nouns['laundress']=nounInfo("laundress")
nouns['laundry']=nounInfo("laundry")
nouns['laundryman']=nounInfo("laundryman")
adjectives['laureate']=adjInfo("laureate")
nouns['laureate']=nounInfo("laureate")
nouns['laurel']=nounInfo("laurel")
adjectives['laurelled']=adjInfo("laurelled")
nouns['lav']=nounInfo("lav")
nouns['lava']=nounInfo("lava")
nouns['lavatory']=nounInfo("lavatory")
nouns['lavender']=nounInfo("lavender")
adjectives['lavish']=adjInfo("lavish")
adverbs['lavishly']="lavishly"
nouns['law']=nounInfo("law")
adjectives['lawful']=adjInfo("lawful")
adverbs['lawfully']="lawfully"
adjectives['lawless']=adjInfo("lawless")
adverbs['lawlessly']="lawlessly"
nouns['lawlessness']=nounInfo("lawlessness")
nouns['lawmaker']=nounInfo("lawmaker")
nouns['lawn']=nounInfo("lawn")
nouns['lawyer']=nounInfo("lawyer").addAttributes({"g":"x"})
adjectives['lax']=adjInfo("lax")
adjectives['laxative']=adjInfo("laxative")
nouns['laxative']=nounInfo("laxative")
nouns['laxity']=nounInfo("laxity")
adverbs['laxly']="laxly"
adjectives['lay']=adjInfo("lay")
nouns['lay']=nounInfo("lay")
nouns['layabout']=nounInfo("layabout")
nouns['layby']=nounInfo("layby")
nouns['layer']=nounInfo("layer")
nouns['layette']=nounInfo("layette")
nouns['layman']=nounInfo("layman")
nouns['layoff']=nounInfo("layoff")
nouns['layover']=nounInfo("layover")
nouns['lazar']=nounInfo("lazar")
nouns['lazaret']=nounInfo("lazaret")
nouns['lazarette']=nounInfo("lazarette")
nouns['lazaretto']=nounInfo("lazaretto")
adverbs['lazily']="lazily"
nouns['laziness']=nounInfo("laziness")
adjectives['lazy']=adjInfo("lazy")
nouns['lea']=nounInfo("lea")
nouns['lead']=nounInfo("lead")
adjectives['leaded']=adjInfo("leaded")
adjectives['leaden']=adjInfo("leaden")
nouns['leader']=nounInfo("leader").addAttributes({"g":"x"})
adjectives['leaderless']=adjInfo("leaderless")
nouns['leadership']=nounInfo("leadership")
adjectives['leading']=adjInfo("leading")
nouns['leading']=nounInfo("leading")
nouns['leaf']=nounInfo("leaf")
adjectives['leafless']=adjInfo("leafless")
nouns['leaflet']=nounInfo("leaflet")
adjectives['leafy']=adjInfo("leafy")
nouns['league']=nounInfo("league")
nouns['leak']=nounInfo("leak")
nouns['leakage']=nounInfo("leakage")
adjectives['leaky']=adjInfo("leaky")
adjectives['leal']=adjInfo("leal")
adjectives['lean']=adjInfo("lean")
nouns['lean']=nounInfo("lean")
nouns['leaning']=nounInfo("leaning")
nouns['leanness']=nounInfo("leanness")
nouns['leap']=nounInfo("leap")
adjectives['learned']=adjInfo("learned")
adverbs['learnedly']="learnedly"
nouns['learner']=nounInfo("learner").addAttributes({"g":"x"})
nouns['learning']=nounInfo("learning")
nouns['lease']=nounInfo("lease")
adjectives['leasehold']=adjInfo("leasehold")
nouns['leasehold']=nounInfo("leasehold")
nouns['leaseholder']=nounInfo("leaseholder")
nouns['leash']=nounInfo("leash")
nouns['least']=nounInfo("least")
adverbs['leastways']="leastways"
adverbs['leastwise']="leastwise"
nouns['leather']=nounInfo("leather")
nouns['leatherette']=nounInfo("leatherette")
nouns['leatherneck']=nounInfo("leatherneck")
adjectives['leathery']=adjInfo("leathery")
nouns['leave']=nounInfo("leave")
nouns['leaven']=nounInfo("leaven")
nouns['leavings']=nounInfo("leavings")
nouns['lecher']=nounInfo("lecher")
adjectives['lecherous']=adjInfo("lecherous")
nouns['lechery']=nounInfo("lechery")
nouns['lectern']=nounInfo("lectern")
nouns['lecture']=nounInfo("lecture")
nouns['lecturer']=nounInfo("lecturer").addAttributes({"g":"x"})
nouns['lectureship']=nounInfo("lectureship")
nouns['ledge']=nounInfo("ledge")
nouns['ledger']=nounInfo("ledger")
nouns['lee']=nounInfo("lee")
nouns['leech']=nounInfo("leech")
nouns['leek']=nounInfo("leek")
nouns['leer']=nounInfo("leer")
nouns['lees']=nounInfo("lees")
adjectives['leeward']=adjInfo("leeward")
adverbs['leeward']="leeward"
nouns['leeway']=nounInfo("leeway")
adjectives['left']=adjInfo("left")
adverbs['left']="left"
nouns['left']=nounInfo("left")
nouns['leftist']=nounInfo("leftist")
nouns['leg']=nounInfo("leg")
nouns['legacy']=nounInfo("legacy")
adjectives['legal']=adjInfo("legal")
nouns['legalism']=nounInfo("legalism")
nouns['legality']=nounInfo("legality")
nouns['legalization']=nounInfo("legalization")
adverbs['legally']="legally"
nouns['legate']=nounInfo("legate")
nouns['legatee']=nounInfo("legatee")
nouns['legation']=nounInfo("legation")
adjectives['legato']=adjInfo("legato")
adverbs['legato']="legato"
nouns['legend']=nounInfo("legend")
adjectives['legendary']=adjInfo("legendary")
nouns['legerdemain']=nounInfo("legerdemain")
adjectives['legged']=adjInfo("legged")
nouns['legging']=nounInfo("legging")
adjectives['leggy']=adjInfo("leggy")
nouns['leghorn']=nounInfo("leghorn")
nouns['legibility']=nounInfo("legibility")
adjectives['legible']=adjInfo("legible")
adverbs['legibly']="legibly"
nouns['legion']=nounInfo("legion")
nouns['legionary']=nounInfo("legionary")
nouns['legislation']=nounInfo("legislation")
adjectives['legislative']=adjInfo("legislative")
nouns['legislator']=nounInfo("legislator")
nouns['legislature']=nounInfo("legislature")
nouns['legitimacy']=nounInfo("legitimacy")
adjectives['legitimate']=adjInfo("legitimate")
adverbs['legitimately']="legitimately"
adjectives['legless']=adjInfo("legless")
adjectives['leguminous']=adjInfo("leguminous")
nouns['lei']=nounInfo("lei")
nouns['leisure']=nounInfo("leisure")
adjectives['leisured']=adjInfo("leisured")
adjectives['leisurely']=adjInfo("leisurely")
adverbs['leisurely']="leisurely"
nouns['lemming']=nounInfo("lemming")
nouns['lemon']=nounInfo("lemon")
nouns['lemonade']=nounInfo("lemonade")
nouns['lemur']=nounInfo("lemur")
nouns['lender']=nounInfo("lender").addAttributes({"g":"x"})
nouns['length']=nounInfo("length")
adverbs['lengthily']="lengthily"
adjectives['lengthways']=adjInfo("lengthways")
adverbs['lengthways']="lengthways"
adverbs['lengthwise']="lengthwise"
adjectives['lengthy']=adjInfo("lengthy")
nouns['lenience']=nounInfo("lenience")
nouns['leniency']=nounInfo("leniency")
adjectives['lenient']=adjInfo("lenient")
adverbs['leniently']="leniently"
nouns['lenity']=nounInfo("lenity")
nouns['lens']=nounInfo("lens")
nouns['lentil']=nounInfo("lentil")
adjectives['lento']=adjInfo("lento")
adverbs['lento']="lento"
adjectives['leonine']=adjInfo("leonine")
nouns['leopard']=nounInfo("leopard")
nouns['leopardess']=nounInfo("leopardess")
nouns['leper']=nounInfo("leper")
nouns['leprechaun']=nounInfo("leprechaun")
nouns['leprosy']=nounInfo("leprosy")
adjectives['leprous']=adjInfo("leprous")
nouns['lesbian']=nounInfo("lesbian")
nouns['lesbianism']=nounInfo("lesbianism")
nouns['lesion']=nounInfo("lesion")
adverbs['less']="less"
nouns['less']=nounInfo("less")
prepositions['less']=P("less")
nouns['lessee']=nounInfo("lessee")
adjectives['lesser']=adjInfo("lesser")
nouns['lesson']=nounInfo("lesson")
nouns['lessor']=nounInfo("lessor")
nouns['let']=nounInfo("let")
adjectives['lethal']=adjInfo("lethal")
adjectives['lethargic']=adjInfo("lethargic")
adverbs['lethargically']="lethargically"
nouns['lethargy']=nounInfo("lethargy")
nouns['letter']=nounInfo("letter")
adjectives['lettered']=adjInfo("lettered")
nouns['letterhead']=nounInfo("letterhead")
nouns['lettering']=nounInfo("lettering")
nouns['letterpress']=nounInfo("letterpress")
nouns['letting']=nounInfo("letting")
nouns['lettuce']=nounInfo("lettuce")
nouns['leucocyte']=nounInfo("leucocyte")
nouns['leukaemia']=nounInfo("leukaemia")
nouns['levee']=nounInfo("levee")
adjectives['level']=adjInfo("level")
nouns['level']=nounInfo("level")
nouns['leveller']=nounInfo("leveller")
nouns['lever']=nounInfo("lever")
nouns['leverage']=nounInfo("leverage")
nouns['leveret']=nounInfo("leveret")
nouns['leviathan']=nounInfo("leviathan")
nouns['levis']=nounInfo("levis")
nouns['levitation']=nounInfo("levitation")
nouns['levity']=nounInfo("levity")
nouns['levy']=nounInfo("levy")
adjectives['lewd']=adjInfo("lewd")
adverbs['lewdly']="lewdly"
nouns['lewdness']=nounInfo("lewdness")
adjectives['lexical']=adjInfo("lexical")
adverbs['lexically']="lexically"
nouns['lexicographer']=nounInfo("lexicographer")
nouns['lexicography']=nounInfo("lexicography")
nouns['lexicon']=nounInfo("lexicon")
nouns['lexis']=nounInfo("lexis")
nouns['ley']=nounInfo("ley")
nouns['liability']=nounInfo("liability")
adjectives['liable']=adjInfo("liable")
nouns['liaison']=nounInfo("liaison")
nouns['liana']=nounInfo("liana")
nouns['liar']=nounInfo("liar").addAttributes({"g":"x"})
nouns['lib']=nounInfo("lib")
nouns['libation']=nounInfo("libation")
nouns['libel']=nounInfo("libel")
adjectives['libellous']=adjInfo("libellous")
adjectives['liberal']=adjInfo("liberal")
nouns['liberal']=nounInfo("liberal")
nouns['liberalism']=nounInfo("liberalism")
nouns['liberality']=nounInfo("liberality")
nouns['liberalization']=nounInfo("liberalization")
adverbs['liberally']="liberally"
nouns['liberation']=nounInfo("liberation")
nouns['liberator']=nounInfo("liberator")
nouns['libertine']=nounInfo("libertine")
nouns['liberty']=nounInfo("liberty")
adjectives['libidinous']=adjInfo("libidinous")
nouns['libido']=nounInfo("libido")
nouns['librarian']=nounInfo("librarian").addAttributes({"g":"x"})
nouns['librarianship']=nounInfo("librarianship")
nouns['library']=nounInfo("library")
nouns['librettist']=nounInfo("librettist")
nouns['libretto']=nounInfo("libretto")
nouns['licence']=nounInfo("licence")
nouns['licensee']=nounInfo("licensee")
nouns['licentiate']=nounInfo("licentiate")
adjectives['licentious']=adjInfo("licentious")
adverbs['licentiously']="licentiously"
nouns['licentiousness']=nounInfo("licentiousness")
nouns['lichee']=nounInfo("lichee")
nouns['lichen']=nounInfo("lichen")
nouns['lichgate']=nounInfo("lichgate")
nouns['lichi']=nounInfo("lichi")
adjectives['licit']=adjInfo("licit")
nouns['lick']=nounInfo("lick")
nouns['licking']=nounInfo("licking")
nouns['lid']=nounInfo("lid")
adjectives['lidless']=adjInfo("lidless")
nouns['lido']=nounInfo("lido")
nouns['lie']=nounInfo("lie")
nouns['lied']=nounInfo("lied")
adverbs['lief']="lief"
adjectives['liege']=adjInfo("liege")
nouns['liege']=nounInfo("liege")
nouns['liegeman']=nounInfo("liegeman")
nouns['lien']=nounInfo("lien")
nouns['lieu']=nounInfo("lieu")
nouns['lieutenancy']=nounInfo("lieutenancy")
nouns['lieutenant']=nounInfo("lieutenant")
nouns['life']=nounInfo("life")
nouns['lifebelt']=nounInfo("lifebelt")
nouns['lifeblood']=nounInfo("lifeblood")
nouns['lifeboat']=nounInfo("lifeboat")
nouns['lifebuoy']=nounInfo("lifebuoy")
nouns['lifeguard']=nounInfo("lifeguard")
adjectives['lifeless']=adjInfo("lifeless")
adverbs['lifelessly']="lifelessly"
adjectives['lifelike']=adjInfo("lifelike")
nouns['lifeline']=nounInfo("lifeline")
adjectives['lifelong']=adjInfo("lifelong")
nouns['lifer']=nounInfo("lifer")
nouns['lifestyle']=nounInfo("lifestyle")
nouns['lifetime']=nounInfo("lifetime")
nouns['lift']=nounInfo("lift")
nouns['liftman']=nounInfo("liftman")
nouns['ligament']=nounInfo("ligament")
nouns['ligature']=nounInfo("ligature")
adjectives['light']=adjInfo("light")
adverbs['light']="light"
nouns['light']=nounInfo("light")
nouns['lighter']=nounInfo("lighter")
nouns['lighterage']=nounInfo("lighterage")
nouns['lighthouse']=nounInfo("lighthouse")
adverbs['lightly']="lightly"
nouns['lightness']=nounInfo("lightness")
nouns['lightning']=nounInfo("lightning")
nouns['lights']=nounInfo("lights")
nouns['lightship']=nounInfo("lightship")
adjectives['lightsome']=adjInfo("lightsome")
adverbs['lightsomely']="lightsomely"
nouns['lightsomeness']=nounInfo("lightsomeness")
adjectives['lightweight']=adjInfo("lightweight")
nouns['lightweight']=nounInfo("lightweight")
adjectives['ligneous']=adjInfo("ligneous")
nouns['lignite']=nounInfo("lignite")
adjectives['likable']=adjInfo("likable")
adjectives['like']=adjInfo("like")
adverbs['like']="like"
nouns['like']=nounInfo("like")
prepositions['like']=P("like")
adjectives['likeable']=adjInfo("likeable")
nouns['likelihood']=nounInfo("likelihood")
adjectives['likely']=adjInfo("likely")
adverbs['likely']="likely"
nouns['likeness']=nounInfo("likeness")
adverbs['likewise']="likewise"
nouns['liking']=nounInfo("liking")
nouns['lilac']=nounInfo("lilac")
nouns['lilt']=nounInfo("lilt")
nouns['lily']=nounInfo("lily")
nouns['limb']=nounInfo("limb")
adjectives['limbed']=adjInfo("limbed")
adjectives['limber']=adjInfo("limber")
nouns['limbo']=nounInfo("limbo")
nouns['lime']=nounInfo("lime")
nouns['limejuice']=nounInfo("limejuice")
nouns['limekiln']=nounInfo("limekiln")
nouns['limelight']=nounInfo("limelight")
nouns['limerick']=nounInfo("limerick")
nouns['limestone']=nounInfo("limestone")
nouns['limey']=nounInfo("limey")
nouns['limit']=nounInfo("limit")
nouns['limitation']=nounInfo("limitation")
adjectives['limitless']=adjInfo("limitless")
nouns['limousine']=nounInfo("limousine")
adjectives['limp']=adjInfo("limp")
nouns['limp']=nounInfo("limp")
nouns['limpet']=nounInfo("limpet")
adjectives['limpid']=adjInfo("limpid")
nouns['limpidity']=nounInfo("limpidity")
adverbs['limpidly']="limpidly"
adverbs['limply']="limply"
nouns['limpness']=nounInfo("limpness")
nouns['linchpin']=nounInfo("linchpin")
nouns['linden']=nounInfo("linden")
nouns['line']=nounInfo("line")
nouns['lineage']=nounInfo("lineage")
adjectives['lineal']=adjInfo("lineal")
adverbs['lineally']="lineally"
nouns['lineament']=nounInfo("lineament")
adjectives['linear']=adjInfo("linear")
adverbs['linearly']="linearly"
nouns['lineman']=nounInfo("lineman")
nouns['linen']=nounInfo("linen")
nouns['liner']=nounInfo("liner")
nouns['linesman']=nounInfo("linesman")
nouns['ling']=nounInfo("ling")
nouns['lingam']=nounInfo("lingam")
nouns['lingerer']=nounInfo("lingerer")
nouns['lingerie']=nounInfo("lingerie")
adjectives['lingering']=adjInfo("lingering")
adverbs['lingeringly']="lingeringly"
nouns['lingo']=nounInfo("lingo")
adjectives['lingual']=adjInfo("lingual")
nouns['linguist']=nounInfo("linguist")
adjectives['linguistic']=adjInfo("linguistic")
adverbs['linguistically']="linguistically"
nouns['linguistics']=nounInfo("linguistics")
nouns['liniment']=nounInfo("liniment")
nouns['lining']=nounInfo("lining")
nouns['link']=nounInfo("link")
nouns['linkage']=nounInfo("linkage")
nouns['linkboy']=nounInfo("linkboy")
nouns['linkman']=nounInfo("linkman")
nouns['links']=nounInfo("links")
nouns['linnet']=nounInfo("linnet")
nouns['lino']=nounInfo("lino")
nouns['linoleum']=nounInfo("linoleum")
nouns['linotype']=nounInfo("linotype")
nouns['linseed']=nounInfo("linseed")
nouns['lint']=nounInfo("lint")
nouns['lintel']=nounInfo("lintel")
nouns['lion']=nounInfo("lion")
nouns['lioness']=nounInfo("lioness")
nouns['lip']=nounInfo("lip")
adjectives['lipped']=adjInfo("lipped")
nouns['lipstick']=nounInfo("lipstick")
nouns['liquefaction']=nounInfo("liquefaction")
adjectives['liquescent']=adjInfo("liquescent")
nouns['liqueur']=nounInfo("liqueur")
adjectives['liquid']=adjInfo("liquid")
nouns['liquid']=nounInfo("liquid")
nouns['liquidation']=nounInfo("liquidation")
nouns['liquidator']=nounInfo("liquidator")
nouns['liquidity']=nounInfo("liquidity")
nouns['liquidizer']=nounInfo("liquidizer")
nouns['liquor']=nounInfo("liquor")
nouns['liquorice']=nounInfo("liquorice")
nouns['lira']=nounInfo("lira")
nouns['lisle']=nounInfo("lisle")
nouns['lisp']=nounInfo("lisp")
adverbs['lispingly']="lispingly"
adjectives['lissom']=adjInfo("lissom")
adjectives['lissome']=adjInfo("lissome")
nouns['lissomness']=nounInfo("lissomness")
nouns['list']=nounInfo("list")
nouns['listener']=nounInfo("listener")
adjectives['listless']=adjInfo("listless")
adverbs['listlessly']="listlessly"
nouns['listlessness']=nounInfo("listlessness")
nouns['lists']=nounInfo("lists")
nouns['litany']=nounInfo("litany")
nouns['litchee']=nounInfo("litchee")
nouns['litchi']=nounInfo("litchi")
nouns['literacy']=nounInfo("literacy")
adjectives['literal']=adjInfo("literal")
nouns['literal']=nounInfo("literal")
adverbs['literally']="literally"
adjectives['literary']=adjInfo("literary")
adjectives['literate']=adjInfo("literate")
nouns['literate']=nounInfo("literate")
nouns['literati']=nounInfo("literati")
nouns['literature']=nounInfo("literature")
adjectives['lithe']=adjInfo("lithe")
nouns['lithograph']=nounInfo("lithograph")
adjectives['lithographic']=adjInfo("lithographic")
nouns['lithography']=nounInfo("lithography")
nouns['litigant']=nounInfo("litigant")
nouns['litigation']=nounInfo("litigation")
adjectives['litigious']=adjInfo("litigious")
nouns['litmus']=nounInfo("litmus")
nouns['litotes']=nounInfo("litotes")
nouns['litre']=nounInfo("litre")
nouns['litter']=nounInfo("litter")
adjectives['little']=adjInfo("little")
adverbs['little']="little"
nouns['little']=nounInfo("little")
nouns['littleness']=nounInfo("littleness")
adjectives['littoral']=adjInfo("littoral")
nouns['littoral']=nounInfo("littoral")
adjectives['liturgical']=adjInfo("liturgical")
nouns['liturgy']=nounInfo("liturgy")
adjectives['livable']=adjInfo("livable")
adjectives['live']=adjInfo("live")
adverbs['live']="live"
adjectives['liveable']=adjInfo("liveable")
nouns['livelihood']=nounInfo("livelihood")
nouns['liveliness']=nounInfo("liveliness")
adjectives['livelong']=adjInfo("livelong")
adjectives['lively']=adjInfo("lively")
nouns['liver']=nounInfo("liver")
adjectives['liveried']=adjInfo("liveried")
adjectives['liverish']=adjInfo("liverish")
nouns['liverwurst']=nounInfo("liverwurst")
adjectives['livery']=adjInfo("livery")
nouns['livery']=nounInfo("livery")
nouns['liveryman']=nounInfo("liveryman")
nouns['livestock']=nounInfo("livestock")
adjectives['livid']=adjInfo("livid")
adverbs['lividly']="lividly"
adjectives['living']=adjInfo("living")
nouns['living']=nounInfo("living")
nouns['lizard']=nounInfo("lizard")
nouns['llama']=nounInfo("llama")
nouns['lo']=nounInfo("lo")
nouns['load']=nounInfo("load")
adjectives['loaded']=adjInfo("loaded")
nouns['loadstar']=nounInfo("loadstar")
nouns['loadstone']=nounInfo("loadstone")
nouns['loaf']=nounInfo("loaf")
nouns['loafer']=nounInfo("loafer")
nouns['loam']=nounInfo("loam")
adjectives['loamy']=adjInfo("loamy")
nouns['loan']=nounInfo("loan")
nouns['loanword']=nounInfo("loanword")
adjectives['loath']=adjInfo("loath")
nouns['loathing']=nounInfo("loathing")
adjectives['loathly']=adjInfo("loathly")
adjectives['loathsome']=adjInfo("loathsome")
nouns['lob']=nounInfo("lob")
nouns['lobby']=nounInfo("lobby")
nouns['lobbyist']=nounInfo("lobbyist")
nouns['lobe']=nounInfo("lobe")
adjectives['lobed']=adjInfo("lobed")
nouns['lobster']=nounInfo("lobster")
adjectives['local']=adjInfo("local")
nouns['local']=nounInfo("local")
nouns['locale']=nounInfo("locale")
nouns['localism']=nounInfo("localism")
nouns['locality']=nounInfo("locality")
nouns['localization']=nounInfo("localization")
adverbs['locally']="locally"
nouns['location']=nounInfo("location")
nouns['loch']=nounInfo("loch")
nouns['lock']=nounInfo("lock")
nouns['locker']=nounInfo("locker")
nouns['locket']=nounInfo("locket")
nouns['lockjaw']=nounInfo("lockjaw")
nouns['locknut']=nounInfo("locknut")
nouns['locksmith']=nounInfo("locksmith")
nouns['lockstitch']=nounInfo("lockstitch")
adjectives['loco']=adjInfo("loco")
nouns['locomotion']=nounInfo("locomotion")
adjectives['locomotive']=adjInfo("locomotive")
nouns['locomotive']=nounInfo("locomotive")
nouns['locum']=nounInfo("locum")
nouns['locus']=nounInfo("locus")
nouns['locust']=nounInfo("locust")
nouns['locution']=nounInfo("locution")
nouns['lode']=nounInfo("lode")
nouns['lodestar']=nounInfo("lodestar")
nouns['lodestone']=nounInfo("lodestone")
nouns['lodge']=nounInfo("lodge")
nouns['lodgement']=nounInfo("lodgement")
nouns['lodger']=nounInfo("lodger")
nouns['lodging']=nounInfo("lodging")
nouns['lodgment']=nounInfo("lodgment")
nouns['loess']=nounInfo("loess")
nouns['loft']=nounInfo("loft")
adverbs['loftily']="loftily"
nouns['loftiness']=nounInfo("loftiness")
adjectives['lofty']=adjInfo("lofty")
nouns['log']=nounInfo("log")
nouns['loganberry']=nounInfo("loganberry")
nouns['logarithm']=nounInfo("logarithm")
nouns['loggerheads']=nounInfo("loggerheads")
nouns['loggia']=nounInfo("loggia")
nouns['logging']=nounInfo("logging")
nouns['logic']=nounInfo("logic")
adjectives['logical']=adjInfo("logical")
nouns['logicality']=nounInfo("logicality")
adverbs['logically']="logically"
nouns['logician']=nounInfo("logician")
nouns['logistics']=nounInfo("logistics")
nouns['loin']=nounInfo("loin")
nouns['loiterer']=nounInfo("loiterer")
nouns['lollipop']=nounInfo("lollipop")
nouns['lolly']=nounInfo("lolly")
adjectives['lone']=adjInfo("lone")
nouns['loneliness']=nounInfo("loneliness")
adjectives['lonely']=adjInfo("lonely")
adjectives['lonesome']=adjInfo("lonesome")
adjectives['long']=adjInfo("long")
adverbs['long']="long"
nouns['long']=nounInfo("long")
nouns['longboat']=nounInfo("longboat")
nouns['longbow']=nounInfo("longbow")
adverbs['longer']="longer"
adverbs['longest']="longest"
nouns['longevity']=nounInfo("longevity")
nouns['longhand']=nounInfo("longhand")
adjectives['longing']=adjInfo("longing")
nouns['longing']=nounInfo("longing")
adverbs['longingly']="longingly"
nouns['longitude']=nounInfo("longitude")
adjectives['longitudinal']=adjInfo("longitudinal")
adverbs['longitudinally']="longitudinally"
nouns['longshoreman']=nounInfo("longshoreman")
adverbs['longways']="longways"
adverbs['longwise']="longwise"
nouns['loo']=nounInfo("loo")
nouns['loofa']=nounInfo("loofa")
nouns['loofah']=nounInfo("loofah")
nouns['look']=nounInfo("look")
nouns['looker']=nounInfo("looker")
nouns['loom']=nounInfo("loom")
nouns['loon']=nounInfo("loon")
adjectives['loony']=adjInfo("loony")
nouns['loony']=nounInfo("loony")
nouns['loonybin']=nounInfo("loonybin")
nouns['loophole']=nounInfo("loophole")
adjectives['loopy']=adjInfo("loopy")
adjectives['loose']=adjInfo("loose")
adverbs['loosely']="loosely"
nouns['loot']=nounInfo("loot")
nouns['looter']=nounInfo("looter")
nouns['lope']=nounInfo("lope")
adjectives['loquacious']=adjInfo("loquacious")
adverbs['loquaciously']="loquaciously"
nouns['loquaciousness']=nounInfo("loquaciousness")
nouns['loquacity']=nounInfo("loquacity")
nouns['loquat']=nounInfo("loquat")
nouns['lor']=nounInfo("lor")
nouns['lord']=nounInfo("lord").addAttributes({"g":"m"})
adjectives['lordless']=adjInfo("lordless")
nouns['lordliness']=nounInfo("lordliness")
adjectives['lordly']=adjInfo("lordly")
nouns['lordship']=nounInfo("lordship")
nouns['lore']=nounInfo("lore")
nouns['lorgnette']=nounInfo("lorgnette")
adjectives['lorn']=adjInfo("lorn")
nouns['lorry']=nounInfo("lorry")
nouns['loser']=nounInfo("loser")
nouns['loss']=nounInfo("loss")
nouns['lot']=nounInfo("lot")
adjectives['loth']=adjInfo("loth")
nouns['lotion']=nounInfo("lotion")
nouns['lottery']=nounInfo("lottery")
nouns['lotto']=nounInfo("lotto")
nouns['lotus']=nounInfo("lotus")
adjectives['loud']=adjInfo("loud")
adverbs['loud']="loud"
adverbs['loudly']="loudly"
nouns['loudness']=nounInfo("loudness")
nouns['lough']=nounInfo("lough")
nouns['lounge']=nounInfo("lounge")
nouns['lounger']=nounInfo("lounger")
adverbs['louringly']="louringly"
nouns['louse']=nounInfo("louse")
adjectives['lousy']=adjInfo("lousy")
nouns['lout']=nounInfo("lout")
adjectives['loutish']=adjInfo("loutish")
adjectives['louvered']=adjInfo("louvered")
nouns['louvre']=nounInfo("louvre")
adjectives['lovable']=adjInfo("lovable")
nouns['love']=nounInfo("love")
nouns['lovebird']=nounInfo("lovebird")
adjectives['loveless']=adjInfo("loveless")
nouns['loveliness']=nounInfo("loveliness")
adjectives['lovelorn']=adjInfo("lovelorn")
adjectives['lovely']=adjInfo("lovely")
nouns['lover']=nounInfo("lover")
adjectives['loverlike']=adjInfo("loverlike")
adjectives['lovesick']=adjInfo("lovesick")
adjectives['loving']=adjInfo("loving")
adverbs['lovingly']="lovingly"
adjectives['low']=adjInfo("low")
adverbs['low']="low"
nouns['low']=nounInfo("low")
adjectives['lowbrow']=adjInfo("lowbrow")
nouns['lowbrow']=nounInfo("lowbrow")
adverbs['lower']="lower"
adjectives['lowermost']=adjInfo("lowermost")
adverbs['lowest']="lowest"
nouns['lowlander']=nounInfo("lowlander")
nouns['lowlands']=nounInfo("lowlands")
nouns['lowliness']=nounInfo("lowliness")
adjectives['lowly']=adjInfo("lowly")
nouns['lowness']=nounInfo("lowness")
adjectives['loyal']=adjInfo("loyal")
nouns['loyalist']=nounInfo("loyalist")
adverbs['loyally']="loyally"
nouns['loyalty']=nounInfo("loyalty")
nouns['lozenge']=nounInfo("lozenge")
nouns['lubber']=nounInfo("lubber")
adjectives['lubberly']=adjInfo("lubberly")
nouns['lubricant']=nounInfo("lubricant")
nouns['lubrication']=nounInfo("lubrication")
adjectives['lucent']=adjInfo("lucent")
nouns['lucerne']=nounInfo("lucerne")
adjectives['lucid']=adjInfo("lucid")
nouns['lucidity']=nounInfo("lucidity")
adverbs['lucidly']="lucidly"
nouns['luck']=nounInfo("luck")
adverbs['luckily']="luckily"
adjectives['luckless']=adjInfo("luckless")
adjectives['lucky']=adjInfo("lucky")
adjectives['lucrative']=adjInfo("lucrative")
nouns['lucre']=nounInfo("lucre")
adjectives['ludicrous']=adjInfo("ludicrous")
adverbs['ludicrously']="ludicrously"
nouns['ludo']=nounInfo("ludo")
nouns['lug']=nounInfo("lug")
nouns['luge']=nounInfo("luge")
nouns['luggage']=nounInfo("luggage")
nouns['lugger']=nounInfo("lugger")
nouns['lugsail']=nounInfo("lugsail")
adjectives['lugubrious']=adjInfo("lugubrious")
adverbs['lugubriously']="lugubriously"
nouns['lugubriousness']=nounInfo("lugubriousness")
adjectives['lukewarm']=adjInfo("lukewarm")
adverbs['lukewarmly']="lukewarmly"
nouns['lukewarmness']=nounInfo("lukewarmness")
nouns['lull']=nounInfo("lull")
nouns['lullaby']=nounInfo("lullaby")
nouns['lumbago']=nounInfo("lumbago")
adjectives['lumbar']=adjInfo("lumbar")
nouns['lumber']=nounInfo("lumber")
nouns['lumberjack']=nounInfo("lumberjack")
nouns['lumberman']=nounInfo("lumberman")
nouns['lumberroom']=nounInfo("lumberroom")
nouns['lumberyard']=nounInfo("lumberyard")
nouns['luminary']=nounInfo("luminary")
nouns['luminosity']=nounInfo("luminosity")
adjectives['luminous']=adjInfo("luminous")
nouns['lumme']=nounInfo("lumme")
nouns['lummy']=nounInfo("lummy")
nouns['lump']=nounInfo("lump")
adjectives['lumpish']=adjInfo("lumpish")
adjectives['lumpy']=adjInfo("lumpy")
nouns['lunacy']=nounInfo("lunacy")
adjectives['lunar']=adjInfo("lunar")
adjectives['lunatic']=adjInfo("lunatic")
nouns['lunatic']=nounInfo("lunatic")
nouns['lunch']=nounInfo("lunch")
nouns['luncheon']=nounInfo("luncheon")
nouns['lung']=nounInfo("lung")
nouns['lunge']=nounInfo("lunge")
nouns['lupin']=nounInfo("lupin")
nouns['lurch']=nounInfo("lurch")
nouns['lurcher']=nounInfo("lurcher")
nouns['lure']=nounInfo("lure")
adjectives['lurid']=adjInfo("lurid")
adverbs['luridly']="luridly"
nouns['luridness']=nounInfo("luridness")
adjectives['luscious']=adjInfo("luscious")
adverbs['lusciously']="lusciously"
nouns['lusciousness']=nounInfo("lusciousness")
adjectives['lush']=adjInfo("lush")
nouns['lush']=nounInfo("lush")
nouns['lust']=nounInfo("lust")
adjectives['lustful']=adjInfo("lustful")
adverbs['lustfully']="lustfully"
adverbs['lustily']="lustily"
nouns['lustre']=nounInfo("lustre")
adjectives['lustrous']=adjInfo("lustrous")
adjectives['lusty']=adjInfo("lusty")
nouns['lutanist']=nounInfo("lutanist")
nouns['lute']=nounInfo("lute")
adjectives['luxe']=adjInfo("luxe")
nouns['luxuriance']=nounInfo("luxuriance")
adjectives['luxuriant']=adjInfo("luxuriant")
adverbs['luxuriantly']="luxuriantly"
adjectives['luxurious']=adjInfo("luxurious")
adverbs['luxuriously']="luxuriously"
nouns['luxury']=nounInfo("luxury")
nouns['lyceum']=nounInfo("lyceum")
nouns['lychee']=nounInfo("lychee")
nouns['lychgate']=nounInfo("lychgate")
nouns['lye']=nounInfo("lye")
nouns['lymph']=nounInfo("lymph")
adjectives['lymphatic']=adjInfo("lymphatic")
nouns['lynch']=nounInfo("lynch")
nouns['lynchpin']=nounInfo("lynchpin")
nouns['lynx']=nounInfo("lynx")
nouns['lyre']=nounInfo("lyre")
adjectives['lyric']=adjInfo("lyric")
nouns['lyric']=nounInfo("lyric")
adjectives['lyrical']=adjInfo("lyrical")
adverbs['lyrically']="lyrically"
nouns['lysol']=nounInfo("lysol")
nouns['ma']=nounInfo("ma")
nouns['mac']=nounInfo("mac")
adjectives['macabre']=adjInfo("macabre")
nouns['macadam']=nounInfo("macadam")
nouns['macaroni']=nounInfo("macaroni")
nouns['macaroon']=nounInfo("macaroon")
nouns['macaw']=nounInfo("macaw")
nouns['mace']=nounInfo("mace")
nouns['machete']=nounInfo("machete")
adjectives['machiavellian']=adjInfo("machiavellian")
nouns['machination']=nounInfo("machination")
nouns['machine']=nounInfo("machine")
nouns['machinery']=nounInfo("machinery")
nouns['machinist']=nounInfo("machinist")
nouns['machismo']=nounInfo("machismo")
nouns['mackerel']=nounInfo("mackerel")
nouns['mackintosh']=nounInfo("mackintosh")
adjectives['macrobiotic']=adjInfo("macrobiotic")
nouns['macrocosm']=nounInfo("macrocosm")
adverbs['macroscopically']="macroscopically"
adjectives['mad']=adjInfo("mad")
nouns['madam']=nounInfo("madam").addAttributes({"g":"f"})
nouns['madcap']=nounInfo("madcap")
nouns['madder']=nounInfo("madder")
nouns['madhouse']=nounInfo("madhouse")
adverbs['madly']="madly"
nouns['madman']=nounInfo("madman")
nouns['madness']=nounInfo("madness")
nouns['madrigal']=nounInfo("madrigal")
nouns['madwoman']=nounInfo("madwoman")
nouns['maelstrom']=nounInfo("maelstrom")
nouns['maenad']=nounInfo("maenad")
nouns['maestro']=nounInfo("maestro")
nouns['mag']=nounInfo("mag")
nouns['magazine']=nounInfo("magazine")
adjectives['magenta']=adjInfo("magenta")
nouns['magenta']=nounInfo("magenta")
nouns['maggot']=nounInfo("maggot")
adjectives['maggoty']=adjInfo("maggoty")
adjectives['magic']=adjInfo("magic")
nouns['magic']=nounInfo("magic")
adjectives['magical']=adjInfo("magical")
adverbs['magically']="magically"
nouns['magician']=nounInfo("magician").addAttributes({"g":"x"})
adjectives['magisterial']=adjInfo("magisterial")
adverbs['magisterially']="magisterially"
nouns['magistracy']=nounInfo("magistracy")
nouns['magistrate']=nounInfo("magistrate").addAttributes({"g":"x"})
nouns['magnanimity']=nounInfo("magnanimity")
adjectives['magnanimous']=adjInfo("magnanimous")
adverbs['magnanimously']="magnanimously"
nouns['magnate']=nounInfo("magnate")
nouns['magnesia']=nounInfo("magnesia")
nouns['magnesium']=nounInfo("magnesium")
nouns['magnet']=nounInfo("magnet")
adjectives['magnetic']=adjInfo("magnetic")
adverbs['magnetically']="magnetically"
nouns['magnetism']=nounInfo("magnetism")
nouns['magneto']=nounInfo("magneto")
nouns['magnification']=nounInfo("magnification")
nouns['magnificence']=nounInfo("magnificence")
adjectives['magnificent']=adjInfo("magnificent")
adverbs['magnificently']="magnificently"
nouns['magnifier']=nounInfo("magnifier")
nouns['magniloquence']=nounInfo("magniloquence")
adjectives['magniloquent']=adjInfo("magniloquent")
adverbs['magniloquently']="magniloquently"
nouns['magnitude']=nounInfo("magnitude")
nouns['magnolia']=nounInfo("magnolia")
nouns['magnum']=nounInfo("magnum")
nouns['magpie']=nounInfo("magpie")
nouns['mahjong']=nounInfo("mahjong")
nouns['mahogany']=nounInfo("mahogany")
nouns['mahout']=nounInfo("mahout")
nouns['maid']=nounInfo("maid")
adjectives['maiden']=adjInfo("maiden")
nouns['maiden']=nounInfo("maiden")
nouns['maidenhair']=nounInfo("maidenhair")
nouns['maidenhead']=nounInfo("maidenhead")
nouns['maidenhood']=nounInfo("maidenhood")
adjectives['maidenlike']=adjInfo("maidenlike")
adjectives['maidenly']=adjInfo("maidenly")
nouns['mail']=nounInfo("mail")
nouns['mailbag']=nounInfo("mailbag")
nouns['mailboat']=nounInfo("mailboat")
nouns['mailbox']=nounInfo("mailbox")
adjectives['mailed']=adjInfo("mailed")
nouns['mailman']=nounInfo("mailman")
adjectives['main']=adjInfo("main")
nouns['main']=nounInfo("main")
nouns['mainland']=nounInfo("mainland")
adverbs['mainly']="mainly"
nouns['mainmast']=nounInfo("mainmast")
nouns['mainspring']=nounInfo("mainspring")
nouns['mainstay']=nounInfo("mainstay")
nouns['mainstream']=nounInfo("mainstream")
adjectives['maintainable']=adjInfo("maintainable")
nouns['maintenance']=nounInfo("maintenance")
nouns['maisonnette']=nounInfo("maisonnette")
nouns['maize']=nounInfo("maize")
adjectives['majestic']=adjInfo("majestic")
adverbs['majestically']="majestically"
nouns['majesty']=nounInfo("majesty")
nouns['majolica']=nounInfo("majolica")
adjectives['major']=adjInfo("major")
nouns['major']=nounInfo("major")
nouns['majority']=nounInfo("majority")
nouns['make']=nounInfo("make")
nouns['maker']=nounInfo("maker")
nouns['makeshift']=nounInfo("makeshift")
nouns['makeweight']=nounInfo("makeweight")
nouns['making']=nounInfo("making")
nouns['malacca']=nounInfo("malacca")
nouns['malachite']=nounInfo("malachite")
adjectives['maladjusted']=adjInfo("maladjusted")
nouns['maladjustment']=nounInfo("maladjustment")
adjectives['maladroit']=adjInfo("maladroit")
adverbs['maladroitly']="maladroitly"
nouns['maladroitness']=nounInfo("maladroitness")
nouns['malady']=nounInfo("malady")
nouns['malaise']=nounInfo("malaise")
nouns['malapropism']=nounInfo("malapropism")
adjectives['malapropos']=adjInfo("malapropos")
adverbs['malapropos']="malapropos"
nouns['malaria']=nounInfo("malaria")
adjectives['malarial']=adjInfo("malarial")
adjectives['malcontent']=adjInfo("malcontent")
nouns['malcontent']=nounInfo("malcontent")
adjectives['male']=adjInfo("male")
nouns['male']=nounInfo("male").addAttributes({"g":"m"})
nouns['malediction']=nounInfo("malediction")
nouns['malefactor']=nounInfo("malefactor")
adjectives['maleficent']=adjInfo("maleficent")
nouns['malevolence']=nounInfo("malevolence")
adjectives['malevolent']=adjInfo("malevolent")
adverbs['malevolently']="malevolently"
nouns['malfeasance']=nounInfo("malfeasance")
nouns['malformation']=nounInfo("malformation")
adjectives['malformed']=adjInfo("malformed")
nouns['malfunction']=nounInfo("malfunction")
nouns['malice']=nounInfo("malice")
adjectives['malicious']=adjInfo("malicious")
adverbs['maliciously']="maliciously"
adjectives['malign']=adjInfo("malign")
nouns['malignancy']=nounInfo("malignancy")
adjectives['malignant']=adjInfo("malignant")
adverbs['malignantly']="malignantly"
nouns['malignity']=nounInfo("malignity")
nouns['malingerer']=nounInfo("malingerer")
nouns['mallard']=nounInfo("mallard")
nouns['malleability']=nounInfo("malleability")
adjectives['malleable']=adjInfo("malleable")
nouns['mallet']=nounInfo("mallet")
nouns['mallow']=nounInfo("mallow")
nouns['malmsey']=nounInfo("malmsey")
nouns['malnutrition']=nounInfo("malnutrition")
adjectives['malodorous']=adjInfo("malodorous")
nouns['malpractice']=nounInfo("malpractice")
nouns['malt']=nounInfo("malt")
nouns['maltreatment']=nounInfo("maltreatment")
nouns['maltster']=nounInfo("maltster")
nouns['malversation']=nounInfo("malversation")
nouns['mama']=nounInfo("mama").addAttributes({"g":"f"})
nouns['mamba']=nounInfo("mamba")
nouns['mamma']=nounInfo("mamma")
nouns['mammal']=nounInfo("mammal")
nouns['mammon']=nounInfo("mammon")
nouns['mammoth']=nounInfo("mammoth")
nouns['mammy']=nounInfo("mammy")
nouns['man']=nounInfo("man").addAttributes({"g":"m"})
nouns['manacle']=nounInfo("manacle")
nouns['manageability']=nounInfo("manageability")
adjectives['manageable']=adjInfo("manageable")
nouns['management']=nounInfo("management")
nouns['manager']=nounInfo("manager").addAttributes({"g":"x"})
nouns['manageress']=nounInfo("manageress").addAttributes({"g":"f"})
adjectives['managerial']=adjInfo("managerial")
nouns['manatee']=nounInfo("manatee")
nouns['mandarin']=nounInfo("mandarin")
nouns['mandatary']=nounInfo("mandatary")
nouns['mandate']=nounInfo("mandate")
adjectives['mandatory']=adjInfo("mandatory")
nouns['mandatory']=nounInfo("mandatory")
nouns['mandible']=nounInfo("mandible")
nouns['mandolin']=nounInfo("mandolin")
nouns['mandragora']=nounInfo("mandragora")
nouns['mandrake']=nounInfo("mandrake")
nouns['mandrill']=nounInfo("mandrill")
nouns['mane']=nounInfo("mane")
nouns['manes']=nounInfo("manes")
adjectives['manful']=adjInfo("manful")
adverbs['manfully']="manfully"
nouns['manganese']=nounInfo("manganese")
nouns['mange']=nounInfo("mange")
nouns['manger']=nounInfo("manger")
adverbs['mangily']="mangily"
nouns['mangle']=nounInfo("mangle")
nouns['mango']=nounInfo("mango")
nouns['mangosteen']=nounInfo("mangosteen")
nouns['mangrove']=nounInfo("mangrove")
adjectives['mangy']=adjInfo("mangy")
nouns['manhattan']=nounInfo("manhattan")
nouns['manhole']=nounInfo("manhole")
nouns['manhood']=nounInfo("manhood")
nouns['mania']=nounInfo("mania")
nouns['maniac']=nounInfo("maniac")
adjectives['maniacal']=adjInfo("maniacal")
adverbs['maniacally']="maniacally"
nouns['manicure']=nounInfo("manicure")
nouns['manicurist']=nounInfo("manicurist")
adjectives['manifest']=adjInfo("manifest")
nouns['manifest']=nounInfo("manifest")
nouns['manifestation']=nounInfo("manifestation")
adverbs['manifestly']="manifestly"
nouns['manifesto']=nounInfo("manifesto")
adjectives['manifold']=adjInfo("manifold")
nouns['manifold']=nounInfo("manifold")
nouns['manikin']=nounInfo("manikin")
nouns['manipulation']=nounInfo("manipulation")
adjectives['manipulative']=adjInfo("manipulative")
nouns['mankind']=nounInfo("mankind")
adjectives['manlike']=adjInfo("manlike")
nouns['manliness']=nounInfo("manliness")
adjectives['manly']=adjInfo("manly")
nouns['manna']=nounInfo("manna")
nouns['mannequin']=nounInfo("mannequin")
nouns['manner']=nounInfo("manner")
adjectives['mannered']=adjInfo("mannered")
nouns['mannerism']=nounInfo("mannerism")
adjectives['mannerly']=adjInfo("mannerly")
adjectives['mannish']=adjInfo("mannish")
nouns['manoeuvrability']=nounInfo("manoeuvrability")
adjectives['manoeuvrable']=adjInfo("manoeuvrable")
nouns['manoeuvre']=nounInfo("manoeuvre")
nouns['manoeuvrer']=nounInfo("manoeuvrer")
nouns['manor']=nounInfo("manor")
adjectives['manorial']=adjInfo("manorial")
nouns['manpower']=nounInfo("manpower")
nouns['mansard']=nounInfo("mansard")
nouns['manse']=nounInfo("manse")
nouns['manservant']=nounInfo("manservant").addAttributes({"g":"m"})
nouns['mansion']=nounInfo("mansion")
nouns['manslaughter']=nounInfo("manslaughter")
nouns['mantel']=nounInfo("mantel")
nouns['mantilla']=nounInfo("mantilla")
nouns['mantis']=nounInfo("mantis")
nouns['mantle']=nounInfo("mantle")
nouns['mantrap']=nounInfo("mantrap")
adjectives['manual']=adjInfo("manual")
nouns['manual']=nounInfo("manual")
adverbs['manually']="manually"
nouns['manufacture']=nounInfo("manufacture")
nouns['manufacturer']=nounInfo("manufacturer")
nouns['manumission']=nounInfo("manumission")
nouns['manure']=nounInfo("manure")
nouns['manuscript']=nounInfo("manuscript")
adjectives['many']=adjInfo("many")
nouns['many']=nounInfo("many")
nouns['map']=nounInfo("map")
nouns['maple']=nounInfo("maple")
nouns['maquis']=nounInfo("maquis")
nouns['marabou']=nounInfo("marabou")
nouns['maraschino']=nounInfo("maraschino")
nouns['marathon']=nounInfo("marathon")
nouns['marauder']=nounInfo("marauder")
nouns['marble']=nounInfo("marble")
adjectives['marbled']=adjInfo("marbled")
nouns['march']=nounInfo("march")
nouns['marcher']=nounInfo("marcher")
nouns['marchioness']=nounInfo("marchioness")
nouns['mare']=nounInfo("mare")
nouns['margarine']=nounInfo("margarine")
nouns['marge']=nounInfo("marge")
nouns['margin']=nounInfo("margin")
adjectives['marginal']=adjInfo("marginal")
adverbs['marginally']="marginally"
nouns['marguerite']=nounInfo("marguerite")
nouns['marigold']=nounInfo("marigold")
nouns['marihuana']=nounInfo("marihuana")
nouns['marijuana']=nounInfo("marijuana")
nouns['marimba']=nounInfo("marimba")
nouns['marina']=nounInfo("marina")
nouns['marinade']=nounInfo("marinade")
adjectives['marine']=adjInfo("marine")
nouns['marine']=nounInfo("marine")
nouns['mariner']=nounInfo("mariner")
nouns['marionette']=nounInfo("marionette")
adjectives['marital']=adjInfo("marital")
adjectives['maritime']=adjInfo("maritime")
nouns['marjoram']=nounInfo("marjoram")
nouns['mark']=nounInfo("mark")
adjectives['marked']=adjInfo("marked")
adverbs['markedly']="markedly"
nouns['marker']=nounInfo("marker")
nouns['market']=nounInfo("market")
adjectives['marketable']=adjInfo("marketable")
nouns['marketing']=nounInfo("marketing")
nouns['marking']=nounInfo("marking")
nouns['marksman']=nounInfo("marksman")
nouns['marksmanship']=nounInfo("marksmanship")
nouns['marl']=nounInfo("marl")
nouns['marlinespike']=nounInfo("marlinespike")
nouns['marmalade']=nounInfo("marmalade")
adjectives['marmoreal']=adjInfo("marmoreal")
nouns['marmoset']=nounInfo("marmoset")
nouns['marmot']=nounInfo("marmot")
nouns['marocain']=nounInfo("marocain")
adjectives['maroon']=adjInfo("maroon")
nouns['maroon']=nounInfo("maroon")
nouns['marque']=nounInfo("marque")
nouns['marquee']=nounInfo("marquee")
nouns['marquess']=nounInfo("marquess")
nouns['marquetry']=nounInfo("marquetry")
nouns['marquis']=nounInfo("marquis")
nouns['marriage']=nounInfo("marriage")
nouns['marriageability']=nounInfo("marriageability")
adjectives['marriageable']=adjInfo("marriageable")
adjectives['married']=adjInfo("married")
nouns['marrow']=nounInfo("marrow")
nouns['marrowbone']=nounInfo("marrowbone")
nouns['marsh']=nounInfo("marsh")
nouns['marshal']=nounInfo("marshal")
adjectives['marshy']=adjInfo("marshy")
adjectives['marsupial']=adjInfo("marsupial")
nouns['marsupial']=nounInfo("marsupial")
nouns['mart']=nounInfo("mart")
nouns['marten']=nounInfo("marten")
adjectives['martial']=adjInfo("martial")
adverbs['martially']="martially"
nouns['martin']=nounInfo("martin")
nouns['martinet']=nounInfo("martinet")
nouns['martini']=nounInfo("martini")
nouns['martyr']=nounInfo("martyr")
nouns['martyrdom']=nounInfo("martyrdom")
nouns['marvel']=nounInfo("marvel")
adjectives['marvellous']=adjInfo("marvellous")
adverbs['marvellously']="marvellously"
adjectives['marvelous']=adjInfo("marvelous")
adverbs['marvelously']="marvelously"
nouns['marzipan']=nounInfo("marzipan")
nouns['mascara']=nounInfo("mascara")
nouns['mascot']=nounInfo("mascot")
adjectives['masculine']=adjInfo("masculine")
nouns['masculinity']=nounInfo("masculinity")
nouns['maser']=nounInfo("maser")
nouns['mash']=nounInfo("mash")
nouns['masher']=nounInfo("masher")
nouns['mask']=nounInfo("mask")
nouns['masochism']=nounInfo("masochism")
nouns['masochist']=nounInfo("masochist")
adjectives['masochistic']=adjInfo("masochistic")
adverbs['masochistically']="masochistically"
nouns['mason']=nounInfo("mason")
adjectives['masonic']=adjInfo("masonic")
nouns['masonry']=nounInfo("masonry")
nouns['masque']=nounInfo("masque")
nouns['masquerade']=nounInfo("masquerade")
nouns['mass']=nounInfo("mass")
nouns['massacre']=nounInfo("massacre")
nouns['massage']=nounInfo("massage")
nouns['masseur']=nounInfo("masseur").addAttributes({"g":"m"})
nouns['masseuse']=nounInfo("masseuse").addAttributes({"g":"f"})
nouns['massif']=nounInfo("massif")
adjectives['massive']=adjInfo("massive")
adverbs['massively']="massively"
nouns['massiveness']=nounInfo("massiveness")
adjectives['massy']=adjInfo("massy")
nouns['mast']=nounInfo("mast")
nouns['master']=nounInfo("master").addAttributes({"g":"x"})
adjectives['masterful']=adjInfo("masterful")
adverbs['masterfully']="masterfully"
adjectives['masterless']=adjInfo("masterless")
adjectives['masterly']=adjInfo("masterly")
nouns['mastermind']=nounInfo("mastermind")
nouns['masterpiece']=nounInfo("masterpiece")
nouns['mastership']=nounInfo("mastership")
nouns['masterstroke']=nounInfo("masterstroke")
nouns['mastery']=nounInfo("mastery")
nouns['mastication']=nounInfo("mastication")
nouns['mastiff']=nounInfo("mastiff")
nouns['mastodon']=nounInfo("mastodon")
nouns['mastoid']=nounInfo("mastoid")
nouns['mastoiditis']=nounInfo("mastoiditis")
nouns['masturbation']=nounInfo("masturbation")
adjectives['mat']=adjInfo("mat")
nouns['mat']=nounInfo("mat")
nouns['matador']=nounInfo("matador")
nouns['match']=nounInfo("match")
nouns['matchbox']=nounInfo("matchbox")
nouns['matchet']=nounInfo("matchet")
adjectives['matchless']=adjInfo("matchless")
nouns['matchlock']=nounInfo("matchlock")
nouns['matchmaker']=nounInfo("matchmaker")
nouns['matchwood']=nounInfo("matchwood")
nouns['mate']=nounInfo("mate")
adjectives['material']=adjInfo("material")
nouns['material']=nounInfo("material")
nouns['materialism']=nounInfo("materialism")
nouns['materialist']=nounInfo("materialist")
adjectives['materialistic']=adjInfo("materialistic")
adverbs['materialistically']="materialistically"
nouns['materialization']=nounInfo("materialization")
adverbs['materially']="materially"
adjectives['maternal']=adjInfo("maternal")
adverbs['maternally']="maternally"
nouns['maternity']=nounInfo("maternity")
adjectives['matey']=adjInfo("matey")
nouns['math']=nounInfo("math")
adjectives['mathematical']=adjInfo("mathematical")
adverbs['mathematically']="mathematically"
nouns['mathematician']=nounInfo("mathematician")
nouns['mathematics']=nounInfo("mathematics")
nouns['matins']=nounInfo("matins")
nouns['matriarch']=nounInfo("matriarch")
adjectives['matriarchal']=adjInfo("matriarchal")
nouns['matriarchy']=nounInfo("matriarchy")
nouns['matric']=nounInfo("matric")
nouns['matricide']=nounInfo("matricide")
nouns['matriculation']=nounInfo("matriculation")
adjectives['matrimonial']=adjInfo("matrimonial")
nouns['matrimony']=nounInfo("matrimony")
nouns['matrix']=nounInfo("matrix")
nouns['matron']=nounInfo("matron").addAttributes({"g":"f"})
adjectives['matronly']=adjInfo("matronly")
adjectives['matt']=adjInfo("matt")
adjectives['matted']=adjInfo("matted")
nouns['matter']=nounInfo("matter")
nouns['matting']=nounInfo("matting")
nouns['mattins']=nounInfo("mattins")
nouns['mattock']=nounInfo("mattock")
nouns['mattress']=nounInfo("mattress")
nouns['maturation']=nounInfo("maturation")
adjectives['mature']=adjInfo("mature")
adverbs['maturely']="maturely"
nouns['maturity']=nounInfo("maturity")
adjectives['matutinal']=adjInfo("matutinal")
adjectives['maudlin']=adjInfo("maudlin")
nouns['maulstick']=nounInfo("maulstick")
nouns['mausoleum']=nounInfo("mausoleum")
adjectives['mauve']=adjInfo("mauve")
nouns['mauve']=nounInfo("mauve")
nouns['maverick']=nounInfo("maverick")
nouns['mavis']=nounInfo("mavis")
nouns['maw']=nounInfo("maw")
adjectives['mawkish']=adjInfo("mawkish")
adverbs['mawkishly']="mawkishly"
nouns['mawkishness']=nounInfo("mawkishness")
nouns['maxim']=nounInfo("maxim")
nouns['maximization']=nounInfo("maximization")
adjectives['maximum']=adjInfo("maximum")
nouns['maximum']=nounInfo("maximum")
adverbs['maybe']="maybe"
nouns['mayday']=nounInfo("mayday")
nouns['mayfly']=nounInfo("mayfly")
nouns['mayhem']=nounInfo("mayhem")
nouns['mayonnaise']=nounInfo("mayonnaise")
nouns['mayor']=nounInfo("mayor").addAttributes({"g":"x"})
nouns['mayoralty']=nounInfo("mayoralty")
nouns['mayoress']=nounInfo("mayoress").addAttributes({"g":"f"})
nouns['maypole']=nounInfo("maypole")
nouns['maze']=nounInfo("maze")
adjectives['mazed']=adjInfo("mazed")
nouns['mazurka']=nounInfo("mazurka")
nouns['mead']=nounInfo("mead")
nouns['meadow']=nounInfo("meadow")
adjectives['meagre']=adjInfo("meagre")
adverbs['meagrely']="meagrely"
nouns['meagreness']=nounInfo("meagreness")
nouns['meal']=nounInfo("meal")
nouns['mealie']=nounInfo("mealie")
nouns['mealtime']=nounInfo("mealtime")
adjectives['mealy']=adjInfo("mealy")
adjectives['mean']=adjInfo("mean")
nouns['mean']=nounInfo("mean")
adverbs['meanderingly']="meanderingly"
nouns['meanderings']=nounInfo("meanderings")
nouns['meanie']=nounInfo("meanie")
adjectives['meaning']=adjInfo("meaning")
nouns['meaning']=nounInfo("meaning")
adjectives['meaningful']=adjInfo("meaningful")
adverbs['meaningfully']="meaningfully"
adjectives['meaningless']=adjInfo("meaningless")
adverbs['meaningly']="meaningly"
adverbs['meanly']="meanly"
nouns['meanness']=nounInfo("meanness")
adverbs['meantime']="meantime"
nouns['meantime']=nounInfo("meantime")
adverbs['meanwhile']="meanwhile"
nouns['meany']=nounInfo("meany")
nouns['measles']=nounInfo("measles")
adjectives['measly']=adjInfo("measly")
adjectives['measurable']=adjInfo("measurable")
adverbs['measurably']="measurably"
nouns['measure']=nounInfo("measure")
adjectives['measured']=adjInfo("measured")
adjectives['measureless']=adjInfo("measureless")
nouns['measurement']=nounInfo("measurement")
nouns['meat']=nounInfo("meat")
nouns['meatball']=nounInfo("meatball")
adjectives['meatless']=adjInfo("meatless")
adjectives['meaty']=adjInfo("meaty")
nouns['mechanic']=nounInfo("mechanic")
adjectives['mechanical']=adjInfo("mechanical")
adverbs['mechanically']="mechanically"
nouns['mechanics']=nounInfo("mechanics")
nouns['mechanism']=nounInfo("mechanism")
adjectives['mechanistic']=adjInfo("mechanistic")
adverbs['mechanistically']="mechanistically"
nouns['mechanization']=nounInfo("mechanization")
nouns['medal']=nounInfo("medal")
nouns['medalist']=nounInfo("medalist")
nouns['medallion']=nounInfo("medallion")
nouns['medallist']=nounInfo("medallist")
nouns['meddler']=nounInfo("meddler")
adjectives['meddlesome']=adjInfo("meddlesome")
adjectives['mediaeval']=adjInfo("mediaeval")
adjectives['medial']=adjInfo("medial")
adverbs['medially']="medially"
adjectives['median']=adjInfo("median")
nouns['median']=nounInfo("median")
nouns['mediation']=nounInfo("mediation")
nouns['mediator']=nounInfo("mediator")
nouns['medic']=nounInfo("medic")
adjectives['medical']=adjInfo("medical")
nouns['medical']=nounInfo("medical")
adverbs['medically']="medically"
nouns['medicament']=nounInfo("medicament")
nouns['medication']=nounInfo("medication")
adjectives['medicinal']=adjInfo("medicinal")
nouns['medicine']=nounInfo("medicine")
nouns['medico']=nounInfo("medico")
adjectives['medieval']=adjInfo("medieval")
adjectives['mediocre']=adjInfo("mediocre")
nouns['mediocrity']=nounInfo("mediocrity")
nouns['meditation']=nounInfo("meditation")
adjectives['meditative']=adjInfo("meditative")
adverbs['meditatively']="meditatively"
adjectives['medium']=adjInfo("medium")
nouns['medium']=nounInfo("medium")
adverbs['medivally']="medivally"
nouns['medlar']=nounInfo("medlar")
nouns['medley']=nounInfo("medley")
nouns['meed']=nounInfo("meed")
adjectives['meek']=adjInfo("meek")
adverbs['meekly']="meekly"
nouns['meekness']=nounInfo("meekness")
nouns['meerschaum']=nounInfo("meerschaum")
adjectives['meet']=adjInfo("meet")
nouns['meet']=nounInfo("meet")
nouns['meeting']=nounInfo("meeting")
nouns['megacycle']=nounInfo("megacycle")
nouns['megadeath']=nounInfo("megadeath")
nouns['megalith']=nounInfo("megalith")
adjectives['megalithic']=adjInfo("megalithic")
nouns['megalomania']=nounInfo("megalomania")
nouns['megalomaniac']=nounInfo("megalomaniac")
nouns['megaphone']=nounInfo("megaphone")
nouns['megaton']=nounInfo("megaton")
nouns['megrim']=nounInfo("megrim")
nouns['meiosis']=nounInfo("meiosis")
nouns['melancholia']=nounInfo("melancholia")
adjectives['melancholic']=adjInfo("melancholic")
adjectives['melancholy']=adjInfo("melancholy")
nouns['melancholy']=nounInfo("melancholy")
nouns['melioration']=nounInfo("melioration")
nouns['meliorism']=nounInfo("meliorism")
adjectives['mellifluous']=adjInfo("mellifluous")
adjectives['mellow']=adjInfo("mellow")
adverbs['mellowly']="mellowly"
nouns['mellowness']=nounInfo("mellowness")
adjectives['melodic']=adjInfo("melodic")
adjectives['melodious']=adjInfo("melodious")
adverbs['melodiously']="melodiously"
nouns['melodiousness']=nounInfo("melodiousness")
nouns['melodrama']=nounInfo("melodrama")
adjectives['melodramatic']=adjInfo("melodramatic")
adverbs['melodramatically']="melodramatically"
nouns['melody']=nounInfo("melody")
nouns['melon']=nounInfo("melon")
adjectives['melting']=adjInfo("melting")
nouns['member']=nounInfo("member").addAttributes({"g":"x"})
nouns['membership']=nounInfo("membership")
nouns['membrane']=nounInfo("membrane")
adjectives['membranous']=adjInfo("membranous")
nouns['memento']=nounInfo("memento")
nouns['memo']=nounInfo("memo")
nouns['memoir']=nounInfo("memoir")
adjectives['memorable']=adjInfo("memorable")
adverbs['memorably']="memorably"
nouns['memorandum']=nounInfo("memorandum")
nouns['memorial']=nounInfo("memorial")
nouns['memory']=nounInfo("memory")
nouns['memsahib']=nounInfo("memsahib")
nouns['menace']=nounInfo("menace")
adverbs['menacingly']="menacingly"
nouns['menagerie']=nounInfo("menagerie")
nouns['mend']=nounInfo("mend")
adjectives['mendacious']=adjInfo("mendacious")
adverbs['mendaciously']="mendaciously"
nouns['mendacity']=nounInfo("mendacity")
nouns['mender']=nounInfo("mender")
adjectives['mendicant']=adjInfo("mendicant")
nouns['mendicant']=nounInfo("mendicant")
nouns['mending']=nounInfo("mending")
nouns['menfolk']=nounInfo("menfolk")
adjectives['menial']=adjInfo("menial")
nouns['menial']=nounInfo("menial")
adverbs['menially']="menially"
nouns['meningitis']=nounInfo("meningitis")
nouns['menopause']=nounInfo("menopause")
adjectives['menstrual']=adjInfo("menstrual")
nouns['menstruation']=nounInfo("menstruation")
adjectives['mensurable']=adjInfo("mensurable")
nouns['mensuration']=nounInfo("mensuration")
adjectives['mental']=adjInfo("mental")
nouns['mentality']=nounInfo("mentality")
adverbs['mentally']="mentally"
nouns['menthol']=nounInfo("menthol")
adjectives['mentholated']=adjInfo("mentholated")
nouns['mention']=nounInfo("mention")
adjectives['mentioned']=adjInfo("mentioned")
nouns['mentor']=nounInfo("mentor")
nouns['menu']=nounInfo("menu")
adjectives['mercantile']=adjInfo("mercantile")
adjectives['mercenary']=adjInfo("mercenary")
nouns['mercenary']=nounInfo("mercenary")
nouns['mercer']=nounInfo("mercer")
nouns['merchandise']=nounInfo("merchandise")
nouns['merchant']=nounInfo("merchant")
nouns['merchantman']=nounInfo("merchantman")
adjectives['merciful']=adjInfo("merciful")
adverbs['mercifully']="mercifully"
adjectives['merciless']=adjInfo("merciless")
adverbs['mercilessly']="mercilessly"
adjectives['mercurial']=adjInfo("mercurial")
nouns['mercury']=nounInfo("mercury")
nouns['mercy']=nounInfo("mercy")
adjectives['mere']=adjInfo("mere")
nouns['mere']=nounInfo("mere")
adverbs['merely']="merely"
adjectives['meretricious']=adjInfo("meretricious")
adverbs['meretriciously']="meretriciously"
nouns['meretriciousness']=nounInfo("meretriciousness")
nouns['merger']=nounInfo("merger")
nouns['meridian']=nounInfo("meridian")
adjectives['meridional']=adjInfo("meridional")
nouns['meringue']=nounInfo("meringue")
nouns['merino']=nounInfo("merino")
nouns['merit']=nounInfo("merit")
nouns['meritocracy']=nounInfo("meritocracy")
adjectives['meritorious']=adjInfo("meritorious")
adverbs['meritoriously']="meritoriously"
nouns['mermaid']=nounInfo("mermaid")
nouns['merman']=nounInfo("merman")
adverbs['merrily']="merrily"
nouns['merriment']=nounInfo("merriment")
adjectives['merry']=adjInfo("merry")
nouns['mescal']=nounInfo("mescal")
nouns['mescaline']=nounInfo("mescaline")
adverbs['meseems']="meseems"
nouns['mesh']=nounInfo("mesh")
adjectives['mesmeric']=adjInfo("mesmeric")
nouns['mesmerism']=nounInfo("mesmerism")
nouns['mesmerist']=nounInfo("mesmerist")
nouns['meson']=nounInfo("meson")
nouns['mess']=nounInfo("mess")
nouns['message']=nounInfo("message")
nouns['messenger']=nounInfo("messenger")
adverbs['messily']="messily"
nouns['messuage']=nounInfo("messuage")
adjectives['messy']=adjInfo("messy")
adjectives['metabolic']=adjInfo("metabolic")
nouns['metabolism']=nounInfo("metabolism")
adjectives['metacarpal']=adjInfo("metacarpal")
nouns['metacarpal']=nounInfo("metacarpal")
nouns['metal']=nounInfo("metal")
adjectives['metallic']=adjInfo("metallic")
adverbs['metallically']="metallically"
adjectives['metallurgical']=adjInfo("metallurgical")
nouns['metallurgist']=nounInfo("metallurgist")
nouns['metallurgy']=nounInfo("metallurgy")
nouns['metamorphosis']=nounInfo("metamorphosis")
nouns['metaphor']=nounInfo("metaphor")
adjectives['metaphorical']=adjInfo("metaphorical")
adverbs['metaphorically']="metaphorically"
adjectives['metaphysical']=adjInfo("metaphysical")
adverbs['metaphysically']="metaphysically"
nouns['metaphysics']=nounInfo("metaphysics")
adjectives['metatarsal']=adjInfo("metatarsal")
nouns['metatarsal']=nounInfo("metatarsal")
nouns['meteor']=nounInfo("meteor")
adjectives['meteoric']=adjInfo("meteoric")
nouns['meteorite']=nounInfo("meteorite")
adjectives['meteorological']=adjInfo("meteorological")
nouns['meteorologist']=nounInfo("meteorologist")
nouns['meteorology']=nounInfo("meteorology")
nouns['methane']=nounInfo("methane")
adverbs['methinks']="methinks"
nouns['method']=nounInfo("method")
adjectives['methodical']=adjInfo("methodical")
adverbs['methodically']="methodically"
nouns['methodology']=nounInfo("methodology")
adverbs['methought']="methought"
nouns['meths']=nounInfo("meths")
nouns['methyl']=nounInfo("methyl")
adjectives['methylated']=adjInfo("methylated")
adjectives['meticulous']=adjInfo("meticulous")
adverbs['meticulously']="meticulously"
nouns['metre']=nounInfo("metre")
adjectives['metric']=adjInfo("metric")
adjectives['metrical']=adjInfo("metrical")
adverbs['metrically']="metrically"
nouns['metrication']=nounInfo("metrication")
nouns['metronome']=nounInfo("metronome")
nouns['metropolis']=nounInfo("metropolis")
adjectives['metropolitan']=adjInfo("metropolitan")
nouns['metropolitan']=nounInfo("metropolitan")
nouns['mettle']=nounInfo("mettle")
adjectives['mettlesome']=adjInfo("mettlesome")
nouns['mew']=nounInfo("mew")
nouns['mews']=nounInfo("mews")
adjectives['mezzanine']=adjInfo("mezzanine")
nouns['mezzanine']=nounInfo("mezzanine")
adverbs['mezzo']="mezzo"
nouns['mezzotint']=nounInfo("mezzotint")
nouns['mi']=nounInfo("mi")
nouns['miaou']=nounInfo("miaou")
nouns['miaow']=nounInfo("miaow")
nouns['miasma']=nounInfo("miasma")
nouns['mica']=nounInfo("mica")
nouns['mickey']=nounInfo("mickey")
nouns['mickle']=nounInfo("mickle")
nouns['microbe']=nounInfo("microbe")
nouns['microbiology']=nounInfo("microbiology")
nouns['microcosm']=nounInfo("microcosm")
nouns['microdot']=nounInfo("microdot")
nouns['microelectronics']=nounInfo("microelectronics")
nouns['microfiche']=nounInfo("microfiche")
nouns['microfilm']=nounInfo("microfilm")
nouns['micrometer']=nounInfo("micrometer")
nouns['micron']=nounInfo("micron")
nouns['microphone']=nounInfo("microphone")
nouns['microscope']=nounInfo("microscope")
adjectives['microscopic']=adjInfo("microscopic")
adjectives['microscopical']=adjInfo("microscopical")
adverbs['microscopically']="microscopically"
nouns['microwave']=nounInfo("microwave")
adjectives['mid']=adjInfo("mid")
prepositions['mid']=P("mid")
nouns['midday']=nounInfo("midday")
nouns['midden']=nounInfo("midden")
nouns['middle']=nounInfo("middle")
nouns['middleman']=nounInfo("middleman")
adjectives['middleweight']=adjInfo("middleweight")
nouns['middleweight']=nounInfo("middleweight")
adjectives['middling']=adjInfo("middling")
adverbs['middling']="middling"
nouns['middling']=nounInfo("middling")
nouns['middy']=nounInfo("middy")
nouns['midge']=nounInfo("midge")
nouns['midget']=nounInfo("midget")
nouns['midinette']=nounInfo("midinette")
nouns['midland']=nounInfo("midland")
adjectives['midmost']=adjInfo("midmost")
adverbs['midmost']="midmost"
nouns['midnight']=nounInfo("midnight")
nouns['midriff']=nounInfo("midriff")
nouns['midshipman']=nounInfo("midshipman")
adverbs['midships']="midships"
nouns['midst']=nounInfo("midst")
prepositions['midst']=P("midst")
nouns['midstream']=nounInfo("midstream")
nouns['midsummer']=nounInfo("midsummer")
adjectives['midway']=adjInfo("midway")
adverbs['midway']="midway"
nouns['midwife']=nounInfo("midwife")
nouns['midwifery']=nounInfo("midwifery")
nouns['mien']=nounInfo("mien")
nouns['might']=nounInfo("might")
adverbs['mightily']="mightily"
adjectives['mighty']=adjInfo("mighty")
adverbs['mighty']="mighty"
nouns['mignonette']=nounInfo("mignonette")
nouns['migraine']=nounInfo("migraine")
nouns['migrant']=nounInfo("migrant")
nouns['migration']=nounInfo("migration")
adjectives['migratory']=adjInfo("migratory")
nouns['mikado']=nounInfo("mikado")
nouns['mike']=nounInfo("mike")
nouns['milady']=nounInfo("milady")
nouns['milage']=nounInfo("milage")
adjectives['milch']=adjInfo("milch")
adjectives['mild']=adjInfo("mild")
nouns['mildew']=nounInfo("mildew")
adverbs['mildly']="mildly"
nouns['mildness']=nounInfo("mildness")
nouns['mile']=nounInfo("mile")
nouns['mileage']=nounInfo("mileage")
nouns['mileometer']=nounInfo("mileometer")
nouns['miler']=nounInfo("miler")
nouns['milestone']=nounInfo("milestone")
nouns['milieu']=nounInfo("milieu")
nouns['militancy']=nounInfo("militancy")
adjectives['militant']=adjInfo("militant")
nouns['militant']=nounInfo("militant")
adverbs['militarily']="militarily"
nouns['militarism']=nounInfo("militarism")
nouns['militarist']=nounInfo("militarist")
adjectives['militaristic']=adjInfo("militaristic")
adjectives['military']=adjInfo("military")
nouns['military']=nounInfo("military")
nouns['militia']=nounInfo("militia")
nouns['militiaman']=nounInfo("militiaman")
nouns['milk']=nounInfo("milk")
nouns['milkbar']=nounInfo("milkbar")
nouns['milkmaid']=nounInfo("milkmaid").addAttributes({"g":"f"})
nouns['milkman']=nounInfo("milkman").addAttributes({"g":"m"})
nouns['milkshake']=nounInfo("milkshake")
nouns['milksop']=nounInfo("milksop")
nouns['milkweed']=nounInfo("milkweed")
adjectives['milky']=adjInfo("milky")
nouns['mill']=nounInfo("mill")
nouns['millboard']=nounInfo("millboard")
nouns['millenarian']=nounInfo("millenarian")
nouns['millennium']=nounInfo("millennium")
nouns['millepede']=nounInfo("millepede")
nouns['miller']=nounInfo("miller")
nouns['millet']=nounInfo("millet")
nouns['milliard']=nounInfo("milliard")
nouns['millibar']=nounInfo("millibar")
nouns['milligram']=nounInfo("milligram")
nouns['millimetre']=nounInfo("millimetre")
nouns['milliner']=nounInfo("milliner")
nouns['millinery']=nounInfo("millinery")
nouns['million']=nounInfo("million")
nouns['millionaire']=nounInfo("millionaire").addAttributes({"g":"x"})
adverbs['millionfold']="millionfold"
adjectives['millionth']=adjInfo("millionth")
nouns['millionth']=nounInfo("millionth")
nouns['millipede']=nounInfo("millipede")
nouns['millstone']=nounInfo("millstone")
nouns['millwright']=nounInfo("millwright")
nouns['milometer']=nounInfo("milometer")
nouns['milord']=nounInfo("milord")
nouns['milt']=nounInfo("milt")
nouns['mime']=nounInfo("mime")
nouns['mimeograph']=nounInfo("mimeograph")
adjectives['mimetic']=adjInfo("mimetic")
adjectives['mimic']=adjInfo("mimic")
nouns['mimic']=nounInfo("mimic")
nouns['mimicry']=nounInfo("mimicry")
nouns['mimosa']=nounInfo("mimosa")
nouns['minaret']=nounInfo("minaret")
adjectives['minatory']=adjInfo("minatory")
nouns['mince']=nounInfo("mince")
nouns['mincemeat']=nounInfo("mincemeat")
nouns['mincer']=nounInfo("mincer")
adjectives['mincing']=adjInfo("mincing")
adverbs['mincingly']="mincingly"
nouns['mind']=nounInfo("mind")
adjectives['minded']=adjInfo("minded")
nouns['minder']=nounInfo("minder")
adjectives['mindful']=adjInfo("mindful")
adverbs['mindfully']="mindfully"
nouns['mindfulness']=nounInfo("mindfulness")
adjectives['mindless']=adjInfo("mindless")
adverbs['mindlessly']="mindlessly"
nouns['mindlessness']=nounInfo("mindlessness")
nouns['mine']=nounInfo("mine")
nouns['minefield']=nounInfo("minefield")
nouns['miner']=nounInfo("miner")
adjectives['mineral']=adjInfo("mineral")
nouns['mineral']=nounInfo("mineral")
nouns['mineralogist']=nounInfo("mineralogist")
nouns['mineralogy']=nounInfo("mineralogy")
nouns['minestrone']=nounInfo("minestrone")
adjectives['mingy']=adjInfo("mingy")
nouns['miniature']=nounInfo("miniature")
nouns['miniaturist']=nounInfo("miniaturist")
nouns['minim']=nounInfo("minim")
adjectives['minimal']=adjInfo("minimal")
adjectives['minimum']=adjInfo("minimum")
nouns['minimum']=nounInfo("minimum")
nouns['mining']=nounInfo("mining")
nouns['minion']=nounInfo("minion")
nouns['minister']=nounInfo("minister").addAttributes({"g":"x"})
adjectives['ministerial']=adjInfo("ministerial")
adverbs['ministerially']="ministerially"
adjectives['ministrant']=adjInfo("ministrant")
nouns['ministrant']=nounInfo("ministrant")
nouns['ministration']=nounInfo("ministration")
nouns['ministry']=nounInfo("ministry")
nouns['miniver']=nounInfo("miniver")
nouns['mink']=nounInfo("mink")
nouns['minnow']=nounInfo("minnow")
adjectives['minor']=adjInfo("minor")
nouns['minor']=nounInfo("minor")
nouns['minority']=nounInfo("minority")
nouns['minster']=nounInfo("minster")
nouns['minstrel']=nounInfo("minstrel")
nouns['minstrelsy']=nounInfo("minstrelsy")
nouns['mint']=nounInfo("mint")
nouns['minuet']=nounInfo("minuet")
adjectives['minus']=adjInfo("minus")
nouns['minus']=nounInfo("minus")
prepositions['minus']=P("minus")
adjectives['minuscule']=adjInfo("minuscule")
adjectives['minute']=adjInfo("minute")
nouns['minute']=nounInfo("minute")
adverbs['minutely']="minutely"
nouns['minuteness']=nounInfo("minuteness")
nouns['minutia']=nounInfo("minutia")
nouns['minx']=nounInfo("minx")
nouns['miracle']=nounInfo("miracle")
adjectives['miraculous']=adjInfo("miraculous")
adverbs['miraculously']="miraculously"
nouns['mirage']=nounInfo("mirage")
nouns['mire']=nounInfo("mire")
nouns['mirror']=nounInfo("mirror")
nouns['mirth']=nounInfo("mirth")
adjectives['mirthful']=adjInfo("mirthful")
adverbs['mirthfully']="mirthfully"
adjectives['mirthless']=adjInfo("mirthless")
adjectives['miry']=adjInfo("miry")
nouns['misadventure']=nounInfo("misadventure")
nouns['misalliance']=nounInfo("misalliance")
nouns['misanthrope']=nounInfo("misanthrope")
adjectives['misanthropic']=adjInfo("misanthropic")
nouns['misanthropy']=nounInfo("misanthropy")
nouns['misapplication']=nounInfo("misapplication")
nouns['misapprehension']=nounInfo("misapprehension")
nouns['misappropriation']=nounInfo("misappropriation")
adjectives['misbegotten']=adjInfo("misbegotten")
nouns['misbehaviour']=nounInfo("misbehaviour")
nouns['miscalculation']=nounInfo("miscalculation")
nouns['miscarriage']=nounInfo("miscarriage")
nouns['miscegenation']=nounInfo("miscegenation")
nouns['miscellanea']=nounInfo("miscellanea")
adjectives['miscellaneous']=adjInfo("miscellaneous")
nouns['miscellany']=nounInfo("miscellany")
nouns['mischance']=nounInfo("mischance")
nouns['mischief']=nounInfo("mischief")
adjectives['mischievous']=adjInfo("mischievous")
adverbs['mischievously']="mischievously"
nouns['mischievousness']=nounInfo("mischievousness")
nouns['misconception']=nounInfo("misconception")
nouns['misconduct']=nounInfo("misconduct")
nouns['misconstruction']=nounInfo("misconstruction")
nouns['miscount']=nounInfo("miscount")
nouns['miscreant']=nounInfo("miscreant")
nouns['misdeal']=nounInfo("misdeal")
nouns['misdeed']=nounInfo("misdeed")
nouns['misdemeanour']=nounInfo("misdemeanour")
nouns['misdirection']=nounInfo("misdirection")
nouns['misdoing']=nounInfo("misdoing")
nouns['miser']=nounInfo("miser")
adjectives['miserable']=adjInfo("miserable")
adverbs['miserably']="miserably"
nouns['miserliness']=nounInfo("miserliness")
adjectives['miserly']=adjInfo("miserly")
nouns['misery']=nounInfo("misery")
nouns['misfire']=nounInfo("misfire")
nouns['misfit']=nounInfo("misfit")
nouns['misfortune']=nounInfo("misfortune")
nouns['misgiving']=nounInfo("misgiving")
nouns['misgovernment']=nounInfo("misgovernment")
adjectives['misguided']=adjInfo("misguided")
nouns['mishap']=nounInfo("mishap")
nouns['mishmash']=nounInfo("mishmash")
nouns['mismanagement']=nounInfo("mismanagement")
nouns['misnomer']=nounInfo("misnomer")
nouns['misogynist']=nounInfo("misogynist")
nouns['misprint']=nounInfo("misprint")
nouns['mispronunciation']=nounInfo("mispronunciation")
nouns['misquotation']=nounInfo("misquotation")
nouns['misrepresentation']=nounInfo("misrepresentation")
nouns['misrule']=nounInfo("misrule")
nouns['miss']=nounInfo("miss")
nouns['missal']=nounInfo("missal")
adjectives['misshapen']=adjInfo("misshapen")
nouns['missile']=nounInfo("missile")
adjectives['missing']=adjInfo("missing")
nouns['mission']=nounInfo("mission")
nouns['missionary']=nounInfo("missionary")
nouns['missis']=nounInfo("missis")
nouns['missive']=nounInfo("missive")
nouns['misspelling']=nounInfo("misspelling")
nouns['misstatement']=nounInfo("misstatement")
nouns['missus']=nounInfo("missus")
nouns['missy']=nounInfo("missy")
nouns['mist']=nounInfo("mist")
nouns['mistake']=nounInfo("mistake")
adjectives['mistaken']=adjInfo("mistaken")
adverbs['mistakenly']="mistakenly"
nouns['mister']=nounInfo("mister")
adverbs['mistily']="mistily"
nouns['mistiness']=nounInfo("mistiness")
nouns['mistletoe']=nounInfo("mistletoe")
nouns['mistral']=nounInfo("mistral")
nouns['mistranslation']=nounInfo("mistranslation")
nouns['mistress']=nounInfo("mistress").addAttributes({"g":"f"})
nouns['mistrial']=nounInfo("mistrial")
nouns['mistrust']=nounInfo("mistrust")
adjectives['mistrustful']=adjInfo("mistrustful")
adverbs['mistrustfully']="mistrustfully"
adjectives['misty']=adjInfo("misty")
nouns['misunderstanding']=nounInfo("misunderstanding")
nouns['misuse']=nounInfo("misuse")
nouns['mite']=nounInfo("mite")
nouns['mitigation']=nounInfo("mitigation")
nouns['mitre']=nounInfo("mitre")
nouns['mitt']=nounInfo("mitt")
nouns['mitten']=nounInfo("mitten")
nouns['mix']=nounInfo("mix")
adjectives['mixed']=adjInfo("mixed")
nouns['mixer']=nounInfo("mixer")
nouns['mixture']=nounInfo("mixture")
nouns['mizen']=nounInfo("mizen")
nouns['mizzen']=nounInfo("mizzen")
adjectives['mnemonic']=adjInfo("mnemonic")
nouns['mnemonics']=nounInfo("mnemonics")
nouns['moan']=nounInfo("moan")
nouns['moat']=nounInfo("moat")
adjectives['moated']=adjInfo("moated")
nouns['mob']=nounInfo("mob")
nouns['mobcap']=nounInfo("mobcap")
adjectives['mobile']=adjInfo("mobile")
nouns['mobile']=nounInfo("mobile")
nouns['mobility']=nounInfo("mobility")
nouns['mobilization']=nounInfo("mobilization")
nouns['mobster']=nounInfo("mobster")
nouns['moccasin']=nounInfo("moccasin")
nouns['mocha']=nounInfo("mocha")
adjectives['mock']=adjInfo("mock")
nouns['mock']=nounInfo("mock")
nouns['mocker']=nounInfo("mocker")
nouns['mockery']=nounInfo("mockery")
adverbs['mockingly']="mockingly"
adjectives['mod']=adjInfo("mod")
nouns['mod']=nounInfo("mod")
adjectives['modal']=adjInfo("modal")
nouns['modality']=nounInfo("modality")
nouns['mode']=nounInfo("mode")
nouns['model']=nounInfo("model")
nouns['modeler']=nounInfo("modeler")
nouns['modeling']=nounInfo("modeling")
nouns['modeller']=nounInfo("modeller")
nouns['modelling']=nounInfo("modelling")
adjectives['moderate']=adjInfo("moderate")
nouns['moderate']=nounInfo("moderate")
adverbs['moderately']="moderately"
nouns['moderation']=nounInfo("moderation")
nouns['moderator']=nounInfo("moderator")
adjectives['modern']=adjInfo("modern")
nouns['modern']=nounInfo("modern")
nouns['modernism']=nounInfo("modernism")
nouns['modernist']=nounInfo("modernist")
adjectives['modernistic']=adjInfo("modernistic")
nouns['modernity']=nounInfo("modernity")
nouns['modernization']=nounInfo("modernization")
adjectives['modest']=adjInfo("modest")
adverbs['modestly']="modestly"
nouns['modesty']=nounInfo("modesty")
nouns['modicum']=nounInfo("modicum")
nouns['modification']=nounInfo("modification")
nouns['modifier']=nounInfo("modifier")
adjectives['modish']=adjInfo("modish")
adverbs['modishly']="modishly"
nouns['modiste']=nounInfo("modiste")
adjectives['modular']=adjInfo("modular")
nouns['modulation']=nounInfo("modulation")
nouns['module']=nounInfo("module")
nouns['mogul']=nounInfo("mogul")
nouns['mohair']=nounInfo("mohair")
nouns['moiety']=nounInfo("moiety")
adjectives['moist']=adjInfo("moist")
adverbs['moistly']="moistly"
nouns['moisture']=nounInfo("moisture")
nouns['moke']=nounInfo("moke")
adjectives['molar']=adjInfo("molar")
nouns['molar']=nounInfo("molar")
nouns['molasses']=nounInfo("molasses")
adjectives['moldy']=adjInfo("moldy")
nouns['mole']=nounInfo("mole")
adjectives['molecular']=adjInfo("molecular")
nouns['molecule']=nounInfo("molecule")
nouns['molestation']=nounInfo("molestation")
nouns['moll']=nounInfo("moll")
nouns['mollification']=nounInfo("mollification")
nouns['mollusc']=nounInfo("mollusc")
nouns['mollycoddle']=nounInfo("mollycoddle")
adverbs['molto']="molto"
nouns['molybdenum']=nounInfo("molybdenum")
nouns['moment']=nounInfo("moment")
adverbs['momentarily']="momentarily"
adjectives['momentary']=adjInfo("momentary")
adjectives['momentous']=adjInfo("momentous")
adverbs['momentously']="momentously"
nouns['momentousness']=nounInfo("momentousness")
nouns['momentum']=nounInfo("momentum")
nouns['monarch']=nounInfo("monarch")
adjectives['monarchic']=adjInfo("monarchic")
nouns['monarchism']=nounInfo("monarchism")
nouns['monarchist']=nounInfo("monarchist")
nouns['monarchy']=nounInfo("monarchy")
nouns['monastery']=nounInfo("monastery")
adjectives['monastic']=adjInfo("monastic")
nouns['monasticism']=nounInfo("monasticism")
adjectives['monaural']=adjInfo("monaural")
adjectives['monetary']=adjInfo("monetary")
nouns['money']=nounInfo("money")
adjectives['moneyed']=adjInfo("moneyed")
adjectives['moneyless']=adjInfo("moneyless")
nouns['monger']=nounInfo("monger")
adjectives['mongol']=adjInfo("mongol")
nouns['mongol']=nounInfo("mongol")
nouns['mongolism']=nounInfo("mongolism")
nouns['mongoose']=nounInfo("mongoose")
adjectives['mongrel']=adjInfo("mongrel")
nouns['mongrel']=nounInfo("mongrel")
nouns['monitor']=nounInfo("monitor").addAttributes({"g":"x"})
nouns['monk']=nounInfo("monk").addAttributes({"g":"m"})
nouns['monkey']=nounInfo("monkey")
adjectives['monkish']=adjInfo("monkish")
adjectives['mono']=adjInfo("mono")
adjectives['monochrome']=adjInfo("monochrome")
nouns['monochrome']=nounInfo("monochrome")
nouns['monocle']=nounInfo("monocle")
nouns['monogamist']=nounInfo("monogamist")
adjectives['monogamous']=adjInfo("monogamous")
nouns['monogamy']=nounInfo("monogamy")
nouns['monogram']=nounInfo("monogram")
nouns['monograph']=nounInfo("monograph")
nouns['monolith']=nounInfo("monolith")
adjectives['monolithic']=adjInfo("monolithic")
nouns['monologue']=nounInfo("monologue")
nouns['monomania']=nounInfo("monomania")
nouns['monomaniac']=nounInfo("monomaniac")
nouns['monoplane']=nounInfo("monoplane")
nouns['monopolist']=nounInfo("monopolist")
adjectives['monopolistic']=adjInfo("monopolistic")
nouns['monopolization']=nounInfo("monopolization")
nouns['monopoly']=nounInfo("monopoly")
nouns['monorail']=nounInfo("monorail")
adjectives['monosyllabic']=adjInfo("monosyllabic")
nouns['monosyllable']=nounInfo("monosyllable")
nouns['monotheism']=nounInfo("monotheism")
nouns['monotheist']=nounInfo("monotheist")
adjectives['monotheistic']=adjInfo("monotheistic")
nouns['monotone']=nounInfo("monotone")
adjectives['monotonous']=adjInfo("monotonous")
adverbs['monotonously']="monotonously"
nouns['monotony']=nounInfo("monotony")
nouns['monotype']=nounInfo("monotype")
nouns['monoxide']=nounInfo("monoxide")
nouns['monsoon']=nounInfo("monsoon")
nouns['monster']=nounInfo("monster")
nouns['monstrance']=nounInfo("monstrance")
nouns['monstrosity']=nounInfo("monstrosity")
adjectives['monstrous']=adjInfo("monstrous")
adverbs['monstrously']="monstrously"
nouns['montage']=nounInfo("montage")
nouns['month']=nounInfo("month")
adjectives['monthly']=adjInfo("monthly")
adverbs['monthly']="monthly"
nouns['monthly']=nounInfo("monthly")
nouns['monument']=nounInfo("monument")
adjectives['monumental']=adjInfo("monumental")
nouns['moo']=nounInfo("moo")
nouns['mood']=nounInfo("mood")
adverbs['moodily']="moodily"
nouns['moodiness']=nounInfo("moodiness")
adjectives['moody']=adjInfo("moody")
nouns['moon']=nounInfo("moon")
nouns['moonbeam']=nounInfo("moonbeam")
nouns['moonflower']=nounInfo("moonflower")
adjectives['moonless']=adjInfo("moonless")
nouns['moonlight']=nounInfo("moonlight")
adjectives['moonlit']=adjInfo("moonlit")
nouns['moonshine']=nounInfo("moonshine")
nouns['moonstone']=nounInfo("moonstone")
adjectives['moonstruck']=adjInfo("moonstruck")
adjectives['moony']=adjInfo("moony")
nouns['moor']=nounInfo("moor")
nouns['moorcock']=nounInfo("moorcock")
nouns['moorfowl']=nounInfo("moorfowl")
nouns['moorgame']=nounInfo("moorgame")
nouns['moorhen']=nounInfo("moorhen")
nouns['moorings']=nounInfo("moorings")
nouns['moorland']=nounInfo("moorland")
nouns['moose']=nounInfo("moose")
nouns['mooses']=nounInfo("mooses")
adjectives['moot']=adjInfo("moot")
nouns['mop']=nounInfo("mop")
nouns['mope']=nounInfo("mope")
nouns['moped']=nounInfo("moped")
nouns['moquette']=nounInfo("moquette")
nouns['moraine']=nounInfo("moraine")
adjectives['moral']=adjInfo("moral")
nouns['moral']=nounInfo("moral")
nouns['morale']=nounInfo("morale")
nouns['moralist']=nounInfo("moralist")
adjectives['moralistic']=adjInfo("moralistic")
nouns['morality']=nounInfo("morality")
adverbs['morally']="morally"
nouns['morass']=nounInfo("morass")
nouns['moratorium']=nounInfo("moratorium")
adjectives['morbid']=adjInfo("morbid")
nouns['morbidity']=nounInfo("morbidity")
adverbs['morbidly']="morbidly"
nouns['morbidness']=nounInfo("morbidness")
adjectives['mordant']=adjInfo("mordant")
adverbs['more']="more"
nouns['morello']=nounInfo("morello")
adverbs['moreover']="moreover"
nouns['mores']=nounInfo("mores")
adjectives['morganatic']=adjInfo("morganatic")
nouns['morgue']=nounInfo("morgue")
adjectives['moribund']=adjInfo("moribund")
nouns['morn']=nounInfo("morn")
nouns['morning']=nounInfo("morning")
nouns['morocco']=nounInfo("morocco")
nouns['moron']=nounInfo("moron")
adjectives['moronic']=adjInfo("moronic")
adjectives['morose']=adjInfo("morose")
adverbs['morosely']="morosely"
nouns['moroseness']=nounInfo("moroseness")
nouns['morpheme']=nounInfo("morpheme")
nouns['morphia']=nounInfo("morphia")
nouns['morphine']=nounInfo("morphine")
adverbs['morphologically']="morphologically"
nouns['morphology']=nounInfo("morphology")
nouns['morrow']=nounInfo("morrow")
nouns['morsel']=nounInfo("morsel")
adjectives['mortal']=adjInfo("mortal")
nouns['mortal']=nounInfo("mortal")
nouns['mortality']=nounInfo("mortality")
adverbs['mortally']="mortally"
nouns['mortar']=nounInfo("mortar")
nouns['mortgage']=nounInfo("mortgage")
nouns['mortgagee']=nounInfo("mortgagee")
nouns['mortgagor']=nounInfo("mortgagor")
nouns['mortice']=nounInfo("mortice")
nouns['mortician']=nounInfo("mortician")
nouns['mortification']=nounInfo("mortification")
nouns['mortise']=nounInfo("mortise")
nouns['mortuary']=nounInfo("mortuary")
adjectives['mosaic']=adjInfo("mosaic")
nouns['mosaic']=nounInfo("mosaic")
nouns['moselle']=nounInfo("moselle")
nouns['mosque']=nounInfo("mosque")
nouns['mosquito']=nounInfo("mosquito")
nouns['moss']=nounInfo("moss")
adjectives['mossy']=adjInfo("mossy")
adverbs['most']="most"
adverbs['mostly']="mostly"
nouns['mote']=nounInfo("mote")
nouns['motel']=nounInfo("motel")
nouns['moth']=nounInfo("moth")
nouns['mother']=nounInfo("mother").addAttributes({"g":"f"})
nouns['motherhood']=nounInfo("motherhood")
adjectives['motherless']=adjInfo("motherless")
adjectives['motherlike']=adjInfo("motherlike")
nouns['motherliness']=nounInfo("motherliness")
adjectives['motherly']=adjInfo("motherly")
adverbs['motherly']="motherly"
nouns['motif']=nounInfo("motif")
nouns['motion']=nounInfo("motion")
adjectives['motionless']=adjInfo("motionless")
adverbs['motionlessly']="motionlessly"
nouns['motivation']=nounInfo("motivation")
adjectives['motive']=adjInfo("motive")
nouns['motive']=nounInfo("motive")
adjectives['motiveless']=adjInfo("motiveless")
adjectives['motley']=adjInfo("motley")
nouns['motley']=nounInfo("motley")
nouns['motor']=nounInfo("motor")
nouns['motorcade']=nounInfo("motorcade")
nouns['motorist']=nounInfo("motorist").addAttributes({"g":"x"})
nouns['motorman']=nounInfo("motorman")
nouns['motorway']=nounInfo("motorway")
nouns['motto']=nounInfo("motto")
nouns['moujik']=nounInfo("moujik")
nouns['mould']=nounInfo("mould")
nouns['moulding']=nounInfo("moulding")
adjectives['mouldy']=adjInfo("mouldy")
nouns['moult']=nounInfo("moult")
nouns['mound']=nounInfo("mound")
nouns['mount']=nounInfo("mount")
nouns['mountain']=nounInfo("mountain")
nouns['mountaineer']=nounInfo("mountaineer")
nouns['mountaineering']=nounInfo("mountaineering")
adjectives['mountainous']=adjInfo("mountainous")
nouns['mountebank']=nounInfo("mountebank")
nouns['mourner']=nounInfo("mourner")
adjectives['mournful']=adjInfo("mournful")
adverbs['mournfully']="mournfully"
nouns['mourning']=nounInfo("mourning")
nouns['mouse']=nounInfo("mouse")
nouns['mouser']=nounInfo("mouser")
nouns['mousse']=nounInfo("mousse")
nouns['moustache']=nounInfo("moustache")
adjectives['mousy']=adjInfo("mousy")
nouns['mouth']=nounInfo("mouth")
nouns['mouthful']=nounInfo("mouthful")
nouns['mouthpiece']=nounInfo("mouthpiece")
adjectives['movable']=adjInfo("movable")
nouns['movables']=nounInfo("movables")
nouns['move']=nounInfo("move")
nouns['movement']=nounInfo("movement")
nouns['mover']=nounInfo("mover")
nouns['movie']=nounInfo("movie")
nouns['mow']=nounInfo("mow")
nouns['mower']=nounInfo("mower")
adverbs['much']="much"
nouns['muchness']=nounInfo("muchness")
nouns['mucilage']=nounInfo("mucilage")
nouns['muck']=nounInfo("muck")
nouns['muckle']=nounInfo("muckle")
adjectives['mucky']=adjInfo("mucky")
adjectives['mucous']=adjInfo("mucous")
nouns['mucus']=nounInfo("mucus")
nouns['mud']=nounInfo("mud")
nouns['muddle']=nounInfo("muddle")
adjectives['muddy']=adjInfo("muddy")
nouns['mudguard']=nounInfo("mudguard")
nouns['muesli']=nounInfo("muesli")
nouns['muezzin']=nounInfo("muezzin")
nouns['muff']=nounInfo("muff")
nouns['muffin']=nounInfo("muffin")
nouns['muffler']=nounInfo("muffler")
nouns['mufti']=nounInfo("mufti")
nouns['mug']=nounInfo("mug")
nouns['mugger']=nounInfo("mugger")
nouns['mugginess']=nounInfo("mugginess")
nouns['mugging']=nounInfo("mugging")
nouns['muggins']=nounInfo("muggins")
adjectives['muggy']=adjInfo("muggy")
nouns['mugwump']=nounInfo("mugwump")
nouns['mulatto']=nounInfo("mulatto")
nouns['mulberry']=nounInfo("mulberry")
nouns['mulch']=nounInfo("mulch")
nouns['mule']=nounInfo("mule")
nouns['muleteer']=nounInfo("muleteer")
adjectives['mulish']=adjInfo("mulish")
adverbs['mulishly']="mulishly"
nouns['mulishness']=nounInfo("mulishness")
nouns['mull']=nounInfo("mull")
nouns['mullah']=nounInfo("mullah")
nouns['mullein']=nounInfo("mullein")
nouns['mullet']=nounInfo("mullet")
nouns['mulligatawny']=nounInfo("mulligatawny")
nouns['mullion']=nounInfo("mullion")
adjectives['mullioned']=adjInfo("mullioned")
adjectives['multicultural']=adjInfo("multicultural")
nouns['multiculturalism']=nounInfo("multiculturalism")
adjectives['multifarious']=adjInfo("multifarious")
adverbs['multifariously']="multifariously"
adjectives['multiform']=adjInfo("multiform")
adjectives['multilateral']=adjInfo("multilateral")
adjectives['multilingual']=adjInfo("multilingual")
adjectives['multiple']=adjInfo("multiple")
nouns['multiple']=nounInfo("multiple")
adjectives['multiplex']=adjInfo("multiplex")
nouns['multiplication']=nounInfo("multiplication")
nouns['multiplicity']=nounInfo("multiplicity")
nouns['multitude']=nounInfo("multitude")
adjectives['multitudinous']=adjInfo("multitudinous")
adjectives['mum']=adjInfo("mum")
nouns['mum']=nounInfo("mum").addAttributes({"g":"f"})
nouns['mummer']=nounInfo("mummer")
nouns['mummery']=nounInfo("mummery")
nouns['mummification']=nounInfo("mummification")
nouns['mummy']=nounInfo("mummy").addAttributes({"g":"f"})
nouns['mumps']=nounInfo("mumps")
adjectives['mundane']=adjInfo("mundane")
adverbs['mundanely']="mundanely"
adjectives['municipal']=adjInfo("municipal")
nouns['municipality']=nounInfo("municipality")
adverbs['municipally']="municipally"
nouns['munificence']=nounInfo("munificence")
adjectives['munificent']=adjInfo("munificent")
adverbs['munificently']="munificently"
nouns['muniments']=nounInfo("muniments")
nouns['munition']=nounInfo("munition")
adjectives['mural']=adjInfo("mural")
nouns['mural']=nounInfo("mural")
nouns['murder']=nounInfo("murder")
nouns['murderer']=nounInfo("murderer").addAttributes({"g":"x"})
nouns['murderess']=nounInfo("murderess").addAttributes({"g":"f"})
adjectives['murderous']=adjInfo("murderous")
adverbs['murderously']="murderously"
nouns['murk']=nounInfo("murk")
adverbs['murkily']="murkily"
adjectives['murky']=adjInfo("murky")
nouns['murmur']=nounInfo("murmur")
nouns['murphy']=nounInfo("murphy")
nouns['murrain']=nounInfo("murrain")
nouns['muscatel']=nounInfo("muscatel")
nouns['muscle']=nounInfo("muscle")
adjectives['muscular']=adjInfo("muscular")
nouns['muse']=nounInfo("muse")
nouns['museum']=nounInfo("museum")
nouns['mush']=nounInfo("mush")
nouns['mushroom']=nounInfo("mushroom")
adjectives['mushy']=adjInfo("mushy")
nouns['music']=nounInfo("music")
adjectives['musical']=adjInfo("musical")
nouns['musical']=nounInfo("musical")
adverbs['musically']="musically"
nouns['musician']=nounInfo("musician").addAttributes({"g":"x"})
nouns['musicianship']=nounInfo("musicianship")
adverbs['musingly']="musingly"
nouns['musk']=nounInfo("musk")
nouns['musket']=nounInfo("musket")
nouns['musketeer']=nounInfo("musketeer")
nouns['musketry']=nounInfo("musketry")
adjectives['musky']=adjInfo("musky")
nouns['muslin']=nounInfo("muslin")
nouns['musquash']=nounInfo("musquash")
nouns['muss']=nounInfo("muss")
nouns['mussel']=nounInfo("mussel")
nouns['must']=nounInfo("must")
nouns['mustachio']=nounInfo("mustachio")
nouns['mustang']=nounInfo("mustang")
nouns['mustard']=nounInfo("mustard")
nouns['muster']=nounInfo("muster")
nouns['mustiness']=nounInfo("mustiness")
adjectives['musty']=adjInfo("musty")
nouns['mutability']=nounInfo("mutability")
adjectives['mutable']=adjInfo("mutable")
nouns['mutation']=nounInfo("mutation")
adjectives['mute']=adjInfo("mute")
nouns['mute']=nounInfo("mute")
adverbs['mutely']="mutely"
nouns['mutilation']=nounInfo("mutilation")
nouns['mutineer']=nounInfo("mutineer")
adjectives['mutinous']=adjInfo("mutinous")
nouns['mutiny']=nounInfo("mutiny")
nouns['mutt']=nounInfo("mutt")
nouns['mutter']=nounInfo("mutter")
nouns['mutterer']=nounInfo("mutterer")
nouns['mutton']=nounInfo("mutton")
adjectives['mutual']=adjInfo("mutual")
adverbs['mutually']="mutually"
nouns['muzzle']=nounInfo("muzzle")
adjectives['muzzy']=adjInfo("muzzy")
nouns['mycology']=nounInfo("mycology")
nouns['myelitis']=nounInfo("myelitis")
nouns['myna']=nounInfo("myna")
nouns['mynah']=nounInfo("mynah")
nouns['myopia']=nounInfo("myopia")
adjectives['myopic']=adjInfo("myopic")
adjectives['myriad']=adjInfo("myriad")
nouns['myriad']=nounInfo("myriad")
nouns['myrmidon']=nounInfo("myrmidon")
nouns['myrrh']=nounInfo("myrrh")
nouns['myrtle']=nounInfo("myrtle")
adjectives['mysterious']=adjInfo("mysterious")
adverbs['mysteriously']="mysteriously"
nouns['mystery']=nounInfo("mystery")
adjectives['mystic']=adjInfo("mystic")
nouns['mystic']=nounInfo("mystic")
adjectives['mystical']=adjInfo("mystical")
nouns['mysticism']=nounInfo("mysticism")
nouns['mystification']=nounInfo("mystification")
nouns['mystique']=nounInfo("mystique")
nouns['myth']=nounInfo("myth")
adjectives['mythical']=adjInfo("mythical")
adjectives['mythological']=adjInfo("mythological")
nouns['mythologist']=nounInfo("mythologist")
nouns['mythology']=nounInfo("mythology")
nouns['myxomatosis']=nounInfo("myxomatosis")
nouns['nabob']=nounInfo("nabob")
nouns['nacelle']=nounInfo("nacelle")
nouns['nacre']=nounInfo("nacre")
nouns['nadir']=nounInfo("nadir")
nouns['nag']=nounInfo("nag")
nouns['nagger']=nounInfo("nagger")
nouns['naiad']=nounInfo("naiad")
nouns['naiades']=nounInfo("naiades")
nouns['nail']=nounInfo("nail")
nouns['nailbrush']=nounInfo("nailbrush")
nouns['nainsook']=nounInfo("nainsook")
nouns['naira']=nounInfo("naira")
adjectives['naive']=adjInfo("naive")
adverbs['naively']="naively"
nouns['naivety']=nounInfo("naivety")
adjectives['naked']=adjInfo("naked")
adverbs['nakedly']="nakedly"
nouns['nakedness']=nounInfo("nakedness")
nouns['name']=nounInfo("name")
adjectives['nameless']=adjInfo("nameless")
adverbs['namely']="namely"
nouns['nameplate']=nounInfo("nameplate")
nouns['namesake']=nounInfo("namesake")
nouns['nankeen']=nounInfo("nankeen")
nouns['nanny']=nounInfo("nanny")
nouns['nap']=nounInfo("nap")
nouns['napalm']=nounInfo("napalm")
nouns['nape']=nounInfo("nape")
nouns['napery']=nounInfo("napery")
nouns['naphtha']=nounInfo("naphtha")
nouns['naphthalene']=nounInfo("naphthalene")
nouns['napkin']=nounInfo("napkin")
nouns['nappy']=nounInfo("nappy")
nouns['narcissism']=nounInfo("narcissism")
nouns['narcissus']=nounInfo("narcissus")
adjectives['narcotic']=adjInfo("narcotic")
nouns['narcotic']=nounInfo("narcotic")
nouns['nark']=nounInfo("nark")
nouns['narration']=nounInfo("narration")
nouns['narrative']=nounInfo("narrative")
nouns['narrator']=nounInfo("narrator")
adjectives['narrow']=adjInfo("narrow")
nouns['narrow']=nounInfo("narrow")
adverbs['narrowly']="narrowly"
nouns['narrowness']=nounInfo("narrowness")
nouns['narwhal']=nounInfo("narwhal")
adjectives['nasal']=adjInfo("nasal")
nouns['nasal']=nounInfo("nasal")
adjectives['nascent']=adjInfo("nascent")
adverbs['nastily']="nastily"
nouns['nastiness']=nounInfo("nastiness")
nouns['nasturtium']=nounInfo("nasturtium")
adjectives['nasty']=adjInfo("nasty")
adjectives['natal']=adjInfo("natal")
nouns['nation']=nounInfo("nation")
adjectives['national']=adjInfo("national")
nouns['national']=nounInfo("national")
nouns['nationalism']=nounInfo("nationalism")
adjectives['nationalist']=adjInfo("nationalist")
nouns['nationalist']=nounInfo("nationalist")
adjectives['nationalistic']=adjInfo("nationalistic")
nouns['nationality']=nounInfo("nationality")
nouns['nationalization']=nounInfo("nationalization")
adverbs['nationally']="nationally"
adjectives['nationwide']=adjInfo("nationwide")
adverbs['nationwide']="nationwide"
adjectives['native']=adjInfo("native")
nouns['native']=nounInfo("native")
nouns['nativity']=nounInfo("nativity")
adverbs['nattily']="nattily"
adjectives['natty']=adjInfo("natty")
adjectives['natural']=adjInfo("natural")
nouns['natural']=nounInfo("natural")
nouns['naturalism']=nounInfo("naturalism")
nouns['naturalist']=nounInfo("naturalist")
adjectives['naturalistic']=adjInfo("naturalistic")
nouns['naturalization']=nounInfo("naturalization")
adverbs['naturally']="naturally"
nouns['nature']=nounInfo("nature")
nouns['naturism']=nounInfo("naturism")
nouns['naturist']=nounInfo("naturist")
nouns['naught']=nounInfo("naught")
adverbs['naughtily']="naughtily"
nouns['naughtiness']=nounInfo("naughtiness")
adjectives['naughty']=adjInfo("naughty")
nouns['nausea']=nounInfo("nausea")
adjectives['nauseous']=adjInfo("nauseous")
nouns['nautch']=nounInfo("nautch")
adjectives['nautical']=adjInfo("nautical")
nouns['nautilus']=nounInfo("nautilus")
adjectives['naval']=adjInfo("naval")
nouns['nave']=nounInfo("nave")
nouns['navel']=nounInfo("navel")
nouns['navigability']=nounInfo("navigability")
adjectives['navigable']=adjInfo("navigable")
nouns['navigation']=nounInfo("navigation")
nouns['navigator']=nounInfo("navigator")
nouns['navvy']=nounInfo("navvy")
nouns['navy']=nounInfo("navy")
adverbs['nay']="nay"
nouns['neap']=nounInfo("neap")
adjectives['near']=adjInfo("near")
adverbs['near']="near"
prepositions['near']=P("near")
adjectives['nearby']=adjInfo("nearby")
adverbs['nearly']="nearly"
nouns['nearness']=nounInfo("nearness")
nouns['nearside']=nounInfo("nearside")
adjectives['neat']=adjInfo("neat")
adverbs['neatly']="neatly"
nouns['neatness']=nounInfo("neatness")
nouns['nebula']=nounInfo("nebula")
adjectives['nebular']=adjInfo("nebular")
adjectives['nebulous']=adjInfo("nebulous")
adverbs['necessarily']="necessarily"
adjectives['necessary']=adjInfo("necessary")
nouns['necessary']=nounInfo("necessary")
adjectives['necessitous']=adjInfo("necessitous")
nouns['necessity']=nounInfo("necessity")
nouns['neck']=nounInfo("neck")
nouns['neckband']=nounInfo("neckband")
nouns['neckcloth']=nounInfo("neckcloth")
nouns['neckerchief']=nounInfo("neckerchief")
nouns['necklace']=nounInfo("necklace")
nouns['necklet']=nounInfo("necklet")
nouns['neckline']=nounInfo("neckline")
nouns['necktie']=nounInfo("necktie")
nouns['neckwear']=nounInfo("neckwear")
nouns['necromancer']=nounInfo("necromancer")
nouns['necromancy']=nounInfo("necromancy")
nouns['necropolis']=nounInfo("necropolis")
nouns['nectar']=nounInfo("nectar")
nouns['nectarine']=nounInfo("nectarine")
nouns['need']=nounInfo("need")
adjectives['needful']=adjInfo("needful")
adverbs['needfully']="needfully"
nouns['needle']=nounInfo("needle")
nouns['needlecraft']=nounInfo("needlecraft")
adjectives['needless']=adjInfo("needless")
adverbs['needlessly']="needlessly"
nouns['needlework']=nounInfo("needlework")
adverbs['needs']="needs"
adjectives['needy']=adjInfo("needy")
adjectives['nefarious']=adjInfo("nefarious")
adverbs['nefariously']="nefariously"
nouns['nefariousness']=nounInfo("nefariousness")
nouns['negation']=nounInfo("negation")
adjectives['negative']=adjInfo("negative")
nouns['negative']=nounInfo("negative")
adverbs['negatively']="negatively"
nouns['neglect']=nounInfo("neglect")
adjectives['neglectful']=adjInfo("neglectful")
adverbs['neglectfully']="neglectfully"
nouns['neglectfulness']=nounInfo("neglectfulness")
nouns['negligee']=nounInfo("negligee")
nouns['negligence']=nounInfo("negligence")
adjectives['negligent']=adjInfo("negligent")
adverbs['negligently']="negligently"
adjectives['negligible']=adjInfo("negligible")
adjectives['negotiable']=adjInfo("negotiable")
nouns['negotiation']=nounInfo("negotiation")
nouns['negotiator']=nounInfo("negotiator")
nouns['negus']=nounInfo("negus")
nouns['neigh']=nounInfo("neigh")
nouns['neighbour']=nounInfo("neighbour").addAttributes({"g":"x"})
nouns['neighbourhood']=nounInfo("neighbourhood")
nouns['neighbourliness']=nounInfo("neighbourliness")
adjectives['neighbourly']=adjInfo("neighbourly")
adverbs['neither']="neither"
nouns['nemesis']=nounInfo("nemesis")
adjectives['neolithic']=adjInfo("neolithic")
nouns['neologism']=nounInfo("neologism")
nouns['neon']=nounInfo("neon")
nouns['neophyte']=nounInfo("neophyte")
nouns['neoplasm']=nounInfo("neoplasm")
nouns['nephew']=nounInfo("nephew").addAttributes({"g":"m"})
nouns['nephritis']=nounInfo("nephritis")
nouns['nepotism']=nounInfo("nepotism")
nouns['nereid']=nounInfo("nereid")
nouns['nerve']=nounInfo("nerve")
adjectives['nerveless']=adjInfo("nerveless")
adverbs['nervelessly']="nervelessly"
adjectives['nervous']=adjInfo("nervous")
adverbs['nervously']="nervously"
nouns['nervousness']=nounInfo("nervousness")
adjectives['nervy']=adjInfo("nervy")
nouns['nescience']=nounInfo("nescience")
adjectives['nescient']=adjInfo("nescient")
nouns['ness']=nounInfo("ness")
nouns['nest']=nounInfo("nest")
nouns['nestling']=nounInfo("nestling")
adjectives['net']=adjInfo("net")
nouns['net']=nounInfo("net")
nouns['netball']=nounInfo("netball")
adjectives['nether']=adjInfo("nether")
adjectives['nethermost']=adjInfo("nethermost")
adjectives['nett']=adjInfo("nett")
nouns['netting']=nounInfo("netting")
nouns['nettle']=nounInfo("nettle")
nouns['nettlerash']=nounInfo("nettlerash")
nouns['network']=nounInfo("network")
adjectives['networking']=adjInfo("networking")
nouns['networking']=nounInfo("networking")
adjectives['neural']=adjInfo("neural")
nouns['neuralgia']=nounInfo("neuralgia")
adjectives['neuralgic']=adjInfo("neuralgic")
nouns['neurasthenia']=nounInfo("neurasthenia")
adjectives['neurasthenic']=adjInfo("neurasthenic")
nouns['neurasthenic']=nounInfo("neurasthenic")
nouns['neuritis']=nounInfo("neuritis")
nouns['neurologist']=nounInfo("neurologist")
nouns['neurology']=nounInfo("neurology")
nouns['neurosis']=nounInfo("neurosis")
adjectives['neurotic']=adjInfo("neurotic")
nouns['neurotic']=nounInfo("neurotic")
adverbs['neurotically']="neurotically"
adjectives['neuter']=adjInfo("neuter")
nouns['neuter']=nounInfo("neuter")
adjectives['neutral']=adjInfo("neutral")
nouns['neutral']=nounInfo("neutral")
nouns['neutrality']=nounInfo("neutrality")
nouns['neutralization']=nounInfo("neutralization")
nouns['neutron']=nounInfo("neutron")
adverbs['never']="never"
adverbs['nevermore']="nevermore"
adverbs['nevertheless']="nevertheless"
adjectives['new']=adjInfo("new")
adverbs['new']="new"
nouns['newcomer']=nounInfo("newcomer")
nouns['newel']=nounInfo("newel")
adverbs['newly']="newly"
nouns['newness']=nounInfo("newness")
nouns['news']=nounInfo("news")
nouns['newsagent']=nounInfo("newsagent")
nouns['newsboy']=nounInfo("newsboy")
nouns['newscast']=nounInfo("newscast")
nouns['newscaster']=nounInfo("newscaster")
nouns['newsdealer']=nounInfo("newsdealer")
nouns['newsflash']=nounInfo("newsflash")
adjectives['newsless']=adjInfo("newsless")
nouns['newsletter']=nounInfo("newsletter")
nouns['newsmonger']=nounInfo("newsmonger")
nouns['newspaper']=nounInfo("newspaper")
nouns['newsprint']=nounInfo("newsprint")
nouns['newsreel']=nounInfo("newsreel")
nouns['newsroom']=nounInfo("newsroom")
nouns['newssheet']=nounInfo("newssheet")
nouns['newsstand']=nounInfo("newsstand")
nouns['newsvendor']=nounInfo("newsvendor")
adjectives['newsworthy']=adjInfo("newsworthy")
adjectives['newsy']=adjInfo("newsy")
nouns['newt']=nounInfo("newt")
adverbs['next']="next"
nouns['next']=nounInfo("next")
prepositions['next']=P("next")
nouns['nexus']=nounInfo("nexus")
nouns['nib']=nounInfo("nib")
nouns['nibble']=nounInfo("nibble")
adjectives['nice']=adjInfo("nice")
adverbs['nicely']="nicely"
nouns['niceness']=nounInfo("niceness")
nouns['nicety']=nounInfo("nicety")
nouns['niche']=nounInfo("niche")
nouns['nick']=nounInfo("nick")
nouns['nickel']=nounInfo("nickel")
nouns['nicknack']=nounInfo("nicknack")
nouns['nickname']=nounInfo("nickname")
nouns['nicotine']=nounInfo("nicotine")
nouns['niece']=nounInfo("niece").addAttributes({"g":"f"})
nouns['niff']=nounInfo("niff")
adjectives['niffy']=adjInfo("niffy")
adjectives['nifty']=adjInfo("nifty")
nouns['niggard']=nounInfo("niggard")
nouns['niggardliness']=nounInfo("niggardliness")
adjectives['niggardly']=adjInfo("niggardly")
nouns['nigger']=nounInfo("nigger")
adjectives['niggling']=adjInfo("niggling")
adverbs['nigh']="nigh"
prepositions['nigh']=P("nigh")
adverbs['nigher']="nigher"
prepositions['nigher']=P("nigher")
adverbs['nighest']="nighest"
prepositions['nighest']=P("nighest")
nouns['night']=nounInfo("night")
nouns['nightcap']=nounInfo("nightcap")
nouns['nightclub']=nounInfo("nightclub")
nouns['nightdress']=nounInfo("nightdress")
nouns['nightfall']=nounInfo("nightfall")
nouns['nightgown']=nounInfo("nightgown")
nouns['nightingale']=nounInfo("nightingale")
nouns['nightjar']=nounInfo("nightjar")
adjectives['nightly']=adjInfo("nightly")
adverbs['nightly']="nightly"
nouns['nightmare']=nounInfo("nightmare")
nouns['nightshade']=nounInfo("nightshade")
nouns['nightshirt']=nounInfo("nightshirt")
nouns['nightwork']=nounInfo("nightwork")
nouns['nihilism']=nounInfo("nihilism")
nouns['nihilist']=nounInfo("nihilist")
adjectives['nihilistic']=adjInfo("nihilistic")
nouns['nil']=nounInfo("nil")
adjectives['nimble']=adjInfo("nimble")
nouns['nimbleness']=nounInfo("nimbleness")
adverbs['nimbly']="nimbly"
nouns['nimbus']=nounInfo("nimbus")
nouns['nincompoop']=nounInfo("nincompoop")
nouns['nine']=nounInfo("nine")
adjectives['ninefold']=adjInfo("ninefold")
adverbs['ninefold']="ninefold"
nouns['ninepence']=nounInfo("ninepence")
adjectives['ninepenny']=adjInfo("ninepenny")
nouns['ninepins']=nounInfo("ninepins")
nouns['nineteen']=nounInfo("nineteen")
adjectives['nineteenth']=adjInfo("nineteenth")
nouns['nineteenth']=nounInfo("nineteenth")
adjectives['ninetieth']=adjInfo("ninetieth")
nouns['ninetieth']=nounInfo("ninetieth")
nouns['ninety']=nounInfo("ninety")
nouns['ninny']=nounInfo("ninny")
adjectives['ninth']=adjInfo("ninth")
nouns['ninth']=nounInfo("ninth")
adverbs['ninthly']="ninthly"
nouns['nip']=nounInfo("nip")
nouns['nipper']=nounInfo("nipper")
adjectives['nipping']=adjInfo("nipping")
nouns['nipple']=nounInfo("nipple")
adjectives['nippy']=adjInfo("nippy")
nouns['nirvana']=nounInfo("nirvana")
nouns['nit']=nounInfo("nit")
nouns['nitrate']=nounInfo("nitrate")
nouns['nitre']=nounInfo("nitre")
adjectives['nitric']=adjInfo("nitric")
nouns['nitrochalk']=nounInfo("nitrochalk")
nouns['nitrogen']=nounInfo("nitrogen")
nouns['nitroglycerin']=nounInfo("nitroglycerin")
nouns['nitroglycerine']=nounInfo("nitroglycerine")
adjectives['nitrous']=adjInfo("nitrous")
nouns['nitwit']=nounInfo("nitwit")
adjectives['nitwitted']=adjInfo("nitwitted")
nouns['nix']=nounInfo("nix")
adverbs['no']="no"
nouns['no']=nounInfo("no")
nouns['nob']=nounInfo("nob")
nouns['nobility']=nounInfo("nobility")
adjectives['noble']=adjInfo("noble")
nouns['noble']=nounInfo("noble")
nouns['nobleman']=nounInfo("nobleman")
nouns['noblesse']=nounInfo("noblesse")
adverbs['nobly']="nobly"
nouns['nobody']=nounInfo("nobody")
nouns['noctambulist']=nounInfo("noctambulist")
adjectives['nocturnal']=adjInfo("nocturnal")
nouns['nocturne']=nounInfo("nocturne")
nouns['nod']=nounInfo("nod")
nouns['noddle']=nounInfo("noddle")
nouns['node']=nounInfo("node")
adjectives['nodular']=adjInfo("nodular")
adjectives['nodulated']=adjInfo("nodulated")
nouns['nodule']=nounInfo("nodule")
nouns['noggin']=nounInfo("noggin")
adverbs['nohow']="nohow"
nouns['noise']=nounInfo("noise")
adjectives['noiseless']=adjInfo("noiseless")
adverbs['noiselessly']="noiselessly"
nouns['noiselessness']=nounInfo("noiselessness")
adverbs['noisily']="noisily"
nouns['noisiness']=nounInfo("noisiness")
adjectives['noisome']=adjInfo("noisome")
adjectives['noisy']=adjInfo("noisy")
nouns['nomad']=nounInfo("nomad")
adjectives['nomadic']=adjInfo("nomadic")
nouns['nomenclature']=nounInfo("nomenclature")
adjectives['nominal']=adjInfo("nominal")
adverbs['nominally']="nominally"
nouns['nomination']=nounInfo("nomination")
adjectives['nominative']=adjInfo("nominative")
nouns['nominative']=nounInfo("nominative")
nouns['nominee']=nounInfo("nominee")
nouns['nonage']=nounInfo("nonage")
adjectives['nonagenarian']=adjInfo("nonagenarian")
nouns['nonagenarian']=nounInfo("nonagenarian")
nouns['nonce']=nounInfo("nonce")
nouns['nonchalance']=nounInfo("nonchalance")
adjectives['nonchalant']=adjInfo("nonchalant")
adverbs['nonchalantly']="nonchalantly"
nouns['nonconformist']=nounInfo("nonconformist")
nouns['nonconformity']=nounInfo("nonconformity")
adjectives['nondescript']=adjInfo("nondescript")
nouns['nondescript']=nounInfo("nondescript")
adverbs['none']="none"
nouns['nonentity']=nounInfo("nonentity")
nouns['nonesuch']=nounInfo("nonesuch")
adverbs['nonetheless']="nonetheless"
nouns['nonsense']=nounInfo("nonsense")
adjectives['nonsensical']=adjInfo("nonsensical")
nouns['nonsuch']=nounInfo("nonsuch")
nouns['noodle']=nounInfo("noodle")
nouns['nook']=nounInfo("nook")
nouns['noon']=nounInfo("noon")
adjectives['noonday']=adjInfo("noonday")
nouns['noontide']=nounInfo("noontide")
nouns['noose']=nounInfo("noose")
nouns['nope']=nounInfo("nope")
nouns['norm']=nounInfo("norm")
adjectives['normal']=adjInfo("normal")
nouns['normal']=nounInfo("normal")
nouns['normalcy']=nounInfo("normalcy")
nouns['normality']=nounInfo("normality")
nouns['normalization']=nounInfo("normalization")
adverbs['normally']="normally"
adjectives['normative']=adjInfo("normative")
adverbs['normatively']="normatively"
adverbs['north']="north"
nouns['north']=nounInfo("north")
adverbs['northeast']="northeast"
nouns['northeast']=nounInfo("northeast")
nouns['northeaster']=nounInfo("northeaster")
adjectives['northeasterly']=adjInfo("northeasterly")
adjectives['northeastern']=adjInfo("northeastern")
adjectives['northerly']=adjInfo("northerly")
adverbs['northerly']="northerly"
adjectives['northern']=adjInfo("northern")
nouns['northerner']=nounInfo("northerner")
adjectives['northernmost']=adjInfo("northernmost")
adverbs['northwards']="northwards"
adverbs['northwest']="northwest"
nouns['northwest']=nounInfo("northwest")
nouns['northwester']=nounInfo("northwester")
adjectives['northwesterly']=adjInfo("northwesterly")
adjectives['northwestern']=adjInfo("northwestern")
nouns['nose']=nounInfo("nose")
nouns['nosebag']=nounInfo("nosebag")
nouns['nosebleed']=nounInfo("nosebleed")
nouns['nosecone']=nounInfo("nosecone")
adjectives['nosed']=adjInfo("nosed")
nouns['nosedive']=nounInfo("nosedive")
nouns['nosegay']=nounInfo("nosegay")
nouns['nosering']=nounInfo("nosering")
adjectives['nosey']=adjInfo("nosey")
nouns['nosh']=nounInfo("nosh")
nouns['nostalgia']=nounInfo("nostalgia")
adjectives['nostalgic']=adjInfo("nostalgic")
adverbs['nostalgically']="nostalgically"
nouns['nostril']=nounInfo("nostril")
nouns['nostrum']=nounInfo("nostrum")
adjectives['nosy']=adjInfo("nosy")
adverbs['not']="not"
nouns['notability']=nounInfo("notability")
adjectives['notable']=adjInfo("notable")
nouns['notable']=nounInfo("notable")
adverbs['notably']="notably"
nouns['notary']=nounInfo("notary")
nouns['notation']=nounInfo("notation")
nouns['notch']=nounInfo("notch")
nouns['note']=nounInfo("note")
nouns['notebook']=nounInfo("notebook")
nouns['notecase']=nounInfo("notecase")
adjectives['noted']=adjInfo("noted")
nouns['notepaper']=nounInfo("notepaper")
adjectives['noteworthy']=adjInfo("noteworthy")
adverbs['nothing']="nothing"
nouns['nothing']=nounInfo("nothing")
nouns['nothingness']=nounInfo("nothingness")
nouns['notice']=nounInfo("notice")
adjectives['noticeable']=adjInfo("noticeable")
adverbs['noticeably']="noticeably"
adjectives['notifiable']=adjInfo("notifiable")
nouns['notification']=nounInfo("notification")
nouns['notion']=nounInfo("notion")
adjectives['notional']=adjInfo("notional")
nouns['notoriety']=nounInfo("notoriety")
adjectives['notorious']=adjInfo("notorious")
adverbs['notoriously']="notoriously"
adverbs['notwithstanding']="notwithstanding"
prepositions['notwithstanding']=P("notwithstanding")
nouns['nougat']=nounInfo("nougat")
nouns['nought']=nounInfo("nought")
nouns['noun']=nounInfo("noun")
nouns['nourishment']=nounInfo("nourishment")
nouns['nous']=nounInfo("nous")
nouns['nova']=nounInfo("nova")
adjectives['novel']=adjInfo("novel")
nouns['novel']=nounInfo("novel")
nouns['novelette']=nounInfo("novelette")
nouns['novelist']=nounInfo("novelist").addAttributes({"g":"x"})
nouns['novelty']=nounInfo("novelty")
nouns['novice']=nounInfo("novice")
nouns['noviciate']=nounInfo("noviciate")
nouns['novitiate']=nounInfo("novitiate")
adverbs['now']="now"
adverbs['nowadays']="nowadays"
adverbs['nowhere']="nowhere"
adverbs['nowise']="nowise"
adjectives['noxious']=adjInfo("noxious")
adverbs['noxiously']="noxiously"
nouns['noxiousness']=nounInfo("noxiousness")
nouns['nozzle']=nounInfo("nozzle")
nouns['nuance']=nounInfo("nuance")
nouns['nub']=nounInfo("nub")
adjectives['nubile']=adjInfo("nubile")
adjectives['nuclear']=adjInfo("nuclear")
adjectives['nucleic']=adjInfo("nucleic")
nouns['nucleus']=nounInfo("nucleus")
adjectives['nude']=adjInfo("nude")
nouns['nude']=nounInfo("nude")
nouns['nudge']=nounInfo("nudge")
nouns['nudism']=nounInfo("nudism")
nouns['nudist']=nounInfo("nudist")
nouns['nudity']=nounInfo("nudity")
adjectives['nugatory']=adjInfo("nugatory")
nouns['nugget']=nounInfo("nugget")
nouns['nuisance']=nounInfo("nuisance")
adjectives['null']=adjInfo("null")
nouns['nullification']=nounInfo("nullification")
nouns['nullity']=nounInfo("nullity")
adjectives['numb']=adjInfo("numb")
nouns['number']=nounInfo("number")
adverbs['numbly']="numbly"
nouns['numbness']=nounInfo("numbness")
adjectives['numerable']=adjInfo("numerable")
nouns['numeracy']=nounInfo("numeracy")
adjectives['numeral']=adjInfo("numeral")
nouns['numeral']=nounInfo("numeral")
adjectives['numerate']=adjInfo("numerate")
nouns['numeration']=nounInfo("numeration")
nouns['numerator']=nounInfo("numerator")
adjectives['numerical']=adjInfo("numerical")
adverbs['numerically']="numerically"
adjectives['numerous']=adjInfo("numerous")
adjectives['numinous']=adjInfo("numinous")
nouns['numismatics']=nounInfo("numismatics")
nouns['numismatist']=nounInfo("numismatist")
nouns['numskull']=nounInfo("numskull")
nouns['nun']=nounInfo("nun").addAttributes({"g":"f"})
nouns['nuncio']=nounInfo("nuncio")
nouns['nunnery']=nounInfo("nunnery")
adjectives['nuptial']=adjInfo("nuptial")
nouns['nuptials']=nounInfo("nuptials")
nouns['nurse']=nounInfo("nurse")
nouns['nurseling']=nounInfo("nurseling")
nouns['nursemaid']=nounInfo("nursemaid")
nouns['nursery']=nounInfo("nursery")
nouns['nurseryman']=nounInfo("nurseryman")
nouns['nursling']=nounInfo("nursling")
nouns['nurture']=nounInfo("nurture")
nouns['nut']=nounInfo("nut")
nouns['nutcracker']=nounInfo("nutcracker")
nouns['nutmeg']=nounInfo("nutmeg")
nouns['nutria']=nounInfo("nutria")
adjectives['nutrient']=adjInfo("nutrient")
nouns['nutriment']=nounInfo("nutriment")
nouns['nutrition']=nounInfo("nutrition")
adjectives['nutritious']=adjInfo("nutritious")
adjectives['nutritive']=adjInfo("nutritive")
adjectives['nuts']=adjInfo("nuts")
nouns['nutshell']=nounInfo("nutshell")
adjectives['nutty']=adjInfo("nutty")
nouns['nylon']=nounInfo("nylon")
nouns['nymph']=nounInfo("nymph")
nouns['nymphet']=nounInfo("nymphet")
nouns['nympho']=nounInfo("nympho")
nouns['nymphomania']=nounInfo("nymphomania")
adjectives['nymphomaniac']=adjInfo("nymphomaniac")
nouns['nymphomaniac']=nounInfo("nymphomaniac")
nouns['oaf']=nounInfo("oaf")
adjectives['oafish']=adjInfo("oafish")
nouns['oak']=nounInfo("oak")
adjectives['oaken']=adjInfo("oaken")
nouns['oakum']=nounInfo("oakum")
nouns['oar']=nounInfo("oar")
nouns['oarsman']=nounInfo("oarsman")
nouns['oarsmanship']=nounInfo("oarsmanship")
nouns['oarswoman']=nounInfo("oarswoman")
nouns['oasis']=nounInfo("oasis")
nouns['oast']=nounInfo("oast")
nouns['oasthouse']=nounInfo("oasthouse")
nouns['oat']=nounInfo("oat")
nouns['oatcake']=nounInfo("oatcake")
nouns['oath']=nounInfo("oath")
nouns['oatmeal']=nounInfo("oatmeal")
nouns['obbligato']=nounInfo("obbligato")
nouns['obduracy']=nounInfo("obduracy")
adjectives['obdurate']=adjInfo("obdurate")
adverbs['obdurately']="obdurately"
nouns['obedience']=nounInfo("obedience")
adjectives['obedient']=adjInfo("obedient")
adverbs['obediently']="obediently"
nouns['obeisance']=nounInfo("obeisance")
nouns['obelisk']=nounInfo("obelisk")
adjectives['obese']=adjInfo("obese")
nouns['obesity']=nounInfo("obesity")
nouns['obi']=nounInfo("obi")
nouns['obituary']=nounInfo("obituary")
nouns['object']=nounInfo("object")
nouns['objection']=nounInfo("objection")
adjectives['objectionable']=adjInfo("objectionable")
adverbs['objectionably']="objectionably"
adjectives['objective']=adjInfo("objective")
nouns['objective']=nounInfo("objective")
adverbs['objectively']="objectively"
nouns['objectivity']=nounInfo("objectivity")
nouns['objector']=nounInfo("objector")
nouns['objurgation']=nounInfo("objurgation")
adjectives['oblate']=adjInfo("oblate")
nouns['oblation']=nounInfo("oblation")
nouns['obligation']=nounInfo("obligation")
adjectives['obligatory']=adjInfo("obligatory")
adjectives['obliging']=adjInfo("obliging")
adverbs['obligingly']="obligingly"
adjectives['oblique']=adjInfo("oblique")
adverbs['obliquely']="obliquely"
nouns['obliquity']=nounInfo("obliquity")
nouns['obliteration']=nounInfo("obliteration")
nouns['oblivion']=nounInfo("oblivion")
adjectives['oblivious']=adjInfo("oblivious")
adjectives['oblong']=adjInfo("oblong")
nouns['oblong']=nounInfo("oblong")
nouns['obloquy']=nounInfo("obloquy")
adjectives['obnoxious']=adjInfo("obnoxious")
adverbs['obnoxiously']="obnoxiously"
nouns['obnoxiousness']=nounInfo("obnoxiousness")
nouns['oboe']=nounInfo("oboe")
nouns['oboist']=nounInfo("oboist")
adjectives['obscene']=adjInfo("obscene")
adverbs['obscenely']="obscenely"
nouns['obscenity']=nounInfo("obscenity")
nouns['obscurantism']=nounInfo("obscurantism")
nouns['obscurantist']=nounInfo("obscurantist")
adjectives['obscure']=adjInfo("obscure")
adverbs['obscurely']="obscurely"
nouns['obscurity']=nounInfo("obscurity")
nouns['obsequies']=nounInfo("obsequies")
adjectives['obsequious']=adjInfo("obsequious")
adverbs['obsequiously']="obsequiously"
nouns['obsequiousness']=nounInfo("obsequiousness")
adjectives['observable']=adjInfo("observable")
adverbs['observably']="observably"
nouns['observance']=nounInfo("observance")
adjectives['observant']=adjInfo("observant")
adverbs['observantly']="observantly"
nouns['observation']=nounInfo("observation")
nouns['observatory']=nounInfo("observatory")
nouns['observer']=nounInfo("observer")
adjectives['observing']=adjInfo("observing")
adverbs['observingly']="observingly"
nouns['obsession']=nounInfo("obsession")
adjectives['obsessive']=adjInfo("obsessive")
adverbs['obsessively']="obsessively"
nouns['obsidian']=nounInfo("obsidian")
nouns['obsolescence']=nounInfo("obsolescence")
adjectives['obsolescent']=adjInfo("obsolescent")
adjectives['obsolete']=adjInfo("obsolete")
nouns['obstacle']=nounInfo("obstacle")
adjectives['obstetric']=adjInfo("obstetric")
adjectives['obstetrical']=adjInfo("obstetrical")
nouns['obstetrician']=nounInfo("obstetrician")
nouns['obstetrics']=nounInfo("obstetrics")
nouns['obstinacy']=nounInfo("obstinacy")
adjectives['obstinate']=adjInfo("obstinate")
adverbs['obstinately']="obstinately"
adjectives['obstreperous']=adjInfo("obstreperous")
adverbs['obstreperously']="obstreperously"
nouns['obstreperousness']=nounInfo("obstreperousness")
nouns['obstruction']=nounInfo("obstruction")
nouns['obstructionism']=nounInfo("obstructionism")
nouns['obstructionist']=nounInfo("obstructionist")
adjectives['obstructive']=adjInfo("obstructive")
adverbs['obstructively']="obstructively"
adjectives['obtainable']=adjInfo("obtainable")
adjectives['obtrusive']=adjInfo("obtrusive")
adverbs['obtrusively']="obtrusively"
adjectives['obtuse']=adjInfo("obtuse")
adverbs['obtusely']="obtusely"
nouns['obtuseness']=nounInfo("obtuseness")
nouns['obverse']=nounInfo("obverse")
adjectives['obvious']=adjInfo("obvious")
adverbs['obviously']="obviously"
nouns['obviousness']=nounInfo("obviousness")
nouns['ocarina']=nounInfo("ocarina")
nouns['occasion']=nounInfo("occasion")
adjectives['occasional']=adjInfo("occasional")
adverbs['occasionally']="occasionally"
adjectives['occult']=adjInfo("occult")
nouns['occult']=nounInfo("occult")
nouns['occupancy']=nounInfo("occupancy")
nouns['occupant']=nounInfo("occupant")
nouns['occupation']=nounInfo("occupation")
adjectives['occupational']=adjInfo("occupational")
nouns['occupier']=nounInfo("occupier")
nouns['occurrence']=nounInfo("occurrence")
nouns['ocean']=nounInfo("ocean")
adjectives['oceanic']=adjInfo("oceanic")
nouns['ochre']=nounInfo("ochre")
nouns['octagon']=nounInfo("octagon")
adjectives['octagonal']=adjInfo("octagonal")
nouns['octane']=nounInfo("octane")
nouns['octave']=nounInfo("octave")
nouns['octavo']=nounInfo("octavo")
nouns['octet']=nounInfo("octet")
nouns['octette']=nounInfo("octette")
adjectives['octogenarian']=adjInfo("octogenarian")
nouns['octogenarian']=nounInfo("octogenarian")
nouns['octopus']=nounInfo("octopus")
nouns['octroi']=nounInfo("octroi")
adjectives['ocular']=adjInfo("ocular")
nouns['oculist']=nounInfo("oculist")
nouns['odalisque']=nounInfo("odalisque")
adjectives['odd']=adjInfo("odd")
nouns['oddity']=nounInfo("oddity")
adverbs['oddly']="oddly"
nouns['oddment']=nounInfo("oddment")
nouns['odds']=nounInfo("odds")
nouns['ode']=nounInfo("ode")
adjectives['odious']=adjInfo("odious")
adverbs['odiously']="odiously"
nouns['odium']=nounInfo("odium")
adjectives['odoriferous']=adjInfo("odoriferous")
adjectives['odorous']=adjInfo("odorous")
nouns['odour']=nounInfo("odour")
adjectives['odourless']=adjInfo("odourless")
nouns['odyssey']=nounInfo("odyssey")
adjectives['oecumenical']=adjInfo("oecumenical")
nouns['oesophagus']=nounInfo("oesophagus")
prepositions['of']=P("of")
adjectives['off']=adjInfo("off")
adverbs['off']="off"
prepositions['off']=P("off")
nouns['offal']=nounInfo("offal")
nouns['offence']=nounInfo("offence")
adjectives['offenceless']=adjInfo("offenceless")
nouns['offender']=nounInfo("offender")
adjectives['offensive']=adjInfo("offensive")
nouns['offensive']=nounInfo("offensive")
adverbs['offensively']="offensively"
nouns['offensiveness']=nounInfo("offensiveness")
nouns['offer']=nounInfo("offer")
nouns['offering']=nounInfo("offering")
nouns['offertory']=nounInfo("offertory")
nouns['office']=nounInfo("office")
nouns['officer']=nounInfo("officer").addAttributes({"g":"x"})
adjectives['official']=adjInfo("official")
nouns['official']=nounInfo("official")
nouns['officialdom']=nounInfo("officialdom")
nouns['officialese']=nounInfo("officialese")
adverbs['officially']="officially"
adjectives['officious']=adjInfo("officious")
adverbs['officiously']="officiously"
nouns['officiousness']=nounInfo("officiousness")
nouns['offing']=nounInfo("offing")
adjectives['offish']=adjInfo("offish")
nouns['offset']=nounInfo("offset")
nouns['offshoot']=nounInfo("offshoot")
adjectives['offside']=adjInfo("offside")
adverbs['offside']="offside"
nouns['offspring']=nounInfo("offspring")
adverbs['oft']="oft"
adverbs['often']="often"
nouns['ogre']=nounInfo("ogre")
adjectives['ogreish']=adjInfo("ogreish")
nouns['ogress']=nounInfo("ogress")
nouns['oh']=nounInfo("oh")
nouns['ohm']=nounInfo("ohm")
nouns['oho']=nounInfo("oho")
nouns['oil']=nounInfo("oil")
nouns['oilcloth']=nounInfo("oilcloth")
adjectives['oiled']=adjInfo("oiled")
nouns['oiler']=nounInfo("oiler")
nouns['oiliness']=nounInfo("oiliness")
nouns['oilskin']=nounInfo("oilskin")
adjectives['oily']=adjInfo("oily")
nouns['ointment']=nounInfo("ointment")
nouns['okapi']=nounInfo("okapi")
adjectives['okay']=adjInfo("okay")
adverbs['okay']="okay"
nouns['okay']=nounInfo("okay")
nouns['okra']=nounInfo("okra")
adjectives['old']=adjInfo("old")
nouns['old']=nounInfo("old")
adjectives['olden']=adjInfo("olden")
adjectives['oldish']=adjInfo("oldish")
nouns['oldster']=nounInfo("oldster")
adjectives['oleaginous']=adjInfo("oleaginous")
nouns['oleander']=nounInfo("oleander")
adjectives['olfactory']=adjInfo("olfactory")
nouns['oligarch']=nounInfo("oligarch")
nouns['oligarchy']=nounInfo("oligarchy")
adjectives['olive']=adjInfo("olive")
nouns['olive']=nounInfo("olive")
nouns['ombudsman']=nounInfo("ombudsman")
nouns['omega']=nounInfo("omega")
nouns['omelet']=nounInfo("omelet")
nouns['omelette']=nounInfo("omelette")
nouns['omen']=nounInfo("omen")
adjectives['ominous']=adjInfo("ominous")
adverbs['ominously']="ominously"
nouns['omission']=nounInfo("omission")
nouns['omnibus']=nounInfo("omnibus")
nouns['omnipotence']=nounInfo("omnipotence")
adjectives['omnipotent']=adjInfo("omnipotent")
nouns['omniscience']=nounInfo("omniscience")
adjectives['omniscient']=adjInfo("omniscient")
adjectives['omnivorous']=adjInfo("omnivorous")
adverbs['on']="on"
prepositions['on']=P("on")
adverbs['once']="once"
adjectives['oncoming']=adjInfo("oncoming")
nouns['oncoming']=nounInfo("oncoming")
adjectives['onerous']=adjInfo("onerous")
adverbs['onerously']="onerously"
adjectives['ongoing']=adjInfo("ongoing")
nouns['onion']=nounInfo("onion")
nouns['onlooker']=nounInfo("onlooker")
adjectives['only']=adjInfo("only")
adverbs['only']="only"
nouns['onomatopoeia']=nounInfo("onomatopoeia")
nouns['onrush']=nounInfo("onrush")
nouns['onset']=nounInfo("onset")
adjectives['onshore']=adjInfo("onshore")
adverbs['onshore']="onshore"
nouns['onslaught']=nounInfo("onslaught")
prepositions['onto']=P("onto")
adverbs['ontologically']="ontologically"
nouns['ontology']=nounInfo("ontology")
nouns['onus']=nounInfo("onus")
adjectives['onward']=adjInfo("onward")
adverbs['onward']="onward"
adverbs['onwards']="onwards"
nouns['onyx']=nounInfo("onyx")
nouns['oodles']=nounInfo("oodles")
nouns['oomph']=nounInfo("oomph")
nouns['ooze']=nounInfo("ooze")
adjectives['oozy']=adjInfo("oozy")
nouns['opacity']=nounInfo("opacity")
nouns['opal']=nounInfo("opal")
adjectives['opalescent']=adjInfo("opalescent")
adjectives['opaque']=adjInfo("opaque")
adverbs['opaquely']="opaquely"
nouns['opaqueness']=nounInfo("opaqueness")
adjectives['open']=adjInfo("open")
nouns['open']=nounInfo("open")
nouns['opener']=nounInfo("opener")
adjectives['opening']=adjInfo("opening")
nouns['opening']=nounInfo("opening")
adverbs['openly']="openly"
nouns['openness']=nounInfo("openness")
nouns['opera']=nounInfo("opera")
adjectives['operable']=adjInfo("operable")
adjectives['operatic']=adjInfo("operatic")
nouns['operation']=nounInfo("operation")
adjectives['operational']=adjInfo("operational")
adjectives['operative']=adjInfo("operative")
nouns['operative']=nounInfo("operative")
nouns['operator']=nounInfo("operator")
nouns['operetta']=nounInfo("operetta")
nouns['ophthalmia']=nounInfo("ophthalmia")
adjectives['ophthalmic']=adjInfo("ophthalmic")
nouns['ophthalmoscope']=nounInfo("ophthalmoscope")
nouns['opiate']=nounInfo("opiate")
nouns['opinion']=nounInfo("opinion")
adjectives['opinionated']=adjInfo("opinionated")
adjectives['opinionative']=adjInfo("opinionative")
nouns['opium']=nounInfo("opium")
nouns['opossum']=nounInfo("opossum")
nouns['opponent']=nounInfo("opponent")
adjectives['opportune']=adjInfo("opportune")
adverbs['opportunely']="opportunely"
nouns['opportunism']=nounInfo("opportunism")
nouns['opportunist']=nounInfo("opportunist")
nouns['opportunity']=nounInfo("opportunity")
adjectives['opposite']=adjInfo("opposite")
nouns['opposite']=nounInfo("opposite")
nouns['opposition']=nounInfo("opposition")
nouns['oppression']=nounInfo("oppression")
adjectives['oppressive']=adjInfo("oppressive")
adverbs['oppressively']="oppressively"
nouns['oppressor']=nounInfo("oppressor")
adjectives['opprobrious']=adjInfo("opprobrious")
adverbs['opprobriously']="opprobriously"
nouns['opprobrium']=nounInfo("opprobrium")
adjectives['optative']=adjInfo("optative")
nouns['optative']=nounInfo("optative")
adjectives['optic']=adjInfo("optic")
adjectives['optical']=adjInfo("optical")
adverbs['optically']="optically"
nouns['optician']=nounInfo("optician")
nouns['optics']=nounInfo("optics")
nouns['optimism']=nounInfo("optimism")
nouns['optimist']=nounInfo("optimist")
adjectives['optimistic']=adjInfo("optimistic")
adverbs['optimistically']="optimistically"
nouns['optimum']=nounInfo("optimum")
nouns['option']=nounInfo("option")
adjectives['optional']=adjInfo("optional")
adverbs['optionally']="optionally"
nouns['opulence']=nounInfo("opulence")
adjectives['opulent']=adjInfo("opulent")
adverbs['opulently']="opulently"
nouns['opus']=nounInfo("opus")
nouns['oracle']=nounInfo("oracle")
adjectives['oracular']=adjInfo("oracular")
adjectives['oral']=adjInfo("oral")
nouns['oral']=nounInfo("oral")
adverbs['orally']="orally"
adjectives['orange']=adjInfo("orange")
nouns['orange']=nounInfo("orange")
nouns['orangeade']=nounInfo("orangeade")
nouns['oration']=nounInfo("oration")
nouns['orator']=nounInfo("orator")
adjectives['oratorical']=adjInfo("oratorical")
nouns['oratorio']=nounInfo("oratorio")
nouns['oratory']=nounInfo("oratory")
nouns['orb']=nounInfo("orb")
nouns['orbit']=nounInfo("orbit")
adjectives['orbital']=adjInfo("orbital")
nouns['orchard']=nounInfo("orchard")
nouns['orchestra']=nounInfo("orchestra")
adjectives['orchestral']=adjInfo("orchestral")
nouns['orchestration']=nounInfo("orchestration")
nouns['orchid']=nounInfo("orchid")
nouns['orchis']=nounInfo("orchis")
nouns['ordeal']=nounInfo("ordeal")
nouns['order']=nounInfo("order")
nouns['ordering']=nounInfo("ordering")
nouns['orderliness']=nounInfo("orderliness")
adjectives['orderly']=adjInfo("orderly")
nouns['orderly']=nounInfo("orderly")
adjectives['ordinal']=adjInfo("ordinal")
nouns['ordinal']=nounInfo("ordinal")
nouns['ordinance']=nounInfo("ordinance")
nouns['ordinand']=nounInfo("ordinand")
adverbs['ordinarily']="ordinarily"
adjectives['ordinary']=adjInfo("ordinary")
nouns['ordination']=nounInfo("ordination")
nouns['ordnance']=nounInfo("ordnance")
nouns['ordure']=nounInfo("ordure")
nouns['ore']=nounInfo("ore")
nouns['organ']=nounInfo("organ")
nouns['organdie']=nounInfo("organdie")
adjectives['organic']=adjInfo("organic")
adverbs['organically']="organically"
nouns['organism']=nounInfo("organism")
nouns['organist']=nounInfo("organist")
nouns['organization']=nounInfo("organization")
adjectives['organizational']=adjInfo("organizational")
adjectives['organized']=adjInfo("organized")
nouns['organizer']=nounInfo("organizer")
nouns['orgasm']=nounInfo("orgasm")
adjectives['orgiastic']=adjInfo("orgiastic")
nouns['orgy']=nounInfo("orgy")
nouns['oriel']=nounInfo("oriel")
adjectives['orient']=adjInfo("orient")
nouns['orient']=nounInfo("orient")
adjectives['oriental']=adjInfo("oriental")
nouns['oriental']=nounInfo("oriental")
nouns['orientalist']=nounInfo("orientalist")
nouns['orientation']=nounInfo("orientation")
nouns['orifice']=nounInfo("orifice")
nouns['origin']=nounInfo("origin")
adjectives['original']=adjInfo("original")
nouns['original']=nounInfo("original")
nouns['originality']=nounInfo("originality")
adverbs['originally']="originally"
nouns['originator']=nounInfo("originator")
nouns['oriole']=nounInfo("oriole")
nouns['orison']=nounInfo("orison")
nouns['orlop']=nounInfo("orlop")
nouns['ormolu']=nounInfo("ormolu")
nouns['ornament']=nounInfo("ornament")
adjectives['ornamental']=adjInfo("ornamental")
nouns['ornamentation']=nounInfo("ornamentation")
adjectives['ornate']=adjInfo("ornate")
adverbs['ornately']="ornately"
nouns['ornateness']=nounInfo("ornateness")
adjectives['ornery']=adjInfo("ornery")
adjectives['ornithological']=adjInfo("ornithological")
nouns['ornithologist']=nounInfo("ornithologist")
nouns['ornithology']=nounInfo("ornithology")
adjectives['orotund']=adjInfo("orotund")
nouns['orphan']=nounInfo("orphan").addAttributes({"g":"x"})
nouns['orphanage']=nounInfo("orphanage")
nouns['orrisroot']=nounInfo("orrisroot")
adjectives['orthodox']=adjInfo("orthodox")
nouns['orthodoxy']=nounInfo("orthodoxy")
adjectives['orthographic']=adjInfo("orthographic")
nouns['orthography']=nounInfo("orthography")
adjectives['orthopaedic']=adjInfo("orthopaedic")
nouns['orthopaedics']=nounInfo("orthopaedics")
adjectives['orthopedic']=adjInfo("orthopedic")
nouns['orthopedics']=nounInfo("orthopedics")
nouns['ortolan']=nounInfo("ortolan")
nouns['oryx']=nounInfo("oryx")
nouns['oscillation']=nounInfo("oscillation")
nouns['oscillator']=nounInfo("oscillator")
nouns['oscillograph']=nounInfo("oscillograph")
nouns['oscilloscope']=nounInfo("oscilloscope")
nouns['osier']=nounInfo("osier")
nouns['osprey']=nounInfo("osprey")
adjectives['osseous']=adjInfo("osseous")
nouns['ossification']=nounInfo("ossification")
adjectives['ostensible']=adjInfo("ostensible")
adverbs['ostensibly']="ostensibly"
nouns['ostentation']=nounInfo("ostentation")
adjectives['ostentatious']=adjInfo("ostentatious")
adverbs['ostentatiously']="ostentatiously"
nouns['osteopath']=nounInfo("osteopath")
nouns['osteopathy']=nounInfo("osteopathy")
nouns['ostler']=nounInfo("ostler")
nouns['ostracism']=nounInfo("ostracism")
nouns['ostrich']=nounInfo("ostrich")
adverbs['otherwise']="otherwise"
adjectives['otherworldly']=adjInfo("otherworldly")
adjectives['otiose']=adjInfo("otiose")
nouns['otter']=nounInfo("otter")
nouns['ottoman']=nounInfo("ottoman")
nouns['oubliette']=nounInfo("oubliette")
nouns['ouch']=nounInfo("ouch")
nouns['ouija']=nounInfo("ouija")
nouns['ounce']=nounInfo("ounce")
adjectives['out']=adjInfo("out")
adverbs['out']="out"
prepositions['out']=P("out")
adjectives['outback']=adjInfo("outback")
nouns['outback']=nounInfo("outback")
adjectives['outboard']=adjInfo("outboard")
adjectives['outbound']=adjInfo("outbound")
nouns['outbreak']=nounInfo("outbreak")
nouns['outbuilding']=nounInfo("outbuilding")
nouns['outburst']=nounInfo("outburst")
adjectives['outcast']=adjInfo("outcast")
nouns['outcast']=nounInfo("outcast")
adjectives['outcaste']=adjInfo("outcaste")
nouns['outcaste']=nounInfo("outcaste")
nouns['outcome']=nounInfo("outcome")
nouns['outcrop']=nounInfo("outcrop")
nouns['outcry']=nounInfo("outcry")
adjectives['outdated']=adjInfo("outdated")
adjectives['outdoor']=adjInfo("outdoor")
adverbs['outdoors']="outdoors"
adjectives['outer']=adjInfo("outer")
adjectives['outermost']=adjInfo("outermost")
nouns['outfall']=nounInfo("outfall")
nouns['outfield']=nounInfo("outfield")
nouns['outfielder']=nounInfo("outfielder")
nouns['outfit']=nounInfo("outfit")
nouns['outfitter']=nounInfo("outfitter")
nouns['outflow']=nounInfo("outflow")
nouns['outgo']=nounInfo("outgo")
adjectives['outgoing']=adjInfo("outgoing")
nouns['outgoings']=nounInfo("outgoings")
nouns['outgrowth']=nounInfo("outgrowth")
nouns['outhouse']=nounInfo("outhouse")
nouns['outing']=nounInfo("outing")
adjectives['outlandish']=adjInfo("outlandish")
adverbs['outlandishly']="outlandishly"
nouns['outlandishness']=nounInfo("outlandishness")
nouns['outlaw']=nounInfo("outlaw")
nouns['outlawry']=nounInfo("outlawry")
nouns['outlay']=nounInfo("outlay")
nouns['outlet']=nounInfo("outlet")
nouns['outline']=nounInfo("outline")
nouns['outlook']=nounInfo("outlook")
adjectives['outlying']=adjInfo("outlying")
adjectives['outmoded']=adjInfo("outmoded")
adjectives['outmost']=adjInfo("outmost")
nouns['outpatient']=nounInfo("outpatient")
nouns['outport']=nounInfo("outport")
nouns['outpost']=nounInfo("outpost")
nouns['outpouring']=nounInfo("outpouring")
nouns['output']=nounInfo("output")
nouns['outrage']=nounInfo("outrage")
adjectives['outrageous']=adjInfo("outrageous")
adverbs['outrageously']="outrageously"
nouns['outrider']=nounInfo("outrider")
adjectives['outrigged']=adjInfo("outrigged")
nouns['outrigger']=nounInfo("outrigger")
adjectives['outright']=adjInfo("outright")
adverbs['outright']="outright"
nouns['outset']=nounInfo("outset")
adjectives['outside']=adjInfo("outside")
adverbs['outside']="outside"
nouns['outside']=nounInfo("outside")
prepositions['outside']=P("outside")
nouns['outsider']=nounInfo("outsider")
adjectives['outsize']=adjInfo("outsize")
nouns['outskirts']=nounInfo("outskirts")
adjectives['outspoken']=adjInfo("outspoken")
adverbs['outspokenly']="outspokenly"
nouns['outspokenness']=nounInfo("outspokenness")
adjectives['outspread']=adjInfo("outspread")
adjectives['outstanding']=adjInfo("outstanding")
adverbs['outstandingly']="outstandingly"
nouns['outstation']=nounInfo("outstation")
adjectives['outstretched']=adjInfo("outstretched")
adjectives['outward']=adjInfo("outward")
adverbs['outward']="outward"
adverbs['outwardly']="outwardly"
adverbs['outwards']="outwards"
nouns['outwork']=nounInfo("outwork")
nouns['ouzel']=nounInfo("ouzel")
nouns['ouzo']=nounInfo("ouzo")
adjectives['oval']=adjInfo("oval")
nouns['oval']=nounInfo("oval")
nouns['ovary']=nounInfo("ovary")
nouns['ovation']=nounInfo("ovation")
nouns['oven']=nounInfo("oven")
nouns['ovenware']=nounInfo("ovenware")
adverbs['over']="over"
nouns['over']=nounInfo("over")
prepositions['over']=P("over")
adjectives['overall']=adjInfo("overall")
nouns['overall']=nounInfo("overall")
adjectives['overarm']=adjInfo("overarm")
adverbs['overarm']="overarm"
adjectives['overbearing']=adjInfo("overbearing")
adverbs['overbearingly']="overbearingly"
nouns['overbid']=nounInfo("overbid")
adjectives['overblown']=adjInfo("overblown")
adverbs['overboard']="overboard"
nouns['overburden']=nounInfo("overburden")
nouns['overcapitalization']=nounInfo("overcapitalization")
adjectives['overcast']=adjInfo("overcast")
nouns['overcast']=nounInfo("overcast")
nouns['overcharge']=nounInfo("overcharge")
nouns['overcoat']=nounInfo("overcoat")
nouns['overdraft']=nounInfo("overdraft")
nouns['overdrive']=nounInfo("overdrive")
adjectives['overdue']=adjInfo("overdue")
nouns['overflow']=nounInfo("overflow")
adjectives['overgrown']=adjInfo("overgrown")
nouns['overgrowth']=nounInfo("overgrowth")
adjectives['overhand']=adjInfo("overhand")
nouns['overhang']=nounInfo("overhang")
nouns['overhaul']=nounInfo("overhaul")
adjectives['overhead']=adjInfo("overhead")
adverbs['overhead']="overhead"
nouns['overheads']=nounInfo("overheads")
adjectives['overjoyed']=adjInfo("overjoyed")
nouns['overkill']=nounInfo("overkill")
adjectives['overland']=adjInfo("overland")
nouns['overlap']=nounInfo("overlap")
nouns['overlay']=nounInfo("overlay")
adverbs['overleaf']="overleaf"
nouns['overlord']=nounInfo("overlord")
adverbs['overly']="overly"
nouns['overmantel']=nounInfo("overmantel")
adjectives['overmuch']=adjInfo("overmuch")
adverbs['overmuch']="overmuch"
adjectives['overnight']=adjInfo("overnight")
adverbs['overnight']="overnight"
nouns['overpass']=nounInfo("overpass")
nouns['overplus']=nounInfo("overplus")
adjectives['overpowering']=adjInfo("overpowering")
nouns['overprint']=nounInfo("overprint")
adjectives['oversea']=adjInfo("oversea")
adverbs['oversea']="oversea"
adjectives['overseas']=adjInfo("overseas")
adverbs['overseas']="overseas"
nouns['overseer']=nounInfo("overseer")
adjectives['oversexed']=adjInfo("oversexed")
nouns['overshoe']=nounInfo("overshoe")
adjectives['overshot']=adjInfo("overshot")
adverbs['overside']="overside"
nouns['oversight']=nounInfo("oversight")
nouns['overskirt']=nounInfo("overskirt")
nouns['overspill']=nounInfo("overspill")
nouns['overstatement']=nounInfo("overstatement")
adjectives['overstrung']=adjInfo("overstrung")
adjectives['overstuffed']=adjInfo("overstuffed")
adjectives['oversubscribed']=adjInfo("oversubscribed")
adjectives['overt']=adjInfo("overt")
nouns['overthrow']=nounInfo("overthrow")
adverbs['overtime']="overtime"
nouns['overtime']=nounInfo("overtime")
adverbs['overtly']="overtly"
nouns['overtone']=nounInfo("overtone")
nouns['overture']=nounInfo("overture")
nouns['overview']=nounInfo("overview")
adjectives['overweening']=adjInfo("overweening")
adjectives['overweight']=adjInfo("overweight")
nouns['overweight']=nounInfo("overweight")
adjectives['overweighted']=adjInfo("overweighted")
adverbs['overwhelmingly']="overwhelmingly"
nouns['overwork']=nounInfo("overwork")
adjectives['overwrought']=adjInfo("overwrought")
nouns['oviduct']=nounInfo("oviduct")
adjectives['oviparous']=adjInfo("oviparous")
adjectives['ovoid']=adjInfo("ovoid")
nouns['ovoid']=nounInfo("ovoid")
nouns['ovum']=nounInfo("ovum")
adjectives['owing']=adjInfo("owing")
nouns['owl']=nounInfo("owl")
nouns['owlet']=nounInfo("owlet")
adjectives['owlish']=adjInfo("owlish")
adverbs['owlishly']="owlishly"
nouns['owner']=nounInfo("owner").addAttributes({"g":"x"})
adjectives['ownerless']=adjInfo("ownerless")
nouns['ownership']=nounInfo("ownership")
nouns['ox']=nounInfo("ox")
nouns['oxide']=nounInfo("oxide")
nouns['oxidization']=nounInfo("oxidization")
adjectives['oxyacetylene']=adjInfo("oxyacetylene")
nouns['oxyacetylene']=nounInfo("oxyacetylene")
nouns['oxygen']=nounInfo("oxygen")
nouns['oyes']=nounInfo("oyes")
nouns['oyez']=nounInfo("oyez")
nouns['oyster']=nounInfo("oyster")
nouns['ozone']=nounInfo("ozone")
nouns['pa']=nounInfo("pa")
nouns['pabulum']=nounInfo("pabulum")
nouns['pace']=nounInfo("pace")
nouns['pachyderm']=nounInfo("pachyderm")
adjectives['pacific']=adjInfo("pacific")
adverbs['pacifically']="pacifically"
nouns['pacification']=nounInfo("pacification")
nouns['pacifism']=nounInfo("pacifism")
nouns['pacifist']=nounInfo("pacifist")
nouns['pack']=nounInfo("pack")
nouns['package']=nounInfo("package")
nouns['packer']=nounInfo("packer")
nouns['packet']=nounInfo("packet")
nouns['packhorse']=nounInfo("packhorse")
nouns['packing']=nounInfo("packing")
nouns['pact']=nounInfo("pact")
nouns['pad']=nounInfo("pad")
nouns['padding']=nounInfo("padding")
nouns['paddle']=nounInfo("paddle")
nouns['paddock']=nounInfo("paddock")
nouns['paddy']=nounInfo("paddy")
nouns['padlock']=nounInfo("padlock")
nouns['padre']=nounInfo("padre")
nouns['paean']=nounInfo("paean")
nouns['paederasty']=nounInfo("paederasty")
nouns['paediatrics']=nounInfo("paediatrics")
nouns['paeony']=nounInfo("paeony")
adjectives['pagan']=adjInfo("pagan")
nouns['pagan']=nounInfo("pagan")
nouns['paganism']=nounInfo("paganism")
nouns['page']=nounInfo("page")
nouns['pageant']=nounInfo("pageant")
nouns['pageantry']=nounInfo("pageantry")
nouns['pagination']=nounInfo("pagination")
nouns['pagoda']=nounInfo("pagoda")
nouns['pah']=nounInfo("pah")
nouns['pail']=nounInfo("pail")
nouns['pailful']=nounInfo("pailful")
nouns['paillasse']=nounInfo("paillasse")
nouns['pailliasse']=nounInfo("pailliasse")
nouns['pain']=nounInfo("pain")
adjectives['pained']=adjInfo("pained")
adjectives['painful']=adjInfo("painful")
adverbs['painfully']="painfully"
adjectives['painless']=adjInfo("painless")
adverbs['painlessly']="painlessly"
adjectives['painstaking']=adjInfo("painstaking")
nouns['paint']=nounInfo("paint")
nouns['paintbox']=nounInfo("paintbox")
nouns['painter']=nounInfo("painter")
nouns['painting']=nounInfo("painting")
nouns['pair']=nounInfo("pair")
nouns['paisley']=nounInfo("paisley")
nouns['pajamas']=nounInfo("pajamas")
nouns['pal']=nounInfo("pal")
nouns['palace']=nounInfo("palace")
nouns['paladin']=nounInfo("paladin")
adjectives['palaeolithic']=adjInfo("palaeolithic")
nouns['palaeontologist']=nounInfo("palaeontologist")
nouns['palaeontology']=nounInfo("palaeontology")
nouns['palankeen']=nounInfo("palankeen")
nouns['palanquin']=nounInfo("palanquin")
adjectives['palatable']=adjInfo("palatable")
adjectives['palatal']=adjInfo("palatal")
nouns['palatal']=nounInfo("palatal")
nouns['palate']=nounInfo("palate")
adjectives['palatial']=adjInfo("palatial")
nouns['palatinate']=nounInfo("palatinate")
nouns['palaver']=nounInfo("palaver")
adjectives['pale']=adjInfo("pale")
nouns['pale']=nounInfo("pale")
adverbs['palely']="palely"
nouns['paleness']=nounInfo("paleness")
adjectives['paleolithic']=adjInfo("paleolithic")
nouns['paleontologist']=nounInfo("paleontologist")
nouns['paleontology']=nounInfo("paleontology")
nouns['palette']=nounInfo("palette")
nouns['palfrey']=nounInfo("palfrey")
nouns['palimpsest']=nounInfo("palimpsest")
nouns['palindrome']=nounInfo("palindrome")
nouns['paling']=nounInfo("paling")
nouns['palisade']=nounInfo("palisade")
adjectives['palish']=adjInfo("palish")
nouns['pall']=nounInfo("pall")
nouns['pallet']=nounInfo("pallet")
nouns['palliasse']=nounInfo("palliasse")
nouns['palliation']=nounInfo("palliation")
adjectives['palliative']=adjInfo("palliative")
nouns['palliative']=nounInfo("palliative")
adjectives['pallid']=adjInfo("pallid")
adverbs['pallidly']="pallidly"
nouns['pallidness']=nounInfo("pallidness")
nouns['pallor']=nounInfo("pallor")
adjectives['pally']=adjInfo("pally")
nouns['palm']=nounInfo("palm")
nouns['palmer']=nounInfo("palmer")
nouns['palmetto']=nounInfo("palmetto")
nouns['palmist']=nounInfo("palmist")
nouns['palmistry']=nounInfo("palmistry")
adjectives['palmy']=adjInfo("palmy")
adjectives['palpable']=adjInfo("palpable")
adverbs['palpably']="palpably"
nouns['palpitation']=nounInfo("palpitation")
nouns['palsy']=nounInfo("palsy")
adjectives['paltry']=adjInfo("paltry")
nouns['pampas']=nounInfo("pampas")
nouns['pamphlet']=nounInfo("pamphlet")
nouns['pamphleteer']=nounInfo("pamphleteer")
nouns['pan']=nounInfo("pan")
nouns['panacea']=nounInfo("panacea")
nouns['panache']=nounInfo("panache")
nouns['panama']=nounInfo("panama")
nouns['panatella']=nounInfo("panatella")
nouns['pancake']=nounInfo("pancake")
adjectives['panchromatic']=adjInfo("panchromatic")
nouns['pancreas']=nounInfo("pancreas")
adjectives['pancreatic']=adjInfo("pancreatic")
nouns['panda']=nounInfo("panda")
adjectives['pandemic']=adjInfo("pandemic")
nouns['pandemic']=nounInfo("pandemic")
nouns['pandemonium']=nounInfo("pandemonium")
nouns['pander']=nounInfo("pander")
nouns['pane']=nounInfo("pane")
nouns['panegyric']=nounInfo("panegyric")
nouns['panel']=nounInfo("panel")
nouns['panelling']=nounInfo("panelling")
nouns['pang']=nounInfo("pang")
nouns['panga']=nounInfo("panga")
nouns['panhandle']=nounInfo("panhandle")
nouns['panic']=nounInfo("panic")
adjectives['panicky']=adjInfo("panicky")
nouns['panjandrum']=nounInfo("panjandrum")
nouns['pannier']=nounInfo("pannier")
nouns['pannikin']=nounInfo("pannikin")
adjectives['panoplied']=adjInfo("panoplied")
nouns['panoply']=nounInfo("panoply")
adjectives['panoptic']=adjInfo("panoptic")
nouns['panorama']=nounInfo("panorama")
adjectives['panoramic']=adjInfo("panoramic")
nouns['pansy']=nounInfo("pansy")
nouns['pant']=nounInfo("pant")
nouns['pantaloon']=nounInfo("pantaloon")
nouns['pantechnicon']=nounInfo("pantechnicon")
nouns['pantheism']=nounInfo("pantheism")
nouns['pantheist']=nounInfo("pantheist")
adjectives['pantheistic']=adjInfo("pantheistic")
nouns['pantheon']=nounInfo("pantheon")
nouns['panther']=nounInfo("panther")
nouns['panties']=nounInfo("panties")
nouns['pantile']=nounInfo("pantile")
adverbs['pantingly']="pantingly"
nouns['panto']=nounInfo("panto")
nouns['pantograph']=nounInfo("pantograph")
nouns['pantomime']=nounInfo("pantomime")
nouns['pantry']=nounInfo("pantry")
nouns['pantryman']=nounInfo("pantryman")
nouns['pants']=nounInfo("pants")
adjectives['panzer']=adjInfo("panzer")
nouns['pap']=nounInfo("pap")
nouns['papa']=nounInfo("papa").addAttributes({"g":"m"})
nouns['papacy']=nounInfo("papacy")
adjectives['papal']=adjInfo("papal")
nouns['papaw']=nounInfo("papaw")
nouns['papaya']=nounInfo("papaya")
nouns['paper']=nounInfo("paper")
nouns['paperback']=nounInfo("paperback")
adjectives['paperbacked']=adjInfo("paperbacked")
adjectives['papist']=adjInfo("papist")
nouns['papist']=nounInfo("papist")
nouns['papoose']=nounInfo("papoose")
nouns['paprika']=nounInfo("paprika")
nouns['papyrus']=nounInfo("papyrus")
nouns['par']=nounInfo("par")
nouns['parable']=nounInfo("parable")
nouns['parabola']=nounInfo("parabola")
adjectives['parabolic']=adjInfo("parabolic")
adjectives['parabolical']=adjInfo("parabolical")
nouns['parachute']=nounInfo("parachute")
nouns['parachutist']=nounInfo("parachutist")
nouns['parade']=nounInfo("parade")
nouns['paradigm']=nounInfo("paradigm")
nouns['paradise']=nounInfo("paradise")
adjectives['paradisiac']=adjInfo("paradisiac")
adjectives['paradisiacal']=adjInfo("paradisiacal")
nouns['paradox']=nounInfo("paradox")
adjectives['paradoxical']=adjInfo("paradoxical")
adverbs['paradoxically']="paradoxically"
nouns['paraffin']=nounInfo("paraffin")
nouns['paragon']=nounInfo("paragon")
nouns['paragraph']=nounInfo("paragraph")
nouns['parakeet']=nounInfo("parakeet")
adjectives['parallel']=adjInfo("parallel")
nouns['parallel']=nounInfo("parallel")
nouns['parallelism']=nounInfo("parallelism")
nouns['parallelogram']=nounInfo("parallelogram")
nouns['paralysis']=nounInfo("paralysis")
adjectives['paralytic']=adjInfo("paralytic")
nouns['paralytic']=nounInfo("paralytic")
nouns['parameter']=nounInfo("parameter")
adjectives['paramilitary']=adjInfo("paramilitary")
adjectives['paramount']=adjInfo("paramount")
nouns['paramountcy']=nounInfo("paramountcy")
nouns['paramour']=nounInfo("paramour")
nouns['paranoia']=nounInfo("paranoia")
nouns['paranoiac']=nounInfo("paranoiac")
adjectives['paranoid']=adjInfo("paranoid")
nouns['paranoid']=nounInfo("paranoid")
nouns['parapet']=nounInfo("parapet")
nouns['paraphernalia']=nounInfo("paraphernalia")
nouns['paraplegia']=nounInfo("paraplegia")
adjectives['paraplegic']=adjInfo("paraplegic")
nouns['paraplegic']=nounInfo("paraplegic")
nouns['parasite']=nounInfo("parasite")
adjectives['parasitic']=adjInfo("parasitic")
adjectives['parasitical']=adjInfo("parasitical")
nouns['parasol']=nounInfo("parasol")
nouns['paratrooper']=nounInfo("paratrooper")
nouns['paratroops']=nounInfo("paratroops")
nouns['paratyphoid']=nounInfo("paratyphoid")
nouns['parcel']=nounInfo("parcel")
nouns['parchment']=nounInfo("parchment")
nouns['pardon']=nounInfo("pardon")
adjectives['pardonable']=adjInfo("pardonable")
adverbs['pardonably']="pardonably"
nouns['pardoner']=nounInfo("pardoner")
nouns['paregoric']=nounInfo("paregoric")
nouns['parent']=nounInfo("parent").addAttributes({"g":"x"})
nouns['parentage']=nounInfo("parentage")
adjectives['parental']=adjInfo("parental")
adverbs['parentally']="parentally"
nouns['parenthesis']=nounInfo("parenthesis")
adjectives['parenthetic']=adjInfo("parenthetic")
adjectives['parenthetical']=adjInfo("parenthetical")
adverbs['parenthetically']="parenthetically"
nouns['parenting']=nounInfo("parenting")
nouns['pariah']=nounInfo("pariah")
nouns['parings']=nounInfo("parings")
nouns['parish']=nounInfo("parish")
nouns['parishioner']=nounInfo("parishioner")
nouns['parity']=nounInfo("parity")
nouns['park']=nounInfo("park")
nouns['parka']=nounInfo("parka")
nouns['parking']=nounInfo("parking")
adjectives['parky']=adjInfo("parky")
nouns['parlance']=nounInfo("parlance")
nouns['parley']=nounInfo("parley")
nouns['parliament']=nounInfo("parliament")
nouns['parliamentarian']=nounInfo("parliamentarian")
adjectives['parliamentary']=adjInfo("parliamentary")
nouns['parlour']=nounInfo("parlour")
adjectives['parlous']=adjInfo("parlous")
adjectives['parochial']=adjInfo("parochial")
nouns['parochialism']=nounInfo("parochialism")
adverbs['parochially']="parochially"
nouns['parodist']=nounInfo("parodist")
nouns['parody']=nounInfo("parody")
nouns['parole']=nounInfo("parole")
nouns['paroquet']=nounInfo("paroquet")
nouns['paroxysm']=nounInfo("paroxysm")
nouns['parquet']=nounInfo("parquet")
nouns['parr']=nounInfo("parr")
nouns['parricide']=nounInfo("parricide")
nouns['parrot']=nounInfo("parrot")
nouns['parry']=nounInfo("parry")
adjectives['parsimonious']=adjInfo("parsimonious")
nouns['parsimony']=nounInfo("parsimony")
nouns['parsley']=nounInfo("parsley")
nouns['parsnip']=nounInfo("parsnip")
nouns['parson']=nounInfo("parson")
nouns['parsonage']=nounInfo("parsonage")
adverbs['part']="part"
nouns['part']=nounInfo("part")
nouns['parterre']=nounInfo("parterre")
nouns['parthenogenesis']=nounInfo("parthenogenesis")
adjectives['partial']=adjInfo("partial")
nouns['partiality']=nounInfo("partiality")
adverbs['partially']="partially"
nouns['participant']=nounInfo("participant")
nouns['participation']=nounInfo("participation")
adjectives['participial']=adjInfo("participial")
nouns['participle']=nounInfo("participle")
nouns['particle']=nounInfo("particle")
adjectives['particular']=adjInfo("particular")
nouns['particular']=nounInfo("particular")
nouns['particularity']=nounInfo("particularity")
adverbs['particularly']="particularly"
nouns['parting']=nounInfo("parting")
adjectives['partisan']=adjInfo("partisan")
nouns['partisan']=nounInfo("partisan")
nouns['partisanship']=nounInfo("partisanship")
nouns['partition']=nounInfo("partition")
adjectives['partitive']=adjInfo("partitive")
nouns['partitive']=nounInfo("partitive")
adverbs['partly']="partly"
nouns['partner']=nounInfo("partner")
nouns['partnership']=nounInfo("partnership")
nouns['partridge']=nounInfo("partridge")
nouns['parturition']=nounInfo("parturition")
nouns['party']=nounInfo("party")
nouns['parvenu']=nounInfo("parvenu")
adjectives['paschal']=adjInfo("paschal")
nouns['pasha']=nounInfo("pasha")
nouns['pass']=nounInfo("pass")
adjectives['passable']=adjInfo("passable")
adverbs['passably']="passably"
nouns['passage']=nounInfo("passage")
nouns['passageway']=nounInfo("passageway")
nouns['passbook']=nounInfo("passbook")
nouns['passenger']=nounInfo("passenger").addAttributes({"g":"x"})
nouns['passepartout']=nounInfo("passepartout")
adverbs['passim']="passim"
adjectives['passing']=adjInfo("passing")
adverbs['passing']="passing"
nouns['passing']=nounInfo("passing")
nouns['passion']=nounInfo("passion")
adjectives['passionate']=adjInfo("passionate")
adverbs['passionately']="passionately"
adjectives['passionless']=adjInfo("passionless")
adjectives['passive']=adjInfo("passive")
nouns['passive']=nounInfo("passive")
adverbs['passively']="passively"
nouns['passiveness']=nounInfo("passiveness")
nouns['passivity']=nounInfo("passivity")
nouns['passkey']=nounInfo("passkey")
nouns['passport']=nounInfo("passport")
nouns['password']=nounInfo("password")
adjectives['past']=adjInfo("past")
adverbs['past']="past"
nouns['past']=nounInfo("past")
prepositions['past']=P("past")
nouns['pasta']=nounInfo("pasta")
nouns['paste']=nounInfo("paste")
nouns['pasteboard']=nounInfo("pasteboard")
nouns['pastel']=nounInfo("pastel")
nouns['pastern']=nounInfo("pastern")
nouns['pasteurization']=nounInfo("pasteurization")
nouns['pastiche']=nounInfo("pastiche")
nouns['pastille']=nounInfo("pastille")
nouns['pastime']=nounInfo("pastime")
nouns['pasting']=nounInfo("pasting")
nouns['pastor']=nounInfo("pastor")
adjectives['pastoral']=adjInfo("pastoral")
nouns['pastoral']=nounInfo("pastoral")
nouns['pastorate']=nounInfo("pastorate")
nouns['pastry']=nounInfo("pastry")
nouns['pasturage']=nounInfo("pasturage")
nouns['pasture']=nounInfo("pasture")
adjectives['pasty']=adjInfo("pasty")
nouns['pasty']=nounInfo("pasty")
adverbs['pat']="pat"
nouns['pat']=nounInfo("pat")
nouns['patch']=nounInfo("patch")
adverbs['patchily']="patchily"
nouns['patchiness']=nounInfo("patchiness")
nouns['patchouli']=nounInfo("patchouli")
nouns['patchwork']=nounInfo("patchwork")
adjectives['patchy']=adjInfo("patchy")
nouns['pate']=nounInfo("pate")
nouns['patella']=nounInfo("patella")
adjectives['patent']=adjInfo("patent")
nouns['patent']=nounInfo("patent")
nouns['patentee']=nounInfo("patentee")
adverbs['patently']="patently"
nouns['paterfamilias']=nounInfo("paterfamilias")
adjectives['paternal']=adjInfo("paternal")
nouns['paternalism']=nounInfo("paternalism")
adverbs['paternally']="paternally"
nouns['paternity']=nounInfo("paternity")
nouns['paternoster']=nounInfo("paternoster")
nouns['path']=nounInfo("path")
adjectives['pathetic']=adjInfo("pathetic")
adverbs['pathetically']="pathetically"
adjectives['pathless']=adjInfo("pathless")
adjectives['pathological']=adjInfo("pathological")
adverbs['pathologically']="pathologically"
nouns['pathologist']=nounInfo("pathologist")
nouns['pathology']=nounInfo("pathology")
nouns['pathos']=nounInfo("pathos")
nouns['pathway']=nounInfo("pathway")
nouns['patience']=nounInfo("patience")
adjectives['patient']=adjInfo("patient")
nouns['patient']=nounInfo("patient")
adverbs['patiently']="patiently"
nouns['patina']=nounInfo("patina")
nouns['patio']=nounInfo("patio")
nouns['patisserie']=nounInfo("patisserie")
nouns['patois']=nounInfo("patois")
nouns['patrial']=nounInfo("patrial")
nouns['patriarch']=nounInfo("patriarch")
adjectives['patriarchal']=adjInfo("patriarchal")
nouns['patriarchate']=nounInfo("patriarchate")
adjectives['patrician']=adjInfo("patrician")
nouns['patrician']=nounInfo("patrician")
nouns['patricide']=nounInfo("patricide")
adjectives['patrimonial']=adjInfo("patrimonial")
nouns['patrimony']=nounInfo("patrimony")
nouns['patriot']=nounInfo("patriot")
adjectives['patriotic']=adjInfo("patriotic")
adverbs['patriotically']="patriotically"
nouns['patriotism']=nounInfo("patriotism")
nouns['patrol']=nounInfo("patrol")
nouns['patrolman']=nounInfo("patrolman")
nouns['patron']=nounInfo("patron")
nouns['patronage']=nounInfo("patronage")
nouns['patroness']=nounInfo("patroness")
adjectives['patronizing']=adjInfo("patronizing")
adverbs['patronizingly']="patronizingly"
adjectives['patronymic']=adjInfo("patronymic")
nouns['patronymic']=nounInfo("patronymic")
nouns['patten']=nounInfo("patten")
nouns['patter']=nounInfo("patter")
nouns['pattern']=nounInfo("pattern")
nouns['patty']=nounInfo("patty")
nouns['paucity']=nounInfo("paucity")
nouns['paunch']=nounInfo("paunch")
nouns['paunchiness']=nounInfo("paunchiness")
adjectives['paunchy']=adjInfo("paunchy")
nouns['pauper']=nounInfo("pauper")
nouns['pauperism']=nounInfo("pauperism")
nouns['pauperization']=nounInfo("pauperization")
nouns['pause']=nounInfo("pause")
nouns['pavement']=nounInfo("pavement")
nouns['pavilion']=nounInfo("pavilion")
nouns['paw']=nounInfo("paw")
adverbs['pawkily']="pawkily"
adjectives['pawky']=adjInfo("pawky")
nouns['pawl']=nounInfo("pawl")
nouns['pawn']=nounInfo("pawn")
nouns['pawnbroker']=nounInfo("pawnbroker")
nouns['pawnshop']=nounInfo("pawnshop")
nouns['pawpaw']=nounInfo("pawpaw")
nouns['pax']=nounInfo("pax")
nouns['pay']=nounInfo("pay")
adjectives['payable']=adjInfo("payable")
nouns['paycheck']=nounInfo("paycheck")
nouns['payee']=nounInfo("payee")
nouns['payer']=nounInfo("payer")
nouns['payload']=nounInfo("payload")
nouns['paymaster']=nounInfo("paymaster")
nouns['payment']=nounInfo("payment")
nouns['paynim']=nounInfo("paynim")
nouns['pea']=nounInfo("pea")
nouns['peace']=nounInfo("peace")
adjectives['peaceable']=adjInfo("peaceable")
adverbs['peaceably']="peaceably"
adjectives['peaceful']=adjInfo("peaceful")
adverbs['peacefully']="peacefully"
nouns['peacefulness']=nounInfo("peacefulness")
nouns['peacemaker']=nounInfo("peacemaker")
nouns['peach']=nounInfo("peach")
nouns['peacock']=nounInfo("peacock")
nouns['peak']=nounInfo("peak")
adjectives['peaked']=adjInfo("peaked")
adjectives['peaky']=adjInfo("peaky")
nouns['peal']=nounInfo("peal")
nouns['peanut']=nounInfo("peanut")
nouns['pear']=nounInfo("pear")
nouns['pearl']=nounInfo("pearl")
adjectives['pearly']=adjInfo("pearly")
nouns['pearmain']=nounInfo("pearmain")
nouns['peasant']=nounInfo("peasant")
nouns['peasantry']=nounInfo("peasantry")
nouns['pease']=nounInfo("pease")
nouns['peat']=nounInfo("peat")
adjectives['peaty']=adjInfo("peaty")
nouns['pebble']=nounInfo("pebble")
adjectives['pebbly']=adjInfo("pebbly")
nouns['pecan']=nounInfo("pecan")
adjectives['peccable']=adjInfo("peccable")
nouns['peccadillo']=nounInfo("peccadillo")
nouns['peccary']=nounInfo("peccary")
nouns['peck']=nounInfo("peck")
nouns['pecker']=nounInfo("pecker")
adjectives['peckish']=adjInfo("peckish")
adjectives['pectic']=adjInfo("pectic")
nouns['pectin']=nounInfo("pectin")
adjectives['pectoral']=adjInfo("pectoral")
nouns['peculation']=nounInfo("peculation")
adjectives['peculiar']=adjInfo("peculiar")
nouns['peculiarity']=nounInfo("peculiarity")
adverbs['peculiarly']="peculiarly"
adjectives['pecuniary']=adjInfo("pecuniary")
adjectives['pedagogic']=adjInfo("pedagogic")
adjectives['pedagogical']=adjInfo("pedagogical")
nouns['pedagogue']=nounInfo("pedagogue")
nouns['pedagogy']=nounInfo("pedagogy")
adjectives['pedal']=adjInfo("pedal")
nouns['pedal']=nounInfo("pedal")
nouns['pedant']=nounInfo("pedant")
adjectives['pedantic']=adjInfo("pedantic")
adverbs['pedantically']="pedantically"
nouns['pedantry']=nounInfo("pedantry")
nouns['peddler']=nounInfo("peddler")
adjectives['peddling']=adjInfo("peddling")
nouns['pederast']=nounInfo("pederast")
nouns['pederasty']=nounInfo("pederasty")
nouns['pedestal']=nounInfo("pedestal")
adjectives['pedestrian']=adjInfo("pedestrian")
nouns['pedestrian']=nounInfo("pedestrian").addAttributes({"g":"x"})
nouns['pediatrician']=nounInfo("pediatrician")
nouns['pediatrics']=nounInfo("pediatrics")
nouns['pedicab']=nounInfo("pedicab")
nouns['pedicure']=nounInfo("pedicure")
nouns['pedigree']=nounInfo("pedigree")
nouns['pediment']=nounInfo("pediment")
nouns['pedlar']=nounInfo("pedlar")
nouns['pedometer']=nounInfo("pedometer")
nouns['pee']=nounInfo("pee")
nouns['peek']=nounInfo("peek")
nouns['peel']=nounInfo("peel")
nouns['peeler']=nounInfo("peeler")
nouns['peelings']=nounInfo("peelings")
nouns['peep']=nounInfo("peep")
nouns['peeper']=nounInfo("peeper")
nouns['peepul']=nounInfo("peepul")
nouns['peer']=nounInfo("peer")
nouns['peerage']=nounInfo("peerage")
nouns['peeress']=nounInfo("peeress")
adjectives['peerless']=adjInfo("peerless")
adjectives['peeved']=adjInfo("peeved")
adjectives['peevish']=adjInfo("peevish")
adverbs['peevishly']="peevishly"
nouns['peevishness']=nounInfo("peevishness")
nouns['peewit']=nounInfo("peewit")
nouns['peg']=nounInfo("peg")
nouns['peignoir']=nounInfo("peignoir")
adjectives['pejorative']=adjInfo("pejorative")
adverbs['pejoratively']="pejoratively"
nouns['peke']=nounInfo("peke")
nouns['pekinese']=nounInfo("pekinese")
nouns['pekoe']=nounInfo("pekoe")
nouns['pelf']=nounInfo("pelf")
nouns['pelican']=nounInfo("pelican")
nouns['pelisse']=nounInfo("pelisse")
nouns['pellet']=nounInfo("pellet")
adjectives['pellucid']=adjInfo("pellucid")
adverbs['pellucidly']="pellucidly"
nouns['pelmet']=nounInfo("pelmet")
nouns['pelota']=nounInfo("pelota")
nouns['pelt']=nounInfo("pelt")
adjectives['pelvic']=adjInfo("pelvic")
nouns['pelvis']=nounInfo("pelvis")
nouns['pemmican']=nounInfo("pemmican")
nouns['pen']=nounInfo("pen")
adjectives['penal']=adjInfo("penal")
nouns['penalization']=nounInfo("penalization")
adverbs['penally']="penally"
nouns['penalty']=nounInfo("penalty")
nouns['penance']=nounInfo("penance")
nouns['penchant']=nounInfo("penchant")
nouns['pencil']=nounInfo("pencil")
nouns['pendant']=nounInfo("pendant")
adjectives['pendent']=adjInfo("pendent")
adjectives['pending']=adjInfo("pending")
prepositions['pending']=P("pending")
adjectives['pendulous']=adjInfo("pendulous")
nouns['pendulum']=nounInfo("pendulum")
nouns['penetrability']=nounInfo("penetrability")
adjectives['penetrable']=adjInfo("penetrable")
adjectives['penetrating']=adjInfo("penetrating")
adverbs['penetratingly']="penetratingly"
nouns['penetration']=nounInfo("penetration")
adjectives['penetrative']=adjInfo("penetrative")
nouns['penguin']=nounInfo("penguin")
nouns['penicillin']=nounInfo("penicillin")
nouns['peninsula']=nounInfo("peninsula")
adjectives['peninsular']=adjInfo("peninsular")
nouns['penis']=nounInfo("penis")
nouns['penitence']=nounInfo("penitence")
adjectives['penitent']=adjInfo("penitent")
adjectives['penitential']=adjInfo("penitential")
adverbs['penitentially']="penitentially"
adjectives['penitentiary']=adjInfo("penitentiary")
nouns['penitentiary']=nounInfo("penitentiary")
adverbs['penitently']="penitently"
nouns['penknife']=nounInfo("penknife")
nouns['penmanship']=nounInfo("penmanship")
nouns['pennant']=nounInfo("pennant")
adjectives['penniless']=adjInfo("penniless")
nouns['pennon']=nounInfo("pennon")
nouns['penny']=nounInfo("penny")
nouns['pennyweight']=nounInfo("pennyweight")
nouns['pennyworth']=nounInfo("pennyworth")
nouns['penology']=nounInfo("penology")
nouns['pension']=nounInfo("pension")
adjectives['pensionable']=adjInfo("pensionable")
nouns['pensioner']=nounInfo("pensioner").addAttributes({"g":"x"})
adjectives['pensive']=adjInfo("pensive")
adverbs['pensively']="pensively"
nouns['pensiveness']=nounInfo("pensiveness")
nouns['penstock']=nounInfo("penstock")
nouns['pentagon']=nounInfo("pentagon")
adjectives['pentagonal']=adjInfo("pentagonal")
nouns['pentameter']=nounInfo("pentameter")
nouns['pentathlon']=nounInfo("pentathlon")
nouns['penthouse']=nounInfo("penthouse")
adjectives['penultimate']=adjInfo("penultimate")
nouns['penultimate']=nounInfo("penultimate")
nouns['penumbra']=nounInfo("penumbra")
adjectives['penurious']=adjInfo("penurious")
adverbs['penuriously']="penuriously"
nouns['penuriousness']=nounInfo("penuriousness")
nouns['penury']=nounInfo("penury")
nouns['peon']=nounInfo("peon")
nouns['peonage']=nounInfo("peonage")
nouns['peony']=nounInfo("peony")
nouns['people']=nounInfo("people")
nouns['pep']=nounInfo("pep")
nouns['pepper']=nounInfo("pepper")
nouns['peppercorn']=nounInfo("peppercorn")
nouns['peppermint']=nounInfo("peppermint")
adjectives['peppery']=adjInfo("peppery")
nouns['pepsin']=nounInfo("pepsin")
adjectives['peptic']=adjInfo("peptic")
prepositions['per']=P("per")
adverbs['peradventure']="peradventure"
nouns['perambulation']=nounInfo("perambulation")
nouns['perambulator']=nounInfo("perambulator")
adjectives['perceivable']=adjInfo("perceivable")
nouns['percentage']=nounInfo("percentage")
nouns['perceptibility']=nounInfo("perceptibility")
adjectives['perceptible']=adjInfo("perceptible")
adverbs['perceptibly']="perceptibly"
nouns['perception']=nounInfo("perception")
adjectives['perceptive']=adjInfo("perceptive")
adverbs['perceptively']="perceptively"
nouns['perch']=nounInfo("perch")
adverbs['perchance']="perchance"
adjectives['percipient']=adjInfo("percipient")
nouns['percolator']=nounInfo("percolator")
nouns['percussion']=nounInfo("percussion")
nouns['percussionist']=nounInfo("percussionist")
nouns['perdition']=nounInfo("perdition")
nouns['peregrination']=nounInfo("peregrination")
adverbs['peremptorily']="peremptorily"
adjectives['peremptory']=adjInfo("peremptory")
adjectives['perennial']=adjInfo("perennial")
nouns['perennial']=nounInfo("perennial")
adverbs['perennially']="perennially"
adjectives['perfect']=adjInfo("perfect")
nouns['perfectibility']=nounInfo("perfectibility")
adjectives['perfectible']=adjInfo("perfectible")
nouns['perfection']=nounInfo("perfection")
nouns['perfectionist']=nounInfo("perfectionist")
adverbs['perfectly']="perfectly"
adjectives['perfervid']=adjInfo("perfervid")
adjectives['perfidious']=adjInfo("perfidious")
adverbs['perfidiously']="perfidiously"
nouns['perfidiousness']=nounInfo("perfidiousness")
nouns['perfidy']=nounInfo("perfidy")
nouns['perforation']=nounInfo("perforation")
adverbs['perforce']="perforce"
nouns['performance']=nounInfo("performance")
nouns['performer']=nounInfo("performer").addAttributes({"g":"x"})
nouns['perfume']=nounInfo("perfume")
nouns['perfumer']=nounInfo("perfumer")
adverbs['perfunctorily']="perfunctorily"
adjectives['perfunctory']=adjInfo("perfunctory")
nouns['pergola']=nounInfo("pergola")
adverbs['perhaps']="perhaps"
nouns['peri']=nounInfo("peri")
nouns['perigee']=nounInfo("perigee")
nouns['perihelion']=nounInfo("perihelion")
nouns['peril']=nounInfo("peril")
adjectives['perilous']=adjInfo("perilous")
adverbs['perilously']="perilously"
nouns['perimeter']=nounInfo("perimeter")
nouns['period']=nounInfo("period")
adjectives['periodic']=adjInfo("periodic")
adjectives['periodical']=adjInfo("periodical")
nouns['periodical']=nounInfo("periodical")
adverbs['periodically']="periodically"
adjectives['peripatetic']=adjInfo("peripatetic")
adjectives['peripheral']=adjInfo("peripheral")
nouns['periphery']=nounInfo("periphery")
nouns['periphrasis']=nounInfo("periphrasis")
adjectives['periphrastic']=adjInfo("periphrastic")
nouns['periscope']=nounInfo("periscope")
adjectives['perishable']=adjInfo("perishable")
nouns['perishables']=nounInfo("perishables")
nouns['perisher']=nounInfo("perisher")
nouns['peristyle']=nounInfo("peristyle")
nouns['peritonitis']=nounInfo("peritonitis")
nouns['periwig']=nounInfo("periwig")
nouns['periwinkle']=nounInfo("periwinkle")
nouns['perjurer']=nounInfo("perjurer")
nouns['perjury']=nounInfo("perjury")
nouns['perk']=nounInfo("perk")
adverbs['perkily']="perkily"
nouns['perkiness']=nounInfo("perkiness")
adjectives['perky']=adjInfo("perky")
nouns['perm']=nounInfo("perm")
nouns['permafrost']=nounInfo("permafrost")
nouns['permanence']=nounInfo("permanence")
nouns['permanency']=nounInfo("permanency")
adjectives['permanent']=adjInfo("permanent")
adverbs['permanently']="permanently"
nouns['permanganate']=nounInfo("permanganate")
nouns['permeability']=nounInfo("permeability")
adjectives['permeable']=adjInfo("permeable")
nouns['permeation']=nounInfo("permeation")
adjectives['permissible']=adjInfo("permissible")
adverbs['permissibly']="permissibly"
nouns['permission']=nounInfo("permission")
adjectives['permissive']=adjInfo("permissive")
nouns['permissiveness']=nounInfo("permissiveness")
nouns['permit']=nounInfo("permit")
nouns['permutation']=nounInfo("permutation")
adjectives['pernicious']=adjInfo("pernicious")
adverbs['perniciously']="perniciously"
nouns['perniciousness']=nounInfo("perniciousness")
adjectives['pernickety']=adjInfo("pernickety")
nouns['peroration']=nounInfo("peroration")
nouns['peroxide']=nounInfo("peroxide")
adjectives['perpendicular']=adjInfo("perpendicular")
nouns['perpendicular']=nounInfo("perpendicular")
adverbs['perpendicularly']="perpendicularly"
nouns['perpetration']=nounInfo("perpetration")
nouns['perpetrator']=nounInfo("perpetrator")
adjectives['perpetual']=adjInfo("perpetual")
adverbs['perpetually']="perpetually"
nouns['perpetuation']=nounInfo("perpetuation")
nouns['perpetuity']=nounInfo("perpetuity")
adjectives['perplexed']=adjInfo("perplexed")
adverbs['perplexedly']="perplexedly"
nouns['perplexity']=nounInfo("perplexity")
nouns['perquisite']=nounInfo("perquisite")
nouns['perry']=nounInfo("perry")
nouns['persecution']=nounInfo("persecution")
nouns['persecutor']=nounInfo("persecutor")
nouns['perseverance']=nounInfo("perseverance")
adjectives['persevering']=adjInfo("persevering")
adverbs['perseveringly']="perseveringly"
nouns['persiflage']=nounInfo("persiflage")
nouns['persimmon']=nounInfo("persimmon")
nouns['persistence']=nounInfo("persistence")
adjectives['persistent']=adjInfo("persistent")
adverbs['persistently']="persistently"
nouns['person']=nounInfo("person").addAttributes({"g":"x"})
nouns['persona']=nounInfo("persona")
adjectives['personable']=adjInfo("personable")
nouns['personage']=nounInfo("personage")
adjectives['personal']=adjInfo("personal")
nouns['personal']=nounInfo("personal")
nouns['personality']=nounInfo("personality")
adverbs['personally']="personally"
nouns['personalty']=nounInfo("personalty")
nouns['personation']=nounInfo("personation")
nouns['personification']=nounInfo("personification")
nouns['personnel']=nounInfo("personnel")
nouns['perspective']=nounInfo("perspective")
nouns['perspex']=nounInfo("perspex")
adjectives['perspicacious']=adjInfo("perspicacious")
nouns['perspicacity']=nounInfo("perspicacity")
nouns['perspicuity']=nounInfo("perspicuity")
adjectives['perspicuous']=adjInfo("perspicuous")
adverbs['perspicuously']="perspicuously"
nouns['perspicuousness']=nounInfo("perspicuousness")
nouns['perspiration']=nounInfo("perspiration")
adjectives['persuadable']=adjInfo("persuadable")
nouns['persuasion']=nounInfo("persuasion")
adjectives['persuasive']=adjInfo("persuasive")
adverbs['persuasively']="persuasively"
nouns['persuasiveness']=nounInfo("persuasiveness")
adjectives['pert']=adjInfo("pert")
adjectives['pertinacious']=adjInfo("pertinacious")
adverbs['pertinaciously']="pertinaciously"
nouns['pertinacity']=nounInfo("pertinacity")
nouns['pertinence']=nounInfo("pertinence")
adjectives['pertinent']=adjInfo("pertinent")
adverbs['pertinently']="pertinently"
adverbs['pertly']="pertly"
nouns['pertness']=nounInfo("pertness")
nouns['perturbation']=nounInfo("perturbation")
nouns['peruke']=nounInfo("peruke")
nouns['perusal']=nounInfo("perusal")
nouns['pervasion']=nounInfo("pervasion")
adjectives['pervasive']=adjInfo("pervasive")
adverbs['pervasively']="pervasively"
nouns['pervasiveness']=nounInfo("pervasiveness")
adjectives['perverse']=adjInfo("perverse")
adverbs['perversely']="perversely"
nouns['perverseness']=nounInfo("perverseness")
nouns['perversion']=nounInfo("perversion")
nouns['perversity']=nounInfo("perversity")
nouns['pervert']=nounInfo("pervert")
nouns['peseta']=nounInfo("peseta")
adjectives['pesky']=adjInfo("pesky")
nouns['peso']=nounInfo("peso")
nouns['pessary']=nounInfo("pessary")
nouns['pessimism']=nounInfo("pessimism")
nouns['pessimist']=nounInfo("pessimist")
adjectives['pessimistic']=adjInfo("pessimistic")
adverbs['pessimistically']="pessimistically"
nouns['pest']=nounInfo("pest")
nouns['pesticide']=nounInfo("pesticide")
adjectives['pestiferous']=adjInfo("pestiferous")
nouns['pestilence']=nounInfo("pestilence")
adjectives['pestilent']=adjInfo("pestilent")
adjectives['pestilential']=adjInfo("pestilential")
nouns['pestle']=nounInfo("pestle")
nouns['pet']=nounInfo("pet")
nouns['petal']=nounInfo("petal")
adjectives['petaled']=adjInfo("petaled")
adjectives['petalled']=adjInfo("petalled")
nouns['petard']=nounInfo("petard")
adjectives['petite']=adjInfo("petite")
nouns['petition']=nounInfo("petition")
nouns['petitioner']=nounInfo("petitioner")
nouns['petrel']=nounInfo("petrel")
nouns['petrifaction']=nounInfo("petrifaction")
nouns['petrol']=nounInfo("petrol")
nouns['petroleum']=nounInfo("petroleum")
nouns['petrology']=nounInfo("petrology")
nouns['petticoat']=nounInfo("petticoat")
adjectives['pettifogging']=adjInfo("pettifogging")
adverbs['pettily']="pettily"
nouns['pettiness']=nounInfo("pettiness")
adjectives['pettish']=adjInfo("pettish")
adverbs['pettishly']="pettishly"
nouns['pettishness']=nounInfo("pettishness")
adjectives['petty']=adjInfo("petty")
nouns['petulance']=nounInfo("petulance")
adjectives['petulant']=adjInfo("petulant")
adverbs['petulantly']="petulantly"
nouns['petunia']=nounInfo("petunia")
nouns['pew']=nounInfo("pew")
nouns['pewit']=nounInfo("pewit")
nouns['pewter']=nounInfo("pewter")
nouns['peyote']=nounInfo("peyote")
nouns['pfennig']=nounInfo("pfennig")
nouns['phaeton']=nounInfo("phaeton")
nouns['phagocyte']=nounInfo("phagocyte")
nouns['phalanx']=nounInfo("phalanx")
adjectives['phallic']=adjInfo("phallic")
nouns['phallus']=nounInfo("phallus")
nouns['phantasm']=nounInfo("phantasm")
nouns['phantasmagoria']=nounInfo("phantasmagoria")
adjectives['phantasmal']=adjInfo("phantasmal")
nouns['phantasy']=nounInfo("phantasy")
nouns['phantom']=nounInfo("phantom")
adjectives['pharisaic']=adjInfo("pharisaic")
adjectives['pharisaical']=adjInfo("pharisaical")
adjectives['pharmaceutical']=adjInfo("pharmaceutical")
nouns['pharmacist']=nounInfo("pharmacist")
nouns['pharmacologist']=nounInfo("pharmacologist")
nouns['pharmacology']=nounInfo("pharmacology")
nouns['pharmacopoeia']=nounInfo("pharmacopoeia")
nouns['pharmacy']=nounInfo("pharmacy")
nouns['pharos']=nounInfo("pharos")
nouns['pharyngitis']=nounInfo("pharyngitis")
nouns['pharynx']=nounInfo("pharynx")
nouns['phase']=nounInfo("phase")
nouns['pheasant']=nounInfo("pheasant")
nouns['phenobarbitone']=nounInfo("phenobarbitone")
nouns['phenol']=nounInfo("phenol")
adjectives['phenomenal']=adjInfo("phenomenal")
adverbs['phenomenally']="phenomenally"
nouns['phenomenon']=nounInfo("phenomenon")
nouns['phew']=nounInfo("phew")
nouns['phial']=nounInfo("phial")
nouns['philanderer']=nounInfo("philanderer")
adjectives['philanthropic']=adjInfo("philanthropic")
adverbs['philanthropically']="philanthropically"
nouns['philanthropist']=nounInfo("philanthropist")
nouns['philanthropy']=nounInfo("philanthropy")
nouns['philatelist']=nounInfo("philatelist")
nouns['philately']=nounInfo("philately")
adjectives['philhellene']=adjInfo("philhellene")
nouns['philhellene']=nounInfo("philhellene")
adjectives['philhellenic']=adjInfo("philhellenic")
adjectives['philological']=adjInfo("philological")
nouns['philologist']=nounInfo("philologist")
nouns['philology']=nounInfo("philology")
nouns['philosopher']=nounInfo("philosopher")
adjectives['philosophical']=adjInfo("philosophical")
adverbs['philosophically']="philosophically"
nouns['philosophy']=nounInfo("philosophy")
nouns['philtre']=nounInfo("philtre")
nouns['phlebitis']=nounInfo("phlebitis")
nouns['phlegm']=nounInfo("phlegm")
adjectives['phlegmatic']=adjInfo("phlegmatic")
adverbs['phlegmatically']="phlegmatically"
nouns['phlox']=nounInfo("phlox")
nouns['phobia']=nounInfo("phobia")
nouns['phoenix']=nounInfo("phoenix")
nouns['phone']=nounInfo("phone")
nouns['phonebooth']=nounInfo("phonebooth")
nouns['phonecall']=nounInfo("phonecall")
nouns['phoneme']=nounInfo("phoneme")
adjectives['phonemic']=adjInfo("phonemic")
nouns['phonemics']=nounInfo("phonemics")
adjectives['phonetic']=adjInfo("phonetic")
adverbs['phonetically']="phonetically"
nouns['phonetician']=nounInfo("phonetician")
nouns['phonetics']=nounInfo("phonetics")
adjectives['phoney']=adjInfo("phoney")
nouns['phoney']=nounInfo("phoney")
adjectives['phonic']=adjInfo("phonic")
nouns['phonics']=nounInfo("phonics")
nouns['phonograph']=nounInfo("phonograph")
adjectives['phonological']=adjInfo("phonological")
nouns['phonology']=nounInfo("phonology")
adjectives['phony']=adjInfo("phony")
nouns['phony']=nounInfo("phony")
nouns['phooey']=nounInfo("phooey")
nouns['phosgene']=nounInfo("phosgene")
nouns['phosphate']=nounInfo("phosphate")
nouns['phosphorescence']=nounInfo("phosphorescence")
adjectives['phosphorescent']=adjInfo("phosphorescent")
adjectives['phosphoric']=adjInfo("phosphoric")
adjectives['phosphorous']=adjInfo("phosphorous")
nouns['phosphorus']=nounInfo("phosphorus")
nouns['photo']=nounInfo("photo")
nouns['photocopier']=nounInfo("photocopier")
nouns['photocopy']=nounInfo("photocopy")
adjectives['photoelectric']=adjInfo("photoelectric")
nouns['photoflash']=nounInfo("photoflash")
adjectives['photogenic']=adjInfo("photogenic")
nouns['photograph']=nounInfo("photograph")
nouns['photographer']=nounInfo("photographer").addAttributes({"g":"x"})
adjectives['photographic']=adjInfo("photographic")
adverbs['photographically']="photographically"
nouns['photography']=nounInfo("photography")
nouns['photogravure']=nounInfo("photogravure")
nouns['photolithography']=nounInfo("photolithography")
nouns['photometer']=nounInfo("photometer")
nouns['photon']=nounInfo("photon")
nouns['photostat']=nounInfo("photostat")
nouns['photosynthesis']=nounInfo("photosynthesis")
adjectives['phrasal']=adjInfo("phrasal")
nouns['phrase']=nounInfo("phrase")
nouns['phraseology']=nounInfo("phraseology")
adjectives['phrenetic']=adjInfo("phrenetic")
nouns['phrenologist']=nounInfo("phrenologist")
nouns['phrenology']=nounInfo("phrenology")
nouns['phthisis']=nounInfo("phthisis")
adverbs['phut']="phut"
nouns['phylum']=nounInfo("phylum")
nouns['physic']=nounInfo("physic")
adjectives['physical']=adjInfo("physical")
adverbs['physically']="physically"
nouns['physician']=nounInfo("physician")
nouns['physicist']=nounInfo("physicist")
nouns['physics']=nounInfo("physics")
nouns['physiognomy']=nounInfo("physiognomy")
adjectives['physiological']=adjInfo("physiological")
nouns['physiologist']=nounInfo("physiologist")
nouns['physiology']=nounInfo("physiology")
nouns['physiotherapist']=nounInfo("physiotherapist")
nouns['physiotherapy']=nounInfo("physiotherapy")
nouns['physique']=nounInfo("physique")
nouns['pi']=nounInfo("pi")
adjectives['pianissimo']=adjInfo("pianissimo")
adverbs['pianissimo']="pianissimo"
nouns['pianist']=nounInfo("pianist")
adjectives['piano']=adjInfo("piano")
adverbs['piano']="piano"
nouns['piano']=nounInfo("piano")
nouns['pianoforte']=nounInfo("pianoforte")
nouns['pianola']=nounInfo("pianola")
nouns['piastre']=nounInfo("piastre")
nouns['piazza']=nounInfo("piazza")
nouns['pibroch']=nounInfo("pibroch")
nouns['pica']=nounInfo("pica")
nouns['picador']=nounInfo("picador")
adjectives['picaresque']=adjInfo("picaresque")
nouns['piccalilli']=nounInfo("piccalilli")
nouns['piccaninny']=nounInfo("piccaninny")
nouns['piccolo']=nounInfo("piccolo")
nouns['pick']=nounInfo("pick")
adverbs['pickaback']="pickaback"
nouns['picker']=nounInfo("picker")
nouns['pickerel']=nounInfo("pickerel")
nouns['picket']=nounInfo("picket")
nouns['picking']=nounInfo("picking")
nouns['pickle']=nounInfo("pickle")
nouns['pickpocket']=nounInfo("pickpocket")
nouns['picnic']=nounInfo("picnic")
nouns['picnicker']=nounInfo("picnicker")
adjectives['picric']=adjInfo("picric")
adjectives['pictorial']=adjInfo("pictorial")
nouns['pictorial']=nounInfo("pictorial")
nouns['picture']=nounInfo("picture")
adjectives['picturesque']=adjInfo("picturesque")
adverbs['picturesquely']="picturesquely"
nouns['picturesqueness']=nounInfo("picturesqueness")
nouns['piddle']=nounInfo("piddle")
adjectives['piddling']=adjInfo("piddling")
nouns['pidgin']=nounInfo("pidgin")
nouns['pie']=nounInfo("pie")
adjectives['piebald']=adjInfo("piebald")
nouns['piece']=nounInfo("piece")
adjectives['piecemeal']=adjInfo("piecemeal")
adverbs['piecemeal']="piecemeal"
adjectives['pied']=adjInfo("pied")
nouns['pier']=nounInfo("pier")
adjectives['piercing']=adjInfo("piercing")
adverbs['piercingly']="piercingly"
nouns['pierrot']=nounInfo("pierrot")
nouns['piety']=nounInfo("piety")
nouns['piffle']=nounInfo("piffle")
adjectives['piffling']=adjInfo("piffling")
nouns['pig']=nounInfo("pig")
nouns['pigboat']=nounInfo("pigboat")
nouns['pigeon']=nounInfo("pigeon")
nouns['pigeonhole']=nounInfo("pigeonhole")
nouns['piggery']=nounInfo("piggery")
adjectives['piggish']=adjInfo("piggish")
adverbs['piggishly']="piggishly"
nouns['piggishness']=nounInfo("piggishness")
adjectives['piggy']=adjInfo("piggy")
nouns['piggy']=nounInfo("piggy")
nouns['piggyback']=nounInfo("piggyback")
nouns['piglet']=nounInfo("piglet")
nouns['pigment']=nounInfo("pigment")
nouns['pigmentation']=nounInfo("pigmentation")
nouns['pigmy']=nounInfo("pigmy")
nouns['pigskin']=nounInfo("pigskin")
nouns['pigsty']=nounInfo("pigsty")
nouns['pigswill']=nounInfo("pigswill")
nouns['pigtail']=nounInfo("pigtail")
nouns['pigwash']=nounInfo("pigwash")
nouns['pike']=nounInfo("pike")
nouns['pikestaff']=nounInfo("pikestaff")
nouns['pilaf']=nounInfo("pilaf")
nouns['pilaff']=nounInfo("pilaff")
nouns['pilaster']=nounInfo("pilaster")
nouns['pilau']=nounInfo("pilau")
nouns['pilchard']=nounInfo("pilchard")
nouns['pile']=nounInfo("pile")
nouns['piles']=nounInfo("piles")
nouns['pilferage']=nounInfo("pilferage")
nouns['pilferer']=nounInfo("pilferer")
nouns['pilgrim']=nounInfo("pilgrim")
nouns['pilgrimage']=nounInfo("pilgrimage")
nouns['pill']=nounInfo("pill")
nouns['pillage']=nounInfo("pillage")
nouns['pillager']=nounInfo("pillager")
nouns['pillar']=nounInfo("pillar")
nouns['pillbox']=nounInfo("pillbox")
nouns['pillion']=nounInfo("pillion")
nouns['pillory']=nounInfo("pillory")
nouns['pillow']=nounInfo("pillow")
nouns['pilot']=nounInfo("pilot").addAttributes({"g":"x"})
nouns['pimento']=nounInfo("pimento")
nouns['pimp']=nounInfo("pimp")
nouns['pimpernel']=nounInfo("pimpernel")
nouns['pimple']=nounInfo("pimple")
adjectives['pimpled']=adjInfo("pimpled")
adjectives['pimply']=adjInfo("pimply")
nouns['pin']=nounInfo("pin")
nouns['pinafore']=nounInfo("pinafore")
nouns['pincers']=nounInfo("pincers")
nouns['pinch']=nounInfo("pinch")
adjectives['pinchbeck']=adjInfo("pinchbeck")
nouns['pinchbeck']=nounInfo("pinchbeck")
nouns['pincushion']=nounInfo("pincushion")
nouns['pine']=nounInfo("pine")
adjectives['pineal']=adjInfo("pineal")
nouns['pineapple']=nounInfo("pineapple")
nouns['ping']=nounInfo("ping")
nouns['pingpong']=nounInfo("pingpong")
nouns['pinhead']=nounInfo("pinhead")
nouns['pinion']=nounInfo("pinion")
adjectives['pink']=adjInfo("pink")
nouns['pink']=nounInfo("pink")
adjectives['pinkish']=adjInfo("pinkish")
nouns['pinnace']=nounInfo("pinnace")
nouns['pinnacle']=nounInfo("pinnacle")
adjectives['pinnate']=adjInfo("pinnate")
nouns['pinny']=nounInfo("pinny")
nouns['pint']=nounInfo("pint")
nouns['pioneer']=nounInfo("pioneer")
adjectives['pious']=adjInfo("pious")
adverbs['piously']="piously"
nouns['pip']=nounInfo("pip")
nouns['pipal']=nounInfo("pipal")
nouns['pipe']=nounInfo("pipe")
nouns['pipeclay']=nounInfo("pipeclay")
nouns['pipedream']=nounInfo("pipedream")
nouns['pipeful']=nounInfo("pipeful")
nouns['pipeline']=nounInfo("pipeline")
nouns['piper']=nounInfo("piper")
nouns['pipette']=nounInfo("pipette")
adjectives['piping']=adjInfo("piping")
adverbs['piping']="piping"
nouns['piping']=nounInfo("piping")
nouns['pippin']=nounInfo("pippin")
nouns['pipsqueak']=nounInfo("pipsqueak")
nouns['piquancy']=nounInfo("piquancy")
adjectives['piquant']=adjInfo("piquant")
adverbs['piquantly']="piquantly"
nouns['pique']=nounInfo("pique")
nouns['piquet']=nounInfo("piquet")
nouns['piracy']=nounInfo("piracy")
nouns['piranha']=nounInfo("piranha")
nouns['pirate']=nounInfo("pirate")
adjectives['piratical']=adjInfo("piratical")
adverbs['piratically']="piratically"
nouns['pirouette']=nounInfo("pirouette")
adjectives['piscatorial']=adjInfo("piscatorial")
nouns['piss']=nounInfo("piss")
adjectives['pissed']=adjInfo("pissed")
nouns['pistachio']=nounInfo("pistachio")
nouns['pistil']=nounInfo("pistil")
nouns['pistol']=nounInfo("pistol")
nouns['piston']=nounInfo("piston")
nouns['pit']=nounInfo("pit")
nouns['pitch']=nounInfo("pitch")
nouns['pitcher']=nounInfo("pitcher")
nouns['pitchfork']=nounInfo("pitchfork")
adjectives['piteous']=adjInfo("piteous")
adverbs['piteously']="piteously"
nouns['pitfall']=nounInfo("pitfall")
nouns['pith']=nounInfo("pith")
nouns['pithead']=nounInfo("pithead")
adverbs['pithily']="pithily"
adjectives['pithy']=adjInfo("pithy")
adjectives['pitiable']=adjInfo("pitiable")
adverbs['pitiably']="pitiably"
adjectives['pitiful']=adjInfo("pitiful")
adverbs['pitifully']="pitifully"
adjectives['pitiless']=adjInfo("pitiless")
adverbs['pitilessly']="pitilessly"
nouns['pitman']=nounInfo("pitman")
nouns['piton']=nounInfo("piton")
nouns['pittance']=nounInfo("pittance")
adjectives['pituitary']=adjInfo("pituitary")
nouns['pituitary']=nounInfo("pituitary")
nouns['pity']=nounInfo("pity")
adjectives['pitying']=adjInfo("pitying")
adverbs['pityingly']="pityingly"
nouns['pivot']=nounInfo("pivot")
adjectives['pivotal']=adjInfo("pivotal")
nouns['pixie']=nounInfo("pixie")
adjectives['pixilated']=adjInfo("pixilated")
nouns['pixy']=nounInfo("pixy")
nouns['pizza']=nounInfo("pizza")
adjectives['pizzicato']=adjInfo("pizzicato")
adverbs['pizzicato']="pizzicato"
nouns['placard']=nounInfo("placard")
adverbs['placatingly']="placatingly"
nouns['place']=nounInfo("place")
nouns['placebo']=nounInfo("placebo")
nouns['placeman']=nounInfo("placeman")
nouns['placenta']=nounInfo("placenta")
nouns['placeseeker']=nounInfo("placeseeker")
adjectives['placid']=adjInfo("placid")
nouns['placidity']=nounInfo("placidity")
adverbs['placidly']="placidly"
nouns['placket']=nounInfo("placket")
nouns['plage']=nounInfo("plage")
nouns['plagiarism']=nounInfo("plagiarism")
nouns['plagiarist']=nounInfo("plagiarist")
nouns['plague']=nounInfo("plague")
adverbs['plaguily']="plaguily"
adjectives['plaguy']=adjInfo("plaguy")
nouns['plaice']=nounInfo("plaice")
nouns['plaid']=nounInfo("plaid")
adjectives['plain']=adjInfo("plain")
adverbs['plain']="plain"
nouns['plain']=nounInfo("plain")
adverbs['plainly']="plainly"
nouns['plainness']=nounInfo("plainness")
nouns['plainsman']=nounInfo("plainsman")
nouns['plaint']=nounInfo("plaint")
nouns['plaintiff']=nounInfo("plaintiff")
adjectives['plaintive']=adjInfo("plaintive")
adverbs['plaintively']="plaintively"
nouns['plaintiveness']=nounInfo("plaintiveness")
nouns['plait']=nounInfo("plait")
nouns['plan']=nounInfo("plan")
nouns['planchette']=nounInfo("planchette")
nouns['plane']=nounInfo("plane")
nouns['planet']=nounInfo("planet")
nouns['planetarium']=nounInfo("planetarium")
adjectives['planetary']=adjInfo("planetary")
adjectives['plangent']=adjInfo("plangent")
nouns['plank']=nounInfo("plank")
nouns['planking']=nounInfo("planking")
nouns['plankton']=nounInfo("plankton")
adjectives['planless']=adjInfo("planless")
nouns['planner']=nounInfo("planner")
nouns['plant']=nounInfo("plant")
nouns['plantain']=nounInfo("plantain")
nouns['plantation']=nounInfo("plantation")
nouns['planter']=nounInfo("planter")
nouns['plaque']=nounInfo("plaque")
nouns['plash']=nounInfo("plash")
nouns['plasm']=nounInfo("plasm")
nouns['plasma']=nounInfo("plasma")
nouns['plaster']=nounInfo("plaster")
nouns['plasterboard']=nounInfo("plasterboard")
adjectives['plastered']=adjInfo("plastered")
nouns['plasterer']=nounInfo("plasterer")
adjectives['plastic']=adjInfo("plastic")
nouns['plastic']=nounInfo("plastic")
nouns['plasticine']=nounInfo("plasticine")
nouns['plasticity']=nounInfo("plasticity")
nouns['plastics']=nounInfo("plastics")
nouns['plate']=nounInfo("plate")
nouns['plateau']=nounInfo("plateau")
nouns['plateful']=nounInfo("plateful")
nouns['platelayer']=nounInfo("platelayer")
nouns['platform']=nounInfo("platform")
nouns['plating']=nounInfo("plating")
nouns['platinum']=nounInfo("platinum")
nouns['platitude']=nounInfo("platitude")
adjectives['platitudinous']=adjInfo("platitudinous")
nouns['platoon']=nounInfo("platoon")
nouns['platter']=nounInfo("platter")
nouns['platypus']=nounInfo("platypus")
nouns['plaudit']=nounInfo("plaudit")
nouns['plausibility']=nounInfo("plausibility")
adjectives['plausible']=adjInfo("plausible")
adverbs['plausibly']="plausibly"
nouns['play']=nounInfo("play")
nouns['playboy']=nounInfo("playboy")
nouns['player']=nounInfo("player").addAttributes({"g":"x"})
nouns['playfellow']=nounInfo("playfellow")
adjectives['playful']=adjInfo("playful")
adverbs['playfully']="playfully"
nouns['playfulness']=nounInfo("playfulness")
nouns['playgoer']=nounInfo("playgoer")
nouns['playground']=nounInfo("playground")
nouns['playhouse']=nounInfo("playhouse")
nouns['playing']=nounInfo("playing")
nouns['playlet']=nounInfo("playlet")
nouns['playmate']=nounInfo("playmate")
nouns['playroom']=nounInfo("playroom")
nouns['plaything']=nounInfo("plaything")
nouns['playtime']=nounInfo("playtime")
nouns['playwright']=nounInfo("playwright")
nouns['plaza']=nounInfo("plaza")
nouns['plea']=nounInfo("plea")
adverbs['pleadingly']="pleadingly"
nouns['pleadings']=nounInfo("pleadings")
nouns['pleasance']=nounInfo("pleasance")
adjectives['pleasant']=adjInfo("pleasant")
adverbs['pleasantly']="pleasantly"
nouns['pleasantness']=nounInfo("pleasantness")
nouns['pleasantry']=nounInfo("pleasantry")
adjectives['pleased']=adjInfo("pleased")
adjectives['pleasing']=adjInfo("pleasing")
adverbs['pleasingly']="pleasingly"
adjectives['pleasurable']=adjInfo("pleasurable")
adverbs['pleasurably']="pleasurably"
nouns['pleasure']=nounInfo("pleasure")
nouns['pleat']=nounInfo("pleat")
nouns['pleb']=nounInfo("pleb")
adjectives['plebeian']=adjInfo("plebeian")
nouns['plebeian']=nounInfo("plebeian")
nouns['plebiscite']=nounInfo("plebiscite")
nouns['plectrum']=nounInfo("plectrum")
nouns['pledge']=nounInfo("pledge")
adverbs['plenarily']="plenarily"
adjectives['plenary']=adjInfo("plenary")
nouns['plenipotentiary']=nounInfo("plenipotentiary")
nouns['plenitude']=nounInfo("plenitude")
adjectives['plenteous']=adjInfo("plenteous")
adverbs['plenteously']="plenteously"
adjectives['plentiful']=adjInfo("plentiful")
adverbs['plentifully']="plentifully"
adverbs['plenty']="plenty"
nouns['plenty']=nounInfo("plenty")
nouns['pleonasm']=nounInfo("pleonasm")
nouns['plethora']=nounInfo("plethora")
nouns['pleurisy']=nounInfo("pleurisy")
nouns['plexus']=nounInfo("plexus")
nouns['pliability']=nounInfo("pliability")
adjectives['pliable']=adjInfo("pliable")
nouns['pliancy']=nounInfo("pliancy")
adjectives['pliant']=adjInfo("pliant")
adverbs['pliantly']="pliantly"
nouns['pliers']=nounInfo("pliers")
nouns['plight']=nounInfo("plight")
nouns['plimsoll']=nounInfo("plimsoll")
nouns['plinth']=nounInfo("plinth")
nouns['plodder']=nounInfo("plodder")
adjectives['plodding']=adjInfo("plodding")
adverbs['ploddingly']="ploddingly"
adverbs['plonk']="plonk"
nouns['plonk']=nounInfo("plonk")
adverbs['plop']="plop"
nouns['plop']=nounInfo("plop")
adjectives['plosive']=adjInfo("plosive")
nouns['plosive']=nounInfo("plosive")
nouns['plot']=nounInfo("plot")
nouns['plotter']=nounInfo("plotter")
nouns['plough']=nounInfo("plough")
nouns['ploughboy']=nounInfo("ploughboy")
nouns['ploughman']=nounInfo("ploughman")
nouns['ploughshare']=nounInfo("ploughshare")
nouns['plover']=nounInfo("plover")
nouns['ploy']=nounInfo("ploy")
nouns['pluck']=nounInfo("pluck")
adverbs['pluckily']="pluckily"
adjectives['plucky']=adjInfo("plucky")
nouns['plug']=nounInfo("plug")
nouns['plum']=nounInfo("plum")
nouns['plumage']=nounInfo("plumage")
adverbs['plumb']="plumb"
nouns['plumb']=nounInfo("plumb")
nouns['plumbago']=nounInfo("plumbago")
nouns['plumber']=nounInfo("plumber")
nouns['plumbing']=nounInfo("plumbing")
nouns['plume']=nounInfo("plume")
nouns['plummet']=nounInfo("plummet")
adjectives['plummy']=adjInfo("plummy")
adjectives['plump']=adjInfo("plump")
adverbs['plump']="plump"
nouns['plump']=nounInfo("plump")
nouns['plunder']=nounInfo("plunder")
nouns['plunderer']=nounInfo("plunderer")
nouns['plunge']=nounInfo("plunge")
nouns['plunger']=nounInfo("plunger")
nouns['plunk']=nounInfo("plunk")
adjectives['pluperfect']=adjInfo("pluperfect")
nouns['pluperfect']=nounInfo("pluperfect")
adjectives['plural']=adjInfo("plural")
nouns['plural']=nounInfo("plural")
nouns['pluralism']=nounInfo("pluralism")
nouns['pluralist']=nounInfo("pluralist")
nouns['plurality']=nounInfo("plurality")
adjectives['plus']=adjInfo("plus")
nouns['plus']=nounInfo("plus")
prepositions['plus']=P("plus")
adjectives['plush']=adjInfo("plush")
nouns['plush']=nounInfo("plush")
adjectives['plushy']=adjInfo("plushy")
nouns['plutocracy']=nounInfo("plutocracy")
nouns['plutocrat']=nounInfo("plutocrat")
adjectives['plutocratic']=adjInfo("plutocratic")
nouns['plutonium']=nounInfo("plutonium")
nouns['ply']=nounInfo("ply")
nouns['plywood']=nounInfo("plywood")
adjectives['pneumatic']=adjInfo("pneumatic")
adverbs['pneumatically']="pneumatically"
nouns['pneumonia']=nounInfo("pneumonia")
nouns['poacher']=nounInfo("poacher")
nouns['pock']=nounInfo("pock")
adjectives['pocked']=adjInfo("pocked")
nouns['pocket']=nounInfo("pocket")
nouns['pocketful']=nounInfo("pocketful")
nouns['pod']=nounInfo("pod")
adjectives['podgy']=adjInfo("podgy")
nouns['podiatry']=nounInfo("podiatry")
nouns['podium']=nounInfo("podium")
nouns['poem']=nounInfo("poem")
nouns['poesy']=nounInfo("poesy")
nouns['poet']=nounInfo("poet").addAttributes({"g":"x"})
nouns['poetess']=nounInfo("poetess").addAttributes({"g":"f"})
adjectives['poetic']=adjInfo("poetic")
adjectives['poetical']=adjInfo("poetical")
adverbs['poetically']="poetically"
nouns['poetry']=nounInfo("poetry")
nouns['pogrom']=nounInfo("pogrom")
nouns['poignancy']=nounInfo("poignancy")
adjectives['poignant']=adjInfo("poignant")
adverbs['poignantly']="poignantly"
nouns['poinsettia']=nounInfo("poinsettia")
nouns['point']=nounInfo("point")
adverbs['pointblank']="pointblank"
adjectives['pointed']=adjInfo("pointed")
adverbs['pointedly']="pointedly"
nouns['pointer']=nounInfo("pointer")
adjectives['pointless']=adjInfo("pointless")
adverbs['pointlessly']="pointlessly"
nouns['pointsman']=nounInfo("pointsman")
nouns['poise']=nounInfo("poise")
nouns['poison']=nounInfo("poison")
nouns['poisoner']=nounInfo("poisoner")
adjectives['poisonous']=adjInfo("poisonous")
adverbs['poisonously']="poisonously"
nouns['poke']=nounInfo("poke")
nouns['poker']=nounInfo("poker")
adjectives['poky']=adjInfo("poky")
adjectives['polar']=adjInfo("polar")
nouns['polarity']=nounInfo("polarity")
nouns['polarization']=nounInfo("polarization")
nouns['pole']=nounInfo("pole")
nouns['polecat']=nounInfo("polecat")
adjectives['polemic']=adjInfo("polemic")
nouns['polemic']=nounInfo("polemic")
adverbs['polemically']="polemically"
nouns['police']=nounInfo("police")
nouns['policeman']=nounInfo("policeman").addAttributes({"g":"m"})
nouns['policewoman']=nounInfo("policewoman").addAttributes({"g":"f"})
nouns['policy']=nounInfo("policy")
nouns['polio']=nounInfo("polio")
nouns['poliomyelitis']=nounInfo("poliomyelitis")
nouns['polish']=nounInfo("polish")
nouns['polisher']=nounInfo("polisher")
nouns['politburo']=nounInfo("politburo")
adjectives['polite']=adjInfo("polite")
adverbs['politely']="politely"
nouns['politeness']=nounInfo("politeness")
adjectives['politic']=adjInfo("politic")
adjectives['political']=adjInfo("political")
adverbs['politically']="politically"
nouns['politician']=nounInfo("politician")
nouns['politics']=nounInfo("politics")
nouns['polity']=nounInfo("polity")
nouns['polka']=nounInfo("polka")
nouns['poll']=nounInfo("poll")
nouns['pollard']=nounInfo("pollard")
nouns['pollen']=nounInfo("pollen")
nouns['pollination']=nounInfo("pollination")
nouns['pollster']=nounInfo("pollster")
nouns['pollutant']=nounInfo("pollutant")
nouns['polluter']=nounInfo("polluter")
nouns['pollution']=nounInfo("pollution")
nouns['polo']=nounInfo("polo")
nouns['polonaise']=nounInfo("polonaise")
nouns['polony']=nounInfo("polony")
nouns['poltergeist']=nounInfo("poltergeist")
nouns['poltroon']=nounInfo("poltroon")
nouns['poltroonery']=nounInfo("poltroonery")
nouns['poly']=nounInfo("poly")
adjectives['polyandrous']=adjInfo("polyandrous")
nouns['polyandry']=nounInfo("polyandry")
nouns['polyanthus']=nounInfo("polyanthus")
nouns['polygamist']=nounInfo("polygamist")
adjectives['polygamous']=adjInfo("polygamous")
nouns['polygamy']=nounInfo("polygamy")
adjectives['polyglot']=adjInfo("polyglot")
nouns['polyglot']=nounInfo("polyglot")
nouns['polygon']=nounInfo("polygon")
adjectives['polymorphic']=adjInfo("polymorphic")
adjectives['polymorphous']=adjInfo("polymorphous")
nouns['polyp']=nounInfo("polyp")
adjectives['polyphonic']=adjInfo("polyphonic")
nouns['polyphony']=nounInfo("polyphony")
nouns['polypus']=nounInfo("polypus")
adjectives['polysyllabic']=adjInfo("polysyllabic")
nouns['polysyllable']=nounInfo("polysyllable")
nouns['polytechnic']=nounInfo("polytechnic")
nouns['polytheism']=nounInfo("polytheism")
adjectives['polytheistic']=adjInfo("polytheistic")
nouns['polythene']=nounInfo("polythene")
nouns['pom']=nounInfo("pom")
nouns['pomade']=nounInfo("pomade")
nouns['pomegranate']=nounInfo("pomegranate")
nouns['pomelo']=nounInfo("pomelo")
nouns['pommel']=nounInfo("pommel")
nouns['pommy']=nounInfo("pommy")
nouns['pomp']=nounInfo("pomp")
nouns['pompon']=nounInfo("pompon")
nouns['pomposity']=nounInfo("pomposity")
adjectives['pompous']=adjInfo("pompous")
adverbs['pompously']="pompously"
nouns['ponce']=nounInfo("ponce")
nouns['poncho']=nounInfo("poncho")
nouns['pond']=nounInfo("pond")
adjectives['ponderable']=adjInfo("ponderable")
nouns['ponderables']=nounInfo("ponderables")
adjectives['ponderous']=adjInfo("ponderous")
adverbs['ponderously']="ponderously"
nouns['pone']=nounInfo("pone")
nouns['pongee']=nounInfo("pongee")
nouns['poniard']=nounInfo("poniard")
nouns['pontiff']=nounInfo("pontiff")
adjectives['pontifical']=adjInfo("pontifical")
nouns['pontificals']=nounInfo("pontificals")
nouns['pontificate']=nounInfo("pontificate")
nouns['pontoon']=nounInfo("pontoon")
nouns['pony']=nounInfo("pony")
nouns['poodle']=nounInfo("poodle")
nouns['poof']=nounInfo("poof")
nouns['pooh']=nounInfo("pooh")
nouns['pool']=nounInfo("pool")
nouns['poop']=nounInfo("poop")
adjectives['poor']=adjInfo("poor")
adjectives['poorly']=adjInfo("poorly")
adverbs['poorly']="poorly"
nouns['poorness']=nounInfo("poorness")
adjectives['pop']=adjInfo("pop")
adverbs['pop']="pop"
nouns['pop']=nounInfo("pop")
nouns['popcorn']=nounInfo("popcorn")
nouns['popery']=nounInfo("popery")
nouns['popgun']=nounInfo("popgun")
nouns['popinjay']=nounInfo("popinjay")
adjectives['popish']=adjInfo("popish")
adverbs['popishly']="popishly"
nouns['poplar']=nounInfo("poplar")
nouns['poplin']=nounInfo("poplin")
nouns['poppa']=nounInfo("poppa")
nouns['poppet']=nounInfo("poppet")
nouns['poppy']=nounInfo("poppy")
nouns['poppycock']=nounInfo("poppycock")
nouns['populace']=nounInfo("populace")
adjectives['popular']=adjInfo("popular")
nouns['popularity']=nounInfo("popularity")
nouns['popularization']=nounInfo("popularization")
adverbs['popularly']="popularly"
nouns['population']=nounInfo("population")
nouns['populism']=nounInfo("populism")
nouns['populist']=nounInfo("populist")
adjectives['populous']=adjInfo("populous")
nouns['porcelain']=nounInfo("porcelain")
nouns['porch']=nounInfo("porch")
adjectives['porcine']=adjInfo("porcine")
nouns['porcupine']=nounInfo("porcupine")
nouns['pore']=nounInfo("pore")
nouns['pork']=nounInfo("pork")
nouns['porker']=nounInfo("porker")
nouns['porn']=nounInfo("porn")
nouns['pornographer']=nounInfo("pornographer")
adjectives['pornographic']=adjInfo("pornographic")
nouns['pornography']=nounInfo("pornography")
nouns['porosity']=nounInfo("porosity")
adjectives['porous']=adjInfo("porous")
nouns['porousness']=nounInfo("porousness")
nouns['porphyry']=nounInfo("porphyry")
nouns['porpoise']=nounInfo("porpoise")
nouns['porridge']=nounInfo("porridge")
nouns['porringer']=nounInfo("porringer")
nouns['port']=nounInfo("port")
nouns['portability']=nounInfo("portability")
adjectives['portable']=adjInfo("portable")
nouns['portage']=nounInfo("portage")
nouns['portal']=nounInfo("portal")
nouns['portcullis']=nounInfo("portcullis")
nouns['portent']=nounInfo("portent")
adjectives['portentous']=adjInfo("portentous")
adverbs['portentously']="portentously"
nouns['porter']=nounInfo("porter")
nouns['porterage']=nounInfo("porterage")
nouns['porterhouse']=nounInfo("porterhouse")
nouns['portfolio']=nounInfo("portfolio")
nouns['porthole']=nounInfo("porthole")
nouns['portico']=nounInfo("portico")
nouns['portion']=nounInfo("portion")
adjectives['portly']=adjInfo("portly")
nouns['portmanteau']=nounInfo("portmanteau")
nouns['portrait']=nounInfo("portrait")
nouns['portraitist']=nounInfo("portraitist")
nouns['portraiture']=nounInfo("portraiture")
nouns['portrayal']=nounInfo("portrayal")
nouns['pose']=nounInfo("pose")
nouns['poser']=nounInfo("poser")
nouns['poseur']=nounInfo("poseur")
nouns['poseuse']=nounInfo("poseuse")
adjectives['posh']=adjInfo("posh")
nouns['position']=nounInfo("position")
adjectives['positive']=adjInfo("positive")
nouns['positive']=nounInfo("positive")
adverbs['positively']="positively"
nouns['positiveness']=nounInfo("positiveness")
nouns['positivism']=nounInfo("positivism")
nouns['positivist']=nounInfo("positivist")
nouns['posse']=nounInfo("posse")
nouns['possession']=nounInfo("possession")
adjectives['possessive']=adjInfo("possessive")
adverbs['possessively']="possessively"
nouns['possessor']=nounInfo("possessor")
nouns['posset']=nounInfo("posset")
nouns['possibility']=nounInfo("possibility")
adjectives['possible']=adjInfo("possible")
nouns['possible']=nounInfo("possible")
adverbs['possibly']="possibly"
nouns['possum']=nounInfo("possum")
nouns['post']=nounInfo("post")
nouns['postage']=nounInfo("postage")
adjectives['postal']=adjInfo("postal")
nouns['postbag']=nounInfo("postbag")
nouns['postbox']=nounInfo("postbox")
nouns['postcard']=nounInfo("postcard")
nouns['postcode']=nounInfo("postcode")
nouns['poster']=nounInfo("poster")
adjectives['posterior']=adjInfo("posterior")
nouns['posterior']=nounInfo("posterior")
adverbs['posteriorly']="posteriorly"
nouns['posterity']=nounInfo("posterity")
nouns['postern']=nounInfo("postern")
adjectives['postgraduate']=adjInfo("postgraduate")
nouns['postgraduate']=nounInfo("postgraduate")
adjectives['posthumous']=adjInfo("posthumous")
adverbs['posthumously']="posthumously"
nouns['postilion']=nounInfo("postilion")
nouns['postillion']=nounInfo("postillion")
nouns['postman']=nounInfo("postman").addAttributes({"g":"m"})
nouns['postmark']=nounInfo("postmark")
nouns['postmaster']=nounInfo("postmaster").addAttributes({"g":"m"})
nouns['postmistress']=nounInfo("postmistress").addAttributes({"g":"f"})
nouns['postponement']=nounInfo("postponement")
adjectives['postprandial']=adjInfo("postprandial")
nouns['postscript']=nounInfo("postscript")
nouns['postulant']=nounInfo("postulant")
nouns['postulate']=nounInfo("postulate")
nouns['posture']=nounInfo("posture")
nouns['posturing']=nounInfo("posturing")
nouns['posy']=nounInfo("posy")
nouns['pot']=nounInfo("pot")
adjectives['potable']=adjInfo("potable")
nouns['potash']=nounInfo("potash")
nouns['potassium']=nounInfo("potassium")
nouns['potation']=nounInfo("potation")
nouns['potato']=nounInfo("potato")
nouns['poteen']=nounInfo("poteen")
nouns['potency']=nounInfo("potency")
adjectives['potent']=adjInfo("potent")
nouns['potentate']=nounInfo("potentate")
adjectives['potential']=adjInfo("potential")
nouns['potential']=nounInfo("potential")
nouns['potentiality']=nounInfo("potentiality")
adverbs['potentially']="potentially"
adverbs['potently']="potently"
nouns['pother']=nounInfo("pother")
nouns['potion']=nounInfo("potion")
nouns['potsherd']=nounInfo("potsherd")
nouns['pottage']=nounInfo("pottage")
adjectives['potted']=adjInfo("potted")
nouns['potter']=nounInfo("potter")
nouns['potterer']=nounInfo("potterer")
nouns['pottery']=nounInfo("pottery")
adjectives['potty']=adjInfo("potty")
nouns['potty']=nounInfo("potty")
nouns['pouch']=nounInfo("pouch")
nouns['pouf']=nounInfo("pouf")
nouns['pouffe']=nounInfo("pouffe")
nouns['poulterer']=nounInfo("poulterer")
nouns['poultice']=nounInfo("poultice")
nouns['poultry']=nounInfo("poultry")
nouns['pounce']=nounInfo("pounce")
nouns['pound']=nounInfo("pound")
nouns['poundage']=nounInfo("poundage")
nouns['pounder']=nounInfo("pounder")
nouns['pout']=nounInfo("pout")
adverbs['poutingly']="poutingly"
nouns['poverty']=nounInfo("poverty")
nouns['powder']=nounInfo("powder")
adjectives['powdered']=adjInfo("powdered")
adjectives['powdery']=adjInfo("powdery")
nouns['power']=nounInfo("power")
adjectives['powered']=adjInfo("powered")
adjectives['powerful']=adjInfo("powerful")
adverbs['powerfully']="powerfully"
adjectives['powerless']=adjInfo("powerless")
adverbs['powerlessly']="powerlessly"
nouns['powwow']=nounInfo("powwow")
nouns['pox']=nounInfo("pox")
nouns['practicability']=nounInfo("practicability")
adjectives['practicable']=adjInfo("practicable")
adverbs['practicably']="practicably"
adjectives['practical']=adjInfo("practical")
nouns['practicality']=nounInfo("practicality")
adverbs['practically']="practically"
nouns['practice']=nounInfo("practice")
nouns['practician']=nounInfo("practician")
adjectives['practised']=adjInfo("practised")
nouns['practitioner']=nounInfo("practitioner")
nouns['praesidium']=nounInfo("praesidium")
nouns['praetor']=nounInfo("praetor")
adjectives['praetorian']=adjInfo("praetorian")
adjectives['pragmatic']=adjInfo("pragmatic")
adverbs['pragmatically']="pragmatically"
nouns['pragmatism']=nounInfo("pragmatism")
nouns['pragmatist']=nounInfo("pragmatist")
nouns['prairie']=nounInfo("prairie")
nouns['praise']=nounInfo("praise")
adverbs['praiseworthily']="praiseworthily"
nouns['praiseworthiness']=nounInfo("praiseworthiness")
adjectives['praiseworthy']=adjInfo("praiseworthy")
nouns['pram']=nounInfo("pram")
nouns['prance']=nounInfo("prance")
nouns['prank']=nounInfo("prank")
nouns['prattle']=nounInfo("prattle")
nouns['prattler']=nounInfo("prattler")
nouns['prawn']=nounInfo("prawn")
nouns['prayer']=nounInfo("prayer")
nouns['preacher']=nounInfo("preacher")
nouns['preamble']=nounInfo("preamble")
nouns['prearrangement']=nounInfo("prearrangement")
nouns['prebend']=nounInfo("prebend")
nouns['prebendary']=nounInfo("prebendary")
adjectives['precarious']=adjInfo("precarious")
adverbs['precariously']="precariously"
adjectives['precast']=adjInfo("precast")
nouns['precaution']=nounInfo("precaution")
adjectives['precautionary']=adjInfo("precautionary")
nouns['precedence']=nounInfo("precedence")
nouns['precedent']=nounInfo("precedent")
adjectives['precedented']=adjInfo("precedented")
adjectives['preceding']=adjInfo("preceding")
nouns['precentor']=nounInfo("precentor")
nouns['precept']=nounInfo("precept")
nouns['preceptor']=nounInfo("preceptor")
nouns['precession']=nounInfo("precession")
nouns['precinct']=nounInfo("precinct")
nouns['preciosity']=nounInfo("preciosity")
adjectives['precious']=adjInfo("precious")
adverbs['precious']="precious"
adverbs['preciously']="preciously"
nouns['preciousness']=nounInfo("preciousness")
nouns['precipice']=nounInfo("precipice")
adjectives['precipitate']=adjInfo("precipitate")
nouns['precipitate']=nounInfo("precipitate")
adverbs['precipitately']="precipitately"
nouns['precipitation']=nounInfo("precipitation")
adjectives['precipitous']=adjInfo("precipitous")
adverbs['precipitously']="precipitously"
adjectives['precise']=adjInfo("precise")
adverbs['precisely']="precisely"
nouns['preciseness']=nounInfo("preciseness")
nouns['precision']=nounInfo("precision")
nouns['preclusion']=nounInfo("preclusion")
adjectives['precocious']=adjInfo("precocious")
adverbs['precociously']="precociously"
nouns['precociousness']=nounInfo("precociousness")
nouns['precocity']=nounInfo("precocity")
nouns['precognition']=nounInfo("precognition")
nouns['preconception']=nounInfo("preconception")
adjectives['preconcerted']=adjInfo("preconcerted")
nouns['precondition']=nounInfo("precondition")
nouns['precursor']=nounInfo("precursor")
adjectives['precursory']=adjInfo("precursory")
nouns['predator']=nounInfo("predator")
adjectives['predatory']=adjInfo("predatory")
nouns['predecessor']=nounInfo("predecessor")
adjectives['predestinate']=adjInfo("predestinate")
nouns['predestination']=nounInfo("predestination")
nouns['predetermination']=nounInfo("predetermination")
nouns['predicament']=nounInfo("predicament")
nouns['predicate']=nounInfo("predicate")
adjectives['predicative']=adjInfo("predicative")
nouns['predictability']=nounInfo("predictability")
adjectives['predictable']=adjInfo("predictable")
adverbs['predictably']="predictably"
nouns['prediction']=nounInfo("prediction")
nouns['predictor']=nounInfo("predictor")
nouns['predilection']=nounInfo("predilection")
nouns['predisposition']=nounInfo("predisposition")
nouns['predominance']=nounInfo("predominance")
adjectives['predominant']=adjInfo("predominant")
adverbs['predominantly']="predominantly"
nouns['prefab']=nounInfo("prefab")
nouns['prefabrication']=nounInfo("prefabrication")
nouns['preface']=nounInfo("preface")
adjectives['prefatory']=adjInfo("prefatory")
nouns['prefect']=nounInfo("prefect")
adjectives['prefectural']=adjInfo("prefectural")
nouns['prefecture']=nounInfo("prefecture")
adjectives['preferable']=adjInfo("preferable")
adverbs['preferably']="preferably"
nouns['preference']=nounInfo("preference")
adjectives['preferential']=adjInfo("preferential")
nouns['preferment']=nounInfo("preferment")
nouns['prefix']=nounInfo("prefix")
nouns['pregnancy']=nounInfo("pregnancy")
adjectives['pregnant']=adjInfo("pregnant")
adjectives['prehensile']=adjInfo("prehensile")
adjectives['prehistoric']=adjInfo("prehistoric")
adjectives['prehistorical']=adjInfo("prehistorical")
nouns['prehistory']=nounInfo("prehistory")
nouns['prejudgement']=nounInfo("prejudgement")
nouns['prejudice']=nounInfo("prejudice")
adjectives['prejudicial']=adjInfo("prejudicial")
nouns['prelacy']=nounInfo("prelacy")
nouns['prelate']=nounInfo("prelate")
nouns['prelim']=nounInfo("prelim")
adjectives['preliminary']=adjInfo("preliminary")
nouns['preliminary']=nounInfo("preliminary")
nouns['prelude']=nounInfo("prelude")
adjectives['premarital']=adjInfo("premarital")
adjectives['premature']=adjInfo("premature")
adverbs['prematurely']="prematurely"
nouns['premeditation']=nounInfo("premeditation")
adjectives['premier']=adjInfo("premier")
nouns['premier']=nounInfo("premier")
nouns['premiership']=nounInfo("premiership")
nouns['premise']=nounInfo("premise")
nouns['premiss']=nounInfo("premiss")
nouns['premium']=nounInfo("premium")
nouns['premonition']=nounInfo("premonition")
adjectives['premonitory']=adjInfo("premonitory")
adjectives['prenatal']=adjInfo("prenatal")
nouns['prentice']=nounInfo("prentice")
nouns['preoccupation']=nounInfo("preoccupation")
adjectives['preoccupied']=adjInfo("preoccupied")
nouns['prep']=nounInfo("prep")
adjectives['prepacked']=adjInfo("prepacked")
nouns['preparation']=nounInfo("preparation")
adjectives['preparatory']=adjInfo("preparatory")
nouns['preparedness']=nounInfo("preparedness")
nouns['prepayment']=nounInfo("prepayment")
nouns['preponderance']=nounInfo("preponderance")
adjectives['preponderant']=adjInfo("preponderant")
adverbs['preponderantly']="preponderantly"
nouns['preposition']=nounInfo("preposition")
adjectives['prepositional']=adjInfo("prepositional")
adjectives['prepossessing']=adjInfo("prepossessing")
nouns['prepossession']=nounInfo("prepossession")
adjectives['preposterous']=adjInfo("preposterous")
adverbs['preposterously']="preposterously"
nouns['prepuce']=nounInfo("prepuce")
adjectives['prerequisite']=adjInfo("prerequisite")
nouns['prerequisite']=nounInfo("prerequisite")
nouns['prerogative']=nounInfo("prerogative")
nouns['presage']=nounInfo("presage")
nouns['presbyter']=nounInfo("presbyter")
nouns['presbytery']=nounInfo("presbytery")
nouns['prescience']=nounInfo("prescience")
adjectives['prescient']=adjInfo("prescient")
adverbs['presciently']="presciently"
nouns['prescript']=nounInfo("prescript")
nouns['prescription']=nounInfo("prescription")
adjectives['prescriptive']=adjInfo("prescriptive")
nouns['presence']=nounInfo("presence")
adjectives['present']=adjInfo("present")
nouns['present']=nounInfo("present")
adjectives['presentable']=adjInfo("presentable")
adverbs['presentably']="presentably"
nouns['presentation']=nounInfo("presentation")
nouns['presentiment']=nounInfo("presentiment")
adverbs['presently']="presently"
adjectives['preservable']=adjInfo("preservable")
nouns['preservation']=nounInfo("preservation")
adjectives['preservative']=adjInfo("preservative")
nouns['preservative']=nounInfo("preservative")
nouns['preserve']=nounInfo("preserve")
nouns['preserver']=nounInfo("preserver")
nouns['presidency']=nounInfo("presidency")
nouns['president']=nounInfo("president")
adjectives['presidential']=adjInfo("presidential")
nouns['presidium']=nounInfo("presidium")
nouns['press']=nounInfo("press")
adjectives['pressing']=adjInfo("pressing")
nouns['pressing']=nounInfo("pressing")
adverbs['pressingly']="pressingly"
nouns['pressmark']=nounInfo("pressmark")
nouns['pressure']=nounInfo("pressure")
adjectives['pressurized']=adjInfo("pressurized")
nouns['prestidigitation']=nounInfo("prestidigitation")
nouns['prestidigitator']=nounInfo("prestidigitator")
nouns['prestige']=nounInfo("prestige")
adjectives['prestigious']=adjInfo("prestigious")
adjectives['prestissimo']=adjInfo("prestissimo")
adverbs['prestissimo']="prestissimo"
adjectives['presto']=adjInfo("presto")
adverbs['presto']="presto"
adjectives['prestressed']=adjInfo("prestressed")
adjectives['presumable']=adjInfo("presumable")
adverbs['presumably']="presumably"
adjectives['presuming']=adjInfo("presuming")
nouns['presumption']=nounInfo("presumption")
adjectives['presumptive']=adjInfo("presumptive")
adverbs['presumptively']="presumptively"
adjectives['presumptuous']=adjInfo("presumptuous")
adverbs['presumptuously']="presumptuously"
nouns['presupposition']=nounInfo("presupposition")
nouns['pretence']=nounInfo("pretence")
adverbs['pretendedly']="pretendedly"
nouns['pretender']=nounInfo("pretender")
nouns['pretension']=nounInfo("pretension")
adjectives['pretentious']=adjInfo("pretentious")
adverbs['pretentiously']="pretentiously"
nouns['pretentiousness']=nounInfo("pretentiousness")
adjectives['preterit']=adjInfo("preterit")
nouns['preterit']=nounInfo("preterit")
adjectives['preterite']=adjInfo("preterite")
nouns['preterite']=nounInfo("preterite")
adjectives['preternatural']=adjInfo("preternatural")
adverbs['preternaturally']="preternaturally"
nouns['pretext']=nounInfo("pretext")
nouns['pretor']=nounInfo("pretor")
adverbs['prettily']="prettily"
nouns['prettiness']=nounInfo("prettiness")
adjectives['pretty']=adjInfo("pretty")
adverbs['pretty']="pretty"
nouns['pretty']=nounInfo("pretty")
nouns['pretzel']=nounInfo("pretzel")
adjectives['prevailing']=adjInfo("prevailing")
nouns['prevalence']=nounInfo("prevalence")
adjectives['prevalent']=adjInfo("prevalent")
nouns['prevarication']=nounInfo("prevarication")
adjectives['preventable']=adjInfo("preventable")
nouns['preventative']=nounInfo("preventative")
nouns['prevention']=nounInfo("prevention")
adjectives['preventive']=adjInfo("preventive")
nouns['preview']=nounInfo("preview")
adjectives['previous']=adjInfo("previous")
adverbs['previously']="previously"
nouns['prevision']=nounInfo("prevision")
nouns['prey']=nounInfo("prey")
nouns['price']=nounInfo("price")
adjectives['priceless']=adjInfo("priceless")
adjectives['pricey']=adjInfo("pricey")
nouns['prick']=nounInfo("prick")
nouns['pricker']=nounInfo("pricker")
nouns['pricking']=nounInfo("pricking")
nouns['prickle']=nounInfo("prickle")
adjectives['prickly']=adjInfo("prickly")
nouns['pride']=nounInfo("pride")
nouns['priest']=nounInfo("priest").addAttributes({"g":"m"})
nouns['priestcraft']=nounInfo("priestcraft")
nouns['priestess']=nounInfo("priestess").addAttributes({"g":"f"})
nouns['priesthood']=nounInfo("priesthood")
adjectives['priestlike']=adjInfo("priestlike")
adjectives['priestly']=adjInfo("priestly")
nouns['prig']=nounInfo("prig")
adjectives['priggish']=adjInfo("priggish")
adverbs['priggishly']="priggishly"
nouns['priggishness']=nounInfo("priggishness")
adjectives['prim']=adjInfo("prim")
adjectives['prima']=adjInfo("prima")
nouns['primacy']=nounInfo("primacy")
adjectives['primaeval']=adjInfo("primaeval")
adjectives['primal']=adjInfo("primal")
adverbs['primarily']="primarily"
adjectives['primary']=adjInfo("primary")
nouns['primary']=nounInfo("primary")
nouns['primate']=nounInfo("primate")
adjectives['prime']=adjInfo("prime")
nouns['prime']=nounInfo("prime")
nouns['primer']=nounInfo("primer")
adjectives['primeval']=adjInfo("primeval")
nouns['priming']=nounInfo("priming")
adjectives['primitive']=adjInfo("primitive")
nouns['primitive']=nounInfo("primitive")
adverbs['primitively']="primitively"
nouns['primitiveness']=nounInfo("primitiveness")
adverbs['primly']="primly"
nouns['primness']=nounInfo("primness")
nouns['primogeniture']=nounInfo("primogeniture")
adjectives['primordial']=adjInfo("primordial")
nouns['primrose']=nounInfo("primrose")
nouns['primula']=nounInfo("primula")
nouns['primus']=nounInfo("primus")
nouns['prince']=nounInfo("prince").addAttributes({"g":"m"})
nouns['princedom']=nounInfo("princedom")
adjectives['princely']=adjInfo("princely")
nouns['princess']=nounInfo("princess").addAttributes({"g":"f"})
adjectives['principal']=adjInfo("principal")
nouns['principal']=nounInfo("principal").addAttributes({"g":"x"})
nouns['principality']=nounInfo("principality")
adverbs['principally']="principally"
nouns['principle']=nounInfo("principle")
adjectives['principled']=adjInfo("principled")
nouns['print']=nounInfo("print")
adjectives['printable']=adjInfo("printable")
nouns['printer']=nounInfo("printer")
nouns['printing']=nounInfo("printing")
adjectives['prior']=adjInfo("prior")
nouns['prior']=nounInfo("prior")
nouns['prioress']=nounInfo("prioress")
nouns['priority']=nounInfo("priority")
nouns['priory']=nounInfo("priory")
nouns['prism']=nounInfo("prism")
adjectives['prismatic']=adjInfo("prismatic")
nouns['prison']=nounInfo("prison")
nouns['prisoner']=nounInfo("prisoner").addAttributes({"g":"x"})
adjectives['pristine']=adjInfo("pristine")
nouns['prithee']=nounInfo("prithee")
nouns['privacy']=nounInfo("privacy")
adjectives['private']=adjInfo("private")
nouns['private']=nounInfo("private")
nouns['privateer']=nounInfo("privateer")
adverbs['privately']="privately"
nouns['privation']=nounInfo("privation")
nouns['privatization']=nounInfo("privatization")
adjectives['privatized']=adjInfo("privatized")
nouns['privet']=nounInfo("privet")
nouns['privilege']=nounInfo("privilege")
adjectives['privileged']=adjInfo("privileged")
adverbs['privily']="privily"
adjectives['privy']=adjInfo("privy")
nouns['privy']=nounInfo("privy")
nouns['prize']=nounInfo("prize")
adverbs['pro']="pro"
nouns['pro']=nounInfo("pro")
nouns['probability']=nounInfo("probability")
adjectives['probable']=adjInfo("probable")
nouns['probable']=nounInfo("probable")
adverbs['probably']="probably"
nouns['probate']=nounInfo("probate")
nouns['probation']=nounInfo("probation")
adjectives['probationary']=adjInfo("probationary")
nouns['probationer']=nounInfo("probationer")
nouns['probe']=nounInfo("probe")
nouns['probity']=nounInfo("probity")
nouns['problem']=nounInfo("problem")
adjectives['problematic']=adjInfo("problematic")
adverbs['problematically']="problematically"
nouns['proboscis']=nounInfo("proboscis")
adjectives['procedural']=adjInfo("procedural")
nouns['procedure']=nounInfo("procedure")
nouns['proceeding']=nounInfo("proceeding")
nouns['proceeds']=nounInfo("proceeds")
nouns['process']=nounInfo("process")
nouns['procession']=nounInfo("procession")
adjectives['processional']=adjInfo("processional")
nouns['proclamation']=nounInfo("proclamation")
nouns['proclivity']=nounInfo("proclivity")
nouns['proconsul']=nounInfo("proconsul")
adjectives['proconsular']=adjInfo("proconsular")
nouns['proconsulate']=nounInfo("proconsulate")
nouns['procrastination']=nounInfo("procrastination")
nouns['procreation']=nounInfo("procreation")
nouns['proctor']=nounInfo("proctor")
adjectives['procurable']=adjInfo("procurable")
nouns['procurator']=nounInfo("procurator")
nouns['procurement']=nounInfo("procurement")
nouns['procurer']=nounInfo("procurer")
nouns['procuress']=nounInfo("procuress")
nouns['prod']=nounInfo("prod")
adjectives['prodigal']=adjInfo("prodigal")
nouns['prodigal']=nounInfo("prodigal")
nouns['prodigality']=nounInfo("prodigality")
adverbs['prodigally']="prodigally"
adjectives['prodigious']=adjInfo("prodigious")
adverbs['prodigiously']="prodigiously"
nouns['prodigy']=nounInfo("prodigy")
nouns['produce']=nounInfo("produce")
nouns['producer']=nounInfo("producer")
nouns['product']=nounInfo("product")
nouns['production']=nounInfo("production")
adjectives['productive']=adjInfo("productive")
adverbs['productively']="productively"
nouns['productivity']=nounInfo("productivity")
nouns['profanation']=nounInfo("profanation")
adjectives['profane']=adjInfo("profane")
adverbs['profanely']="profanely"
nouns['profaneness']=nounInfo("profaneness")
nouns['profanity']=nounInfo("profanity")
adjectives['professed']=adjInfo("professed")
adverbs['professedly']="professedly"
nouns['profession']=nounInfo("profession")
adjectives['professional']=adjInfo("professional")
nouns['professional']=nounInfo("professional").addAttributes({"g":"x"})
nouns['professionalism']=nounInfo("professionalism")
adverbs['professionally']="professionally"
nouns['professor']=nounInfo("professor").addAttributes({"g":"x"})
adjectives['professorial']=adjInfo("professorial")
nouns['professorship']=nounInfo("professorship")
nouns['proffer']=nounInfo("proffer")
nouns['proficiency']=nounInfo("proficiency")
adjectives['proficient']=adjInfo("proficient")
adverbs['proficiently']="proficiently"
nouns['profile']=nounInfo("profile")
nouns['profit']=nounInfo("profit")
adjectives['profitable']=adjInfo("profitable")
adverbs['profitably']="profitably"
nouns['profiteer']=nounInfo("profiteer")
adjectives['profitless']=adjInfo("profitless")
adverbs['profitlessly']="profitlessly"
nouns['profligacy']=nounInfo("profligacy")
adjectives['profligate']=adjInfo("profligate")
nouns['profligate']=nounInfo("profligate")
adjectives['profound']=adjInfo("profound")
adverbs['profoundly']="profoundly"
nouns['profundity']=nounInfo("profundity")
adjectives['profuse']=adjInfo("profuse")
adverbs['profusely']="profusely"
nouns['profuseness']=nounInfo("profuseness")
nouns['profusion']=nounInfo("profusion")
nouns['progenitor']=nounInfo("progenitor")
nouns['progeny']=nounInfo("progeny")
nouns['prognosis']=nounInfo("prognosis")
adjectives['prognostic']=adjInfo("prognostic")
nouns['prognostic']=nounInfo("prognostic")
nouns['prognostication']=nounInfo("prognostication")
nouns['program']=nounInfo("program")
nouns['programme']=nounInfo("programme")
nouns['programmer']=nounInfo("programmer")
nouns['progress']=nounInfo("progress")
nouns['progression']=nounInfo("progression")
adjectives['progressive']=adjInfo("progressive")
nouns['progressive']=nounInfo("progressive")
adverbs['progressively']="progressively"
nouns['progressiveness']=nounInfo("progressiveness")
nouns['prohibition']=nounInfo("prohibition")
nouns['prohibitionist']=nounInfo("prohibitionist")
adjectives['prohibitive']=adjInfo("prohibitive")
adverbs['prohibitively']="prohibitively"
adjectives['prohibitory']=adjInfo("prohibitory")
nouns['project']=nounInfo("project")
adjectives['projectile']=adjInfo("projectile")
nouns['projectile']=nounInfo("projectile")
nouns['projection']=nounInfo("projection")
nouns['projectionist']=nounInfo("projectionist")
nouns['projector']=nounInfo("projector")
nouns['prolapse']=nounInfo("prolapse")
nouns['prole']=nounInfo("prole")
adjectives['proletarian']=adjInfo("proletarian")
nouns['proletarian']=nounInfo("proletarian")
nouns['proletariat']=nounInfo("proletariat")
nouns['proliferation']=nounInfo("proliferation")
adjectives['prolific']=adjInfo("prolific")
adjectives['prolix']=adjInfo("prolix")
nouns['prolixity']=nounInfo("prolixity")
nouns['prologue']=nounInfo("prologue")
nouns['prolongation']=nounInfo("prolongation")
adjectives['prolonged']=adjInfo("prolonged")
nouns['prom']=nounInfo("prom")
nouns['promenade']=nounInfo("promenade")
nouns['prominence']=nounInfo("prominence")
adjectives['prominent']=adjInfo("prominent")
adverbs['prominently']="prominently"
nouns['promiscuity']=nounInfo("promiscuity")
adjectives['promiscuous']=adjInfo("promiscuous")
adverbs['promiscuously']="promiscuously"
nouns['promise']=nounInfo("promise")
adjectives['promising']=adjInfo("promising")
adverbs['promisingly']="promisingly"
adjectives['promissory']=adjInfo("promissory")
nouns['promontory']=nounInfo("promontory")
nouns['promoter']=nounInfo("promoter")
nouns['promotion']=nounInfo("promotion")
adjectives['prompt']=adjInfo("prompt")
nouns['prompt']=nounInfo("prompt")
nouns['prompter']=nounInfo("prompter")
nouns['promptitude']=nounInfo("promptitude")
adverbs['promptly']="promptly"
nouns['promptness']=nounInfo("promptness")
nouns['promulgation']=nounInfo("promulgation")
adjectives['prone']=adjInfo("prone")
nouns['proneness']=nounInfo("proneness")
nouns['prong']=nounInfo("prong")
adjectives['pronged']=adjInfo("pronged")
adjectives['pronominal']=adjInfo("pronominal")
nouns['pronoun']=nounInfo("pronoun")
adjectives['pronounceable']=adjInfo("pronounceable")
adjectives['pronounced']=adjInfo("pronounced")
nouns['pronouncement']=nounInfo("pronouncement")
adverbs['pronto']="pronto"
nouns['pronunciamento']=nounInfo("pronunciamento")
nouns['pronunciation']=nounInfo("pronunciation")
adjectives['proof']=adjInfo("proof")
nouns['proof']=nounInfo("proof")
nouns['prop']=nounInfo("prop")
nouns['propaganda']=nounInfo("propaganda")
nouns['propagandist']=nounInfo("propagandist")
nouns['propagation']=nounInfo("propagation")
nouns['propagator']=nounInfo("propagator")
nouns['propane']=nounInfo("propane")
adjectives['propellant']=adjInfo("propellant")
nouns['propellant']=nounInfo("propellant")
adjectives['propellent']=adjInfo("propellent")
nouns['propellent']=nounInfo("propellent")
nouns['propeller']=nounInfo("propeller")
nouns['propensity']=nounInfo("propensity")
adjectives['proper']=adjInfo("proper")
adverbs['properly']="properly"
adjectives['propertied']=adjInfo("propertied")
nouns['property']=nounInfo("property")
nouns['prophecy']=nounInfo("prophecy")
nouns['prophet']=nounInfo("prophet").addAttributes({"g":"m"})
nouns['prophetess']=nounInfo("prophetess").addAttributes({"g":"f"})
adjectives['prophetic']=adjInfo("prophetic")
adjectives['prophetical']=adjInfo("prophetical")
adverbs['prophetically']="prophetically"
adjectives['prophylactic']=adjInfo("prophylactic")
nouns['prophylactic']=nounInfo("prophylactic")
nouns['prophylaxis']=nounInfo("prophylaxis")
nouns['propinquity']=nounInfo("propinquity")
nouns['propitiation']=nounInfo("propitiation")
adjectives['propitiatory']=adjInfo("propitiatory")
adjectives['propitious']=adjInfo("propitious")
adverbs['propitiously']="propitiously"
nouns['proponent']=nounInfo("proponent")
nouns['proportion']=nounInfo("proportion")
adjectives['proportionable']=adjInfo("proportionable")
adjectives['proportional']=adjInfo("proportional")
adverbs['proportionally']="proportionally"
adjectives['proportionate']=adjInfo("proportionate")
adverbs['proportionately']="proportionately"
nouns['proposal']=nounInfo("proposal")
nouns['proposer']=nounInfo("proposer")
nouns['proposition']=nounInfo("proposition")
adjectives['proprietary']=adjInfo("proprietary")
nouns['proprietor']=nounInfo("proprietor").addAttributes({"g":"x"})
nouns['proprietress']=nounInfo("proprietress").addAttributes({"g":"f"})
nouns['propriety']=nounInfo("propriety")
nouns['propulsion']=nounInfo("propulsion")
adjectives['propulsive']=adjInfo("propulsive")
nouns['prorogation']=nounInfo("prorogation")
adjectives['prosaic']=adjInfo("prosaic")
adverbs['prosaically']="prosaically"
nouns['proscenium']=nounInfo("proscenium")
nouns['proscription']=nounInfo("proscription")
nouns['prose']=nounInfo("prose")
nouns['prosecution']=nounInfo("prosecution")
nouns['prosecutor']=nounInfo("prosecutor").addAttributes({"g":"x"})
nouns['proselyte']=nounInfo("proselyte")
adverbs['prosily']="prosily"
nouns['prosiness']=nounInfo("prosiness")
nouns['prosody']=nounInfo("prosody")
nouns['prospect']=nounInfo("prospect")
adjectives['prospective']=adjInfo("prospective")
nouns['prospector']=nounInfo("prospector")
nouns['prospectus']=nounInfo("prospectus")
nouns['prosperity']=nounInfo("prosperity")
adjectives['prosperous']=adjInfo("prosperous")
adverbs['prosperously']="prosperously"
nouns['prostate']=nounInfo("prostate")
nouns['prostitute']=nounInfo("prostitute")
nouns['prostitution']=nounInfo("prostitution")
adjectives['prostrate']=adjInfo("prostrate")
nouns['prostration']=nounInfo("prostration")
adjectives['prosy']=adjInfo("prosy")
nouns['protagonist']=nounInfo("protagonist")
adjectives['protean']=adjInfo("protean")
adverbs['protectingly']="protectingly"
nouns['protection']=nounInfo("protection")
nouns['protectionism']=nounInfo("protectionism")
nouns['protectionist']=nounInfo("protectionist")
adjectives['protective']=adjInfo("protective")
adverbs['protectively']="protectively"
nouns['protector']=nounInfo("protector").addAttributes({"g":"x"})
nouns['protectorate']=nounInfo("protectorate")
nouns['protein']=nounInfo("protein")
nouns['protest']=nounInfo("protest")
nouns['protestation']=nounInfo("protestation")
nouns['protester']=nounInfo("protester")
adverbs['protestingly']="protestingly"
nouns['protocol']=nounInfo("protocol")
nouns['proton']=nounInfo("proton")
nouns['protoplasm']=nounInfo("protoplasm")
nouns['prototype']=nounInfo("prototype")
nouns['protozoa']=nounInfo("protozoa")
nouns['protraction']=nounInfo("protraction")
nouns['protractor']=nounInfo("protractor")
nouns['protrusion']=nounInfo("protrusion")
adjectives['protrusive']=adjInfo("protrusive")
nouns['protuberance']=nounInfo("protuberance")
adjectives['protuberant']=adjInfo("protuberant")
adjectives['proud']=adjInfo("proud")
adverbs['proudly']="proudly"
adjectives['provable']=adjInfo("provable")
nouns['provenance']=nounInfo("provenance")
nouns['provender']=nounInfo("provender")
nouns['proverb']=nounInfo("proverb")
adjectives['proverbial']=adjInfo("proverbial")
adverbs['proverbially']="proverbially"
nouns['providence']=nounInfo("providence")
adjectives['provident']=adjInfo("provident")
adjectives['providential']=adjInfo("providential")
adverbs['providentially']="providentially"
adverbs['providently']="providently"
nouns['provider']=nounInfo("provider")
nouns['province']=nounInfo("province")
adjectives['provincial']=adjInfo("provincial")
nouns['provincial']=nounInfo("provincial")
nouns['provincialism']=nounInfo("provincialism")
adverbs['provincially']="provincially"
nouns['provision']=nounInfo("provision")
adjectives['provisional']=adjInfo("provisional")
adverbs['provisionally']="provisionally"
nouns['proviso']=nounInfo("proviso")
adjectives['provisory']=adjInfo("provisory")
nouns['provocation']=nounInfo("provocation")
adjectives['provocative']=adjInfo("provocative")
adverbs['provocatively']="provocatively"
adjectives['provoking']=adjInfo("provoking")
adverbs['provokingly']="provokingly"
nouns['provost']=nounInfo("provost")
nouns['prow']=nounInfo("prow")
nouns['prowess']=nounInfo("prowess")
nouns['prowl']=nounInfo("prowl")
nouns['prowler']=nounInfo("prowler")
adverbs['prox']="prox"
adjectives['proximate']=adjInfo("proximate")
nouns['proximity']=nounInfo("proximity")
adjectives['proximo']=adjInfo("proximo")
nouns['proxy']=nounInfo("proxy")
nouns['prude']=nounInfo("prude")
nouns['prudence']=nounInfo("prudence")
adjectives['prudent']=adjInfo("prudent")
adjectives['prudential']=adjInfo("prudential")
adverbs['prudently']="prudently"
nouns['prudery']=nounInfo("prudery")
adjectives['prudish']=adjInfo("prudish")
adverbs['prudishly']="prudishly"
nouns['prune']=nounInfo("prune")
nouns['pruner']=nounInfo("pruner")
nouns['pruning']=nounInfo("pruning")
nouns['prurience']=nounInfo("prurience")
nouns['pruriency']=nounInfo("pruriency")
adjectives['prurient']=adjInfo("prurient")
adverbs['pruriently']="pruriently"
adjectives['prussic']=adjInfo("prussic")
adverbs['pryingly']="pryingly"
nouns['psalm']=nounInfo("psalm")
nouns['psalmist']=nounInfo("psalmist")
nouns['psalmody']=nounInfo("psalmody")
nouns['psalter']=nounInfo("psalter")
nouns['psaltery']=nounInfo("psaltery")
nouns['psephologist']=nounInfo("psephologist")
nouns['psephology']=nounInfo("psephology")
nouns['pseud']=nounInfo("pseud")
adjectives['pseudo']=adjInfo("pseudo")
nouns['pseudo']=nounInfo("pseudo")
nouns['pseudonym']=nounInfo("pseudonym")
adjectives['pseudonymous']=adjInfo("pseudonymous")
adverbs['pseudonymously']="pseudonymously"
nouns['pshaw']=nounInfo("pshaw")
nouns['psittacosis']=nounInfo("psittacosis")
nouns['psyche']=nounInfo("psyche")
adjectives['psychedelic']=adjInfo("psychedelic")
adjectives['psychiatric']=adjInfo("psychiatric")
nouns['psychiatrist']=nounInfo("psychiatrist")
nouns['psychiatry']=nounInfo("psychiatry")
adjectives['psychic']=adjInfo("psychic")
nouns['psychic']=nounInfo("psychic")
adjectives['psychical']=adjInfo("psychical")
adjectives['psychological']=adjInfo("psychological")
adverbs['psychologically']="psychologically"
nouns['psychologist']=nounInfo("psychologist")
nouns['psychology']=nounInfo("psychology")
nouns['psychopath']=nounInfo("psychopath")
adjectives['psychopathic']=adjInfo("psychopathic")
nouns['psychosis']=nounInfo("psychosis")
adjectives['psychosomatic']=adjInfo("psychosomatic")
adverbs['psychosomatically']="psychosomatically"
nouns['psychotherapy']=nounInfo("psychotherapy")
adjectives['psychotic']=adjInfo("psychotic")
nouns['ptarmigan']=nounInfo("ptarmigan")
nouns['pterodactyl']=nounInfo("pterodactyl")
nouns['ptomaine']=nounInfo("ptomaine")
nouns['pub']=nounInfo("pub")
nouns['puberty']=nounInfo("puberty")
adjectives['pubic']=adjInfo("pubic")
adjectives['public']=adjInfo("public")
nouns['public']=nounInfo("public")
nouns['publican']=nounInfo("publican")
nouns['publication']=nounInfo("publication")
nouns['publicist']=nounInfo("publicist")
nouns['publicity']=nounInfo("publicity")
adverbs['publicly']="publicly"
nouns['publisher']=nounInfo("publisher")
nouns['puce']=nounInfo("puce")
nouns['puck']=nounInfo("puck")
nouns['pucker']=nounInfo("pucker")
adjectives['puckish']=adjInfo("puckish")
adverbs['puckishly']="puckishly"
nouns['pud']=nounInfo("pud")
nouns['pudden']=nounInfo("pudden")
nouns['pudding']=nounInfo("pudding")
nouns['puddle']=nounInfo("puddle")
nouns['puddler']=nounInfo("puddler")
nouns['pudendum']=nounInfo("pudendum")
adjectives['pudgy']=adjInfo("pudgy")
nouns['pueblo']=nounInfo("pueblo")
adjectives['puerile']=adjInfo("puerile")
nouns['puerility']=nounInfo("puerility")
adjectives['puerperal']=adjInfo("puerperal")
nouns['puff']=nounInfo("puff")
nouns['puffin']=nounInfo("puffin")
nouns['puffiness']=nounInfo("puffiness")
adjectives['puffy']=adjInfo("puffy")
nouns['pug']=nounInfo("pug")
nouns['pugilism']=nounInfo("pugilism")
nouns['pugilist']=nounInfo("pugilist")
adjectives['pugilistic']=adjInfo("pugilistic")
adjectives['pugnacious']=adjInfo("pugnacious")
adverbs['pugnaciously']="pugnaciously"
nouns['pugnacity']=nounInfo("pugnacity")
nouns['puissance']=nounInfo("puissance")
adjectives['puissant']=adjInfo("puissant")
nouns['puke']=nounInfo("puke")
adjectives['pukka']=adjInfo("pukka")
nouns['pulchritude']=nounInfo("pulchritude")
adjectives['pulchritudinous']=adjInfo("pulchritudinous")
nouns['pull']=nounInfo("pull")
nouns['pullet']=nounInfo("pullet")
nouns['pulley']=nounInfo("pulley")
nouns['pullover']=nounInfo("pullover")
adjectives['pulmonary']=adjInfo("pulmonary")
nouns['pulp']=nounInfo("pulp")
nouns['pulpit']=nounInfo("pulpit")
adjectives['pulpy']=adjInfo("pulpy")
nouns['pulque']=nounInfo("pulque")
nouns['pulsar']=nounInfo("pulsar")
nouns['pulsation']=nounInfo("pulsation")
nouns['pulse']=nounInfo("pulse")
nouns['puma']=nounInfo("puma")
nouns['pumice']=nounInfo("pumice")
nouns['pump']=nounInfo("pump")
nouns['pumpernickel']=nounInfo("pumpernickel")
nouns['pumpkin']=nounInfo("pumpkin")
nouns['pun']=nounInfo("pun")
nouns['punch']=nounInfo("punch")
nouns['punctilio']=nounInfo("punctilio")
adjectives['punctilious']=adjInfo("punctilious")
adverbs['punctiliously']="punctiliously"
nouns['punctiliousness']=nounInfo("punctiliousness")
adjectives['punctual']=adjInfo("punctual")
nouns['punctuality']=nounInfo("punctuality")
adverbs['punctually']="punctually"
nouns['punctuation']=nounInfo("punctuation")
nouns['puncture']=nounInfo("puncture")
nouns['pundit']=nounInfo("pundit")
nouns['pungency']=nounInfo("pungency")
adjectives['pungent']=adjInfo("pungent")
adverbs['pungently']="pungently"
adverbs['punily']="punily"
adjectives['punishable']=adjInfo("punishable")
nouns['punishment']=nounInfo("punishment")
adjectives['punitive']=adjInfo("punitive")
nouns['punk']=nounInfo("punk")
nouns['punkah']=nounInfo("punkah")
nouns['punnet']=nounInfo("punnet")
nouns['punster']=nounInfo("punster")
nouns['punt']=nounInfo("punt")
nouns['punter']=nounInfo("punter")
adjectives['puny']=adjInfo("puny")
nouns['pup']=nounInfo("pup")
nouns['pupa']=nounInfo("pupa")
nouns['pupil']=nounInfo("pupil").addAttributes({"g":"x"})
nouns['puppet']=nounInfo("puppet")
nouns['puppeteer']=nounInfo("puppeteer")
nouns['puppy']=nounInfo("puppy")
adjectives['purblind']=adjInfo("purblind")
adjectives['purchasable']=adjInfo("purchasable")
nouns['purchase']=nounInfo("purchase")
nouns['purchaser']=nounInfo("purchaser")
nouns['purdah']=nounInfo("purdah")
adjectives['pure']=adjInfo("pure")
adverbs['purely']="purely"
nouns['pureness']=nounInfo("pureness")
nouns['purgation']=nounInfo("purgation")
adjectives['purgative']=adjInfo("purgative")
nouns['purgative']=nounInfo("purgative")
adjectives['purgatorial']=adjInfo("purgatorial")
nouns['purgatory']=nounInfo("purgatory")
nouns['purge']=nounInfo("purge")
nouns['purification']=nounInfo("purification")
nouns['purist']=nounInfo("purist")
adjectives['puritan']=adjInfo("puritan")
nouns['puritan']=nounInfo("puritan")
adjectives['puritanical']=adjInfo("puritanical")
adverbs['puritanically']="puritanically"
nouns['puritanism']=nounInfo("puritanism")
nouns['purity']=nounInfo("purity")
nouns['purl']=nounInfo("purl")
nouns['purlieus']=nounInfo("purlieus")
adjectives['purple']=adjInfo("purple")
nouns['purple']=nounInfo("purple")
adjectives['purplish']=adjInfo("purplish")
nouns['purport']=nounInfo("purport")
nouns['purpose']=nounInfo("purpose")
adjectives['purposeful']=adjInfo("purposeful")
adverbs['purposefully']="purposefully"
adjectives['purposeless']=adjInfo("purposeless")
adverbs['purposelessly']="purposelessly"
adverbs['purposely']="purposely"
adjectives['purposive']=adjInfo("purposive")
nouns['purr']=nounInfo("purr")
nouns['purse']=nounInfo("purse")
nouns['purser']=nounInfo("purser")
nouns['pursuance']=nounInfo("pursuance")
adjectives['pursuant']=adjInfo("pursuant")
nouns['pursuer']=nounInfo("pursuer")
nouns['pursuit']=nounInfo("pursuit")
adjectives['pursy']=adjInfo("pursy")
nouns['purulence']=nounInfo("purulence")
adjectives['purulent']=adjInfo("purulent")
nouns['purveyance']=nounInfo("purveyance")
nouns['purveyor']=nounInfo("purveyor")
nouns['purview']=nounInfo("purview")
nouns['pus']=nounInfo("pus")
nouns['push']=nounInfo("push")
nouns['pushchair']=nounInfo("pushchair")
nouns['pusher']=nounInfo("pusher")
adjectives['pushful']=adjInfo("pushful")
adjectives['pushing']=adjInfo("pushing")
nouns['pusillanimity']=nounInfo("pusillanimity")
adjectives['pusillanimous']=adjInfo("pusillanimous")
nouns['puss']=nounInfo("puss")
nouns['pussy']=nounInfo("pussy")
nouns['pustule']=nounInfo("pustule")
nouns['put']=nounInfo("put")
adjectives['putative']=adjInfo("putative")
nouns['putrefaction']=nounInfo("putrefaction")
nouns['putrescence']=nounInfo("putrescence")
adjectives['putrescent']=adjInfo("putrescent")
adjectives['putrid']=adjInfo("putrid")
nouns['putridity']=nounInfo("putridity")
nouns['putsch']=nounInfo("putsch")
nouns['putt']=nounInfo("putt")
nouns['puttee']=nounInfo("puttee")
nouns['putty']=nounInfo("putty")
nouns['puzzle']=nounInfo("puzzle")
nouns['puzzlement']=nounInfo("puzzlement")
nouns['puzzler']=nounInfo("puzzler")
nouns['pygmy']=nounInfo("pygmy")
nouns['pyjamas']=nounInfo("pyjamas")
nouns['pylon']=nounInfo("pylon")
nouns['pyorrhoea']=nounInfo("pyorrhoea")
nouns['pyramid']=nounInfo("pyramid")
nouns['pyre']=nounInfo("pyre")
nouns['pyrites']=nounInfo("pyrites")
adjectives['pyrotechnic']=adjInfo("pyrotechnic")
nouns['pyrotechnic']=nounInfo("pyrotechnic")
nouns['pyrotechnics']=nounInfo("pyrotechnics")
nouns['python']=nounInfo("python")
nouns['pyx']=nounInfo("pyx")
nouns['quack']=nounInfo("quack")
nouns['quackery']=nounInfo("quackery")
nouns['quad']=nounInfo("quad")
nouns['quadrangle']=nounInfo("quadrangle")
adjectives['quadrangular']=adjInfo("quadrangular")
nouns['quadrant']=nounInfo("quadrant")
adjectives['quadratic']=adjInfo("quadratic")
adjectives['quadrilateral']=adjInfo("quadrilateral")
nouns['quadrilateral']=nounInfo("quadrilateral")
nouns['quadrille']=nounInfo("quadrille")
nouns['quadrillion']=nounInfo("quadrillion")
adjectives['quadrophonic']=adjInfo("quadrophonic")
nouns['quadrophony']=nounInfo("quadrophony")
nouns['quadruped']=nounInfo("quadruped")
adjectives['quadruple']=adjInfo("quadruple")
nouns['quadruple']=nounInfo("quadruple")
nouns['quadruplet']=nounInfo("quadruplet")
adjectives['quadruplicate']=adjInfo("quadruplicate")
nouns['quadruplicate']=nounInfo("quadruplicate")
nouns['quagga']=nounInfo("quagga")
nouns['quagmire']=nounInfo("quagmire")
nouns['quail']=nounInfo("quail")
adjectives['quaint']=adjInfo("quaint")
adverbs['quaintly']="quaintly"
nouns['quaintness']=nounInfo("quaintness")
nouns['quake']=nounInfo("quake")
nouns['qualification']=nounInfo("qualification")
adjectives['qualified']=adjInfo("qualified")
nouns['qualifier']=nounInfo("qualifier")
adjectives['qualitative']=adjInfo("qualitative")
adverbs['qualitatively']="qualitatively"
nouns['quality']=nounInfo("quality")
nouns['qualm']=nounInfo("qualm")
nouns['quandary']=nounInfo("quandary")
nouns['quango']=nounInfo("quango")
adjectives['quantitative']=adjInfo("quantitative")
adverbs['quantitatively']="quantitatively"
nouns['quantity']=nounInfo("quantity")
nouns['quantum']=nounInfo("quantum")
nouns['quarantine']=nounInfo("quarantine")
nouns['quark']=nounInfo("quark")
nouns['quarrel']=nounInfo("quarrel")
adjectives['quarrelsome']=adjInfo("quarrelsome")
nouns['quarry']=nounInfo("quarry")
nouns['quarryman']=nounInfo("quarryman")
nouns['quart']=nounInfo("quart")
nouns['quarter']=nounInfo("quarter")
nouns['quartering']=nounInfo("quartering")
adjectives['quarterly']=adjInfo("quarterly")
adverbs['quarterly']="quarterly"
nouns['quarterly']=nounInfo("quarterly")
nouns['quarterstaff']=nounInfo("quarterstaff")
nouns['quartet']=nounInfo("quartet")
nouns['quarto']=nounInfo("quarto")
nouns['quartz']=nounInfo("quartz")
nouns['quasar']=nounInfo("quasar")
nouns['quassia']=nounInfo("quassia")
nouns['quatercentenary']=nounInfo("quatercentenary")
nouns['quatrain']=nounInfo("quatrain")
nouns['quattrocento']=nounInfo("quattrocento")
nouns['quaver']=nounInfo("quaver")
nouns['quay']=nounInfo("quay")
adverbs['queasily']="queasily"
nouns['queasiness']=nounInfo("queasiness")
adjectives['queasy']=adjInfo("queasy")
nouns['queen']=nounInfo("queen").addAttributes({"g":"f"})
adjectives['queenly']=adjInfo("queenly")
adjectives['queer']=adjInfo("queer")
nouns['queer']=nounInfo("queer")
adverbs['queerly']="queerly"
nouns['queerness']=nounInfo("queerness")
adjectives['quenchless']=adjInfo("quenchless")
nouns['quern']=nounInfo("quern")
adjectives['querulous']=adjInfo("querulous")
adverbs['querulously']="querulously"
nouns['querulousness']=nounInfo("querulousness")
nouns['query']=nounInfo("query")
nouns['quest']=nounInfo("quest")
nouns['question']=nounInfo("question")
adjectives['questionable']=adjInfo("questionable")
adverbs['questionably']="questionably"
nouns['questioner']=nounInfo("questioner")
adverbs['questioningly']="questioningly"
nouns['questionnaire']=nounInfo("questionnaire")
nouns['quetzal']=nounInfo("quetzal")
nouns['queue']=nounInfo("queue")
nouns['quibble']=nounInfo("quibble")
nouns['quibbler']=nounInfo("quibbler")
adjectives['quibbling']=adjInfo("quibbling")
nouns['quiche']=nounInfo("quiche")
adjectives['quick']=adjInfo("quick")
adverbs['quick']="quick"
nouns['quick']=nounInfo("quick")
adverbs['quicker']="quicker"
adverbs['quickest']="quickest"
nouns['quickie']=nounInfo("quickie")
nouns['quicklime']=nounInfo("quicklime")
adverbs['quickly']="quickly"
nouns['quickness']=nounInfo("quickness")
nouns['quicksand']=nounInfo("quicksand")
adjectives['quickset']=adjInfo("quickset")
nouns['quicksilver']=nounInfo("quicksilver")
nouns['quickstep']=nounInfo("quickstep")
nouns['quid']=nounInfo("quid")
nouns['quiescence']=nounInfo("quiescence")
adjectives['quiescent']=adjInfo("quiescent")
adverbs['quiescently']="quiescently"
adjectives['quiet']=adjInfo("quiet")
nouns['quiet']=nounInfo("quiet")
nouns['quietism']=nounInfo("quietism")
nouns['quietist']=nounInfo("quietist")
adverbs['quietly']="quietly"
nouns['quietness']=nounInfo("quietness")
nouns['quietude']=nounInfo("quietude")
nouns['quietus']=nounInfo("quietus")
nouns['quiff']=nounInfo("quiff")
nouns['quill']=nounInfo("quill")
nouns['quilt']=nounInfo("quilt")
nouns['quin']=nounInfo("quin")
nouns['quince']=nounInfo("quince")
adjectives['quincentenary']=adjInfo("quincentenary")
nouns['quincentenary']=nounInfo("quincentenary")
nouns['quinine']=nounInfo("quinine")
nouns['quinsy']=nounInfo("quinsy")
nouns['quintal']=nounInfo("quintal")
nouns['quintessence']=nounInfo("quintessence")
nouns['quintet']=nounInfo("quintet")
nouns['quintuplet']=nounInfo("quintuplet")
nouns['quip']=nounInfo("quip")
nouns['quire']=nounInfo("quire")
nouns['quirk']=nounInfo("quirk")
nouns['quisling']=nounInfo("quisling")
adjectives['quit']=adjInfo("quit")
adverbs['quite']="quite"
adjectives['quits']=adjInfo("quits")
nouns['quittance']=nounInfo("quittance")
nouns['quitter']=nounInfo("quitter")
nouns['quiver']=nounInfo("quiver")
adjectives['quixotic']=adjInfo("quixotic")
adverbs['quixotically']="quixotically"
nouns['quiz']=nounInfo("quiz")
adjectives['quizzical']=adjInfo("quizzical")
adverbs['quizzically']="quizzically"
nouns['quoin']=nounInfo("quoin")
nouns['quoit']=nounInfo("quoit")
nouns['quorum']=nounInfo("quorum")
nouns['quota']=nounInfo("quota")
nouns['quotability']=nounInfo("quotability")
adjectives['quotable']=adjInfo("quotable")
nouns['quotation']=nounInfo("quotation")
nouns['quote']=nounInfo("quote")
adjectives['quotidian']=adjInfo("quotidian")
nouns['quotient']=nounInfo("quotient")
nouns['rabbi']=nounInfo("rabbi")
adjectives['rabbinical']=adjInfo("rabbinical")
nouns['rabbit']=nounInfo("rabbit")
nouns['rabble']=nounInfo("rabble")
adjectives['rabid']=adjInfo("rabid")
nouns['rabies']=nounInfo("rabies")
nouns['raccoon']=nounInfo("raccoon")
nouns['race']=nounInfo("race")
nouns['raceme']=nounInfo("raceme")
nouns['racer']=nounInfo("racer")
adjectives['racial']=adjInfo("racial")
nouns['racialism']=nounInfo("racialism")
nouns['racialist']=nounInfo("racialist")
adverbs['racially']="racially"
adverbs['racily']="racily"
nouns['raciness']=nounInfo("raciness")
nouns['racing']=nounInfo("racing")
nouns['racism']=nounInfo("racism")
nouns['racist']=nounInfo("racist")
nouns['rack']=nounInfo("rack")
nouns['racket']=nounInfo("racket")
nouns['racketeer']=nounInfo("racketeer")
nouns['racketeering']=nounInfo("racketeering")
nouns['raconteur']=nounInfo("raconteur")
nouns['racoon']=nounInfo("racoon")
nouns['racquet']=nounInfo("racquet")
adjectives['racy']=adjInfo("racy")
nouns['radar']=nounInfo("radar")
adjectives['radial']=adjInfo("radial")
nouns['radial']=nounInfo("radial")
adverbs['radially']="radially"
nouns['radiance']=nounInfo("radiance")
adjectives['radiant']=adjInfo("radiant")
adverbs['radiantly']="radiantly"
nouns['radiation']=nounInfo("radiation")
nouns['radiator']=nounInfo("radiator")
adjectives['radical']=adjInfo("radical")
nouns['radical']=nounInfo("radical")
nouns['radicalism']=nounInfo("radicalism")
adverbs['radically']="radically"
nouns['radicle']=nounInfo("radicle")
nouns['radio']=nounInfo("radio")
adjectives['radioactive']=adjInfo("radioactive")
nouns['radioactivity']=nounInfo("radioactivity")
adverbs['radiochemically']="radiochemically"
nouns['radiogram']=nounInfo("radiogram")
nouns['radiograph']=nounInfo("radiograph")
nouns['radiographer']=nounInfo("radiographer")
nouns['radiography']=nounInfo("radiography")
nouns['radioisotope']=nounInfo("radioisotope")
nouns['radiologist']=nounInfo("radiologist")
nouns['radiology']=nounInfo("radiology")
nouns['radish']=nounInfo("radish")
nouns['radium']=nounInfo("radium")
nouns['radius']=nounInfo("radius")
nouns['raffia']=nounInfo("raffia")
adjectives['raffish']=adjInfo("raffish")
adverbs['raffishly']="raffishly"
nouns['raffle']=nounInfo("raffle")
nouns['raft']=nounInfo("raft")
nouns['rafter']=nounInfo("rafter")
adjectives['raftered']=adjInfo("raftered")
nouns['raftsman']=nounInfo("raftsman")
nouns['rag']=nounInfo("rag")
nouns['ragamuffin']=nounInfo("ragamuffin")
nouns['rage']=nounInfo("rage")
adjectives['ragged']=adjInfo("ragged")
adverbs['raggedly']="raggedly"
nouns['raggedness']=nounInfo("raggedness")
nouns['raglan']=nounInfo("raglan")
nouns['ragout']=nounInfo("ragout")
nouns['ragtag']=nounInfo("ragtag")
nouns['ragtime']=nounInfo("ragtime")
nouns['rah']=nounInfo("rah")
nouns['raid']=nounInfo("raid")
nouns['raider']=nounInfo("raider")
nouns['rail']=nounInfo("rail")
nouns['railhead']=nounInfo("railhead")
nouns['railing']=nounInfo("railing")
nouns['raillery']=nounInfo("raillery")
nouns['railroad']=nounInfo("railroad")
nouns['railway']=nounInfo("railway")
nouns['raiment']=nounInfo("raiment")
nouns['rain']=nounInfo("rain")
nouns['rainbow']=nounInfo("rainbow")
nouns['raincoat']=nounInfo("raincoat")
nouns['raindrop']=nounInfo("raindrop")
nouns['rainfall']=nounInfo("rainfall")
adjectives['rainproof']=adjInfo("rainproof")
nouns['rainwater']=nounInfo("rainwater")
adjectives['rainy']=adjInfo("rainy")
nouns['raise']=nounInfo("raise")
nouns['raiser']=nounInfo("raiser")
nouns['raisin']=nounInfo("raisin")
nouns['raj']=nounInfo("raj")
nouns['rajah']=nounInfo("rajah")
nouns['rake']=nounInfo("rake")
adjectives['rakish']=adjInfo("rakish")
adverbs['rakishly']="rakishly"
nouns['rakishness']=nounInfo("rakishness")
adjectives['rallentando']=adjInfo("rallentando")
adverbs['rallentando']="rallentando"
nouns['rally']=nounInfo("rally")
nouns['ram']=nounInfo("ram")
nouns['ramble']=nounInfo("ramble")
nouns['rambler']=nounInfo("rambler")
adjectives['rambling']=adjInfo("rambling")
adjectives['rambunctious']=adjInfo("rambunctious")
nouns['ramification']=nounInfo("ramification")
nouns['ramjet']=nounInfo("ramjet")
nouns['ramp']=nounInfo("ramp")
nouns['rampage']=nounInfo("rampage")
adjectives['rampageous']=adjInfo("rampageous")
adjectives['rampant']=adjInfo("rampant")
adverbs['rampantly']="rampantly"
nouns['rampart']=nounInfo("rampart")
nouns['ramrod']=nounInfo("ramrod")
adjectives['ramshackle']=adjInfo("ramshackle")
nouns['ranch']=nounInfo("ranch")
nouns['rancher']=nounInfo("rancher")
adjectives['rancid']=adjInfo("rancid")
adjectives['rancorous']=adjInfo("rancorous")
nouns['rancour']=nounInfo("rancour")
nouns['rand']=nounInfo("rand")
nouns['random']=nounInfo("random")
adverbs['randomly']="randomly"
adjectives['randy']=adjInfo("randy")
nouns['ranee']=nounInfo("ranee")
nouns['range']=nounInfo("range")
nouns['ranger']=nounInfo("ranger")
nouns['rani']=nounInfo("rani")
adjectives['rank']=adjInfo("rank")
nouns['rank']=nounInfo("rank")
nouns['ranker']=nounInfo("ranker")
adverbs['rankly']="rankly"
nouns['rankness']=nounInfo("rankness")
nouns['ransom']=nounInfo("ransom")
nouns['rant']=nounInfo("rant")
nouns['ranter']=nounInfo("ranter")
nouns['rap']=nounInfo("rap")
adjectives['rapacious']=adjInfo("rapacious")
adverbs['rapaciously']="rapaciously"
nouns['rapacity']=nounInfo("rapacity")
nouns['rape']=nounInfo("rape")
adjectives['rapid']=adjInfo("rapid")
nouns['rapid']=nounInfo("rapid")
nouns['rapidity']=nounInfo("rapidity")
adverbs['rapidly']="rapidly"
nouns['rapier']=nounInfo("rapier")
nouns['rapine']=nounInfo("rapine")
nouns['rapist']=nounInfo("rapist")
nouns['rapport']=nounInfo("rapport")
nouns['rapprochement']=nounInfo("rapprochement")
nouns['rapscallion']=nounInfo("rapscallion")
adjectives['rapt']=adjInfo("rapt")
nouns['rapture']=nounInfo("rapture")
adjectives['rapturous']=adjInfo("rapturous")
adverbs['rapturously']="rapturously"
adjectives['rare']=adjInfo("rare")
nouns['rarebit']=nounInfo("rarebit")
nouns['rarefaction']=nounInfo("rarefaction")
adverbs['rarely']="rarely"
nouns['rareness']=nounInfo("rareness")
adjectives['raring']=adjInfo("raring")
nouns['rarity']=nounInfo("rarity")
nouns['rascal']=nounInfo("rascal")
adjectives['rascally']=adjInfo("rascally")
adjectives['rash']=adjInfo("rash")
nouns['rash']=nounInfo("rash")
nouns['rasher']=nounInfo("rasher")
adverbs['rashly']="rashly"
nouns['rashness']=nounInfo("rashness")
nouns['rasp']=nounInfo("rasp")
nouns['raspberry']=nounInfo("raspberry")
adverbs['raspingly']="raspingly"
nouns['rat']=nounInfo("rat")
nouns['ratability']=nounInfo("ratability")
adjectives['ratable']=adjInfo("ratable")
nouns['ratan']=nounInfo("ratan")
nouns['ratch']=nounInfo("ratch")
nouns['ratchet']=nounInfo("ratchet")
nouns['rate']=nounInfo("rate")
nouns['rateability']=nounInfo("rateability")
adjectives['rateable']=adjInfo("rateable")
adverbs['rather']="rather"
nouns['ratification']=nounInfo("ratification")
nouns['rating']=nounInfo("rating")
nouns['ratio']=nounInfo("ratio")
nouns['ratiocination']=nounInfo("ratiocination")
nouns['ration']=nounInfo("ration")
adjectives['rational']=adjInfo("rational")
nouns['rationale']=nounInfo("rationale")
nouns['rationalism']=nounInfo("rationalism")
nouns['rationalist']=nounInfo("rationalist")
adjectives['rationalistic']=adjInfo("rationalistic")
nouns['rationality']=nounInfo("rationality")
nouns['rationalization']=nounInfo("rationalization")
adverbs['rationally']="rationally"
nouns['ratlin']=nounInfo("ratlin")
nouns['ratline']=nounInfo("ratline")
nouns['rattan']=nounInfo("rattan")
nouns['ratter']=nounInfo("ratter")
nouns['rattle']=nounInfo("rattle")
nouns['rattler']=nounInfo("rattler")
nouns['rattlesnake']=nounInfo("rattlesnake")
adjectives['rattling']=adjInfo("rattling")
adverbs['rattling']="rattling"
adjectives['ratty']=adjInfo("ratty")
adjectives['raucous']=adjInfo("raucous")
adverbs['raucously']="raucously"
nouns['ravage']=nounInfo("ravage")
adverbs['rave']="rave"
nouns['rave']=nounInfo("rave")
nouns['raven']=nounInfo("raven")
adjectives['ravening']=adjInfo("ravening")
adjectives['ravenous']=adjInfo("ravenous")
adverbs['ravenously']="ravenously"
nouns['raver']=nounInfo("raver")
nouns['ravine']=nounInfo("ravine")
adjectives['raving']=adjInfo("raving")
nouns['ravings']=nounInfo("ravings")
nouns['ravioli']=nounInfo("ravioli")
adverbs['ravishingly']="ravishingly"
nouns['ravishment']=nounInfo("ravishment")
adjectives['raw']=adjInfo("raw")
nouns['raw']=nounInfo("raw")
adjectives['rawhide']=adjInfo("rawhide")
nouns['ray']=nounInfo("ray")
nouns['rayon']=nounInfo("rayon")
nouns['razor']=nounInfo("razor")
nouns['razzle']=nounInfo("razzle")
nouns['re']=nounInfo("re")
prepositions['re']=P("re")
nouns['reach']=nounInfo("reach")
nouns['reaction']=nounInfo("reaction")
nouns['reactionary']=nounInfo("reactionary")
nouns['reactor']=nounInfo("reactor")
nouns['read']=nounInfo("read")
nouns['readability']=nounInfo("readability")
adjectives['readable']=adjInfo("readable")
nouns['reader']=nounInfo("reader").addAttributes({"g":"x"})
nouns['readership']=nounInfo("readership")
adverbs['readily']="readily"
nouns['readiness']=nounInfo("readiness")
nouns['reading']=nounInfo("reading")
nouns['readjustment']=nounInfo("readjustment")
adjectives['ready']=adjInfo("ready")
nouns['ready']=nounInfo("ready")
nouns['reagent']=nounInfo("reagent")
adjectives['real']=adjInfo("real")
adverbs['real']="real"
nouns['real']=nounInfo("real")
nouns['realism']=nounInfo("realism")
nouns['realist']=nounInfo("realist")
adjectives['realistic']=adjInfo("realistic")
adverbs['realistically']="realistically"
nouns['reality']=nounInfo("reality")
adjectives['realizable']=adjInfo("realizable")
nouns['realization']=nounInfo("realization")
nouns['reallocation']=nounInfo("reallocation")
adverbs['really']="really"
nouns['realm']=nounInfo("realm")
nouns['realty']=nounInfo("realty")
nouns['ream']=nounInfo("ream")
nouns['reaper']=nounInfo("reaper")
nouns['reappearance']=nounInfo("reappearance")
nouns['reappraisal']=nounInfo("reappraisal")
nouns['rear']=nounInfo("rear")
nouns['rearguard']=nounInfo("rearguard")
nouns['rearmament']=nounInfo("rearmament")
adjectives['rearmost']=adjInfo("rearmost")
nouns['rearward']=nounInfo("rearward")
adverbs['rearwards']="rearwards"
nouns['reason']=nounInfo("reason")
adjectives['reasonable']=adjInfo("reasonable")
nouns['reasonableness']=nounInfo("reasonableness")
adverbs['reasonably']="reasonably"
nouns['reasoning']=nounInfo("reasoning")
adjectives['reasonless']=adjInfo("reasonless")
nouns['reassurance']=nounInfo("reassurance")
adjectives['reassuring']=adjInfo("reassuring")
adverbs['reassuringly']="reassuringly"
adjectives['rebarbative']=adjInfo("rebarbative")
nouns['rebate']=nounInfo("rebate")
nouns['rebel']=nounInfo("rebel")
nouns['rebellion']=nounInfo("rebellion")
adjectives['rebellious']=adjInfo("rebellious")
adverbs['rebelliously']="rebelliously"
nouns['rebelliousness']=nounInfo("rebelliousness")
nouns['rebirth']=nounInfo("rebirth")
adjectives['reborn']=adjInfo("reborn")
nouns['rebound']=nounInfo("rebound")
nouns['rebuff']=nounInfo("rebuff")
nouns['rebuke']=nounInfo("rebuke")
adverbs['rebukingly']="rebukingly"
nouns['rebus']=nounInfo("rebus")
nouns['rebuttal']=nounInfo("rebuttal")
nouns['recalcitrance']=nounInfo("recalcitrance")
nouns['recalcitrancy']=nounInfo("recalcitrancy")
adjectives['recalcitrant']=adjInfo("recalcitrant")
nouns['recall']=nounInfo("recall")
nouns['recantation']=nounInfo("recantation")
nouns['recap']=nounInfo("recap")
nouns['recapitulation']=nounInfo("recapitulation")
nouns['recce']=nounInfo("recce")
nouns['receipt']=nounInfo("receipt")
adjectives['receivable']=adjInfo("receivable")
adjectives['received']=adjInfo("received")
nouns['receiver']=nounInfo("receiver")
nouns['receivership']=nounInfo("receivership")
adjectives['recent']=adjInfo("recent")
adverbs['recently']="recently"
nouns['receptacle']=nounInfo("receptacle")
nouns['reception']=nounInfo("reception")
nouns['receptionist']=nounInfo("receptionist")
adjectives['receptive']=adjInfo("receptive")
adverbs['receptively']="receptively"
nouns['receptivity']=nounInfo("receptivity")
nouns['recess']=nounInfo("recess")
nouns['recession']=nounInfo("recession")
adjectives['recessional']=adjInfo("recessional")
nouns['recessional']=nounInfo("recessional")
adjectives['recessive']=adjInfo("recessive")
nouns['recidivism']=nounInfo("recidivism")
nouns['recidivist']=nounInfo("recidivist")
nouns['recipe']=nounInfo("recipe")
nouns['recipient']=nounInfo("recipient")
adjectives['reciprocal']=adjInfo("reciprocal")
adverbs['reciprocally']="reciprocally"
nouns['reciprocation']=nounInfo("reciprocation")
nouns['reciprocity']=nounInfo("reciprocity")
nouns['recital']=nounInfo("recital")
nouns['recitation']=nounInfo("recitation")
nouns['recitative']=nounInfo("recitative")
adjectives['reckless']=adjInfo("reckless")
adverbs['recklessly']="recklessly"
nouns['recklessness']=nounInfo("recklessness")
nouns['reckoner']=nounInfo("reckoner")
nouns['reckoning']=nounInfo("reckoning")
nouns['reclamation']=nounInfo("reclamation")
nouns['recluse']=nounInfo("recluse")
nouns['recognition']=nounInfo("recognition")
adjectives['recognizable']=adjInfo("recognizable")
adverbs['recognizably']="recognizably"
nouns['recognizance']=nounInfo("recognizance")
nouns['recoil']=nounInfo("recoil")
nouns['recollection']=nounInfo("recollection")
nouns['recommendation']=nounInfo("recommendation")
adjectives['recommended']=adjInfo("recommended")
nouns['recompense']=nounInfo("recompense")
adjectives['reconcilable']=adjInfo("reconcilable")
nouns['reconciliation']=nounInfo("reconciliation")
adjectives['recondite']=adjInfo("recondite")
nouns['reconnaissance']=nounInfo("reconnaissance")
nouns['reconstruction']=nounInfo("reconstruction")
nouns['record']=nounInfo("record")
nouns['recorder']=nounInfo("recorder")
nouns['recording']=nounInfo("recording")
nouns['recourse']=nounInfo("recourse")
adjectives['recoverable']=adjInfo("recoverable")
nouns['recovery']=nounInfo("recovery")
adjectives['recreant']=adjInfo("recreant")
nouns['recreant']=nounInfo("recreant")
nouns['recreation']=nounInfo("recreation")
adjectives['recreational']=adjInfo("recreational")
nouns['recrimination']=nounInfo("recrimination")
adjectives['recriminatory']=adjInfo("recriminatory")
nouns['recrudescence']=nounInfo("recrudescence")
nouns['recruit']=nounInfo("recruit")
nouns['recruitment']=nounInfo("recruitment")
adjectives['rectal']=adjInfo("rectal")
nouns['rectangle']=nounInfo("rectangle")
adjectives['rectangular']=adjInfo("rectangular")
nouns['rectification']=nounInfo("rectification")
nouns['rectifier']=nounInfo("rectifier")
adjectives['rectilinear']=adjInfo("rectilinear")
nouns['rectitude']=nounInfo("rectitude")
nouns['recto']=nounInfo("recto")
nouns['rector']=nounInfo("rector")
nouns['rectory']=nounInfo("rectory")
nouns['rectum']=nounInfo("rectum")
adjectives['recumbent']=adjInfo("recumbent")
nouns['recuperation']=nounInfo("recuperation")
adjectives['recuperative']=adjInfo("recuperative")
nouns['recurrence']=nounInfo("recurrence")
adjectives['recurrent']=adjInfo("recurrent")
nouns['recusancy']=nounInfo("recusancy")
adjectives['recusant']=adjInfo("recusant")
nouns['recusant']=nounInfo("recusant")
adjectives['red']=adjInfo("red")
nouns['red']=nounInfo("red")
nouns['redaction']=nounInfo("redaction")
nouns['redbreast']=nounInfo("redbreast")
nouns['redcap']=nounInfo("redcap")
nouns['redcoat']=nounInfo("redcoat")
adjectives['reddish']=adjInfo("reddish")
adjectives['redeemable']=adjInfo("redeemable")
nouns['redemption']=nounInfo("redemption")
adjectives['redemptive']=adjInfo("redemptive")
nouns['redeployment']=nounInfo("redeployment")
nouns['redhead']=nounInfo("redhead")
nouns['rediffusion']=nounInfo("rediffusion")
nouns['redolence']=nounInfo("redolence")
adjectives['redolent']=adjInfo("redolent")
nouns['redoubt']=nounInfo("redoubt")
adjectives['redoubtable']=adjInfo("redoubtable")
nouns['redress']=nounInfo("redress")
nouns['redskin']=nounInfo("redskin")
adjectives['reducible']=adjInfo("reducible")
nouns['reduction']=nounInfo("reduction")
nouns['redundance']=nounInfo("redundance")
nouns['redundancy']=nounInfo("redundancy")
adjectives['redundant']=adjInfo("redundant")
nouns['reduplication']=nounInfo("reduplication")
nouns['redwing']=nounInfo("redwing")
nouns['redwood']=nounInfo("redwood")
nouns['reed']=nounInfo("reed")
adjectives['reedy']=adjInfo("reedy")
nouns['reef']=nounInfo("reef")
nouns['reefer']=nounInfo("reefer")
nouns['reek']=nounInfo("reek")
nouns['reel']=nounInfo("reel")
nouns['reeve']=nounInfo("reeve")
nouns['refection']=nounInfo("refection")
nouns['refectory']=nounInfo("refectory")
adjectives['referable']=adjInfo("referable")
nouns['referee']=nounInfo("referee").addAttributes({"g":"x"})
nouns['reference']=nounInfo("reference")
nouns['referendum']=nounInfo("referendum")
adjectives['referential']=adjInfo("referential")
nouns['refill']=nounInfo("refill")
nouns['refinement']=nounInfo("refinement")
nouns['refiner']=nounInfo("refiner")
nouns['refinery']=nounInfo("refinery")
nouns['refit']=nounInfo("refit")
nouns['reflation']=nounInfo("reflation")
nouns['reflection']=nounInfo("reflection")
adjectives['reflective']=adjInfo("reflective")
adverbs['reflectively']="reflectively"
nouns['reflector']=nounInfo("reflector")
adjectives['reflex']=adjInfo("reflex")
nouns['reflex']=nounInfo("reflex")
nouns['reflexion']=nounInfo("reflexion")
adjectives['reflexive']=adjInfo("reflexive")
nouns['reflexive']=nounInfo("reflexive")
nouns['reflux']=nounInfo("reflux")
nouns['reforestation']=nounInfo("reforestation")
nouns['reform']=nounInfo("reform")
nouns['reformation']=nounInfo("reformation")
adjectives['reformatory']=adjInfo("reformatory")
nouns['reformatory']=nounInfo("reformatory")
nouns['reformer']=nounInfo("reformer")
nouns['refraction']=nounInfo("refraction")
adjectives['refractory']=adjInfo("refractory")
nouns['refrain']=nounInfo("refrain")
nouns['refresher']=nounInfo("refresher")
adjectives['refreshing']=adjInfo("refreshing")
adverbs['refreshingly']="refreshingly"
nouns['refreshment']=nounInfo("refreshment")
adjectives['refrigerant']=adjInfo("refrigerant")
nouns['refrigerant']=nounInfo("refrigerant")
nouns['refrigeration']=nounInfo("refrigeration")
nouns['refrigerator']=nounInfo("refrigerator")
nouns['refuge']=nounInfo("refuge")
nouns['refugee']=nounInfo("refugee").addAttributes({"g":"x"})
nouns['refulgence']=nounInfo("refulgence")
adjectives['refulgent']=adjInfo("refulgent")
nouns['refund']=nounInfo("refund")
adjectives['refundable']=adjInfo("refundable")
nouns['refusal']=nounInfo("refusal")
nouns['refuse']=nounInfo("refuse")
adjectives['refutable']=adjInfo("refutable")
nouns['refutation']=nounInfo("refutation")
adjectives['regal']=adjInfo("regal")
nouns['regalia']=nounInfo("regalia")
adverbs['regally']="regally"
nouns['regard']=nounInfo("regard")
adjectives['regardful']=adjInfo("regardful")
adjectives['regardless']=adjInfo("regardless")
nouns['regatta']=nounInfo("regatta")
nouns['regency']=nounInfo("regency")
adjectives['regenerate']=adjInfo("regenerate")
nouns['regeneration']=nounInfo("regeneration")
adjectives['regent']=adjInfo("regent")
nouns['regent']=nounInfo("regent")
nouns['reggae']=nounInfo("reggae")
nouns['regicide']=nounInfo("regicide")
nouns['regime']=nounInfo("regime")
nouns['regimen']=nounInfo("regimen")
nouns['regiment']=nounInfo("regiment")
adjectives['regimental']=adjInfo("regimental")
nouns['regimentals']=nounInfo("regimentals")
nouns['regimentation']=nounInfo("regimentation")
nouns['region']=nounInfo("region")
adjectives['regional']=adjInfo("regional")
adverbs['regionally']="regionally"
nouns['register']=nounInfo("register")
nouns['registrar']=nounInfo("registrar")
nouns['registration']=nounInfo("registration")
nouns['registry']=nounInfo("registry")
adjectives['regnant']=adjInfo("regnant")
nouns['regression']=nounInfo("regression")
adjectives['regressive']=adjInfo("regressive")
nouns['regret']=nounInfo("regret")
adjectives['regretful']=adjInfo("regretful")
adverbs['regretfully']="regretfully"
adjectives['regrettable']=adjInfo("regrettable")
adverbs['regrettably']="regrettably"
adjectives['regular']=adjInfo("regular")
nouns['regular']=nounInfo("regular")
nouns['regularity']=nounInfo("regularity")
nouns['regularization']=nounInfo("regularization")
adverbs['regularly']="regularly"
nouns['regulation']=nounInfo("regulation")
nouns['regulator']=nounInfo("regulator")
adjectives['regulatory']=adjInfo("regulatory")
nouns['rehabilitation']=nounInfo("rehabilitation")
nouns['rehash']=nounInfo("rehash")
nouns['rehearing']=nounInfo("rehearing")
nouns['rehearsal']=nounInfo("rehearsal")
nouns['reign']=nounInfo("reign")
nouns['reimbursement']=nounInfo("reimbursement")
nouns['rein']=nounInfo("rein")
adjectives['reincarnate']=adjInfo("reincarnate")
nouns['reincarnation']=nounInfo("reincarnation")
nouns['reindeer']=nounInfo("reindeer")
nouns['reinforcement']=nounInfo("reinforcement")
nouns['reinstatement']=nounInfo("reinstatement")
nouns['reinsurance']=nounInfo("reinsurance")
nouns['reissue']=nounInfo("reissue")
nouns['reiteration']=nounInfo("reiteration")
nouns['reject']=nounInfo("reject")
nouns['rejection']=nounInfo("rejection")
nouns['rejoicing']=nounInfo("rejoicing")
nouns['rejoinder']=nounInfo("rejoinder")
nouns['rejuvenation']=nounInfo("rejuvenation")
nouns['relapse']=nounInfo("relapse")
nouns['relation']=nounInfo("relation").addAttributes({"g":"x"})
nouns['relationship']=nounInfo("relationship")
adjectives['relative']=adjInfo("relative")
nouns['relative']=nounInfo("relative").addAttributes({"g":"x"})
adverbs['relatively']="relatively"
nouns['relativity']=nounInfo("relativity")
nouns['relaxation']=nounInfo("relaxation")
nouns['relay']=nounInfo("relay")
nouns['release']=nounInfo("release")
nouns['relegation']=nounInfo("relegation")
adjectives['relentless']=adjInfo("relentless")
adverbs['relentlessly']="relentlessly"
nouns['relevance']=nounInfo("relevance")
nouns['relevancy']=nounInfo("relevancy")
adjectives['relevant']=adjInfo("relevant")
adverbs['relevantly']="relevantly"
nouns['reliability']=nounInfo("reliability")
adjectives['reliable']=adjInfo("reliable")
adverbs['reliably']="reliably"
nouns['reliance']=nounInfo("reliance")
adjectives['reliant']=adjInfo("reliant")
nouns['relic']=nounInfo("relic")
nouns['relict']=nounInfo("relict")
nouns['relief']=nounInfo("relief")
nouns['religion']=nounInfo("religion")
adjectives['religious']=adjInfo("religious")
nouns['religious']=nounInfo("religious")
adverbs['religiously']="religiously"
nouns['reliquary']=nounInfo("reliquary")
nouns['relish']=nounInfo("relish")
nouns['relocation']=nounInfo("relocation")
nouns['reluctance']=nounInfo("reluctance")
adjectives['reluctant']=adjInfo("reluctant")
adverbs['reluctantly']="reluctantly"
nouns['remainder']=nounInfo("remainder")
nouns['remains']=nounInfo("remains")
nouns['remake']=nounInfo("remake")
nouns['remand']=nounInfo("remand")
nouns['remark']=nounInfo("remark")
adjectives['remarkable']=adjInfo("remarkable")
adverbs['remarkably']="remarkably"
nouns['remarriage']=nounInfo("remarriage")
adjectives['remediable']=adjInfo("remediable")
adjectives['remedial']=adjInfo("remedial")
nouns['remedy']=nounInfo("remedy")
nouns['remembrance']=nounInfo("remembrance")
nouns['remilitarization']=nounInfo("remilitarization")
nouns['reminder']=nounInfo("reminder")
nouns['reminiscence']=nounInfo("reminiscence")
adjectives['reminiscent']=adjInfo("reminiscent")
adverbs['reminiscently']="reminiscently"
adjectives['remiss']=adjInfo("remiss")
nouns['remission']=nounInfo("remission")
nouns['remissness']=nounInfo("remissness")
nouns['remittance']=nounInfo("remittance")
adjectives['remittent']=adjInfo("remittent")
nouns['remnant']=nounInfo("remnant")
nouns['remonstrance']=nounInfo("remonstrance")
nouns['remorse']=nounInfo("remorse")
adjectives['remorseful']=adjInfo("remorseful")
adverbs['remorsefully']="remorsefully"
adjectives['remorseless']=adjInfo("remorseless")
adverbs['remorselessly']="remorselessly"
adjectives['remote']=adjInfo("remote")
adverbs['remotely']="remotely"
nouns['remoteness']=nounInfo("remoteness")
nouns['remount']=nounInfo("remount")
adjectives['removable']=adjInfo("removable")
nouns['removal']=nounInfo("removal")
nouns['remove']=nounInfo("remove")
adjectives['removed']=adjInfo("removed")
nouns['remover']=nounInfo("remover")
nouns['remuneration']=nounInfo("remuneration")
adjectives['remunerative']=adjInfo("remunerative")
nouns['renaissance']=nounInfo("renaissance")
adjectives['renal']=adjInfo("renal")
nouns['renascence']=nounInfo("renascence")
adjectives['renascent']=adjInfo("renascent")
nouns['rendering']=nounInfo("rendering")
nouns['rendezvous']=nounInfo("rendezvous")
nouns['rendition']=nounInfo("rendition")
nouns['renegade']=nounInfo("renegade")
adjectives['renewable']=adjInfo("renewable")
nouns['renewal']=nounInfo("renewal")
nouns['rennet']=nounInfo("rennet")
nouns['renovation']=nounInfo("renovation")
nouns['renovator']=nounInfo("renovator")
nouns['renown']=nounInfo("renown")
adjectives['renowned']=adjInfo("renowned")
adverbs['renownedly']="renownedly"
nouns['rent']=nounInfo("rent")
adjectives['rentable']=adjInfo("rentable")
nouns['rental']=nounInfo("rental")
nouns['rentier']=nounInfo("rentier")
nouns['renunciation']=nounInfo("renunciation")
nouns['rep']=nounInfo("rep")
nouns['repair']=nounInfo("repair")
adjectives['repairable']=adjInfo("repairable")
nouns['repairer']=nounInfo("repairer")
adjectives['reparable']=adjInfo("reparable")
nouns['reparation']=nounInfo("reparation")
nouns['repartee']=nounInfo("repartee")
nouns['repast']=nounInfo("repast")
nouns['repatriate']=nounInfo("repatriate")
nouns['repatriation']=nounInfo("repatriation")
adjectives['repayable']=adjInfo("repayable")
nouns['repayment']=nounInfo("repayment")
nouns['repeal']=nounInfo("repeal")
nouns['repeat']=nounInfo("repeat")
adjectives['repeated']=adjInfo("repeated")
adverbs['repeatedly']="repeatedly"
nouns['repeater']=nounInfo("repeater")
adjectives['repellent']=adjInfo("repellent")
nouns['repellent']=nounInfo("repellent")
nouns['repentance']=nounInfo("repentance")
adjectives['repentant']=adjInfo("repentant")
adverbs['repentantly']="repentantly"
nouns['repercussion']=nounInfo("repercussion")
nouns['repertoire']=nounInfo("repertoire")
nouns['repertory']=nounInfo("repertory")
nouns['repetition']=nounInfo("repetition")
adjectives['repetitious']=adjInfo("repetitious")
adjectives['repetitive']=adjInfo("repetitive")
adjectives['replaceable']=adjInfo("replaceable")
nouns['replacement']=nounInfo("replacement")
nouns['replay']=nounInfo("replay")
nouns['replenishment']=nounInfo("replenishment")
adjectives['replete']=adjInfo("replete")
nouns['repletion']=nounInfo("repletion")
nouns['replica']=nounInfo("replica")
nouns['reply']=nounInfo("reply")
nouns['report']=nounInfo("report")
nouns['reportage']=nounInfo("reportage")
adverbs['reportedly']="reportedly"
nouns['reporter']=nounInfo("reporter")
nouns['repose']=nounInfo("repose")
adjectives['reposeful']=adjInfo("reposeful")
nouns['repository']=nounInfo("repository")
nouns['repp']=nounInfo("repp")
adjectives['reprehensible']=adjInfo("reprehensible")
adverbs['reprehensibly']="reprehensibly"
nouns['representation']=nounInfo("representation")
adjectives['representative']=adjInfo("representative")
nouns['representative']=nounInfo("representative")
adjectives['repressed']=adjInfo("repressed")
nouns['repression']=nounInfo("repression")
adjectives['repressive']=adjInfo("repressive")
nouns['reprieve']=nounInfo("reprieve")
nouns['reprimand']=nounInfo("reprimand")
nouns['reprint']=nounInfo("reprint")
nouns['reprisal']=nounInfo("reprisal")
nouns['reproach']=nounInfo("reproach")
adjectives['reproachful']=adjInfo("reproachful")
adverbs['reproachfully']="reproachfully"
nouns['reprobate']=nounInfo("reprobate")
nouns['reprobation']=nounInfo("reprobation")
nouns['reproducer']=nounInfo("reproducer")
adjectives['reproducible']=adjInfo("reproducible")
nouns['reproduction']=nounInfo("reproduction")
adjectives['reproductive']=adjInfo("reproductive")
nouns['reproof']=nounInfo("reproof")
adverbs['reprovingly']="reprovingly"
nouns['reps']=nounInfo("reps")
nouns['reptile']=nounInfo("reptile")
adjectives['reptilian']=adjInfo("reptilian")
nouns['reptilian']=nounInfo("reptilian")
nouns['republic']=nounInfo("republic")
adjectives['republican']=adjInfo("republican")
nouns['republican']=nounInfo("republican")
nouns['republicanism']=nounInfo("republicanism")
nouns['repudiation']=nounInfo("repudiation")
nouns['repugnance']=nounInfo("repugnance")
adjectives['repugnant']=adjInfo("repugnant")
nouns['repulse']=nounInfo("repulse")
nouns['repulsion']=nounInfo("repulsion")
adjectives['repulsive']=adjInfo("repulsive")
adverbs['repulsively']="repulsively"
adjectives['reputable']=adjInfo("reputable")
adverbs['reputably']="reputably"
nouns['reputation']=nounInfo("reputation")
nouns['repute']=nounInfo("repute")
adjectives['reputed']=adjInfo("reputed")
adverbs['reputedly']="reputedly"
nouns['request']=nounInfo("request")
nouns['requiem']=nounInfo("requiem")
nouns['requirement']=nounInfo("requirement")
adjectives['requisite']=adjInfo("requisite")
nouns['requisite']=nounInfo("requisite")
nouns['requisition']=nounInfo("requisition")
nouns['requital']=nounInfo("requital")
nouns['reredos']=nounInfo("reredos")
nouns['rerun']=nounInfo("rerun")
nouns['rescript']=nounInfo("rescript")
nouns['rescue']=nounInfo("rescue")
nouns['rescuer']=nounInfo("rescuer")
nouns['research']=nounInfo("research")
nouns['researcher']=nounInfo("researcher")
nouns['resemblance']=nounInfo("resemblance")
adjectives['resentful']=adjInfo("resentful")
adverbs['resentfully']="resentfully"
nouns['resentment']=nounInfo("resentment")
nouns['reservation']=nounInfo("reservation")
nouns['reserve']=nounInfo("reserve")
adjectives['reserved']=adjInfo("reserved")
adverbs['reservedly']="reservedly"
nouns['reservist']=nounInfo("reservist")
nouns['reservoir']=nounInfo("reservoir")
nouns['resettlement']=nounInfo("resettlement")
nouns['reshuffle']=nounInfo("reshuffle")
nouns['residence']=nounInfo("residence")
nouns['residency']=nounInfo("residency")
adjectives['resident']=adjInfo("resident")
nouns['resident']=nounInfo("resident")
adjectives['residential']=adjInfo("residential")
adjectives['residual']=adjInfo("residual")
adjectives['residuary']=adjInfo("residuary")
nouns['residue']=nounInfo("residue")
nouns['resignation']=nounInfo("resignation")
adjectives['resigned']=adjInfo("resigned")
adverbs['resignedly']="resignedly"
nouns['resilience']=nounInfo("resilience")
nouns['resiliency']=nounInfo("resiliency")
adjectives['resilient']=adjInfo("resilient")
nouns['resin']=nounInfo("resin")
adjectives['resinated']=adjInfo("resinated")
adjectives['resinous']=adjInfo("resinous")
nouns['resistance']=nounInfo("resistance")
adjectives['resistant']=adjInfo("resistant")
nouns['resister']=nounInfo("resister")
adjectives['resistless']=adjInfo("resistless")
nouns['resistor']=nounInfo("resistor")
adjectives['resolute']=adjInfo("resolute")
adverbs['resolutely']="resolutely"
nouns['resoluteness']=nounInfo("resoluteness")
nouns['resolution']=nounInfo("resolution")
adjectives['resolvable']=adjInfo("resolvable")
nouns['resolve']=nounInfo("resolve")
nouns['resonance']=nounInfo("resonance")
adjectives['resonant']=adjInfo("resonant")
nouns['resonator']=nounInfo("resonator")
nouns['resort']=nounInfo("resort")
adverbs['resoundingly']="resoundingly"
nouns['resource']=nounInfo("resource")
adjectives['resourceful']=adjInfo("resourceful")
adverbs['resourcefully']="resourcefully"
nouns['respect']=nounInfo("respect")
nouns['respectability']=nounInfo("respectability")
adjectives['respectable']=adjInfo("respectable")
adverbs['respectably']="respectably"
nouns['respecter']=nounInfo("respecter")
adjectives['respectful']=adjInfo("respectful")
adverbs['respectfully']="respectfully"
prepositions['respecting']=P("respecting")
adjectives['respective']=adjInfo("respective")
adverbs['respectively']="respectively"
nouns['respiration']=nounInfo("respiration")
nouns['respirator']=nounInfo("respirator")
adjectives['respiratory']=adjInfo("respiratory")
nouns['respite']=nounInfo("respite")
nouns['resplendence']=nounInfo("resplendence")
nouns['resplendency']=nounInfo("resplendency")
adjectives['resplendent']=adjInfo("resplendent")
adverbs['resplendently']="resplendently"
nouns['respondent']=nounInfo("respondent")
nouns['response']=nounInfo("response")
nouns['responsibility']=nounInfo("responsibility")
adjectives['responsible']=adjInfo("responsible")
adverbs['responsibly']="responsibly"
adjectives['responsive']=adjInfo("responsive")
nouns['rest']=nounInfo("rest")
nouns['restatement']=nounInfo("restatement")
nouns['restaurant']=nounInfo("restaurant")
nouns['restauranteur']=nounInfo("restauranteur")
nouns['restaurateur']=nounInfo("restaurateur")
adjectives['restful']=adjInfo("restful")
adverbs['restfully']="restfully"
nouns['restfulness']=nounInfo("restfulness")
nouns['restitution']=nounInfo("restitution")
adjectives['restive']=adjInfo("restive")
adverbs['restively']="restively"
nouns['restiveness']=nounInfo("restiveness")
adjectives['restless']=adjInfo("restless")
adverbs['restlessly']="restlessly"
nouns['restlessness']=nounInfo("restlessness")
nouns['restoration']=nounInfo("restoration")
adjectives['restorative']=adjInfo("restorative")
nouns['restorative']=nounInfo("restorative")
nouns['restorer']=nounInfo("restorer")
adjectives['restrained']=adjInfo("restrained")
nouns['restraint']=nounInfo("restraint")
nouns['restriction']=nounInfo("restriction")
adjectives['restrictive']=adjInfo("restrictive")
adverbs['restrictively']="restrictively"
nouns['result']=nounInfo("result")
adjectives['resultant']=adjInfo("resultant")
nouns['resumption']=nounInfo("resumption")
nouns['resurgence']=nounInfo("resurgence")
adjectives['resurgent']=adjInfo("resurgent")
nouns['resurrection']=nounInfo("resurrection")
nouns['resuscitation']=nounInfo("resuscitation")
adverbs['retail']="retail"
nouns['retail']=nounInfo("retail")
nouns['retailer']=nounInfo("retailer")
nouns['retainer']=nounInfo("retainer")
nouns['retake']=nounInfo("retake")
nouns['retaliation']=nounInfo("retaliation")
adjectives['retaliative']=adjInfo("retaliative")
adjectives['retaliatory']=adjInfo("retaliatory")
nouns['retardation']=nounInfo("retardation")
nouns['retention']=nounInfo("retention")
adjectives['retentive']=adjInfo("retentive")
adverbs['retentively']="retentively"
nouns['retentiveness']=nounInfo("retentiveness")
nouns['rethink']=nounInfo("rethink")
nouns['reticence']=nounInfo("reticence")
adjectives['reticent']=adjInfo("reticent")
adverbs['reticently']="reticently"
adjectives['reticulate']=adjInfo("reticulate")
nouns['reticulation']=nounInfo("reticulation")
nouns['reticule']=nounInfo("reticule")
nouns['retina']=nounInfo("retina")
nouns['retinue']=nounInfo("retinue")
nouns['retire']=nounInfo("retire")
adjectives['retired']=adjInfo("retired")
nouns['retirement']=nounInfo("retirement")
adjectives['retiring']=adjInfo("retiring")
nouns['retort']=nounInfo("retort")
adjectives['retractable']=adjInfo("retractable")
adjectives['retractile']=adjInfo("retractile")
nouns['retraction']=nounInfo("retraction")
nouns['retread']=nounInfo("retread")
nouns['retreat']=nounInfo("retreat")
nouns['retrenchment']=nounInfo("retrenchment")
nouns['retrial']=nounInfo("retrial")
nouns['retribution']=nounInfo("retribution")
adjectives['retributive']=adjInfo("retributive")
adjectives['retrievable']=adjInfo("retrievable")
nouns['retrieval']=nounInfo("retrieval")
nouns['retriever']=nounInfo("retriever")
adjectives['retroactive']=adjInfo("retroactive")
adverbs['retroactively']="retroactively"
adjectives['retrograde']=adjInfo("retrograde")
nouns['retrogression']=nounInfo("retrogression")
adjectives['retrogressive']=adjInfo("retrogressive")
nouns['retrorocket']=nounInfo("retrorocket")
nouns['retrospect']=nounInfo("retrospect")
nouns['retrospection']=nounInfo("retrospection")
adjectives['retrospective']=adjInfo("retrospective")
adverbs['retrospectively']="retrospectively"
nouns['retroversion']=nounInfo("retroversion")
nouns['retsina']=nounInfo("retsina")
nouns['return']=nounInfo("return")
adjectives['returnable']=adjInfo("returnable")
nouns['reunion']=nounInfo("reunion")
nouns['rev']=nounInfo("rev")
nouns['revaluation']=nounInfo("revaluation")
nouns['reveille']=nounInfo("reveille")
nouns['revel']=nounInfo("revel")
nouns['revelation']=nounInfo("revelation")
nouns['reveller']=nounInfo("reveller")
nouns['revelry']=nounInfo("revelry")
nouns['revenge']=nounInfo("revenge")
adjectives['revengeful']=adjInfo("revengeful")
adverbs['revengefully']="revengefully"
nouns['revenue']=nounInfo("revenue")
adjectives['reverberant']=adjInfo("reverberant")
nouns['reverberation']=nounInfo("reverberation")
nouns['reverence']=nounInfo("reverence")
adjectives['reverend']=adjInfo("reverend")
nouns['reverend']=nounInfo("reverend")
adjectives['reverent']=adjInfo("reverent")
adjectives['reverential']=adjInfo("reverential")
adverbs['reverentially']="reverentially"
adverbs['reverently']="reverently"
nouns['reverie']=nounInfo("reverie")
nouns['revers']=nounInfo("revers")
nouns['reversal']=nounInfo("reversal")
adjectives['reverse']=adjInfo("reverse")
nouns['reverse']=nounInfo("reverse")
adverbs['reversely']="reversely"
nouns['reversibility']=nounInfo("reversibility")
adjectives['reversible']=adjInfo("reversible")
nouns['reversion']=nounInfo("reversion")
adjectives['reversionary']=adjInfo("reversionary")
adjectives['revertible']=adjInfo("revertible")
nouns['revetment']=nounInfo("revetment")
nouns['review']=nounInfo("review")
nouns['reviewer']=nounInfo("reviewer")
nouns['revise']=nounInfo("revise")
nouns['reviser']=nounInfo("reviser")
nouns['revision']=nounInfo("revision")
nouns['revisionism']=nounInfo("revisionism")
nouns['revisionist']=nounInfo("revisionist")
nouns['revitalization']=nounInfo("revitalization")
nouns['revival']=nounInfo("revival")
nouns['revivalist']=nounInfo("revivalist")
adjectives['revocable']=adjInfo("revocable")
nouns['revocation']=nounInfo("revocation")
nouns['revoke']=nounInfo("revoke")
nouns['revolt']=nounInfo("revolt")
adjectives['revolting']=adjInfo("revolting")
adverbs['revoltingly']="revoltingly"
nouns['revolution']=nounInfo("revolution")
adjectives['revolutionary']=adjInfo("revolutionary")
nouns['revolver']=nounInfo("revolver")
nouns['revue']=nounInfo("revue")
nouns['revulsion']=nounInfo("revulsion")
nouns['reward']=nounInfo("reward")
nouns['rewrite']=nounInfo("rewrite")
nouns['rhapsody']=nounInfo("rhapsody")
nouns['rhea']=nounInfo("rhea")
nouns['rheostat']=nounInfo("rheostat")
nouns['rhesus']=nounInfo("rhesus")
nouns['rhetoric']=nounInfo("rhetoric")
adjectives['rhetorical']=adjInfo("rhetorical")
adverbs['rhetorically']="rhetorically"
nouns['rhetorician']=nounInfo("rhetorician")
nouns['rheum']=nounInfo("rheum")
adjectives['rheumatic']=adjInfo("rheumatic")
nouns['rheumatic']=nounInfo("rheumatic")
nouns['rheumatism']=nounInfo("rheumatism")
adjectives['rheumatoid']=adjInfo("rheumatoid")
adjectives['rhinal']=adjInfo("rhinal")
nouns['rhino']=nounInfo("rhino")
nouns['rhinoceros']=nounInfo("rhinoceros")
nouns['rhizome']=nounInfo("rhizome")
nouns['rhododendron']=nounInfo("rhododendron")
nouns['rhomb']=nounInfo("rhomb")
adjectives['rhomboid']=adjInfo("rhomboid")
nouns['rhomboid']=nounInfo("rhomboid")
nouns['rhombus']=nounInfo("rhombus")
nouns['rhubarb']=nounInfo("rhubarb")
nouns['rhyme']=nounInfo("rhyme")
adjectives['rhymed']=adjInfo("rhymed")
nouns['rhymester']=nounInfo("rhymester")
nouns['rhythm']=nounInfo("rhythm")
adjectives['rhythmic']=adjInfo("rhythmic")
adjectives['rhythmical']=adjInfo("rhythmical")
adverbs['rhythmically']="rhythmically"
nouns['rib']=nounInfo("rib")
adjectives['ribald']=adjInfo("ribald")
nouns['ribald']=nounInfo("ribald")
nouns['ribaldry']=nounInfo("ribaldry")
nouns['riband']=nounInfo("riband")
nouns['ribbon']=nounInfo("ribbon")
nouns['riboflavin']=nounInfo("riboflavin")
nouns['rice']=nounInfo("rice")
adjectives['rich']=adjInfo("rich")
nouns['riches']=nounInfo("riches")
adverbs['richly']="richly"
nouns['richness']=nounInfo("richness")
nouns['rick']=nounInfo("rick")
nouns['rickets']=nounInfo("rickets")
adjectives['rickety']=adjInfo("rickety")
nouns['rickshaw']=nounInfo("rickshaw")
nouns['ricochet']=nounInfo("ricochet")
nouns['riddance']=nounInfo("riddance")
nouns['riddle']=nounInfo("riddle")
nouns['ride']=nounInfo("ride")
nouns['rider']=nounInfo("rider")
adjectives['riderless']=adjInfo("riderless")
nouns['ridge']=nounInfo("ridge")
nouns['ridicule']=nounInfo("ridicule")
adjectives['ridiculous']=adjInfo("ridiculous")
adverbs['ridiculously']="ridiculously"
nouns['riding']=nounInfo("riding")
adjectives['rife']=adjInfo("rife")
nouns['riff']=nounInfo("riff")
nouns['rifle']=nounInfo("rifle")
nouns['rifleman']=nounInfo("rifleman")
nouns['rift']=nounInfo("rift")
nouns['rig']=nounInfo("rig")
nouns['rigger']=nounInfo("rigger")
nouns['rigging']=nounInfo("rigging")
adjectives['right']=adjInfo("right")
adverbs['right']="right"
nouns['right']=nounInfo("right")
adjectives['righteous']=adjInfo("righteous")
adverbs['righteously']="righteously"
nouns['righteousness']=nounInfo("righteousness")
adjectives['rightful']=adjInfo("rightful")
adverbs['rightfully']="rightfully"
nouns['rightfulness']=nounInfo("rightfulness")
adjectives['rightist']=adjInfo("rightist")
nouns['rightist']=nounInfo("rightist")
adverbs['rightly']="rightly"
nouns['rightness']=nounInfo("rightness")
adjectives['rigid']=adjInfo("rigid")
nouns['rigidity']=nounInfo("rigidity")
adverbs['rigidly']="rigidly"
nouns['rigmarole']=nounInfo("rigmarole")
adjectives['rigorous']=adjInfo("rigorous")
adverbs['rigorously']="rigorously"
nouns['rigour']=nounInfo("rigour")
nouns['rill']=nounInfo("rill")
nouns['rim']=nounInfo("rim")
nouns['rime']=nounInfo("rime")
nouns['rind']=nounInfo("rind")
nouns['rinderpest']=nounInfo("rinderpest")
nouns['ring']=nounInfo("ring")
nouns['ringer']=nounInfo("ringer")
nouns['ringlet']=nounInfo("ringlet")
nouns['ringside']=nounInfo("ringside")
nouns['ringworm']=nounInfo("ringworm")
nouns['rink']=nounInfo("rink")
nouns['rinse']=nounInfo("rinse")
nouns['riot']=nounInfo("riot")
nouns['rioter']=nounInfo("rioter")
adjectives['riotous']=adjInfo("riotous")
adverbs['riotously']="riotously"
nouns['rip']=nounInfo("rip")
adjectives['riparian']=adjInfo("riparian")
adjectives['ripe']=adjInfo("ripe")
adverbs['ripely']="ripely"
nouns['ripeness']=nounInfo("ripeness")
nouns['riposte']=nounInfo("riposte")
nouns['ripple']=nounInfo("ripple")
nouns['rise']=nounInfo("rise")
nouns['riser']=nounInfo("riser")
nouns['risibility']=nounInfo("risibility")
adjectives['risible']=adjInfo("risible")
nouns['rising']=nounInfo("rising")
nouns['risk']=nounInfo("risk")
adverbs['riskily']="riskily"
nouns['riskiness']=nounInfo("riskiness")
adjectives['risky']=adjInfo("risky")
nouns['risotto']=nounInfo("risotto")
nouns['rissole']=nounInfo("rissole")
nouns['rite']=nounInfo("rite")
adjectives['ritual']=adjInfo("ritual")
nouns['ritual']=nounInfo("ritual")
nouns['ritualism']=nounInfo("ritualism")
nouns['ritualist']=nounInfo("ritualist")
adjectives['ritualistic']=adjInfo("ritualistic")
adverbs['ritualistically']="ritualistically"
adjectives['ritzy']=adjInfo("ritzy")
nouns['rival']=nounInfo("rival")
nouns['rivalry']=nounInfo("rivalry")
nouns['river']=nounInfo("river")
nouns['riverside']=nounInfo("riverside")
nouns['rivet']=nounInfo("rivet")
nouns['rivulet']=nounInfo("rivulet")
nouns['roach']=nounInfo("roach")
nouns['road']=nounInfo("road")
nouns['roadblock']=nounInfo("roadblock")
adjectives['roadless']=adjInfo("roadless")
nouns['roadman']=nounInfo("roadman")
nouns['roadmender']=nounInfo("roadmender")
nouns['roadside']=nounInfo("roadside")
nouns['roadstead']=nounInfo("roadstead")
nouns['roadster']=nounInfo("roadster")
nouns['roadway']=nounInfo("roadway")
adjectives['roadworthy']=adjInfo("roadworthy")
adjectives['roan']=adjInfo("roan")
nouns['roan']=nounInfo("roan")
adverbs['roar']="roar"
nouns['roar']=nounInfo("roar")
adjectives['roaring']=adjInfo("roaring")
adjectives['roast']=adjInfo("roast")
nouns['roast']=nounInfo("roast")
nouns['roaster']=nounInfo("roaster")
nouns['roasting']=nounInfo("roasting")
nouns['robber']=nounInfo("robber")
nouns['robbery']=nounInfo("robbery")
nouns['robe']=nounInfo("robe")
nouns['robin']=nounInfo("robin")
nouns['robot']=nounInfo("robot")
adjectives['robust']=adjInfo("robust")
adverbs['robustly']="robustly"
nouns['robustness']=nounInfo("robustness")
nouns['roc']=nounInfo("roc")
nouns['rock']=nounInfo("rock")
nouns['rocker']=nounInfo("rocker")
nouns['rockery']=nounInfo("rockery")
nouns['rocket']=nounInfo("rocket")
nouns['rocketry']=nounInfo("rocketry")
adjectives['rocky']=adjInfo("rocky")
adjectives['rococo']=adjInfo("rococo")
nouns['rod']=nounInfo("rod")
nouns['rodent']=nounInfo("rodent")
nouns['rodeo']=nounInfo("rodeo")
nouns['rodomontade']=nounInfo("rodomontade")
nouns['roe']=nounInfo("roe")
nouns['roebuck']=nounInfo("roebuck")
nouns['rogation']=nounInfo("rogation")
nouns['roger']=nounInfo("roger")
nouns['rogue']=nounInfo("rogue")
nouns['roguery']=nounInfo("roguery")
adjectives['roguish']=adjInfo("roguish")
adverbs['roguishly']="roguishly"
nouns['roguishness']=nounInfo("roguishness")
nouns['roisterer']=nounInfo("roisterer")
nouns['role']=nounInfo("role")
nouns['roll']=nounInfo("roll")
nouns['roller']=nounInfo("roller")
adjectives['rollicking']=adjInfo("rollicking")
nouns['rolling']=nounInfo("rolling")
nouns['romance']=nounInfo("romance")
adjectives['romantic']=adjInfo("romantic")
nouns['romantic']=nounInfo("romantic")
adverbs['romantically']="romantically"
nouns['romanticism']=nounInfo("romanticism")
nouns['romanticist']=nounInfo("romanticist")
nouns['romp']=nounInfo("romp")
nouns['romper']=nounInfo("romper")
nouns['rondeau']=nounInfo("rondeau")
nouns['rondel']=nounInfo("rondel")
nouns['rondo']=nounInfo("rondo")
nouns['rood']=nounInfo("rood")
nouns['roof']=nounInfo("roof")
nouns['roofing']=nounInfo("roofing")
adjectives['roofless']=adjInfo("roofless")
nouns['rook']=nounInfo("rook")
nouns['rookery']=nounInfo("rookery")
nouns['rookie']=nounInfo("rookie")
nouns['room']=nounInfo("room")
adjectives['roomed']=adjInfo("roomed")
nouns['roomer']=nounInfo("roomer")
nouns['roomful']=nounInfo("roomful")
adverbs['roomily']="roomily"
adjectives['roomy']=adjInfo("roomy")
nouns['roost']=nounInfo("roost")
nouns['rooster']=nounInfo("rooster")
nouns['root']=nounInfo("root")
adjectives['rootless']=adjInfo("rootless")
nouns['rope']=nounInfo("rope")
nouns['ropeway']=nounInfo("ropeway")
adjectives['ropey']=adjInfo("ropey")
nouns['rosary']=nounInfo("rosary")
nouns['rose']=nounInfo("rose")
adjectives['roseate']=adjInfo("roseate")
nouns['rosebud']=nounInfo("rosebud")
nouns['rosemary']=nounInfo("rosemary")
nouns['rosette']=nounInfo("rosette")
nouns['rosewood']=nounInfo("rosewood")
nouns['rosin']=nounInfo("rosin")
nouns['roster']=nounInfo("roster")
nouns['rostrum']=nounInfo("rostrum")
adjectives['rosy']=adjInfo("rosy")
nouns['rot']=nounInfo("rot")
nouns['rota']=nounInfo("rota")
adjectives['rotary']=adjInfo("rotary")
nouns['rotary']=nounInfo("rotary")
nouns['rotation']=nounInfo("rotation")
adverbs['rotationally']="rotationally"
adjectives['rotatory']=adjInfo("rotatory")
nouns['rote']=nounInfo("rote")
nouns['rotisserie']=nounInfo("rotisserie")
nouns['rotogravure']=nounInfo("rotogravure")
nouns['rotor']=nounInfo("rotor")
adjectives['rotten']=adjInfo("rotten")
adverbs['rottenly']="rottenly"
nouns['rottenness']=nounInfo("rottenness")
nouns['rotter']=nounInfo("rotter")
adjectives['rotund']=adjInfo("rotund")
nouns['rotunda']=nounInfo("rotunda")
nouns['rotundity']=nounInfo("rotundity")
adverbs['rotundly']="rotundly"
nouns['rouble']=nounInfo("rouble")
nouns['rouge']=nounInfo("rouge")
adjectives['rough']=adjInfo("rough")
adverbs['rough']="rough"
nouns['rough']=nounInfo("rough")
nouns['roughage']=nounInfo("roughage")
adverbs['roughly']="roughly"
nouns['roughness']=nounInfo("roughness")
adjectives['roughshod']=adjInfo("roughshod")
nouns['roulette']=nounInfo("roulette")
adjectives['round']=adjInfo("round")
nouns['round']=nounInfo("round")
prepositions['round']=P("round")
adjectives['roundabout']=adjInfo("roundabout")
nouns['roundabout']=nounInfo("roundabout")
nouns['roundel']=nounInfo("roundel")
nouns['roundelay']=nounInfo("roundelay")
nouns['rounders']=nounInfo("rounders")
adjectives['roundish']=adjInfo("roundish")
adverbs['roundly']="roundly"
nouns['roundness']=nounInfo("roundness")
nouns['roundsman']=nounInfo("roundsman")
nouns['rout']=nounInfo("rout")
nouns['route']=nounInfo("route")
adjectives['routine']=adjInfo("routine")
nouns['routine']=nounInfo("routine")
nouns['rover']=nounInfo("rover")
nouns['row']=nounInfo("row")
nouns['rowan']=nounInfo("rowan")
adverbs['rowdily']="rowdily"
nouns['rowdiness']=nounInfo("rowdiness")
adjectives['rowdy']=adjInfo("rowdy")
nouns['rowdy']=nounInfo("rowdy")
nouns['rowdyism']=nounInfo("rowdyism")
nouns['rowel']=nounInfo("rowel")
nouns['rower']=nounInfo("rower")
nouns['rowing']=nounInfo("rowing")
nouns['rowlock']=nounInfo("rowlock")
adjectives['royal']=adjInfo("royal")
nouns['royalist']=nounInfo("royalist")
adverbs['royally']="royally"
nouns['royalty']=nounInfo("royalty")
nouns['rub']=nounInfo("rub")
nouns['rubber']=nounInfo("rubber")
adjectives['rubbery']=adjInfo("rubbery")
nouns['rubbing']=nounInfo("rubbing")
nouns['rubbish']=nounInfo("rubbish")
adjectives['rubbishy']=adjInfo("rubbishy")
nouns['rubble']=nounInfo("rubble")
adjectives['rubicund']=adjInfo("rubicund")
nouns['rubric']=nounInfo("rubric")
adjectives['ruby']=adjInfo("ruby")
nouns['ruby']=nounInfo("ruby")
nouns['ruck']=nounInfo("ruck")
nouns['rucksack']=nounInfo("rucksack")
nouns['ruction']=nounInfo("ruction")
nouns['rudder']=nounInfo("rudder")
nouns['ruddle']=nounInfo("ruddle")
adjectives['ruddy']=adjInfo("ruddy")
adjectives['rude']=adjInfo("rude")
adverbs['rudely']="rudely"
nouns['rudeness']=nounInfo("rudeness")
nouns['rudiment']=nounInfo("rudiment")
adjectives['rudimentary']=adjInfo("rudimentary")
nouns['rue']=nounInfo("rue")
adjectives['rueful']=adjInfo("rueful")
adverbs['ruefully']="ruefully"
nouns['ruff']=nounInfo("ruff")
nouns['ruffian']=nounInfo("ruffian")
nouns['ruffianism']=nounInfo("ruffianism")
adjectives['ruffianly']=adjInfo("ruffianly")
nouns['ruffle']=nounInfo("ruffle")
nouns['rug']=nounInfo("rug")
nouns['rugby']=nounInfo("rugby")
adjectives['rugged']=adjInfo("rugged")
adverbs['ruggedly']="ruggedly"
nouns['ruggedness']=nounInfo("ruggedness")
nouns['rugger']=nounInfo("rugger")
nouns['ruin']=nounInfo("ruin")
nouns['ruination']=nounInfo("ruination")
adjectives['ruinous']=adjInfo("ruinous")
adverbs['ruinously']="ruinously"
nouns['rule']=nounInfo("rule")
nouns['ruler']=nounInfo("ruler")
adjectives['ruling']=adjInfo("ruling")
nouns['ruling']=nounInfo("ruling")
nouns['rum']=nounInfo("rum")
nouns['rumba']=nounInfo("rumba")
nouns['rumble']=nounInfo("rumble")
adjectives['rumbustious']=adjInfo("rumbustious")
adjectives['ruminant']=adjInfo("ruminant")
nouns['ruminant']=nounInfo("ruminant")
nouns['rumination']=nounInfo("rumination")
adjectives['ruminative']=adjInfo("ruminative")
nouns['rummage']=nounInfo("rummage")
adjectives['rummy']=adjInfo("rummy")
nouns['rummy']=nounInfo("rummy")
nouns['rumour']=nounInfo("rumour")
nouns['rump']=nounInfo("rump")
nouns['rumpus']=nounInfo("rumpus")
nouns['run']=nounInfo("run")
adjectives['runaway']=adjInfo("runaway")
nouns['runaway']=nounInfo("runaway")
nouns['rune']=nounInfo("rune")
nouns['rung']=nounInfo("rung")
adjectives['runic']=adjInfo("runic")
nouns['runnel']=nounInfo("runnel")
nouns['runner']=nounInfo("runner").addAttributes({"g":"x"})
adjectives['running']=adjInfo("running")
nouns['running']=nounInfo("running")
adjectives['runny']=adjInfo("runny")
nouns['runt']=nounInfo("runt")
nouns['runway']=nounInfo("runway")
nouns['rupee']=nounInfo("rupee")
nouns['rupiah']=nounInfo("rupiah")
nouns['rupture']=nounInfo("rupture")
adjectives['rural']=adjInfo("rural")
nouns['ruse']=nounInfo("ruse")
nouns['rush']=nounInfo("rush")
nouns['rushlight']=nounInfo("rushlight")
adjectives['rushy']=adjInfo("rushy")
nouns['rusk']=nounInfo("rusk")
adjectives['russet']=adjInfo("russet")
nouns['russet']=nounInfo("russet")
nouns['rust']=nounInfo("rust")
adjectives['rustic']=adjInfo("rustic")
nouns['rustic']=nounInfo("rustic")
nouns['rusticity']=nounInfo("rusticity")
nouns['rustiness']=nounInfo("rustiness")
nouns['rustle']=nounInfo("rustle")
nouns['rustler']=nounInfo("rustler")
adjectives['rustless']=adjInfo("rustless")
nouns['rustling']=nounInfo("rustling")
adjectives['rusty']=adjInfo("rusty")
nouns['rut']=nounInfo("rut")
adjectives['ruthless']=adjInfo("ruthless")
adverbs['ruthlessly']="ruthlessly"
nouns['ruthlessness']=nounInfo("ruthlessness")
nouns['rye']=nounInfo("rye")
adjectives['sabbatarian']=adjInfo("sabbatarian")
nouns['sabbatarian']=nounInfo("sabbatarian")
adjectives['sabbatical']=adjInfo("sabbatical")
nouns['sabbatical']=nounInfo("sabbatical")
adjectives['sable']=adjInfo("sable")
nouns['sable']=nounInfo("sable")
nouns['sabot']=nounInfo("sabot")
nouns['sabotage']=nounInfo("sabotage")
nouns['saboteur']=nounInfo("saboteur")
nouns['sabre']=nounInfo("sabre")
nouns['sac']=nounInfo("sac")
nouns['saccharin']=nounInfo("saccharin")
adjectives['saccharine']=adjInfo("saccharine")
adjectives['sacerdotal']=adjInfo("sacerdotal")
nouns['sacerdotalism']=nounInfo("sacerdotalism")
nouns['sachet']=nounInfo("sachet")
nouns['sack']=nounInfo("sack")
nouns['sackbut']=nounInfo("sackbut")
nouns['sackcloth']=nounInfo("sackcloth")
nouns['sacking']=nounInfo("sacking")
nouns['sacrament']=nounInfo("sacrament")
adjectives['sacramental']=adjInfo("sacramental")
adverbs['sacramentally']="sacramentally"
adjectives['sacred']=adjInfo("sacred")
adverbs['sacredly']="sacredly"
nouns['sacredness']=nounInfo("sacredness")
nouns['sacrifice']=nounInfo("sacrifice")
adjectives['sacrificial']=adjInfo("sacrificial")
nouns['sacrilege']=nounInfo("sacrilege")
adjectives['sacrilegious']=adjInfo("sacrilegious")
nouns['sacristan']=nounInfo("sacristan")
nouns['sacristy']=nounInfo("sacristy")
adjectives['sacrosanct']=adjInfo("sacrosanct")
adjectives['sad']=adjInfo("sad")
nouns['saddle']=nounInfo("saddle")
nouns['saddler']=nounInfo("saddler")
nouns['saddlery']=nounInfo("saddlery")
nouns['sadhu']=nounInfo("sadhu")
nouns['sadism']=nounInfo("sadism")
nouns['sadist']=nounInfo("sadist")
adjectives['sadistic']=adjInfo("sadistic")
adverbs['sadly']="sadly"
nouns['sadness']=nounInfo("sadness")
nouns['sadomasochism']=nounInfo("sadomasochism")
nouns['safari']=nounInfo("safari")
adjectives['safe']=adjInfo("safe")
nouns['safe']=nounInfo("safe")
nouns['safeguard']=nounInfo("safeguard")
adverbs['safely']="safely"
nouns['safeness']=nounInfo("safeness")
nouns['safety']=nounInfo("safety")
nouns['saffron']=nounInfo("saffron")
nouns['sag']=nounInfo("sag")
nouns['saga']=nounInfo("saga")
adjectives['sagacious']=adjInfo("sagacious")
adverbs['sagaciously']="sagaciously"
nouns['sagacity']=nounInfo("sagacity")
adjectives['sage']=adjInfo("sage")
nouns['sage']=nounInfo("sage")
adverbs['sagely']="sagely"
nouns['sago']=nounInfo("sago")
nouns['sahib']=nounInfo("sahib")
adjectives['said']=adjInfo("said")
nouns['sail']=nounInfo("sail")
nouns['sailor']=nounInfo("sailor")
nouns['saint']=nounInfo("saint")
adjectives['sainted']=adjInfo("sainted")
nouns['sainthood']=nounInfo("sainthood")
adjectives['saintlike']=adjInfo("saintlike")
nouns['saintliness']=nounInfo("saintliness")
adjectives['saintly']=adjInfo("saintly")
nouns['sake']=nounInfo("sake")
nouns['salaam']=nounInfo("salaam")
adjectives['salable']=adjInfo("salable")
adjectives['salacious']=adjInfo("salacious")
adverbs['salaciously']="salaciously"
nouns['salaciousness']=nounInfo("salaciousness")
nouns['salacity']=nounInfo("salacity")
nouns['salad']=nounInfo("salad")
nouns['salamander']=nounInfo("salamander")
nouns['salami']=nounInfo("salami")
adjectives['salaried']=adjInfo("salaried")
nouns['salary']=nounInfo("salary")
nouns['sale']=nounInfo("sale")
adjectives['saleable']=adjInfo("saleable")
nouns['saleroom']=nounInfo("saleroom")
nouns['salesman']=nounInfo("salesman")
nouns['salesmanship']=nounInfo("salesmanship")
nouns['saleswoman']=nounInfo("saleswoman")
adjectives['salient']=adjInfo("salient")
nouns['salient']=nounInfo("salient")
adjectives['saline']=adjInfo("saline")
nouns['saline']=nounInfo("saline")
nouns['salinity']=nounInfo("salinity")
nouns['saliva']=nounInfo("saliva")
adjectives['salivary']=adjInfo("salivary")
adjectives['sallow']=adjInfo("sallow")
nouns['sally']=nounInfo("sally")
nouns['salmon']=nounInfo("salmon")
nouns['salon']=nounInfo("salon")
nouns['saloon']=nounInfo("saloon")
nouns['salsify']=nounInfo("salsify")
adjectives['salt']=adjInfo("salt")
nouns['salt']=nounInfo("salt")
nouns['saltiness']=nounInfo("saltiness")
nouns['saltpetre']=nounInfo("saltpetre")
adjectives['salty']=adjInfo("salty")
adjectives['salubrious']=adjInfo("salubrious")
nouns['salubrity']=nounInfo("salubrity")
adjectives['salutary']=adjInfo("salutary")
nouns['salutation']=nounInfo("salutation")
nouns['salute']=nounInfo("salute")
nouns['salvage']=nounInfo("salvage")
nouns['salvation']=nounInfo("salvation")
nouns['salve']=nounInfo("salve")
nouns['salver']=nounInfo("salver")
nouns['salvia']=nounInfo("salvia")
nouns['salvo']=nounInfo("salvo")
nouns['samba']=nounInfo("samba")
adjectives['same']=adjInfo("same")
nouns['sameness']=nounInfo("sameness")
nouns['samovar']=nounInfo("samovar")
nouns['sampan']=nounInfo("sampan")
nouns['sample']=nounInfo("sample")
nouns['sampler']=nounInfo("sampler")
nouns['samurai']=nounInfo("samurai")
nouns['sanatorium']=nounInfo("sanatorium")
nouns['sanctification']=nounInfo("sanctification")
adjectives['sanctimonious']=adjInfo("sanctimonious")
adverbs['sanctimoniously']="sanctimoniously"
nouns['sanction']=nounInfo("sanction")
nouns['sanctity']=nounInfo("sanctity")
nouns['sanctuary']=nounInfo("sanctuary")
nouns['sanctum']=nounInfo("sanctum")
nouns['sand']=nounInfo("sand")
nouns['sandal']=nounInfo("sandal")
adjectives['sandalled']=adjInfo("sandalled")
nouns['sandalwood']=nounInfo("sandalwood")
nouns['sandbag']=nounInfo("sandbag")
nouns['sandbank']=nounInfo("sandbank")
nouns['sandboy']=nounInfo("sandboy")
nouns['sandiness']=nounInfo("sandiness")
nouns['sandpaper']=nounInfo("sandpaper")
nouns['sandpiper']=nounInfo("sandpiper")
nouns['sandstone']=nounInfo("sandstone")
nouns['sandwich']=nounInfo("sandwich")
nouns['sandwichman']=nounInfo("sandwichman")
adjectives['sandy']=adjInfo("sandy")
adjectives['sane']=adjInfo("sane")
adverbs['sanely']="sanely"
adjectives['sanguinary']=adjInfo("sanguinary")
adjectives['sanguine']=adjInfo("sanguine")
adjectives['sanitary']=adjInfo("sanitary")
nouns['sanitation']=nounInfo("sanitation")
nouns['sanity']=nounInfo("sanity")
prepositions['sans']=P("sans")
nouns['sap']=nounInfo("sap")
nouns['sapience']=nounInfo("sapience")
adjectives['sapient']=adjInfo("sapient")
adverbs['sapiently']="sapiently"
adjectives['sapless']=adjInfo("sapless")
nouns['sapling']=nounInfo("sapling")
nouns['sapper']=nounInfo("sapper")
nouns['sapphire']=nounInfo("sapphire")
adjectives['sappy']=adjInfo("sappy")
nouns['sapwood']=nounInfo("sapwood")
nouns['saraband']=nounInfo("saraband")
nouns['sarcasm']=nounInfo("sarcasm")
adjectives['sarcastic']=adjInfo("sarcastic")
adverbs['sarcastically']="sarcastically"
nouns['sarcophagus']=nounInfo("sarcophagus")
nouns['sardine']=nounInfo("sardine")
adjectives['sardonic']=adjInfo("sardonic")
adverbs['sardonically']="sardonically"
nouns['sari']=nounInfo("sari")
nouns['sarong']=nounInfo("sarong")
nouns['sarsaparilla']=nounInfo("sarsaparilla")
adjectives['sartorial']=adjInfo("sartorial")
nouns['sash']=nounInfo("sash")
nouns['satchel']=nounInfo("satchel")
nouns['sateen']=nounInfo("sateen")
nouns['satellite']=nounInfo("satellite")
adjectives['satiable']=adjInfo("satiable")
nouns['satiety']=nounInfo("satiety")
adjectives['satin']=adjInfo("satin")
nouns['satin']=nounInfo("satin")
nouns['satinwood']=nounInfo("satinwood")
nouns['satire']=nounInfo("satire")
adjectives['satirical']=adjInfo("satirical")
adverbs['satirically']="satirically"
nouns['satirist']=nounInfo("satirist")
nouns['satisfaction']=nounInfo("satisfaction")
adverbs['satisfactorily']="satisfactorily"
adjectives['satisfactory']=adjInfo("satisfactory")
adjectives['satisfying']=adjInfo("satisfying")
adverbs['satisfyingly']="satisfyingly"
nouns['satrap']=nounInfo("satrap")
nouns['satsuma']=nounInfo("satsuma")
nouns['saturation']=nounInfo("saturation")
nouns['saturnalia']=nounInfo("saturnalia")
adjectives['saturnine']=adjInfo("saturnine")
nouns['satyr']=nounInfo("satyr")
adjectives['satyric']=adjInfo("satyric")
nouns['sauce']=nounInfo("sauce")
nouns['saucepan']=nounInfo("saucepan")
nouns['saucer']=nounInfo("saucer")
adverbs['saucily']="saucily"
nouns['sauciness']=nounInfo("sauciness")
adjectives['saucy']=adjInfo("saucy")
nouns['sauerkraut']=nounInfo("sauerkraut")
nouns['sauna']=nounInfo("sauna")
nouns['saunter']=nounInfo("saunter")
nouns['saunterer']=nounInfo("saunterer")
adjectives['saurian']=adjInfo("saurian")
nouns['saurian']=nounInfo("saurian")
nouns['sausage']=nounInfo("sausage")
adjectives['savage']=adjInfo("savage")
nouns['savage']=nounInfo("savage")
adverbs['savagely']="savagely"
nouns['savageness']=nounInfo("savageness")
nouns['savagery']=nounInfo("savagery")
nouns['savanna']=nounInfo("savanna")
nouns['savannah']=nounInfo("savannah")
nouns['savant']=nounInfo("savant")
nouns['save']=nounInfo("save")
prepositions['save']=P("save")
nouns['saveloy']=nounInfo("saveloy")
nouns['saver']=nounInfo("saver")
adjectives['saving']=adjInfo("saving")
nouns['saving']=nounInfo("saving")
prepositions['saving']=P("saving")
nouns['saviour']=nounInfo("saviour")
nouns['savory']=nounInfo("savory")
nouns['savour']=nounInfo("savour")
adjectives['savoury']=adjInfo("savoury")
nouns['savoury']=nounInfo("savoury")
nouns['savoy']=nounInfo("savoy")
nouns['savvy']=nounInfo("savvy")
nouns['saw']=nounInfo("saw")
nouns['sawdust']=nounInfo("sawdust")
nouns['sawmill']=nounInfo("sawmill")
nouns['sawyer']=nounInfo("sawyer")
nouns['sax']=nounInfo("sax")
nouns['saxhorn']=nounInfo("saxhorn")
nouns['saxifrage']=nounInfo("saxifrage")
nouns['saxophone']=nounInfo("saxophone")
nouns['saxophonist']=nounInfo("saxophonist")
nouns['say']=nounInfo("say")
nouns['saying']=nounInfo("saying")
nouns['scab']=nounInfo("scab")
nouns['scabbard']=nounInfo("scabbard")
adjectives['scabby']=adjInfo("scabby")
nouns['scabies']=nounInfo("scabies")
nouns['scabious']=nounInfo("scabious")
adjectives['scabrous']=adjInfo("scabrous")
nouns['scaffold']=nounInfo("scaffold")
nouns['scaffolding']=nounInfo("scaffolding")
nouns['scalawag']=nounInfo("scalawag")
nouns['scald']=nounInfo("scald")
nouns['scale']=nounInfo("scale")
nouns['scallop']=nounInfo("scallop")
nouns['scallywag']=nounInfo("scallywag")
nouns['scalp']=nounInfo("scalp")
nouns['scalpel']=nounInfo("scalpel")
adjectives['scaly']=adjInfo("scaly")
nouns['scamp']=nounInfo("scamp")
nouns['scamper']=nounInfo("scamper")
nouns['scampi']=nounInfo("scampi")
nouns['scandal']=nounInfo("scandal")
nouns['scandalmonger']=nounInfo("scandalmonger")
nouns['scandalmongering']=nounInfo("scandalmongering")
adjectives['scandalous']=adjInfo("scandalous")
adverbs['scandalously']="scandalously"
nouns['scansion']=nounInfo("scansion")
adjectives['scant']=adjInfo("scant")
adverbs['scantily']="scantily"
nouns['scantiness']=nounInfo("scantiness")
nouns['scantling']=nounInfo("scantling")
adjectives['scanty']=adjInfo("scanty")
nouns['scapegoat']=nounInfo("scapegoat")
nouns['scapegrace']=nounInfo("scapegrace")
nouns['scapula']=nounInfo("scapula")
nouns['scar']=nounInfo("scar")
nouns['scarab']=nounInfo("scarab")
adjectives['scarce']=adjInfo("scarce")
adverbs['scarcely']="scarcely"
nouns['scarcity']=nounInfo("scarcity")
nouns['scare']=nounInfo("scare")
nouns['scarecrow']=nounInfo("scarecrow")
nouns['scaremonger']=nounInfo("scaremonger")
nouns['scarf']=nounInfo("scarf")
adjectives['scarlet']=adjInfo("scarlet")
nouns['scarlet']=nounInfo("scarlet")
nouns['scarp']=nounInfo("scarp")
adjectives['scary']=adjInfo("scary")
nouns['scat']=nounInfo("scat")
adjectives['scathing']=adjInfo("scathing")
adverbs['scathingly']="scathingly"
nouns['scatter']=nounInfo("scatter")
adjectives['scattered']=adjInfo("scattered")
adjectives['scatty']=adjInfo("scatty")
nouns['scavenger']=nounInfo("scavenger")
nouns['scenario']=nounInfo("scenario")
nouns['scenarist']=nounInfo("scenarist")
nouns['scene']=nounInfo("scene")
nouns['scenery']=nounInfo("scenery")
adjectives['scenic']=adjInfo("scenic")
adverbs['scenically']="scenically"
nouns['scent']=nounInfo("scent")
adjectives['scentless']=adjInfo("scentless")
adjectives['sceptered']=adjInfo("sceptered")
nouns['sceptic']=nounInfo("sceptic")
adjectives['sceptical']=adjInfo("sceptical")
adverbs['sceptically']="sceptically"
nouns['scepticism']=nounInfo("scepticism")
nouns['sceptre']=nounInfo("sceptre")
adjectives['sceptred']=adjInfo("sceptred")
nouns['schedule']=nounInfo("schedule")
adjectives['schematic']=adjInfo("schematic")
adverbs['schematically']="schematically"
nouns['scheme']=nounInfo("scheme")
nouns['schemer']=nounInfo("schemer")
nouns['scherzo']=nounInfo("scherzo")
nouns['schism']=nounInfo("schism")
adjectives['schismatic']=adjInfo("schismatic")
nouns['schist']=nounInfo("schist")
nouns['schizophrenia']=nounInfo("schizophrenia")
adjectives['schizophrenic']=adjInfo("schizophrenic")
nouns['schizophrenic']=nounInfo("schizophrenic")
nouns['schmaltz']=nounInfo("schmaltz")
adjectives['schmaltzy']=adjInfo("schmaltzy")
nouns['schmalz']=nounInfo("schmalz")
adjectives['schmalzy']=adjInfo("schmalzy")
nouns['schnapps']=nounInfo("schnapps")
nouns['schnitzel']=nounInfo("schnitzel")
nouns['schnorkel']=nounInfo("schnorkel")
nouns['scholar']=nounInfo("scholar")
adjectives['scholarly']=adjInfo("scholarly")
nouns['scholarship']=nounInfo("scholarship")
adjectives['scholastic']=adjInfo("scholastic")
nouns['scholasticism']=nounInfo("scholasticism")
nouns['school']=nounInfo("school")
nouns['schoolboy']=nounInfo("schoolboy")
nouns['schoolfellow']=nounInfo("schoolfellow")
nouns['schoolgirl']=nounInfo("schoolgirl")
nouns['schoolhouse']=nounInfo("schoolhouse")
nouns['schooling']=nounInfo("schooling")
nouns['schoolman']=nounInfo("schoolman")
nouns['schoolmaster']=nounInfo("schoolmaster")
nouns['schoolmate']=nounInfo("schoolmate")
nouns['schoolmistress']=nounInfo("schoolmistress")
nouns['schooner']=nounInfo("schooner")
nouns['schottische']=nounInfo("schottische")
nouns['schwa']=nounInfo("schwa")
adjectives['sciatic']=adjInfo("sciatic")
nouns['sciatica']=nounInfo("sciatica")
nouns['science']=nounInfo("science")
adjectives['scientific']=adjInfo("scientific")
adverbs['scientifically']="scientifically"
nouns['scientist']=nounInfo("scientist").addAttributes({"g":"x"})
nouns['scimitar']=nounInfo("scimitar")
nouns['scintilla']=nounInfo("scintilla")
nouns['scintillation']=nounInfo("scintillation")
nouns['scion']=nounInfo("scion")
nouns['scissors']=nounInfo("scissors")
nouns['sclerosis']=nounInfo("sclerosis")
nouns['scoff']=nounInfo("scoff")
nouns['scoffer']=nounInfo("scoffer")
adverbs['scoffingly']="scoffingly"
nouns['scold']=nounInfo("scold")
nouns['scolding']=nounInfo("scolding")
nouns['scollop']=nounInfo("scollop")
nouns['sconce']=nounInfo("sconce")
nouns['scone']=nounInfo("scone")
nouns['scoop']=nounInfo("scoop")
nouns['scoopful']=nounInfo("scoopful")
nouns['scooter']=nounInfo("scooter")
nouns['scope']=nounInfo("scope")
adjectives['scorbutic']=adjInfo("scorbutic")
nouns['scorch']=nounInfo("scorch")
nouns['scorcher']=nounInfo("scorcher")
adjectives['scorching']=adjInfo("scorching")
adverbs['scorching']="scorching"
nouns['score']=nounInfo("score")
nouns['scorer']=nounInfo("scorer")
nouns['scorn']=nounInfo("scorn")
adjectives['scornful']=adjInfo("scornful")
adverbs['scornfully']="scornfully"
nouns['scorpion']=nounInfo("scorpion")
nouns['scot']=nounInfo("scot")
nouns['scotch']=nounInfo("scotch")
nouns['scoundrel']=nounInfo("scoundrel")
adjectives['scoundrelly']=adjInfo("scoundrelly")
nouns['scour']=nounInfo("scour")
nouns['scourer']=nounInfo("scourer")
nouns['scourge']=nounInfo("scourge")
nouns['scout']=nounInfo("scout")
nouns['scoutmaster']=nounInfo("scoutmaster")
nouns['scow']=nounInfo("scow")
nouns['scowl']=nounInfo("scowl")
nouns['scrabble']=nounInfo("scrabble")
nouns['scrag']=nounInfo("scrag")
adjectives['scraggy']=adjInfo("scraggy")
nouns['scramble']=nounInfo("scramble")
nouns['scrambler']=nounInfo("scrambler")
nouns['scrap']=nounInfo("scrap")
nouns['scrape']=nounInfo("scrape")
nouns['scraper']=nounInfo("scraper")
nouns['scrapiness']=nounInfo("scrapiness")
nouns['scraping']=nounInfo("scraping")
adverbs['scrappily']="scrappily"
adjectives['scrappy']=adjInfo("scrappy")
nouns['scratch']=nounInfo("scratch")
adjectives['scratchy']=adjInfo("scratchy")
nouns['scrawl']=nounInfo("scrawl")
adjectives['scrawny']=adjInfo("scrawny")
nouns['scream']=nounInfo("scream")
adverbs['screamingly']="screamingly"
nouns['scree']=nounInfo("scree")
nouns['screech']=nounInfo("screech")
nouns['screed']=nounInfo("screed")
nouns['screen']=nounInfo("screen")
nouns['screw']=nounInfo("screw")
adjectives['screwy']=adjInfo("screwy")
nouns['scribble']=nounInfo("scribble")
nouns['scribbler']=nounInfo("scribbler")
nouns['scribe']=nounInfo("scribe")
nouns['scrimmage']=nounInfo("scrimmage")
nouns['scrimshanker']=nounInfo("scrimshanker")
nouns['scrip']=nounInfo("scrip")
nouns['script']=nounInfo("script")
adjectives['scripted']=adjInfo("scripted")
adjectives['scriptural']=adjInfo("scriptural")
nouns['scripture']=nounInfo("scripture")
nouns['scriptwriter']=nounInfo("scriptwriter")
nouns['scrivener']=nounInfo("scrivener")
nouns['scrofula']=nounInfo("scrofula")
adjectives['scrofulous']=adjInfo("scrofulous")
nouns['scroll']=nounInfo("scroll")
nouns['scrotum']=nounInfo("scrotum")
nouns['scrounger']=nounInfo("scrounger")
nouns['scrub']=nounInfo("scrub")
adjectives['scrubby']=adjInfo("scrubby")
nouns['scruff']=nounInfo("scruff")
adjectives['scruffy']=adjInfo("scruffy")
nouns['scrum']=nounInfo("scrum")
nouns['scrummage']=nounInfo("scrummage")
adjectives['scrumptious']=adjInfo("scrumptious")
nouns['scrunch']=nounInfo("scrunch")
nouns['scruple']=nounInfo("scruple")
adjectives['scrupulous']=adjInfo("scrupulous")
adverbs['scrupulously']="scrupulously"
nouns['scrutineer']=nounInfo("scrutineer")
nouns['scrutiny']=nounInfo("scrutiny")
nouns['scud']=nounInfo("scud")
nouns['scull']=nounInfo("scull")
nouns['sculler']=nounInfo("sculler")
nouns['scullery']=nounInfo("scullery")
nouns['scullion']=nounInfo("scullion")
nouns['sculptor']=nounInfo("sculptor")
nouns['sculptress']=nounInfo("sculptress")
adjectives['sculptural']=adjInfo("sculptural")
nouns['sculpture']=nounInfo("sculpture")
nouns['scum']=nounInfo("scum")
adjectives['scummy']=adjInfo("scummy")
nouns['scupper']=nounInfo("scupper")
nouns['scurf']=nounInfo("scurf")
adjectives['scurfy']=adjInfo("scurfy")
nouns['scurrility']=nounInfo("scurrility")
adjectives['scurrilous']=adjInfo("scurrilous")
adverbs['scurrilously']="scurrilously"
nouns['scurry']=nounInfo("scurry")
adverbs['scurvily']="scurvily"
adjectives['scurvy']=adjInfo("scurvy")
nouns['scurvy']=nounInfo("scurvy")
nouns['scut']=nounInfo("scut")
nouns['scutcheon']=nounInfo("scutcheon")
nouns['scuttle']=nounInfo("scuttle")
nouns['scythe']=nounInfo("scythe")
nouns['sea']=nounInfo("sea")
nouns['seabed']=nounInfo("seabed")
nouns['seabird']=nounInfo("seabird")
nouns['seaboard']=nounInfo("seaboard")
adjectives['seafaring']=adjInfo("seafaring")
nouns['seafood']=nounInfo("seafood")
nouns['seafront']=nounInfo("seafront")
nouns['seagull']=nounInfo("seagull")
nouns['seakale']=nounInfo("seakale")
nouns['seal']=nounInfo("seal")
nouns['sealer']=nounInfo("sealer")
nouns['sealskin']=nounInfo("sealskin")
nouns['seam']=nounInfo("seam")
nouns['seaman']=nounInfo("seaman")
adjectives['seamanlike']=adjInfo("seamanlike")
nouns['seamanship']=nounInfo("seamanship")
adjectives['seamless']=adjInfo("seamless")
nouns['seamstress']=nounInfo("seamstress")
adjectives['seamy']=adjInfo("seamy")
nouns['seaplane']=nounInfo("seaplane")
nouns['seaport']=nounInfo("seaport")
adjectives['sear']=adjInfo("sear")
nouns['search']=nounInfo("search")
nouns['searcher']=nounInfo("searcher")
adjectives['searching']=adjInfo("searching")
adverbs['searchingly']="searchingly"
nouns['searchlight']=nounInfo("searchlight")
adverbs['searingly']="searingly"
nouns['seascape']=nounInfo("seascape")
nouns['seashore']=nounInfo("seashore")
adjectives['seasick']=adjInfo("seasick")
nouns['seasickness']=nounInfo("seasickness")
nouns['seaside']=nounInfo("seaside")
nouns['season']=nounInfo("season")
adjectives['seasonable']=adjInfo("seasonable")
adjectives['seasonal']=adjInfo("seasonal")
adverbs['seasonally']="seasonally"
nouns['seasoning']=nounInfo("seasoning")
nouns['seat']=nounInfo("seat")
adjectives['seaward']=adjInfo("seaward")
adverbs['seawards']="seawards"
nouns['seaway']=nounInfo("seaway")
nouns['seaweed']=nounInfo("seaweed")
adjectives['seaworthy']=adjInfo("seaworthy")
nouns['sec']=nounInfo("sec")
nouns['secateurs']=nounInfo("secateurs")
nouns['secession']=nounInfo("secession")
nouns['secessionist']=nounInfo("secessionist")
adjectives['secluded']=adjInfo("secluded")
nouns['seclusion']=nounInfo("seclusion")
adjectives['second']=adjInfo("second")
adverbs['second']="second"
nouns['second']=nounInfo("second")
adverbs['secondarily']="secondarily"
adjectives['secondary']=adjInfo("secondary")
nouns['seconder']=nounInfo("seconder")
adverbs['secondly']="secondly"
nouns['secondment']=nounInfo("secondment")
nouns['secrecy']=nounInfo("secrecy")
adjectives['secret']=adjInfo("secret")
nouns['secret']=nounInfo("secret")
adjectives['secretarial']=adjInfo("secretarial")
nouns['secretariat']=nounInfo("secretariat")
nouns['secretary']=nounInfo("secretary").addAttributes({"g":"x"})
nouns['secretion']=nounInfo("secretion")
adjectives['secretive']=adjInfo("secretive")
adverbs['secretively']="secretively"
nouns['secretiveness']=nounInfo("secretiveness")
adverbs['secretly']="secretly"
nouns['sect']=nounInfo("sect")
adjectives['sectarian']=adjInfo("sectarian")
nouns['sectarian']=nounInfo("sectarian")
nouns['sectarianism']=nounInfo("sectarianism")
nouns['section']=nounInfo("section")
adjectives['sectional']=adjInfo("sectional")
nouns['sectionalism']=nounInfo("sectionalism")
nouns['sector']=nounInfo("sector")
adjectives['secular']=adjInfo("secular")
nouns['secularism']=nounInfo("secularism")
nouns['secularist']=nounInfo("secularist")
adjectives['secure']=adjInfo("secure")
adverbs['securely']="securely"
nouns['security']=nounInfo("security")
nouns['sedan']=nounInfo("sedan")
adjectives['sedate']=adjInfo("sedate")
adverbs['sedately']="sedately"
nouns['sedateness']=nounInfo("sedateness")
nouns['sedation']=nounInfo("sedation")
adjectives['sedative']=adjInfo("sedative")
nouns['sedative']=nounInfo("sedative")
adjectives['sedentary']=adjInfo("sedentary")
nouns['sedge']=nounInfo("sedge")
adjectives['sedgy']=adjInfo("sedgy")
nouns['sediment']=nounInfo("sediment")
adjectives['sedimentary']=adjInfo("sedimentary")
nouns['sedition']=nounInfo("sedition")
adjectives['seditious']=adjInfo("seditious")
nouns['seducer']=nounInfo("seducer")
nouns['seduction']=nounInfo("seduction")
adjectives['seductive']=adjInfo("seductive")
adverbs['seductively']="seductively"
adjectives['sedulous']=adjInfo("sedulous")
adverbs['sedulously']="sedulously"
nouns['see']=nounInfo("see")
nouns['seed']=nounInfo("seed")
adverbs['seedily']="seedily"
nouns['seediness']=nounInfo("seediness")
adjectives['seedless']=adjInfo("seedless")
nouns['seedling']=nounInfo("seedling")
nouns['seedsman']=nounInfo("seedsman")
nouns['seedtime']=nounInfo("seedtime")
adjectives['seedy']=adjInfo("seedy")
adjectives['seeming']=adjInfo("seeming")
adverbs['seemingly']="seemingly"
nouns['seemliness']=nounInfo("seemliness")
adjectives['seemly']=adjInfo("seemly")
nouns['seepage']=nounInfo("seepage")
nouns['seer']=nounInfo("seer")
nouns['seersucker']=nounInfo("seersucker")
nouns['seesaw']=nounInfo("seesaw")
nouns['segment']=nounInfo("segment")
nouns['segmentation']=nounInfo("segmentation")
nouns['segregation']=nounInfo("segregation")
nouns['seignior']=nounInfo("seignior")
nouns['seine']=nounInfo("seine")
adjectives['seismic']=adjInfo("seismic")
nouns['seismograph']=nounInfo("seismograph")
nouns['seismologist']=nounInfo("seismologist")
nouns['seismology']=nounInfo("seismology")
nouns['seizure']=nounInfo("seizure")
adverbs['seldom']="seldom"
adjectives['select']=adjInfo("select")
nouns['selection']=nounInfo("selection")
adjectives['selective']=adjInfo("selective")
adverbs['selectively']="selectively"
nouns['selectivity']=nounInfo("selectivity")
nouns['selector']=nounInfo("selector")
nouns['selenium']=nounInfo("selenium")
nouns['self']=nounInfo("self")
adjectives['selfish']=adjInfo("selfish")
adverbs['selfishly']="selfishly"
nouns['selfishness']=nounInfo("selfishness")
nouns['sell']=nounInfo("sell")
nouns['seller']=nounInfo("seller").addAttributes({"g":"x"})
nouns['selling']=nounInfo("selling")
nouns['selvage']=nounInfo("selvage")
nouns['selvedge']=nounInfo("selvedge")
adjectives['semantic']=adjInfo("semantic")
nouns['semantics']=nounInfo("semantics")
nouns['semaphore']=nounInfo("semaphore")
nouns['semblance']=nounInfo("semblance")
nouns['semen']=nounInfo("semen")
nouns['semester']=nounInfo("semester")
nouns['semibreve']=nounInfo("semibreve")
nouns['semicircle']=nounInfo("semicircle")
adjectives['semicircular']=adjInfo("semicircular")
nouns['semicolon']=nounInfo("semicolon")
adjectives['seminal']=adjInfo("seminal")
nouns['seminar']=nounInfo("seminar")
nouns['seminarist']=nounInfo("seminarist")
nouns['seminary']=nounInfo("seminary")
nouns['semiquaver']=nounInfo("semiquaver")
nouns['semitone']=nounInfo("semitone")
nouns['semolina']=nounInfo("semolina")
nouns['sempstress']=nounInfo("sempstress")
nouns['senate']=nounInfo("senate")
nouns['senator']=nounInfo("senator")
adjectives['senatorial']=adjInfo("senatorial")
nouns['sender']=nounInfo("sender")
nouns['senescence']=nounInfo("senescence")
adjectives['senescent']=adjInfo("senescent")
nouns['seneschal']=nounInfo("seneschal")
adjectives['senile']=adjInfo("senile")
nouns['senility']=nounInfo("senility")
adjectives['senior']=adjInfo("senior")
nouns['senior']=nounInfo("senior")
nouns['seniority']=nounInfo("seniority")
nouns['senna']=nounInfo("senna")
nouns['senora']=nounInfo("senora")
nouns['senorita']=nounInfo("senorita")
nouns['sensation']=nounInfo("sensation")
adjectives['sensational']=adjInfo("sensational")
nouns['sensationalism']=nounInfo("sensationalism")
nouns['sensationalist']=nounInfo("sensationalist")
adverbs['sensationally']="sensationally"
nouns['sense']=nounInfo("sense")
adjectives['senseless']=adjInfo("senseless")
adverbs['senselessly']="senselessly"
nouns['senselessness']=nounInfo("senselessness")
nouns['sensibility']=nounInfo("sensibility")
adjectives['sensible']=adjInfo("sensible")
adverbs['sensibly']="sensibly"
adjectives['sensitive']=adjInfo("sensitive")
adverbs['sensitively']="sensitively"
nouns['sensitivity']=nounInfo("sensitivity")
adjectives['sensory']=adjInfo("sensory")
adjectives['sensual']=adjInfo("sensual")
nouns['sensualism']=nounInfo("sensualism")
nouns['sensualist']=nounInfo("sensualist")
nouns['sensuality']=nounInfo("sensuality")
adjectives['sensuous']=adjInfo("sensuous")
adverbs['sensuously']="sensuously"
nouns['sensuousness']=nounInfo("sensuousness")
nouns['sentence']=nounInfo("sentence")
adjectives['sententious']=adjInfo("sententious")
adverbs['sententiously']="sententiously"
adjectives['sentient']=adjInfo("sentient")
nouns['sentiment']=nounInfo("sentiment")
adjectives['sentimental']=adjInfo("sentimental")
nouns['sentimentalist']=nounInfo("sentimentalist")
nouns['sentimentality']=nounInfo("sentimentality")
adverbs['sentimentally']="sentimentally"
nouns['sentinel']=nounInfo("sentinel")
nouns['sentry']=nounInfo("sentry")
nouns['sepal']=nounInfo("sepal")
nouns['separability']=nounInfo("separability")
adjectives['separable']=adjInfo("separable")
adverbs['separably']="separably"
adjectives['separate']=adjInfo("separate")
nouns['separate']=nounInfo("separate")
adverbs['separately']="separately"
nouns['separation']=nounInfo("separation")
nouns['separatist']=nounInfo("separatist")
nouns['separator']=nounInfo("separator")
nouns['sepia']=nounInfo("sepia")
nouns['sepsis']=nounInfo("sepsis")
nouns['septet']=nounInfo("septet")
adjectives['septic']=adjInfo("septic")
nouns['septicaemia']=nounInfo("septicaemia")
nouns['septicemia']=nounInfo("septicemia")
nouns['septuagenarian']=nounInfo("septuagenarian")
adjectives['sepulchral']=adjInfo("sepulchral")
nouns['sepulchre']=nounInfo("sepulchre")
nouns['sepulture']=nounInfo("sepulture")
nouns['sequel']=nounInfo("sequel")
nouns['sequence']=nounInfo("sequence")
adjectives['sequent']=adjInfo("sequent")
adjectives['sequential']=adjInfo("sequential")
adverbs['sequentially']="sequentially"
adjectives['sequestered']=adjInfo("sequestered")
nouns['sequestration']=nounInfo("sequestration")
nouns['sequin']=nounInfo("sequin")
nouns['sequoia']=nounInfo("sequoia")
nouns['seraglio']=nounInfo("seraglio")
nouns['seraph']=nounInfo("seraph")
adjectives['seraphic']=adjInfo("seraphic")
nouns['seraphim']=nounInfo("seraphim")
adjectives['sere']=adjInfo("sere")
nouns['serenade']=nounInfo("serenade")
nouns['serendipity']=nounInfo("serendipity")
adjectives['serene']=adjInfo("serene")
adverbs['serenely']="serenely"
nouns['serenity']=nounInfo("serenity")
nouns['serf']=nounInfo("serf")
nouns['serfdom']=nounInfo("serfdom")
nouns['serge']=nounInfo("serge")
nouns['sergeant']=nounInfo("sergeant")
adjectives['serial']=adjInfo("serial")
nouns['serial']=nounInfo("serial")
adverbs['serially']="serially"
adverbs['seriatim']="seriatim"
adjectives['sericultural']=adjInfo("sericultural")
nouns['sericulture']=nounInfo("sericulture")
nouns['sericulturist']=nounInfo("sericulturist")
nouns['series']=nounInfo("series")
adjectives['seriocomic']=adjInfo("seriocomic")
adjectives['serious']=adjInfo("serious")
adverbs['seriously']="seriously"
nouns['seriousness']=nounInfo("seriousness")
nouns['serjeant']=nounInfo("serjeant")
nouns['sermon']=nounInfo("sermon")
adjectives['serous']=adjInfo("serous")
nouns['serpent']=nounInfo("serpent")
adjectives['serpentine']=adjInfo("serpentine")
adjectives['serrated']=adjInfo("serrated")
adjectives['serried']=adjInfo("serried")
nouns['serum']=nounInfo("serum")
nouns['servant']=nounInfo("servant")
nouns['serve']=nounInfo("serve")
nouns['server']=nounInfo("server")
nouns['service']=nounInfo("service")
adjectives['serviceable']=adjInfo("serviceable")
nouns['serviette']=nounInfo("serviette")
adjectives['servile']=adjInfo("servile")
adverbs['servilely']="servilely"
nouns['servility']=nounInfo("servility")
nouns['serving']=nounInfo("serving")
nouns['servitor']=nounInfo("servitor")
nouns['servitude']=nounInfo("servitude")
nouns['sesame']=nounInfo("sesame")
adjectives['sesquipedalian']=adjInfo("sesquipedalian")
nouns['session']=nounInfo("session")
nouns['set']=nounInfo("set")
nouns['sett']=nounInfo("sett")
nouns['settee']=nounInfo("settee")
nouns['setter']=nounInfo("setter")
nouns['setting']=nounInfo("setting")
nouns['settle']=nounInfo("settle")
adjectives['settled']=adjInfo("settled")
nouns['settlement']=nounInfo("settlement")
nouns['settler']=nounInfo("settler")
nouns['seven']=nounInfo("seven")
adjectives['sevenfold']=adjInfo("sevenfold")
adverbs['sevenfold']="sevenfold"
nouns['seventeen']=nounInfo("seventeen")
adjectives['seventeenth']=adjInfo("seventeenth")
nouns['seventeenth']=nounInfo("seventeenth")
adjectives['seventh']=adjInfo("seventh")
nouns['seventh']=nounInfo("seventh")
adverbs['seventhly']="seventhly"
adjectives['seventieth']=adjInfo("seventieth")
nouns['seventieth']=nounInfo("seventieth")
nouns['seventy']=nounInfo("seventy")
adverbs['severally']="severally"
nouns['severance']=nounInfo("severance")
adjectives['severe']=adjInfo("severe")
adverbs['severely']="severely"
nouns['severity']=nounInfo("severity")
nouns['sewage']=nounInfo("sewage")
nouns['sewer']=nounInfo("sewer")
nouns['sewerage']=nounInfo("sewerage")
nouns['sewing']=nounInfo("sewing")
nouns['sex']=nounInfo("sex")
adjectives['sexagenarian']=adjInfo("sexagenarian")
nouns['sexagenarian']=nounInfo("sexagenarian")
adjectives['sexed']=adjInfo("sexed")
nouns['sexism']=nounInfo("sexism")
adjectives['sexist']=adjInfo("sexist")
nouns['sexist']=nounInfo("sexist")
adjectives['sexless']=adjInfo("sexless")
nouns['sextant']=nounInfo("sextant")
nouns['sextet']=nounInfo("sextet")
nouns['sextette']=nounInfo("sextette")
nouns['sexton']=nounInfo("sexton")
adjectives['sexual']=adjInfo("sexual")
nouns['sexuality']=nounInfo("sexuality")
adverbs['sexually']="sexually"
adjectives['sexy']=adjInfo("sexy")
adverbs['shabbily']="shabbily"
nouns['shabbiness']=nounInfo("shabbiness")
adjectives['shabby']=adjInfo("shabby")
nouns['shack']=nounInfo("shack")
nouns['shackle']=nounInfo("shackle")
nouns['shad']=nounInfo("shad")
nouns['shaddock']=nounInfo("shaddock")
nouns['shade']=nounInfo("shade")
nouns['shading']=nounInfo("shading")
nouns['shadow']=nounInfo("shadow")
adjectives['shadowy']=adjInfo("shadowy")
adjectives['shady']=adjInfo("shady")
nouns['shaft']=nounInfo("shaft")
adjectives['shafted']=adjInfo("shafted")
nouns['shag']=nounInfo("shag")
adverbs['shaggily']="shaggily"
nouns['shagginess']=nounInfo("shagginess")
adjectives['shaggy']=adjInfo("shaggy")
nouns['shah']=nounInfo("shah")
nouns['shake']=nounInfo("shake")
adverbs['shakenly']="shakenly"
nouns['shaker']=nounInfo("shaker")
adverbs['shakily']="shakily"
nouns['shakiness']=nounInfo("shakiness")
nouns['shaking']=nounInfo("shaking")
adjectives['shaky']=adjInfo("shaky")
nouns['shale']=nounInfo("shale")
nouns['shallot']=nounInfo("shallot")
adjectives['shallow']=adjInfo("shallow")
nouns['shallow']=nounInfo("shallow")
nouns['shalom']=nounInfo("shalom")
adjectives['sham']=adjInfo("sham")
nouns['sham']=nounInfo("sham")
nouns['shamble']=nounInfo("shamble")
nouns['shambles']=nounInfo("shambles")
nouns['shame']=nounInfo("shame")
adjectives['shamefaced']=adjInfo("shamefaced")
adverbs['shamefacedly']="shamefacedly"
adjectives['shameful']=adjInfo("shameful")
adverbs['shamefully']="shamefully"
adjectives['shameless']=adjInfo("shameless")
adverbs['shamelessly']="shamelessly"
nouns['shamelessness']=nounInfo("shamelessness")
nouns['shammy']=nounInfo("shammy")
nouns['shampoo']=nounInfo("shampoo")
nouns['shamrock']=nounInfo("shamrock")
nouns['shandy']=nounInfo("shandy")
nouns['shank']=nounInfo("shank")
nouns['shantung']=nounInfo("shantung")
nouns['shanty']=nounInfo("shanty")
nouns['shape']=nounInfo("shape")
adjectives['shapeless']=adjInfo("shapeless")
adverbs['shapelessly']="shapelessly"
nouns['shapelessness']=nounInfo("shapelessness")
adjectives['shapely']=adjInfo("shapely")
nouns['shard']=nounInfo("shard")
nouns['share']=nounInfo("share")
nouns['shareholder']=nounInfo("shareholder")
nouns['shark']=nounInfo("shark")
nouns['sharkskin']=nounInfo("sharkskin")
adjectives['sharp']=adjInfo("sharp")
adverbs['sharp']="sharp"
nouns['sharp']=nounInfo("sharp")
nouns['sharpener']=nounInfo("sharpener")
nouns['sharper']=nounInfo("sharper")
adverbs['sharply']="sharply"
nouns['sharpness']=nounInfo("sharpness")
adjectives['shatterproof']=adjInfo("shatterproof")
nouns['shave']=nounInfo("shave")
nouns['shaver']=nounInfo("shaver")
nouns['shavings']=nounInfo("shavings")
nouns['shawl']=nounInfo("shawl")
nouns['sheaf']=nounInfo("sheaf")
nouns['shears']=nounInfo("shears")
nouns['sheath']=nounInfo("sheath")
nouns['sheathing']=nounInfo("sheathing")
nouns['shebang']=nounInfo("shebang")
nouns['shebeen']=nounInfo("shebeen")
nouns['shed']=nounInfo("shed")
nouns['sheen']=nounInfo("sheen")
nouns['sheep']=nounInfo("sheep")
nouns['sheepdog']=nounInfo("sheepdog")
adjectives['sheepish']=adjInfo("sheepish")
adverbs['sheepishly']="sheepishly"
nouns['sheepishness']=nounInfo("sheepishness")
nouns['sheepskin']=nounInfo("sheepskin")
adjectives['sheer']=adjInfo("sheer")
adverbs['sheer']="sheer"
adverbs['sheerly']="sheerly"
nouns['sheet']=nounInfo("sheet")
nouns['sheeting']=nounInfo("sheeting")
nouns['sheik']=nounInfo("sheik")
nouns['sheikdom']=nounInfo("sheikdom")
nouns['sheikh']=nounInfo("sheikh")
nouns['sheikhdom']=nounInfo("sheikhdom")
nouns['shekel']=nounInfo("shekel")
nouns['sheldrake']=nounInfo("sheldrake")
nouns['shelf']=nounInfo("shelf")
nouns['shell']=nounInfo("shell")
nouns['shellac']=nounInfo("shellac")
nouns['shellfish']=nounInfo("shellfish")
nouns['shelter']=nounInfo("shelter")
nouns['shepherd']=nounInfo("shepherd").addAttributes({"g":"m"})
nouns['shepherdess']=nounInfo("shepherdess").addAttributes({"g":"f"})
nouns['sherbet']=nounInfo("sherbet")
nouns['sheriff']=nounInfo("sheriff")
nouns['sherry']=nounInfo("sherry")
nouns['shibboleth']=nounInfo("shibboleth")
nouns['shield']=nounInfo("shield")
nouns['shift']=nounInfo("shift")
adverbs['shiftily']="shiftily"
nouns['shiftiness']=nounInfo("shiftiness")
adjectives['shiftless']=adjInfo("shiftless")
adjectives['shifty']=adjInfo("shifty")
nouns['shilling']=nounInfo("shilling")
nouns['shimmer']=nounInfo("shimmer")
nouns['shin']=nounInfo("shin")
nouns['shindig']=nounInfo("shindig")
nouns['shindy']=nounInfo("shindy")
nouns['shine']=nounInfo("shine")
nouns['shingle']=nounInfo("shingle")
nouns['shingles']=nounInfo("shingles")
adjectives['shingly']=adjInfo("shingly")
adjectives['shiny']=adjInfo("shiny")
nouns['ship']=nounInfo("ship")
nouns['shipbroker']=nounInfo("shipbroker")
nouns['shipbuilder']=nounInfo("shipbuilder")
nouns['shipbuilding']=nounInfo("shipbuilding")
nouns['shipload']=nounInfo("shipload")
nouns['shipmate']=nounInfo("shipmate")
nouns['shipment']=nounInfo("shipment")
nouns['shipowner']=nounInfo("shipowner")
nouns['shipper']=nounInfo("shipper")
nouns['shipping']=nounInfo("shipping")
adjectives['shipshape']=adjInfo("shipshape")
adverbs['shipshape']="shipshape"
nouns['shipwreck']=nounInfo("shipwreck")
nouns['shipwright']=nounInfo("shipwright")
nouns['shipyard']=nounInfo("shipyard")
nouns['shire']=nounInfo("shire")
nouns['shirker']=nounInfo("shirker")
nouns['shirt']=nounInfo("shirt")
nouns['shirting']=nounInfo("shirting")
adjectives['shirty']=adjInfo("shirty")
nouns['shit']=nounInfo("shit")
nouns['shiver']=nounInfo("shiver")
adjectives['shivery']=adjInfo("shivery")
nouns['shoal']=nounInfo("shoal")
adverbs['shock']="shock"
nouns['shock']=nounInfo("shock")
nouns['shocker']=nounInfo("shocker")
adjectives['shocking']=adjInfo("shocking")
adverbs['shockingly']="shockingly"
adjectives['shoddy']=adjInfo("shoddy")
nouns['shoddy']=nounInfo("shoddy")
nouns['shoe']=nounInfo("shoe")
nouns['shoeblack']=nounInfo("shoeblack")
nouns['shoehorn']=nounInfo("shoehorn")
nouns['shoelace']=nounInfo("shoelace")
nouns['shoemaker']=nounInfo("shoemaker")
nouns['shoemaking']=nounInfo("shoemaking")
nouns['shoestring']=nounInfo("shoestring")
nouns['shogun']=nounInfo("shogun")
nouns['shoot']=nounInfo("shoot")
nouns['shooter']=nounInfo("shooter")
nouns['shooting']=nounInfo("shooting")
nouns['shop']=nounInfo("shop")
nouns['shopkeeper']=nounInfo("shopkeeper").addAttributes({"g":"x"})
nouns['shopper']=nounInfo("shopper").addAttributes({"g":"x"})
nouns['shopping']=nounInfo("shopping")
nouns['shopwindow']=nounInfo("shopwindow")
nouns['shore']=nounInfo("shore")
adjectives['short']=adjInfo("short")
adverbs['short']="short"
nouns['short']=nounInfo("short")
nouns['shortage']=nounInfo("shortage")
nouns['shortbread']=nounInfo("shortbread")
nouns['shortcake']=nounInfo("shortcake")
nouns['shortcoming']=nounInfo("shortcoming")
nouns['shortening']=nounInfo("shortening")
nouns['shortfall']=nounInfo("shortfall")
nouns['shorthand']=nounInfo("shorthand")
nouns['shorthorn']=nounInfo("shorthorn")
adverbs['shortly']="shortly"
nouns['shortness']=nounInfo("shortness")
nouns['shorts']=nounInfo("shorts")
nouns['shot']=nounInfo("shot")
nouns['shoulder']=nounInfo("shoulder")
nouns['shout']=nounInfo("shout")
nouns['shouting']=nounInfo("shouting")
nouns['shove']=nounInfo("shove")
nouns['shovel']=nounInfo("shovel")
nouns['shovelful']=nounInfo("shovelful")
nouns['show']=nounInfo("show")
nouns['showbiz']=nounInfo("showbiz")
nouns['shower']=nounInfo("shower")
adjectives['showery']=adjInfo("showery")
adverbs['showily']="showily"
nouns['showiness']=nounInfo("showiness")
nouns['showing']=nounInfo("showing")
nouns['showman']=nounInfo("showman")
nouns['showmanship']=nounInfo("showmanship")
adjectives['showy']=adjInfo("showy")
nouns['shrapnel']=nounInfo("shrapnel")
nouns['shred']=nounInfo("shred")
nouns['shrew']=nounInfo("shrew")
adjectives['shrewd']=adjInfo("shrewd")
adverbs['shrewdly']="shrewdly"
nouns['shrewdness']=nounInfo("shrewdness")
adjectives['shrewish']=adjInfo("shrewish")
adverbs['shrewishly']="shrewishly"
nouns['shrewishness']=nounInfo("shrewishness")
nouns['shriek']=nounInfo("shriek")
nouns['shrift']=nounInfo("shrift")
nouns['shrike']=nounInfo("shrike")
adjectives['shrill']=adjInfo("shrill")
nouns['shrillness']=nounInfo("shrillness")
adverbs['shrilly']="shrilly"
nouns['shrimp']=nounInfo("shrimp")
nouns['shrine']=nounInfo("shrine")
nouns['shrink']=nounInfo("shrink")
nouns['shrinkage']=nounInfo("shrinkage")
nouns['shroud']=nounInfo("shroud")
nouns['shrub']=nounInfo("shrub")
nouns['shrubbery']=nounInfo("shrubbery")
nouns['shrug']=nounInfo("shrug")
nouns['shuck']=nounInfo("shuck")
nouns['shudder']=nounInfo("shudder")
adverbs['shudderingly']="shudderingly"
nouns['shuffle']=nounInfo("shuffle")
nouns['shuffler']=nounInfo("shuffler")
nouns['shunter']=nounInfo("shunter")
nouns['shutter']=nounInfo("shutter")
nouns['shuttle']=nounInfo("shuttle")
nouns['shuttlecock']=nounInfo("shuttlecock")
adjectives['shy']=adjInfo("shy")
nouns['shy']=nounInfo("shy")
adverbs['shyly']="shyly"
nouns['shyness']=nounInfo("shyness")
nouns['shyster']=nounInfo("shyster")
adjectives['sibilant']=adjInfo("sibilant")
nouns['sibilant']=nounInfo("sibilant")
nouns['sibling']=nounInfo("sibling")
nouns['sibyl']=nounInfo("sibyl")
adjectives['sibylline']=adjInfo("sibylline")
adverbs['sic']="sic"
adjectives['sick']=adjInfo("sick")
nouns['sickbed']=nounInfo("sickbed")
adjectives['sickening']=adjInfo("sickening")
adverbs['sickeningly']="sickeningly"
adjectives['sickish']=adjInfo("sickish")
nouns['sickle']=nounInfo("sickle")
adjectives['sickly']=adjInfo("sickly")
nouns['sickness']=nounInfo("sickness")
nouns['side']=nounInfo("side")
nouns['sideboard']=nounInfo("sideboard")
adjectives['sided']=adjInfo("sided")
nouns['sidelight']=nounInfo("sidelight")
adjectives['sidelong']=adjInfo("sidelong")
adverbs['sidelong']="sidelong"
adjectives['sidereal']=adjInfo("sidereal")
nouns['sidesman']=nounInfo("sidesman")
nouns['sidestep']=nounInfo("sidestep")
nouns['sidewalk']=nounInfo("sidewalk")
adverbs['sidewards']="sidewards"
adverbs['sideways']="sideways"
nouns['siding']=nounInfo("siding")
nouns['siege']=nounInfo("siege")
nouns['sienna']=nounInfo("sienna")
nouns['sierra']=nounInfo("sierra")
nouns['siesta']=nounInfo("siesta")
nouns['sieve']=nounInfo("sieve")
nouns['sifter']=nounInfo("sifter")
nouns['sigh']=nounInfo("sigh")
nouns['sight']=nounInfo("sight")
adjectives['sighted']=adjInfo("sighted")
nouns['sighting']=nounInfo("sighting")
adjectives['sightless']=adjInfo("sightless")
nouns['sightseer']=nounInfo("sightseer")
nouns['sign']=nounInfo("sign")
adjectives['signal']=adjInfo("signal")
nouns['signal']=nounInfo("signal")
nouns['signaller']=nounInfo("signaller")
adverbs['signally']="signally"
nouns['signalman']=nounInfo("signalman")
nouns['signatory']=nounInfo("signatory")
nouns['signature']=nounInfo("signature")
nouns['signet']=nounInfo("signet")
nouns['significance']=nounInfo("significance")
adjectives['significant']=adjInfo("significant")
adverbs['significantly']="significantly"
nouns['signification']=nounInfo("signification")
adjectives['significative']=adjInfo("significative")
nouns['signor']=nounInfo("signor")
nouns['signora']=nounInfo("signora")
nouns['signorina']=nounInfo("signorina")
nouns['signpost']=nounInfo("signpost")
nouns['silage']=nounInfo("silage")
nouns['silence']=nounInfo("silence")
nouns['silencer']=nounInfo("silencer")
adjectives['silent']=adjInfo("silent")
adverbs['silently']="silently"
nouns['silhouette']=nounInfo("silhouette")
nouns['silica']=nounInfo("silica")
nouns['silicate']=nounInfo("silicate")
nouns['silicon']=nounInfo("silicon")
nouns['silicone']=nounInfo("silicone")
nouns['silicosis']=nounInfo("silicosis")
nouns['silk']=nounInfo("silk")
adjectives['silken']=adjInfo("silken")
adverbs['silkily']="silkily"
nouns['silkiness']=nounInfo("silkiness")
nouns['silkworm']=nounInfo("silkworm")
adjectives['silky']=adjInfo("silky")
nouns['sill']=nounInfo("sill")
nouns['sillabub']=nounInfo("sillabub")
nouns['silliness']=nounInfo("silliness")
adjectives['silly']=adjInfo("silly")
nouns['silly']=nounInfo("silly")
nouns['silo']=nounInfo("silo")
nouns['silt']=nounInfo("silt")
adjectives['silvan']=adjInfo("silvan")
nouns['silver']=nounInfo("silver")
nouns['silverfish']=nounInfo("silverfish")
adjectives['silvern']=adjInfo("silvern")
nouns['silverside']=nounInfo("silverside")
nouns['silversmith']=nounInfo("silversmith")
adjectives['silvery']=adjInfo("silvery")
adjectives['simian']=adjInfo("simian")
nouns['simian']=nounInfo("simian")
adjectives['similar']=adjInfo("similar")
nouns['similarity']=nounInfo("similarity")
adverbs['similarly']="similarly"
nouns['simile']=nounInfo("simile")
nouns['similitude']=nounInfo("similitude")
nouns['simmer']=nounInfo("simmer")
nouns['simony']=nounInfo("simony")
nouns['simoom']=nounInfo("simoom")
nouns['simoon']=nounInfo("simoon")
adverbs['simperingly']="simperingly"
adjectives['simple']=adjInfo("simple")
nouns['simple']=nounInfo("simple")
nouns['simpleton']=nounInfo("simpleton")
nouns['simplicity']=nounInfo("simplicity")
nouns['simplification']=nounInfo("simplification")
adverbs['simply']="simply"
nouns['simulacrum']=nounInfo("simulacrum")
nouns['simulation']=nounInfo("simulation")
nouns['simulator']=nounInfo("simulator")
nouns['simultaneity']=nounInfo("simultaneity")
adjectives['simultaneous']=adjInfo("simultaneous")
adverbs['simultaneously']="simultaneously"
nouns['simultaneousness']=nounInfo("simultaneousness")
nouns['sin']=nounInfo("sin")
adverbs['since']="since"
prepositions['since']=P("since")
adjectives['sincere']=adjInfo("sincere")
adverbs['sincerely']="sincerely"
nouns['sincerity']=nounInfo("sincerity")
nouns['sinecure']=nounInfo("sinecure")
nouns['sinew']=nounInfo("sinew")
adjectives['sinewy']=adjInfo("sinewy")
adjectives['sinful']=adjInfo("sinful")
nouns['sinfulness']=nounInfo("sinfulness")
adjectives['singable']=adjInfo("singable")
nouns['singe']=nounInfo("singe")
nouns['singer']=nounInfo("singer").addAttributes({"g":"x"})
nouns['singing']=nounInfo("singing")
adjectives['single']=adjInfo("single")
nouns['single']=nounInfo("single")
nouns['singleness']=nounInfo("singleness")
nouns['singlestick']=nounInfo("singlestick")
nouns['singlet']=nounInfo("singlet")
nouns['singleton']=nounInfo("singleton")
adverbs['singly']="singly"
nouns['singsong']=nounInfo("singsong")
adjectives['singular']=adjInfo("singular")
nouns['singular']=nounInfo("singular")
nouns['singularity']=nounInfo("singularity")
adverbs['singularly']="singularly"
adjectives['sinister']=adjInfo("sinister")
nouns['sink']=nounInfo("sink")
adjectives['sinkable']=adjInfo("sinkable")
nouns['sinker']=nounInfo("sinker")
nouns['sinking']=nounInfo("sinking")
adjectives['sinless']=adjInfo("sinless")
nouns['sinlessness']=nounInfo("sinlessness")
nouns['sinner']=nounInfo("sinner")
nouns['sinuosity']=nounInfo("sinuosity")
adjectives['sinuous']=adjInfo("sinuous")
nouns['sinus']=nounInfo("sinus")
nouns['sinusitis']=nounInfo("sinusitis")
nouns['sip']=nounInfo("sip")
nouns['siphon']=nounInfo("siphon")
nouns['sir']=nounInfo("sir").addAttributes({"g":"m"})
nouns['sirdar']=nounInfo("sirdar")
nouns['sire']=nounInfo("sire")
nouns['siren']=nounInfo("siren")
nouns['sirloin']=nounInfo("sirloin")
nouns['sirocco']=nounInfo("sirocco")
nouns['sirrah']=nounInfo("sirrah")
nouns['sirup']=nounInfo("sirup")
nouns['sisal']=nounInfo("sisal")
adjectives['sissified']=adjInfo("sissified")
nouns['sissy']=nounInfo("sissy")
nouns['sister']=nounInfo("sister").addAttributes({"g":"f"})
nouns['sisterhood']=nounInfo("sisterhood")
adjectives['sisterly']=adjInfo("sisterly")
nouns['sitar']=nounInfo("sitar")
nouns['site']=nounInfo("site")
nouns['sitter']=nounInfo("sitter")
nouns['sitting']=nounInfo("sitting")
adjectives['situated']=adjInfo("situated")
nouns['situation']=nounInfo("situation")
nouns['six']=nounInfo("six")
adjectives['sixfold']=adjInfo("sixfold")
adverbs['sixfold']="sixfold"
nouns['sixpence']=nounInfo("sixpence")
adjectives['sixpenny']=adjInfo("sixpenny")
nouns['sixteen']=nounInfo("sixteen")
adjectives['sixteenth']=adjInfo("sixteenth")
nouns['sixteenth']=nounInfo("sixteenth")
adjectives['sixth']=adjInfo("sixth")
nouns['sixth']=nounInfo("sixth")
adverbs['sixthly']="sixthly"
adjectives['sixtieth']=adjInfo("sixtieth")
nouns['sixtieth']=nounInfo("sixtieth")
nouns['sixty']=nounInfo("sixty")
adjectives['sizable']=adjInfo("sizable")
nouns['size']=nounInfo("size")
adjectives['sizeable']=adjInfo("sizeable")
adjectives['sized']=adjInfo("sized")
nouns['skate']=nounInfo("skate")
nouns['skateboard']=nounInfo("skateboard")
nouns['skateboarder']=nounInfo("skateboarder")
nouns['skateboarding']=nounInfo("skateboarding")
nouns['skater']=nounInfo("skater")
nouns['skating']=nounInfo("skating")
nouns['skeet']=nounInfo("skeet")
nouns['skein']=nounInfo("skein")
nouns['skeleton']=nounInfo("skeleton")
nouns['skep']=nounInfo("skep")
adjectives['skeptical']=adjInfo("skeptical")
adverbs['skeptically']="skeptically"
nouns['skepticism']=nounInfo("skepticism")
nouns['sketch']=nounInfo("sketch")
nouns['sketcher']=nounInfo("sketcher")
adverbs['sketchily']="sketchily"
nouns['sketchiness']=nounInfo("sketchiness")
adjectives['sketchy']=adjInfo("sketchy")
adjectives['skew']=adjInfo("skew")
nouns['skewer']=nounInfo("skewer")
nouns['ski']=nounInfo("ski")
nouns['skid']=nounInfo("skid")
nouns['skidpan']=nounInfo("skidpan")
nouns['skier']=nounInfo("skier")
nouns['skiff']=nounInfo("skiff")
nouns['skiffle']=nounInfo("skiffle")
adjectives['skilful']=adjInfo("skilful")
adverbs['skilfully']="skilfully"
nouns['skill']=nounInfo("skill")
adjectives['skilled']=adjInfo("skilled")
nouns['skillet']=nounInfo("skillet")
nouns['skilly']=nounInfo("skilly")
nouns['skimmer']=nounInfo("skimmer")
adverbs['skimpily']="skimpily"
adjectives['skimpy']=adjInfo("skimpy")
nouns['skin']=nounInfo("skin")
nouns['skinflint']=nounInfo("skinflint")
nouns['skinhead']=nounInfo("skinhead")
adjectives['skinny']=adjInfo("skinny")
adjectives['skint']=adjInfo("skint")
nouns['skip']=nounInfo("skip")
nouns['skipper']=nounInfo("skipper")
nouns['skirl']=nounInfo("skirl")
nouns['skirmish']=nounInfo("skirmish")
nouns['skirmisher']=nounInfo("skirmisher")
nouns['skirt']=nounInfo("skirt")
nouns['skit']=nounInfo("skit")
adjectives['skittish']=adjInfo("skittish")
adverbs['skittishly']="skittishly"
nouns['skittishness']=nounInfo("skittishness")
nouns['skittle']=nounInfo("skittle")
nouns['skittles']=nounInfo("skittles")
nouns['skivvy']=nounInfo("skivvy")
nouns['skua']=nounInfo("skua")
nouns['skulker']=nounInfo("skulker")
nouns['skull']=nounInfo("skull")
nouns['skullduggery']=nounInfo("skullduggery")
adjectives['skulled']=adjInfo("skulled")
nouns['skunk']=nounInfo("skunk")
nouns['sky']=nounInfo("sky")
nouns['skylark']=nounInfo("skylark")
nouns['skylight']=nounInfo("skylight")
nouns['skyline']=nounInfo("skyline")
nouns['skyscraper']=nounInfo("skyscraper")
adjectives['skyward']=adjInfo("skyward")
adverbs['skyward']="skyward"
adjectives['skywards']=adjInfo("skywards")
adverbs['skywards']="skywards"
nouns['slab']=nounInfo("slab")
adjectives['slack']=adjInfo("slack")
nouns['slack']=nounInfo("slack")
nouns['slacker']=nounInfo("slacker")
adverbs['slackly']="slackly"
nouns['slackness']=nounInfo("slackness")
nouns['slag']=nounInfo("slag")
nouns['slalom']=nounInfo("slalom")
nouns['slam']=nounInfo("slam")
nouns['slander']=nounInfo("slander")
nouns['slanderer']=nounInfo("slanderer")
adjectives['slanderous']=adjInfo("slanderous")
nouns['slang']=nounInfo("slang")
adverbs['slangily']="slangily"
nouns['slanginess']=nounInfo("slanginess")
adjectives['slangy']=adjInfo("slangy")
nouns['slant']=nounInfo("slant")
adverbs['slantingly']="slantingly"
adverbs['slantwise']="slantwise"
adverbs['slap']="slap"
nouns['slap']=nounInfo("slap")
adjectives['slapdash']=adjInfo("slapdash")
adverbs['slapdash']="slapdash"
nouns['slapstick']=nounInfo("slapstick")
nouns['slash']=nounInfo("slash")
nouns['slat']=nounInfo("slat")
nouns['slate']=nounInfo("slate")
nouns['slating']=nounInfo("slating")
adjectives['slatted']=adjInfo("slatted")
nouns['slattern']=nounInfo("slattern")
nouns['slatternliness']=nounInfo("slatternliness")
adjectives['slatternly']=adjInfo("slatternly")
adjectives['slaty']=adjInfo("slaty")
nouns['slaughter']=nounInfo("slaughter")
nouns['slaughterer']=nounInfo("slaughterer")
nouns['slave']=nounInfo("slave")
nouns['slaver']=nounInfo("slaver")
nouns['slavery']=nounInfo("slavery")
nouns['slavey']=nounInfo("slavey")
adjectives['slavish']=adjInfo("slavish")
adverbs['slavishly']="slavishly"
nouns['slaw']=nounInfo("slaw")
nouns['slayer']=nounInfo("slayer")
adjectives['sleazy']=adjInfo("sleazy")
nouns['sled']=nounInfo("sled")
nouns['sledge']=nounInfo("sledge")
adjectives['sleek']=adjInfo("sleek")
adverbs['sleekly']="sleekly"
nouns['sleekness']=nounInfo("sleekness")
nouns['sleep']=nounInfo("sleep")
nouns['sleeper']=nounInfo("sleeper")
adverbs['sleepily']="sleepily"
nouns['sleepiness']=nounInfo("sleepiness")
nouns['sleeping']=nounInfo("sleeping")
adjectives['sleepless']=adjInfo("sleepless")
adverbs['sleeplessly']="sleeplessly"
nouns['sleeplessness']=nounInfo("sleeplessness")
adjectives['sleepy']=adjInfo("sleepy")
nouns['sleet']=nounInfo("sleet")
adjectives['sleety']=adjInfo("sleety")
nouns['sleeve']=nounInfo("sleeve")
adjectives['sleeved']=adjInfo("sleeved")
adjectives['sleeveless']=adjInfo("sleeveless")
nouns['sleigh']=nounInfo("sleigh")
nouns['sleight']=nounInfo("sleight")
adjectives['slender']=adjInfo("slender")
adverbs['slenderly']="slenderly"
nouns['slenderness']=nounInfo("slenderness")
nouns['sleuth']=nounInfo("sleuth")
nouns['slice']=nounInfo("slice")
adjectives['slick']=adjInfo("slick")
adverbs['slick']="slick"
nouns['slick']=nounInfo("slick")
nouns['slicker']=nounInfo("slicker")
nouns['slide']=nounInfo("slide")
adjectives['slight']=adjInfo("slight")
nouns['slight']=nounInfo("slight")
adverbs['slightingly']="slightingly"
adverbs['slightly']="slightly"
nouns['slightness']=nounInfo("slightness")
adjectives['slim']=adjInfo("slim")
nouns['slime']=nounInfo("slime")
adverbs['slimly']="slimly"
nouns['slimness']=nounInfo("slimness")
adjectives['slimy']=adjInfo("slimy")
nouns['sling']=nounInfo("sling")
nouns['slinger']=nounInfo("slinger")
nouns['slip']=nounInfo("slip")
nouns['slipon']=nounInfo("slipon")
nouns['slipover']=nounInfo("slipover")
nouns['slipper']=nounInfo("slipper")
adjectives['slippered']=adjInfo("slippered")
nouns['slipperiness']=nounInfo("slipperiness")
adjectives['slippery']=adjInfo("slippery")
adjectives['slippy']=adjInfo("slippy")
adjectives['slipshod']=adjInfo("slipshod")
nouns['slipway']=nounInfo("slipway")
nouns['slit']=nounInfo("slit")
adjectives['slithery']=adjInfo("slithery")
nouns['sliver']=nounInfo("sliver")
nouns['slob']=nounInfo("slob")
nouns['slobber']=nounInfo("slobber")
nouns['sloe']=nounInfo("sloe")
nouns['slogan']=nounInfo("slogan")
nouns['slogger']=nounInfo("slogger")
nouns['sloop']=nounInfo("sloop")
nouns['slop']=nounInfo("slop")
nouns['slope']=nounInfo("slope")
adverbs['slopingly']="slopingly"
adverbs['sloppily']="sloppily"
nouns['sloppiness']=nounInfo("sloppiness")
adjectives['sloppy']=adjInfo("sloppy")
adjectives['sloshed']=adjInfo("sloshed")
nouns['slot']=nounInfo("slot")
nouns['sloth']=nounInfo("sloth")
adjectives['slothful']=adjInfo("slothful")
nouns['slouch']=nounInfo("slouch")
adverbs['slouchingly']="slouchingly"
nouns['slough']=nounInfo("slough")
nouns['sloven']=nounInfo("sloven")
nouns['slovenliness']=nounInfo("slovenliness")
adjectives['slovenly']=adjInfo("slovenly")
adjectives['slow']=adjInfo("slow")
adverbs['slow']="slow"
nouns['slowcoach']=nounInfo("slowcoach")
adverbs['slower']="slower"
adverbs['slowest']="slowest"
adverbs['slowly']="slowly"
nouns['slowness']=nounInfo("slowness")
nouns['sludge']=nounInfo("sludge")
nouns['slug']=nounInfo("slug")
nouns['sluggard']=nounInfo("sluggard")
adjectives['sluggish']=adjInfo("sluggish")
adverbs['sluggishly']="sluggishly"
nouns['sluggishness']=nounInfo("sluggishness")
nouns['sluice']=nounInfo("sluice")
nouns['slum']=nounInfo("slum")
nouns['slumber']=nounInfo("slumber")
nouns['slumberer']=nounInfo("slumberer")
adjectives['slumberous']=adjInfo("slumberous")
adjectives['slummy']=adjInfo("slummy")
nouns['slump']=nounInfo("slump")
nouns['slur']=nounInfo("slur")
nouns['slurry']=nounInfo("slurry")
nouns['slush']=nounInfo("slush")
adjectives['slushy']=adjInfo("slushy")
nouns['slut']=nounInfo("slut")
adjectives['sluttish']=adjInfo("sluttish")
adjectives['sly']=adjInfo("sly")
adverbs['slyly']="slyly"
nouns['slyness']=nounInfo("slyness")
adverbs['smack']="smack"
nouns['smack']=nounInfo("smack")
nouns['smacker']=nounInfo("smacker")
nouns['smacking']=nounInfo("smacking")
adjectives['small']=adjInfo("small")
adverbs['small']="small"
nouns['small']=nounInfo("small")
nouns['smallholder']=nounInfo("smallholder")
nouns['smallholding']=nounInfo("smallholding")
nouns['smallness']=nounInfo("smallness")
nouns['smallpox']=nounInfo("smallpox")
nouns['smalls']=nounInfo("smalls")
adjectives['smalltime']=adjInfo("smalltime")
adjectives['smarmy']=adjInfo("smarmy")
adjectives['smart']=adjInfo("smart")
nouns['smart']=nounInfo("smart")
adverbs['smartly']="smartly"
nouns['smartness']=nounInfo("smartness")
adverbs['smash']="smash"
nouns['smash']=nounInfo("smash")
nouns['smasher']=nounInfo("smasher")
adjectives['smashing']=adjInfo("smashing")
nouns['smattering']=nounInfo("smattering")
nouns['smear']=nounInfo("smear")
nouns['smell']=nounInfo("smell")
adjectives['smelly']=adjInfo("smelly")
nouns['smelt']=nounInfo("smelt")
nouns['smilax']=nounInfo("smilax")
nouns['smile']=nounInfo("smile")
adverbs['smilingly']="smilingly"
nouns['smirch']=nounInfo("smirch")
nouns['smirk']=nounInfo("smirk")
nouns['smith']=nounInfo("smith")
nouns['smithereens']=nounInfo("smithereens")
nouns['smithy']=nounInfo("smithy")
nouns['smock']=nounInfo("smock")
nouns['smocking']=nounInfo("smocking")
nouns['smog']=nounInfo("smog")
nouns['smoke']=nounInfo("smoke")
adjectives['smokeless']=adjInfo("smokeless")
nouns['smoker']=nounInfo("smoker").addAttributes({"g":"x"})
nouns['smokescreen']=nounInfo("smokescreen")
nouns['smoking']=nounInfo("smoking")
adjectives['smoky']=adjInfo("smoky")
adjectives['smooth']=adjInfo("smooth")
nouns['smooth']=nounInfo("smooth")
adverbs['smoothly']="smoothly"
nouns['smoothness']=nounInfo("smoothness")
nouns['smorgasbord']=nounInfo("smorgasbord")
nouns['smother']=nounInfo("smother")
nouns['smoulder']=nounInfo("smoulder")
nouns['smudge']=nounInfo("smudge")
adjectives['smug']=adjInfo("smug")
nouns['smuggler']=nounInfo("smuggler")
adverbs['smugly']="smugly"
nouns['smugness']=nounInfo("smugness")
nouns['smut']=nounInfo("smut")
adverbs['smuttily']="smuttily"
nouns['smuttiness']=nounInfo("smuttiness")
adjectives['smutty']=adjInfo("smutty")
nouns['snack']=nounInfo("snack")
nouns['snaffle']=nounInfo("snaffle")
nouns['snag']=nounInfo("snag")
nouns['snail']=nounInfo("snail")
nouns['snake']=nounInfo("snake")
adjectives['snaky']=adjInfo("snaky")
nouns['snap']=nounInfo("snap")
nouns['snapdragon']=nounInfo("snapdragon")
adjectives['snappish']=adjInfo("snappish")
adverbs['snappishly']="snappishly"
nouns['snappishness']=nounInfo("snappishness")
adjectives['snappy']=adjInfo("snappy")
nouns['snapshot']=nounInfo("snapshot")
nouns['snare']=nounInfo("snare")
nouns['snarl']=nounInfo("snarl")
nouns['snatch']=nounInfo("snatch")
nouns['snatcher']=nounInfo("snatcher")
adjectives['snazzy']=adjInfo("snazzy")
nouns['sneak']=nounInfo("sneak")
nouns['sneaker']=nounInfo("sneaker")
adjectives['sneaking']=adjInfo("sneaking")
adverbs['sneakingly']="sneakingly"
adjectives['sneaky']=adjInfo("sneaky")
nouns['sneer']=nounInfo("sneer")
adverbs['sneeringly']="sneeringly"
nouns['sneeze']=nounInfo("sneeze")
nouns['snick']=nounInfo("snick")
nouns['snicker']=nounInfo("snicker")
adjectives['snide']=adjInfo("snide")
nouns['sniff']=nounInfo("sniff")
adjectives['sniffy']=adjInfo("sniffy")
nouns['snifter']=nounInfo("snifter")
nouns['snigger']=nounInfo("snigger")
nouns['snip']=nounInfo("snip")
nouns['snipe']=nounInfo("snipe")
nouns['sniper']=nounInfo("sniper")
nouns['snippet']=nounInfo("snippet")
nouns['snipping']=nounInfo("snipping")
nouns['sniveller']=nounInfo("sniveller")
nouns['snob']=nounInfo("snob")
nouns['snobbery']=nounInfo("snobbery")
adjectives['snobbish']=adjInfo("snobbish")
adverbs['snobbishly']="snobbishly"
nouns['snobbishness']=nounInfo("snobbishness")
nouns['snood']=nounInfo("snood")
nouns['snook']=nounInfo("snook")
nouns['snooker']=nounInfo("snooker")
nouns['snooper']=nounInfo("snooper")
adverbs['snootily']="snootily"
adjectives['snooty']=adjInfo("snooty")
nouns['snooze']=nounInfo("snooze")
nouns['snore']=nounInfo("snore")
nouns['snorer']=nounInfo("snorer")
nouns['snorkel']=nounInfo("snorkel")
nouns['snort']=nounInfo("snort")
nouns['snorter']=nounInfo("snorter")
adjectives['snorty']=adjInfo("snorty")
nouns['snot']=nounInfo("snot")
adjectives['snotty']=adjInfo("snotty")
nouns['snout']=nounInfo("snout")
nouns['snow']=nounInfo("snow")
nouns['snowball']=nounInfo("snowball")
adjectives['snowblind']=adjInfo("snowblind")
nouns['snowblindness']=nounInfo("snowblindness")
adjectives['snowbound']=adjInfo("snowbound")
nouns['snowdrift']=nounInfo("snowdrift")
nouns['snowdrop']=nounInfo("snowdrop")
nouns['snowfall']=nounInfo("snowfall")
nouns['snowflake']=nounInfo("snowflake")
nouns['snowman']=nounInfo("snowman")
nouns['snowplough']=nounInfo("snowplough")
nouns['snowstorm']=nounInfo("snowstorm")
adjectives['snowy']=adjInfo("snowy")
adjectives['snub']=adjInfo("snub")
nouns['snub']=nounInfo("snub")
nouns['snuff']=nounInfo("snuff")
nouns['snuffer']=nounInfo("snuffer")
nouns['snuffle']=nounInfo("snuffle")
adjectives['snug']=adjInfo("snug")
nouns['snug']=nounInfo("snug")
nouns['snuggery']=nounInfo("snuggery")
adverbs['snugly']="snugly"
nouns['snugness']=nounInfo("snugness")
adverbs['so']="so"
nouns['soak']=nounInfo("soak")
nouns['soaker']=nounInfo("soaker")
nouns['soap']=nounInfo("soap")
adjectives['soapy']=adjInfo("soapy")
nouns['sob']=nounInfo("sob")
adverbs['sobbingly']="sobbingly"
adjectives['sober']=adjInfo("sober")
adverbs['soberly']="soberly"
nouns['sobriety']=nounInfo("sobriety")
nouns['sobriquet']=nounInfo("sobriquet")
nouns['soccer']=nounInfo("soccer")
nouns['sociability']=nounInfo("sociability")
adjectives['sociable']=adjInfo("sociable")
adverbs['sociably']="sociably"
adjectives['social']=adjInfo("social")
nouns['social']=nounInfo("social")
nouns['socialism']=nounInfo("socialism")
adjectives['socialist']=adjInfo("socialist")
nouns['socialist']=nounInfo("socialist")
nouns['socialite']=nounInfo("socialite")
nouns['socialization']=nounInfo("socialization")
adverbs['socially']="socially"
nouns['society']=nounInfo("society")
adjectives['sociological']=adjInfo("sociological")
adverbs['sociologically']="sociologically"
nouns['sociologist']=nounInfo("sociologist")
nouns['sociology']=nounInfo("sociology")
adverbs['sock']="sock"
nouns['sock']=nounInfo("sock")
nouns['socket']=nounInfo("socket")
nouns['sod']=nounInfo("sod")
nouns['soda']=nounInfo("soda")
adjectives['sodden']=adjInfo("sodden")
adjectives['sodding']=adjInfo("sodding")
nouns['sodium']=nounInfo("sodium")
nouns['sodomite']=nounInfo("sodomite")
nouns['sodomy']=nounInfo("sodomy")
nouns['sofa']=nounInfo("sofa")
adjectives['soft']=adjInfo("soft")
nouns['softener']=nounInfo("softener")
adjectives['softish']=adjInfo("softish")
adverbs['softly']="softly"
nouns['softness']=nounInfo("softness")
nouns['software']=nounInfo("software")
nouns['softwood']=nounInfo("softwood")
nouns['softy']=nounInfo("softy")
nouns['sogginess']=nounInfo("sogginess")
adjectives['soggy']=adjInfo("soggy")
nouns['soh']=nounInfo("soh")
adjectives['soignee']=adjInfo("soignee")
nouns['soil']=nounInfo("soil")
nouns['sojourner']=nounInfo("sojourner")
nouns['solace']=nounInfo("solace")
adjectives['solar']=adjInfo("solar")
nouns['solarium']=nounInfo("solarium")
nouns['solder']=nounInfo("solder")
nouns['soldier']=nounInfo("soldier").addAttributes({"g":"x"})
nouns['soldiery']=nounInfo("soldiery")
adjectives['sole']=adjInfo("sole")
nouns['sole']=nounInfo("sole")
nouns['solecism']=nounInfo("solecism")
adjectives['soled']=adjInfo("soled")
adverbs['solely']="solely"
adjectives['solemn']=adjInfo("solemn")
nouns['solemnity']=nounInfo("solemnity")
nouns['solemnization']=nounInfo("solemnization")
adverbs['solemnly']="solemnly"
nouns['solemnness']=nounInfo("solemnness")
nouns['solicitation']=nounInfo("solicitation")
nouns['solicitor']=nounInfo("solicitor")
adjectives['solicitous']=adjInfo("solicitous")
adverbs['solicitously']="solicitously"
nouns['solicitude']=nounInfo("solicitude")
adjectives['solid']=adjInfo("solid")
nouns['solid']=nounInfo("solid")
nouns['solidarity']=nounInfo("solidarity")
nouns['solidification']=nounInfo("solidification")
nouns['solidity']=nounInfo("solidity")
adverbs['solidly']="solidly"
nouns['solidness']=nounInfo("solidness")
nouns['soliloquy']=nounInfo("soliloquy")
nouns['solipsism']=nounInfo("solipsism")
nouns['solitaire']=nounInfo("solitaire")
adverbs['solitarily']="solitarily"
adjectives['solitary']=adjInfo("solitary")
nouns['solitude']=nounInfo("solitude")
nouns['solo']=nounInfo("solo")
nouns['soloist']=nounInfo("soloist")
nouns['solstice']=nounInfo("solstice")
nouns['solubility']=nounInfo("solubility")
adjectives['soluble']=adjInfo("soluble")
nouns['solution']=nounInfo("solution")
adjectives['solvable']=adjInfo("solvable")
nouns['solvency']=nounInfo("solvency")
adjectives['solvent']=adjInfo("solvent")
nouns['solvent']=nounInfo("solvent")
adjectives['somatic']=adjInfo("somatic")
adjectives['sombre']=adjInfo("sombre")
adverbs['sombrely']="sombrely"
nouns['sombreness']=nounInfo("sombreness")
nouns['sombrero']=nounInfo("sombrero")
adverbs['someday']="someday"
adverbs['somehow']="somehow"
adverbs['someplace']="someplace"
nouns['somersault']=nounInfo("somersault")
adverbs['sometime']="sometime"
adverbs['sometimes']="sometimes"
adverbs['someway']="someway"
adverbs['somewhat']="somewhat"
adverbs['somewhere']="somewhere"
nouns['somnambulism']=nounInfo("somnambulism")
nouns['somnambulist']=nounInfo("somnambulist")
nouns['somnolence']=nounInfo("somnolence")
adjectives['somnolent']=adjInfo("somnolent")
adverbs['somnolently']="somnolently"
nouns['son']=nounInfo("son").addAttributes({"g":"m"})
nouns['sonar']=nounInfo("sonar")
nouns['sonata']=nounInfo("sonata")
nouns['song']=nounInfo("song")
nouns['songbird']=nounInfo("songbird")
nouns['songster']=nounInfo("songster")
nouns['songstress']=nounInfo("songstress")
adjectives['sonic']=adjInfo("sonic")
nouns['sonnet']=nounInfo("sonnet")
nouns['sonneteer']=nounInfo("sonneteer")
nouns['sonny']=nounInfo("sonny")
nouns['sonority']=nounInfo("sonority")
adjectives['sonorous']=adjInfo("sonorous")
adverbs['sonorously']="sonorously"
adjectives['sonsy']=adjInfo("sonsy")
adjectives['soon']=adjInfo("soon")
adverbs['soon']="soon"
nouns['soot']=nounInfo("soot")
nouns['sooth']=nounInfo("sooth")
adverbs['soothingly']="soothingly"
nouns['soothsayer']=nounInfo("soothsayer")
adjectives['sooty']=adjInfo("sooty")
nouns['sop']=nounInfo("sop")
nouns['sophism']=nounInfo("sophism")
nouns['sophist']=nounInfo("sophist")
adjectives['sophisticated']=adjInfo("sophisticated")
nouns['sophistication']=nounInfo("sophistication")
nouns['sophistry']=nounInfo("sophistry")
nouns['sophomore']=nounInfo("sophomore")
adjectives['soporific']=adjInfo("soporific")
nouns['soporific']=nounInfo("soporific")
adjectives['sopping']=adjInfo("sopping")
adverbs['sopping']="sopping"
adjectives['soppy']=adjInfo("soppy")
nouns['soprano']=nounInfo("soprano")
nouns['sorbet']=nounInfo("sorbet")
nouns['sorcerer']=nounInfo("sorcerer")
nouns['sorceress']=nounInfo("sorceress")
nouns['sorcery']=nounInfo("sorcery")
adjectives['sordid']=adjInfo("sordid")
adverbs['sordidly']="sordidly"
nouns['sordidness']=nounInfo("sordidness")
adjectives['sore']=adjInfo("sore")
nouns['sore']=nounInfo("sore")
adverbs['sorely']="sorely"
nouns['soreness']=nounInfo("soreness")
nouns['sorghum']=nounInfo("sorghum")
nouns['sorority']=nounInfo("sorority")
adjectives['sorrel']=adjInfo("sorrel")
nouns['sorrel']=nounInfo("sorrel")
nouns['sorrow']=nounInfo("sorrow")
adjectives['sorrowful']=adjInfo("sorrowful")
adverbs['sorrowfully']="sorrowfully"
adjectives['sorry']=adjInfo("sorry")
nouns['sort']=nounInfo("sort")
nouns['sorter']=nounInfo("sorter")
nouns['sortie']=nounInfo("sortie")
nouns['sot']=nounInfo("sot")
adjectives['sottish']=adjInfo("sottish")
adverbs['sottishly']="sottishly"
nouns['sottishness']=nounInfo("sottishness")
nouns['sou']=nounInfo("sou")
nouns['soubrette']=nounInfo("soubrette")
nouns['soubriquet']=nounInfo("soubriquet")
nouns['soul']=nounInfo("soul")
adjectives['soulful']=adjInfo("soulful")
adverbs['soulfully']="soulfully"
adjectives['soulless']=adjInfo("soulless")
adverbs['soullessly']="soullessly"
adjectives['sound']=adjInfo("sound")
adverbs['sound']="sound"
nouns['sound']=nounInfo("sound")
nouns['soundings']=nounInfo("soundings")
adjectives['soundless']=adjInfo("soundless")
adverbs['soundlessly']="soundlessly"
adverbs['soundly']="soundly"
nouns['soundness']=nounInfo("soundness")
adjectives['soundproof']=adjInfo("soundproof")
nouns['soup']=nounInfo("soup")
adjectives['sour']=adjInfo("sour")
nouns['source']=nounInfo("source")
adverbs['sourly']="sourly"
nouns['sourness']=nounInfo("sourness")
adjectives['soused']=adjInfo("soused")
nouns['soutane']=nounInfo("soutane")
adverbs['south']="south"
nouns['south']=nounInfo("south")
adverbs['southeast']="southeast"
nouns['southeast']=nounInfo("southeast")
nouns['southeaster']=nounInfo("southeaster")
adjectives['southeasterly']=adjInfo("southeasterly")
adjectives['southeastern']=adjInfo("southeastern")
adjectives['southerly']=adjInfo("southerly")
adverbs['southerly']="southerly"
adjectives['southern']=adjInfo("southern")
nouns['southerner']=nounInfo("southerner")
adjectives['southernmost']=adjInfo("southernmost")
adverbs['southward']="southward"
adverbs['southwards']="southwards"
adverbs['southwest']="southwest"
nouns['southwest']=nounInfo("southwest")
nouns['southwester']=nounInfo("southwester")
adjectives['southwesterly']=adjInfo("southwesterly")
adjectives['southwestern']=adjInfo("southwestern")
nouns['souvenir']=nounInfo("souvenir")
adjectives['sovereign']=adjInfo("sovereign")
nouns['sovereign']=nounInfo("sovereign")
nouns['sovereignty']=nounInfo("sovereignty")
nouns['soviet']=nounInfo("soviet")
nouns['sow']=nounInfo("sow")
nouns['sower']=nounInfo("sower")
nouns['soy']=nounInfo("soy")
nouns['soya']=nounInfo("soya")
adjectives['sozzled']=adjInfo("sozzled")
nouns['spa']=nounInfo("spa")
nouns['space']=nounInfo("space")
nouns['spacecraft']=nounInfo("spacecraft")
nouns['spaceship']=nounInfo("spaceship")
adjectives['spacious']=adjInfo("spacious")
adverbs['spaciously']="spaciously"
nouns['spaciousness']=nounInfo("spaciousness")
nouns['spade']=nounInfo("spade")
nouns['spadeful']=nounInfo("spadeful")
nouns['spaghetti']=nounInfo("spaghetti")
nouns['spam']=nounInfo("spam")
nouns['span']=nounInfo("span")
nouns['spangle']=nounInfo("spangle")
nouns['spaniel']=nounInfo("spaniel")
adjectives['spanking']=adjInfo("spanking")
nouns['spanking']=nounInfo("spanking")
nouns['spanner']=nounInfo("spanner")
nouns['spar']=nounInfo("spar")
adjectives['spare']=adjInfo("spare")
nouns['spare']=nounInfo("spare")
adverbs['sparely']="sparely"
nouns['spareness']=nounInfo("spareness")
adjectives['sparing']=adjInfo("sparing")
adverbs['sparingly']="sparingly"
nouns['spark']=nounInfo("spark")
nouns['sparkle']=nounInfo("sparkle")
nouns['sparkler']=nounInfo("sparkler")
adjectives['sparkling']=adjInfo("sparkling")
nouns['sparrow']=nounInfo("sparrow")
adjectives['sparse']=adjInfo("sparse")
adverbs['sparsely']="sparsely"
nouns['sparseness']=nounInfo("sparseness")
nouns['sparsity']=nounInfo("sparsity")
nouns['spasm']=nounInfo("spasm")
adjectives['spasmodic']=adjInfo("spasmodic")
adverbs['spasmodically']="spasmodically"
adjectives['spastic']=adjInfo("spastic")
nouns['spastic']=nounInfo("spastic")
nouns['spat']=nounInfo("spat")
nouns['spatchcock']=nounInfo("spatchcock")
nouns['spate']=nounInfo("spate")
adjectives['spatial']=adjInfo("spatial")
adverbs['spatially']="spatially"
nouns['spatter']=nounInfo("spatter")
nouns['spatula']=nounInfo("spatula")
nouns['spavin']=nounInfo("spavin")
adjectives['spavined']=adjInfo("spavined")
nouns['spawn']=nounInfo("spawn")
nouns['speaker']=nounInfo("speaker").addAttributes({"g":"x"})
nouns['speakership']=nounInfo("speakership")
nouns['spear']=nounInfo("spear")
nouns['spearmint']=nounInfo("spearmint")
nouns['spec']=nounInfo("spec")
adjectives['special']=adjInfo("special")
nouns['special']=nounInfo("special")
nouns['specialist']=nounInfo("specialist").addAttributes({"g":"x"})
nouns['speciality']=nounInfo("speciality")
nouns['specialization']=nounInfo("specialization")
adverbs['specially']="specially"
nouns['specialty']=nounInfo("specialty")
nouns['specie']=nounInfo("specie")
nouns['species']=nounInfo("species")
adjectives['specific']=adjInfo("specific")
nouns['specific']=nounInfo("specific")
adverbs['specifically']="specifically"
nouns['specification']=nounInfo("specification")
nouns['specimen']=nounInfo("specimen")
adjectives['specious']=adjInfo("specious")
adverbs['speciously']="speciously"
nouns['speciousness']=nounInfo("speciousness")
nouns['speck']=nounInfo("speck")
adjectives['specked']=adjInfo("specked")
nouns['speckle']=nounInfo("speckle")
adjectives['speckled']=adjInfo("speckled")
adjectives['speckless']=adjInfo("speckless")
nouns['specs']=nounInfo("specs")
nouns['spectacle']=nounInfo("spectacle")
adjectives['spectacled']=adjInfo("spectacled")
adjectives['spectacular']=adjInfo("spectacular")
nouns['spectacular']=nounInfo("spectacular")
adverbs['spectacularly']="spectacularly"
nouns['spectator']=nounInfo("spectator").addAttributes({"g":"x"})
adjectives['spectral']=adjInfo("spectral")
nouns['spectre']=nounInfo("spectre")
nouns['spectroscope']=nounInfo("spectroscope")
adjectives['spectroscopic']=adjInfo("spectroscopic")
nouns['spectrum']=nounInfo("spectrum")
nouns['speculation']=nounInfo("speculation")
adjectives['speculative']=adjInfo("speculative")
adverbs['speculatively']="speculatively"
nouns['speculator']=nounInfo("speculator")
nouns['speech']=nounInfo("speech")
adjectives['speechless']=adjInfo("speechless")
adverbs['speechlessly']="speechlessly"
nouns['speed']=nounInfo("speed")
adverbs['speedily']="speedily"
nouns['speeding']=nounInfo("speeding")
nouns['speedometer']=nounInfo("speedometer")
nouns['speedway']=nounInfo("speedway")
nouns['speedwell']=nounInfo("speedwell")
adjectives['speedy']=adjInfo("speedy")
nouns['spelaeologist']=nounInfo("spelaeologist")
nouns['spelaeology']=nounInfo("spelaeology")
nouns['speleologist']=nounInfo("speleologist")
nouns['speleology']=nounInfo("speleology")
nouns['spell']=nounInfo("spell")
nouns['spellbinder']=nounInfo("spellbinder")
adjectives['spellbound']=adjInfo("spellbound")
nouns['speller']=nounInfo("speller")
nouns['spelling']=nounInfo("spelling")
nouns['spelt']=nounInfo("spelt")
nouns['spender']=nounInfo("spender")
nouns['spendthrift']=nounInfo("spendthrift")
adjectives['spent']=adjInfo("spent")
nouns['sperm']=nounInfo("sperm")
nouns['spermaceti']=nounInfo("spermaceti")
nouns['spermatozoon']=nounInfo("spermatozoon")
nouns['sphagnum']=nounInfo("sphagnum")
nouns['sphere']=nounInfo("sphere")
adjectives['spherical']=adjInfo("spherical")
nouns['spheroid']=nounInfo("spheroid")
nouns['sphinx']=nounInfo("sphinx")
nouns['spice']=nounInfo("spice")
adverbs['spicily']="spicily"
nouns['spiciness']=nounInfo("spiciness")
adjectives['spick']=adjInfo("spick")
adjectives['spicy']=adjInfo("spicy")
nouns['spider']=nounInfo("spider")
adjectives['spidery']=adjInfo("spidery")
nouns['spiel']=nounInfo("spiel")
nouns['spigot']=nounInfo("spigot")
nouns['spike']=nounInfo("spike")
nouns['spikenard']=nounInfo("spikenard")
adjectives['spiky']=adjInfo("spiky")
nouns['spill']=nounInfo("spill")
nouns['spillover']=nounInfo("spillover")
nouns['spillway']=nounInfo("spillway")
nouns['spin']=nounInfo("spin")
nouns['spinach']=nounInfo("spinach")
adjectives['spinal']=adjInfo("spinal")
nouns['spindle']=nounInfo("spindle")
adjectives['spindly']=adjInfo("spindly")
nouns['spindrift']=nounInfo("spindrift")
nouns['spine']=nounInfo("spine")
adjectives['spineless']=adjInfo("spineless")
nouns['spinet']=nounInfo("spinet")
nouns['spinnaker']=nounInfo("spinnaker")
nouns['spinney']=nounInfo("spinney")
nouns['spinster']=nounInfo("spinster").addAttributes({"g":"f"})
nouns['spinsterhood']=nounInfo("spinsterhood")
adjectives['spiny']=adjInfo("spiny")
adjectives['spiral']=adjInfo("spiral")
nouns['spiral']=nounInfo("spiral")
adverbs['spirally']="spirally"
nouns['spire']=nounInfo("spire")
nouns['spirit']=nounInfo("spirit")
adjectives['spirited']=adjInfo("spirited")
adjectives['spiritless']=adjInfo("spiritless")
adjectives['spiritual']=adjInfo("spiritual")
nouns['spiritual']=nounInfo("spiritual")
nouns['spiritualism']=nounInfo("spiritualism")
nouns['spiritualist']=nounInfo("spiritualist")
adjectives['spiritualistic']=adjInfo("spiritualistic")
nouns['spirituality']=nounInfo("spirituality")
nouns['spiritualization']=nounInfo("spiritualization")
adverbs['spiritually']="spiritually"
adjectives['spirituous']=adjInfo("spirituous")
nouns['spirt']=nounInfo("spirt")
nouns['spit']=nounInfo("spit")
nouns['spite']=nounInfo("spite")
adjectives['spiteful']=adjInfo("spiteful")
adverbs['spitefully']="spitefully"
nouns['spitefulness']=nounInfo("spitefulness")
nouns['spitfire']=nounInfo("spitfire")
nouns['spitting']=nounInfo("spitting")
nouns['spittle']=nounInfo("spittle")
nouns['spittoon']=nounInfo("spittoon")
nouns['spiv']=nounInfo("spiv")
nouns['splash']=nounInfo("splash")
adjectives['splay']=adjInfo("splay")
nouns['splay']=nounInfo("splay")
nouns['spleen']=nounInfo("spleen")
adjectives['splendid']=adjInfo("splendid")
adverbs['splendidly']="splendidly"
adjectives['splendiferous']=adjInfo("splendiferous")
nouns['splendour']=nounInfo("splendour")
adjectives['splenetic']=adjInfo("splenetic")
nouns['splice']=nounInfo("splice")
nouns['splicer']=nounInfo("splicer")
nouns['splint']=nounInfo("splint")
nouns['splinter']=nounInfo("splinter")
adjectives['splintery']=adjInfo("splintery")
nouns['split']=nounInfo("split")
nouns['splodge']=nounInfo("splodge")
nouns['splotch']=nounInfo("splotch")
nouns['splurge']=nounInfo("splurge")
nouns['splutter']=nounInfo("splutter")
nouns['spoil']=nounInfo("spoil")
nouns['spoke']=nounInfo("spoke")
nouns['spokesman']=nounInfo("spokesman")
nouns['spokesperson']=nounInfo("spokesperson")
nouns['spoliation']=nounInfo("spoliation")
adjectives['spondaic']=adjInfo("spondaic")
nouns['spondee']=nounInfo("spondee")
nouns['sponge']=nounInfo("sponge")
nouns['sponger']=nounInfo("sponger")
nouns['sponginess']=nounInfo("sponginess")
adjectives['spongy']=adjInfo("spongy")
nouns['sponsor']=nounInfo("sponsor")
nouns['spontaneity']=nounInfo("spontaneity")
adjectives['spontaneous']=adjInfo("spontaneous")
adverbs['spontaneously']="spontaneously"
nouns['spontaneousness']=nounInfo("spontaneousness")
nouns['spoof']=nounInfo("spoof")
nouns['spook']=nounInfo("spook")
adjectives['spooky']=adjInfo("spooky")
nouns['spool']=nounInfo("spool")
nouns['spoon']=nounInfo("spoon")
nouns['spoonerism']=nounInfo("spoonerism")
nouns['spoonfeeding']=nounInfo("spoonfeeding")
nouns['spoonful']=nounInfo("spoonful")
nouns['spoor']=nounInfo("spoor")
adjectives['sporadic']=adjInfo("sporadic")
adverbs['sporadically']="sporadically"
nouns['spore']=nounInfo("spore")
nouns['sporran']=nounInfo("sporran")
nouns['sport']=nounInfo("sport")
adjectives['sporting']=adjInfo("sporting")
adverbs['sportingly']="sportingly"
adjectives['sportive']=adjInfo("sportive")
adverbs['sportively']="sportively"
nouns['sportiveness']=nounInfo("sportiveness")
nouns['sportsman']=nounInfo("sportsman")
adjectives['sportsmanlike']=adjInfo("sportsmanlike")
nouns['sportsmanship']=nounInfo("sportsmanship")
nouns['spot']=nounInfo("spot")
adjectives['spotless']=adjInfo("spotless")
adverbs['spotlessly']="spotlessly"
nouns['spotlight']=nounInfo("spotlight")
adjectives['spotted']=adjInfo("spotted")
nouns['spotter']=nounInfo("spotter")
adjectives['spotty']=adjInfo("spotty")
adjectives['spousal']=adjInfo("spousal")
nouns['spouse']=nounInfo("spouse").addAttributes({"g":"x"})
nouns['spout']=nounInfo("spout")
nouns['sprain']=nounInfo("sprain")
nouns['sprat']=nounInfo("sprat")
nouns['sprawl']=nounInfo("sprawl")
nouns['spray']=nounInfo("spray")
nouns['sprayer']=nounInfo("sprayer")
nouns['spread']=nounInfo("spread")
nouns['spreadeagle']=nounInfo("spreadeagle")
nouns['spreader']=nounInfo("spreader")
nouns['spree']=nounInfo("spree")
nouns['sprig']=nounInfo("sprig")
adjectives['sprigged']=adjInfo("sprigged")
nouns['sprightliness']=nounInfo("sprightliness")
adjectives['sprightly']=adjInfo("sprightly")
nouns['spring']=nounInfo("spring")
nouns['springbok']=nounInfo("springbok")
adjectives['springless']=adjInfo("springless")
adjectives['springlike']=adjInfo("springlike")
nouns['springtide']=nounInfo("springtide")
nouns['springtime']=nounInfo("springtime")
adjectives['springy']=adjInfo("springy")
nouns['sprinkler']=nounInfo("sprinkler")
nouns['sprinkling']=nounInfo("sprinkling")
nouns['sprint']=nounInfo("sprint")
nouns['sprinter']=nounInfo("sprinter")
nouns['sprit']=nounInfo("sprit")
nouns['sprite']=nounInfo("sprite")
nouns['spritsail']=nounInfo("spritsail")
nouns['sprocket']=nounInfo("sprocket")
nouns['sprout']=nounInfo("sprout")
adjectives['spruce']=adjInfo("spruce")
nouns['spruce']=nounInfo("spruce")
adverbs['sprucely']="sprucely"
nouns['spruceness']=nounInfo("spruceness")
adjectives['spry']=adjInfo("spry")
nouns['spud']=nounInfo("spud")
nouns['spume']=nounInfo("spume")
nouns['spunk']=nounInfo("spunk")
adjectives['spunky']=adjInfo("spunky")
nouns['spur']=nounInfo("spur")
adjectives['spurious']=adjInfo("spurious")
adverbs['spuriously']="spuriously"
nouns['spuriousness']=nounInfo("spuriousness")
nouns['spurt']=nounInfo("spurt")
nouns['sputnik']=nounInfo("sputnik")
nouns['sputum']=nounInfo("sputum")
nouns['spy']=nounInfo("spy").addAttributes({"g":"x"})
nouns['squab']=nounInfo("squab")
nouns['squabble']=nounInfo("squabble")
nouns['squad']=nounInfo("squad")
nouns['squadron']=nounInfo("squadron")
adjectives['squalid']=adjInfo("squalid")
adverbs['squalidly']="squalidly"
nouns['squall']=nounInfo("squall")
adjectives['squally']=adjInfo("squally")
nouns['squalor']=nounInfo("squalor")
nouns['squandermania']=nounInfo("squandermania")
adjectives['square']=adjInfo("square")
adverbs['square']="square"
nouns['square']=nounInfo("square")
adverbs['squarely']="squarely"
nouns['squareness']=nounInfo("squareness")
nouns['squash']=nounInfo("squash")
adjectives['squashy']=adjInfo("squashy")
adjectives['squat']=adjInfo("squat")
nouns['squatter']=nounInfo("squatter")
nouns['squaw']=nounInfo("squaw").addAttributes({"g":"f"})
nouns['squawk']=nounInfo("squawk")
nouns['squawker']=nounInfo("squawker")
nouns['squeak']=nounInfo("squeak")
nouns['squeaker']=nounInfo("squeaker")
adjectives['squeaky']=adjInfo("squeaky")
nouns['squeal']=nounInfo("squeal")
nouns['squealer']=nounInfo("squealer")
adjectives['squeamish']=adjInfo("squeamish")
adverbs['squeamishly']="squeamishly"
nouns['squeamishness']=nounInfo("squeamishness")
nouns['squeegee']=nounInfo("squeegee")
nouns['squeeze']=nounInfo("squeeze")
nouns['squeezer']=nounInfo("squeezer")
nouns['squelch']=nounInfo("squelch")
nouns['squib']=nounInfo("squib")
nouns['squid']=nounInfo("squid")
adjectives['squiffy']=adjInfo("squiffy")
nouns['squiggle']=nounInfo("squiggle")
adjectives['squiggly']=adjInfo("squiggly")
nouns['squint']=nounInfo("squint")
nouns['squire']=nounInfo("squire")
nouns['squirearchy']=nounInfo("squirearchy")
nouns['squirm']=nounInfo("squirm")
nouns['squirrel']=nounInfo("squirrel")
nouns['squirt']=nounInfo("squirt")
nouns['stab']=nounInfo("stab")
nouns['stabber']=nounInfo("stabber")
nouns['stability']=nounInfo("stability")
nouns['stabilization']=nounInfo("stabilization")
nouns['stabilizer']=nounInfo("stabilizer")
adjectives['stable']=adjInfo("stable")
nouns['stable']=nounInfo("stable")
nouns['stabling']=nounInfo("stabling")
adjectives['staccato']=adjInfo("staccato")
adverbs['staccato']="staccato"
nouns['stack']=nounInfo("stack")
nouns['stadium']=nounInfo("stadium")
nouns['staff']=nounInfo("staff")
nouns['stag']=nounInfo("stag")
nouns['stage']=nounInfo("stage")
nouns['stager']=nounInfo("stager")
nouns['stagflation']=nounInfo("stagflation")
nouns['stagger']=nounInfo("stagger")
nouns['staggerer']=nounInfo("staggerer")
adverbs['staggeringly']="staggeringly"
adverbs['stagily']="stagily"
nouns['staginess']=nounInfo("staginess")
nouns['staging']=nounInfo("staging")
nouns['stagnancy']=nounInfo("stagnancy")
adjectives['stagnant']=adjInfo("stagnant")
nouns['stagnation']=nounInfo("stagnation")
adjectives['stagy']=adjInfo("stagy")
adjectives['staid']=adjInfo("staid")
adverbs['staidly']="staidly"
nouns['staidness']=nounInfo("staidness")
nouns['stain']=nounInfo("stain")
adjectives['stainless']=adjInfo("stainless")
nouns['stair']=nounInfo("stair")
nouns['staircase']=nounInfo("staircase")
nouns['stairway']=nounInfo("stairway")
nouns['stake']=nounInfo("stake")
nouns['stalactite']=nounInfo("stalactite")
nouns['stalagmite']=nounInfo("stalagmite")
adjectives['stale']=adjInfo("stale")
nouns['stalemate']=nounInfo("stalemate")
nouns['staleness']=nounInfo("staleness")
nouns['stalk']=nounInfo("stalk")
nouns['stalker']=nounInfo("stalker")
nouns['stall']=nounInfo("stall")
nouns['stallion']=nounInfo("stallion")
adjectives['stalwart']=adjInfo("stalwart")
nouns['stalwart']=nounInfo("stalwart")
nouns['stamen']=nounInfo("stamen")
nouns['stamina']=nounInfo("stamina")
nouns['stammer']=nounInfo("stammer")
nouns['stammerer']=nounInfo("stammerer")
adverbs['stammeringly']="stammeringly"
nouns['stamp']=nounInfo("stamp")
nouns['stampede']=nounInfo("stampede")
nouns['stance']=nounInfo("stance")
nouns['stanchion']=nounInfo("stanchion")
nouns['stand']=nounInfo("stand")
adjectives['standard']=adjInfo("standard")
nouns['standard']=nounInfo("standard")
nouns['standardization']=nounInfo("standardization")
nouns['standby']=nounInfo("standby")
adjectives['standing']=adjInfo("standing")
nouns['standing']=nounInfo("standing")
nouns['standpoint']=nounInfo("standpoint")
nouns['standstill']=nounInfo("standstill")
nouns['stanza']=nounInfo("stanza")
nouns['staple']=nounInfo("staple")
nouns['stapler']=nounInfo("stapler")
nouns['star']=nounInfo("star")
nouns['starboard']=nounInfo("starboard")
nouns['starch']=nounInfo("starch")
adjectives['starchy']=adjInfo("starchy")
nouns['stardom']=nounInfo("stardom")
nouns['stare']=nounInfo("stare")
nouns['starfish']=nounInfo("starfish")
adjectives['staring']=adjInfo("staring")
adverbs['staring']="staring"
adjectives['stark']=adjInfo("stark")
adverbs['stark']="stark"
adjectives['starkers']=adjInfo("starkers")
adverbs['starkly']="starkly"
adjectives['starless']=adjInfo("starless")
nouns['starlet']=nounInfo("starlet")
nouns['starlight']=nounInfo("starlight")
nouns['starling']=nounInfo("starling")
adjectives['starlit']=adjInfo("starlit")
adjectives['starry']=adjInfo("starry")
nouns['start']=nounInfo("start")
nouns['starter']=nounInfo("starter")
adverbs['startlingly']="startlingly"
nouns['starvation']=nounInfo("starvation")
nouns['starveling']=nounInfo("starveling")
nouns['state']=nounInfo("state")
nouns['statecraft']=nounInfo("statecraft")
adjectives['stated']=adjInfo("stated")
adjectives['stateless']=adjInfo("stateless")
nouns['stateliness']=nounInfo("stateliness")
adjectives['stately']=adjInfo("stately")
nouns['statement']=nounInfo("statement")
nouns['statesman']=nounInfo("statesman")
adjectives['statesmanlike']=adjInfo("statesmanlike")
nouns['statesmanship']=nounInfo("statesmanship")
adjectives['static']=adjInfo("static")
adverbs['statically']="statically"
nouns['statics']=nounInfo("statics")
nouns['station']=nounInfo("station")
adjectives['stationary']=adjInfo("stationary")
nouns['stationer']=nounInfo("stationer")
nouns['stationery']=nounInfo("stationery")
adjectives['statistical']=adjInfo("statistical")
adverbs['statistically']="statistically"
nouns['statistician']=nounInfo("statistician")
nouns['statistics']=nounInfo("statistics")
adjectives['statuary']=adjInfo("statuary")
nouns['statuary']=nounInfo("statuary")
nouns['statue']=nounInfo("statue")
adjectives['statuesque']=adjInfo("statuesque")
nouns['statuette']=nounInfo("statuette")
nouns['stature']=nounInfo("stature")
nouns['status']=nounInfo("status")
nouns['statute']=nounInfo("statute")
adverbs['statutorily']="statutorily"
adjectives['statutory']=adjInfo("statutory")
adjectives['staunch']=adjInfo("staunch")
adverbs['staunchly']="staunchly"
nouns['staunchness']=nounInfo("staunchness")
nouns['stave']=nounInfo("stave")
nouns['stay']=nounInfo("stay")
nouns['stayer']=nounInfo("stayer")
nouns['stead']=nounInfo("stead")
adjectives['steadfast']=adjInfo("steadfast")
adverbs['steadfastly']="steadfastly"
nouns['steadfastness']=nounInfo("steadfastness")
adverbs['steadily']="steadily"
nouns['steadiness']=nounInfo("steadiness")
adjectives['steady']=adjInfo("steady")
adverbs['steady']="steady"
nouns['steady']=nounInfo("steady")
nouns['steak']=nounInfo("steak")
nouns['stealth']=nounInfo("stealth")
adverbs['stealthily']="stealthily"
adjectives['stealthy']=adjInfo("stealthy")
nouns['steam']=nounInfo("steam")
nouns['steamboat']=nounInfo("steamboat")
nouns['steamer']=nounInfo("steamer")
nouns['steamship']=nounInfo("steamship")
adjectives['steamy']=adjInfo("steamy")
adverbs['stedfastly']="stedfastly"
nouns['steed']=nounInfo("steed")
nouns['steel']=nounInfo("steel")
adjectives['steely']=adjInfo("steely")
adverbs['steely']="steely"
nouns['steelyard']=nounInfo("steelyard")
nouns['steenbok']=nounInfo("steenbok")
adjectives['steep']=adjInfo("steep")
adjectives['steepish']=adjInfo("steepish")
nouns['steeple']=nounInfo("steeple")
nouns['steeplechase']=nounInfo("steeplechase")
nouns['steeplejack']=nounInfo("steeplejack")
adverbs['steeply']="steeply"
nouns['steepness']=nounInfo("steepness")
nouns['steer']=nounInfo("steer")
nouns['steerage']=nounInfo("steerage")
nouns['steersman']=nounInfo("steersman")
nouns['stele']=nounInfo("stele")
adjectives['stellar']=adjInfo("stellar")
nouns['stem']=nounInfo("stem")
adjectives['stemmed']=adjInfo("stemmed")
nouns['stench']=nounInfo("stench")
nouns['stencil']=nounInfo("stencil")
nouns['stenographer']=nounInfo("stenographer")
nouns['stenography']=nounInfo("stenography")
adjectives['stentorian']=adjInfo("stentorian")
nouns['step']=nounInfo("step")
nouns['stepbrother']=nounInfo("stepbrother")
nouns['stepchild']=nounInfo("stepchild")
nouns['stepdaughter']=nounInfo("stepdaughter")
nouns['stepfather']=nounInfo("stepfather")
nouns['stepmother']=nounInfo("stepmother")
nouns['stepparent']=nounInfo("stepparent")
nouns['steppe']=nounInfo("steppe")
nouns['stepsister']=nounInfo("stepsister")
nouns['stepson']=nounInfo("stepson")
nouns['stereo']=nounInfo("stereo")
adjectives['stereophonic']=adjInfo("stereophonic")
nouns['stereoscope']=nounInfo("stereoscope")
adjectives['stereoscopic']=adjInfo("stereoscopic")
nouns['stereotype']=nounInfo("stereotype")
adjectives['sterile']=adjInfo("sterile")
nouns['sterility']=nounInfo("sterility")
nouns['sterilization']=nounInfo("sterilization")
adjectives['sterling']=adjInfo("sterling")
nouns['sterling']=nounInfo("sterling")
adjectives['stern']=adjInfo("stern")
nouns['stern']=nounInfo("stern")
adverbs['sternly']="sternly"
nouns['sternness']=nounInfo("sternness")
nouns['sternum']=nounInfo("sternum")
nouns['sternwheeler']=nounInfo("sternwheeler")
adjectives['stertorous']=adjInfo("stertorous")
adverbs['stertorously']="stertorously"
nouns['stethoscope']=nounInfo("stethoscope")
nouns['stetson']=nounInfo("stetson")
nouns['stevedore']=nounInfo("stevedore")
nouns['stew']=nounInfo("stew")
nouns['steward']=nounInfo("steward").addAttributes({"g":"m"})
nouns['stewardess']=nounInfo("stewardess").addAttributes({"g":"f"})
nouns['stewardship']=nounInfo("stewardship")
adjectives['stewed']=adjInfo("stewed")
nouns['stick']=nounInfo("stick")
nouns['sticker']=nounInfo("sticker")
adverbs['stickily']="stickily"
nouns['stickiness']=nounInfo("stickiness")
nouns['stickler']=nounInfo("stickler")
adjectives['sticky']=adjInfo("sticky")
adjectives['stiff']=adjInfo("stiff")
adverbs['stiff']="stiff"
nouns['stiff']=nounInfo("stiff")
nouns['stiffener']=nounInfo("stiffener")
nouns['stiffening']=nounInfo("stiffening")
adverbs['stiffly']="stiffly"
nouns['stiffness']=nounInfo("stiffness")
nouns['stigma']=nounInfo("stigma")
nouns['stile']=nounInfo("stile")
nouns['stiletto']=nounInfo("stiletto")
adjectives['still']=adjInfo("still")
adverbs['still']="still"
nouns['still']=nounInfo("still")
nouns['stillness']=nounInfo("stillness")
adjectives['stilly']=adjInfo("stilly")
nouns['stilt']=nounInfo("stilt")
adjectives['stilted']=adjInfo("stilted")
adverbs['stiltedly']="stiltedly"
nouns['stimulant']=nounInfo("stimulant")
adjectives['stimulating']=adjInfo("stimulating")
nouns['stimulus']=nounInfo("stimulus")
nouns['sting']=nounInfo("sting")
nouns['stinger']=nounInfo("stinger")
adverbs['stingily']="stingily"
nouns['stinginess']=nounInfo("stinginess")
adjectives['stingless']=adjInfo("stingless")
adjectives['stingy']=adjInfo("stingy")
nouns['stink']=nounInfo("stink")
nouns['stinker']=nounInfo("stinker")
nouns['stint']=nounInfo("stint")
nouns['stipend']=nounInfo("stipend")
adjectives['stipendiary']=adjInfo("stipendiary")
nouns['stipendiary']=nounInfo("stipendiary")
nouns['stipulation']=nounInfo("stipulation")
nouns['stir']=nounInfo("stir")
adjectives['stirring']=adjInfo("stirring")
adverbs['stirringly']="stirringly"
nouns['stirrup']=nounInfo("stirrup")
nouns['stitch']=nounInfo("stitch")
nouns['stoat']=nounInfo("stoat")
nouns['stock']=nounInfo("stock")
nouns['stockade']=nounInfo("stockade")
nouns['stockbroker']=nounInfo("stockbroker")
nouns['stockcar']=nounInfo("stockcar")
nouns['stockfish']=nounInfo("stockfish")
nouns['stockholder']=nounInfo("stockholder")
adverbs['stockily']="stockily"
nouns['stockinette']=nounInfo("stockinette")
nouns['stocking']=nounInfo("stocking")
nouns['stockist']=nounInfo("stockist")
nouns['stockpot']=nounInfo("stockpot")
adjectives['stocky']=adjInfo("stocky")
nouns['stockyard']=nounInfo("stockyard")
nouns['stodge']=nounInfo("stodge")
adjectives['stodgy']=adjInfo("stodgy")
nouns['stoep']=nounInfo("stoep")
nouns['stoic']=nounInfo("stoic")
adjectives['stoical']=adjInfo("stoical")
adverbs['stoically']="stoically"
nouns['stoicism']=nounInfo("stoicism")
nouns['stoker']=nounInfo("stoker")
nouns['stole']=nounInfo("stole")
adjectives['stolen']=adjInfo("stolen")
adjectives['stolid']=adjInfo("stolid")
nouns['stolidity']=nounInfo("stolidity")
adverbs['stolidly']="stolidly"
nouns['stolidness']=nounInfo("stolidness")
nouns['stomach']=nounInfo("stomach")
nouns['stomp']=nounInfo("stomp")
nouns['stone']=nounInfo("stone")
adjectives['stoned']=adjInfo("stoned")
adjectives['stoneless']=adjInfo("stoneless")
nouns['stonemason']=nounInfo("stonemason")
nouns['stoneware']=nounInfo("stoneware")
nouns['stonework']=nounInfo("stonework")
adverbs['stonily']="stonily"
adjectives['stony']=adjInfo("stony")
nouns['stooge']=nounInfo("stooge")
nouns['stool']=nounInfo("stool")
nouns['stoop']=nounInfo("stoop")
nouns['stop']=nounInfo("stop")
nouns['stopcock']=nounInfo("stopcock")
nouns['stopgap']=nounInfo("stopgap")
nouns['stoppage']=nounInfo("stoppage")
nouns['stopper']=nounInfo("stopper")
nouns['stopping']=nounInfo("stopping")
nouns['storage']=nounInfo("storage")
nouns['store']=nounInfo("store")
nouns['storeroom']=nounInfo("storeroom")
nouns['storey']=nounInfo("storey")
adjectives['storeyed']=adjInfo("storeyed")
adjectives['storied']=adjInfo("storied")
nouns['stork']=nounInfo("stork")
nouns['storm']=nounInfo("storm")
adverbs['stormily']="stormily"
adjectives['stormy']=adjInfo("stormy")
nouns['story']=nounInfo("story")
nouns['stoup']=nounInfo("stoup")
adjectives['stout']=adjInfo("stout")
nouns['stout']=nounInfo("stout")
adverbs['stoutly']="stoutly"
nouns['stoutness']=nounInfo("stoutness")
nouns['stove']=nounInfo("stove")
nouns['stowaway']=nounInfo("stowaway")
nouns['straggler']=nounInfo("straggler")
adjectives['straggly']=adjInfo("straggly")
adjectives['straight']=adjInfo("straight")
adverbs['straight']="straight"
nouns['straight']=nounInfo("straight")
adjectives['straightforward']=adjInfo("straightforward")
adverbs['straightforwardly']="straightforwardly"
nouns['straightness']=nounInfo("straightness")
adverbs['straightway']="straightway"
nouns['strain']=nounInfo("strain")
adjectives['strained']=adjInfo("strained")
nouns['strainer']=nounInfo("strainer")
adjectives['strait']=adjInfo("strait")
nouns['strait']=nounInfo("strait")
nouns['strand']=nounInfo("strand")
adjectives['strange']=adjInfo("strange")
adverbs['strangely']="strangely"
nouns['strangeness']=nounInfo("strangeness")
nouns['stranger']=nounInfo("stranger").addAttributes({"g":"x"})
nouns['stranglehold']=nounInfo("stranglehold")
nouns['strangulation']=nounInfo("strangulation")
nouns['strap']=nounInfo("strap")
adjectives['strapping']=adjInfo("strapping")
nouns['strapping']=nounInfo("strapping")
nouns['stratagem']=nounInfo("stratagem")
adjectives['strategic']=adjInfo("strategic")
adjectives['strategical']=adjInfo("strategical")
adverbs['strategically']="strategically"
nouns['strategics']=nounInfo("strategics")
nouns['strategist']=nounInfo("strategist")
nouns['strategy']=nounInfo("strategy")
nouns['stratification']=nounInfo("stratification")
nouns['stratosphere']=nounInfo("stratosphere")
nouns['stratum']=nounInfo("stratum")
nouns['straw']=nounInfo("straw")
nouns['strawberry']=nounInfo("strawberry")
nouns['strawboard']=nounInfo("strawboard")
nouns['stray']=nounInfo("stray")
nouns['streak']=nounInfo("streak")
adjectives['streaky']=adjInfo("streaky")
nouns['stream']=nounInfo("stream")
nouns['streamer']=nounInfo("streamer")
nouns['streamlet']=nounInfo("streamlet")
adjectives['streamlined']=adjInfo("streamlined")
nouns['street']=nounInfo("street")
nouns['streetcar']=nounInfo("streetcar")
nouns['strength']=nounInfo("strength")
adjectives['strenuous']=adjInfo("strenuous")
adverbs['strenuously']="strenuously"
nouns['strenuousness']=nounInfo("strenuousness")
nouns['streptococcus']=nounInfo("streptococcus")
nouns['streptomycin']=nounInfo("streptomycin")
nouns['stress']=nounInfo("stress")
nouns['stretch']=nounInfo("stretch")
nouns['stretcher']=nounInfo("stretcher")
nouns['strewth']=nounInfo("strewth")
adjectives['striated']=adjInfo("striated")
adjectives['stricken']=adjInfo("stricken")
adjectives['strict']=adjInfo("strict")
adverbs['strictly']="strictly"
nouns['strictness']=nounInfo("strictness")
nouns['stricture']=nounInfo("stricture")
nouns['stride']=nounInfo("stride")
adjectives['strident']=adjInfo("strident")
adverbs['stridently']="stridently"
nouns['stridulation']=nounInfo("stridulation")
nouns['strife']=nounInfo("strife")
nouns['strike']=nounInfo("strike")
nouns['striker']=nounInfo("striker")
adjectives['striking']=adjInfo("striking")
adverbs['strikingly']="strikingly"
nouns['string']=nounInfo("string")
nouns['stringency']=nounInfo("stringency")
adjectives['stringent']=adjInfo("stringent")
adverbs['stringently']="stringently"
adjectives['stringy']=adjInfo("stringy")
nouns['strip']=nounInfo("strip")
nouns['stripe']=nounInfo("stripe")
adjectives['striped']=adjInfo("striped")
nouns['stripling']=nounInfo("stripling")
nouns['stripper']=nounInfo("stripper")
adjectives['stripy']=adjInfo("stripy")
nouns['striver']=nounInfo("striver")
nouns['stroke']=nounInfo("stroke")
nouns['stroll']=nounInfo("stroll")
nouns['stroller']=nounInfo("stroller")
adjectives['strong']=adjInfo("strong")
nouns['stronghold']=nounInfo("stronghold")
adverbs['strongly']="strongly"
nouns['strontium']=nounInfo("strontium")
nouns['strop']=nounInfo("strop")
nouns['strophe']=nounInfo("strophe")
adjectives['stroppy']=adjInfo("stroppy")
adjectives['struck']=adjInfo("struck")
adjectives['structural']=adjInfo("structural")
adverbs['structurally']="structurally"
nouns['structure']=nounInfo("structure")
adjectives['structured']=adjInfo("structured")
nouns['strudel']=nounInfo("strudel")
nouns['struggle']=nounInfo("struggle")
nouns['strum']=nounInfo("strum")
nouns['strumpet']=nounInfo("strumpet")
nouns['strut']=nounInfo("strut")
nouns['struth']=nounInfo("struth")
nouns['strychnine']=nounInfo("strychnine")
nouns['stub']=nounInfo("stub")
nouns['stubble']=nounInfo("stubble")
adjectives['stubbly']=adjInfo("stubbly")
adjectives['stubborn']=adjInfo("stubborn")
adverbs['stubbornly']="stubbornly"
nouns['stubbornness']=nounInfo("stubbornness")
adjectives['stubby']=adjInfo("stubby")
nouns['stucco']=nounInfo("stucco")
nouns['stud']=nounInfo("stud")
nouns['student']=nounInfo("student").addAttributes({"g":"x"})
adjectives['studied']=adjInfo("studied")
nouns['studio']=nounInfo("studio")
adjectives['studious']=adjInfo("studious")
adverbs['studiously']="studiously"
nouns['studiousness']=nounInfo("studiousness")
nouns['study']=nounInfo("study")
nouns['stuff']=nounInfo("stuff")
adverbs['stuffily']="stuffily"
nouns['stuffiness']=nounInfo("stuffiness")
nouns['stuffing']=nounInfo("stuffing")
adjectives['stuffy']=adjInfo("stuffy")
nouns['stultification']=nounInfo("stultification")
nouns['stumble']=nounInfo("stumble")
nouns['stump']=nounInfo("stump")
nouns['stumper']=nounInfo("stumper")
adjectives['stumpy']=adjInfo("stumpy")
nouns['stunner']=nounInfo("stunner")
adjectives['stunning']=adjInfo("stunning")
adverbs['stunningly']="stunningly"
nouns['stunt']=nounInfo("stunt")
nouns['stupefaction']=nounInfo("stupefaction")
adjectives['stupendous']=adjInfo("stupendous")
adverbs['stupendously']="stupendously"
adjectives['stupid']=adjInfo("stupid")
nouns['stupid']=nounInfo("stupid")
nouns['stupidity']=nounInfo("stupidity")
adverbs['stupidly']="stupidly"
nouns['stupor']=nounInfo("stupor")
adverbs['sturdily']="sturdily"
nouns['sturdiness']=nounInfo("sturdiness")
adjectives['sturdy']=adjInfo("sturdy")
nouns['sturgeon']=nounInfo("sturgeon")
nouns['stutter']=nounInfo("stutter")
nouns['stutterer']=nounInfo("stutterer")
adverbs['stutteringly']="stutteringly"
nouns['sty']=nounInfo("sty")
nouns['stye']=nounInfo("stye")
nouns['style']=nounInfo("style")
adjectives['stylish']=adjInfo("stylish")
adverbs['stylishly']="stylishly"
nouns['stylishness']=nounInfo("stylishness")
nouns['stylist']=nounInfo("stylist")
adjectives['stylistic']=adjInfo("stylistic")
adverbs['stylistically']="stylistically"
nouns['stylus']=nounInfo("stylus")
nouns['stymie']=nounInfo("stymie")
adjectives['styptic']=adjInfo("styptic")
nouns['styptic']=nounInfo("styptic")
nouns['suasion']=nounInfo("suasion")
adjectives['suave']=adjInfo("suave")
adverbs['suavely']="suavely"
nouns['suavity']=nounInfo("suavity")
nouns['sub']=nounInfo("sub")
nouns['subaltern']=nounInfo("subaltern")
adjectives['subatomic']=adjInfo("subatomic")
nouns['subcommittee']=nounInfo("subcommittee")
adjectives['subconscious']=adjInfo("subconscious")
nouns['subconscious']=nounInfo("subconscious")
adverbs['subconsciously']="subconsciously"
nouns['subconsciousness']=nounInfo("subconsciousness")
nouns['subcontinent']=nounInfo("subcontinent")
nouns['subcontract']=nounInfo("subcontract")
nouns['subcontractor']=nounInfo("subcontractor")
adjectives['subcutaneous']=adjInfo("subcutaneous")
nouns['subdivision']=nounInfo("subdivision")
nouns['subeditor']=nounInfo("subeditor")
adjectives['subfusc']=adjInfo("subfusc")
nouns['subheading']=nounInfo("subheading")
adjectives['subhuman']=adjInfo("subhuman")
adjectives['subject']=adjInfo("subject")
nouns['subject']=nounInfo("subject")
nouns['subjection']=nounInfo("subjection")
adjectives['subjective']=adjInfo("subjective")
adverbs['subjectively']="subjectively"
nouns['subjectivity']=nounInfo("subjectivity")
nouns['subjugation']=nounInfo("subjugation")
adjectives['subjunctive']=adjInfo("subjunctive")
nouns['subjunctive']=nounInfo("subjunctive")
nouns['sublease']=nounInfo("sublease")
adjectives['sublimate']=adjInfo("sublimate")
nouns['sublimate']=nounInfo("sublimate")
nouns['sublimation']=nounInfo("sublimation")
adjectives['sublime']=adjInfo("sublime")
nouns['sublime']=nounInfo("sublime")
adverbs['sublimely']="sublimely"
adjectives['subliminal']=adjInfo("subliminal")
nouns['sublimity']=nounInfo("sublimity")
adjectives['submarine']=adjInfo("submarine")
nouns['submarine']=nounInfo("submarine")
nouns['submariner']=nounInfo("submariner")
adjectives['submerged']=adjInfo("submerged")
nouns['submergence']=nounInfo("submergence")
adjectives['submersible']=adjInfo("submersible")
nouns['submersion']=nounInfo("submersion")
nouns['submission']=nounInfo("submission")
adjectives['submissive']=adjInfo("submissive")
adverbs['submissively']="submissively"
nouns['submissiveness']=nounInfo("submissiveness")
adjectives['subnormal']=adjInfo("subnormal")
nouns['subnormal']=nounInfo("subnormal")
adjectives['suborbital']=adjInfo("suborbital")
adjectives['subordinate']=adjInfo("subordinate")
nouns['subordinate']=nounInfo("subordinate")
nouns['subordination']=nounInfo("subordination")
adjectives['subordinative']=adjInfo("subordinative")
nouns['subornation']=nounInfo("subornation")
nouns['subpoena']=nounInfo("subpoena")
nouns['subscriber']=nounInfo("subscriber")
nouns['subscription']=nounInfo("subscription")
adjectives['subsequent']=adjInfo("subsequent")
adverbs['subsequently']="subsequently"
nouns['subservience']=nounInfo("subservience")
adjectives['subservient']=adjInfo("subservient")
adverbs['subserviently']="subserviently"
nouns['subsidence']=nounInfo("subsidence")
adjectives['subsidiary']=adjInfo("subsidiary")
nouns['subsidiary']=nounInfo("subsidiary")
nouns['subsidization']=nounInfo("subsidization")
nouns['subsidy']=nounInfo("subsidy")
nouns['subsistence']=nounInfo("subsistence")
nouns['subsoil']=nounInfo("subsoil")
adjectives['subsonic']=adjInfo("subsonic")
nouns['substance']=nounInfo("substance")
adjectives['substandard']=adjInfo("substandard")
adjectives['substantial']=adjInfo("substantial")
adverbs['substantially']="substantially"
nouns['substantiation']=nounInfo("substantiation")
adjectives['substantival']=adjInfo("substantival")
adjectives['substantive']=adjInfo("substantive")
nouns['substantive']=nounInfo("substantive")
nouns['substation']=nounInfo("substation")
nouns['substitute']=nounInfo("substitute")
nouns['substitution']=nounInfo("substitution")
nouns['substratum']=nounInfo("substratum")
nouns['substructure']=nounInfo("substructure")
nouns['subterfuge']=nounInfo("subterfuge")
adjectives['subterranean']=adjInfo("subterranean")
nouns['subtitle']=nounInfo("subtitle")
adjectives['subtle']=adjInfo("subtle")
nouns['subtlety']=nounInfo("subtlety")
adverbs['subtly']="subtly"
nouns['subtopia']=nounInfo("subtopia")
nouns['subtraction']=nounInfo("subtraction")
adjectives['subtropical']=adjInfo("subtropical")
nouns['suburb']=nounInfo("suburb")
adjectives['suburban']=adjInfo("suburban")
nouns['suburbia']=nounInfo("suburbia")
nouns['subvention']=nounInfo("subvention")
nouns['subversion']=nounInfo("subversion")
adjectives['subversive']=adjInfo("subversive")
nouns['subversive']=nounInfo("subversive")
nouns['subway']=nounInfo("subway")
nouns['success']=nounInfo("success")
adjectives['successful']=adjInfo("successful")
adverbs['successfully']="successfully"
nouns['succession']=nounInfo("succession")
adjectives['successive']=adjInfo("successive")
adverbs['successively']="successively"
nouns['successor']=nounInfo("successor")
adjectives['succinct']=adjInfo("succinct")
adverbs['succinctly']="succinctly"
nouns['succinctness']=nounInfo("succinctness")
nouns['succour']=nounInfo("succour")
nouns['succubus']=nounInfo("succubus")
nouns['succulence']=nounInfo("succulence")
adjectives['succulent']=adjInfo("succulent")
nouns['succulent']=nounInfo("succulent")
adjectives['suchlike']=adjInfo("suchlike")
nouns['suck']=nounInfo("suck")
nouns['sucker']=nounInfo("sucker")
nouns['suckling']=nounInfo("suckling")
nouns['suction']=nounInfo("suction")
adjectives['sudden']=adjInfo("sudden")
nouns['sudden']=nounInfo("sudden")
adverbs['suddenly']="suddenly"
nouns['suddenness']=nounInfo("suddenness")
nouns['suds']=nounInfo("suds")
nouns['suede']=nounInfo("suede")
nouns['suet']=nounInfo("suet")
adjectives['suety']=adjInfo("suety")
adjectives['sufferable']=adjInfo("sufferable")
nouns['sufferance']=nounInfo("sufferance")
nouns['sufferer']=nounInfo("sufferer")
nouns['suffering']=nounInfo("suffering")
nouns['sufficiency']=nounInfo("sufficiency")
adjectives['sufficient']=adjInfo("sufficient")
adverbs['sufficiently']="sufficiently"
nouns['suffix']=nounInfo("suffix")
nouns['suffocation']=nounInfo("suffocation")
nouns['suffragan']=nounInfo("suffragan")
nouns['suffrage']=nounInfo("suffrage")
nouns['suffragette']=nounInfo("suffragette")
nouns['suffusion']=nounInfo("suffusion")
nouns['sugar']=nounInfo("sugar")
adjectives['sugary']=adjInfo("sugary")
adjectives['suggestible']=adjInfo("suggestible")
nouns['suggestion']=nounInfo("suggestion")
adjectives['suggestive']=adjInfo("suggestive")
adverbs['suggestively']="suggestively"
adjectives['suicidal']=adjInfo("suicidal")
nouns['suicide']=nounInfo("suicide")
nouns['suit']=nounInfo("suit")
nouns['suitability']=nounInfo("suitability")
adjectives['suitable']=adjInfo("suitable")
nouns['suitableness']=nounInfo("suitableness")
adverbs['suitably']="suitably"
nouns['suitcase']=nounInfo("suitcase")
nouns['suite']=nounInfo("suite")
nouns['suiting']=nounInfo("suiting")
nouns['suitor']=nounInfo("suitor")
nouns['sulk']=nounInfo("sulk")
adverbs['sulkily']="sulkily"
nouns['sulkiness']=nounInfo("sulkiness")
adjectives['sulky']=adjInfo("sulky")
nouns['sulky']=nounInfo("sulky")
adjectives['sullen']=adjInfo("sullen")
adverbs['sullenly']="sullenly"
nouns['sullenness']=nounInfo("sullenness")
nouns['sulpha']=nounInfo("sulpha")
nouns['sulphate']=nounInfo("sulphate")
nouns['sulphide']=nounInfo("sulphide")
nouns['sulphur']=nounInfo("sulphur")
adjectives['sulphuretted']=adjInfo("sulphuretted")
adjectives['sulphuric']=adjInfo("sulphuric")
adjectives['sulphurous']=adjInfo("sulphurous")
nouns['sultan']=nounInfo("sultan").addAttributes({"g":"m"})
nouns['sultana']=nounInfo("sultana").addAttributes({"g":"f"})
nouns['sultanate']=nounInfo("sultanate")
adverbs['sultrily']="sultrily"
nouns['sultriness']=nounInfo("sultriness")
adjectives['sultry']=adjInfo("sultry")
nouns['sum']=nounInfo("sum")
nouns['sumac']=nounInfo("sumac")
nouns['sumach']=nounInfo("sumach")
adverbs['summarily']="summarily"
adjectives['summary']=adjInfo("summary")
nouns['summary']=nounInfo("summary")
nouns['summation']=nounInfo("summation")
nouns['summer']=nounInfo("summer")
nouns['summertime']=nounInfo("summertime")
adjectives['summery']=adjInfo("summery")
nouns['summit']=nounInfo("summit")
nouns['summons']=nounInfo("summons")
nouns['sump']=nounInfo("sump")
nouns['sumpter']=nounInfo("sumpter")
adjectives['sumptuary']=adjInfo("sumptuary")
adjectives['sumptuous']=adjInfo("sumptuous")
adverbs['sumptuously']="sumptuously"
nouns['sumptuousness']=nounInfo("sumptuousness")
nouns['sun']=nounInfo("sun")
adjectives['sunbaked']=adjInfo("sunbaked")
nouns['sunbeam']=nounInfo("sunbeam")
nouns['sunblind']=nounInfo("sunblind")
nouns['sunburn']=nounInfo("sunburn")
adjectives['sunburned']=adjInfo("sunburned")
adjectives['sunburnt']=adjInfo("sunburnt")
nouns['sunburst']=nounInfo("sunburst")
nouns['sundae']=nounInfo("sundae")
nouns['sunder']=nounInfo("sunder")
nouns['sundial']=nounInfo("sundial")
nouns['sundown']=nounInfo("sundown")
nouns['sundowner']=nounInfo("sundowner")
nouns['sundries']=nounInfo("sundries")
adjectives['sundry']=adjInfo("sundry")
nouns['sunfish']=nounInfo("sunfish")
nouns['sunflower']=nounInfo("sunflower")
adjectives['sunless']=adjInfo("sunless")
nouns['sunlight']=nounInfo("sunlight")
adjectives['sunlit']=adjInfo("sunlit")
adverbs['sunnily']="sunnily"
adjectives['sunny']=adjInfo("sunny")
nouns['sunrise']=nounInfo("sunrise")
nouns['sunset']=nounInfo("sunset")
nouns['sunshade']=nounInfo("sunshade")
nouns['sunshine']=nounInfo("sunshine")
nouns['sunspot']=nounInfo("sunspot")
nouns['sunstroke']=nounInfo("sunstroke")
nouns['suntan']=nounInfo("suntan")
nouns['sup']=nounInfo("sup")
adjectives['super']=adjInfo("super")
nouns['super']=nounInfo("super")
nouns['superabundance']=nounInfo("superabundance")
adjectives['superabundant']=adjInfo("superabundant")
adjectives['superannuated']=adjInfo("superannuated")
nouns['superannuation']=nounInfo("superannuation")
adjectives['superb']=adjInfo("superb")
adverbs['superbly']="superbly"
nouns['supercargo']=nounInfo("supercargo")
adjectives['supercharged']=adjInfo("supercharged")
nouns['supercharger']=nounInfo("supercharger")
adjectives['supercilious']=adjInfo("supercilious")
adverbs['superciliously']="superciliously"
nouns['superciliousness']=nounInfo("superciliousness")
nouns['superego']=nounInfo("superego")
nouns['supererogation']=nounInfo("supererogation")
adjectives['superfatted']=adjInfo("superfatted")
adjectives['superficial']=adjInfo("superficial")
nouns['superficiality']=nounInfo("superficiality")
adverbs['superficially']="superficially"
nouns['superficies']=nounInfo("superficies")
adjectives['superfine']=adjInfo("superfine")
nouns['superfluity']=nounInfo("superfluity")
adjectives['superfluous']=adjInfo("superfluous")
adverbs['superfluously']="superfluously"
adjectives['superhuman']=adjInfo("superhuman")
nouns['superintendence']=nounInfo("superintendence")
nouns['superintendent']=nounInfo("superintendent")
adjectives['superior']=adjInfo("superior")
nouns['superior']=nounInfo("superior")
nouns['superiority']=nounInfo("superiority")
adjectives['superlative']=adjInfo("superlative")
nouns['superlative']=nounInfo("superlative")
nouns['superman']=nounInfo("superman")
nouns['supermarket']=nounInfo("supermarket")
adjectives['supernal']=adjInfo("supernal")
adjectives['supernatural']=adjInfo("supernatural")
adverbs['supernaturally']="supernaturally"
adjectives['supernormal']=adjInfo("supernormal")
nouns['supernumerary']=nounInfo("supernumerary")
nouns['superpower']=nounInfo("superpower")
nouns['superscription']=nounInfo("superscription")
nouns['supersession']=nounInfo("supersession")
adjectives['supersonic']=adjInfo("supersonic")
nouns['superstition']=nounInfo("superstition")
adjectives['superstitious']=adjInfo("superstitious")
adverbs['superstitiously']="superstitiously"
nouns['superstructure']=nounInfo("superstructure")
nouns['supertax']=nounInfo("supertax")
nouns['supervision']=nounInfo("supervision")
nouns['supervisor']=nounInfo("supervisor")
adjectives['supervisory']=adjInfo("supervisory")
adjectives['supine']=adjInfo("supine")
adverbs['supinely']="supinely"
nouns['supper']=nounInfo("supper")
adjectives['supperless']=adjInfo("supperless")
nouns['supplanter']=nounInfo("supplanter")
adjectives['supple']=adjInfo("supple")
nouns['supplement']=nounInfo("supplement")
adjectives['supplementary']=adjInfo("supplementary")
nouns['suppleness']=nounInfo("suppleness")
adjectives['suppliant']=adjInfo("suppliant")
nouns['suppliant']=nounInfo("suppliant")
nouns['supplicant']=nounInfo("supplicant")
nouns['supplication']=nounInfo("supplication")
nouns['supplier']=nounInfo("supplier")
nouns['supply']=nounInfo("supply")
nouns['support']=nounInfo("support")
adjectives['supportable']=adjInfo("supportable")
nouns['supporter']=nounInfo("supporter")
adjectives['supportive']=adjInfo("supportive")
adjectives['supposed']=adjInfo("supposed")
adverbs['supposedly']="supposedly"
nouns['supposition']=nounInfo("supposition")
nouns['suppository']=nounInfo("suppository")
nouns['suppression']=nounInfo("suppression")
adjectives['suppressive']=adjInfo("suppressive")
nouns['suppressor']=nounInfo("suppressor")
nouns['suppuration']=nounInfo("suppuration")
adverbs['supra']="supra"
adjectives['supranational']=adjInfo("supranational")
nouns['supremacy']=nounInfo("supremacy")
adjectives['supreme']=adjInfo("supreme")
adverbs['supremely']="supremely"
adverbs['suprisingly']="suprisingly"
nouns['surcharge']=nounInfo("surcharge")
nouns['surd']=nounInfo("surd")
adjectives['sure']=adjInfo("sure")
adverbs['sure']="sure"
adverbs['surely']="surely"
nouns['sureness']=nounInfo("sureness")
nouns['surety']=nounInfo("surety")
nouns['surf']=nounInfo("surf")
nouns['surface']=nounInfo("surface")
nouns['surfeit']=nounInfo("surfeit")
nouns['surfing']=nounInfo("surfing")
nouns['surge']=nounInfo("surge")
nouns['surgeon']=nounInfo("surgeon").addAttributes({"g":"x"})
nouns['surgery']=nounInfo("surgery")
adjectives['surgical']=adjInfo("surgical")
adverbs['surgically']="surgically"
adverbs['surlily']="surlily"
nouns['surliness']=nounInfo("surliness")
adjectives['surly']=adjInfo("surly")
nouns['surmise']=nounInfo("surmise")
adjectives['surmountable']=adjInfo("surmountable")
nouns['surname']=nounInfo("surname")
adjectives['surpassing']=adjInfo("surpassing")
adverbs['surpassingly']="surpassingly"
nouns['surplice']=nounInfo("surplice")
adjectives['surpliced']=adjInfo("surpliced")
nouns['surplus']=nounInfo("surplus")
nouns['surprise']=nounInfo("surprise")
adjectives['surprised']=adjInfo("surprised")
adverbs['surprisedly']="surprisedly"
adjectives['surprising']=adjInfo("surprising")
adverbs['surprisingly']="surprisingly"
nouns['surrealism']=nounInfo("surrealism")
nouns['surrealist']=nounInfo("surrealist")
adjectives['surrealistic']=adjInfo("surrealistic")
nouns['surrender']=nounInfo("surrender")
adjectives['surreptitious']=adjInfo("surreptitious")
adverbs['surreptitiously']="surreptitiously"
adjectives['surrogate']=adjInfo("surrogate")
nouns['surrogate']=nounInfo("surrogate")
nouns['surround']=nounInfo("surround")
adjectives['surrounding']=adjInfo("surrounding")
nouns['surroundings']=nounInfo("surroundings")
nouns['surtax']=nounInfo("surtax")
nouns['surveillance']=nounInfo("surveillance")
nouns['survey']=nounInfo("survey")
nouns['surveying']=nounInfo("surveying")
nouns['surveyor']=nounInfo("surveyor")
nouns['survival']=nounInfo("survival")
nouns['survivor']=nounInfo("survivor")
nouns['susceptibility']=nounInfo("susceptibility")
adjectives['susceptible']=adjInfo("susceptible")
adjectives['suspect']=adjInfo("suspect")
nouns['suspect']=nounInfo("suspect")
nouns['suspender']=nounInfo("suspender")
nouns['suspense']=nounInfo("suspense")
nouns['suspension']=nounInfo("suspension")
nouns['suspicion']=nounInfo("suspicion")
adjectives['suspicious']=adjInfo("suspicious")
adverbs['suspiciously']="suspiciously"
adjectives['sustainable']=adjInfo("sustainable")
nouns['sustenance']=nounInfo("sustenance")
nouns['suttee']=nounInfo("suttee")
nouns['suture']=nounInfo("suture")
nouns['suzerain']=nounInfo("suzerain")
nouns['suzerainty']=nounInfo("suzerainty")
adjectives['svelte']=adjInfo("svelte")
nouns['swab']=nounInfo("swab")
nouns['swag']=nounInfo("swag")
adjectives['swagger']=adjInfo("swagger")
nouns['swagger']=nounInfo("swagger")
nouns['swaggerer']=nounInfo("swaggerer")
nouns['swain']=nounInfo("swain")
nouns['swallow']=nounInfo("swallow")
nouns['swami']=nounInfo("swami")
nouns['swamp']=nounInfo("swamp")
adjectives['swampy']=adjInfo("swampy")
nouns['swan']=nounInfo("swan")
nouns['swank']=nounInfo("swank")
adjectives['swanky']=adjInfo("swanky")
nouns['swap']=nounInfo("swap")
nouns['sward']=nounInfo("sward")
nouns['swarm']=nounInfo("swarm")
adjectives['swarthy']=adjInfo("swarthy")
nouns['swashbuckler']=nounInfo("swashbuckler")
adjectives['swashbuckling']=adjInfo("swashbuckling")
nouns['swashbuckling']=nounInfo("swashbuckling")
nouns['swastika']=nounInfo("swastika")
nouns['swat']=nounInfo("swat")
nouns['swath']=nounInfo("swath")
nouns['swathe']=nounInfo("swathe")
nouns['sway']=nounInfo("sway")
nouns['swearer']=nounInfo("swearer")
nouns['swearing']=nounInfo("swearing")
nouns['sweat']=nounInfo("sweat")
nouns['sweater']=nounInfo("sweater")
adjectives['sweaty']=adjInfo("sweaty")
nouns['swede']=nounInfo("swede")
nouns['sweep']=nounInfo("sweep")
nouns['sweeper']=nounInfo("sweeper").addAttributes({"g":"x"})
adjectives['sweeping']=adjInfo("sweeping")
nouns['sweeping']=nounInfo("sweeping")
adverbs['sweepingly']="sweepingly"
nouns['sweepings']=nounInfo("sweepings")
adjectives['sweet']=adjInfo("sweet")
nouns['sweet']=nounInfo("sweet")
nouns['sweetbread']=nounInfo("sweetbread")
nouns['sweetening']=nounInfo("sweetening")
nouns['sweetheart']=nounInfo("sweetheart")
adverbs['sweetish']="sweetish"
adverbs['sweetly']="sweetly"
nouns['sweetmeat']=nounInfo("sweetmeat")
nouns['sweetness']=nounInfo("sweetness")
adjectives['swell']=adjInfo("swell")
nouns['swell']=nounInfo("swell")
nouns['swelling']=nounInfo("swelling")
nouns['swerve']=nounInfo("swerve")
adjectives['swift']=adjInfo("swift")
nouns['swift']=nounInfo("swift")
adverbs['swiftly']="swiftly"
nouns['swiftness']=nounInfo("swiftness")
nouns['swig']=nounInfo("swig")
nouns['swill']=nounInfo("swill")
nouns['swim']=nounInfo("swim")
nouns['swimmer']=nounInfo("swimmer")
nouns['swimming']=nounInfo("swimming")
adverbs['swimmingly']="swimmingly"
nouns['swindle']=nounInfo("swindle")
nouns['swindler']=nounInfo("swindler")
nouns['swine']=nounInfo("swine")
nouns['swineherd']=nounInfo("swineherd")
nouns['swing']=nounInfo("swing")
adjectives['swingeing']=adjInfo("swingeing")
adjectives['swinging']=adjInfo("swinging")
adjectives['swinish']=adjInfo("swinish")
nouns['swipe']=nounInfo("swipe")
nouns['swirl']=nounInfo("swirl")
adjectives['swish']=adjInfo("swish")
nouns['swish']=nounInfo("swish")
nouns['switch']=nounInfo("switch")
nouns['switchman']=nounInfo("switchman")
nouns['swivel']=nounInfo("swivel")
nouns['swizzle']=nounInfo("swizzle")
nouns['swob']=nounInfo("swob")
nouns['swoon']=nounInfo("swoon")
nouns['swoop']=nounInfo("swoop")
nouns['swop']=nounInfo("swop")
nouns['sword']=nounInfo("sword")
nouns['swordfish']=nounInfo("swordfish")
nouns['swordsman']=nounInfo("swordsman")
nouns['swordsmanship']=nounInfo("swordsmanship")
adjectives['sworn']=adjInfo("sworn")
nouns['swot']=nounInfo("swot")
nouns['sybarite']=nounInfo("sybarite")
adjectives['sybaritic']=adjInfo("sybaritic")
nouns['sycamore']=nounInfo("sycamore")
nouns['sycophant']=nounInfo("sycophant")
adjectives['sycophantic']=adjInfo("sycophantic")
nouns['syllabary']=nounInfo("syllabary")
adjectives['syllabic']=adjInfo("syllabic")
nouns['syllabication']=nounInfo("syllabication")
nouns['syllabification']=nounInfo("syllabification")
nouns['syllable']=nounInfo("syllable")
adjectives['syllabled']=adjInfo("syllabled")
nouns['syllabus']=nounInfo("syllabus")
nouns['syllogism']=nounInfo("syllogism")
adjectives['syllogistic']=adjInfo("syllogistic")
nouns['sylph']=nounInfo("sylph")
adjectives['sylvan']=adjInfo("sylvan")
nouns['symbiosis']=nounInfo("symbiosis")
nouns['symbol']=nounInfo("symbol")
adjectives['symbolic']=adjInfo("symbolic")
adjectives['symbolical']=adjInfo("symbolical")
adverbs['symbolically']="symbolically"
nouns['symbolism']=nounInfo("symbolism")
nouns['symbolization']=nounInfo("symbolization")
adjectives['symmetric']=adjInfo("symmetric")
adjectives['symmetrical']=adjInfo("symmetrical")
adverbs['symmetrically']="symmetrically"
nouns['symmetry']=nounInfo("symmetry")
adjectives['sympathetic']=adjInfo("sympathetic")
adverbs['sympathetically']="sympathetically"
nouns['sympathizer']=nounInfo("sympathizer")
nouns['sympathy']=nounInfo("sympathy")
adjectives['symphonic']=adjInfo("symphonic")
nouns['symphony']=nounInfo("symphony")
nouns['symposium']=nounInfo("symposium")
nouns['symptom']=nounInfo("symptom")
adjectives['symptomatic']=adjInfo("symptomatic")
adverbs['symptomatically']="symptomatically"
nouns['synagogue']=nounInfo("synagogue")
nouns['synchromesh']=nounInfo("synchromesh")
nouns['synchronization']=nounInfo("synchronization")
adverbs['synchronously']="synchronously"
nouns['synchrotron']=nounInfo("synchrotron")
nouns['syncopation']=nounInfo("syncopation")
nouns['syncope']=nounInfo("syncope")
nouns['syndic']=nounInfo("syndic")
nouns['syndicalism']=nounInfo("syndicalism")
nouns['syndicalist']=nounInfo("syndicalist")
nouns['syndicate']=nounInfo("syndicate")
nouns['syndication']=nounInfo("syndication")
nouns['syndrome']=nounInfo("syndrome")
nouns['synod']=nounInfo("synod")
nouns['synonym']=nounInfo("synonym")
adjectives['synonymous']=adjInfo("synonymous")
nouns['synopsis']=nounInfo("synopsis")
adjectives['synoptic']=adjInfo("synoptic")
adverbs['synoptically']="synoptically"
adjectives['syntactic']=adjInfo("syntactic")
adverbs['syntactically']="syntactically"
nouns['syntax']=nounInfo("syntax")
nouns['synthesis']=nounInfo("synthesis")
adjectives['synthetic']=adjInfo("synthetic")
adverbs['synthetically']="synthetically"
nouns['syphilis']=nounInfo("syphilis")
adjectives['syphilitic']=adjInfo("syphilitic")
nouns['syphilitic']=nounInfo("syphilitic")
nouns['syphon']=nounInfo("syphon")
nouns['syringa']=nounInfo("syringa")
nouns['syringe']=nounInfo("syringe")
nouns['syrup']=nounInfo("syrup")
adjectives['syrupy']=adjInfo("syrupy")
nouns['system']=nounInfo("system")
adjectives['systematic']=adjInfo("systematic")
adverbs['systematically']="systematically"
nouns['systematization']=nounInfo("systematization")
nouns['ta']=nounInfo("ta")
nouns['tab']=nounInfo("tab")
nouns['tabard']=nounInfo("tabard")
adjectives['tabby']=adjInfo("tabby")
nouns['tabby']=nounInfo("tabby")
nouns['tabernacle']=nounInfo("tabernacle")
nouns['table']=nounInfo("table")
nouns['tableau']=nounInfo("tableau")
nouns['tablespoon']=nounInfo("tablespoon")
nouns['tablespoonful']=nounInfo("tablespoonful")
nouns['tablet']=nounInfo("tablet")
nouns['tabloid']=nounInfo("tabloid")
adjectives['taboo']=adjInfo("taboo")
nouns['taboo']=nounInfo("taboo")
nouns['tabor']=nounInfo("tabor")
adjectives['tabular']=adjInfo("tabular")
nouns['tabulation']=nounInfo("tabulation")
nouns['tabulator']=nounInfo("tabulator")
nouns['tachograph']=nounInfo("tachograph")
adjectives['tacit']=adjInfo("tacit")
adverbs['tacitly']="tacitly"
adjectives['taciturn']=adjInfo("taciturn")
nouns['taciturnity']=nounInfo("taciturnity")
adverbs['taciturnly']="taciturnly"
nouns['tack']=nounInfo("tack")
nouns['tackle']=nounInfo("tackle")
adjectives['tacky']=adjInfo("tacky")
nouns['tact']=nounInfo("tact")
adjectives['tactful']=adjInfo("tactful")
adverbs['tactfully']="tactfully"
nouns['tactic']=nounInfo("tactic")
adjectives['tactical']=adjInfo("tactical")
adverbs['tactically']="tactically"
nouns['tactician']=nounInfo("tactician")
adjectives['tactile']=adjInfo("tactile")
adjectives['tactless']=adjInfo("tactless")
adverbs['tactlessly']="tactlessly"
nouns['tactlessness']=nounInfo("tactlessness")
adjectives['tactual']=adjInfo("tactual")
nouns['tadpole']=nounInfo("tadpole")
nouns['taffeta']=nounInfo("taffeta")
nouns['taffrail']=nounInfo("taffrail")
nouns['taffy']=nounInfo("taffy")
nouns['tag']=nounInfo("tag")
nouns['tail']=nounInfo("tail")
adjectives['tailed']=adjInfo("tailed")
nouns['tailgate']=nounInfo("tailgate")
adjectives['tailless']=adjInfo("tailless")
nouns['tailor']=nounInfo("tailor").addAttributes({"g":"m"})
nouns['tailpiece']=nounInfo("tailpiece")
nouns['tails']=nounInfo("tails")
nouns['taint']=nounInfo("taint")
adjectives['taintless']=adjInfo("taintless")
nouns['take']=nounInfo("take")
nouns['takeover']=nounInfo("takeover")
nouns['taker']=nounInfo("taker")
adjectives['taking']=adjInfo("taking")
nouns['takings']=nounInfo("takings")
nouns['talc']=nounInfo("talc")
nouns['talcum']=nounInfo("talcum")
nouns['tale']=nounInfo("tale")
nouns['talent']=nounInfo("talent")
adjectives['talented']=adjInfo("talented")
nouns['talisman']=nounInfo("talisman")
nouns['talk']=nounInfo("talk")
adjectives['talkative']=adjInfo("talkative")
nouns['talker']=nounInfo("talker")
nouns['talkie']=nounInfo("talkie")
adjectives['tall']=adjInfo("tall")
nouns['tallboy']=nounInfo("tallboy")
adjectives['tallish']=adjInfo("tallish")
nouns['tallow']=nounInfo("tallow")
nouns['tally']=nounInfo("tally")
nouns['tallyman']=nounInfo("tallyman")
nouns['talon']=nounInfo("talon")
nouns['talus']=nounInfo("talus")
adjectives['tamable']=adjInfo("tamable")
nouns['tamale']=nounInfo("tamale")
nouns['tamarind']=nounInfo("tamarind")
nouns['tamarisk']=nounInfo("tamarisk")
nouns['tambour']=nounInfo("tambour")
nouns['tambourine']=nounInfo("tambourine")
adjectives['tame']=adjInfo("tame")
adverbs['tamely']="tamely"
nouns['tameness']=nounInfo("tameness")
nouns['tamer']=nounInfo("tamer")
nouns['tammy']=nounInfo("tammy")
adjectives['tan']=adjInfo("tan")
nouns['tan']=nounInfo("tan")
adverbs['tandem']="tandem"
nouns['tandem']=nounInfo("tandem")
nouns['tang']=nounInfo("tang")
nouns['tangent']=nounInfo("tangent")
adjectives['tangerine']=adjInfo("tangerine")
nouns['tangerine']=nounInfo("tangerine")
nouns['tangibility']=nounInfo("tangibility")
adjectives['tangible']=adjInfo("tangible")
adverbs['tangibly']="tangibly"
nouns['tangle']=nounInfo("tangle")
nouns['tango']=nounInfo("tango")
adjectives['tangy']=adjInfo("tangy")
nouns['tank']=nounInfo("tank")
nouns['tankard']=nounInfo("tankard")
nouns['tanker']=nounInfo("tanker")
nouns['tanner']=nounInfo("tanner")
nouns['tannery']=nounInfo("tannery")
adjectives['tannic']=adjInfo("tannic")
nouns['tannin']=nounInfo("tannin")
nouns['tannoy']=nounInfo("tannoy")
nouns['tansy']=nounInfo("tansy")
adjectives['tantamount']=adjInfo("tantamount")
nouns['tantrum']=nounInfo("tantrum")
nouns['tap']=nounInfo("tap")
nouns['tape']=nounInfo("tape")
nouns['taper']=nounInfo("taper")
adjectives['tapestried']=adjInfo("tapestried")
nouns['tapestry']=nounInfo("tapestry")
nouns['tapeworm']=nounInfo("tapeworm")
nouns['tapioca']=nounInfo("tapioca")
nouns['tapir']=nounInfo("tapir")
nouns['tapster']=nounInfo("tapster")
nouns['tar']=nounInfo("tar")
nouns['taradiddle']=nounInfo("taradiddle")
nouns['tarantella']=nounInfo("tarantella")
nouns['tarantelle']=nounInfo("tarantelle")
nouns['tarantula']=nounInfo("tarantula")
nouns['tarboosh']=nounInfo("tarboosh")
adverbs['tardily']="tardily"
nouns['tardiness']=nounInfo("tardiness")
adjectives['tardy']=adjInfo("tardy")
nouns['tare']=nounInfo("tare")
nouns['target']=nounInfo("target")
nouns['tariff']=nounInfo("tariff")
nouns['tarmac']=nounInfo("tarmac")
nouns['tarn']=nounInfo("tarn")
nouns['tarnish']=nounInfo("tarnish")
nouns['taro']=nounInfo("taro")
nouns['tarpaulin']=nounInfo("tarpaulin")
nouns['tarpon']=nounInfo("tarpon")
nouns['tarradiddle']=nounInfo("tarradiddle")
nouns['tarragon']=nounInfo("tarragon")
adjectives['tarry']=adjInfo("tarry")
adjectives['tarsal']=adjInfo("tarsal")
nouns['tarsal']=nounInfo("tarsal")
nouns['tarsus']=nounInfo("tarsus")
adjectives['tart']=adjInfo("tart")
nouns['tart']=nounInfo("tart")
nouns['tartan']=nounInfo("tartan")
nouns['tartar']=nounInfo("tartar")
adjectives['tartaric']=adjInfo("tartaric")
adverbs['tartly']="tartly"
nouns['tartness']=nounInfo("tartness")
nouns['task']=nounInfo("task")
nouns['tassel']=nounInfo("tassel")
adjectives['tasseled']=adjInfo("tasseled")
adjectives['tasselled']=adjInfo("tasselled")
nouns['taste']=nounInfo("taste")
adjectives['tasteful']=adjInfo("tasteful")
adverbs['tastefully']="tastefully"
adjectives['tasteless']=adjInfo("tasteless")
adverbs['tastelessly']="tastelessly"
nouns['taster']=nounInfo("taster")
adverbs['tastily']="tastily"
adjectives['tasty']=adjInfo("tasty")
nouns['tat']=nounInfo("tat")
nouns['tatter']=nounInfo("tatter")
nouns['tatterdemalion']=nounInfo("tatterdemalion")
adjectives['tattered']=adjInfo("tattered")
adverbs['tattily']="tattily"
nouns['tatting']=nounInfo("tatting")
nouns['tattle']=nounInfo("tattle")
nouns['tattler']=nounInfo("tattler")
nouns['tattoo']=nounInfo("tattoo")
adjectives['tatty']=adjInfo("tatty")
nouns['taunt']=nounInfo("taunt")
adverbs['tauntingly']="tauntingly"
adjectives['taut']=adjInfo("taut")
adverbs['tautly']="tautly"
nouns['tautness']=nounInfo("tautness")
adjectives['tautological']=adjInfo("tautological")
nouns['tautology']=nounInfo("tautology")
nouns['tavern']=nounInfo("tavern")
adverbs['tawdrily']="tawdrily"
nouns['tawdriness']=nounInfo("tawdriness")
adjectives['tawdry']=adjInfo("tawdry")
adjectives['tawny']=adjInfo("tawny")
nouns['tawse']=nounInfo("tawse")
nouns['tax']=nounInfo("tax")
nouns['taxability']=nounInfo("taxability")
adjectives['taxable']=adjInfo("taxable")
nouns['taxation']=nounInfo("taxation")
nouns['taxi']=nounInfo("taxi")
nouns['taxicab']=nounInfo("taxicab")
nouns['taxidermist']=nounInfo("taxidermist")
nouns['taxidermy']=nounInfo("taxidermy")
nouns['taximeter']=nounInfo("taximeter")
nouns['taxonomy']=nounInfo("taxonomy")
nouns['taxpayer']=nounInfo("taxpayer")
nouns['tea']=nounInfo("tea")
adjectives['teachable']=adjInfo("teachable")
nouns['teacher']=nounInfo("teacher").addAttributes({"g":"x"})
nouns['teaching']=nounInfo("teaching")
nouns['teacup']=nounInfo("teacup")
nouns['teahouse']=nounInfo("teahouse")
nouns['teak']=nounInfo("teak")
nouns['teal']=nounInfo("teal")
nouns['team']=nounInfo("team")
nouns['teamster']=nounInfo("teamster")
nouns['teapot']=nounInfo("teapot")
nouns['tear']=nounInfo("tear")
adjectives['tearaway']=adjInfo("tearaway")
nouns['tearaway']=nounInfo("tearaway")
adjectives['tearful']=adjInfo("tearful")
adverbs['tearfully']="tearfully"
adjectives['tearing']=adjInfo("tearing")
nouns['tearing']=nounInfo("tearing")
adverbs['tearingly']="tearingly"
adjectives['tearless']=adjInfo("tearless")
nouns['tearoom']=nounInfo("tearoom")
nouns['tease']=nounInfo("tease")
nouns['teasel']=nounInfo("teasel")
nouns['teaser']=nounInfo("teaser")
adverbs['teasingly']="teasingly"
nouns['teaspoon']=nounInfo("teaspoon")
nouns['teaspoonful']=nounInfo("teaspoonful")
nouns['teat']=nounInfo("teat")
nouns['teazel']=nounInfo("teazel")
nouns['teazle']=nounInfo("teazle")
nouns['tec']=nounInfo("tec")
nouns['tech']=nounInfo("tech")
adjectives['technical']=adjInfo("technical")
nouns['technicality']=nounInfo("technicality")
adverbs['technically']="technically"
nouns['technician']=nounInfo("technician")
nouns['technique']=nounInfo("technique")
nouns['technocracy']=nounInfo("technocracy")
nouns['technocrat']=nounInfo("technocrat")
adjectives['technological']=adjInfo("technological")
nouns['technologist']=nounInfo("technologist")
nouns['technology']=nounInfo("technology")
adjectives['techy']=adjInfo("techy")
nouns['teddy']=nounInfo("teddy")
adjectives['tedious']=adjInfo("tedious")
adverbs['tediously']="tediously"
nouns['tediousness']=nounInfo("tediousness")
nouns['tedium']=nounInfo("tedium")
nouns['tee']=nounInfo("tee")
adjectives['teenage']=adjInfo("teenage")
nouns['teenager']=nounInfo("teenager").addAttributes({"g":"x"})
nouns['teens']=nounInfo("teens")
adjectives['teeny']=adjInfo("teeny")
adjectives['teetotal']=adjInfo("teetotal")
nouns['teetotaller']=nounInfo("teetotaller")
nouns['teetotum']=nounInfo("teetotum")
nouns['teg']=nounInfo("teg")
nouns['tegument']=nounInfo("tegument")
nouns['telecast']=nounInfo("telecast")
nouns['telecommunication']=nounInfo("telecommunication")
nouns['telegram']=nounInfo("telegram")
nouns['telegraph']=nounInfo("telegraph")
nouns['telegrapher']=nounInfo("telegrapher")
nouns['telegraphese']=nounInfo("telegraphese")
adjectives['telegraphic']=adjInfo("telegraphic")
adverbs['telegraphically']="telegraphically"
nouns['telegraphist']=nounInfo("telegraphist")
nouns['telegraphy']=nounInfo("telegraphy")
nouns['telemetry']=nounInfo("telemetry")
adjectives['teleological']=adjInfo("teleological")
nouns['teleologist']=nounInfo("teleologist")
nouns['teleology']=nounInfo("teleology")
adjectives['telepathic']=adjInfo("telepathic")
nouns['telepathist']=nounInfo("telepathist")
nouns['telepathy']=nounInfo("telepathy")
nouns['telephone']=nounInfo("telephone")
nouns['telephonist']=nounInfo("telephonist")
nouns['telephony']=nounInfo("telephony")
nouns['telephoto']=nounInfo("telephoto")
nouns['telephotograph']=nounInfo("telephotograph")
nouns['telephotography']=nounInfo("telephotography")
nouns['teleprinter']=nounInfo("teleprinter")
nouns['teleprompter']=nounInfo("teleprompter")
nouns['telescope']=nounInfo("telescope")
adjectives['telescopic']=adjInfo("telescopic")
nouns['teletypewriter']=nounInfo("teletypewriter")
nouns['television']=nounInfo("television")
nouns['telex']=nounInfo("telex")
nouns['telfer']=nounInfo("telfer")
nouns['teller']=nounInfo("teller")
adjectives['telling']=adjInfo("telling")
adverbs['tellingly']="tellingly"
nouns['telltale']=nounInfo("telltale")
nouns['telly']=nounInfo("telly")
nouns['telpher']=nounInfo("telpher")
nouns['temerity']=nounInfo("temerity")
nouns['temper']=nounInfo("temper")
nouns['tempera']=nounInfo("tempera")
nouns['temperament']=nounInfo("temperament")
adjectives['temperamental']=adjInfo("temperamental")
adverbs['temperamentally']="temperamentally"
nouns['temperance']=nounInfo("temperance")
adjectives['temperate']=adjInfo("temperate")
adverbs['temperately']="temperately"
nouns['temperateness']=nounInfo("temperateness")
nouns['temperature']=nounInfo("temperature")
adjectives['tempered']=adjInfo("tempered")
nouns['tempest']=nounInfo("tempest")
adjectives['tempestuous']=adjInfo("tempestuous")
nouns['template']=nounInfo("template")
nouns['temple']=nounInfo("temple")
nouns['templet']=nounInfo("templet")
nouns['tempo']=nounInfo("tempo")
adjectives['temporal']=adjInfo("temporal")
nouns['temporality']=nounInfo("temporality")
adverbs['temporally']="temporally"
nouns['temporalty']=nounInfo("temporalty")
adverbs['temporarily']="temporarily"
nouns['temporariness']=nounInfo("temporariness")
adjectives['temporary']=adjInfo("temporary")
nouns['temptation']=nounInfo("temptation")
nouns['tempter']=nounInfo("tempter")
adverbs['temptingly']="temptingly"
nouns['temptress']=nounInfo("temptress")
nouns['ten']=nounInfo("ten")
nouns['tenability']=nounInfo("tenability")
adjectives['tenable']=adjInfo("tenable")
adjectives['tenacious']=adjInfo("tenacious")
adverbs['tenaciously']="tenaciously"
nouns['tenaciousness']=nounInfo("tenaciousness")
nouns['tenacity']=nounInfo("tenacity")
nouns['tenancy']=nounInfo("tenancy")
nouns['tenant']=nounInfo("tenant")
nouns['tenantry']=nounInfo("tenantry")
nouns['tench']=nounInfo("tench")
nouns['tendency']=nounInfo("tendency")
adjectives['tendentious']=adjInfo("tendentious")
adverbs['tendentiously']="tendentiously"
nouns['tendentiousness']=nounInfo("tendentiousness")
adjectives['tender']=adjInfo("tender")
nouns['tender']=nounInfo("tender")
nouns['tenderfoot']=nounInfo("tenderfoot")
nouns['tenderloin']=nounInfo("tenderloin")
adverbs['tenderly']="tenderly"
nouns['tenderness']=nounInfo("tenderness")
nouns['tendon']=nounInfo("tendon")
nouns['tendril']=nounInfo("tendril")
nouns['tenement']=nounInfo("tenement")
nouns['tenet']=nounInfo("tenet")
adverbs['tenfold']="tenfold"
nouns['tenner']=nounInfo("tenner")
nouns['tennis']=nounInfo("tennis")
nouns['tenon']=nounInfo("tenon")
nouns['tenor']=nounInfo("tenor")
nouns['tenpence']=nounInfo("tenpence")
nouns['tenpin']=nounInfo("tenpin")
adjectives['tense']=adjInfo("tense")
nouns['tense']=nounInfo("tense")
adverbs['tensely']="tensely"
nouns['tenseness']=nounInfo("tenseness")
adjectives['tensile']=adjInfo("tensile")
nouns['tension']=nounInfo("tension")
nouns['tensity']=nounInfo("tensity")
nouns['tent']=nounInfo("tent")
nouns['tentacle']=nounInfo("tentacle")
adjectives['tentative']=adjInfo("tentative")
adverbs['tentatively']="tentatively"
nouns['tenterhook']=nounInfo("tenterhook")
adjectives['tenth']=adjInfo("tenth")
nouns['tenth']=nounInfo("tenth")
adverbs['tenthly']="tenthly"
nouns['tenuity']=nounInfo("tenuity")
adjectives['tenuous']=adjInfo("tenuous")
adverbs['tenuously']="tenuously"
nouns['tenure']=nounInfo("tenure")
nouns['tepee']=nounInfo("tepee")
adjectives['tepid']=adjInfo("tepid")
nouns['tepidity']=nounInfo("tepidity")
adverbs['tepidly']="tepidly"
nouns['tepidness']=nounInfo("tepidness")
nouns['tercentenary']=nounInfo("tercentenary")
nouns['tercentennial']=nounInfo("tercentennial")
nouns['tergiversation']=nounInfo("tergiversation")
nouns['term']=nounInfo("term")
nouns['termagant']=nounInfo("termagant")
adjectives['terminable']=adjInfo("terminable")
adjectives['terminal']=adjInfo("terminal")
nouns['terminal']=nounInfo("terminal")
adverbs['terminally']="terminally"
nouns['termination']=nounInfo("termination")
adjectives['terminological']=adjInfo("terminological")
nouns['terminology']=nounInfo("terminology")
nouns['terminus']=nounInfo("terminus")
nouns['termite']=nounInfo("termite")
nouns['tern']=nounInfo("tern")
nouns['terrace']=nounInfo("terrace")
nouns['terrain']=nounInfo("terrain")
nouns['terrapin']=nounInfo("terrapin")
adjectives['terrestrial']=adjInfo("terrestrial")
adjectives['terrible']=adjInfo("terrible")
adverbs['terribly']="terribly"
nouns['terrier']=nounInfo("terrier")
adjectives['terrific']=adjInfo("terrific")
adverbs['terrifically']="terrifically"
adjectives['territorial']=adjInfo("territorial")
nouns['territorial']=nounInfo("territorial")
nouns['territory']=nounInfo("territory")
nouns['terror']=nounInfo("terror")
nouns['terrorism']=nounInfo("terrorism")
nouns['terrorist']=nounInfo("terrorist")
adjectives['terse']=adjInfo("terse")
adverbs['tersely']="tersely"
nouns['terseness']=nounInfo("terseness")
adjectives['tertian']=adjInfo("tertian")
adjectives['tertiary']=adjInfo("tertiary")
nouns['terylene']=nounInfo("terylene")
adjectives['tessellated']=adjInfo("tessellated")
nouns['test']=nounInfo("test")
nouns['testament']=nounInfo("testament")
adjectives['testamentary']=adjInfo("testamentary")
adjectives['testate']=adjInfo("testate")
nouns['testate']=nounInfo("testate")
nouns['testator']=nounInfo("testator").addAttributes({"g":"m"})
nouns['testatrix']=nounInfo("testatrix").addAttributes({"g":"f"})
nouns['testicle']=nounInfo("testicle")
adverbs['testily']="testily"
nouns['testimonial']=nounInfo("testimonial")
nouns['testimony']=nounInfo("testimony")
nouns['testiness']=nounInfo("testiness")
nouns['testis']=nounInfo("testis")
adjectives['testy']=adjInfo("testy")
nouns['tetanus']=nounInfo("tetanus")
adverbs['tetchily']="tetchily"
nouns['tetchiness']=nounInfo("tetchiness")
adjectives['tetchy']=adjInfo("tetchy")
nouns['tether']=nounInfo("tether")
nouns['text']=nounInfo("text")
nouns['textbook']=nounInfo("textbook")
adjectives['textile']=adjInfo("textile")
nouns['textile']=nounInfo("textile")
adjectives['textual']=adjInfo("textual")
nouns['texture']=nounInfo("texture")
adjectives['textured']=adjInfo("textured")
nouns['thalidomide']=nounInfo("thalidomide")
prepositions['than']=P("than")
nouns['thane']=nounInfo("thane")
adjectives['thankful']=adjInfo("thankful")
adverbs['thankfully']="thankfully"
nouns['thankfulness']=nounInfo("thankfulness")
adjectives['thankless']=adjInfo("thankless")
nouns['thanks']=nounInfo("thanks")
adverbs['that']="that"
nouns['thatch']=nounInfo("thatch")
nouns['thaw']=nounInfo("thaw")
nouns['theatre']=nounInfo("theatre")
adjectives['theatrical']=adjInfo("theatrical")
nouns['theatrical']=nounInfo("theatrical")
adverbs['theatrically']="theatrically"
nouns['theft']=nounInfo("theft")
nouns['theism']=nounInfo("theism")
nouns['theist']=nounInfo("theist")
adjectives['theistic']=adjInfo("theistic")
adjectives['theistical']=adjInfo("theistical")
adjectives['thematic']=adjInfo("thematic")
nouns['theme']=nounInfo("theme")
adverbs['then']="then"
adverbs['thence']="thence"
adverbs['thenceforth']="thenceforth"
adverbs['thenceforward']="thenceforward"
nouns['theocracy']=nounInfo("theocracy")
adjectives['theocratic']=adjInfo("theocratic")
nouns['theodolite']=nounInfo("theodolite")
nouns['theologian']=nounInfo("theologian")
adjectives['theological']=adjInfo("theological")
adverbs['theologically']="theologically"
nouns['theology']=nounInfo("theology")
nouns['theorem']=nounInfo("theorem")
adjectives['theoretic']=adjInfo("theoretic")
adjectives['theoretical']=adjInfo("theoretical")
adverbs['theoretically']="theoretically"
nouns['theorist']=nounInfo("theorist")
nouns['theory']=nounInfo("theory")
adjectives['theosophical']=adjInfo("theosophical")
nouns['theosophist']=nounInfo("theosophist")
nouns['theosophy']=nounInfo("theosophy")
adjectives['therapeutic']=adjInfo("therapeutic")
adjectives['therapeutical']=adjInfo("therapeutical")
nouns['therapeutics']=nounInfo("therapeutics")
nouns['therapist']=nounInfo("therapist")
nouns['therapy']=nounInfo("therapy")
adverbs['there']="there"
adverbs['thereabout']="thereabout"
adverbs['thereabouts']="thereabouts"
adverbs['thereafter']="thereafter"
adverbs['thereby']="thereby"
adverbs['therefore']="therefore"
adverbs['therein']="therein"
adverbs['thereinafter']="thereinafter"
adverbs['thereof']="thereof"
adverbs['thereto']="thereto"
adverbs['thereunder']="thereunder"
adverbs['thereupon']="thereupon"
adverbs['therewithal']="therewithal"
nouns['therm']=nounInfo("therm")
adjectives['thermal']=adjInfo("thermal")
nouns['thermal']=nounInfo("thermal")
adverbs['thermally']="thermally"
adjectives['thermionic']=adjInfo("thermionic")
nouns['thermometer']=nounInfo("thermometer")
nouns['thermos']=nounInfo("thermos")
nouns['thermostat']=nounInfo("thermostat")
adjectives['thermostatic']=adjInfo("thermostatic")
adverbs['thermostatically']="thermostatically"
nouns['thesaurus']=nounInfo("thesaurus")
nouns['thesis']=nounInfo("thesis")
nouns['thew']=nounInfo("thew")
adjectives['thick']=adjInfo("thick")
adverbs['thick']="thick"
nouns['thick']=nounInfo("thick")
nouns['thickening']=nounInfo("thickening")
nouns['thicket']=nounInfo("thicket")
adverbs['thickly']="thickly"
nouns['thickness']=nounInfo("thickness")
nouns['thief']=nounInfo("thief").addAttributes({"g":"x"})
nouns['thievery']=nounInfo("thievery")
adjectives['thievish']=adjInfo("thievish")
adverbs['thievishly']="thievishly"
nouns['thigh']=nounInfo("thigh")
nouns['thimble']=nounInfo("thimble")
nouns['thimbleful']=nounInfo("thimbleful")
adjectives['thin']=adjInfo("thin")
adverbs['thin']="thin"
nouns['thing']=nounInfo("thing")
nouns['thingmabob']=nounInfo("thingmabob")
nouns['thingmajig']=nounInfo("thingmajig")
nouns['thingumabob']=nounInfo("thingumabob")
nouns['thingumajig']=nounInfo("thingumajig")
nouns['thingummy']=nounInfo("thingummy")
nouns['think']=nounInfo("think")
adjectives['thinkable']=adjInfo("thinkable")
nouns['thinker']=nounInfo("thinker")
adjectives['thinking']=adjInfo("thinking")
nouns['thinking']=nounInfo("thinking")
adverbs['thinly']="thinly"
nouns['thinness']=nounInfo("thinness")
adjectives['third']=adjInfo("third")
nouns['third']=nounInfo("third")
adverbs['thirdly']="thirdly"
nouns['thirst']=nounInfo("thirst")
adverbs['thirstily']="thirstily"
adjectives['thirsty']=adjInfo("thirsty")
nouns['thirteen']=nounInfo("thirteen")
adjectives['thirteenth']=adjInfo("thirteenth")
nouns['thirteenth']=nounInfo("thirteenth")
adjectives['thirtieth']=adjInfo("thirtieth")
nouns['thirtieth']=nounInfo("thirtieth")
nouns['thirty']=nounInfo("thirty")
adverbs['this']="this"
nouns['thistle']=nounInfo("thistle")
adverbs['thither']="thither"
nouns['thole']=nounInfo("thole")
nouns['thong']=nounInfo("thong")
nouns['thorax']=nounInfo("thorax")
nouns['thorn']=nounInfo("thorn")
adjectives['thorny']=adjInfo("thorny")
adjectives['thorough']=adjInfo("thorough")
adjectives['thoroughbred']=adjInfo("thoroughbred")
nouns['thoroughbred']=nounInfo("thoroughbred")
nouns['thoroughfare']=nounInfo("thoroughfare")
adverbs['thoroughly']="thoroughly"
nouns['thoroughness']=nounInfo("thoroughness")
adverbs['though']="though"
nouns['thought']=nounInfo("thought")
adjectives['thoughtful']=adjInfo("thoughtful")
adverbs['thoughtfully']="thoughtfully"
nouns['thoughtfulness']=nounInfo("thoughtfulness")
adjectives['thoughtless']=adjInfo("thoughtless")
adverbs['thoughtlessly']="thoughtlessly"
nouns['thoughtlessness']=nounInfo("thoughtlessness")
nouns['thousand']=nounInfo("thousand")
adjectives['thousandfold']=adjInfo("thousandfold")
adverbs['thousandfold']="thousandfold"
adjectives['thousandth']=adjInfo("thousandth")
nouns['thousandth']=nounInfo("thousandth")
nouns['thraldom']=nounInfo("thraldom")
nouns['thrall']=nounInfo("thrall")
nouns['thrashing']=nounInfo("thrashing")
nouns['thread']=nounInfo("thread")
adjectives['threadbare']=adjInfo("threadbare")
adjectives['threadlike']=adjInfo("threadlike")
nouns['threat']=nounInfo("threat")
adverbs['threateningly']="threateningly"
nouns['three']=nounInfo("three")
nouns['threepence']=nounInfo("threepence")
adjectives['threepenny']=adjInfo("threepenny")
nouns['threesome']=nounInfo("threesome")
nouns['threnody']=nounInfo("threnody")
nouns['thresher']=nounInfo("thresher")
nouns['threshold']=nounInfo("threshold")
adverbs['thrice']="thrice"
nouns['thrift']=nounInfo("thrift")
adverbs['thriftily']="thriftily"
adjectives['thriftless']=adjInfo("thriftless")
adverbs['thriftlessly']="thriftlessly"
nouns['thriftlessness']=nounInfo("thriftlessness")
adjectives['thrifty']=adjInfo("thrifty")
nouns['thrill']=nounInfo("thrill")
nouns['thriller']=nounInfo("thriller")
nouns['throat']=nounInfo("throat")
adjectives['throated']=adjInfo("throated")
adjectives['throaty']=adjInfo("throaty")
nouns['throb']=nounInfo("throb")
adjectives['throbbing']=adjInfo("throbbing")
nouns['throe']=nounInfo("throe")
nouns['throes']=nounInfo("throes")
nouns['thrombosis']=nounInfo("thrombosis")
nouns['throne']=nounInfo("throne")
nouns['throng']=nounInfo("throng")
nouns['throstle']=nounInfo("throstle")
nouns['throttle']=nounInfo("throttle")
adverbs['through']="through"
prepositions['through']=P("through")
adverbs['throughout']="throughout"
prepositions['throughout']=P("throughout")
nouns['throughput']=nounInfo("throughput")
nouns['throughway']=nounInfo("throughway")
nouns['throw']=nounInfo("throw")
nouns['throwaway']=nounInfo("throwaway")
nouns['thrush']=nounInfo("thrush")
nouns['thrust']=nounInfo("thrust")
nouns['thruster']=nounInfo("thruster")
nouns['thud']=nounInfo("thud")
nouns['thug']=nounInfo("thug")
nouns['thuggery']=nounInfo("thuggery")
nouns['thumb']=nounInfo("thumb")
nouns['thumbscrew']=nounInfo("thumbscrew")
nouns['thump']=nounInfo("thump")
adjectives['thumping']=adjInfo("thumping")
nouns['thunder']=nounInfo("thunder")
nouns['thunderbolt']=nounInfo("thunderbolt")
nouns['thunderclap']=nounInfo("thunderclap")
nouns['thunderstorm']=nounInfo("thunderstorm")
adjectives['thunderstruck']=adjInfo("thunderstruck")
adjectives['thundery']=adjInfo("thundery")
nouns['thurible']=nounInfo("thurible")
adverbs['thus']="thus"
nouns['thwack']=nounInfo("thwack")
nouns['thwart']=nounInfo("thwart")
nouns['thyme']=nounInfo("thyme")
nouns['thyroid']=nounInfo("thyroid")
nouns['ti']=nounInfo("ti")
nouns['tiara']=nounInfo("tiara")
nouns['tibia']=nounInfo("tibia")
nouns['tic']=nounInfo("tic")
nouns['tick']=nounInfo("tick")
nouns['ticker']=nounInfo("ticker")
nouns['ticket']=nounInfo("ticket")
nouns['ticking']=nounInfo("ticking")
nouns['tickler']=nounInfo("tickler")
adjectives['ticklish']=adjInfo("ticklish")
adjectives['tidal']=adjInfo("tidal")
nouns['tidbit']=nounInfo("tidbit")
nouns['tiddler']=nounInfo("tiddler")
adjectives['tiddley']=adjInfo("tiddley")
nouns['tiddlywink']=nounInfo("tiddlywink")
nouns['tide']=nounInfo("tide")
nouns['tidemark']=nounInfo("tidemark")
nouns['tideway']=nounInfo("tideway")
adverbs['tidily']="tidily"
nouns['tidiness']=nounInfo("tidiness")
nouns['tidings']=nounInfo("tidings")
adjectives['tidy']=adjInfo("tidy")
nouns['tidy']=nounInfo("tidy")
nouns['tie']=nounInfo("tie")
nouns['tier']=nounInfo("tier")
nouns['tiff']=nounInfo("tiff")
nouns['tiger']=nounInfo("tiger")
adjectives['tigerish']=adjInfo("tigerish")
adjectives['tight']=adjInfo("tight")
adverbs['tight']="tight"
adverbs['tightly']="tightly"
nouns['tightness']=nounInfo("tightness")
nouns['tights']=nounInfo("tights")
nouns['tigress']=nounInfo("tigress")
nouns['tike']=nounInfo("tike")
nouns['tilde']=nounInfo("tilde")
nouns['tile']=nounInfo("tile")
nouns['till']=nounInfo("till")
prepositions['till']=P("till")
nouns['tillage']=nounInfo("tillage")
nouns['tiller']=nounInfo("tiller")
nouns['tilt']=nounInfo("tilt")
nouns['tilth']=nounInfo("tilth")
nouns['timber']=nounInfo("timber")
adjectives['timbered']=adjInfo("timbered")
nouns['timbre']=nounInfo("timbre")
nouns['timbrel']=nounInfo("timbrel")
nouns['time']=nounInfo("time")
nouns['timekeeper']=nounInfo("timekeeper")
adjectives['timeless']=adjInfo("timeless")
nouns['timeliness']=nounInfo("timeliness")
adjectives['timely']=adjInfo("timely")
nouns['timepiece']=nounInfo("timepiece")
nouns['timetable']=nounInfo("timetable")
adjectives['timid']=adjInfo("timid")
nouns['timidity']=nounInfo("timidity")
adverbs['timidly']="timidly"
nouns['timidness']=nounInfo("timidness")
nouns['timing']=nounInfo("timing")
adjectives['timorous']=adjInfo("timorous")
adverbs['timorously']="timorously"
nouns['timothy']=nounInfo("timothy")
nouns['timpani']=nounInfo("timpani")
nouns['timpanist']=nounInfo("timpanist")
nouns['tin']=nounInfo("tin")
nouns['tincture']=nounInfo("tincture")
nouns['tinder']=nounInfo("tinder")
nouns['tine']=nounInfo("tine")
adjectives['tined']=adjInfo("tined")
nouns['tinfoil']=nounInfo("tinfoil")
nouns['ting']=nounInfo("ting")
nouns['tinge']=nounInfo("tinge")
nouns['tingle']=nounInfo("tingle")
nouns['tinker']=nounInfo("tinker")
nouns['tinkle']=nounInfo("tinkle")
adjectives['tinny']=adjInfo("tinny")
nouns['tinsel']=nounInfo("tinsel")
adjectives['tinselly']=adjInfo("tinselly")
nouns['tinsmith']=nounInfo("tinsmith")
nouns['tint']=nounInfo("tint")
nouns['tintack']=nounInfo("tintack")
nouns['tintinnabulation']=nounInfo("tintinnabulation")
adjectives['tiny']=adjInfo("tiny")
nouns['tip']=nounInfo("tip")
nouns['tippet']=nounInfo("tippet")
nouns['tipple']=nounInfo("tipple")
nouns['tippler']=nounInfo("tippler")
nouns['tipstaff']=nounInfo("tipstaff")
nouns['tipster']=nounInfo("tipster")
adjectives['tipsy']=adjInfo("tipsy")
adverbs['tiptoe']="tiptoe"
nouns['tirade']=nounInfo("tirade")
nouns['tire']=nounInfo("tire")
adjectives['tired']=adjInfo("tired")
nouns['tiredness']=nounInfo("tiredness")
adjectives['tireless']=adjInfo("tireless")
adverbs['tirelessly']="tirelessly"
adjectives['tiresome']=adjInfo("tiresome")
adverbs['tiresomely']="tiresomely"
adverbs['tiring']="tiring"
nouns['tiro']=nounInfo("tiro")
nouns['tissue']=nounInfo("tissue")
nouns['tit']=nounInfo("tit")
nouns['titan']=nounInfo("titan")
adjectives['titanic']=adjInfo("titanic")
nouns['titbit']=nounInfo("titbit")
nouns['tithe']=nounInfo("tithe")
nouns['titillation']=nounInfo("titillation")
nouns['titlark']=nounInfo("titlark")
nouns['title']=nounInfo("title")
adjectives['titled']=adjInfo("titled")
nouns['titmouse']=nounInfo("titmouse")
nouns['tittle']=nounInfo("tittle")
adjectives['titular']=adjInfo("titular")
nouns['tizzy']=nounInfo("tizzy")
prepositions['to']=P("to")
nouns['toad']=nounInfo("toad")
nouns['toadstool']=nounInfo("toadstool")
nouns['toady']=nounInfo("toady")
nouns['toast']=nounInfo("toast")
nouns['toaster']=nounInfo("toaster")
nouns['toastrack']=nounInfo("toastrack")
nouns['tobacco']=nounInfo("tobacco")
nouns['tobacconist']=nounInfo("tobacconist")
nouns['toboggan']=nounInfo("toboggan")
nouns['toccata']=nounInfo("toccata")
nouns['tocsin']=nounInfo("tocsin")
adverbs['today']="today"
nouns['today']=nounInfo("today")
nouns['toddler']=nounInfo("toddler")
nouns['toddy']=nounInfo("toddy")
nouns['toe']=nounInfo("toe")
nouns['toff']=nounInfo("toff")
nouns['toffee']=nounInfo("toffee")
nouns['toga']=nounInfo("toga")
adverbs['together']="together"
nouns['togetherness']=nounInfo("togetherness")
nouns['toggle']=nounInfo("toggle")
nouns['togs']=nounInfo("togs")
nouns['toil']=nounInfo("toil")
nouns['toiler']=nounInfo("toiler")
nouns['toilet']=nounInfo("toilet")
nouns['toils']=nounInfo("toils")
adjectives['toilsome']=adjInfo("toilsome")
nouns['token']=nounInfo("token")
adjectives['tolerable']=adjInfo("tolerable")
adverbs['tolerably']="tolerably"
nouns['tolerance']=nounInfo("tolerance")
adjectives['tolerant']=adjInfo("tolerant")
adverbs['tolerantly']="tolerantly"
nouns['toleration']=nounInfo("toleration")
nouns['toll']=nounInfo("toll")
nouns['tomahawk']=nounInfo("tomahawk")
nouns['tomato']=nounInfo("tomato")
nouns['tomb']=nounInfo("tomb")
nouns['tombola']=nounInfo("tombola")
nouns['tomboy']=nounInfo("tomboy")
nouns['tombstone']=nounInfo("tombstone")
nouns['tomcat']=nounInfo("tomcat")
nouns['tome']=nounInfo("tome")
nouns['tomfool']=nounInfo("tomfool")
nouns['tomfoolery']=nounInfo("tomfoolery")
adverbs['tomorrow']="tomorrow"
nouns['tomorrow']=nounInfo("tomorrow")
nouns['tomtom']=nounInfo("tomtom")
nouns['ton']=nounInfo("ton")
adjectives['tonal']=adjInfo("tonal")
nouns['tonality']=nounInfo("tonality")
nouns['tone']=nounInfo("tone")
adjectives['toned']=adjInfo("toned")
adjectives['toneless']=adjInfo("toneless")
adverbs['tonelessly']="tonelessly"
nouns['tongs']=nounInfo("tongs")
nouns['tongue']=nounInfo("tongue")
adjectives['tongued']=adjInfo("tongued")
adjectives['tonic']=adjInfo("tonic")
nouns['tonic']=nounInfo("tonic")
adverbs['tonight']="tonight"
nouns['tonight']=nounInfo("tonight")
nouns['tonnage']=nounInfo("tonnage")
nouns['tonne']=nounInfo("tonne")
nouns['tonsil']=nounInfo("tonsil")
nouns['tonsillitis']=nounInfo("tonsillitis")
adjectives['tonsorial']=adjInfo("tonsorial")
nouns['tonsure']=nounInfo("tonsure")
nouns['tontine']=nounInfo("tontine")
adverbs['too']="too"
nouns['tool']=nounInfo("tool")
nouns['toot']=nounInfo("toot")
nouns['tooth']=nounInfo("tooth")
nouns['toothbrush']=nounInfo("toothbrush")
adjectives['toothed']=adjInfo("toothed")
adjectives['toothless']=adjInfo("toothless")
nouns['toothpaste']=nounInfo("toothpaste")
nouns['toothpick']=nounInfo("toothpick")
nouns['toothpowder']=nounInfo("toothpowder")
adjectives['toothsome']=adjInfo("toothsome")
nouns['tootle']=nounInfo("tootle")
nouns['top']=nounInfo("top")
nouns['topaz']=nounInfo("topaz")
nouns['toper']=nounInfo("toper")
nouns['topi']=nounInfo("topi")
nouns['topiary']=nounInfo("topiary")
nouns['topic']=nounInfo("topic")
adjectives['topical']=adjInfo("topical")
adverbs['topically']="topically"
nouns['topknot']=nounInfo("topknot")
adjectives['topless']=adjInfo("topless")
nouns['topmast']=nounInfo("topmast")
adjectives['topmost']=adjInfo("topmost")
adjectives['topographical']=adjInfo("topographical")
adverbs['topographically']="topographically"
nouns['topography']=nounInfo("topography")
nouns['topper']=nounInfo("topper")
adjectives['topping']=adjInfo("topping")
adverbs['toppingly']="toppingly"
nouns['tops']=nounInfo("tops")
nouns['topsail']=nounInfo("topsail")
nouns['toque']=nounInfo("toque")
nouns['tor']=nounInfo("tor")
nouns['torch']=nounInfo("torch")
nouns['torchlight']=nounInfo("torchlight")
nouns['toreador']=nounInfo("toreador")
nouns['torment']=nounInfo("torment")
nouns['tormentor']=nounInfo("tormentor")
nouns['tornado']=nounInfo("tornado")
nouns['torpedo']=nounInfo("torpedo")
adjectives['torpid']=adjInfo("torpid")
nouns['torpidity']=nounInfo("torpidity")
adverbs['torpidly']="torpidly"
nouns['torpidness']=nounInfo("torpidness")
nouns['torpor']=nounInfo("torpor")
nouns['torque']=nounInfo("torque")
nouns['torrent']=nounInfo("torrent")
adjectives['torrential']=adjInfo("torrential")
adjectives['torrid']=adjInfo("torrid")
nouns['torridity']=nounInfo("torridity")
nouns['torsion']=nounInfo("torsion")
nouns['torso']=nounInfo("torso")
nouns['tort']=nounInfo("tort")
nouns['tortilla']=nounInfo("tortilla")
nouns['tortoise']=nounInfo("tortoise")
adjectives['tortuous']=adjInfo("tortuous")
adverbs['tortuously']="tortuously"
nouns['torture']=nounInfo("torture")
nouns['torturer']=nounInfo("torturer")
nouns['tosh']=nounInfo("tosh")
nouns['toss']=nounInfo("toss")
nouns['tot']=nounInfo("tot").addAttributes({"g":"x"})
adjectives['total']=adjInfo("total")
nouns['total']=nounInfo("total")
adjectives['totalitarian']=adjInfo("totalitarian")
nouns['totalitarianism']=nounInfo("totalitarianism")
nouns['totality']=nounInfo("totality")
nouns['totalizator']=nounInfo("totalizator")
adverbs['totally']="totally"
nouns['tote']=nounInfo("tote")
nouns['totem']=nounInfo("totem")
adjectives['tottery']=adjInfo("tottery")
nouns['toucan']=nounInfo("toucan")
nouns['touch']=nounInfo("touch")
adjectives['touchable']=adjInfo("touchable")
adjectives['touched']=adjInfo("touched")
adverbs['touchily']="touchily"
nouns['touchiness']=nounInfo("touchiness")
adjectives['touching']=adjInfo("touching")
prepositions['touching']=P("touching")
adverbs['touchingly']="touchingly"
nouns['touchstone']=nounInfo("touchstone")
adjectives['touchy']=adjInfo("touchy")
adjectives['tough']=adjInfo("tough")
nouns['tough']=nounInfo("tough")
nouns['toughie']=nounInfo("toughie")
adverbs['toughly']="toughly"
nouns['toughness']=nounInfo("toughness")
nouns['toupee']=nounInfo("toupee")
nouns['tour']=nounInfo("tour")
adjectives['touring']=adjInfo("touring")
nouns['touring']=nounInfo("touring")
nouns['tourism']=nounInfo("tourism")
nouns['tourist']=nounInfo("tourist").addAttributes({"g":"x"})
nouns['tournament']=nounInfo("tournament")
nouns['tourney']=nounInfo("tourney")
nouns['tourniquet']=nounInfo("tourniquet")
nouns['tout']=nounInfo("tout")
nouns['tow']=nounInfo("tow")
prepositions['toward']=P("toward")
prepositions['towards']=P("towards")
nouns['towel']=nounInfo("towel")
nouns['towelling']=nounInfo("towelling")
nouns['tower']=nounInfo("tower")
adjectives['towering']=adjInfo("towering")
nouns['town']=nounInfo("town")
nouns['townee']=nounInfo("townee")
nouns['township']=nounInfo("township")
nouns['townsman']=nounInfo("townsman")
nouns['townspeople']=nounInfo("townspeople")
nouns['toxaemia']=nounInfo("toxaemia")
adjectives['toxic']=adjInfo("toxic")
nouns['toxicity']=nounInfo("toxicity")
nouns['toxicologist']=nounInfo("toxicologist")
nouns['toxicology']=nounInfo("toxicology")
nouns['toxin']=nounInfo("toxin")
nouns['toy']=nounInfo("toy")
nouns['toyshop']=nounInfo("toyshop")
nouns['trace']=nounInfo("trace")
adjectives['traceable']=adjInfo("traceable")
nouns['tracer']=nounInfo("tracer")
nouns['tracery']=nounInfo("tracery")
nouns['trachea']=nounInfo("trachea")
nouns['trachoma']=nounInfo("trachoma")
nouns['tracing']=nounInfo("tracing")
nouns['track']=nounInfo("track")
adjectives['tracked']=adjInfo("tracked")
nouns['tracker']=nounInfo("tracker")
adjectives['trackless']=adjInfo("trackless")
nouns['tract']=nounInfo("tract")
nouns['tractability']=nounInfo("tractability")
adjectives['tractable']=adjInfo("tractable")
nouns['traction']=nounInfo("traction")
nouns['tractor']=nounInfo("tractor")
nouns['trad']=nounInfo("trad")
nouns['trade']=nounInfo("trade")
nouns['trademark']=nounInfo("trademark")
nouns['trader']=nounInfo("trader")
nouns['tradesfolk']=nounInfo("tradesfolk")
nouns['tradesman']=nounInfo("tradesman")
nouns['tradespeople']=nounInfo("tradespeople")
nouns['tradition']=nounInfo("tradition")
adjectives['traditional']=adjInfo("traditional")
nouns['traditionalism']=nounInfo("traditionalism")
nouns['traditionalist']=nounInfo("traditionalist")
adverbs['traditionally']="traditionally"
nouns['traducer']=nounInfo("traducer")
nouns['traffic']=nounInfo("traffic")
nouns['trafficator']=nounInfo("trafficator")
nouns['trafficker']=nounInfo("trafficker")
nouns['tragedian']=nounInfo("tragedian")
nouns['tragedienne']=nounInfo("tragedienne")
nouns['tragedy']=nounInfo("tragedy")
adjectives['tragic']=adjInfo("tragic")
adverbs['tragically']="tragically"
nouns['trail']=nounInfo("trail")
nouns['trailer']=nounInfo("trailer")
nouns['train']=nounInfo("train")
nouns['trainee']=nounInfo("trainee")
nouns['trainer']=nounInfo("trainer")
nouns['training']=nounInfo("training")
nouns['trainman']=nounInfo("trainman")
nouns['trait']=nounInfo("trait")
nouns['traitor']=nounInfo("traitor")
adjectives['traitorous']=adjInfo("traitorous")
adverbs['traitorously']="traitorously"
nouns['traitress']=nounInfo("traitress")
nouns['trajectory']=nounInfo("trajectory")
nouns['tram']=nounInfo("tram")
nouns['tramline']=nounInfo("tramline")
nouns['trammels']=nounInfo("trammels")
nouns['tramp']=nounInfo("tramp")
nouns['trample']=nounInfo("trample")
nouns['trampoline']=nounInfo("trampoline")
nouns['trance']=nounInfo("trance")
adjectives['tranquil']=adjInfo("tranquil")
nouns['tranquility']=nounInfo("tranquility")
nouns['tranquillity']=nounInfo("tranquillity")
nouns['tranquillizer']=nounInfo("tranquillizer")
adverbs['tranquilly']="tranquilly"
nouns['transaction']=nounInfo("transaction")
adjectives['transalpine']=adjInfo("transalpine")
nouns['transalpine']=nounInfo("transalpine")
adjectives['transatlantic']=adjInfo("transatlantic")
nouns['transcendence']=nounInfo("transcendence")
nouns['transcendency']=nounInfo("transcendency")
adjectives['transcendent']=adjInfo("transcendent")
adjectives['transcendental']=adjInfo("transcendental")
nouns['transcendentalism']=nounInfo("transcendentalism")
nouns['transcendentalist']=nounInfo("transcendentalist")
adverbs['transcendentally']="transcendentally"
adjectives['transcontinental']=adjInfo("transcontinental")
nouns['transcript']=nounInfo("transcript")
nouns['transcription']=nounInfo("transcription")
nouns['transept']=nounInfo("transept")
nouns['transfer']=nounInfo("transfer")
nouns['transferability']=nounInfo("transferability")
adjectives['transferable']=adjInfo("transferable")
nouns['transference']=nounInfo("transference")
nouns['transfiguration']=nounInfo("transfiguration")
adjectives['transformable']=adjInfo("transformable")
nouns['transformation']=nounInfo("transformation")
nouns['transformer']=nounInfo("transformer")
nouns['transfusion']=nounInfo("transfusion")
nouns['transgression']=nounInfo("transgression")
nouns['transgressor']=nounInfo("transgressor")
nouns['transience']=nounInfo("transience")
nouns['transiency']=nounInfo("transiency")
adjectives['transient']=adjInfo("transient")
nouns['transient']=nounInfo("transient")
adverbs['transiently']="transiently"
nouns['transistor']=nounInfo("transistor")
adjectives['transistorized']=adjInfo("transistorized")
nouns['transit']=nounInfo("transit")
nouns['transition']=nounInfo("transition")
adjectives['transitional']=adjInfo("transitional")
adverbs['transitionally']="transitionally"
adjectives['transitive']=adjInfo("transitive")
adverbs['transitively']="transitively"
adjectives['transitory']=adjInfo("transitory")
adjectives['translatable']=adjInfo("translatable")
nouns['translation']=nounInfo("translation")
nouns['translator']=nounInfo("translator")
nouns['transliteration']=nounInfo("transliteration")
nouns['translucence']=nounInfo("translucence")
nouns['translucency']=nounInfo("translucency")
adjectives['translucent']=adjInfo("translucent")
nouns['transmigration']=nounInfo("transmigration")
nouns['transmission']=nounInfo("transmission")
nouns['transmitter']=nounInfo("transmitter")
nouns['transmogrification']=nounInfo("transmogrification")
adjectives['transmutable']=adjInfo("transmutable")
nouns['transmutation']=nounInfo("transmutation")
adjectives['transoceanic']=adjInfo("transoceanic")
nouns['transom']=nounInfo("transom")
nouns['transparence']=nounInfo("transparence")
nouns['transparency']=nounInfo("transparency")
adjectives['transparent']=adjInfo("transparent")
adverbs['transparently']="transparently"
nouns['transpiration']=nounInfo("transpiration")
nouns['transplant']=nounInfo("transplant")
nouns['transplantation']=nounInfo("transplantation")
adjectives['transpolar']=adjInfo("transpolar")
nouns['transport']=nounInfo("transport")
adjectives['transportable']=adjInfo("transportable")
nouns['transportation']=nounInfo("transportation")
nouns['transporter']=nounInfo("transporter")
nouns['transposition']=nounInfo("transposition")
nouns['transsexual']=nounInfo("transsexual")
nouns['transshipment']=nounInfo("transshipment")
nouns['transubstantiation']=nounInfo("transubstantiation")
adjectives['transverse']=adjInfo("transverse")
adverbs['transversely']="transversely"
nouns['transvestism']=nounInfo("transvestism")
nouns['transvestite']=nounInfo("transvestite")
nouns['trap']=nounInfo("trap")
nouns['trapeze']=nounInfo("trapeze")
nouns['trapezium']=nounInfo("trapezium")
nouns['trapezoid']=nounInfo("trapezoid")
nouns['trapper']=nounInfo("trapper")
nouns['trappings']=nounInfo("trappings")
nouns['trash']=nounInfo("trash")
adjectives['trashy']=adjInfo("trashy")
nouns['trauma']=nounInfo("trauma")
adjectives['traumatic']=adjInfo("traumatic")
nouns['travail']=nounInfo("travail")
nouns['travel']=nounInfo("travel")
adjectives['traveled']=adjInfo("traveled")
nouns['traveling']=nounInfo("traveling")
adjectives['travelled']=adjInfo("travelled")
nouns['traveller']=nounInfo("traveller").addAttributes({"g":"x"})
nouns['travelling']=nounInfo("travelling")
nouns['travelogue']=nounInfo("travelogue")
nouns['traverse']=nounInfo("traverse")
nouns['travesty']=nounInfo("travesty")
nouns['trawl']=nounInfo("trawl")
nouns['trawler']=nounInfo("trawler")
nouns['tray']=nounInfo("tray")
adjectives['treacherous']=adjInfo("treacherous")
adverbs['treacherously']="treacherously"
nouns['treachery']=nounInfo("treachery")
nouns['treacle']=nounInfo("treacle")
adjectives['treacly']=adjInfo("treacly")
nouns['tread']=nounInfo("tread")
nouns['treadle']=nounInfo("treadle")
nouns['treason']=nounInfo("treason")
adjectives['treasonable']=adjInfo("treasonable")
adverbs['treasonably']="treasonably"
adjectives['treasonous']=adjInfo("treasonous")
nouns['treasure']=nounInfo("treasure")
nouns['treasurer']=nounInfo("treasurer")
nouns['treasury']=nounInfo("treasury")
nouns['treat']=nounInfo("treat")
nouns['treatise']=nounInfo("treatise")
nouns['treatment']=nounInfo("treatment")
nouns['treaty']=nounInfo("treaty")
nouns['treble']=nounInfo("treble")
nouns['tree']=nounInfo("tree")
adjectives['treeless']=adjInfo("treeless")
nouns['trefoil']=nounInfo("trefoil")
nouns['trek']=nounInfo("trek")
nouns['trellis']=nounInfo("trellis")
nouns['tremble']=nounInfo("tremble")
adjectives['tremendous']=adjInfo("tremendous")
adverbs['tremendously']="tremendously"
nouns['tremolo']=nounInfo("tremolo")
nouns['tremor']=nounInfo("tremor")
adjectives['tremulous']=adjInfo("tremulous")
adverbs['tremulously']="tremulously"
nouns['trench']=nounInfo("trench")
nouns['trenchancy']=nounInfo("trenchancy")
adjectives['trenchant']=adjInfo("trenchant")
adverbs['trenchantly']="trenchantly"
nouns['trencher']=nounInfo("trencher")
nouns['trencherman']=nounInfo("trencherman")
nouns['trend']=nounInfo("trend")
adjectives['trendy']=adjInfo("trendy")
nouns['trephine']=nounInfo("trephine")
nouns['trepidation']=nounInfo("trepidation")
nouns['trespass']=nounInfo("trespass")
nouns['trespasser']=nounInfo("trespasser")
nouns['tress']=nounInfo("tress")
nouns['trestle']=nounInfo("trestle")
nouns['trews']=nounInfo("trews")
nouns['triad']=nounInfo("triad")
nouns['trial']=nounInfo("trial")
nouns['triangle']=nounInfo("triangle")
adjectives['triangular']=adjInfo("triangular")
adjectives['tribal']=adjInfo("tribal")
nouns['tribalism']=nounInfo("tribalism")
nouns['tribe']=nounInfo("tribe")
nouns['tribesman']=nounInfo("tribesman")
nouns['tribulation']=nounInfo("tribulation")
nouns['tribunal']=nounInfo("tribunal")
nouns['tribune']=nounInfo("tribune")
adjectives['tributary']=adjInfo("tributary")
nouns['tributary']=nounInfo("tributary")
nouns['tribute']=nounInfo("tribute")
nouns['trice']=nounInfo("trice")
nouns['trick']=nounInfo("trick")
nouns['trickery']=nounInfo("trickery")
nouns['trickle']=nounInfo("trickle")
nouns['trickster']=nounInfo("trickster")
adjectives['tricky']=adjInfo("tricky")
nouns['tricolour']=nounInfo("tricolour")
nouns['tricycle']=nounInfo("tricycle")
nouns['trident']=nounInfo("trident")
adjectives['tried']=adjInfo("tried")
adjectives['triennial']=adjInfo("triennial")
nouns['triennial']=nounInfo("triennial")
nouns['trier']=nounInfo("trier")
nouns['trifle']=nounInfo("trifle")
nouns['trifler']=nounInfo("trifler")
adjectives['trifling']=adjInfo("trifling")
nouns['trigger']=nounInfo("trigger")
nouns['trigonometry']=nounInfo("trigonometry")
adjectives['trilateral']=adjInfo("trilateral")
nouns['trilby']=nounInfo("trilby")
nouns['trill']=nounInfo("trill")
nouns['trillion']=nounInfo("trillion")
adjectives['trillionth']=adjInfo("trillionth")
nouns['trillionth']=nounInfo("trillionth")
nouns['trilogy']=nounInfo("trilogy")
adjectives['trim']=adjInfo("trim")
nouns['trim']=nounInfo("trim")
nouns['trimaran']=nounInfo("trimaran")
adverbs['trimly']="trimly"
nouns['trimmer']=nounInfo("trimmer")
nouns['trimming']=nounInfo("trimming")
nouns['trinitrotoluene']=nounInfo("trinitrotoluene")
nouns['trinity']=nounInfo("trinity")
nouns['trinket']=nounInfo("trinket")
nouns['trio']=nounInfo("trio")
nouns['trip']=nounInfo("trip")
adjectives['tripartite']=adjInfo("tripartite")
nouns['tripe']=nounInfo("tripe")
adjectives['triple']=adjInfo("triple")
nouns['triplet']=nounInfo("triplet")
adjectives['triplex']=adjInfo("triplex")
adjectives['triplicate']=adjInfo("triplicate")
nouns['triplicate']=nounInfo("triplicate")
nouns['tripod']=nounInfo("tripod")
nouns['tripos']=nounInfo("tripos")
nouns['tripper']=nounInfo("tripper")
adjectives['tripping']=adjInfo("tripping")
adverbs['trippingly']="trippingly"
nouns['triptych']=nounInfo("triptych")
nouns['trireme']=nounInfo("trireme")
adjectives['trite']=adjInfo("trite")
adverbs['tritely']="tritely"
nouns['triteness']=nounInfo("triteness")
nouns['triumph']=nounInfo("triumph")
adjectives['triumphal']=adjInfo("triumphal")
adjectives['triumphant']=adjInfo("triumphant")
adverbs['triumphantly']="triumphantly"
nouns['triumvir']=nounInfo("triumvir")
nouns['triumvirate']=nounInfo("triumvirate")
adjectives['triune']=adjInfo("triune")
nouns['trivet']=nounInfo("trivet")
nouns['trivia']=nounInfo("trivia")
adjectives['trivial']=adjInfo("trivial")
nouns['triviality']=nounInfo("triviality")
adverbs['trivially']="trivially"
adjectives['trochaic']=adjInfo("trochaic")
nouns['trochee']=nounInfo("trochee")
nouns['troglodyte']=nounInfo("troglodyte")
nouns['troika']=nounInfo("troika")
nouns['troll']=nounInfo("troll")
nouns['trolley']=nounInfo("trolley")
nouns['trollop']=nounInfo("trollop")
nouns['trombone']=nounInfo("trombone")
nouns['trombonist']=nounInfo("trombonist")
nouns['troop']=nounInfo("troop")
nouns['trooper']=nounInfo("trooper")
nouns['troopship']=nounInfo("troopship")
nouns['trope']=nounInfo("trope")
nouns['trophy']=nounInfo("trophy")
nouns['tropic']=nounInfo("tropic")
adjectives['tropical']=adjInfo("tropical")
adverbs['tropically']="tropically"
nouns['trot']=nounInfo("trot")
nouns['troth']=nounInfo("troth")
nouns['trotter']=nounInfo("trotter")
nouns['troubadour']=nounInfo("troubadour")
nouns['trouble']=nounInfo("trouble")
adjectives['troublesome']=adjInfo("troublesome")
adjectives['troublous']=adjInfo("troublous")
nouns['trough']=nounInfo("trough")
nouns['trouncing']=nounInfo("trouncing")
nouns['troupe']=nounInfo("troupe")
nouns['trouper']=nounInfo("trouper")
nouns['trouser']=nounInfo("trouser")
nouns['trousseau']=nounInfo("trousseau")
nouns['trout']=nounInfo("trout")
nouns['trove']=nounInfo("trove")
nouns['trowel']=nounInfo("trowel")
nouns['troy']=nounInfo("troy")
nouns['truancy']=nounInfo("truancy")
nouns['truant']=nounInfo("truant")
nouns['truce']=nounInfo("truce")
nouns['truck']=nounInfo("truck")
nouns['trucking']=nounInfo("trucking")
nouns['truckle']=nounInfo("truckle")
nouns['truculence']=nounInfo("truculence")
nouns['truculency']=nounInfo("truculency")
adjectives['truculent']=adjInfo("truculent")
adverbs['truculently']="truculently"
nouns['trudge']=nounInfo("trudge")
adjectives['true']=adjInfo("true")
adverbs['true']="true"
nouns['true']=nounInfo("true")
nouns['truffle']=nounInfo("truffle")
nouns['truism']=nounInfo("truism")
adverbs['truly']="truly"
nouns['trump']=nounInfo("trump")
adjectives['trumpery']=adjInfo("trumpery")
nouns['trumpet']=nounInfo("trumpet")
nouns['trumpeter']=nounInfo("trumpeter")
nouns['truncheon']=nounInfo("truncheon")
nouns['trunk']=nounInfo("trunk")
nouns['truss']=nounInfo("truss")
nouns['trust']=nounInfo("trust")
nouns['trustee']=nounInfo("trustee")
nouns['trusteeship']=nounInfo("trusteeship")
adjectives['trustful']=adjInfo("trustful")
adverbs['trustfully']="trustfully"
adjectives['trusting']=adjInfo("trusting")
adverbs['trustingly']="trustingly"
nouns['trustworthiness']=nounInfo("trustworthiness")
adjectives['trustworthy']=adjInfo("trustworthy")
adjectives['trusty']=adjInfo("trusty")
nouns['truth']=nounInfo("truth")
adjectives['truthful']=adjInfo("truthful")
adverbs['truthfully']="truthfully"
nouns['truthfulness']=nounInfo("truthfulness")
nouns['truths']=nounInfo("truths")
nouns['try']=nounInfo("try")
adjectives['trying']=adjInfo("trying")
nouns['tryst']=nounInfo("tryst")
nouns['tsetse']=nounInfo("tsetse")
nouns['tub']=nounInfo("tub")
nouns['tuba']=nounInfo("tuba")
adjectives['tubby']=adjInfo("tubby")
nouns['tube']=nounInfo("tube")
adjectives['tubeless']=adjInfo("tubeless")
nouns['tuber']=nounInfo("tuber")
adjectives['tubercular']=adjInfo("tubercular")
nouns['tuberculosis']=nounInfo("tuberculosis")
adjectives['tuberculous']=adjInfo("tuberculous")
nouns['tubful']=nounInfo("tubful")
nouns['tubing']=nounInfo("tubing")
adjectives['tubular']=adjInfo("tubular")
nouns['tuck']=nounInfo("tuck")
nouns['tucker']=nounInfo("tucker")
nouns['tuft']=nounInfo("tuft")
adjectives['tufted']=adjInfo("tufted")
nouns['tug']=nounInfo("tug")
nouns['tuition']=nounInfo("tuition")
nouns['tulip']=nounInfo("tulip")
nouns['tulle']=nounInfo("tulle")
nouns['tumble']=nounInfo("tumble")
nouns['tumbler']=nounInfo("tumbler")
nouns['tumbrel']=nounInfo("tumbrel")
nouns['tumbril']=nounInfo("tumbril")
nouns['tumescence']=nounInfo("tumescence")
adjectives['tumescent']=adjInfo("tumescent")
adjectives['tumid']=adjInfo("tumid")
nouns['tumidity']=nounInfo("tumidity")
nouns['tummy']=nounInfo("tummy")
nouns['tumour']=nounInfo("tumour")
nouns['tumult']=nounInfo("tumult")
adjectives['tumultuous']=adjInfo("tumultuous")
adverbs['tumultuously']="tumultuously"
nouns['tumulus']=nounInfo("tumulus")
nouns['tun']=nounInfo("tun")
nouns['tuna']=nounInfo("tuna")
nouns['tundra']=nounInfo("tundra")
nouns['tune']=nounInfo("tune")
adjectives['tuneful']=adjInfo("tuneful")
adverbs['tunefully']="tunefully"
nouns['tunefulness']=nounInfo("tunefulness")
nouns['tuner']=nounInfo("tuner")
nouns['tungsten']=nounInfo("tungsten")
nouns['tunic']=nounInfo("tunic")
nouns['tunnel']=nounInfo("tunnel")
nouns['tunny']=nounInfo("tunny")
nouns['tup']=nounInfo("tup")
nouns['tuppence']=nounInfo("tuppence")
adjectives['tuppenny']=adjInfo("tuppenny")
nouns['turban']=nounInfo("turban")
adjectives['turbaned']=adjInfo("turbaned")
adjectives['turbid']=adjInfo("turbid")
nouns['turbidity']=nounInfo("turbidity")
nouns['turbidness']=nounInfo("turbidness")
nouns['turbine']=nounInfo("turbine")
nouns['turbojet']=nounInfo("turbojet")
nouns['turboprop']=nounInfo("turboprop")
nouns['turbot']=nounInfo("turbot")
nouns['turbulence']=nounInfo("turbulence")
adjectives['turbulent']=adjInfo("turbulent")
adverbs['turbulently']="turbulently"
nouns['turd']=nounInfo("turd")
nouns['tureen']=nounInfo("tureen")
nouns['turf']=nounInfo("turf")
adjectives['turgid']=adjInfo("turgid")
nouns['turgidity']=nounInfo("turgidity")
adverbs['turgidly']="turgidly"
nouns['turkey']=nounInfo("turkey")
nouns['turmeric']=nounInfo("turmeric")
nouns['turmoil']=nounInfo("turmoil")
nouns['turn']=nounInfo("turn")
nouns['turncoat']=nounInfo("turncoat")
nouns['turncock']=nounInfo("turncock")
nouns['turner']=nounInfo("turner")
nouns['turning']=nounInfo("turning")
nouns['turnip']=nounInfo("turnip")
nouns['turnkey']=nounInfo("turnkey")
nouns['turnover']=nounInfo("turnover")
nouns['turnpike']=nounInfo("turnpike")
nouns['turnspit']=nounInfo("turnspit")
nouns['turnstile']=nounInfo("turnstile")
nouns['turpentine']=nounInfo("turpentine")
nouns['turpitude']=nounInfo("turpitude")
nouns['turps']=nounInfo("turps")
nouns['turquoise']=nounInfo("turquoise")
nouns['turret']=nounInfo("turret")
nouns['turtle']=nounInfo("turtle")
nouns['tusk']=nounInfo("tusk")
nouns['tussle']=nounInfo("tussle")
nouns['tussock']=nounInfo("tussock")
nouns['tut']=nounInfo("tut")
nouns['tutelage']=nounInfo("tutelage")
adjectives['tutelary']=adjInfo("tutelary")
nouns['tutor']=nounInfo("tutor").addAttributes({"g":"x"})
adjectives['tutorial']=adjInfo("tutorial")
nouns['tutorial']=nounInfo("tutorial")
adverbs['tutorially']="tutorially"
nouns['tutu']=nounInfo("tutu")
nouns['tuxedo']=nounInfo("tuxedo")
nouns['twaddle']=nounInfo("twaddle")
nouns['twain']=nounInfo("twain")
nouns['twang']=nounInfo("twang")
nouns['tweak']=nounInfo("tweak")
adjectives['twee']=adjInfo("twee")
nouns['tweed']=nounInfo("tweed")
nouns['tweet']=nounInfo("tweet")
nouns['tweeter']=nounInfo("tweeter")
nouns['tweezers']=nounInfo("tweezers")
adjectives['twelfth']=adjInfo("twelfth")
nouns['twelfth']=nounInfo("twelfth")
adverbs['twelfthly']="twelfthly"
nouns['twelve']=nounInfo("twelve")
nouns['twelvemonth']=nounInfo("twelvemonth")
adjectives['twentieth']=adjInfo("twentieth")
nouns['twentieth']=nounInfo("twentieth")
nouns['twenty']=nounInfo("twenty")
nouns['twerp']=nounInfo("twerp")
nouns['twiddle']=nounInfo("twiddle")
adjectives['twiddly']=adjInfo("twiddly")
nouns['twig']=nounInfo("twig")
adjectives['twiggy']=adjInfo("twiggy")
nouns['twilight']=nounInfo("twilight")
adjectives['twilit']=adjInfo("twilit")
nouns['twill']=nounInfo("twill")
adjectives['twilled']=adjInfo("twilled")
nouns['twin']=nounInfo("twin")
nouns['twine']=nounInfo("twine")
nouns['twinge']=nounInfo("twinge")
nouns['twinkle']=nounInfo("twinkle")
nouns['twinkling']=nounInfo("twinkling")
adjectives['twinned']=adjInfo("twinned")
nouns['twirl']=nounInfo("twirl")
nouns['twist']=nounInfo("twist")
nouns['twister']=nounInfo("twister")
adjectives['twisty']=adjInfo("twisty")
nouns['twit']=nounInfo("twit")
nouns['twitch']=nounInfo("twitch")
nouns['twitter']=nounInfo("twitter")
nouns['two']=nounInfo("two")
adjectives['twofold']=adjInfo("twofold")
adverbs['twofold']="twofold"
nouns['twopence']=nounInfo("twopence")
adjectives['twopenny']=adjInfo("twopenny")
nouns['tycoon']=nounInfo("tycoon")
nouns['tyke']=nounInfo("tyke")
nouns['tympanum']=nounInfo("tympanum")
nouns['type']=nounInfo("type")
nouns['typeface']=nounInfo("typeface")
nouns['typescript']=nounInfo("typescript")
nouns['typesetter']=nounInfo("typesetter")
nouns['typewriter']=nounInfo("typewriter")
adjectives['typewritten']=adjInfo("typewritten")
nouns['typhoid']=nounInfo("typhoid")
nouns['typhoon']=nounInfo("typhoon")
nouns['typhus']=nounInfo("typhus")
adjectives['typical']=adjInfo("typical")
adverbs['typically']="typically"
nouns['typist']=nounInfo("typist").addAttributes({"g":"x"})
nouns['typographer']=nounInfo("typographer")
adjectives['typographic']=adjInfo("typographic")
adverbs['typographically']="typographically"
nouns['typography']=nounInfo("typography")
adverbs['typologically']="typologically"
adjectives['tyrannical']=adjInfo("tyrannical")
adjectives['tyrannous']=adjInfo("tyrannous")
nouns['tyranny']=nounInfo("tyranny")
nouns['tyrant']=nounInfo("tyrant")
nouns['tyre']=nounInfo("tyre")
nouns['tyro']=nounInfo("tyro")
nouns['tzar']=nounInfo("tzar")
nouns['tzarina']=nounInfo("tzarina")
adjectives['ubiquitous']=adjInfo("ubiquitous")
nouns['ubiquity']=nounInfo("ubiquity")
nouns['udder']=nounInfo("udder")
nouns['ugh']=nounInfo("ugh")
nouns['ugliness']=nounInfo("ugliness")
adjectives['ugly']=adjInfo("ugly")
nouns['ukase']=nounInfo("ukase")
nouns['ukulele']=nounInfo("ukulele")
nouns['ulcer']=nounInfo("ulcer")
nouns['ulceration']=nounInfo("ulceration")
adjectives['ulcerous']=adjInfo("ulcerous")
nouns['ulna']=nounInfo("ulna")
nouns['ulster']=nounInfo("ulster")
adjectives['ulterior']=adjInfo("ulterior")
adjectives['ultimate']=adjInfo("ultimate")
adverbs['ultimately']="ultimately"
nouns['ultimatum']=nounInfo("ultimatum")
adjectives['ultimo']=adjInfo("ultimo")
adjectives['ultramarine']=adjInfo("ultramarine")
nouns['ultramarine']=nounInfo("ultramarine")
adjectives['ultramontane']=adjInfo("ultramontane")
adjectives['ultrasonic']=adjInfo("ultrasonic")
adjectives['ultraviolet']=adjInfo("ultraviolet")
nouns['ululation']=nounInfo("ululation")
adjectives['umber']=adjInfo("umber")
nouns['umber']=nounInfo("umber")
adjectives['umbilical']=adjInfo("umbilical")
nouns['umbrage']=nounInfo("umbrage")
nouns['umbrella']=nounInfo("umbrella")
nouns['umlaut']=nounInfo("umlaut")
nouns['umpire']=nounInfo("umpire")
adjectives['umpteen']=adjInfo("umpteen")
adjectives['umpteenth']=adjInfo("umpteenth")
adjectives['unabashed']=adjInfo("unabashed")
adjectives['unabated']=adjInfo("unabated")
adjectives['unable']=adjInfo("unable")
adjectives['unacceptable']=adjInfo("unacceptable")
adjectives['unaccompanied']=adjInfo("unaccompanied")
adjectives['unaccountable']=adjInfo("unaccountable")
adverbs['unaccountably']="unaccountably"
adjectives['unaccustomed']=adjInfo("unaccustomed")
adjectives['unadvised']=adjInfo("unadvised")
adverbs['unadvisedly']="unadvisedly"
adjectives['unaffected']=adjInfo("unaffected")
adjectives['unalienable']=adjInfo("unalienable")
adjectives['unalloyed']=adjInfo("unalloyed")
adverbs['unalterably']="unalterably"
adverbs['unambiguously']="unambiguously"
nouns['unanimity']=nounInfo("unanimity")
adjectives['unanimous']=adjInfo("unanimous")
adverbs['unanimously']="unanimously"
adjectives['unannounced']=adjInfo("unannounced")
adjectives['unanswerable']=adjInfo("unanswerable")
adjectives['unanswered']=adjInfo("unanswered")
adjectives['unapproachable']=adjInfo("unapproachable")
adjectives['unarmed']=adjInfo("unarmed")
adverbs['unashamedly']="unashamedly"
adjectives['unasked']=adjInfo("unasked")
adjectives['unassuming']=adjInfo("unassuming")
adverbs['unassumingly']="unassumingly"
adjectives['unattached']=adjInfo("unattached")
adjectives['unattended']=adjInfo("unattended")
adjectives['unavailable']=adjInfo("unavailable")
adjectives['unavailing']=adjInfo("unavailing")
adjectives['unavoidable']=adjInfo("unavoidable")
adverbs['unavoidably']="unavoidably"
adjectives['unaware']=adjInfo("unaware")
adverbs['unawares']="unawares"
adjectives['unbacked']=adjInfo("unbacked")
adjectives['unbalanced']=adjInfo("unbalanced")
adjectives['unbearable']=adjInfo("unbearable")
adverbs['unbearably']="unbearably"
adjectives['unbeaten']=adjInfo("unbeaten")
adjectives['unbecoming']=adjInfo("unbecoming")
adverbs['unbecomingly']="unbecomingly"
adjectives['unbeknown']=adjInfo("unbeknown")
adverbs['unbeknown']="unbeknown"
adjectives['unbeknownst']=adjInfo("unbeknownst")
adverbs['unbeknownst']="unbeknownst"
nouns['unbelief']=nounInfo("unbelief")
adjectives['unbelievable']=adjInfo("unbelievable")
adverbs['unbelievably']="unbelievably"
nouns['unbeliever']=nounInfo("unbeliever")
adjectives['unbelieving']=adjInfo("unbelieving")
adverbs['unbelievingly']="unbelievingly"
adjectives['unbending']=adjInfo("unbending")
adjectives['unbiased']=adjInfo("unbiased")
adjectives['unbiassed']=adjInfo("unbiassed")
adjectives['unbidden']=adjInfo("unbidden")
adjectives['unblushing']=adjInfo("unblushing")
adverbs['unblushingly']="unblushingly"
adjectives['unborn']=adjInfo("unborn")
adjectives['unbounded']=adjInfo("unbounded")
adjectives['unbowed']=adjInfo("unbowed")
adjectives['unbridled']=adjInfo("unbridled")
adjectives['unbroken']=adjInfo("unbroken")
adjectives['unbuttoned']=adjInfo("unbuttoned")
adverbs['uncannily']="uncannily"
adjectives['uncanny']=adjInfo("uncanny")
adjectives['unceasing']=adjInfo("unceasing")
adverbs['unceasingly']="unceasingly"
adjectives['unceremonious']=adjInfo("unceremonious")
adverbs['unceremoniously']="unceremoniously"
nouns['unceremoniousness']=nounInfo("unceremoniousness")
adjectives['uncertain']=adjInfo("uncertain")
adverbs['uncertainly']="uncertainly"
nouns['uncertainty']=nounInfo("uncertainty")
adverbs['uncharacteristically']="uncharacteristically"
adjectives['uncharitable']=adjInfo("uncharitable")
adjectives['uncharted']=adjInfo("uncharted")
adjectives['unchecked']=adjInfo("unchecked")
adverbs['unchivalrously']="unchivalrously"
adjectives['unchristian']=adjInfo("unchristian")
adjectives['uncivil']=adjInfo("uncivil")
adjectives['unclaimed']=adjInfo("unclaimed")
nouns['uncle']=nounInfo("uncle").addAttributes({"g":"m"})
adjectives['unclean']=adjInfo("unclean")
adverbs['unclear']="unclear"
adjectives['unclouded']=adjInfo("unclouded")
adjectives['unco']=adjInfo("unco")
adverbs['unco']="unco"
adjectives['uncoloured']=adjInfo("uncoloured")
adjectives['uncomfortable']=adjInfo("uncomfortable")
adverbs['uncomfortably']="uncomfortably"
adjectives['uncommitted']=adjInfo("uncommitted")
adjectives['uncommon']=adjInfo("uncommon")
adverbs['uncommonly']="uncommonly"
adverbs['uncomplainingly']="uncomplainingly"
adjectives['uncompromising']=adjInfo("uncompromising")
adverbs['uncompromisingly']="uncompromisingly"
nouns['unconcern']=nounInfo("unconcern")
adjectives['unconcerned']=adjInfo("unconcerned")
adverbs['unconcernedly']="unconcernedly"
adjectives['unconditional']=adjInfo("unconditional")
adverbs['unconditionally']="unconditionally"
adjectives['unconditioned']=adjInfo("unconditioned")
adjectives['unconscionable']=adjInfo("unconscionable")
adjectives['unconscious']=adjInfo("unconscious")
nouns['unconscious']=nounInfo("unconscious")
adverbs['unconsciously']="unconsciously"
nouns['unconsciousness']=nounInfo("unconsciousness")
adjectives['unconsidered']=adjInfo("unconsidered")
adjectives['unconventional']=adjInfo("unconventional")
adjectives['unconvincing']=adjInfo("unconvincing")
adjectives['uncouth']=adjInfo("uncouth")
adverbs['uncouthly']="uncouthly"
nouns['uncouthness']=nounInfo("uncouthness")
adjectives['uncrossed']=adjInfo("uncrossed")
adjectives['uncrowned']=adjInfo("uncrowned")
nouns['unction']=nounInfo("unction")
adjectives['unctuous']=adjInfo("unctuous")
adverbs['unctuously']="unctuously"
adjectives['uncut']=adjInfo("uncut")
adjectives['undated']=adjInfo("undated")
adjectives['undaunted']=adjInfo("undaunted")
adjectives['undecided']=adjInfo("undecided")
adjectives['undeclared']=adjInfo("undeclared")
adjectives['undefended']=adjInfo("undefended")
adjectives['undemocratic']=adjInfo("undemocratic")
adjectives['undemonstrative']=adjInfo("undemonstrative")
adjectives['undeniable']=adjInfo("undeniable")
adverbs['undeniably']="undeniably"
adjectives['undenominational']=adjInfo("undenominational")
adverbs['under']="under"
prepositions['under']=P("under")
adjectives['underarm']=adjInfo("underarm")
adverbs['underarm']="underarm"
nouns['underbelly']=nounInfo("underbelly")
adjectives['underbred']=adjInfo("underbred")
nouns['underbrush']=nounInfo("underbrush")
nouns['undercarriage']=nounInfo("undercarriage")
nouns['undercharge']=nounInfo("undercharge")
nouns['underclothes']=nounInfo("underclothes")
nouns['underclothing']=nounInfo("underclothing")
adjectives['undercover']=adjInfo("undercover")
nouns['undercurrent']=nounInfo("undercurrent")
nouns['undercut']=nounInfo("undercut")
adjectives['underdeveloped']=adjInfo("underdeveloped")
nouns['underdog']=nounInfo("underdog")
adjectives['underdone']=adjInfo("underdone")
nouns['underestimate']=nounInfo("underestimate")
nouns['underexposure']=nounInfo("underexposure")
adjectives['underfed']=adjInfo("underfed")
adjectives['underfloor']=adjInfo("underfloor")
adverbs['underfoot']="underfoot"
nouns['undergarment']=nounInfo("undergarment")
nouns['undergraduate']=nounInfo("undergraduate")
adjectives['underground']=adjInfo("underground")
adverbs['underground']="underground"
nouns['underground']=nounInfo("underground")
nouns['undergrowth']=nounInfo("undergrowth")
adjectives['underhand']=adjInfo("underhand")
adverbs['underhand']="underhand"
adjectives['underhanded']=adjInfo("underhanded")
adjectives['underhung']=adjInfo("underhung")
nouns['underlay']=nounInfo("underlay")
nouns['underline']=nounInfo("underline")
nouns['underling']=nounInfo("underling")
adjectives['undermanned']=adjInfo("undermanned")
adjectives['undermentioned']=adjInfo("undermentioned")
adverbs['underneath']="underneath"
prepositions['underneath']=P("underneath")
adjectives['undernourished']=adjInfo("undernourished")
nouns['undernourishment']=nounInfo("undernourishment")
nouns['underpants']=nounInfo("underpants")
nouns['underpass']=nounInfo("underpass")
nouns['underpayment']=nounInfo("underpayment")
adjectives['underpopulated']=adjInfo("underpopulated")
adjectives['underprivileged']=adjInfo("underprivileged")
nouns['underproduction']=nounInfo("underproduction")
adjectives['undersexed']=adjInfo("undersexed")
nouns['underside']=nounInfo("underside")
adjectives['undersized']=adjInfo("undersized")
adjectives['underslung']=adjInfo("underslung")
adjectives['understaffed']=adjInfo("understaffed")
adjectives['understandable']=adjInfo("understandable")
adverbs['understandably']="understandably"
adjectives['understanding']=adjInfo("understanding")
nouns['understanding']=nounInfo("understanding")
nouns['understatement']=nounInfo("understatement")
nouns['understudy']=nounInfo("understudy")
nouns['undertaker']=nounInfo("undertaker")
nouns['undertaking']=nounInfo("undertaking")
nouns['undertone']=nounInfo("undertone")
nouns['undertow']=nounInfo("undertow")
nouns['undervaluation']=nounInfo("undervaluation")
adjectives['underwater']=adjInfo("underwater")
nouns['underwear']=nounInfo("underwear")
nouns['underworld']=nounInfo("underworld")
nouns['underwriter']=nounInfo("underwriter")
adjectives['undeserved']=adjInfo("undeserved")
adjectives['undesigned']=adjInfo("undesigned")
adjectives['undesirable']=adjInfo("undesirable")
nouns['undesirable']=nounInfo("undesirable")
adjectives['undeterred']=adjInfo("undeterred")
adjectives['undeveloped']=adjInfo("undeveloped")
nouns['undies']=nounInfo("undies")
adjectives['undignified']=adjInfo("undignified")
adjectives['undischarged']=adjInfo("undischarged")
nouns['undoing']=nounInfo("undoing")
adjectives['undomesticated']=adjInfo("undomesticated")
adjectives['undone']=adjInfo("undone")
adjectives['undoubted']=adjInfo("undoubted")
adverbs['undoubtedly']="undoubtedly"
adjectives['undreamed']=adjInfo("undreamed")
adjectives['undreamt']=adjInfo("undreamt")
nouns['undress']=nounInfo("undress")
adjectives['undue']=adjInfo("undue")
nouns['undulation']=nounInfo("undulation")
adverbs['unduly']="unduly"
adjectives['undying']=adjInfo("undying")
adjectives['unearned']=adjInfo("unearned")
adjectives['unearthly']=adjInfo("unearthly")
nouns['unease']=nounInfo("unease")
adverbs['uneasily']="uneasily"
nouns['uneasiness']=nounInfo("uneasiness")
adjectives['uneasy']=adjInfo("uneasy")
adjectives['uneaten']=adjInfo("uneaten")
adjectives['uneducated']=adjInfo("uneducated")
adjectives['unemployable']=adjInfo("unemployable")
adjectives['unemployed']=adjInfo("unemployed")
nouns['unemployment']=nounInfo("unemployment")
adjectives['unending']=adjInfo("unending")
adverbs['unendingly']="unendingly"
adjectives['unendurable']=adjInfo("unendurable")
adjectives['unenlightened']=adjInfo("unenlightened")
adjectives['unequal']=adjInfo("unequal")
adjectives['unequalled']=adjInfo("unequalled")
adverbs['unequally']="unequally"
adjectives['unequivocal']=adjInfo("unequivocal")
adverbs['unequivocally']="unequivocally"
adjectives['unerring']=adjInfo("unerring")
adverbs['unerringly']="unerringly"
adjectives['unexampled']=adjInfo("unexampled")
adjectives['unexceptionable']=adjInfo("unexceptionable")
adjectives['unexpected']=adjInfo("unexpected")
adverbs['unexpectedly']="unexpectedly"
adjectives['unfailing']=adjInfo("unfailing")
adverbs['unfailingly']="unfailingly"
adjectives['unfair']=adjInfo("unfair")
adverbs['unfairly']="unfairly"
nouns['unfairness']=nounInfo("unfairness")
adjectives['unfaithful']=adjInfo("unfaithful")
adverbs['unfaithfully']="unfaithfully"
nouns['unfaithfulness']=nounInfo("unfaithfulness")
adjectives['unfaltering']=adjInfo("unfaltering")
adverbs['unfalteringly']="unfalteringly"
adjectives['unfamiliar']=adjInfo("unfamiliar")
adjectives['unfathomable']=adjInfo("unfathomable")
adjectives['unfathomed']=adjInfo("unfathomed")
adverbs['unfavourably']="unfavourably"
adjectives['unfeeling']=adjInfo("unfeeling")
adverbs['unfeelingly']="unfeelingly"
adjectives['unfeigned']=adjInfo("unfeigned")
adverbs['unfeignedly']="unfeignedly"
adjectives['unfilled']=adjInfo("unfilled")
adjectives['unfit']=adjInfo("unfit")
adjectives['unflagging']=adjInfo("unflagging")
adjectives['unflappable']=adjInfo("unflappable")
adjectives['unfledged']=adjInfo("unfledged")
adjectives['unflinching']=adjInfo("unflinching")
adverbs['unflinchingly']="unflinchingly"
adjectives['unforgettable']=adjInfo("unforgettable")
adverbs['unforgettably']="unforgettably"
adjectives['unfortunate']=adjInfo("unfortunate")
adverbs['unfortunately']="unfortunately"
adjectives['unfounded']=adjInfo("unfounded")
adjectives['unfrequented']=adjInfo("unfrequented")
adjectives['unfriendly']=adjInfo("unfriendly")
adjectives['unfruitful']=adjInfo("unfruitful")
adjectives['unfulfilled']=adjInfo("unfulfilled")
adjectives['unfurnished']=adjInfo("unfurnished")
adjectives['ungainly']=adjInfo("ungainly")
adjectives['ungenerous']=adjInfo("ungenerous")
adjectives['ungodly']=adjInfo("ungodly")
adjectives['ungovernable']=adjInfo("ungovernable")
adverbs['ungraciously']="ungraciously"
adjectives['ungrateful']=adjInfo("ungrateful")
adjectives['unguarded']=adjInfo("unguarded")
nouns['unguent']=nounInfo("unguent")
adjectives['unhallowed']=adjInfo("unhallowed")
adverbs['unhappily']="unhappily"
adjectives['unhappy']=adjInfo("unhappy")
adjectives['unhealthy']=adjInfo("unhealthy")
adjectives['unheard']=adjInfo("unheard")
adverbs['unhelpfully']="unhelpfully"
adverbs['unhesitatingly']="unhesitatingly"
adjectives['unholy']=adjInfo("unholy")
adverbs['unhurriedly']="unhurriedly"
nouns['unicorn']=nounInfo("unicorn")
adjectives['unidentified']=adjInfo("unidentified")
nouns['unification']=nounInfo("unification")
adjectives['uniform']=adjInfo("uniform")
nouns['uniform']=nounInfo("uniform")
adjectives['uniformed']=adjInfo("uniformed")
nouns['uniformity']=nounInfo("uniformity")
adverbs['uniformly']="uniformly"
adjectives['unilateral']=adjInfo("unilateral")
adverbs['unilaterally']="unilaterally"
adjectives['unilingual']=adjInfo("unilingual")
nouns['unilingual']=nounInfo("unilingual")
adjectives['unimpeachable']=adjInfo("unimpeachable")
adjectives['unincorporated']=adjInfo("unincorporated")
adjectives['uninformed']=adjInfo("uninformed")
adjectives['uninhibited']=adjInfo("uninhibited")
adjectives['uninspired']=adjInfo("uninspired")
adverbs['unintentionally']="unintentionally"
adjectives['uninterested']=adjInfo("uninterested")
adverbs['uninterruptedly']="uninterruptedly"
nouns['union']=nounInfo("union")
nouns['unionist']=nounInfo("unionist")
adjectives['unique']=adjInfo("unique")
adverbs['uniquely']="uniquely"
nouns['uniqueness']=nounInfo("uniqueness")
adjectives['unisex']=adjInfo("unisex")
nouns['unison']=nounInfo("unison")
nouns['unit']=nounInfo("unit")
adjectives['unitary']=adjInfo("unitary")
adjectives['united']=adjInfo("united")
adverbs['unitedly']="unitedly"
nouns['unity']=nounInfo("unity")
adjectives['universal']=adjInfo("universal")
nouns['universality']=nounInfo("universality")
adverbs['universally']="universally"
nouns['universe']=nounInfo("universe")
nouns['university']=nounInfo("university")
adjectives['unjust']=adjInfo("unjust")
adverbs['unjustly']="unjustly"
adjectives['unkempt']=adjInfo("unkempt")
adjectives['unkind']=adjInfo("unkind")
adverbs['unkindly']="unkindly"
adjectives['unknowing']=adjInfo("unknowing")
adverbs['unknowingly']="unknowingly"
adjectives['unknown']=adjInfo("unknown")
adverbs['unlawfully']="unlawfully"
adjectives['unleavened']=adjInfo("unleavened")
adjectives['unlettered']=adjInfo("unlettered")
adjectives['unlicensed']=adjInfo("unlicensed")
adjectives['unlike']=adjInfo("unlike")
prepositions['unlike']=P("unlike")
adjectives['unlikely']=adjInfo("unlikely")
adjectives['unlimited']=adjInfo("unlimited")
adjectives['unmanly']=adjInfo("unmanly")
adjectives['unmanned']=adjInfo("unmanned")
adjectives['unmannered']=adjInfo("unmannered")
adjectives['unmannerly']=adjInfo("unmannerly")
adjectives['unmatchable']=adjInfo("unmatchable")
adjectives['unmatched']=adjInfo("unmatched")
adjectives['unmentionable']=adjInfo("unmentionable")
adjectives['unmindful']=adjInfo("unmindful")
adjectives['unmistakable']=adjInfo("unmistakable")
adverbs['unmistakably']="unmistakably"
adjectives['unmitigated']=adjInfo("unmitigated")
adjectives['unmoved']=adjInfo("unmoved")
adjectives['unnatural']=adjInfo("unnatural")
adverbs['unnaturally']="unnaturally"
adverbs['unnecessarily']="unnecessarily"
adjectives['unnecessary']=adjInfo("unnecessary")
adjectives['unnoticed']=adjInfo("unnoticed")
adjectives['unnumbered']=adjInfo("unnumbered")
adjectives['unobstructed']=adjInfo("unobstructed")
adjectives['unobtrusive']=adjInfo("unobtrusive")
adverbs['unobtrusively']="unobtrusively"
adjectives['unofficial']=adjInfo("unofficial")
adverbs['unofficially']="unofficially"
adjectives['unorthodox']=adjInfo("unorthodox")
adjectives['unparalleled']=adjInfo("unparalleled")
adjectives['unparliamentary']=adjInfo("unparliamentary")
adjectives['unplaced']=adjInfo("unplaced")
adjectives['unplayable']=adjInfo("unplayable")
adjectives['unpleasant']=adjInfo("unpleasant")
nouns['unpleasantness']=nounInfo("unpleasantness")
adjectives['unpractised']=adjInfo("unpractised")
adjectives['unprecedented']=adjInfo("unprecedented")
adverbs['unprecedentedly']="unprecedentedly"
adjectives['unprejudiced']=adjInfo("unprejudiced")
adjectives['unpretentious']=adjInfo("unpretentious")
adjectives['unprincipled']=adjInfo("unprincipled")
adjectives['unprintable']=adjInfo("unprintable")
adjectives['unprocessed']=adjInfo("unprocessed")
adjectives['unprofessional']=adjInfo("unprofessional")
adjectives['unprompted']=adjInfo("unprompted")
adjectives['unprovided']=adjInfo("unprovided")
adjectives['unprovoked']=adjInfo("unprovoked")
adjectives['unputdownable']=adjInfo("unputdownable")
adjectives['unqualified']=adjInfo("unqualified")
adjectives['unquestionable']=adjInfo("unquestionable")
adverbs['unquestionably']="unquestionably"
adjectives['unquestioned']=adjInfo("unquestioned")
adjectives['unquestioning']=adjInfo("unquestioning")
adjectives['unquiet']=adjInfo("unquiet")
adverbs['unquote']="unquote"
adjectives['unreal']=adjInfo("unreal")
adjectives['unrealistic']=adjInfo("unrealistic")
adjectives['unreasonable']=adjInfo("unreasonable")
adverbs['unreasonably']="unreasonably"
adjectives['unreasoning']=adjInfo("unreasoning")
adjectives['unrelenting']=adjInfo("unrelenting")
adjectives['unreliable']=adjInfo("unreliable")
adjectives['unrelieved']=adjInfo("unrelieved")
adjectives['unremitting']=adjInfo("unremitting")
adjectives['unrequited']=adjInfo("unrequited")
adverbs['unreservedly']="unreservedly"
nouns['unrest']=nounInfo("unrest")
adjectives['unrestrained']=adjInfo("unrestrained")
adjectives['unrestricted']=adjInfo("unrestricted")
adjectives['unrivalled']=adjInfo("unrivalled")
adjectives['unruffled']=adjInfo("unruffled")
adjectives['unruly']=adjInfo("unruly")
adjectives['unsaid']=adjInfo("unsaid")
adjectives['unsatisfactory']=adjInfo("unsatisfactory")
adjectives['unsavoury']=adjInfo("unsavoury")
adjectives['unscathed']=adjInfo("unscathed")
adjectives['unscripted']=adjInfo("unscripted")
adjectives['unscrupulous']=adjInfo("unscrupulous")
adverbs['unscrupulously']="unscrupulously"
adjectives['unseasoned']=adjInfo("unseasoned")
adjectives['unseemly']=adjInfo("unseemly")
adjectives['unseen']=adjInfo("unseen")
nouns['unseen']=nounInfo("unseen")
adverbs['unselfishly']="unselfishly"
adjectives['unsexed']=adjInfo("unsexed")
nouns['unsightliness']=nounInfo("unsightliness")
adjectives['unsightly']=adjInfo("unsightly")
adjectives['unskilled']=adjInfo("unskilled")
adjectives['unsophisticated']=adjInfo("unsophisticated")
adjectives['unsound']=adjInfo("unsound")
adjectives['unsparing']=adjInfo("unsparing")
adjectives['unspeakable']=adjInfo("unspeakable")
adverbs['unspeakably']="unspeakably"
adjectives['unspotted']=adjInfo("unspotted")
adverbs['unsteadily']="unsteadily"
adjectives['unstrung']=adjInfo("unstrung")
adjectives['unstuck']=adjInfo("unstuck")
adjectives['unstudied']=adjInfo("unstudied")
adjectives['unsuccessful']=adjInfo("unsuccessful")
adverbs['unsuccessfully']="unsuccessfully"
adverbs['unsuitably']="unsuitably"
adjectives['unsung']=adjInfo("unsung")
adverbs['unsuspectingly']="unsuspectingly"
adjectives['unswerving']=adjInfo("unswerving")
adverbs['unswervingly']="unswervingly"
adjectives['unsyllabic']=adjInfo("unsyllabic")
adjectives['unthinkable']=adjInfo("unthinkable")
adjectives['unthinking']=adjInfo("unthinking")
adverbs['unthinkingly']="unthinkingly"
adverbs['untidily']="untidily"
adjectives['untidy']=adjInfo("untidy")
prepositions['until']=P("until")
adjectives['untimely']=adjInfo("untimely")
adjectives['untiring']=adjInfo("untiring")
prepositions['unto']=P("unto")
adjectives['untold']=adjInfo("untold")
adjectives['untouchable']=adjInfo("untouchable")
nouns['untouchable']=nounInfo("untouchable")
adjectives['untouched']=adjInfo("untouched")
adjectives['untoward']=adjInfo("untoward")
adverbs['untruly']="untruly"
nouns['untruth']=nounInfo("untruth")
adverbs['untruthful']="untruthful"
adverbs['untruthfully']="untruthfully"
adjectives['untutored']=adjInfo("untutored")
adjectives['unused']=adjInfo("unused")
adjectives['unusual']=adjInfo("unusual")
adverbs['unusually']="unusually"
adjectives['unutterable']=adjInfo("unutterable")
adjectives['unvarnished']=adjInfo("unvarnished")
adjectives['unvoiced']=adjInfo("unvoiced")
adverbs['unwarrantably']="unwarrantably"
adjectives['unwarranted']=adjInfo("unwarranted")
adjectives['unwell']=adjInfo("unwell")
nouns['unwieldiness']=nounInfo("unwieldiness")
adjectives['unwieldy']=adjInfo("unwieldy")
adjectives['unwilling']=adjInfo("unwilling")
adverbs['unwillingly']="unwillingly"
adverbs['unwisely']="unwisely"
adjectives['unwitting']=adjInfo("unwitting")
adverbs['unwittingly']="unwittingly"
adjectives['unwritten']=adjInfo("unwritten")
adverbs['up']="up"
prepositions['up']=P("up")
nouns['upbringing']=nounInfo("upbringing")
adjectives['upcountry']=adjInfo("upcountry")
adverbs['upcountry']="upcountry"
nouns['upgrade']=nounInfo("upgrade")
nouns['upheaval']=nounInfo("upheaval")
adjectives['uphill']=adjInfo("uphill")
adverbs['uphill']="uphill"
nouns['upholsterer']=nounInfo("upholsterer")
nouns['upholstery']=nounInfo("upholstery")
nouns['upkeep']=nounInfo("upkeep")
nouns['upland']=nounInfo("upland")
nouns['uplift']=nounInfo("uplift")
adjectives['upmost']=adjInfo("upmost")
prepositions['upon']=P("upon")
adjectives['upper']=adjInfo("upper")
nouns['upper']=nounInfo("upper")
adjectives['uppermost']=adjInfo("uppermost")
adverbs['uppermost']="uppermost"
adjectives['uppish']=adjInfo("uppish")
adverbs['uppishly']="uppishly"
nouns['uppishness']=nounInfo("uppishness")
adjectives['uppity']=adjInfo("uppity")
adjectives['upright']=adjInfo("upright")
nouns['upright']=nounInfo("upright")
adverbs['uprightly']="uprightly"
nouns['uprightness']=nounInfo("uprightness")
nouns['uprising']=nounInfo("uprising")
nouns['uproar']=nounInfo("uproar")
adjectives['uproarious']=adjInfo("uproarious")
adverbs['uproariously']="uproariously"
nouns['upset']=nounInfo("upset")
nouns['upshot']=nounInfo("upshot")
adjectives['upstage']=adjInfo("upstage")
adverbs['upstage']="upstage"
adjectives['upstairs']=adjInfo("upstairs")
adverbs['upstairs']="upstairs"
adjectives['upstanding']=adjInfo("upstanding")
adjectives['upstart']=adjInfo("upstart")
nouns['upstart']=nounInfo("upstart")
adverbs['upstream']="upstream"
nouns['upsurge']=nounInfo("upsurge")
nouns['uptake']=nounInfo("uptake")
adjectives['uptight']=adjInfo("uptight")
adjectives['uptown']=adjInfo("uptown")
adverbs['uptown']="uptown"
nouns['upturn']=nounInfo("upturn")
adjectives['upward']=adjInfo("upward")
adverbs['upward']="upward"
adverbs['upwards']="upwards"
nouns['uranium']=nounInfo("uranium")
adjectives['urban']=adjInfo("urban")
adjectives['urbane']=adjInfo("urbane")
adverbs['urbanely']="urbanely"
nouns['urbanity']=nounInfo("urbanity")
nouns['urbanization']=nounInfo("urbanization")
nouns['urchin']=nounInfo("urchin")
nouns['urge']=nounInfo("urge")
nouns['urgency']=nounInfo("urgency")
adjectives['urgent']=adjInfo("urgent")
adverbs['urgently']="urgently"
adjectives['uric']=adjInfo("uric")
nouns['urinal']=nounInfo("urinal")
adjectives['urinary']=adjInfo("urinary")
nouns['urine']=nounInfo("urine")
nouns['url']=nounInfo("url")
nouns['urn']=nounInfo("urn")
adjectives['usable']=adjInfo("usable")
nouns['usage']=nounInfo("usage")
nouns['use']=nounInfo("use")
adjectives['used']=adjInfo("used")
adjectives['useful']=adjInfo("useful")
adverbs['usefully']="usefully"
nouns['usefulness']=nounInfo("usefulness")
adjectives['useless']=adjInfo("useless")
adverbs['uselessly']="uselessly"
nouns['uselessness']=nounInfo("uselessness")
nouns['user']=nounInfo("user")
nouns['usher']=nounInfo("usher").addAttributes({"g":"m"})
nouns['usherette']=nounInfo("usherette").addAttributes({"g":"f"})
adjectives['usual']=adjInfo("usual")
adverbs['usually']="usually"
nouns['usurer']=nounInfo("usurer")
adjectives['usurious']=adjInfo("usurious")
nouns['usurpation']=nounInfo("usurpation")
nouns['usurper']=nounInfo("usurper")
nouns['usury']=nounInfo("usury")
nouns['utensil']=nounInfo("utensil")
adjectives['uterine']=adjInfo("uterine")
nouns['uterus']=nounInfo("uterus")
adjectives['utilitarian']=adjInfo("utilitarian")
nouns['utilitarian']=nounInfo("utilitarian")
nouns['utilitarianism']=nounInfo("utilitarianism")
nouns['utility']=nounInfo("utility")
adjectives['utilizable']=adjInfo("utilizable")
nouns['utilization']=nounInfo("utilization")
adjectives['utmost']=adjInfo("utmost")
nouns['utmost']=nounInfo("utmost")
adjectives['utter']=adjInfo("utter")
nouns['utterance']=nounInfo("utterance")
adverbs['utterly']="utterly"
adjectives['uttermost']=adjInfo("uttermost")
nouns['uttermost']=nounInfo("uttermost")
nouns['uvula']=nounInfo("uvula")
adjectives['uvular']=adjInfo("uvular")
adjectives['uxorious']=adjInfo("uxorious")
adverbs['uxoriously']="uxoriously"
nouns['uxoriousness']=nounInfo("uxoriousness")
nouns['vac']=nounInfo("vac")
nouns['vacancy']=nounInfo("vacancy")
adjectives['vacant']=adjInfo("vacant")
adverbs['vacantly']="vacantly"
nouns['vacation']=nounInfo("vacation")
nouns['vacationist']=nounInfo("vacationist")
nouns['vaccination']=nounInfo("vaccination")
nouns['vaccine']=nounInfo("vaccine")
nouns['vacillation']=nounInfo("vacillation")
nouns['vacuity']=nounInfo("vacuity")
adjectives['vacuous']=adjInfo("vacuous")
adverbs['vacuously']="vacuously"
nouns['vacuum']=nounInfo("vacuum")
adjectives['vagabond']=adjInfo("vagabond")
nouns['vagabond']=nounInfo("vagabond")
nouns['vagary']=nounInfo("vagary")
nouns['vagina']=nounInfo("vagina")
adjectives['vaginal']=adjInfo("vaginal")
nouns['vagrancy']=nounInfo("vagrancy")
adjectives['vagrant']=adjInfo("vagrant")
nouns['vagrant']=nounInfo("vagrant")
adjectives['vague']=adjInfo("vague")
adverbs['vaguely']="vaguely"
nouns['vagueness']=nounInfo("vagueness")
adjectives['vain']=adjInfo("vain")
adjectives['vainglorious']=adjInfo("vainglorious")
nouns['vainglory']=nounInfo("vainglory")
adverbs['vainly']="vainly"
nouns['valance']=nounInfo("valance")
nouns['vale']=nounInfo("vale")
nouns['valediction']=nounInfo("valediction")
adjectives['valedictory']=adjInfo("valedictory")
nouns['valence']=nounInfo("valence")
nouns['valency']=nounInfo("valency")
nouns['valentine']=nounInfo("valentine")
nouns['valerian']=nounInfo("valerian")
nouns['valet']=nounInfo("valet")
adjectives['valetudinarian']=adjInfo("valetudinarian")
nouns['valetudinarian']=nounInfo("valetudinarian")
adjectives['valiant']=adjInfo("valiant")
adverbs['valiantly']="valiantly"
adjectives['valid']=adjInfo("valid")
nouns['validity']=nounInfo("validity")
adverbs['validly']="validly"
nouns['valise']=nounInfo("valise")
nouns['valley']=nounInfo("valley")
adjectives['valorous']=adjInfo("valorous")
nouns['valour']=nounInfo("valour")
adjectives['valuable']=adjInfo("valuable")
nouns['valuable']=nounInfo("valuable")
nouns['valuation']=nounInfo("valuation")
nouns['value']=nounInfo("value")
adjectives['valueless']=adjInfo("valueless")
nouns['valuer']=nounInfo("valuer")
nouns['valve']=nounInfo("valve")
adjectives['valvular']=adjInfo("valvular")
nouns['vamp']=nounInfo("vamp")
nouns['vampire']=nounInfo("vampire")
nouns['van']=nounInfo("van")
nouns['vandal']=nounInfo("vandal")
nouns['vandalism']=nounInfo("vandalism")
nouns['vane']=nounInfo("vane")
nouns['vanguard']=nounInfo("vanguard")
nouns['vanilla']=nounInfo("vanilla")
nouns['vanity']=nounInfo("vanity")
nouns['vantage']=nounInfo("vantage")
adjectives['vapid']=adjInfo("vapid")
nouns['vapidity']=nounInfo("vapidity")
adverbs['vapidly']="vapidly"
nouns['vapidness']=nounInfo("vapidness")
nouns['vaporization']=nounInfo("vaporization")
adjectives['vaporous']=adjInfo("vaporous")
nouns['vapour']=nounInfo("vapour")
nouns['variability']=nounInfo("variability")
adjectives['variable']=adjInfo("variable")
nouns['variable']=nounInfo("variable")
nouns['variableness']=nounInfo("variableness")
adverbs['variably']="variably"
nouns['variance']=nounInfo("variance")
adjectives['variant']=adjInfo("variant")
nouns['variant']=nounInfo("variant")
nouns['variation']=nounInfo("variation")
adjectives['varicoloured']=adjInfo("varicoloured")
adjectives['varicose']=adjInfo("varicose")
adjectives['varied']=adjInfo("varied")
adjectives['variegated']=adjInfo("variegated")
nouns['variegation']=nounInfo("variegation")
nouns['variety']=nounInfo("variety")
adjectives['variform']=adjInfo("variform")
adjectives['variorum']=adjInfo("variorum")
adjectives['various']=adjInfo("various")
adverbs['variously']="variously"
nouns['varlet']=nounInfo("varlet")
nouns['varnish']=nounInfo("varnish")
nouns['varsity']=nounInfo("varsity")
adjectives['vascular']=adjInfo("vascular")
nouns['vase']=nounInfo("vase")
nouns['vasectomy']=nounInfo("vasectomy")
nouns['vaseline']=nounInfo("vaseline")
nouns['vassal']=nounInfo("vassal")
nouns['vassalage']=nounInfo("vassalage")
adjectives['vast']=adjInfo("vast")
adverbs['vastly']="vastly"
nouns['vastness']=nounInfo("vastness")
nouns['vat']=nounInfo("vat")
nouns['vaudeville']=nounInfo("vaudeville")
nouns['vault']=nounInfo("vault")
adjectives['vaulted']=adjInfo("vaulted")
nouns['vaulter']=nounInfo("vaulter")
nouns['vaunt']=nounInfo("vaunt")
nouns['vaunter']=nounInfo("vaunter")
adverbs['vauntingly']="vauntingly"
nouns['veal']=nounInfo("veal")
adjectives['vegetable']=adjInfo("vegetable")
nouns['vegetable']=nounInfo("vegetable")
nouns['vegetarian']=nounInfo("vegetarian")
nouns['vegetation']=nounInfo("vegetation")
nouns['vehemence']=nounInfo("vehemence")
adjectives['vehement']=adjInfo("vehement")
adverbs['vehemently']="vehemently"
nouns['vehicle']=nounInfo("vehicle")
adjectives['vehicular']=adjInfo("vehicular")
nouns['veil']=nounInfo("veil")
nouns['veiling']=nounInfo("veiling")
nouns['vein']=nounInfo("vein")
adjectives['veined']=adjInfo("veined")
nouns['veld']=nounInfo("veld")
nouns['vellum']=nounInfo("vellum")
nouns['velocipede']=nounInfo("velocipede")
nouns['velocity']=nounInfo("velocity")
nouns['velour']=nounInfo("velour")
nouns['velvet']=nounInfo("velvet")
nouns['velveteen']=nounInfo("velveteen")
adjectives['velvety']=adjInfo("velvety")
adjectives['venal']=adjInfo("venal")
nouns['venality']=nounInfo("venality")
adverbs['venally']="venally"
nouns['vendee']=nounInfo("vendee")
nouns['vender']=nounInfo("vender")
nouns['vendetta']=nounInfo("vendetta")
nouns['vendor']=nounInfo("vendor")
nouns['veneer']=nounInfo("veneer")
adjectives['venerable']=adjInfo("venerable")
nouns['veneration']=nounInfo("veneration")
adjectives['venereal']=adjInfo("venereal")
nouns['vengeance']=nounInfo("vengeance")
adjectives['vengeful']=adjInfo("vengeful")
adjectives['venial']=adjInfo("venial")
nouns['venison']=nounInfo("venison")
nouns['venom']=nounInfo("venom")
adjectives['venomed']=adjInfo("venomed")
adjectives['venomous']=adjInfo("venomous")
adverbs['venomously']="venomously"
adjectives['venous']=adjInfo("venous")
nouns['vent']=nounInfo("vent")
nouns['ventilation']=nounInfo("ventilation")
nouns['ventilator']=nounInfo("ventilator")
nouns['ventricle']=nounInfo("ventricle")
nouns['ventriloquism']=nounInfo("ventriloquism")
nouns['ventriloquist']=nounInfo("ventriloquist")
nouns['venture']=nounInfo("venture")
adjectives['venturesome']=adjInfo("venturesome")
adjectives['venturous']=adjInfo("venturous")
nouns['venue']=nounInfo("venue")
adjectives['veracious']=adjInfo("veracious")
adverbs['veraciously']="veraciously"
nouns['veracity']=nounInfo("veracity")
nouns['veranda']=nounInfo("veranda")
nouns['verandah']=nounInfo("verandah")
nouns['verb']=nounInfo("verb")
adjectives['verbal']=adjInfo("verbal")
adverbs['verbally']="verbally"
adjectives['verbatim']=adjInfo("verbatim")
adverbs['verbatim']="verbatim"
nouns['verbena']=nounInfo("verbena")
nouns['verbiage']=nounInfo("verbiage")
adjectives['verbose']=adjInfo("verbose")
adverbs['verbosely']="verbosely"
nouns['verboseness']=nounInfo("verboseness")
nouns['verbosity']=nounInfo("verbosity")
nouns['verdancy']=nounInfo("verdancy")
adjectives['verdant']=adjInfo("verdant")
nouns['verdict']=nounInfo("verdict")
nouns['verdigris']=nounInfo("verdigris")
nouns['verdure']=nounInfo("verdure")
nouns['verge']=nounInfo("verge")
nouns['verger']=nounInfo("verger")
adjectives['verifiable']=adjInfo("verifiable")
nouns['verification']=nounInfo("verification")
adverbs['verily']="verily"
nouns['verisimilitude']=nounInfo("verisimilitude")
adjectives['veritable']=adjInfo("veritable")
nouns['verity']=nounInfo("verity")
nouns['vermicelli']=nounInfo("vermicelli")
adjectives['vermiform']=adjInfo("vermiform")
adjectives['vermilion']=adjInfo("vermilion")
nouns['vermilion']=nounInfo("vermilion")
nouns['vermin']=nounInfo("vermin")
adjectives['verminous']=adjInfo("verminous")
nouns['vermouth']=nounInfo("vermouth")
adjectives['vernacular']=adjInfo("vernacular")
nouns['vernacular']=nounInfo("vernacular")
adjectives['vernal']=adjInfo("vernal")
nouns['veronica']=nounInfo("veronica")
nouns['verruca']=nounInfo("verruca")
adjectives['versatile']=adjInfo("versatile")
nouns['versatility']=nounInfo("versatility")
nouns['verse']=nounInfo("verse")
adjectives['versed']=adjInfo("versed")
nouns['versification']=nounInfo("versification")
nouns['versifier']=nounInfo("versifier")
nouns['version']=nounInfo("version")
nouns['verso']=nounInfo("verso")
prepositions['versus']=P("versus")
nouns['vertebra']=nounInfo("vertebra")
adjectives['vertebrate']=adjInfo("vertebrate")
nouns['vertebrate']=nounInfo("vertebrate")
nouns['vertex']=nounInfo("vertex")
adjectives['vertical']=adjInfo("vertical")
nouns['vertical']=nounInfo("vertical")
adverbs['vertically']="vertically"
adjectives['vertiginous']=adjInfo("vertiginous")
nouns['vertigo']=nounInfo("vertigo")
nouns['verve']=nounInfo("verve")
adjectives['very']=adjInfo("very")
adverbs['very']="very"
nouns['vesicle']=nounInfo("vesicle")
adjectives['vesicular']=adjInfo("vesicular")
nouns['vespers']=nounInfo("vespers")
nouns['vessel']=nounInfo("vessel")
nouns['vest']=nounInfo("vest")
adjectives['vestal']=adjInfo("vestal")
nouns['vestal']=nounInfo("vestal")
nouns['vestibule']=nounInfo("vestibule")
nouns['vestige']=nounInfo("vestige")
adjectives['vestigial']=adjInfo("vestigial")
nouns['vestment']=nounInfo("vestment")
nouns['vestry']=nounInfo("vestry")
nouns['vestryman']=nounInfo("vestryman")
nouns['vesture']=nounInfo("vesture")
nouns['vet']=nounInfo("vet")
nouns['vetch']=nounInfo("vetch")
nouns['veteran']=nounInfo("veteran")
adjectives['veterinary']=adjInfo("veterinary")
nouns['veto']=nounInfo("veto")
nouns['vexation']=nounInfo("vexation")
adjectives['vexatious']=adjInfo("vexatious")
prepositions['via']=P("via")
nouns['viability']=nounInfo("viability")
adjectives['viable']=adjInfo("viable")
nouns['viaduct']=nounInfo("viaduct")
nouns['vial']=nounInfo("vial")
nouns['vibes']=nounInfo("vibes")
adjectives['vibrant']=adjInfo("vibrant")
nouns['vibraphone']=nounInfo("vibraphone")
nouns['vibration']=nounInfo("vibration")
nouns['vibrato']=nounInfo("vibrato")
nouns['vibrator']=nounInfo("vibrator")
nouns['vicar']=nounInfo("vicar")
nouns['vicarage']=nounInfo("vicarage")
adjectives['vicarious']=adjInfo("vicarious")
adverbs['vicariously']="vicariously"
nouns['vice']=nounInfo("vice")
prepositions['vice']=P("vice")
adjectives['viceregal']=adjInfo("viceregal")
nouns['vicereine']=nounInfo("vicereine")
nouns['viceroy']=nounInfo("viceroy")
nouns['vicinity']=nounInfo("vicinity")
adjectives['vicious']=adjInfo("vicious")
adverbs['viciously']="viciously"
nouns['viciousness']=nounInfo("viciousness")
nouns['vicissitude']=nounInfo("vicissitude")
nouns['victim']=nounInfo("victim").addAttributes({"g":"x"})
nouns['victimization']=nounInfo("victimization")
nouns['victor']=nounInfo("victor")
nouns['victoria']=nounInfo("victoria")
adjectives['victorious']=adjInfo("victorious")
adverbs['victoriously']="victoriously"
nouns['victory']=nounInfo("victory")
nouns['victual']=nounInfo("victual")
nouns['victualler']=nounInfo("victualler")
adverbs['videlicet']="videlicet"
nouns['video']=nounInfo("video")
nouns['videotape']=nounInfo("videotape")
nouns['view']=nounInfo("view")
nouns['viewer']=nounInfo("viewer")
adjectives['viewless']=adjInfo("viewless")
nouns['viewpoint']=nounInfo("viewpoint")
nouns['vigil']=nounInfo("vigil")
nouns['vigilance']=nounInfo("vigilance")
adjectives['vigilant']=adjInfo("vigilant")
nouns['vigilante']=nounInfo("vigilante")
adverbs['vigilantly']="vigilantly"
nouns['vignette']=nounInfo("vignette")
adjectives['vigorous']=adjInfo("vigorous")
adverbs['vigorously']="vigorously"
nouns['vigour']=nounInfo("vigour")
adjectives['vile']=adjInfo("vile")
adverbs['vilely']="vilely"
nouns['vileness']=nounInfo("vileness")
nouns['vilification']=nounInfo("vilification")
nouns['villa']=nounInfo("villa")
nouns['village']=nounInfo("village")
nouns['villager']=nounInfo("villager")
nouns['villain']=nounInfo("villain")
adjectives['villainous']=adjInfo("villainous")
nouns['villainy']=nounInfo("villainy")
nouns['villein']=nounInfo("villein")
nouns['villeinage']=nounInfo("villeinage")
nouns['vim']=nounInfo("vim")
nouns['vinaigrette']=nounInfo("vinaigrette")
nouns['vindication']=nounInfo("vindication")
adjectives['vindictive']=adjInfo("vindictive")
adverbs['vindictively']="vindictively"
nouns['vindictiveness']=nounInfo("vindictiveness")
nouns['vine']=nounInfo("vine")
nouns['vinegar']=nounInfo("vinegar")
adjectives['vinegary']=adjInfo("vinegary")
nouns['vinery']=nounInfo("vinery")
nouns['vineyard']=nounInfo("vineyard")
nouns['vino']=nounInfo("vino")
adjectives['vinous']=adjInfo("vinous")
nouns['vintage']=nounInfo("vintage")
nouns['vintner']=nounInfo("vintner")
nouns['vinyl']=nounInfo("vinyl")
nouns['viol']=nounInfo("viol")
nouns['viola']=nounInfo("viola")
nouns['violation']=nounInfo("violation")
nouns['violence']=nounInfo("violence")
adjectives['violent']=adjInfo("violent")
adverbs['violently']="violently"
nouns['violet']=nounInfo("violet")
nouns['violin']=nounInfo("violin")
nouns['violinist']=nounInfo("violinist")
nouns['viper']=nounInfo("viper")
nouns['virago']=nounInfo("virago")
adjectives['virgin']=adjInfo("virgin")
nouns['virgin']=nounInfo("virgin")
adjectives['virginal']=adjInfo("virginal")
nouns['virginal']=nounInfo("virginal")
nouns['virginity']=nounInfo("virginity")
nouns['virgule']=nounInfo("virgule")
adjectives['virile']=adjInfo("virile")
nouns['virility']=nounInfo("virility")
nouns['virology']=nounInfo("virology")
nouns['virtu']=nounInfo("virtu")
adjectives['virtual']=adjInfo("virtual")
adverbs['virtually']="virtually"
nouns['virtue']=nounInfo("virtue")
nouns['virtuosity']=nounInfo("virtuosity")
nouns['virtuoso']=nounInfo("virtuoso")
adjectives['virtuous']=adjInfo("virtuous")
adverbs['virtuously']="virtuously"
nouns['virulence']=nounInfo("virulence")
adjectives['virulent']=adjInfo("virulent")
adverbs['virulently']="virulently"
nouns['virus']=nounInfo("virus")
nouns['visa']=nounInfo("visa")
nouns['visage']=nounInfo("visage")
adjectives['visaged']=adjInfo("visaged")
nouns['viscera']=nounInfo("viscera")
adjectives['visceral']=adjInfo("visceral")
adjectives['viscid']=adjInfo("viscid")
nouns['viscosity']=nounInfo("viscosity")
nouns['viscount']=nounInfo("viscount")
nouns['viscountcy']=nounInfo("viscountcy")
nouns['viscountess']=nounInfo("viscountess")
adjectives['viscous']=adjInfo("viscous")
nouns['visibility']=nounInfo("visibility")
adjectives['visible']=adjInfo("visible")
adverbs['visibly']="visibly"
nouns['vision']=nounInfo("vision")
adjectives['visionary']=adjInfo("visionary")
nouns['visionary']=nounInfo("visionary")
nouns['visit']=nounInfo("visit")
nouns['visitant']=nounInfo("visitant")
nouns['visitation']=nounInfo("visitation")
nouns['visiting']=nounInfo("visiting")
nouns['visitor']=nounInfo("visitor").addAttributes({"g":"x"})
nouns['visor']=nounInfo("visor")
nouns['vista']=nounInfo("vista")
adjectives['visual']=adjInfo("visual")
nouns['visualization']=nounInfo("visualization")
adverbs['visually']="visually"
adjectives['vital']=adjInfo("vital")
nouns['vitalism']=nounInfo("vitalism")
nouns['vitalist']=nounInfo("vitalist")
nouns['vitality']=nounInfo("vitality")
adverbs['vitally']="vitally"
nouns['vitals']=nounInfo("vitals")
nouns['vitamin']=nounInfo("vitamin")
adjectives['vitreous']=adjInfo("vitreous")
nouns['vitriol']=nounInfo("vitriol")
adjectives['vitriolic']=adjInfo("vitriolic")
nouns['vituperation']=nounInfo("vituperation")
adjectives['vituperative']=adjInfo("vituperative")
nouns['viva']=nounInfo("viva")
adverbs['vivace']="vivace"
adjectives['vivacious']=adjInfo("vivacious")
adverbs['vivaciously']="vivaciously"
nouns['vivacity']=nounInfo("vivacity")
adjectives['vivid']=adjInfo("vivid")
adverbs['vividly']="vividly"
nouns['vividness']=nounInfo("vividness")
adjectives['viviparous']=adjInfo("viviparous")
nouns['vivisection']=nounInfo("vivisection")
nouns['vivisectionist']=nounInfo("vivisectionist")
nouns['vixen']=nounInfo("vixen")
adjectives['vixenish']=adjInfo("vixenish")
nouns['vizier']=nounInfo("vizier")
nouns['vocabulary']=nounInfo("vocabulary")
adjectives['vocal']=adjInfo("vocal")
nouns['vocalist']=nounInfo("vocalist")
adverbs['vocally']="vocally"
nouns['vocation']=nounInfo("vocation")
adjectives['vocational']=adjInfo("vocational")
adjectives['vocative']=adjInfo("vocative")
nouns['vocative']=nounInfo("vocative")
nouns['vociferation']=nounInfo("vociferation")
adjectives['vociferous']=adjInfo("vociferous")
nouns['vodka']=nounInfo("vodka")
nouns['vogue']=nounInfo("vogue")
nouns['voice']=nounInfo("voice")
adjectives['voiced']=adjInfo("voiced")
adjectives['voiceless']=adjInfo("voiceless")
adjectives['void']=adjInfo("void")
nouns['void']=nounInfo("void")
nouns['voile']=nounInfo("voile")
adjectives['volatile']=adjInfo("volatile")
nouns['volatility']=nounInfo("volatility")
adjectives['volcanic']=adjInfo("volcanic")
nouns['volcano']=nounInfo("volcano")
nouns['vole']=nounInfo("vole")
nouns['volition']=nounInfo("volition")
adjectives['volitional']=adjInfo("volitional")
nouns['volley']=nounInfo("volley")
nouns['volleyball']=nounInfo("volleyball")
nouns['volt']=nounInfo("volt")
nouns['voltage']=nounInfo("voltage")
nouns['volubility']=nounInfo("volubility")
adjectives['voluble']=adjInfo("voluble")
adverbs['volubly']="volubly"
nouns['volume']=nounInfo("volume")
adjectives['voluminous']=adjInfo("voluminous")
adverbs['voluntarily']="voluntarily"
adjectives['voluntary']=adjInfo("voluntary")
nouns['voluntary']=nounInfo("voluntary")
nouns['volunteer']=nounInfo("volunteer").addAttributes({"g":"x"})
nouns['voluptuary']=nounInfo("voluptuary")
adjectives['voluptuous']=adjInfo("voluptuous")
adverbs['voluptuously']="voluptuously"
nouns['voluptuousness']=nounInfo("voluptuousness")
nouns['volute']=nounInfo("volute")
adjectives['voluted']=adjInfo("voluted")
nouns['vomit']=nounInfo("vomit")
nouns['voodoo']=nounInfo("voodoo")
nouns['voodooism']=nounInfo("voodooism")
adjectives['voracious']=adjInfo("voracious")
adverbs['voraciously']="voraciously"
nouns['voracity']=nounInfo("voracity")
nouns['vortex']=nounInfo("vortex")
nouns['votary']=nounInfo("votary")
nouns['vote']=nounInfo("vote")
adjectives['voteless']=adjInfo("voteless")
nouns['voter']=nounInfo("voter")
adjectives['votive']=adjInfo("votive")
nouns['voucher']=nounInfo("voucher")
nouns['vow']=nounInfo("vow")
nouns['vowel']=nounInfo("vowel")
nouns['vox']=nounInfo("vox")
nouns['voyage']=nounInfo("voyage")
nouns['voyager']=nounInfo("voyager")
nouns['voyeur']=nounInfo("voyeur")
nouns['vulcanite']=nounInfo("vulcanite")
nouns['vulcanization']=nounInfo("vulcanization")
adjectives['vulgar']=adjInfo("vulgar")
nouns['vulgarian']=nounInfo("vulgarian")
nouns['vulgarism']=nounInfo("vulgarism")
nouns['vulgarity']=nounInfo("vulgarity")
nouns['vulgarization']=nounInfo("vulgarization")
adverbs['vulgarly']="vulgarly"
nouns['vulnerability']=nounInfo("vulnerability")
adjectives['vulnerable']=adjInfo("vulnerable")
adjectives['vulpine']=adjInfo("vulpine")
nouns['vulture']=nounInfo("vulture")
nouns['vulva']=nounInfo("vulva")
nouns['wad']=nounInfo("wad")
nouns['wadding']=nounInfo("wadding")
nouns['waddle']=nounInfo("waddle")
nouns['wader']=nounInfo("wader")
nouns['wadi']=nounInfo("wadi")
nouns['wafer']=nounInfo("wafer")
nouns['waffle']=nounInfo("waffle")
nouns['waft']=nounInfo("waft")
nouns['wag']=nounInfo("wag")
nouns['wage']=nounInfo("wage")
nouns['wager']=nounInfo("wager")
nouns['waggery']=nounInfo("waggery")
adjectives['waggish']=adjInfo("waggish")
adverbs['waggishly']="waggishly"
nouns['waggishness']=nounInfo("waggishness")
nouns['waggon']=nounInfo("waggon")
nouns['waggoner']=nounInfo("waggoner")
nouns['wagtail']=nounInfo("wagtail")
nouns['waif']=nounInfo("waif")
nouns['wail']=nounInfo("wail")
nouns['wain']=nounInfo("wain")
nouns['wainscot']=nounInfo("wainscot")
adjectives['wainscoted']=adjInfo("wainscoted")
nouns['waist']=nounInfo("waist")
nouns['waistcoat']=nounInfo("waistcoat")
nouns['wait']=nounInfo("wait")
nouns['waiter']=nounInfo("waiter").addAttributes({"g":"m"})
nouns['waitress']=nounInfo("waitress").addAttributes({"g":"f"})
nouns['waiver']=nounInfo("waiver")
nouns['wake']=nounInfo("wake")
adjectives['wakeful']=adjInfo("wakeful")
nouns['wakefulness']=nounInfo("wakefulness")
adjectives['waking']=adjInfo("waking")
nouns['wale']=nounInfo("wale")
nouns['walk']=nounInfo("walk")
nouns['walkaway']=nounInfo("walkaway")
nouns['walker']=nounInfo("walker")
nouns['walking']=nounInfo("walking")
nouns['wall']=nounInfo("wall")
nouns['wallaby']=nounInfo("wallaby")
nouns['wallah']=nounInfo("wallah")
nouns['wallet']=nounInfo("wallet")
nouns['wallop']=nounInfo("wallop")
adjectives['walloping']=adjInfo("walloping")
nouns['wallow']=nounInfo("wallow")
nouns['wallpaper']=nounInfo("wallpaper")
nouns['walnut']=nounInfo("walnut")
nouns['walrus']=nounInfo("walrus")
nouns['waltz']=nounInfo("waltz")
nouns['wampum']=nounInfo("wampum")
adjectives['wan']=adjInfo("wan")
nouns['wand']=nounInfo("wand")
nouns['wanderer']=nounInfo("wanderer")
nouns['wandering']=nounInfo("wandering")
nouns['wanderlust']=nounInfo("wanderlust")
nouns['wane']=nounInfo("wane")
nouns['wangle']=nounInfo("wangle")
nouns['wank']=nounInfo("wank")
adverbs['wanly']="wanly"
nouns['wanness']=nounInfo("wanness")
nouns['want']=nounInfo("want")
prepositions['wanting']=P("wanting")
adjectives['wanton']=adjInfo("wanton")
nouns['wanton']=nounInfo("wanton")
adverbs['wantonly']="wantonly"
nouns['wantonness']=nounInfo("wantonness")
nouns['war']=nounInfo("war")
nouns['warble']=nounInfo("warble")
nouns['warbler']=nounInfo("warbler")
nouns['ward']=nounInfo("ward")
nouns['warden']=nounInfo("warden")
nouns['warder']=nounInfo("warder")
nouns['wardress']=nounInfo("wardress")
nouns['wardrobe']=nounInfo("wardrobe")
nouns['wardroom']=nounInfo("wardroom")
nouns['ware']=nounInfo("ware")
nouns['warehouse']=nounInfo("warehouse")
nouns['warfare']=nounInfo("warfare")
nouns['warhead']=nounInfo("warhead")
adverbs['warily']="warily"
nouns['wariness']=nounInfo("wariness")
adjectives['warlike']=adjInfo("warlike")
adjectives['warm']=adjInfo("warm")
nouns['warmer']=nounInfo("warmer")
adverbs['warmly']="warmly"
nouns['warmonger']=nounInfo("warmonger")
nouns['warmth']=nounInfo("warmth")
adjectives['warning']=adjInfo("warning")
nouns['warning']=nounInfo("warning")
adverbs['warningly']="warningly"
nouns['warp']=nounInfo("warp")
nouns['warrant']=nounInfo("warrant")
nouns['warrantee']=nounInfo("warrantee")
nouns['warrantor']=nounInfo("warrantor")
nouns['warranty']=nounInfo("warranty")
nouns['warren']=nounInfo("warren")
nouns['warrior']=nounInfo("warrior")
nouns['warship']=nounInfo("warship")
nouns['wart']=nounInfo("wart")
nouns['warthog']=nounInfo("warthog")
nouns['wartime']=nounInfo("wartime")
adjectives['wary']=adjInfo("wary")
nouns['wash']=nounInfo("wash")
adjectives['washable']=adjInfo("washable")
nouns['washer']=nounInfo("washer")
nouns['washing']=nounInfo("washing")
nouns['washroom']=nounInfo("washroom")
adjectives['washy']=adjInfo("washy")
nouns['wasp']=nounInfo("wasp")
adjectives['waspish']=adjInfo("waspish")
nouns['wassail']=nounInfo("wassail")
nouns['wastage']=nounInfo("wastage")
adjectives['waste']=adjInfo("waste")
nouns['waste']=nounInfo("waste")
adjectives['wasteful']=adjInfo("wasteful")
adverbs['wastefully']="wastefully"
nouns['wasteland']=nounInfo("wasteland")
nouns['waster']=nounInfo("waster")
nouns['wastrel']=nounInfo("wastrel")
nouns['watch']=nounInfo("watch")
nouns['watcher']=nounInfo("watcher")
adjectives['watchful']=adjInfo("watchful")
adverbs['watchfully']="watchfully"
nouns['watchfulness']=nounInfo("watchfulness")
nouns['watchman']=nounInfo("watchman")
nouns['watchword']=nounInfo("watchword")
nouns['water']=nounInfo("water")
nouns['waterbird']=nounInfo("waterbird")
nouns['watercannon']=nounInfo("watercannon")
nouns['waterchute']=nounInfo("waterchute")
nouns['watercourse']=nounInfo("watercourse")
nouns['watercress']=nounInfo("watercress")
nouns['waterfall']=nounInfo("waterfall")
nouns['waterfowl']=nounInfo("waterfowl")
nouns['waterfront']=nounInfo("waterfront")
nouns['waterhen']=nounInfo("waterhen")
nouns['waterhyacinth']=nounInfo("waterhyacinth")
nouns['waterman']=nounInfo("waterman")
nouns['watermark']=nounInfo("watermark")
nouns['watermelon']=nounInfo("watermelon")
nouns['watermill']=nounInfo("watermill")
adjectives['waterproof']=adjInfo("waterproof")
nouns['waterproof']=nounInfo("waterproof")
nouns['watershed']=nounInfo("watershed")
nouns['waterside']=nounInfo("waterside")
nouns['watertable']=nounInfo("watertable")
adjectives['watertight']=adjInfo("watertight")
nouns['waterway']=nounInfo("waterway")
nouns['waterworks']=nounInfo("waterworks")
adjectives['watery']=adjInfo("watery")
nouns['watt']=nounInfo("watt")
nouns['wattage']=nounInfo("wattage")
nouns['wattle']=nounInfo("wattle")
nouns['wave']=nounInfo("wave")
nouns['waverer']=nounInfo("waverer")
adjectives['wavy']=adjInfo("wavy")
nouns['wax']=nounInfo("wax")
adjectives['waxen']=adjInfo("waxen")
nouns['waxwork']=nounInfo("waxwork")
adjectives['waxy']=adjInfo("waxy")
adverbs['way']="way"
nouns['way']=nounInfo("way")
nouns['wayfarer']=nounInfo("wayfarer")
adjectives['wayfaring']=adjInfo("wayfaring")
nouns['wayside']=nounInfo("wayside")
adjectives['wayward']=adjInfo("wayward")
adjectives['weak']=adjInfo("weak")
nouns['weakling']=nounInfo("weakling")
adjectives['weakly']=adjInfo("weakly")
adverbs['weakly']="weakly"
nouns['weakness']=nounInfo("weakness")
nouns['weal']=nounInfo("weal")
nouns['weald']=nounInfo("weald")
nouns['wealth']=nounInfo("wealth")
adverbs['wealthily']="wealthily"
adjectives['wealthy']=adjInfo("wealthy")
nouns['weapon']=nounInfo("weapon")
adjectives['weaponless']=adjInfo("weaponless")
nouns['weaponry']=nounInfo("weaponry")
nouns['wear']=nounInfo("wear")
adjectives['wearable']=adjInfo("wearable")
nouns['wearer']=nounInfo("wearer")
adverbs['wearily']="wearily"
nouns['weariness']=nounInfo("weariness")
adjectives['wearing']=adjInfo("wearing")
adjectives['wearisome']=adjInfo("wearisome")
adjectives['weary']=adjInfo("weary")
nouns['weasel']=nounInfo("weasel")
nouns['weather']=nounInfo("weather")
nouns['weathercock']=nounInfo("weathercock")
nouns['weatherman']=nounInfo("weatherman")
nouns['weave']=nounInfo("weave")
nouns['weaver']=nounInfo("weaver")
nouns['web']=nounInfo("web")
adjectives['webbed']=adjInfo("webbed")
nouns['webbing']=nounInfo("webbing")
nouns['website']=nounInfo("website")
nouns['wedding']=nounInfo("wedding")
nouns['wedge']=nounInfo("wedge")
nouns['wedlock']=nounInfo("wedlock")
adjectives['wee']=adjInfo("wee")
nouns['wee']=nounInfo("wee")
nouns['weed']=nounInfo("weed")
adjectives['weedy']=adjInfo("weedy")
nouns['week']=nounInfo("week")
nouns['weekday']=nounInfo("weekday")
nouns['weekend']=nounInfo("weekend")
nouns['weekender']=nounInfo("weekender")
adjectives['weekly']=adjInfo("weekly")
adverbs['weekly']="weekly"
nouns['weekly']=nounInfo("weekly")
adjectives['weeny']=adjInfo("weeny")
adjectives['weeping']=adjInfo("weeping")
nouns['weevil']=nounInfo("weevil")
nouns['weft']=nounInfo("weft")
nouns['weight']=nounInfo("weight")
adverbs['weightily']="weightily"
nouns['weightiness']=nounInfo("weightiness")
adjectives['weightless']=adjInfo("weightless")
nouns['weightlessness']=nounInfo("weightlessness")
adjectives['weighty']=adjInfo("weighty")
nouns['weir']=nounInfo("weir")
adjectives['weird']=adjInfo("weird")
nouns['weirdie']=nounInfo("weirdie")
adverbs['weirdly']="weirdly"
nouns['weirdness']=nounInfo("weirdness")
adjectives['welcome']=adjInfo("welcome")
nouns['welcome']=nounInfo("welcome")
nouns['weld']=nounInfo("weld")
nouns['welder']=nounInfo("welder")
nouns['welfare']=nounInfo("welfare")
nouns['welkin']=nounInfo("welkin")
adjectives['well']=adjInfo("well")
adverbs['well']="well"
nouns['well']=nounInfo("well")
nouns['wellington']=nounInfo("wellington")
nouns['welsher']=nounInfo("welsher")
nouns['welt']=nounInfo("welt")
adjectives['welter']=adjInfo("welter")
nouns['welter']=nounInfo("welter")
nouns['wen']=nounInfo("wen")
nouns['wench']=nounInfo("wench")
nouns['werewolf']=nounInfo("werewolf")
adverbs['west']="west"
nouns['west']=nounInfo("west")
adjectives['westerly']=adjInfo("westerly")
adverbs['westerly']="westerly"
adjectives['western']=adjInfo("western")
nouns['western']=nounInfo("western")
nouns['westerner']=nounInfo("westerner")
nouns['westernization']=nounInfo("westernization")
adjectives['westernmost']=adjInfo("westernmost")
adjectives['westward']=adjInfo("westward")
adverbs['westward']="westward"
adverbs['westwards']="westwards"
adjectives['wet']=adjInfo("wet")
nouns['wet']=nounInfo("wet")
nouns['wether']=nounInfo("wether")
nouns['wetland']=nounInfo("wetland")
nouns['wetting']=nounInfo("wetting")
nouns['whack']=nounInfo("whack")
adjectives['whacked']=adjInfo("whacked")
nouns['whacker']=nounInfo("whacker")
adjectives['whacking']=adjInfo("whacking")
adverbs['whacking']="whacking"
nouns['whacking']=nounInfo("whacking")
nouns['whale']=nounInfo("whale")
nouns['whalebone']=nounInfo("whalebone")
nouns['whaler']=nounInfo("whaler")
adverbs['whang']="whang"
nouns['whang']=nounInfo("whang")
nouns['wharf']=nounInfo("wharf")
nouns['wharfage']=nounInfo("wharfage")
nouns['wheat']=nounInfo("wheat")
adjectives['wheaten']=adjInfo("wheaten")
nouns['wheel']=nounInfo("wheel")
nouns['wheelbarrow']=nounInfo("wheelbarrow")
nouns['wheelbase']=nounInfo("wheelbase")
nouns['wheelhouse']=nounInfo("wheelhouse")
nouns['wheelwright']=nounInfo("wheelwright")
nouns['wheeze']=nounInfo("wheeze")
adverbs['wheezily']="wheezily"
nouns['wheeziness']=nounInfo("wheeziness")
adjectives['wheezy']=adjInfo("wheezy")
nouns['whelk']=nounInfo("whelk")
nouns['whelp']=nounInfo("whelp")
adverbs['whenever']="whenever"
adverbs['whensoever']="whensoever"
adverbs['whereabouts']="whereabouts"
nouns['whereabouts']=nounInfo("whereabouts")
adverbs['whereto']="whereto"
adverbs['wherewith']="wherewith"
adverbs['wherewithal']="wherewithal"
nouns['wherewithal']=nounInfo("wherewithal")
nouns['wherry']=nounInfo("wherry")
nouns['whetstone']=nounInfo("whetstone")
nouns['whew']=nounInfo("whew")
nouns['whey']=nounInfo("whey")
nouns['whiff']=nounInfo("whiff")
nouns['while']=nounInfo("while")
nouns['whim']=nounInfo("whim")
nouns['whimper']=nounInfo("whimper")
nouns['whimsey']=nounInfo("whimsey")
adjectives['whimsical']=adjInfo("whimsical")
nouns['whimsicality']=nounInfo("whimsicality")
adverbs['whimsically']="whimsically"
nouns['whimsy']=nounInfo("whimsy")
nouns['whin']=nounInfo("whin")
nouns['whine']=nounInfo("whine")
nouns['whiner']=nounInfo("whiner")
nouns['whinny']=nounInfo("whinny")
nouns['whip']=nounInfo("whip")
nouns['whipcord']=nounInfo("whipcord")
nouns['whippet']=nounInfo("whippet")
nouns['whipping']=nounInfo("whipping")
adjectives['whippy']=adjInfo("whippy")
nouns['whir']=nounInfo("whir")
nouns['whirl']=nounInfo("whirl")
nouns['whirligig']=nounInfo("whirligig")
nouns['whirlpool']=nounInfo("whirlpool")
nouns['whirlwind']=nounInfo("whirlwind")
nouns['whirr']=nounInfo("whirr")
nouns['whisk']=nounInfo("whisk")
nouns['whisker']=nounInfo("whisker")
adjectives['whiskered']=adjInfo("whiskered")
nouns['whiskey']=nounInfo("whiskey")
nouns['whisky']=nounInfo("whisky")
nouns['whisper']=nounInfo("whisper")
nouns['whisperer']=nounInfo("whisperer")
nouns['whist']=nounInfo("whist")
nouns['whistle']=nounInfo("whistle")
nouns['whit']=nounInfo("whit")
adjectives['white']=adjInfo("white")
nouns['white']=nounInfo("white")
nouns['whitebait']=nounInfo("whitebait")
nouns['whiteness']=nounInfo("whiteness")
nouns['whitening']=nounInfo("whitening")
nouns['whitethorn']=nounInfo("whitethorn")
nouns['whitewash']=nounInfo("whitewash")
adverbs['whither']="whither"
adverbs['whithersoever']="whithersoever"
nouns['whiting']=nounInfo("whiting")
nouns['whitlow']=nounInfo("whitlow")
nouns['whiz']=nounInfo("whiz")
nouns['whoa']=nounInfo("whoa")
nouns['whodunit']=nounInfo("whodunit")
adjectives['whole']=adjInfo("whole")
nouns['whole']=nounInfo("whole")
adverbs['wholeheartedly']="wholeheartedly"
nouns['wholemeal']=nounInfo("wholemeal")
adjectives['wholesale']=adjInfo("wholesale")
adverbs['wholesale']="wholesale"
nouns['wholesale']=nounInfo("wholesale")
nouns['wholesaler']=nounInfo("wholesaler")
adjectives['wholesome']=adjInfo("wholesome")
adverbs['wholesomely']="wholesomely"
adverbs['wholly']="wholly"
nouns['whoop']=nounInfo("whoop")
nouns['whoopee']=nounInfo("whoopee")
nouns['whopper']=nounInfo("whopper")
adjectives['whopping']=adjInfo("whopping")
adverbs['whopping']="whopping"
nouns['whore']=nounInfo("whore")
nouns['whorl']=nounInfo("whorl")
adjectives['whorled']=adjInfo("whorled")
nouns['why']=nounInfo("why")
nouns['wick']=nounInfo("wick")
adjectives['wicked']=adjInfo("wicked")
adverbs['wickedly']="wickedly"
nouns['wickedness']=nounInfo("wickedness")
nouns['wicker']=nounInfo("wicker")
nouns['wickerwork']=nounInfo("wickerwork")
nouns['wicket']=nounInfo("wicket")
adjectives['wide']=adjInfo("wide")
adverbs['wide']="wide"
adverbs['widely']="widely"
adjectives['widespread']=adjInfo("widespread")
nouns['widgeon']=nounInfo("widgeon")
nouns['widow']=nounInfo("widow").addAttributes({"g":"f"})
adjectives['widowed']=adjInfo("widowed")
nouns['widower']=nounInfo("widower").addAttributes({"g":"m"})
nouns['widowhood']=nounInfo("widowhood")
nouns['width']=nounInfo("width")
nouns['wife']=nounInfo("wife").addAttributes({"g":"f"})
adjectives['wifelike']=adjInfo("wifelike")
adjectives['wifely']=adjInfo("wifely")
nouns['wig']=nounInfo("wig")
adjectives['wigged']=adjInfo("wigged")
nouns['wigging']=nounInfo("wigging")
nouns['wiggle']=nounInfo("wiggle")
nouns['wight']=nounInfo("wight")
nouns['wigwam']=nounInfo("wigwam")
adjectives['wild']=adjInfo("wild")
adverbs['wild']="wild"
nouns['wild']=nounInfo("wild")
adjectives['wildcat']=adjInfo("wildcat")
nouns['wildebeest']=nounInfo("wildebeest")
nouns['wilderness']=nounInfo("wilderness")
nouns['wildfire']=nounInfo("wildfire")
nouns['wildfowl']=nounInfo("wildfowl")
adverbs['wildly']="wildly"
nouns['wildness']=nounInfo("wildness")
nouns['wile']=nounInfo("wile")
adjectives['wilful']=adjInfo("wilful")
adverbs['wilfully']="wilfully"
nouns['wilfulness']=nounInfo("wilfulness")
nouns['will']=nounInfo("will")
adjectives['willed']=adjInfo("willed")
adjectives['willful']=adjInfo("willful")
nouns['willies']=nounInfo("willies")
adjectives['willing']=adjInfo("willing")
adverbs['willingly']="willingly"
nouns['willingness']=nounInfo("willingness")
nouns['willow']=nounInfo("willow")
adjectives['willowy']=adjInfo("willowy")
adjectives['wily']=adjInfo("wily")
nouns['wimple']=nounInfo("wimple")
nouns['win']=nounInfo("win")
nouns['wince']=nounInfo("wince")
nouns['winceyette']=nounInfo("winceyette")
nouns['winch']=nounInfo("winch")
nouns['wind']=nounInfo("wind")
nouns['windbag']=nounInfo("windbag")
nouns['windbreak']=nounInfo("windbreak")
nouns['windbreaker']=nounInfo("windbreaker")
nouns['windfall']=nounInfo("windfall")
adverbs['windily']="windily"
nouns['windiness']=nounInfo("windiness")
nouns['windlass']=nounInfo("windlass")
adjectives['windless']=adjInfo("windless")
nouns['windmill']=nounInfo("windmill")
nouns['window']=nounInfo("window")
nouns['windpipe']=nounInfo("windpipe")
nouns['windscreen']=nounInfo("windscreen")
nouns['windshield']=nounInfo("windshield")
adjectives['windswept']=adjInfo("windswept")
adjectives['windward']=adjInfo("windward")
nouns['windward']=nounInfo("windward")
adjectives['windy']=adjInfo("windy")
nouns['wine']=nounInfo("wine")
nouns['wineglass']=nounInfo("wineglass")
nouns['winepress']=nounInfo("winepress")
nouns['wineskin']=nounInfo("wineskin")
nouns['wing']=nounInfo("wing")
adjectives['winged']=adjInfo("winged")
nouns['winger']=nounInfo("winger")
adjectives['wingless']=adjInfo("wingless")
nouns['wink']=nounInfo("wink")
nouns['winkle']=nounInfo("winkle")
nouns['winner']=nounInfo("winner")
nouns['winning']=nounInfo("winning")
adjectives['winsome']=adjInfo("winsome")
adverbs['winsomely']="winsomely"
nouns['winsomeness']=nounInfo("winsomeness")
nouns['winter']=nounInfo("winter")
adjectives['wintery']=adjInfo("wintery")
adjectives['wintry']=adjInfo("wintry")
nouns['wipe']=nounInfo("wipe")
nouns['wiper']=nounInfo("wiper")
nouns['wire']=nounInfo("wire")
adjectives['wireless']=adjInfo("wireless")
nouns['wireless']=nounInfo("wireless")
nouns['wiring']=nounInfo("wiring")
adjectives['wiry']=adjInfo("wiry")
nouns['wisdom']=nounInfo("wisdom")
adjectives['wise']=adjInfo("wise")
nouns['wise']=nounInfo("wise")
nouns['wiseacre']=nounInfo("wiseacre")
nouns['wisecrack']=nounInfo("wisecrack")
adverbs['wisely']="wisely"
nouns['wish']=nounInfo("wish")
adjectives['wishful']=adjInfo("wishful")
adverbs['wishfully']="wishfully"
nouns['wisp']=nounInfo("wisp")
adjectives['wispy']=adjInfo("wispy")
nouns['wisteria']=nounInfo("wisteria")
adjectives['wistful']=adjInfo("wistful")
adverbs['wistfully']="wistfully"
nouns['wit']=nounInfo("wit")
nouns['witch']=nounInfo("witch").addAttributes({"g":"f"})
nouns['witchcraft']=nounInfo("witchcraft")
nouns['witchery']=nounInfo("witchery")
adjectives['witching']=adjInfo("witching")
prepositions['with']=P("with")
adverbs['withal']="withal"
nouns['withdrawal']=nounInfo("withdrawal")
nouns['withe']=nounInfo("withe")
adverbs['witheringly']="witheringly"
nouns['withers']=nounInfo("withers")
adverbs['within']="within"
prepositions['within']=P("within")
adverbs['without']="without"
prepositions['without']=P("without")
nouns['withy']=nounInfo("withy")
adjectives['witless']=adjInfo("witless")
nouns['witness']=nounInfo("witness")
nouns['witticism']=nounInfo("witticism")
adverbs['wittily']="wittily"
adverbs['wittingly']="wittingly"
adjectives['witty']=adjInfo("witty")
adjectives['wizard']=adjInfo("wizard")
nouns['wizard']=nounInfo("wizard").addAttributes({"g":"x"})
nouns['wizardry']=nounInfo("wizardry")
adjectives['wizened']=adjInfo("wizened")
nouns['wo']=nounInfo("wo")
nouns['woad']=nounInfo("woad")
nouns['wobbler']=nounInfo("wobbler")
adjectives['wobbly']=adjInfo("wobbly")
nouns['woe']=nounInfo("woe")
adjectives['woebegone']=adjInfo("woebegone")
adjectives['woeful']=adjInfo("woeful")
adverbs['woefully']="woefully"
nouns['wold']=nounInfo("wold")
nouns['wolf']=nounInfo("wolf")
adjectives['wolfish']=adjInfo("wolfish")
adverbs['wolfishly']="wolfishly"
nouns['wolfram']=nounInfo("wolfram")
nouns['woman']=nounInfo("woman").addAttributes({"g":"f"})
nouns['womanhood']=nounInfo("womanhood")
adjectives['womanish']=adjInfo("womanish")
nouns['womanizer']=nounInfo("womanizer")
nouns['womankind']=nounInfo("womankind")
adjectives['womanlike']=adjInfo("womanlike")
adjectives['womanly']=adjInfo("womanly")
nouns['womb']=nounInfo("womb")
nouns['wombat']=nounInfo("wombat")
nouns['womenfolk']=nounInfo("womenfolk")
nouns['wonder']=nounInfo("wonder")
adjectives['wonderful']=adjInfo("wonderful")
adverbs['wonderfully']="wonderfully"
adverbs['wonderingly']="wonderingly"
nouns['wonderland']=nounInfo("wonderland")
nouns['wonderment']=nounInfo("wonderment")
adjectives['wondrous']=adjInfo("wondrous")
adverbs['wondrous']="wondrous"
adjectives['wonky']=adjInfo("wonky")
adjectives['wont']=adjInfo("wont")
nouns['wont']=nounInfo("wont")
adjectives['wonted']=adjInfo("wonted")
nouns['wood']=nounInfo("wood")
nouns['woodbine']=nounInfo("woodbine")
nouns['woodcock']=nounInfo("woodcock")
nouns['woodcraft']=nounInfo("woodcraft")
nouns['woodcut']=nounInfo("woodcut")
nouns['woodcutter']=nounInfo("woodcutter")
adjectives['wooded']=adjInfo("wooded")
adjectives['wooden']=adjInfo("wooden")
nouns['woodland']=nounInfo("woodland")
nouns['woodlouse']=nounInfo("woodlouse")
nouns['woodman']=nounInfo("woodman")
nouns['woodpecker']=nounInfo("woodpecker")
nouns['woodpile']=nounInfo("woodpile")
nouns['woodsman']=nounInfo("woodsman")
nouns['woodwind']=nounInfo("woodwind")
nouns['woodwork']=nounInfo("woodwork")
nouns['woodworm']=nounInfo("woodworm")
adjectives['woody']=adjInfo("woody")
nouns['wooer']=nounInfo("wooer")
nouns['woof']=nounInfo("woof")
nouns['woofer']=nounInfo("woofer")
nouns['wool']=nounInfo("wool")
adjectives['woolen']=adjInfo("woolen")
nouns['woolen']=nounInfo("woolen")
adjectives['woollen']=adjInfo("woollen")
nouns['woollen']=nounInfo("woollen")
adjectives['woolly']=adjInfo("woolly")
adjectives['wooly']=adjInfo("wooly")
nouns['wooly']=nounInfo("wooly")
nouns['word']=nounInfo("word")
nouns['wordbook']=nounInfo("wordbook")
adverbs['wordily']="wordily"
nouns['wordiness']=nounInfo("wordiness")
nouns['wording']=nounInfo("wording")
adjectives['wordless']=adjInfo("wordless")
adverbs['wordlessly']="wordlessly"
adjectives['wordy']=adjInfo("wordy")
nouns['work']=nounInfo("work")
adjectives['workable']=adjInfo("workable")
adjectives['workaday']=adjInfo("workaday")
nouns['workbench']=nounInfo("workbench")
nouns['workbook']=nounInfo("workbook")
nouns['workday']=nounInfo("workday")
nouns['worker']=nounInfo("worker").addAttributes({"g":"x"})
nouns['workforce']=nounInfo("workforce")
nouns['workhouse']=nounInfo("workhouse")
adjectives['working']=adjInfo("working")
nouns['working']=nounInfo("working")
nouns['workload']=nounInfo("workload")
nouns['workman']=nounInfo("workman")
adjectives['workmanlike']=adjInfo("workmanlike")
nouns['workmanship']=nounInfo("workmanship")
nouns['workplace']=nounInfo("workplace")
nouns['workroom']=nounInfo("workroom")
nouns['workshop']=nounInfo("workshop")
nouns['worktable']=nounInfo("worktable")
nouns['world']=nounInfo("world")
nouns['worldliness']=nounInfo("worldliness")
adjectives['worldly']=adjInfo("worldly")
adjectives['worldwide']=adjInfo("worldwide")
nouns['worm']=nounInfo("worm")
nouns['wormwood']=nounInfo("wormwood")
adjectives['wormy']=adjInfo("wormy")
adjectives['worried']=adjInfo("worried")
adjectives['worrisome']=adjInfo("worrisome")
nouns['worry']=nounInfo("worry")
adjectives['worrying']=adjInfo("worrying")
adverbs['worryingly']="worryingly"
nouns['worse']=nounInfo("worse")
nouns['worship']=nounInfo("worship")
adjectives['worshipful']=adjInfo("worshipful")
nouns['worshipper']=nounInfo("worshipper").addAttributes({"g":"x"})
nouns['worst']=nounInfo("worst")
nouns['worsted']=nounInfo("worsted")
adjectives['worth']=adjInfo("worth")
nouns['worth']=nounInfo("worth")
adverbs['worthily']="worthily"
nouns['worthiness']=nounInfo("worthiness")
adjectives['worthless']=adjInfo("worthless")
adverbs['worthlessly']="worthlessly"
nouns['worthlessness']=nounInfo("worthlessness")
adjectives['worthwhile']=adjInfo("worthwhile")
adjectives['worthy']=adjInfo("worthy")
nouns['worthy']=nounInfo("worthy")
nouns['wotcher']=nounInfo("wotcher")
nouns['wound']=nounInfo("wound")
nouns['wow']=nounInfo("wow")
nouns['wrack']=nounInfo("wrack")
nouns['wraith']=nounInfo("wraith")
nouns['wrangle']=nounInfo("wrangle")
nouns['wrap']=nounInfo("wrap")
nouns['wrapper']=nounInfo("wrapper")
nouns['wrapping']=nounInfo("wrapping")
nouns['wrath']=nounInfo("wrath")
adjectives['wrathful']=adjInfo("wrathful")
adverbs['wrathfully']="wrathfully"
nouns['wreath']=nounInfo("wreath")
nouns['wreck']=nounInfo("wreck")
nouns['wreckage']=nounInfo("wreckage")
nouns['wrecker']=nounInfo("wrecker")
nouns['wren']=nounInfo("wren")
nouns['wrench']=nounInfo("wrench")
nouns['wrestle']=nounInfo("wrestle")
nouns['wrestler']=nounInfo("wrestler")
nouns['wretch']=nounInfo("wretch")
adjectives['wretched']=adjInfo("wretched")
adverbs['wretchedly']="wretchedly"
nouns['wretchedness']=nounInfo("wretchedness")
nouns['wrick']=nounInfo("wrick")
nouns['wriggle']=nounInfo("wriggle")
nouns['wriggler']=nounInfo("wriggler")
nouns['wright']=nounInfo("wright")
nouns['wring']=nounInfo("wring")
nouns['wringer']=nounInfo("wringer")
nouns['wrinkle']=nounInfo("wrinkle")
adjectives['wrinkly']=adjInfo("wrinkly")
nouns['wrist']=nounInfo("wrist")
nouns['wristlet']=nounInfo("wristlet")
nouns['wristwatch']=nounInfo("wristwatch")
nouns['writ']=nounInfo("writ")
nouns['writer']=nounInfo("writer").addAttributes({"g":"x"})
nouns['writing']=nounInfo("writing")
adjectives['wrong']=adjInfo("wrong")
adverbs['wrong']="wrong"
nouns['wrong']=nounInfo("wrong")
nouns['wrongdoer']=nounInfo("wrongdoer")
nouns['wrongdoing']=nounInfo("wrongdoing")
adjectives['wrongful']=adjInfo("wrongful")
adverbs['wrongfully']="wrongfully"
adverbs['wrongly']="wrongly"
adjectives['wroth']=adjInfo("wroth")
adjectives['wry']=adjInfo("wry")
adverbs['wryly']="wryly"
nouns['xenophobia']=nounInfo("xenophobia")
nouns['xylophone']=nounInfo("xylophone")
nouns['yacht']=nounInfo("yacht")
nouns['yachting']=nounInfo("yachting")
nouns['yachtsman']=nounInfo("yachtsman")
nouns['yah']=nounInfo("yah")
nouns['yahoo']=nounInfo("yahoo")
nouns['yak']=nounInfo("yak")
nouns['yam']=nounInfo("yam")
nouns['yank']=nounInfo("yank")
nouns['yap']=nounInfo("yap")
nouns['yard']=nounInfo("yard")
nouns['yardstick']=nounInfo("yardstick")
nouns['yarn']=nounInfo("yarn")
nouns['yarrow']=nounInfo("yarrow")
nouns['yashmak']=nounInfo("yashmak")
nouns['yaw']=nounInfo("yaw")
nouns['yawl']=nounInfo("yawl")
nouns['yawn']=nounInfo("yawn")
nouns['yaws']=nounInfo("yaws")
adverbs['yea']="yea"
nouns['yea']=nounInfo("yea")
adverbs['yeah']="yeah"
nouns['year']=nounInfo("year")
nouns['yearling']=nounInfo("yearling")
adjectives['yearly']=adjInfo("yearly")
adverbs['yearly']="yearly"
nouns['yearning']=nounInfo("yearning")
adverbs['yearningly']="yearningly"
nouns['yeast']=nounInfo("yeast")
adjectives['yeasty']=adjInfo("yeasty")
nouns['yell']=nounInfo("yell")
adjectives['yellow']=adjInfo("yellow")
nouns['yellow']=nounInfo("yellow")
adjectives['yellowish']=adjInfo("yellowish")
nouns['yellowness']=nounInfo("yellowness")
nouns['yen']=nounInfo("yen")
nouns['yeoman']=nounInfo("yeoman")
nouns['yeomanry']=nounInfo("yeomanry")
nouns['yes']=nounInfo("yes")
adverbs['yesterday']="yesterday"
nouns['yesterday']=nounInfo("yesterday")
adverbs['yet']="yet"
nouns['yeti']=nounInfo("yeti")
nouns['yew']=nounInfo("yew")
nouns['yield']=nounInfo("yield")
adjectives['yielding']=adjInfo("yielding")
adverbs['yieldingly']="yieldingly"
nouns['yippee']=nounInfo("yippee")
nouns['yob']=nounInfo("yob")
nouns['yobo']=nounInfo("yobo")
nouns['yodel']=nounInfo("yodel")
nouns['yodeller']=nounInfo("yodeller")
nouns['yoga']=nounInfo("yoga")
nouns['yoghourt']=nounInfo("yoghourt")
nouns['yoghurt']=nounInfo("yoghurt")
nouns['yogi']=nounInfo("yogi")
nouns['yogurt']=nounInfo("yogurt")
nouns['yoke']=nounInfo("yoke")
nouns['yokel']=nounInfo("yokel")
nouns['yolk']=nounInfo("yolk")
adjectives['yon']=adjInfo("yon")
adverbs['yon']="yon"
adjectives['yonder']=adjInfo("yonder")
adverbs['yonder']="yonder"
nouns['yore']=nounInfo("yore")
adjectives['young']=adjInfo("young")
nouns['young']=nounInfo("young")
adjectives['youngish']=adjInfo("youngish")
nouns['youngster']=nounInfo("youngster")
nouns['youth']=nounInfo("youth")
adjectives['youthful']=adjInfo("youthful")
adverbs['youthfully']="youthfully"
nouns['youthfulness']=nounInfo("youthfulness")
nouns['yule']=nounInfo("yule")
adjectives['zany']=adjInfo("zany")
nouns['zany']=nounInfo("zany")
nouns['zeal']=nounInfo("zeal")
nouns['zealot']=nounInfo("zealot")
nouns['zealotry']=nounInfo("zealotry")
adjectives['zealous']=adjInfo("zealous")
adverbs['zealously']="zealously"
nouns['zebra']=nounInfo("zebra")
nouns['zebu']=nounInfo("zebu")
nouns['zee']=nounInfo("zee")
nouns['zenith']=nounInfo("zenith")
adjectives['zenithal']=adjInfo("zenithal")
nouns['zephyr']=nounInfo("zephyr")
nouns['zeppelin']=nounInfo("zeppelin")
nouns['zero']=nounInfo("zero")
nouns['zest']=nounInfo("zest")
adverbs['zestfully']="zestfully"
adverbs['zigzag']="zigzag"
nouns['zigzag']=nounInfo("zigzag")
nouns['zinc']=nounInfo("zinc")
nouns['zing']=nounInfo("zing")
nouns['zinnia']=nounInfo("zinnia")
nouns['zip']=nounInfo("zip")
nouns['zipper']=nounInfo("zipper")
nouns['zither']=nounInfo("zither")
nouns['zloty']=nounInfo("zloty")
nouns['zodiac']=nounInfo("zodiac")
nouns['zombie']=nounInfo("zombie")
adjectives['zonal']=adjInfo("zonal")
nouns['zone']=nounInfo("zone")
nouns['zoning']=nounInfo("zoning")
nouns['zoo']=nounInfo("zoo")
adjectives['zoological']=adjInfo("zoological")
nouns['zoologist']=nounInfo("zoologist")
nouns['zoology']=nounInfo("zoology")
nouns['zoom']=nounInfo("zoom")
nouns['zoophyte']=nounInfo("zoophyte")
nouns['zucchini']=nounInfo("zucchini")

# ======== MORPHVERBALIZATIONS 
morphVerbalizations={
 'abandon':{'noun': 'abandonment'},
 'abate':{'noun': 'abatement'},
 'abbreviate':{'noun': 'abbreviation'},
 'abdicate':{'noun': 'abdication'},
 'abduce':{'noun': 'abduction'},
 'abduct':{'noun': 'abduction'},
 'abet':{'noun': 'abetment'},
 'abhor':{'actor': 'abhorrer'},
 'abjure':{'noun': 'abjuration'},
 'ablate':{'noun': 'ablation'},
 'abnegate':{'noun': 'abnegation'},
 'abolish':{'noun': 'abolishment'},
 'abominate':{'noun': 'abomination'},
 'abort':{'noun': 'abortion'},
 'abrade':{'noun': 'abrasion'},
 'abrase':{'noun': 'abrasion'},
 'abreact':{'noun': 'abreaction'},
 'abridge':{'noun': 'abridgement'},
 'abrogate':{'noun': 'abrogation'},
 'abscond':{'noun': 'abscondment'},
 'absorb':{'noun': 'absorption'},
 'abstract':{'noun': 'abstraction'},
 'abuse':{'noun': 'abuse'},
 'abut':{'noun': 'abutment'},
 'accede':{'noun': 'accession'},
 'accelerate':{'noun': 'acceleration'},
 'accentuate':{'noun': 'accentuation'},
 'accept':{'noun': 'acceptance'},
 'access':{'noun': 'access'},
 'acclimate':{'noun': 'acclimation'},
 'acclimatize':{'noun': 'acclimatization'},
 'accommodate':{'noun': 'accommodation'},
 'accompany':{'noun': 'accompaniment', 'actor': 'accompanist'},
 'accomplish':{'noun': 'accomplishment'},
 'accord':{'noun': 'accord'},
 'account':{'noun': 'accounting'},
 'accouter':{'noun': 'accouterment'},
 'accoutre':{'noun': 'accoutrement'},
 'accredit':{'noun': 'accreditation'},
 'accrete':{'noun': 'accretion'},
 'accrue':{'noun': 'accrual'},
 'acculturate':{'noun': 'acculturation'},
 'accumulate':{'noun': 'accumulation'},
 'accuse':{'noun': 'accusal', 'actor': 'accuser'},
 'acetylate':{'noun': 'acetylation'},
 'achieve':{'noun': 'achievement'},
 'acidify':{'noun': 'acidification'},
 'acknowledge':{'noun': 'acknowledgement'},
 'acquaint':{'noun': 'acquaintance'},
 'acquire':{'noun': 'acquisition', 'actor': 'acquirer'},
 'acquit':{'noun': 'acquittal'},
 'act':{'noun': 'act', 'actor': 'actor'},
 'activate':{'noun': 'activation'},
 'actualize':{'noun': 'actualization'},
 'actuate':{'noun': 'actuation'},
 'adapt':{'noun': 'adaptation'},
 'add':{'noun': 'addition'},
 'addict':{'noun': 'addiction'},
 'address':{'noun': 'address'},
 'adjourn':{'noun': 'adjournment'},
 'adjudicate':{'noun': 'adjudication', 'actor': 'adjudicator'},
 'adjure':{'noun': 'adjuration'},
 'adjust':{'noun': 'adjustment', 'actor': 'adjuster'},
 'administer':{'noun': 'administration', 'actor': 'administrator'},
 'administrate':{'noun': 'administration'},
 'admire':{'noun': 'admiration', 'actor': 'admirer'},
 'admit':{'noun': 'admission'},
 'admonish':{'noun': 'admonishment'},
 'adopt':{'noun': 'adoption'},
 'adore':{'noun': 'adoration'},
 'adorn':{'noun': 'adornment'},
 'adsorb':{'noun': 'adsorption'},
 'adulate':{'noun': 'adulation'},
 'adulterate':{'noun': 'adulteration'},
 'advance':{'noun': 'advance'},
 'advertise':{'noun': 'advertisement', 'actor': 'advertiser'},
 'advise':{'noun': 'advice', 'actor': 'adviser'},
 'aerate':{'noun': 'aeration'},
 'aestivate':{'noun': 'aestivation'},
 'affect':{'noun': 'affectation'},
 'affiliate':{'noun': 'affiliation'},
 'affirm':{'noun': 'affirmation'},
 'afflict':{'noun': 'affliction'},
 'afforest':{'noun': 'afforestation'},
 'age':{'noun': 'aging'},
 'agglomerate':{'noun': 'agglomeration'},
 'agglutinate':{'noun': 'agglutination'},
 'aggrandize':{'noun': 'aggrandizement'},
 'aggravate':{'noun': 'aggravation'},
 'aggregate':{'noun': 'aggregation'},
 'agitate':{'noun': 'agitation'},
 'agree':{'noun': 'agreement'},
 'aid':{'noun': 'aid'},
 'ail':{'noun': 'ailment'},
 'aim':{'noun': 'aim'},
 'air':{'noun': 'airing'},
 'alienate':{'noun': 'alienation'},
 'align':{'noun': 'alignment'},
 'aliment':{'noun': 'alimentation'},
 'aline':{'noun': 'alinement'},
 'allege':{'noun': 'allegation'},
 'alleviate':{'noun': 'alleviation'},
 'alliterate':{'noun': 'alliteration'},
 'allocate':{'noun': 'allocation'},
 'allot':{'noun': 'allotment'},
 'allow':{'noun': 'allowance'},
 'allude':{'noun': 'allusion'},
 'allure':{'noun': 'allurement'},
 'ally':{'noun': 'alliance'},
 'alphabetize':{'noun': 'alphabetization'},
 'alter':{'noun': 'alteration'},
 'altercate':{'noun': 'altercation'},
 'alternate':{'noun': 'alternation'},
 'amalgamate':{'noun': 'amalgamation'},
 'amaze':{'noun': 'amazement'},
 'ameliorate':{'noun': 'amelioration'},
 'amend':{'noun': 'amendment'},
 'amerce':{'noun': 'amercement'},
 'aminate':{'noun': 'amination'},
 'amortise':{'noun': 'amortisation'},
 'amortize':{'noun': 'amortization'},
 'amount':{'noun': 'amount'},
 'amplify':{'noun': 'amplification'},
 'amputate':{'noun': 'amputation'},
 'amuse':{'noun': 'amusement'},
 'analyse':{'actor': 'analyst'},
 'analyze':{'noun': 'analysis', 'actor': 'analyst'},
 'anchor':{'actor': 'anchor'},
 'anger':{'noun': 'anger'},
 'angle':{'actor': 'angler'},
 'animalize':{'noun': 'animalization'},
 'animate':{'noun': 'animation'},
 'annex':{'noun': 'annexation'},
 'annihilate':{'noun': 'annihilation'},
 'annotate':{'noun': 'annotation'},
 'announce':{'noun': 'announcement', 'actor': 'announcer'},
 'annoy':{'noun': 'annoyance'},
 'annul':{'noun': 'annulment'},
 'anoint':{'noun': 'anointment'},
 'answer':{'noun': 'answer'},
 'anticipate':{'noun': 'anticipation'},
 'appeal':{'noun': 'appeal'},
 'appear':{'noun': 'appearance'},
 'appease':{'noun': 'appeasement'},
 'apperceive':{'noun': 'apperception'},
 'applaud':{'noun': 'applause'},
 'apply':{'noun': 'appliance'},
 'appoint':{'noun': 'appointment'},
 'apportion':{'noun': 'apportionment'},
 'appose':{'noun': 'apposition'},
 'appraise':{'noun': 'appraisal', 'actor': 'appraiser'},
 'appreciate':{'noun': 'appreciation'},
 'apprise':{'noun': 'apprisal'},
 'approach':{'noun': 'approach'},
 'approbate':{'noun': 'approbation'},
 'appropriate':{'noun': 'appropriation'},
 'approve':{'noun': 'approval'},
 'approximate':{'noun': 'approximation'},
 'arbitrate':{'noun': 'arbitration', 'actor': 'arbitrator'},
 'archaize':{'noun': 'archaicism'},
 'argue':{'noun': 'argument'},
 'arouse':{'noun': 'arousal'},
 'arraign':{'noun': 'arraignment'},
 'arrange':{'noun': 'arrangement', 'actor': 'arranger'},
 'arrest':{'noun': 'arrest'},
 'arrive':{'noun': 'arrival'},
 'arrogate':{'noun': 'arrogation'},
 'articulate':{'noun': 'articulation'},
 'ascend':{'noun': 'ascendance'},
 'ask':{'noun': 'asking'},
 'asperse':{'noun': 'aspersion'},
 'asphyxiate':{'noun': 'asphyxiation'},
 'aspirate':{'noun': 'aspiration'},
 'aspire':{'noun': 'aspiration'},
 'assassinate':{'noun': 'assassination', 'actor': 'assassin'},
 'assemble':{'noun': 'assembly'},
 'assert':{'noun': 'assertion'},
 'assess':{'noun': 'assessment', 'actor': 'assessor'},
 'asseverate':{'noun': 'asseveration'},
 'assign':{'noun': 'assignation'},
 'assimilate':{'noun': 'assimilation'},
 'assist':{'noun': 'assistance', 'actor': 'assistant'},
 'associate':{'noun': 'association'},
 'assort':{'noun': 'assortment'},
 'assuage':{'noun': 'assuagement'},
 'assume':{'noun': 'assumption'},
 'assure':{'noun': 'assurance'},
 'astonish':{'noun': 'astonishment'},
 'atomize':{'noun': 'atomization'},
 'atone':{'noun': 'atonement'},
 'attach':{'noun': 'attachment'},
 'attack':{'noun': 'attack', 'actor': 'attacker'},
 'attain':{'noun': 'attainment'},
 'attempt':{'noun': 'attempt'},
 'attend':{'noun': 'attendance'},
 'attenuate':{'noun': 'attenuation'},
 'attest':{'noun': 'attestation'},
 'attract':{'noun': 'attraction'},
 'attribute':{'noun': 'attribution'},
 'auction':{'noun': 'auction'},
 'auctioneer':{'actor': 'auctioneer'},
 'audit':{'noun': 'audit', 'actor': 'auditor'},
 'augment':{'noun': 'augmentation'},
 'auscultate':{'noun': 'auscultation'},
 'authenticate':{'noun': 'authentication'},
 'author':{'actor': 'author'},
 'authorise':{'noun': 'authorisation'},
 'authorize':{'noun': 'authorization'},
 'automate':{'noun': 'automation'},
 'autophosphorylate':{'noun': 'autophosphorylation'},
 'aviate':{'noun': 'aviation'},
 'avoid':{'noun': 'avoidance'},
 'award':{'noun': 'award'},
 'babysit':{'actor': 'babysitter'},
 'back up':{'noun': 'back-up'},
 'back':{'noun': 'backing', 'actor': 'backer'},
 'baffle':{'noun': 'bafflement'},
 'bag':{'actor': 'bagger'},
 'bake':{'actor': 'baker'},
 'balance':{'noun': 'balance'},
 'balloon':{'noun': 'ballooning'},
 'ban':{'noun': 'ban'},
 'banish':{'noun': 'banishment'},
 'bank':{'noun': 'banking'},
 'bankrupt':{'noun': 'bankruptcy'},
 'barbarise':{'noun': 'barbarisation'},
 'barbarize':{'noun': 'barbarization'},
 'bargain':{'noun': 'bargaining'},
 'bartend':{'actor': 'bartender'},
 'base':{'noun': 'basis'},
 'bastardise':{'noun': 'bastardisation'},
 'bastardize':{'noun': 'bastardization'},
 'bathe':{'noun': 'bath'},
 'battle':{'noun': 'battle'},
 'bear':{'noun': 'bearing'},
 'beat':{'noun': 'beating'},
 'beatify':{'noun': 'beatification'},
 'beautify':{'noun': 'beautification'},
 'bedevil':{'noun': 'bedevilment'},
 'befoul':{'noun': 'befoulment'},
 'befuddle':{'noun': 'befuddlement'},
 'beg':{'actor': 'beggar'},
 'beget':{'actor': 'begetter'},
 'begin':{'noun': 'beginning', 'actor': 'beginner'},
 'beguile':{'noun': 'beguilement'},
 'behave':{'noun': 'behavior'},
 'believe':{'noun': 'belief', 'actor': 'believer'},
 'belong':{'noun': 'belonging'},
 'benefit':{'noun': 'benefit'},
 'bereave':{'noun': 'bereavement'},
 'bet':{'noun': 'bet'},
 'better':{'noun': 'betterment'},
 'bewilder':{'noun': 'bewilderment'},
 'bewitch':{'noun': 'bewitchment'},
 'bid':{'noun': 'bid', 'actor': 'bidder'},
 'bifurcate':{'noun': 'bifurcation'},
 'bill':{'noun': 'billing'},
 'bisect':{'noun': 'bisection'},
 'blame':{'noun': 'blame'},
 'blandish':{'noun': 'blandishment'},
 'blaspheme':{'noun': 'blasphemy'},
 'block':{'noun': 'blocking'},
 'blow':{'noun': 'blow', 'actor': 'blower'},
 'boast':{'noun': 'boast'},
 'bombard':{'noun': 'bombardment'},
 'bond':{'noun': 'bondage'},
 'boom':{'noun': 'boom'},
 'boost':{'noun': 'boost', 'actor': 'booster'},
 'borrow':{'noun': 'borrowing', 'actor': 'borrower'},
 'bounce':{'noun': 'bounce'},
 'bowdlerise':{'noun': 'bowdlerisation'},
 'bowdlerize':{'noun': 'bowdlerization'},
 'box':{'actor': 'boxer'},
 'brachiate':{'noun': 'brachiation'},
 'breach':{'noun': 'breach'},
 'break up':{'noun': 'break-up'},
 'break':{'noun': 'breaking', 'actor': 'breaker'},
 'breathe':{'noun': 'breath'},
 'breed':{'noun': 'breeding', 'actor': 'breeder'},
 'brew':{'noun': 'brewing', 'actor': 'brewer'},
 'bribe':{'noun': 'bribe'},
 'broadcast':{'noun': 'broadcast', 'actor': 'broadcaster'},
 'broaden':{'noun': 'broadening'},
 'brutalise':{'noun': 'brutalisation'},
 'brutalize':{'noun': 'brutalization'},
 'bugle':{'actor': 'bugler'},
 'build':{'noun': 'building', 'actor': 'builder'},
 'burn':{'noun': 'burning'},
 'bury':{'noun': 'burial'},
 'butcher':{'actor': 'butcher'},
 'buy out':{'noun': 'buy-out'},
 'buy':{'noun': 'purchase', 'actor': 'buyer'},
 'buzz':{'actor': 'buzzer'},
 'caddie':{'actor': 'caddie'},
 'calcify':{'noun': 'calcification'},
 'calcine':{'noun': 'calcination'},
 'calculate':{'noun': 'calculation', 'actor': 'calculator'},
 'calibrate':{'noun': 'calibration'},
 'call':{'noun': 'call', 'actor': 'caller'},
 'camp':{'actor': 'camper'},
 'campaign':{'noun': 'campaign'},
 'canalize':{'noun': 'canalization'},
 'cancel':{'noun': 'cancellation'},
 'canonize':{'noun': 'canonization'},
 'canton':{'noun': 'cantonment'},
 'capitalize':{'noun': 'capitalization'},
 'capitulate':{'noun': 'capitulation'},
 'captivate':{'noun': 'captivation'},
 'capture':{'noun': 'capture'},
 'carbonate':{'noun': 'carbonation'},
 'carbonize':{'noun': 'carbonization'},
 'care':{'noun': 'care'},
 'carol':{'actor': 'caroller'},
 'carouse':{'noun': 'carousal'},
 'carry':{'noun': 'carrying'},
 'carve':{'actor': 'carver'},
 'cast':{'noun': 'cast'},
 'castigate':{'noun': 'castigation'},
 'castrate':{'noun': 'castration'},
 'catalyze':{'noun': 'catalysis'},
 'catch':{'noun': 'catch', 'actor': 'catcher'},
 'categorize':{'noun': 'categorization'},
 'cater':{'noun': 'catering', 'actor': 'caterer'},
 'cause':{'noun': 'causation'},
 'cauterize':{'noun': 'cauterization'},
 'caution':{'noun': 'caution'},
 'cease':{'noun': 'cessation'},
 'cede':{'noun': 'cession'},
 'celebrate':{'noun': 'celebration'},
 'center':{'noun': 'centering'},
 'centralize':{'noun': 'centralization'},
 'centrifugate':{'noun': 'centrifugation'},
 'centrifuge':{'noun': 'centrifugation'},
 'cerebrate':{'noun': 'cerebration'},
 'certificate':{'noun': 'certification'},
 'certify':{'noun': 'certification'},
 'chair':{'actor': 'chair'},
 'challenge':{'noun': 'challenge', 'actor': 'challenger'},
 'change':{'noun': 'change'},
 'channelize':{'noun': 'channelization'},
 'chant':{'actor': 'cantor'},
 'characterize':{'noun': 'characterization'},
 'charge':{'noun': 'charge'},
 'chase':{'noun': 'chase', 'actor': 'chaser'},
 'chastise':{'noun': 'chastisement'},
 'cheat':{'actor': 'cheater'},
 'check':{'noun': 'check'},
 'chelate':{'noun': 'chelation'},
 'chemisorb':{'noun': 'chemisorption'},
 'chisel':{'actor': 'chiseller'},
 'chlorinate':{'noun': 'chlorination'},
 'choose':{'noun': 'choice'},
 'choreograph':{'actor': 'choreographer'},
 'chronicle':{'actor': 'chronicler'},
 'circularise':{'noun': 'circularisation'},
 'circularize':{'noun': 'circularization'},
 'circulate':{'noun': 'circulation'},
 'circumcise':{'noun': 'circumcision'},
 'circumnavigate':{'noun': 'circumnavigation'},
 'circumvent':{'noun': 'circumvention'},
 'circumvolute':{'noun': 'circumvolution'},
 'cite':{'noun': 'citation'},
 'civilize':{'noun': 'civilization'},
 'claim':{'noun': 'claim'},
 'clap':{'actor': 'clapper'},
 'clarify':{'noun': 'clarification'},
 'classify':{'noun': 'classification'},
 'clean up':{'noun': 'clean-up'},
 'clean':{'actor': 'cleaner'},
 'clear':{'noun': 'clearance'},
 'climb':{'noun': 'climb', 'actor': 'climber'},
 'close':{'noun': 'closing'},
 'co-produce':{'noun': 'co-production'},
 'coach':{'actor': 'coach'},
 'coact':{'noun': 'coaction'},
 'coactivate':{'noun': 'coactivation'},
 'coagulate':{'noun': 'coagulation'},
 'code':{'actor': 'coder'},
 'codify':{'noun': 'codification'},
 'coerce':{'noun': 'coercion'},
 'cogitate':{'noun': 'cogitation'},
 'cohabit':{'noun': 'cohabitation'},
 'coimmunoprecipitate':{'noun': 'coimmunoprecipitation'},
 'collaborate':{'noun': 'collaboration', 'actor': 'collaborator'},
 'collapse':{'noun': 'collapse'},
 'collate':{'noun': 'collation'},
 'collect':{'noun': 'collection', 'actor': 'collector'},
 'collectivise':{'noun': 'collectivisation'},
 'collectivize':{'noun': 'collectivization'},
 'collide':{'noun': 'collision'},
 'collocate':{'noun': 'collocation'},
 'collude':{'noun': 'collusion'},
 'colonize':{'noun': 'colonization'},
 'color':{'noun': 'coloration'},
 'combat':{'noun': 'combat'},
 'combine':{'noun': 'combination'},
 'combust':{'noun': 'combustion'},
 'command':{'noun': 'commandment', 'actor': 'commander'},
 'commemorate':{'noun': 'commemoration'},
 'commence':{'noun': 'commencement'},
 'commend':{'noun': 'commendation'},
 'comment':{'noun': 'comment', 'actor': 'commentator'},
 'commercialize':{'noun': 'commercialization'},
 'commiserate':{'noun': 'commiseration'},
 'commission':{'noun': 'commissioning'},
 'commit':{'noun': 'commission'},
 'commune':{'noun': 'communion'},
 'communicate':{'noun': 'communication'},
 'communize':{'noun': 'communization'},
 'commutate':{'noun': 'commutation'},
 'commute':{'noun': 'commutation', 'actor': 'commuter'},
 'compact':{'noun': 'compaction'},
 'compare':{'noun': 'comparison'},
 'compart':{'noun': 'compartment'},
 'compel':{'noun': 'compulsion'},
 'compensate':{'noun': 'compensation'},
 'compete':{'noun': 'competition'},
 'compile':{'noun': 'compilation', 'actor': 'compiler'},
 'complain':{'noun': 'complaint'},
 'complement':{'noun': 'complementation'},
 'complete':{'noun': 'completion'},
 'complicate':{'noun': 'complication'},
 'comply':{'noun': 'compliance'},
 'comport':{'noun': 'comportment'},
 'compose':{'noun': 'composition', 'actor': 'composer'},
 'compound':{'noun': 'compounding'},
 'compress':{'noun': 'compression'},
 'compromise':{'noun': 'compromise'},
 'compute':{'noun': 'computation', 'actor': 'computer'},
 'concatenate':{'noun': 'concatenation'},
 'conceal':{'noun': 'concealment'},
 'concede':{'noun': 'concession'},
 'conceive':{'noun': 'conception', 'actor': 'conceiver'},
 'concentrate':{'noun': 'concentration'},
 'conceptualise':{'noun': 'conceptualisation'},
 'conceptualize':{'noun': 'conceptualization'},
 'concern':{'noun': 'concern'},
 'conciliate':{'noun': 'conciliation'},
 'conclude':{'noun': 'conclusion'},
 'concoct':{'noun': 'concoction'},
 'concrete':{'noun': 'concretion'},
 'condemn':{'noun': 'condemnation'},
 'condense':{'noun': 'condensation'},
 'condone':{'noun': 'condonation'},
 'conduct':{'noun': 'conduct', 'actor': 'conductor'},
 'confabulate':{'noun': 'confabulation'},
 'confect':{'noun': 'confection'},
 'confection':{'actor': 'confectioner'},
 'confederate':{'noun': 'confederation'},
 'confer':{'noun': 'conferment'},
 'confess':{'noun': 'confession'},
 'configure':{'noun': 'configuration'},
 'confine':{'noun': 'confinement'},
 'confirm':{'noun': 'confirmation'},
 'confiscate':{'noun': 'confiscation'},
 'conflate':{'noun': 'conflation'},
 'conform':{'noun': 'conformance'},
 'confront':{'noun': 'confrontation'},
 'confuse':{'noun': 'confusion'},
 'confute':{'noun': 'confutation'},
 'congest':{'noun': 'congestion'},
 'conglomerate':{'noun': 'conglomeration'},
 'congratulate':{'noun': 'congratulation'},
 'congregate':{'noun': 'congregation'},
 'conjugate':{'noun': 'conjugation'},
 'conjure':{'noun': 'conjuration', 'actor': 'conjeror'},
 'connect':{'noun': 'connection'},
 'connote':{'noun': 'connotation'},
 'conquer':{'noun': 'conquest', 'actor': 'conqueror'},
 'conscript':{'noun': 'conscription'},
 'consecrate':{'noun': 'consecration'},
 'conserve':{'noun': 'conservation'},
 'consider':{'noun': 'consideration'},
 'consign':{'noun': 'consignment'},
 'console':{'noun': 'consolation'},
 'consolidate':{'noun': 'consolidation'},
 'conspire':{'noun': 'conspiracy'},
 'constellate':{'noun': 'constellation'},
 'consternate':{'noun': 'consternation'},
 'constipate':{'noun': 'constipation'},
 'constitute':{'noun': 'constitution'},
 'constrict':{'noun': 'constriction'},
 'construct':{'noun': 'construction'},
 'construe':{'noun': 'construal'},
 'consult':{'noun': 'consultation'},
 'consume':{'noun': 'consumption', 'actor': 'consumer'},
 'consummate':{'noun': 'consummation'},
 'contact':{'noun': 'contact'},
 'contain':{'noun': 'containment'},
 'contaminate':{'noun': 'contamination'},
 'contemplate':{'noun': 'contemplation'},
 'contend':{'noun': 'contention'},
 'content':{'noun': 'contention'},
 'contest':{'noun': 'contestation'},
 'continue':{'noun': 'continuation'},
 'contort':{'noun': 'contortion'},
 'contract':{'noun': 'contraction', 'actor': 'contractor'},
 'contradict':{'noun': 'contradiction'},
 'contrast':{'noun': 'contrast'},
 'contravene':{'noun': 'contravention'},
 'contribute':{'noun': 'contribution', 'actor': 'contributor'},
 'control':{'noun': 'control', 'actor': 'controller'},
 'contuse':{'noun': 'contusion'},
 'convect':{'noun': 'convection'},
 'convene':{'noun': 'convention'},
 'conventionalise':{'noun': 'conventionalisation'},
 'conventionalize':{'noun': 'conventionalization'},
 'converse':{'noun': 'conversation'},
 'convert':{'noun': 'conversion'},
 'convey':{'noun': 'conveyance', 'actor': 'conveyor'},
 'convict':{'noun': 'conviction'},
 'convolute':{'noun': 'convolution'},
 'convulse':{'noun': 'convulsion'},
 'cook':{'actor': 'cook'},
 'cool':{'noun': 'cooling'},
 'cooper':{'noun': 'cooperation'},
 'cooperate':{'noun': 'cooperation'},
 'coordinate':{'noun': 'coordination', 'actor': 'coordinator'},
 'copulate':{'noun': 'copulation'},
 'copy':{'noun': 'copying'},
 'coronate':{'noun': 'coronation'},
 'corrade':{'noun': 'corrasion'},
 'correct':{'noun': 'correction'},
 'correlate':{'noun': 'correlation'},
 'corroborate':{'noun': 'corroboration'},
 'corrode':{'noun': 'corrosion'},
 'corrugate':{'noun': 'corrugation'},
 'corrupt':{'noun': 'corruption'},
 'cost':{'noun': 'cost'},
 'cotransfect':{'noun': 'cotransfection'},
 'counsel':{'actor': 'counselor'},
 'count':{'noun': 'count'},
 'counteract':{'noun': 'counteraction'},
 'couple':{'noun': 'coupling'},
 'court':{'noun': 'courting'},
 'cover':{'noun': 'coverage'},
 'crack':{'noun': 'cracking'},
 'crash':{'noun': 'crash'},
 'create':{'noun': 'creation', 'actor': 'creator'},
 'credit':{'noun': 'credit'},
 'cremate':{'noun': 'cremation'},
 'crenel':{'noun': 'crenelation'},
 'crenelate':{'noun': 'crenelation'},
 'crenellate':{'noun': 'crenellation'},
 'crepitate':{'noun': 'crepitation'},
 'criticize':{'noun': 'criticism'},
 'cross':{'noun': 'crossing'},
 'crowd':{'noun': 'crowd'},
 'cruise':{'noun': 'cruise'},
 'crusade':{'actor': 'crusader'},
 'crush':{'noun': 'crush'},
 'crystallize':{'noun': 'crystallization'},
 'culminate':{'noun': 'culmination'},
 'cultivate':{'noun': 'cultivation'},
 'curb':{'noun': 'curb'},
 'cure':{'noun': 'cure'},
 'curtail':{'noun': 'curtailment'},
 'cut back':{'noun': 'cut-back'},
 'cut off':{'noun': 'cut-off'},
 'cut':{'noun': 'cut', 'actor': 'cutter'},
 'dally':{'noun': 'dalliance'},
 'damage':{'noun': 'damage'},
 'damn':{'noun': 'damnation'},
 'dance':{'noun': 'dance', 'actor': 'dancer'},
 'date':{'noun': 'date'},
 'deacetylate':{'noun': 'deacetylation'},
 'deactivate':{'noun': 'deactivation'},
 'deal':{'noun': 'deal', 'actor': 'dealer'},
 'deaminate':{'noun': 'deamination'},
 'debar':{'noun': 'debarment'},
 'debark':{'noun': 'debarkation'},
 'debase':{'noun': 'debasement'},
 'debate':{'noun': 'debate'},
 'debilitate':{'noun': 'debilitation'},
 'decamp':{'noun': 'decampment'},
 'decapitate':{'noun': 'decapitation'},
 'deceive':{'noun': 'deception'},
 'decelerate':{'noun': 'deceleration'},
 'decentralise':{'noun': 'decentralisation'},
 'decentralize':{'noun': 'decentralization'},
 'decide':{'noun': 'decision'},
 'decimalise':{'noun': 'decimalisation'},
 'decimalize':{'noun': 'decimalization'},
 'decimate':{'noun': 'decimation'},
 'declare':{'noun': 'declaration'},
 'declassify':{'noun': 'declassification'},
 'decline':{'noun': 'declination'},
 'decoct':{'noun': 'decoction'},
 'decode':{'actor': 'decoder'},
 'decolonize':{'noun': 'decolonization'},
 'decompose':{'noun': 'decomposition'},
 'decompress':{'noun': 'decompression'},
 'decontaminate':{'noun': 'decontamination'},
 'decorate':{'noun': 'decoration', 'actor': 'decorator'},
 'decrease':{'noun': 'decrease'},
 'decree':{'noun': 'decrement'},
 'dedicate':{'noun': 'dedication'},
 'deduce':{'noun': 'deduction'},
 'deduct':{'noun': 'deduction'},
 'deface':{'noun': 'defacement'},
 'defame':{'noun': 'defamation'},
 'defarnesylate':{'noun': 'defarnesylation'},
 'default':{'noun': 'default', 'actor': 'defaulter'},
 'defeat':{'noun': 'defeat'},
 'defecate':{'noun': 'defecation'},
 'defect':{'noun': 'defection'},
 'defend':{'noun': 'defense', 'actor': 'defender'},
 'defer':{'noun': 'deferment'},
 'defile':{'noun': 'defilement'},
 'define':{'noun': 'definition'},
 'deflate':{'noun': 'deflation'},
 'deflect':{'noun': 'deflection'},
 'defoliate':{'noun': 'defoliation'},
 'deforest':{'noun': 'deforestation'},
 'deform':{'noun': 'deformation'},
 'defray':{'noun': 'defrayment'},
 'defy':{'noun': 'defiance'},
 'degenerate':{'noun': 'degeneration'},
 'deglycosylate':{'noun': 'deglycosylation'},
 'degrade':{'noun': 'degradation'},
 'dehumanize':{'noun': 'dehumanization'},
 'dehydrate':{'noun': 'dehydration'},
 'deify':{'noun': 'deification'},
 'deject':{'noun': 'dejection'},
 'delay':{'noun': 'delay'},
 'delegate':{'noun': 'delegation'},
 'delete':{'noun': 'deletion'},
 'deliberate':{'noun': 'deliberation'},
 'delimit':{'noun': 'delimitation'},
 'delimitate':{'noun': 'delimitation'},
 'delineate':{'noun': 'delineation'},
 'deliver':{'noun': 'deliverance'},
 'delocalize':{'noun': 'delocalization'},
 'delude':{'noun': 'delusion'},
 'demagnetize':{'noun': 'demagnetization'},
 'demand':{'noun': 'demand'},
 'demarcate':{'noun': 'demarcation'},
 'demethylate':{'noun': 'demethylation'},
 'demobilize':{'noun': 'demobilization'},
 'democratize':{'noun': 'democratization'},
 'demolish':{'noun': 'demolition'},
 'demonetize':{'noun': 'demonetization'},
 'demonstrate':{'noun': 'demonstration'},
 'demoralize':{'noun': 'demoralization'},
 'demote':{'noun': 'demotion'},
 'demythologize':{'noun': 'demythologization'},
 'denationalize':{'noun': 'denationalization'},
 'denigrate':{'noun': 'denigration'},
 'denominate':{'noun': 'denomination'},
 'denote':{'noun': 'denotation'},
 'denounce':{'noun': 'denouncement'},
 'denudate':{'noun': 'denudation'},
 'denude':{'noun': 'denudation'},
 'deny':{'noun': 'denial'},
 'depalmitoylate':{'noun': 'depalmitoylation'},
 'depart':{'noun': 'department'},
 'depend':{'noun': 'dependance'},
 'dephosphorylate':{'noun': 'dephosphorylation'},
 'depict':{'noun': 'depiction'},
 'deplete':{'noun': 'depletion'},
 'deploy':{'noun': 'deployment'},
 'depopulate':{'noun': 'depopulation'},
 'deport':{'noun': 'deportation'},
 'depose':{'noun': 'deposition'},
 'deposit':{'noun': 'deposit', 'actor': 'depositor'},
 'deprecate':{'noun': 'deprecation'},
 'depreciate':{'noun': 'depreciation'},
 'depress':{'noun': 'depression'},
 'deprive':{'noun': 'deprivation'},
 'depute':{'noun': 'deputation'},
 'derail':{'noun': 'derailment'},
 'derange':{'noun': 'derangement'},
 'deregulate':{'noun': 'deregulation'},
 'deride':{'noun': 'derision'},
 'derive':{'noun': 'derivation'},
 'derogate':{'noun': 'derogation'},
 'desalinate':{'noun': 'desalination'},
 'desalinize':{'noun': 'desalinization'},
 'describe':{'noun': 'description'},
 'desecrate':{'noun': 'desecration'},
 'desegregate':{'noun': 'desegregation'},
 'desensitize':{'noun': 'desensitization'},
 'desert':{'noun': 'desertion'},
 'design':{'noun': 'design', 'actor': 'designer'},
 'designate':{'noun': 'designation'},
 'desire':{'noun': 'desire'},
 'desolate':{'noun': 'desolation'},
 'despise':{'noun': 'despisal'},
 'despoil':{'noun': 'despoilment'},
 'dessicate':{'noun': 'dessication'},
 'destine':{'noun': 'destination'},
 'destroy':{'noun': 'destruction'},
 'desynchronize':{'noun': 'desynchronization'},
 'detach':{'noun': 'detachment'},
 'detail':{'noun': 'detail'},
 'detect':{'noun': 'detection'},
 'deter':{'noun': 'determent'},
 'deteriorate':{'noun': 'deterioration'},
 'determine':{'noun': 'determination'},
 'detest':{'noun': 'detestation'},
 'dethrone':{'noun': 'dethronement'},
 'detonate':{'noun': 'detonation'},
 'detoxify':{'noun': 'detoxification'},
 'detract':{'noun': 'detraction', 'actor': 'detractor'},
 'detribalize':{'noun': 'detribalization'},
 'devaluate':{'noun': 'devaluation'},
 'devalue':{'noun': 'devaluation'},
 'devastate':{'noun': 'devastation'},
 'develop':{'noun': 'development', 'actor': 'developer'},
 'deviate':{'noun': 'deviation'},
 'devise':{'noun': 'devisal'},
 'devitalise':{'noun': 'devitalisation'},
 'devitalize':{'noun': 'devitalization'},
 'devote':{'noun': 'devotion'},
 'diagonalize':{'noun': 'diagonalization'},
 'dialyze':{'noun': 'dialysis'},
 'dichotomize':{'noun': 'dichotomization'},
 'dictate':{'noun': 'dictation', 'actor': 'dictator'},
 'die':{'noun': 'death'},
 'differ':{'noun': 'difference'},
 'differentiate':{'noun': 'differentiation'},
 'diffract':{'noun': 'diffraction'},
 'diffuse':{'noun': 'diffusion'},
 'dig':{'actor': 'digger'},
 'digest':{'noun': 'digestion'},
 'digitalize':{'noun': 'digitalization'},
 'digress':{'noun': 'digression'},
 'dilapidate':{'noun': 'dilapidation'},
 'dilate':{'noun': 'dilatation'},
 'dilute':{'noun': 'dilution'},
 'dimerize':{'noun': 'dimerization'},
 'diminish':{'noun': 'diminution'},
 'dine':{'actor': 'diner'},
 'dip':{'noun': 'dip'},
 'direct':{'noun': 'direction', 'actor': 'director'},
 'disable':{'noun': 'disablement'},
 'disaffect':{'noun': 'disaffection'},
 'disagree':{'noun': 'disagreement'},
 'disappear':{'noun': 'disappearance'},
 'disappoint':{'noun': 'disappointment'},
 'disapprove':{'noun': 'disapproval'},
 'disarrange':{'noun': 'disarrangement'},
 'disassemble':{'noun': 'disassembly'},
 'disassociate':{'noun': 'disassociation'},
 'disband':{'noun': 'disbandment'},
 'disbar':{'noun': 'disbarment'},
 'disbelieve':{'noun': 'disbelief'},
 'disburse':{'noun': 'disbursal'},
 'discern':{'noun': 'discernment'},
 'disclose':{'noun': 'disclosure'},
 'discolor':{'noun': 'discoloration'},
 'discolour':{'noun': 'discolouration'},
 'discombobulate':{'noun': 'discombobulation'},
 'disconcert':{'noun': 'disconcertion'},
 'disconnect':{'noun': 'disconnection'},
 'discontent':{'noun': 'discontentment'},
 'discontinue':{'noun': 'discontinuation'},
 'discord':{'noun': 'discordance'},
 'discount':{'noun': 'discount'},
 'discourage':{'noun': 'discouragement'},
 'discover':{'noun': 'discovery'},
 'discriminate':{'noun': 'discrimination'},
 'discuss':{'noun': 'discussion'},
 'disembark':{'noun': 'disembarkation'},
 'disembarrass':{'noun': 'disembarrassment'},
 'disenchant':{'noun': 'disenchantment'},
 'disengage':{'noun': 'disengagement'},
 'disentangle':{'noun': 'disentanglement'},
 'disestablish':{'noun': 'disestablishment'},
 'disfigure':{'noun': 'disfigurement'},
 'disfranchise':{'noun': 'disfranchisement'},
 'disgorge':{'noun': 'disgorgement'},
 'dishearten':{'noun': 'disheartenment'},
 'disillusion':{'noun': 'disillusionment'},
 'disincline':{'noun': 'disinclination'},
 'disinfect':{'noun': 'disinfection'},
 'disinfest':{'noun': 'disinfestation'},
 'disinherit':{'noun': 'disinheritance'},
 'disintegrate':{'noun': 'disintegration'},
 'disinter':{'noun': 'disinterment'},
 'dislocate':{'noun': 'dislocation'},
 'dislodge':{'noun': 'dislodgement'},
 'dismantle':{'noun': 'dismantlement'},
 'dismember':{'noun': 'dismemberment'},
 'dismiss':{'noun': 'dismissal'},
 'disobey':{'noun': 'disobedience'},
 'disorganize':{'noun': 'disorganization'},
 'disorient':{'noun': 'disorientation'},
 'disorientate':{'noun': 'disorientation'},
 'disown':{'noun': 'disownment'},
 'disparage':{'noun': 'disparagement'},
 'dispatch':{'actor': 'dispatcher'},
 'dispense':{'noun': 'dispensation'},
 'disperse':{'noun': 'dispersal'},
 'displace':{'noun': 'displacement'},
 'display':{'noun': 'display'},
 'dispose':{'noun': 'disposal'},
 'dispossess':{'noun': 'dispossession'},
 'dispute':{'noun': 'disputation'},
 'disqualify':{'noun': 'disqualification'},
 'disrupt':{'noun': 'disruption'},
 'dissect':{'noun': 'dissection'},
 'disseminate':{'noun': 'dissemination'},
 'dissent':{'actor': 'dissenter'},
 'dissimilate':{'noun': 'dissimilation'},
 'dissimulate':{'noun': 'dissimulation'},
 'dissipate':{'noun': 'dissipation'},
 'dissociate':{'noun': 'dissociation'},
 'dissolve':{'noun': 'dissolution'},
 'dissuade':{'noun': 'dissuasion'},
 'distill':{'noun': 'distillation', 'actor': 'distiller'},
 'distort':{'noun': 'distortion'},
 'distract':{'noun': 'distraction'},
 'distribute':{'noun': 'distribution', 'actor': 'distributor'},
 'disturb':{'noun': 'disturbance'},
 'divagate':{'noun': 'divagation'},
 'divaricate':{'noun': 'divarication'},
 'dive':{'actor': 'diver'},
 'diversify':{'noun': 'diversification'},
 'divert':{'noun': 'diversion'},
 'divide':{'noun': 'division'},
 'divine':{'noun': 'divination'},
 'divorce':{'noun': 'divorcement'},
 'divulge':{'noun': 'divulgement'},
 'document':{'noun': 'documentation'},
 'dodge':{'actor': 'dodger'},
 'domesticate':{'noun': 'domestication'},
 'dominate':{'noun': 'domination'},
 'donate':{'noun': 'donation'},
 'double':{'noun': 'doubling'},
 'doubt':{'noun': 'doubt', 'actor': 'doubter'},
 'downgrade':{'noun': 'downgrade'},
 'downmodulate':{'noun': 'downmodulation'},
 'downregulate':{'noun': 'downregulation'},
 'draft':{'noun': 'draft'},
 'drag':{'actor': 'dragger'},
 'drain':{'noun': 'drain'},
 'dramatise':{'noun': 'dramatisation'},
 'dramatize':{'noun': 'dramatization'},
 'draw':{'noun': 'drawing', 'actor': 'illustrator'},
 'dress':{'noun': 'dressing'},
 'drift':{'noun': 'drift'},
 'drill':{'noun': 'drill'},
 'drink':{'noun': 'drinking', 'actor': 'drinker'},
 'drive':{'noun': 'drive', 'actor': 'driver'},
 'drop':{'noun': 'drop'},
 'drum':{'actor': 'drummer'},
 'dub':{'noun': 'dubbing'},
 'duel':{'actor': 'dueller'},
 'dump':{'noun': 'dump'},
 'duplicate':{'noun': 'duplication'},
 'dwell':{'actor': 'dweller'},
 'dye':{'actor': 'dyer'},
 'dysregulate':{'noun': 'dysregulation'},
 'earn':{'noun': 'earning', 'actor': 'earner'},
 'ease':{'noun': 'easing'},
 'eat':{'noun': 'consumption', 'actor': 'eater'},
 'echo':{'noun': 'echo'},
 'edify':{'noun': 'edification'},
 'edit':{'noun': 'edition', 'actor': 'editor'},
 'educate':{'noun': 'education'},
 'efface':{'noun': 'effacement'},
 'effectuate':{'noun': 'effectuation'},
 'effuse':{'noun': 'effusion'},
 'ejaculate':{'noun': 'ejaculation'},
 'eject':{'noun': 'ejection'},
 'elaborate':{'noun': 'elaboration'},
 'elate':{'noun': 'elation'},
 'elect':{'noun': 'election'},
 'electrify':{'noun': 'electrification'},
 'electrocute':{'noun': 'electrocution'},
 'elevate':{'noun': 'elevation'},
 'elicit':{'noun': 'elicitation'},
 'elide':{'noun': 'elision'},
 'eliminate':{'noun': 'elimination'},
 'elongate':{'noun': 'elongation'},
 'elope':{'noun': 'elopement'},
 'elucidate':{'noun': 'elucidation'},
 'elude':{'noun': 'elusion'},
 'elute':{'noun': 'elution'},
 'emaciate':{'noun': 'emaciation'},
 'emanate':{'noun': 'emanation'},
 'emancipate':{'noun': 'emancipation'},
 'emasculate':{'noun': 'emasculation'},
 'embalm':{'noun': 'embalmment', 'actor': 'embalmer'},
 'embark':{'noun': 'embarkation'},
 'embarrass':{'noun': 'embarrassment'},
 'embellish':{'noun': 'embellishment'},
 'embezzle':{'noun': 'embezzlement'},
 'embitter':{'noun': 'embitterment'},
 'embody':{'noun': 'embodiment'},
 'emboss':{'noun': 'embossment'},
 'embroider':{'actor': 'embroiderer'},
 'embroil':{'noun': 'embroilment'},
 'emend':{'noun': 'emendation'},
 'emerge':{'noun': 'emergence'},
 'emigrate':{'noun': 'emigration'},
 'emit':{'noun': 'emission', 'actor': 'emitter'},
 'emote':{'noun': 'emotion'},
 'emphasize':{'noun': 'emphasis'},
 'employ':{'noun': 'employment', 'actor': 'employer'},
 'empower':{'noun': 'empowerment'},
 'emulate':{'noun': 'emulation'},
 'enact':{'noun': 'enactment'},
 'encamp':{'noun': 'encampment'},
 'encase':{'noun': 'encasement'},
 'enchant':{'noun': 'enchantment'},
 'encircle':{'noun': 'encirclement'},
 'encode':{'actor': 'encoder'},
 'encompass':{'noun': 'encompassment'},
 'encounter':{'noun': 'encounter'},
 'encourage':{'noun': 'encouragement'},
 'encroach':{'noun': 'encroachment'},
 'encrust':{'noun': 'encrustation'},
 'end':{'noun': 'end'},
 'endanger':{'noun': 'endangerment'},
 'endear':{'noun': 'endearment'},
 'endorse':{'noun': 'endorsement'},
 'endow':{'noun': 'endowment'},
 'endure':{'noun': 'endurance'},
 'enervate':{'noun': 'enervation'},
 'enfeeble':{'noun': 'enfeeblement'},
 'enforce':{'noun': 'enforcement', 'actor': 'enforcer'},
 'enfranchise':{'noun': 'enfranchisement'},
 'engage':{'noun': 'engagement'},
 'engineer':{'noun': 'engineering', 'actor': 'engineer'},
 'engross':{'noun': 'engrossment'},
 'enhance':{'noun': 'enhancement'},
 'enjoin':{'noun': 'enjoinment'},
 'enjoy':{'noun': 'enjoyment'},
 'enlarge':{'noun': 'enlargement'},
 'enlighten':{'noun': 'enlightenment'},
 'enlist':{'noun': 'enlistment'},
 'ennoble':{'noun': 'ennoblement'},
 'enquire':{'noun': 'enquiry', 'actor': 'enquirer'},
 'enrage':{'noun': 'enragement'},
 'enrich':{'noun': 'enrichment'},
 'enroll':{'noun': 'enrollment'},
 'enslave':{'noun': 'enslavement'},
 'entail':{'noun': 'entailment'},
 'entangle':{'noun': 'entanglement'},
 'enter':{'noun': 'entrance'},
 'entertain':{'noun': 'entertainment', 'actor': 'entertainer'},
 'enthrall':{'noun': 'enthrallment'},
 'enthrone':{'noun': 'enthronement'},
 'entice':{'noun': 'enticement'},
 'entitle':{'noun': 'entitlement'},
 'entomb':{'noun': 'entombment'},
 'entrance':{'noun': 'entrancement'},
 'entrench':{'noun': 'entrenchment'},
 'enumerate':{'noun': 'enumeration'},
 'enunciate':{'noun': 'enunciation'},
 'envelop':{'noun': 'envelopment'},
 'environ':{'noun': 'environment'},
 'equal':{'noun': 'equality'},
 'equalize':{'noun': 'equalization'},
 'equate':{'noun': 'equation'},
 'equip':{'noun': 'equipment'},
 'equivocate':{'noun': 'equivocation'},
 'eradicate':{'noun': 'eradication'},
 'erase':{'noun': 'erasure'},
 'erect':{'noun': 'erection'},
 'erode':{'noun': 'erosion'},
 'eruct':{'noun': 'eructation'},
 'erupt':{'noun': 'eruption'},
 'escalate':{'noun': 'escalation'},
 'escape':{'noun': 'escape'},
 'espouse':{'noun': 'espousal'},
 'establish':{'noun': 'establishment'},
 'estimate':{'noun': 'estimate', 'actor': 'estimator'},
 'estivate':{'noun': 'estivation'},
 'estrange':{'noun': 'estrangement'},
 'evacuate':{'noun': 'evacuation'},
 'evade':{'noun': 'evasion'},
 'evaluate':{'noun': 'evaluation', 'actor': 'evaluator'},
 'evaporate':{'noun': 'evaporation'},
 'evict':{'noun': 'eviction'},
 'evolve':{'noun': 'evolution'},
 'exacerbate':{'noun': 'exacerbation'},
 'exact':{'noun': 'exaction'},
 'exaggerate':{'noun': 'exaggeration'},
 'exalt':{'noun': 'exaltation'},
 'examine':{'noun': 'examination', 'actor': 'examiner'},
 'exasperate':{'noun': 'exasperation'},
 'excavate':{'noun': 'excavation', 'actor': 'excavator'},
 'exceed':{'noun': 'excess'},
 'except':{'noun': 'exception'},
 'exchange':{'noun': 'exchange'},
 'excise':{'noun': 'excision'},
 'excite':{'noun': 'excitation'},
 'exclude':{'noun': 'exclusion'},
 'excogitate':{'noun': 'excogitation'},
 'excommunicate':{'noun': 'excommunication'},
 'excoriate':{'noun': 'excoriation'},
 'excrete':{'noun': 'excretion'},
 'excruciate':{'noun': 'excruciation'},
 'exculpate':{'noun': 'exculpation'},
 'excuse':{'noun': 'excuse'},
 'execrate':{'noun': 'execration'},
 'execute':{'noun': 'execution', 'actor': 'executor'},
 'exemplify':{'noun': 'exemplification'},
 'exempt':{'noun': 'exemption'},
 'exercise':{'noun': 'exercise'},
 'exert':{'noun': 'exertion'},
 'exhale':{'noun': 'exhalation'},
 'exhaust':{'noun': 'exhaustion'},
 'exhibit':{'noun': 'exhibition', 'actor': 'exhibitor'},
 'exhilarate':{'noun': 'exhilaration'},
 'exhort':{'noun': 'exhortation'},
 'exhume':{'noun': 'exhumation'},
 'exist':{'noun': 'existence'},
 'exonerate':{'noun': 'exoneration'},
 'expand':{'noun': 'expansion'},
 'expatriate':{'noun': 'expatriation'},
 'expect':{'noun': 'expectation'},
 'expectorate':{'noun': 'expectoration'},
 'expedite':{'noun': 'expedition'},
 'expel':{'noun': 'expulsion'},
 'experience':{'noun': 'experience'},
 'experiment':{'noun': 'experiment'},
 'expiate':{'noun': 'expiation'},
 'expire':{'noun': 'expiration'},
 'explain':{'noun': 'explanation'},
 'explicate':{'noun': 'explication'},
 'explode':{'noun': 'explosion'},
 'exploit':{'noun': 'exploitation', 'actor': 'exploiter'},
 'explore':{'noun': 'exploration'},
 'export':{'noun': 'export', 'actor': 'exporter'},
 'expose':{'noun': 'exposition'},
 'exposit':{'noun': 'exposition'},
 'expostulate':{'noun': 'expostulation'},
 'express':{'noun': 'expression'},
 'expropriate':{'noun': 'expropriation'},
 'expurgate':{'noun': 'expurgation'},
 'extemporise':{'noun': 'extemporisation'},
 'extemporize':{'noun': 'extemporization'},
 'extend':{'noun': 'extension'},
 'extenuate':{'noun': 'extenuation'},
 'exteriorize':{'noun': 'exteriorization'},
 'exterminate':{'noun': 'extermination'},
 'externalise':{'noun': 'externalisation'},
 'externalize':{'noun': 'externalization'},
 'extirpate':{'noun': 'extirpation'},
 'extol':{'actor': 'extoller'},
 'extort':{'noun': 'extortion'},
 'extract':{'noun': 'extraction'},
 'extradite':{'noun': 'extradition'},
 'extrapolate':{'noun': 'extrapolation'},
 'extricate':{'noun': 'extrication'},
 'extrude':{'noun': 'extrusion'},
 'exudate':{'noun': 'exudation'},
 'exude':{'noun': 'exudation'},
 'exult':{'noun': 'exultation'},
 'fabricate':{'noun': 'fabrication', 'actor': 'fabricator'},
 'facilitate':{'noun': 'facilitation', 'actor': 'facilitator'},
 'factorize':{'noun': 'factorization'},
 'fail':{'noun': 'failure'},
 'fall':{'noun': 'fall'},
 'falsify':{'noun': 'falsification'},
 'familiarize':{'noun': 'familiarization'},
 'farm':{'actor': 'farmer'},
 'farnesylate':{'noun': 'farnesylation'},
 'fascinate':{'noun': 'fascination'},
 'father':{'actor': 'father'},
 'favor':{'noun': 'favor'},
 'fear':{'noun': 'fear'},
 'federalize':{'noun': 'federalization'},
 'federate':{'noun': 'federation'},
 'feed':{'noun': 'feeding'},
 'feel':{'noun': 'feeling'},
 'felicitate':{'noun': 'felicitation'},
 'fellate':{'noun': 'fellation'},
 'ferment':{'noun': 'fermentation'},
 'fertilize':{'noun': 'fertilization'},
 'fictionalize':{'noun': 'fictionalization'},
 'fight':{'noun': 'fight', 'actor': 'fighter'},
 'file':{'noun': 'filing'},
 'fill':{'noun': 'filling'},
 'filter':{'noun': 'filtration'},
 'filtrate':{'noun': 'filtration'},
 'finalize':{'noun': 'finalization'},
 'finance':{'noun': 'financing'},
 'find':{'noun': 'finding'},
 'fine':{'noun': 'fining'},
 'finish':{'noun': 'finish'},
 'fire':{'noun': 'firing'},
 'fish':{'actor': 'fisher'},
 'fit':{'noun': 'fitting'},
 'fix':{'noun': 'fix'},
 'fixate':{'noun': 'fixation'},
 'flagellate':{'noun': 'flagellation'},
 'flap':{'actor': 'flapper'},
 'flash':{'noun': 'flash'},
 'flee':{'noun': 'flight'},
 'flirt':{'noun': 'flirtation'},
 'float':{'noun': 'floatation'},
 'flocculate':{'noun': 'flocculation'},
 'flood':{'noun': 'flood'},
 'flow':{'noun': 'flow'},
 'fluctuate':{'noun': 'fluctuation'},
 'fluoridate':{'noun': 'fluoridation'},
 'fluoridize':{'noun': 'fluoridization'},
 'fly':{'noun': 'flight', 'actor': 'flyer'},
 'focus':{'noun': 'focus'},
 'foliate':{'noun': 'foliation'},
 'follow':{'noun': 'following', 'actor': 'follower'},
 'foment':{'noun': 'fomentation'},
 'forbear':{'noun': 'forbearance'},
 'forecast':{'noun': 'forecast', 'actor': 'forecaster'},
 'forfeit':{'noun': 'forfeiture'},
 'forge':{'noun': 'forgery', 'actor': 'forger'},
 'form':{'noun': 'formation'},
 'formalise':{'noun': 'formalisation'},
 'formalize':{'noun': 'formalization'},
 'formulate':{'noun': 'formulation'},
 'fornicate':{'noun': 'fornication'},
 'fortify':{'noun': 'fortification'},
 'fossilize':{'noun': 'fossilization'},
 'found':{'noun': 'foundation', 'actor': 'founder'},
 'fraction':{'noun': 'fractionation'},
 'fractionate':{'noun': 'fractionation'},
 'fragment':{'noun': 'fragmentation'},
 'frame':{'actor': 'framer'},
 'fraternize':{'noun': 'fraternization'},
 'free':{'noun': 'liberation'},
 'freeze':{'noun': 'freeze'},
 'fructify':{'noun': 'fructification'},
 'fruit':{'noun': 'fruition'},
 'frustrate':{'noun': 'frustration'},
 'fulfil':{'noun': 'fulfilment'},
 'fulfill':{'noun': 'fulfillment'},
 'fulminate':{'noun': 'fulmination'},
 'fumigate':{'noun': 'fumigation'},
 'function':{'noun': 'function'},
 'fund':{'noun': 'fund'},
 'further':{'noun': 'furtherance'},
 'fuse':{'noun': 'fusion'},
 'gain':{'noun': 'gain'},
 'gamble':{'noun': 'gamble', 'actor': 'gambler'},
 'garden':{'actor': 'gardener'},
 'gasify':{'noun': 'gasification'},
 'gather':{'noun': 'gathering'},
 'geminate':{'noun': 'gemination'},
 'generalize':{'noun': 'generalization'},
 'generate':{'noun': 'generation', 'actor': 'generator'},
 'genuflect':{'noun': 'genuflection'},
 'geranylgeranylate':{'noun': 'geranylgeranylation'},
 'germinate':{'noun': 'germination'},
 'gesticulate':{'noun': 'gesticulation'},
 'give':{'noun': 'gift'},
 'glamorize':{'noun': 'glamorization'},
 'glaze':{'actor': 'glazer'},
 'glorify':{'noun': 'glorification'},
 'glycosylate':{'noun': 'glycosylation'},
 'golf':{'actor': 'golfer'},
 'govern':{'noun': 'governance', 'actor': 'government'},
 'graduate':{'noun': 'graduation'},
 'grant':{'noun': 'grant'},
 'gratify':{'noun': 'gratification'},
 'gravitate':{'noun': 'gravitation'},
 'greet':{'noun': 'greeting'},
 'grieve':{'noun': 'grief'},
 'grow':{'noun': 'growth', 'actor': 'grower'},
 'guarantee':{'noun': 'guarantee'},
 'guard':{'noun': 'guarding', 'actor': 'guard'},
 'guess':{'noun': 'guess'},
 'guide':{'noun': 'guidance', 'actor': 'guide'},
 'gyrate':{'noun': 'gyration'},
 'habituate':{'noun': 'habituation'},
 'hack':{'actor': 'hacker'},
 'hail':{'noun': 'hail'},
 'hallucinate':{'noun': 'hallucination'},
 'halt':{'noun': 'halt'},
 'handle':{'noun': 'handling'},
 'hang':{'noun': 'hanging'},
 'happen':{'noun': 'happening'},
 'harass':{'noun': 'harassment'},
 'harm':{'noun': 'harm'},
 'harmonize':{'noun': 'harmonization'},
 'harvest':{'noun': 'harvest'},
 'hate':{'noun': 'hatred'},
 'haunt':{'noun': 'haunting'},
 'head':{'noun': 'head'},
 'hear':{'noun': 'hearing'},
 'hedge':{'noun': 'hedging'},
 'help':{'noun': 'help', 'actor': 'helper'},
 'herd':{'actor': 'herder'},
 'hesitate':{'noun': 'hesitation'},
 'heterodimerize':{'noun': 'heterodimerization'},
 'hibernate':{'noun': 'hibernation'},
 'hide':{'noun': 'hiding'},
 'highlight':{'noun': 'highlighting'},
 'hike':{'actor': 'hiker'},
 'hinder':{'noun': 'hindrance'},
 'hint':{'noun': 'hint'},
 'hire':{'noun': 'hiring'},
 'hit':{'noun': 'hit'},
 'hoard':{'actor': 'hoarder'},
 'hold out':{'noun': 'hold-out'},
 'hold up':{'noun': 'hold-up'},
 'hold':{'noun': 'holding', 'actor': 'holder'},
 'homodimerize':{'noun': 'homodimerization'},
 'homogenize':{'noun': 'homogenization'},
 'honor':{'noun': 'honor'},
 'hop':{'actor': 'hopper'},
 'hope':{'noun': 'hope'},
 'hospitalize':{'noun': 'hospitalization'},
 'house':{'noun': 'housing'},
 'housesit':{'actor': 'housesitter'},
 'humanise':{'noun': 'humanisation'},
 'humanize':{'noun': 'humanization'},
 'humiliate':{'noun': 'humiliation'},
 'hunt':{'noun': 'hunt', 'actor': 'hunter'},
 'hybridize':{'noun': 'hybridization'},
 'hydrate':{'noun': 'hydration'},
 'hydrolyze':{'noun': 'hydrolysis'},
 'hydroxylate':{'noun': 'hydroxylation'},
 'hyperphosphorylate':{'noun': 'hyperphosphorylation'},
 'hyphen':{'noun': 'hyphenation'},
 'hyphenate':{'noun': 'hyphenation'},
 'hypnotize':{'actor': 'hypnotist'},
 'hypostatize':{'noun': 'hypostatization'},
 'idealise':{'noun': 'idealisation'},
 'idealize':{'noun': 'idealization'},
 'ideate':{'noun': 'ideation'},
 'identify':{'noun': 'identification'},
 'idolize':{'noun': 'idolization'},
 'ignite':{'noun': 'ignition'},
 'illuminate':{'noun': 'illumination'},
 'illumine':{'noun': 'illumination'},
 'illustrate':{'noun': 'illustration', 'actor': 'illustrator'},
 'imagine':{'noun': 'imagination'},
 'imitate':{'noun': 'imitation', 'actor': 'imitator'},
 'immerse':{'noun': 'immersion'},
 'immigrate':{'noun': 'immigration'},
 'immobilize':{'noun': 'immobilization'},
 'immolate':{'noun': 'immolation'},
 'immunize':{'noun': 'immunization'},
 'immunoblot':{'noun': 'immunoblotting'},
 'immunodetect':{'noun': 'immunodetection'},
 'immunoprecipitate':{'noun': 'immunoprecipitation'},
 'impact':{'noun': 'impact'},
 'impair':{'noun': 'impairment'},
 'impale':{'noun': 'impalement'},
 'impart':{'noun': 'impartation'},
 'impeach':{'noun': 'impeachment'},
 'impel':{'noun': 'impulsion', 'actor': 'impeller'},
 'impersonate':{'noun': 'impersonation', 'actor': 'impersonator'},
 'impinge':{'noun': 'impingement'},
 'implant':{'noun': 'implantation'},
 'implement':{'noun': 'implementation'},
 'implicate':{'noun': 'implication'},
 'implode':{'noun': 'implosion'},
 'imply':{'noun': 'implication'},
 'import':{'noun': 'import', 'actor': 'importer'},
 'impose':{'noun': 'imposition'},
 'impound':{'noun': 'impoundment'},
 'impoverish':{'noun': 'impoverishment'},
 'imprecate':{'noun': 'imprecation'},
 'impregnate':{'noun': 'impregnation'},
 'impress':{'noun': 'impression'},
 'imprison':{'noun': 'imprisonment'},
 'improve':{'noun': 'improvement'},
 'improvise':{'noun': 'improvisation'},
 'impute':{'noun': 'imputation'},
 'inactivate':{'noun': 'inactivation'},
 'inaugurate':{'noun': 'inauguration'},
 'incarcerate':{'noun': 'incarceration'},
 'incarnate':{'noun': 'incarnation'},
 'incinerate':{'noun': 'incineration'},
 'incise':{'noun': 'incision'},
 'incite':{'noun': 'incitation'},
 'incline':{'noun': 'inclination'},
 'include':{'noun': 'inclusion'},
 'incorporate':{'noun': 'incorporation'},
 'increase':{'noun': 'increase'},
 'incriminate':{'noun': 'incrimination'},
 'incubate':{'noun': 'incubation'},
 'inculcate':{'noun': 'inculcation'},
 'inculpate':{'noun': 'inculpation'},
 'indemnify':{'noun': 'indemnification'},
 'indent':{'noun': 'indentation'},
 'index':{'noun': 'indexation', 'actor': 'indexer'},
 'indicate':{'noun': 'indication'},
 'indict':{'noun': 'indiction'},
 'indispose':{'noun': 'indisposition'},
 'individualize':{'noun': 'individualization'},
 'individuate':{'noun': 'individuation'},
 'indoctrinate':{'noun': 'indoctrination'},
 'induce':{'noun': 'inducement'},
 'induct':{'noun': 'inductance'},
 'industrialize':{'noun': 'industrialization'},
 'inebriate':{'noun': 'inebriation'},
 'infatuate':{'noun': 'infatuation'},
 'infect':{'noun': 'infection'},
 'infest':{'noun': 'infestation'},
 'infiltrate':{'noun': 'infiltration'},
 'inflate':{'noun': 'inflation'},
 'inflect':{'noun': 'inflection'},
 'inflict':{'noun': 'infliction'},
 'influence':{'noun': 'influence'},
 'inform':{'noun': 'information'},
 'infract':{'noun': 'infraction'},
 'infringe':{'noun': 'infringement'},
 'infuriate':{'noun': 'infuriation'},
 'infuse':{'noun': 'infusion'},
 'ingest':{'noun': 'ingestion'},
 'inhabit':{'noun': 'inhabitation'},
 'inhale':{'noun': 'inhalation'},
 'inherit':{'noun': 'inheritance'},
 'inhibit':{'noun': 'inhibition'},
 'initiate':{'noun': 'initiation'},
 'inject':{'noun': 'injection'},
 'injure':{'noun': 'injury'},
 'innovate':{'noun': 'innovation', 'actor': 'innovator'},
 'inoculate':{'noun': 'inoculation'},
 'input':{'actor': 'inputter'},
 'inquire':{'noun': 'inquiry'},
 'inseminate':{'noun': 'insemination'},
 'insert':{'noun': 'insertion'},
 'insinuate':{'noun': 'insinuation'},
 'insist':{'noun': 'insistence'},
 'inspect':{'noun': 'inspection', 'actor': 'inspector'},
 'inspire':{'noun': 'inspiration'},
 'install':{'noun': 'installation'},
 'instigate':{'noun': 'instigation'},
 'instill':{'noun': 'instillation'},
 'institute':{'noun': 'institution'},
 'instruct':{'noun': 'instruction', 'actor': 'instructor'},
 'instrument':{'noun': 'instrumentation'},
 'instrumentate':{'noun': 'instrumentation'},
 'insulate':{'noun': 'insulation'},
 'insure':{'noun': 'insurance', 'actor': 'insurer'},
 'integrate':{'noun': 'integration'},
 'intend':{'noun': 'intention'},
 'intensify':{'noun': 'intensification'},
 'inter':{'noun': 'interment'},
 'interact':{'noun': 'interaction'},
 'intercalate':{'noun': 'intercalation'},
 'intercede':{'noun': 'intercession'},
 'intercept':{'noun': 'interception'},
 'intercommunicate':{'noun': 'intercommunication'},
 'interconnect':{'noun': 'interconnection'},
 'interdict':{'noun': 'interdiction'},
 'interest':{'noun': 'interest'},
 'interfere':{'noun': 'interference'},
 'interject':{'noun': 'interjection'},
 'interlope':{'actor': 'interloper'},
 'intermit':{'noun': 'intermission'},
 'intern':{'noun': 'internment'},
 'internalize':{'noun': 'internalization'},
 'internationalise':{'noun': 'internationalisation'},
 'internationalize':{'noun': 'internationalization'},
 'interpellate':{'noun': 'interpellation'},
 'interpolate':{'noun': 'interpolation'},
 'interpose':{'noun': 'interposition'},
 'interpret':{'noun': 'interpretation', 'actor': 'interpreter'},
 'interrelate':{'noun': 'interrelation'},
 'interrogate':{'noun': 'interrogation', 'actor': 'interrogator'},
 'interrupt':{'noun': 'interruption'},
 'intersect':{'noun': 'intersection'},
 'intervene':{'noun': 'intervention'},
 'interview':{'noun': 'interview', 'actor': 'interviewer'},
 'intimate':{'noun': 'intimation'},
 'intimidate':{'noun': 'intimidation'},
 'intonate':{'noun': 'intonation'},
 'intone':{'noun': 'intonation'},
 'intoxicate':{'noun': 'intoxication'},
 'intrench':{'noun': 'intrenchment'},
 'introduce':{'noun': 'introduction'},
 'introject':{'noun': 'introjection'},
 'introspect':{'noun': 'introspection'},
 'intrude':{'noun': 'intrusion', 'actor': 'intruder'},
 'invade':{'noun': 'invasion'},
 'invaginate':{'noun': 'invagination'},
 'invalid':{'noun': 'invalidation'},
 'invalidate':{'noun': 'invalidation'},
 'invent':{'noun': 'invention', 'actor': 'inventor'},
 'invest':{'noun': 'investment', 'actor': 'investor'},
 'investigate':{'noun': 'investigation', 'actor': 'investigator'},
 'invigilate':{'noun': 'invigilation'},
 'invite':{'noun': 'invitation'},
 'involve':{'noun': 'involvement'},
 'iodinate':{'noun': 'iodination'},
 'ionize':{'noun': 'ionization'},
 'irradiate':{'noun': 'irradiation'},
 'irrigate':{'noun': 'irrigation'},
 'irritate':{'noun': 'irritation'},
 'irrupt':{'noun': 'irruption'},
 'isolate':{'noun': 'isolation'},
 'isomerize':{'noun': 'isomerization'},
 'issue':{'noun': 'issue'},
 'itemize':{'noun': 'itemization'},
 'iterate':{'noun': 'iteration'},
 'jail':{'noun': 'jailing'},
 'jest':{'actor': 'jester'},
 'jewel':{'actor': 'jeweler'},
 'jog':{'actor': 'jogger'},
 'joke':{'actor': 'joker'},
 'jolt':{'noun': 'jolt'},
 'jubilate':{'noun': 'jubilation'},
 'judge':{'noun': 'judgement'},
 'juggle':{'actor': 'juggler'},
 'jump':{'noun': 'jump'},
 'justify':{'noun': 'justification'},
 'juxtapose':{'noun': 'juxtaposition'},
 'keep':{'actor': 'keeper'},
 'kick':{'actor': 'kicker'},
 'kill':{'noun': 'killing', 'actor': 'killer'},
 'kiss':{'actor': 'kisser'},
 'knit':{'actor': 'knitter'},
 'knock out':{'noun': 'knock-out'},
 'knock':{'noun': 'knock'},
 'know':{'noun': 'knowledge'},
 'label':{'noun': 'label'},
 'labor':{'actor': 'laborer'},
 'lacerate':{'noun': 'laceration'},
 'lack':{'noun': 'lack'},
 'lactate':{'noun': 'lactation'},
 'lament':{'noun': 'lamentation'},
 'laminate':{'noun': 'lamination'},
 'land':{'noun': 'landing'},
 'laud':{'actor': 'lauder'},
 'laugh':{'noun': 'laughter'},
 'launch':{'noun': 'launch'},
 'lay off':{'noun': 'lay-off'},
 'lead':{'noun': 'leadership', 'actor': 'leader'},
 'leak':{'noun': 'leakage'},
 'lean':{'noun': 'leaning'},
 'leap':{'noun': 'leap'},
 'learn':{'noun': 'learning'},
 'lease':{'noun': 'lease'},
 'leave':{'noun': 'departure'},
 'legalize':{'noun': 'legalization'},
 'legislate':{'noun': 'legislation', 'actor': 'legislator'},
 'lend':{'noun': 'lending', 'actor': 'lender'},
 'level':{'actor': 'leveller'},
 'leverage':{'noun': 'leverage'},
 'levitate':{'noun': 'levitation'},
 'liberalize':{'noun': 'liberalization'},
 'liberate':{'noun': 'liberation'},
 'license':{'noun': 'license'},
 'lie':{'noun': 'lie'},
 'lift':{'noun': 'lifting'},
 'limit':{'noun': 'limit'},
 'line up':{'noun': 'line-up'},
 'link':{'noun': 'link'},
 'liquidate':{'noun': 'liquidation', 'actor': 'liquidator'},
 'list':{'noun': 'list'},
 'listen':{'noun': 'listening', 'actor': 'listener'},
 'litigate':{'noun': 'litigation', 'actor': 'litigator'},
 'live':{'noun': 'life'},
 'loan':{'noun': 'loan'},
 'lobby':{'noun': 'lobbying', 'actor': 'lobbyist'},
 'localise':{'noun': 'localisation'},
 'localize':{'noun': 'localization'},
 'locate':{'noun': 'location'},
 'lock':{'noun': 'locking'},
 'locomote':{'noun': 'locomotion'},
 'lodge':{'noun': 'lodgement'},
 'log':{'noun': 'logging'},
 'loom':{'noun': 'loom'},
 'lose':{'noun': 'loss', 'actor': 'loser'},
 'love':{'noun': 'love', 'actor': 'lover'},
 'lubricate':{'noun': 'lubrication'},
 'lure':{'noun': 'lure'},
 'macerate':{'noun': 'maceration'},
 'machine':{'noun': 'machination'},
 'maculate':{'noun': 'maculation'},
 'magnetize':{'noun': 'magnetization'},
 'magnify':{'noun': 'magnification'},
 'mail':{'noun': 'mailing'},
 'maintain':{'noun': 'maintenance'},
 'make':{'noun': 'making', 'actor': 'maker'},
 'maledict':{'noun': 'malediction'},
 'malign':{'noun': 'malignance'},
 'maltreat':{'noun': 'maltreatment'},
 'manage':{'noun': 'management', 'actor': 'management'},
 'mandate':{'noun': 'mandate'},
 'maneuver':{'noun': 'maneuver'},
 'manifest':{'noun': 'manifestation'},
 'manipulate':{'noun': 'manipulation'},
 'manufacture':{'noun': 'manufacture', 'actor': 'manufacturer'},
 'manumit':{'noun': 'manumission'},
 'map':{'actor': 'mapper'},
 'march':{'noun': 'march', 'actor': 'marcher'},
 'mark':{'noun': 'mark'},
 'market':{'noun': 'marketing'},
 'marry':{'noun': 'marriage'},
 'massage':{'actor': 'masseur'},
 'masticate':{'noun': 'mastication'},
 'masturbate':{'noun': 'masturbation'},
 'match':{'noun': 'match'},
 'materialize':{'noun': 'materialization'},
 'matriculate':{'noun': 'matriculation'},
 'maturate':{'noun': 'maturation'},
 'mature':{'noun': 'maturation'},
 'maximize':{'noun': 'maximization'},
 'mean':{'noun': 'meaning'},
 'measure':{'noun': 'measurement'},
 'mechanize':{'noun': 'mechanization'},
 'mediate':{'noun': 'mediation', 'actor': 'mediator'},
 'medicate':{'noun': 'medication'},
 'meditate':{'noun': 'meditation'},
 'meet':{'noun': 'meeting'},
 'meliorate':{'noun': 'melioration'},
 'memorialize':{'noun': 'memorialization'},
 'memorize':{'noun': 'memorization'},
 'mend':{'actor': 'mender'},
 'menstruate':{'noun': 'menstruation'},
 'mention':{'noun': 'mention'},
 'merchandise':{'actor': 'merchandiser'},
 'merge':{'noun': 'merger'},
 'methylate':{'noun': 'methylation'},
 'migrate':{'noun': 'migration'},
 'militarize':{'noun': 'militarization'},
 'mimic':{'actor': 'mime'},
 'mine':{'noun': 'mining', 'actor': 'miner'},
 'miniaturise':{'noun': 'miniaturisation'},
 'miniaturize':{'noun': 'miniaturization'},
 'minimize':{'noun': 'minimization'},
 'misally':{'noun': 'misalliance'},
 'misapply':{'noun': 'misapplication'},
 'misappropriate':{'noun': 'misappropriation'},
 'misbehave':{'noun': 'misbehavior'},
 'miscalculate':{'noun': 'miscalculation'},
 'miscegenate':{'noun': 'miscegenation'},
 'misconceive':{'noun': 'misconception'},
 'misconstrue':{'noun': 'misconstrual'},
 'misdirect':{'noun': 'misdirection'},
 'misgovern':{'noun': 'misgovernment'},
 'misinform':{'noun': 'misinformation'},
 'misinterpret':{'noun': 'misinterpretation'},
 'mismanage':{'noun': 'mismanagement'},
 'misperceive':{'noun': 'misperception'},
 'misquote':{'noun': 'misquotation'},
 'misrepresent':{'noun': 'misrepresentation'},
 'misstate':{'noun': 'misstatement'},
 'mistranslate':{'noun': 'mistranslation'},
 'mistreat':{'noun': 'mistreatment'},
 'mitigate':{'noun': 'mitigation'},
 'mix':{'noun': 'mix'},
 'mobilize':{'noun': 'mobilization'},
 'model':{'noun': 'model', 'actor': 'model'},
 'moderate':{'noun': 'moderation'},
 'modernize':{'noun': 'modernization'},
 'modify':{'noun': 'modification'},
 'modulate':{'noun': 'modulation'},
 'molest':{'noun': 'molestation'},
 'mollify':{'noun': 'mollification'},
 'monetize':{'noun': 'monetization'},
 'monitor':{'noun': 'monitoring', 'actor': 'monitor'},
 'monopolize':{'noun': 'monopolization'},
 'mortify':{'noun': 'mortification'},
 'motivate':{'noun': 'motivation'},
 'motorize':{'noun': 'motorization'},
 'mount':{'noun': 'mounting'},
 'move':{'noun': 'movement'},
 'mug':{'actor': 'mugger'},
 'multiply':{'noun': 'multiplication'},
 'mummify':{'noun': 'mummification'},
 'murder':{'noun': 'murder', 'actor': 'murderer'},
 'murmur':{'noun': 'murmuration'},
 'mutate':{'noun': 'mutation'},
 'mutilate':{'noun': 'mutilation'},
 'mystify':{'noun': 'mystification'},
 'mythologize':{'noun': 'mythologization'},
 'name':{'noun': 'name'},
 'narrate':{'noun': 'narration', 'actor': 'narrator'},
 'narrow':{'noun': 'narrowing'},
 'nationalize':{'noun': 'nationalization'},
 'naturalize':{'noun': 'naturalization'},
 'navigate':{'noun': 'navigation', 'actor': 'navigator'},
 'need':{'noun': 'necessity'},
 'negate':{'noun': 'negation'},
 'negociate':{'noun': 'negociation'},
 'negotiate':{'noun': 'negotiation', 'actor': 'negotiator'},
 'neutralize':{'noun': 'neutralization'},
 'nip':{'actor': 'nipper'},
 'nitrify':{'noun': 'nitrification'},
 'nominate':{'noun': 'nomination'},
 'normalize':{'noun': 'normalization'},
 'note':{'noun': 'notation'},
 'notify':{'noun': 'notification'},
 'nourish':{'noun': 'nourishment'},
 'nullify':{'noun': 'nullification'},
 'nurse':{'noun': 'nursing'},
 'nutate':{'noun': 'nutation'},
 'obey':{'noun': 'obedience'},
 'obfuscate':{'noun': 'obfuscation'},
 'object':{'noun': 'objection'},
 'objurgate':{'noun': 'objurgation'},
 'obligate':{'noun': 'obligation'},
 'oblige':{'noun': 'obligation'},
 'obliterate':{'noun': 'obliteration'},
 'observe':{'noun': 'observation', 'actor': 'observer'},
 'obsess':{'noun': 'obsession'},
 'obstruct':{'noun': 'obstruction'},
 'obviate':{'noun': 'obviation'},
 'occlude':{'noun': 'occlusion'},
 'occupy':{'noun': 'occupation'},
 'occur':{'noun': 'occurrence'},
 'offend':{'noun': 'offense', 'actor': 'offender'},
 'offer':{'noun': 'offer'},
 'officiate':{'noun': 'officiation'},
 'omit':{'noun': 'omission'},
 'open':{'noun': 'opening'},
 'operate':{'noun': 'operation', 'actor': 'operator'},
 'opine':{'noun': 'opinion'},
 'oppose':{'noun': 'opposition'},
 'opt':{'noun': 'option'},
 'orate':{'noun': 'oration'},
 'orchestrate':{'noun': 'orchestration', 'actor': 'orchestrator'},
 'order':{'noun': 'order'},
 'organise':{'noun': 'organisation'},
 'organize':{'noun': 'organization', 'actor': 'organizer'},
 'orient':{'noun': 'orientation'},
 'orientate':{'noun': 'orientation'},
 'originate':{'noun': 'origination', 'actor': 'originator'},
 'ornament':{'noun': 'ornamentation'},
 'oscillate':{'noun': 'oscillation'},
 'osculate':{'noun': 'osculation'},
 'ossify':{'noun': 'ossification'},
 'oust':{'noun': 'ousting'},
 'outline':{'noun': 'outline'},
 'output':{'actor': 'outputter'},
 'overcapitalize':{'noun': 'overcapitalization'},
 'overestimate':{'noun': 'overestimation'},
 'overexert':{'noun': 'overexertion'},
 'overgeneralize':{'noun': 'overgeneralization'},
 'overhaul':{'noun': 'overhaul'},
 'overpay':{'noun': 'overpayment'},
 'overproduce':{'noun': 'overproduction'},
 'overprotect':{'noun': 'overprotection'},
 'overreact':{'noun': 'overreaction'},
 'override':{'noun': 'override'},
 'oversimplify':{'noun': 'oversimplification'},
 'overstate':{'noun': 'overstatement'},
 'overturn':{'noun': 'overturn'},
 'overvalue':{'noun': 'overvaluation'},
 'ovulate':{'noun': 'ovulation'},
 'owe':{'noun': 'debt'},
 'own':{'noun': 'ownership', 'actor': 'owner'},
 'oxidise':{'noun': 'oxidisation'},
 'oxidize':{'noun': 'oxidization'},
 'pacify':{'noun': 'pacification'},
 'pack':{'noun': 'packing', 'actor': 'packer'},
 'package':{'noun': 'packaging'},
 'paginate':{'noun': 'pagination'},
 'paint':{'noun': 'painting', 'actor': 'painter'},
 'palliate':{'noun': 'palliation'},
 'palmitoylate':{'noun': 'palmitoylation'},
 'palpate':{'noun': 'palpation'},
 'palpitate':{'noun': 'palpitation'},
 'panhandle':{'actor': 'panhandler'},
 'panic':{'noun': 'panic'},
 'parachute':{'actor': 'paratrooper'},
 'paralyze':{'noun': 'paralysis'},
 'parch':{'noun': 'parchment'},
 'park':{'noun': 'parking'},
 'participate':{'noun': 'participation'},
 'particularize':{'noun': 'particularization'},
 'pass':{'noun': 'passage'},
 'pasteurize':{'noun': 'pasteurization'},
 'patrol':{'actor': 'patroller'},
 'pattern':{'noun': 'pattern'},
 'pauperize':{'noun': 'pauperization'},
 'pave':{'noun': 'pavement'},
 'pay off':{'noun': 'pay-off'},
 'pay':{'noun': 'payment', 'actor': 'payer'},
 'peak':{'noun': 'peak'},
 'peculate':{'noun': 'peculation'},
 'pedal':{'actor': 'pedaller'},
 'peddle':{'noun': 'peddling', 'actor': 'peddler'},
 'penalize':{'noun': 'penalization'},
 'penetrate':{'noun': 'penetration'},
 'peptize':{'noun': 'peptization'},
 'perambulate':{'noun': 'perambulation'},
 'perceive':{'noun': 'perception'},
 'peregrinate':{'noun': 'peregrination'},
 'perfect':{'noun': 'perfection'},
 'perforate':{'noun': 'perforation'},
 'perform':{'noun': 'performance', 'actor': 'performer'},
 'perfuse':{'noun': 'perfusion'},
 'permeate':{'noun': 'permeation'},
 'permit':{'noun': 'permission'},
 'permute':{'noun': 'permutation'},
 'perorate':{'noun': 'peroration'},
 'perpetrate':{'noun': 'perpetration'},
 'perpetuate':{'noun': 'perpetuation'},
 'persecute':{'noun': 'persecution'},
 'persevere':{'noun': 'perseveration'},
 'persist':{'noun': 'persistence'},
 'personate':{'noun': 'personation'},
 'personify':{'noun': 'personification'},
 'perspire':{'noun': 'perspiration'},
 'persuade':{'noun': 'persuasion'},
 'perturb':{'noun': 'perturbation'},
 'peruse':{'noun': 'perusal'},
 'pervade':{'noun': 'pervasion'},
 'petrify':{'noun': 'petrification'},
 'phosphorylate':{'noun': 'phosphorylation'},
 'pick up':{'noun': 'pick-up'},
 'pick':{'noun': 'picking', 'actor': 'picker'},
 'pigment':{'noun': 'pigmentation'},
 'pilot':{'actor': 'pilot'},
 'pioneer':{'actor': 'pioneer'},
 'pitch':{'noun': 'pitching', 'actor': 'pitcher'},
 'placate':{'noun': 'placation'},
 'place':{'noun': 'placation'},
 'plagiarise':{'noun': 'plagiarisation'},
 'plagiarize':{'noun': 'plagiarization'},
 'plague':{'noun': 'plague'},
 'plan':{'noun': 'plan', 'actor': 'planner'},
 'plant':{'noun': 'planting', 'actor': 'planter'},
 'plaster':{'actor': 'plasterer'},
 'play':{'noun': 'play', 'actor': 'player'},
 'plead':{'noun': 'plea'},
 'pledge':{'noun': 'pledge'},
 'plot':{'noun': 'plot', 'actor': 'plotter'},
 'plow':{'actor': 'plowman'},
 'plunge':{'noun': 'plunge'},
 'poach':{'actor': 'poacher'},
 'polarize':{'noun': 'polarization'},
 'poll':{'noun': 'polling'},
 'pollinate':{'noun': 'pollination'},
 'pollute':{'noun': 'pollution'},
 'polymerize':{'noun': 'polymerization'},
 'popularize':{'noun': 'popularization'},
 'populate':{'noun': 'population'},
 'portray':{'noun': 'portrayal'},
 'position':{'noun': 'position'},
 'possess':{'noun': 'possession'},
 'post':{'noun': 'posting'},
 'postpone':{'noun': 'postponement'},
 'postulate':{'noun': 'postulation'},
 'potentiate':{'noun': 'potentiation'},
 'practice':{'noun': 'practice'},
 'praise':{'noun': 'praise'},
 'pray':{'actor': 'prayer'},
 'pre-try':{'noun': 'pre-trial'},
 'preach':{'noun': 'preachment', 'actor': 'preacher'},
 'prearrange':{'noun': 'prearrangement'},
 'precede':{'noun': 'precession'},
 'precipitate':{'noun': 'precipitation'},
 'preclude':{'noun': 'preclusion'},
 'preconceive':{'noun': 'preconception'},
 'predate':{'noun': 'predation'},
 'predestinate':{'noun': 'predestination'},
 'predestine':{'noun': 'predestination'},
 'predetermine':{'noun': 'predetermination'},
 'predicate':{'noun': 'predication'},
 'predict':{'noun': 'prediction', 'actor': 'predictor'},
 'predispose':{'noun': 'predisposition'},
 'predominate':{'noun': 'predomination'},
 'preempt':{'noun': 'preemption'},
 'prefabricate':{'noun': 'prefabrication'},
 'prefer':{'noun': 'preference'},
 'prefigure':{'noun': 'prefiguration'},
 'prejudge':{'noun': 'prejudgement'},
 'premeditate':{'noun': 'premeditation'},
 'prepare':{'noun': 'preparation'},
 'prepay':{'noun': 'prepayment'},
 'prescribe':{'noun': 'prescription'},
 'present':{'noun': 'presentation', 'actor': 'presenter'},
 'preserve':{'noun': 'preservation'},
 'press':{'noun': 'press'},
 'pressure':{'noun': 'pressure'},
 'presume':{'noun': 'presumption'},
 'presuppose':{'noun': 'presupposition'},
 'prevaricate':{'noun': 'prevarication'},
 'prevent':{'noun': 'prevention'},
 'price':{'noun': 'price'},
 'print':{'noun': 'printing', 'actor': 'printer'},
 'privatize':{'noun': 'privatization'},
 'probate':{'noun': 'probation'},
 'probe':{'noun': 'probation'},
 'proceed':{'noun': 'procedure'},
 'process':{'noun': 'process', 'actor': 'processor'},
 'proclaim':{'noun': 'proclamation'},
 'procrastinate':{'noun': 'procrastination'},
 'procreate':{'noun': 'procreation'},
 'procure':{'noun': 'procural'},
 'prod':{'noun': 'prodding'},
 'produce':{'noun': 'production', 'actor': 'producer'},
 'profane':{'noun': 'profanation'},
 'profit':{'noun': 'profit'},
 'profiteer':{'actor': 'profiteer'},
 'prognosticate':{'noun': 'prognostication', 'actor': 'prognosticator'},
 'program':{'noun': 'programming', 'actor': 'programmer'},
 'progress':{'noun': 'progress'},
 'prohibit':{'noun': 'prohibition'},
 'project':{'noun': 'projection'},
 'proliferate':{'noun': 'proliferation'},
 'prolong':{'noun': 'prolongation'},
 'promise':{'noun': 'promise'},
 'promote':{'noun': 'promotion', 'actor': 'promoter'},
 'promulgate':{'noun': 'promulgation'},
 'pronate':{'noun': 'pronation'},
 'pronounce':{'noun': 'pronouncement'},
 'proofread':{'actor': 'proofreader'},
 'propagate':{'noun': 'propagation'},
 'propel':{'noun': 'propulsion'},
 'propitiate':{'noun': 'propitiation'},
 'propose':{'noun': 'proposal'},
 'prorate':{'noun': 'proration'},
 'prosecute':{'noun': 'prosecution', 'actor': 'prosecutor'},
 'prostitute':{'noun': 'prostitution'},
 'prostrate':{'noun': 'prostration'},
 'protect':{'noun': 'protection', 'actor': 'protector'},
 'protest':{'noun': 'protest', 'actor': 'protester'},
 'protract':{'noun': 'protraction'},
 'protrude':{'noun': 'protrusion'},
 'prove':{'noun': 'proof'},
 'provide':{'noun': 'provision', 'actor': 'provider'},
 'provoke':{'noun': 'provocation'},
 'psychoanalyze':{'noun': 'psychoanalysis'},
 'publish':{'noun': 'publication', 'actor': 'publisher'},
 'puff':{'actor': 'puffer'},
 'pull':{'noun': 'pull'},
 'pullulate':{'noun': 'pullulation'},
 'pulsate':{'noun': 'pulsation'},
 'pulse':{'noun': 'pulsation'},
 'pulverize':{'noun': 'pulverization'},
 'punctuate':{'noun': 'punctuation'},
 'punish':{'noun': 'punishment'},
 'purchase':{'noun': 'purchase', 'actor': 'purchaser'},
 'purge':{'noun': 'purgation'},
 'purify':{'noun': 'purification'},
 'pursue':{'noun': 'pursuit', 'actor': 'pursuer'},
 'purvey':{'noun': 'purveyance'},
 'push':{'noun': 'push'},
 'put':{'actor': 'putter'},
 'puzzle':{'noun': 'puzzlement'},
 'qualify':{'noun': 'qualification'},
 'quantify':{'noun': 'quantification'},
 'question':{'noun': 'question'},
 'quit':{'actor': 'quitter'},
 'quote':{'noun': 'quotation'},
 'race':{'noun': 'racing'},
 'radiate':{'noun': 'radiation'},
 'raid':{'actor': 'raider'},
 'raise':{'noun': 'raise'},
 'rally':{'noun': 'rally'},
 'ramify':{'noun': 'ramification'},
 'randomize':{'noun': 'randomization'},
 'range':{'noun': 'range'},
 'rank':{'noun': 'ranking'},
 'rape':{'noun': 'rape', 'actor': 'rapist'},
 'rate':{'noun': 'rate'},
 'ratify':{'noun': 'ratification'},
 'rationalize':{'noun': 'rationalization'},
 'ravish':{'noun': 'ravishment'},
 're-elect':{'noun': 're-election'},
 're-examine':{'noun': 're-examination'},
 'reach':{'noun': 'reach'},
 'react':{'noun': 'reaction'},
 'read':{'noun': 'reading', 'actor': 'reader'},
 'readjust':{'noun': 'readjustment'},
 'readmit':{'noun': 'readmission'},
 'realize':{'noun': 'realization'},
 'reap':{'actor': 'reaper'},
 'reappear':{'noun': 'reappearance'},
 'reappraise':{'noun': 'reappraisal'},
 'rearrange':{'noun': 'rearrangement'},
 'reason':{'actor': 'reasoner'},
 'reassemble':{'noun': 'reassembly'},
 'reassess':{'noun': 'reassessment'},
 'reassign':{'noun': 'reassignment'},
 'reassure':{'noun': 'reassurance'},
 'reauthorize':{'noun': 'reauthorization'},
 'rebound':{'noun': 'rebound'},
 'rebuild':{'noun': 'reconstruction'},
 'recall':{'noun': 'recall'},
 'recant':{'noun': 'recantation'},
 'recapitulate':{'noun': 'recapitulation'},
 'recede':{'noun': 'recession'},
 'receive':{'noun': 'reception', 'actor': 'receiver'},
 'reciprocate':{'noun': 'reciprocation'},
 'recite':{'noun': 'recital'},
 'reckon':{'noun': 'reckoning'},
 'recognize':{'noun': 'recognition'},
 'recollect':{'noun': 'recollection'},
 'recommend':{'noun': 'recommendation'},
 'reconfirm':{'noun': 'reconfirmation'},
 'reconsider':{'noun': 'reconsideration'},
 'reconstruct':{'noun': 'reconstruction'},
 'record':{'noun': 'recording', 'actor': 'recorder'},
 'recover':{'noun': 'recovery'},
 'recreate':{'noun': 'recreation'},
 'recriminate':{'noun': 'recrimination'},
 'recruit':{'noun': 'recruitment', 'actor': 'recruiter'},
 'rectify':{'noun': 'rectification'},
 'recuperate':{'noun': 'recuperation'},
 'recuse':{'noun': 'recusal'},
 'recycle':{'noun': 'recycling'},
 'redact':{'noun': 'redaction'},
 'redeem':{'noun': 'redemption'},
 'redefine':{'noun': 'redefinition'},
 'redeploy':{'noun': 'redeployment'},
 'redevelop':{'noun': 'redevelopment'},
 'redistribute':{'noun': 'redistribution'},
 'reduce':{'noun': 'reduction'},
 'reduplicate':{'noun': 'reduplication'},
 'reelect':{'noun': 'reelection'},
 'reevaluate':{'noun': 'reevaluation'},
 'reexamine':{'noun': 'reexamination'},
 'refer':{'noun': 'referral'},
 'referee':{'actor': 'referee'},
 'refinance':{'noun': 'refinancing'},
 'refine':{'noun': 'refinement', 'actor': 'refiner'},
 'reflate':{'noun': 'reflation'},
 'reflect':{'noun': 'reflectance'},
 'refocus':{'noun': 'refocusing'},
 'reforest':{'noun': 'reforestation'},
 'reform':{'noun': 'reform', 'actor': 'reformer'},
 'reformulate':{'noun': 'reformulation'},
 'refract':{'noun': 'refraction'},
 'refresh':{'noun': 'refreshment'},
 'refrigerate':{'noun': 'refrigeration'},
 'refund':{'noun': 'refund'},
 'refurbish':{'noun': 'refurbishment'},
 'refuse':{'noun': 'refusal'},
 'refute':{'noun': 'refutation'},
 'regard':{'noun': 'regard'},
 'regenerate':{'noun': 'regeneration'},
 'regiment':{'noun': 'regimentation'},
 'register':{'noun': 'registration'},
 'regret':{'noun': 'regret'},
 'regularize':{'noun': 'regularization'},
 'regulate':{'noun': 'regulation', 'actor': 'regulator'},
 'regurgitate':{'noun': 'regurgitation'},
 'rehabilitate':{'noun': 'rehabilitation'},
 'rehearse':{'noun': 'rehearsal'},
 'reify':{'noun': 'reification'},
 'reimburse':{'noun': 'reimbursement'},
 'reimpose':{'noun': 'reimposition'},
 'reincarnate':{'noun': 'reincarnation'},
 'reinforce':{'noun': 'reinforcement'},
 'reinstate':{'noun': 'reinstatement'},
 'reinterpret':{'noun': 'reinterpretation'},
 'reinvest':{'noun': 'reinvestment'},
 'reinvigorate':{'noun': 'reinvigoration'},
 'reiterate':{'noun': 'reiteration'},
 'reject':{'noun': 'rejection'},
 'rejuvenate':{'noun': 'rejuvenation'},
 'relate':{'noun': 'relation'},
 'relax':{'noun': 'relaxation'},
 'release':{'noun': 'release'},
 'relegate':{'noun': 'relegation'},
 'relieve':{'noun': 'relief', 'actor': 'reliever'},
 'relinquish':{'noun': 'relinquishment'},
 'relocate':{'noun': 'relocation'},
 'rely':{'noun': 'reliance'},
 'remember':{'noun': 'remembrance'},
 'remilitarize':{'noun': 'remilitarization'},
 'remind':{'noun': 'reminder'},
 'remit':{'noun': 'remission'},
 'remove':{'noun': 'removal'},
 'remunerate':{'noun': 'remuneration'},
 'render':{'noun': 'rendition'},
 'renegotiate':{'noun': 'renegotiation'},
 'renew':{'noun': 'renewal'},
 'renounce':{'noun': 'renouncement'},
 'renovate':{'noun': 'renovation', 'actor': 'renovator'},
 'rent':{'noun': 'rent'},
 'reorganize':{'noun': 'reorganization'},
 'reorient':{'noun': 'reorientation'},
 'reorientate':{'noun': 'reorientation'},
 'repair':{'noun': 'repair', 'actor': 'repairer'},
 'repatriate':{'noun': 'repatriation'},
 'repay':{'noun': 'repayment'},
 'repeal':{'noun': 'repeal'},
 'repeat':{'noun': 'repetition'},
 'repel':{'noun': 'repulsion'},
 'repent':{'noun': 'repentance'},
 'replace':{'noun': 'replacement'},
 'replenish':{'noun': 'replenishment'},
 'replete':{'noun': 'repletion'},
 'replicate':{'noun': 'replication'},
 'reply':{'noun': 'replication'},
 'report':{'noun': 'report'},
 'repose':{'noun': 'reposition'},
 'repossess':{'noun': 'repossession'},
 'represent':{'noun': 'representation'},
 'repress':{'noun': 'repression'},
 'reprise':{'noun': 'reprisal'},
 'reprobate':{'noun': 'reprobation'},
 'reproduce':{'noun': 'reproduction'},
 'reprove':{'noun': 'reproval'},
 'repudiate':{'noun': 'repudiation'},
 'repugn':{'noun': 'repugnance'},
 'repulse':{'noun': 'repulsion'},
 'repurchase':{'noun': 'repurchase'},
 'repute':{'noun': 'reputation'},
 'request':{'noun': 'request'},
 'require':{'noun': 'requirement'},
 'requite':{'noun': 'requital'},
 'rescind':{'noun': 'rescission'},
 'rescue':{'noun': 'rescue', 'actor': 'rescuer'},
 'research':{'noun': 'research', 'actor': 'researcher'},
 'resell':{'noun': 'resale'},
 'resemble':{'noun': 'resemblance'},
 'resent':{'noun': 'resentment'},
 'reserve':{'noun': 'reservation'},
 'reset':{'noun': 'reset'},
 'resettle':{'noun': 'resettlement'},
 'resign':{'noun': 'resignation'},
 'resist':{'noun': 'resistance'},
 'resolve':{'noun': 'resolution'},
 'respire':{'noun': 'respiration'},
 'respond':{'noun': 'response'},
 'rest':{'noun': 'rest'},
 'restate':{'noun': 'restatement'},
 'restitute':{'noun': 'restitution'},
 'restore':{'noun': 'restoration', 'actor': 'restorer'},
 'restrain':{'noun': 'restraint'},
 'restrict':{'noun': 'restriction'},
 'restructure':{'noun': 'restructuring'},
 'result':{'noun': 'result'},
 'resume':{'noun': 'resumption'},
 'resurrect':{'noun': 'resurrection'},
 'resuscitate':{'noun': 'resuscitation'},
 'retail':{'noun': 'retailing', 'actor': 'retailer'},
 'retain':{'noun': 'retention'},
 'retaliate':{'noun': 'retaliation'},
 'retard':{'noun': 'retardation'},
 'reticulate':{'noun': 'reticulation'},
 'retire':{'noun': 'retirement'},
 'retract':{'noun': 'retraction'},
 'retreat':{'noun': 'retreat'},
 'retrench':{'noun': 'retrenchment'},
 'retrieve':{'noun': 'retrieval'},
 'retrospect':{'noun': 'retrospection'},
 'retry':{'noun': 'retrial'},
 'return':{'noun': 'return'},
 'reunify':{'noun': 'reunification'},
 'revalue':{'noun': 'revaluation'},
 'revamp':{'noun': 'revamping'},
 'reveal':{'noun': 'revelation'},
 'revel':{'noun': 'revelation', 'actor': 'reveler'},
 'reverberate':{'noun': 'reverberation'},
 'reverse':{'noun': 'reversal'},
 'review':{'noun': 'review'},
 'revile':{'noun': 'revilement'},
 'revise':{'noun': 'revision'},
 'revitalize':{'noun': 'revitalization'},
 'revive':{'noun': 'revival'},
 'revivify':{'noun': 'revivification'},
 'revoke':{'noun': 'revocation'},
 'reward':{'noun': 'reward'},
 'ribosylate':{'noun': 'ribosylation'},
 'ride':{'noun': 'ride', 'actor': 'rider'},
 'rip':{'actor': 'ripper'},
 'rise':{'noun': 'rise'},
 'risk':{'noun': 'risk'},
 'rob':{'noun': 'robbery', 'actor': 'robber'},
 'rock':{'noun': 'rock', 'actor': 'rocker'},
 'roll':{'noun': 'rolling', 'actor': 'roller'},
 'romanticise':{'noun': 'romanticisation'},
 'romanticize':{'noun': 'romanticization'},
 'roof':{'actor': 'roofer'},
 'rotate':{'noun': 'rotation'},
 'row':{'actor': 'rower'},
 'ruin':{'noun': 'ruin'},
 'rule':{'noun': 'rule', 'actor': 'ruler'},
 'ruminate':{'noun': 'rumination'},
 'rumor':{'noun': 'rumor'},
 'run':{'noun': 'run', 'actor': 'runner'},
 'rush':{'noun': 'rush'},
 'rustle':{'actor': 'rustler'},
 'sacrifice':{'noun': 'sacrifice'},
 'sag':{'noun': 'sagging'},
 'sail':{'actor': 'sailor'},
 'salivate':{'noun': 'salivation'},
 'salute':{'noun': 'salutation'},
 'sanctify':{'noun': 'sanctification'},
 'sanitize':{'noun': 'sanitization'},
 'satiate':{'noun': 'satiation'},
 'satisfy':{'noun': 'satisfaction'},
 'saturate':{'noun': 'saturation'},
 'save':{'noun': 'rescue', 'actor': 'saver'},
 'say':{'noun': 'saying'},
 'scale back':{'noun': 'scale-back'},
 'scan':{'actor': 'scanner'},
 'scandalize':{'noun': 'scandalization'},
 'scare':{'noun': 'scare'},
 'scavenge':{'actor': 'scavenger'},
 'schedule':{'noun': 'schedule'},
 'schematize':{'noun': 'schematization'},
 'scintillate':{'noun': 'scintillation'},
 'score':{'noun': 'score'},
 'scramble':{'noun': 'scramble'},
 'scrap':{'noun': 'scrap'},
 'scream':{'noun': 'screaming'},
 'scribble':{'actor': 'scribbler'},
 'scrub':{'actor': 'scrubber'},
 'sculpt':{'actor': 'sculptor'},
 'seal':{'noun': 'sealing'},
 'search':{'noun': 'search'},
 'seat':{'noun': 'seating'},
 'secede':{'noun': 'secession'},
 'seclude':{'noun': 'seclusion'},
 'secrete':{'noun': 'secretion'},
 'secularize':{'noun': 'secularization'},
 'sedate':{'noun': 'sedation'},
 'seduce':{'noun': 'seduction'},
 'see':{'actor': 'seer'},
 'seek':{'actor': 'seeker'},
 'segment':{'noun': 'segmentation'},
 'segregate':{'noun': 'segregation'},
 'seize':{'noun': 'seizure'},
 'select':{'noun': 'selection'},
 'sell off':{'noun': 'sell-off'},
 'sell out':{'noun': 'sell-out'},
 'sell':{'noun': 'sale', 'actor': 'seller'},
 'sensitize':{'noun': 'sensitization'},
 'sentence':{'noun': 'sentence'},
 'sentimentalise':{'noun': 'sentimentalisation'},
 'sentimentalize':{'noun': 'sentimentalization'},
 'separate':{'noun': 'separation'},
 'sequester':{'noun': 'sequestration'},
 'sequestrate':{'noun': 'sequestration'},
 'serialize':{'noun': 'serialization'},
 'serve':{'noun': 'service', 'actor': 'server'},
 'service':{'noun': 'service'},
 'set up':{'noun': 'set-up'},
 'set':{'noun': 'setting', 'actor': 'setter'},
 'settle':{'noun': 'settlement'},
 'sever':{'noun': 'severance'},
 'sew':{'actor': 'seamstress'},
 'shape':{'noun': 'shape'},
 'share':{'noun': 'sharing'},
 'sharpshoot':{'actor': 'sharpshooter'},
 'shed':{'noun': 'shedding'},
 'shift':{'noun': 'shift'},
 'ship':{'noun': 'shipment'},
 'shock':{'noun': 'shock'},
 'shoot':{'noun': 'shooting', 'actor': 'shooter'},
 'shop':{'noun': 'shopping', 'actor': 'shopper'},
 'shout':{'noun': 'shouting'},
 'show':{'noun': 'showing'},
 'shrink':{'noun': 'shrinkage'},
 'shut down':{'noun': 'shut-down'},
 'shut':{'actor': 'shutter'},
 'sign up':{'noun': 'sign-up'},
 'sign':{'noun': 'signature'},
 'signal':{'noun': 'signal', 'actor': 'signaller'},
 'signalize':{'noun': 'signalization'},
 'signify':{'noun': 'signification'},
 'simplify':{'noun': 'simplification'},
 'simulate':{'noun': 'simulation'},
 'sin':{'noun': 'sin', 'actor': 'sinner'},
 'sing':{'noun': 'singing', 'actor': 'singer'},
 'sink':{'noun': 'sinking'},
 'sit':{'actor': 'sitter'},
 'situate':{'noun': 'situation'},
 'ski':{'actor': 'skier'},
 'skip':{'actor': 'skipper'},
 'slam':{'actor': 'slammer'},
 'slash':{'noun': 'slash'},
 'slate':{'actor': 'slater'},
 'slaughter':{'actor': 'slaughterer'},
 'sleep':{'noun': 'sleep'},
 'slide':{'noun': 'slide'},
 'slip':{'noun': 'slip'},
 'slow down':{'noun': 'slow-down'},
 'slow':{'noun': 'slowing'},
 'smell':{'noun': 'smell'},
 'smile':{'noun': 'smile'},
 'smoke':{'noun': 'smoking', 'actor': 'smoker'},
 'snatch':{'actor': 'snatcher'},
 'snipe':{'actor': 'sniper'},
 'socialize':{'noun': 'socialization'},
 'soften':{'noun': 'softening'},
 'solace':{'noun': 'solacement'},
 'solemnize':{'noun': 'solemnization'},
 'solicit':{'noun': 'solicitation'},
 'solidify':{'noun': 'solidification'},
 'solmizate':{'noun': 'solmization'},
 'solvate':{'noun': 'solvation'},
 'solve':{'noun': 'solution'},
 'sophisticate':{'noun': 'sophistication'},
 'sorb':{'noun': 'sorption'},
 'sort':{'noun': 'sorting'},
 'speak':{'noun': 'speaking', 'actor': 'speaker'},
 'specialize':{'noun': 'specialization'},
 'specify':{'noun': 'specification'},
 'speculate':{'noun': 'speculation', 'actor': 'speculator'},
 'speed':{'noun': 'speed'},
 'spend':{'noun': 'spending', 'actor': 'spender'},
 'spin off':{'noun': 'spin-off'},
 'spin':{'noun': 'spin', 'actor': 'spinner'},
 'spiritualize':{'noun': 'spiritualization'},
 'split':{'noun': 'split'},
 'spoil':{'noun': 'spoilation', 'actor': 'spoiler'},
 'sponsor':{'actor': 'sponsor'},
 'spot':{'noun': 'spotting', 'actor': 'spotter'},
 'spy':{'actor': 'spy'},
 'squeeze':{'noun': 'squeeze'},
 'stabilize':{'noun': 'stabilization'},
 'stage':{'noun': 'staging'},
 'stagnate':{'noun': 'stagnation'},
 'stalk':{'actor': 'stalker'},
 'stall':{'noun': 'stalling'},
 'stand':{'noun': 'standing'},
 'standardize':{'noun': 'standardization'},
 'start':{'noun': 'start', 'actor': 'starter'},
 'starve':{'noun': 'starvation'},
 'state':{'noun': 'statement'},
 'steal':{'noun': 'theft'},
 'steer':{'noun': 'steering'},
 'step':{'noun': 'step'},
 'sterilize':{'noun': 'sterilization'},
 'stickle':{'actor': 'stickler'},
 'stigmatize':{'noun': 'stigmatization'},
 'stimulate':{'noun': 'stimulation'},
 'stipulate':{'noun': 'stipulation'},
 'stir':{'noun': 'stirring', 'actor': 'stirrer'},
 'stock':{'noun': 'stocking'},
 'stop':{'noun': 'stop'},
 'store':{'noun': 'storage'},
 'strain':{'noun': 'strain'},
 'strangulate':{'noun': 'strangulation'},
 'stratify':{'noun': 'stratification'},
 'streamline':{'noun': 'streamlining'},
 'strengthen':{'noun': 'strengthening'},
 'stress':{'noun': 'stress'},
 'stretch':{'noun': 'stretch'},
 'striate':{'noun': 'striation'},
 'stridulate':{'noun': 'stridulation'},
 'strike':{'noun': 'strike', 'actor': 'striker'},
 'strip':{'noun': 'stripping', 'actor': 'stripper'},
 'structure':{'noun': 'structure'},
 'struggle':{'noun': 'struggle'},
 'study':{'noun': 'study'},
 'stultify':{'noun': 'stultification'},
 'stumble':{'noun': 'stumble'},
 'stylize':{'noun': 'stylization'},
 'subcontract':{'actor': 'subcontractor'},
 'subdivide':{'noun': 'subdivision'},
 'subject':{'noun': 'subjection'},
 'subjugate':{'noun': 'subjugation'},
 'sublimate':{'noun': 'sublimation'},
 'sublime':{'noun': 'sublimation'},
 'submit':{'noun': 'submission'},
 'subordinate':{'noun': 'subordination'},
 'suborn':{'noun': 'subornation'},
 'subscribe':{'noun': 'subscription', 'actor': 'subscriber'},
 'subsidize':{'noun': 'subsidization'},
 'substantiate':{'noun': 'substantiation'},
 'substitute':{'noun': 'substitution'},
 'subsume':{'noun': 'subsumption'},
 'subtract':{'noun': 'subtraction'},
 'succeed':{'noun': 'success'},
 'suck':{'actor': 'sucker'},
 'sue':{'noun': 'suit'},
 'suffer':{'noun': 'sufferance'},
 'suffocate':{'noun': 'suffocation'},
 'suffuse':{'noun': 'suffusion'},
 'suggest':{'noun': 'suggestion'},
 'suit':{'noun': 'suit'},
 'summarize':{'noun': 'summarization'},
 'summate':{'noun': 'summation'},
 'sumoylate':{'noun': 'sumoylation'},
 'superannuate':{'noun': 'superannuation'},
 'superordinate':{'noun': 'superordination'},
 'supersede':{'noun': 'supersession'},
 'supervise':{'noun': 'supervision'},
 'supinate':{'noun': 'supination'},
 'supplement':{'noun': 'supplementation'},
 'supplicate':{'noun': 'supplication'},
 'supply':{'noun': 'supply'},
 'support':{'noun': 'support', 'actor': 'supporter'},
 'suppose':{'noun': 'supposition'},
 'suppress':{'noun': 'suppression', 'actor': 'suppresser'},
 'suppurate':{'noun': 'suppuration'},
 'surf':{'actor': 'surfer'},
 'surface':{'noun': 'surfacing'},
 'surge':{'noun': 'surge'},
 'surprise':{'noun': 'surprise'},
 'surrender':{'noun': 'surrender'},
 'survey':{'noun': 'survey', 'actor': 'surveyor'},
 'survive':{'noun': 'survival', 'actor': 'survivor'},
 'suspect':{'noun': 'suspicion'},
 'suspend':{'noun': 'suspension'},
 'sustain':{'noun': 'sustenance'},
 'swap':{'noun': 'swap'},
 'sway':{'noun': 'swaying'},
 'sweep':{'noun': 'sweep', 'actor': 'sweeper'},
 'sweeten':{'noun': 'sweetening'},
 'swell':{'noun': 'swell'},
 'swim':{'actor': 'swimmer'},
 'swing':{'noun': 'swing'},
 'switch':{'noun': 'switch'},
 'syllabicate':{'noun': 'syllabication'},
 'syllabify':{'noun': 'syllabification'},
 'symbolize':{'noun': 'symbolization'},
 'sympathize':{'actor': 'sympathizer'},
 'synchronize':{'noun': 'synchronization'},
 'syncopate':{'noun': 'syncopation'},
 'syndicate':{'noun': 'syndication'},
 'systematize':{'noun': 'systematization'},
 'tabulate':{'noun': 'tabulation'},
 'tackle':{'noun': 'tackling'},
 'tailor':{'actor': 'tailor'},
 'take over':{'noun': 'take-over'},
 'take':{'noun': 'taking', 'actor': 'taker'},
 'talk':{'noun': 'talk'},
 'tap':{'noun': 'tapping'},
 'tape':{'noun': 'taping'},
 'target':{'noun': 'target'},
 'tarry':{'noun': 'tarriance'},
 'taste':{'actor': 'taster'},
 'tax':{'noun': 'tax'},
 'teach':{'noun': 'teaching', 'actor': 'teacher'},
 'telecommunicate':{'noun': 'telecommunication'},
 'televise':{'noun': 'television'},
 'temper':{'noun': 'temperance'},
 'tempt':{'noun': 'temptation'},
 'tergiversate':{'noun': 'tergiversation'},
 'term':{'noun': 'term'},
 'terminate':{'noun': 'termination', 'actor': 'terminator'},
 'terrorise':{'noun': 'terrorisation', 'actor': 'terrorist'},
 'terrorize':{'noun': 'terrorization', 'actor': 'terrorist'},
 'test':{'noun': 'test', 'actor': 'tester'},
 'testify':{'noun': 'testimony'},
 'thatch':{'actor': 'thatcher'},
 'theorize':{'noun': 'theorization'},
 'think':{'noun': 'thought', 'actor': 'thinker'},
 'threaten':{'noun': 'threat'},
 'throw':{'noun': 'throwing', 'actor': 'thrower'},
 'thwart':{'noun': 'thwarting'},
 'tie':{'noun': 'tie'},
 'tighten':{'noun': 'tightening'},
 'time':{'noun': 'timing'},
 'tintinnabulate':{'noun': 'tintinnabulation'},
 'tip':{'actor': 'tipper'},
 'titillate':{'noun': 'titillation'},
 'title':{'noun': 'title'},
 'titrate':{'noun': 'titration'},
 'toddle':{'actor': 'toddler'},
 'toil':{'actor': 'toiler'},
 'tolerate':{'noun': 'toleration'},
 'top':{'noun': 'top'},
 'torture':{'actor': 'torturer'},
 'touch':{'noun': 'touching'},
 'tour':{'noun': 'touring'},
 'track':{'noun': 'track'},
 'trade':{'noun': 'trade'},
 'traduce':{'noun': 'traducement'},
 'trail':{'noun': 'trail'},
 'train':{'noun': 'training', 'actor': 'trainer'},
 'transact':{'noun': 'transaction'},
 'transactivate':{'noun': 'transactivation'},
 'transduce':{'noun': 'transduction'},
 'transfect':{'noun': 'transfection'},
 'transfer':{'noun': 'transfer'},
 'transfigure':{'noun': 'transfiguration'},
 'transform':{'noun': 'transformation'},
 'transfuse':{'noun': 'transfusion'},
 'transit':{'noun': 'transition'},
 'translate':{'noun': 'translation', 'actor': 'translator'},
 'transliterate':{'noun': 'transliteration'},
 'translocate':{'noun': 'translocation'},
 'transmit':{'noun': 'transmission', 'actor': 'transmitter'},
 'transmogrify':{'noun': 'transmogrification'},
 'transmute':{'noun': 'transmutation'},
 'transpirate':{'noun': 'transpiration'},
 'transpire':{'noun': 'transpiration'},
 'transplant':{'noun': 'transplantation'},
 'transport':{'noun': 'transport'},
 'transpose':{'noun': 'transposition'},
 'transship':{'noun': 'transshipment'},
 'transude':{'noun': 'transudation'},
 'trap':{'actor': 'trapper'},
 'travel':{'noun': 'travel', 'actor': 'traveler'},
 'treat':{'noun': 'treatment'},
 'trephine':{'noun': 'trephination'},
 'trigger':{'noun': 'trigger'},
 'triple':{'noun': 'tripling'},
 'trot':{'actor': 'trotter'},
 'trouble':{'noun': 'trouble'},
 'truck':{'actor': 'trucker'},
 'trumpet':{'actor': 'trumpeter'},
 'truncate':{'noun': 'truncation'},
 'trust':{'noun': 'trust'},
 'try':{'noun': 'trial'},
 'tumble':{'noun': 'tumble'},
 'turn around':{'noun': 'turn-around'},
 'turn out':{'noun': 'turn-out'},
 'turn over':{'noun': 'turn-over'},
 'turn':{'noun': 'turn'},
 'type':{'actor': 'typist'},
 'typify':{'noun': 'typification'},
 'ubiquitinate':{'noun': 'ubiquitination'},
 'ulcerate':{'noun': 'ulceration'},
 'ululate':{'noun': 'ululation'},
 'uncover':{'noun': 'uncovering'},
 'underestimate':{'noun': 'underestimation'},
 'underpay':{'noun': 'underpayment'},
 'understand':{'noun': 'understanding'},
 'understate':{'noun': 'understatement'},
 'undertake':{'noun': 'undertaking'},
 'undervalue':{'noun': 'undervaluation'},
 'underwrite':{'noun': 'underwriting', 'actor': 'underwriter'},
 'undo':{'noun': 'undoing'},
 'unify':{'noun': 'unification'},
 'unionize':{'noun': 'unionization'},
 'unite':{'noun': 'unification'},
 'unload':{'noun': 'unloading'},
 'unravel':{'noun': 'unraveling'},
 'unsettle':{'noun': 'unsettlement'},
 'unveil':{'noun': 'unveiling'},
 'update':{'noun': 'update'},
 'upgrade':{'noun': 'upgrade'},
 'upregulate':{'noun': 'upregulation'},
 'urbanize':{'noun': 'urbanization'},
 'urge':{'noun': 'urge'},
 'urinate':{'noun': 'urination'},
 'use':{'noun': 'usage', 'actor': 'user'},
 'usher':{'actor': 'usher'},
 'usurp':{'noun': 'usurpation'},
 'utilise':{'noun': 'utilisation'},
 'utilize':{'noun': 'utilization'},
 'utter':{'noun': 'utterance'},
 'vacate':{'noun': 'vacation'},
 'vacation':{'actor': 'vacationer'},
 'vaccinate':{'noun': 'vaccination'},
 'vacillate':{'noun': 'vacillation'},
 'validate':{'noun': 'validation'},
 'value':{'noun': 'valuation'},
 'vaporize':{'noun': 'vaporization'},
 'vary':{'noun': 'variance'},
 'vegetate':{'noun': 'vegetation'},
 'vend':{'actor': 'vendor'},
 'venerate':{'noun': 'veneration'},
 'ventilate':{'noun': 'ventilation'},
 'verbalize':{'noun': 'verbalization'},
 'verify':{'noun': 'verification'},
 'versify':{'noun': 'versification'},
 'vest':{'noun': 'vestment'},
 'veto':{'noun': 'veto'},
 'vex':{'noun': 'vexation'},
 'vibrate':{'noun': 'vibration'},
 'victimise':{'noun': 'victimisation'},
 'victimize':{'noun': 'victimization'},
 'view':{'noun': 'view', 'actor': 'viewer'},
 'vilify':{'noun': 'vilification'},
 'vindicate':{'noun': 'vindication'},
 'violate':{'noun': 'violation'},
 'visit':{'noun': 'visit', 'actor': 'visitor'},
 'visualize':{'noun': 'visualization'},
 'vitiate':{'noun': 'vitiation'},
 'vituperate':{'noun': 'vituperation'},
 'vivify':{'noun': 'vivification'},
 'vivisect':{'noun': 'vivisection'},
 'vocalize':{'noun': 'vocalization'},
 'vociferate':{'noun': 'vociferation'},
 'void':{'noun': 'voidance'},
 'volunteer':{'actor': 'volunteer'},
 'vote':{'noun': 'vote', 'actor': 'voter'},
 'vow':{'noun': 'vow'},
 'vulcanize':{'noun': 'vulcanization'},
 'vulgarize':{'noun': 'vulgarization'},
 'wait':{'noun': 'wait'},
 'walk':{'noun': 'walk', 'actor': 'walker'},
 'warble':{'actor': 'warbler'},
 'warm':{'noun': 'warming'},
 'warn':{'noun': 'warning'},
 'waste':{'noun': 'waste'},
 'watch':{'noun': 'watching'},
 'wave':{'noun': 'waving'},
 'weaken':{'noun': 'weakening'},
 'weep':{'actor': 'weeper'},
 'weigh':{'noun': 'weighing'},
 'welcome':{'noun': 'welcome'},
 'weld':{'actor': 'welder'},
 'whale':{'actor': 'whaler'},
 'whine':{'actor': 'whiner'},
 'wholesale':{'actor': 'wholesaler'},
 'widen':{'noun': 'widening'},
 'win':{'noun': 'win', 'actor': 'winner'},
 'withdraw':{'noun': 'withdrawal'},
 'withhold':{'noun': 'withholding'},
 'witness':{'actor': 'witness'},
 'wonder':{'noun': 'wonder'},
 'work out':{'noun': 'work-out'},
 'work':{'noun': 'work', 'actor': 'worker'},
 'worry':{'noun': 'worry'},
 'wrangle':{'actor': 'wrangler'},
 'wrap':{'actor': 'wrapper'},
 'wreathe':{'noun': 'wreath'},
 'wreck':{'noun': 'wreckage'},
 'wrestle':{'noun': 'wrestling', 'actor': 'wrestler'},
 'write off':{'noun': 'write-off'},
 'write':{'noun': 'writing', 'actor': 'writer'},
 'yell':{'noun': 'yelling'},
 'yield':{'noun': 'yield'},
 'yodel':{'actor': 'yodeller'},
 'zip':{'actor': 'zipper'},
}

# ======== MORPHVERBALIZATIONS 
verbalizations=\
{'abrogate-01': {'': 'abrogation'},
 'absent-01': {'': 'abstentia'},
 'absolve-01': {'': 'absolution'},
 'abuse-01': {'': 'abusive'},
 'accept-01': {'': 'acceptable'},
 'accumulate-01': {'': 'accumulatively'},
 'acetylate-01': {'': 'acetylation'},
 'ache-01': {'': 'aching'},
 'acquit-01': {'': 'acquittal'},
 'adhere-01': {'': 'adhesion'},
 'adhere-02': {'': 'adherence'},
 'administrate-01': {'': 'administration'},
 'advertise-01': {'': 'ad'},
 'advise-01': {'': 'advisory'},
 'advocate-01': {'': 'advocacy'},
 'aircraft': {':*:ARG0': {'bomb-01': 'bomber', 'fight-01': 'fighter'}},
 'aminate-01': {'': 'amination'},
 'annoy-01': {'': 'annoyance'},
 'appear-01': {'': 'apparition'},
 'approve-01': {'': 'approval'},
 'aspire-01': {'': 'aspiration'},
 'attend-02': {'': 'attention'},
 'attract-01': {'': 'attractive'},
 'baptize-01': {'': 'baptism'},
 'behave-01': {'': 'behavior'},
 'benefit-01': {'': 'beneficial'},
 'bequeath-01': {'': 'bequest'},
 'betray-01': {'': 'betrayal'},
 'bias-01': {':polarity': {'-': 'unbiased'}},
 'bless-01': {'': 'blessing'},
 'block-01': {'': 'blockage'},
 'bomb-01': {'': 'bombing'},
 'break-away-14': {'': 'breakaway'},
 'break-down-11': {'': 'breakdown'},
 'break-down-12': {'': 'breakdown'},
 'break-through-26': {'': 'breakthrough'},
 'break-up-08': {'': 'breakup'},
 'burden-01': {':polarity': {'-': 'unburdened'}},
 'burglarize-01': {'': 'burglary'},
 'capable-01': {'': 'capability'},
 'cause-01': {'': 'consequently'},
 'censor-01': {':polarity': {'-': 'uncensored'}},
 'coerce-01': {'': 'coercive'},
 'coexist-01': {'': 'coexistence'},
 'commend-01': {'': 'commendable'},
 'company': {':*:ARG0': {'advertise-01': 'advertiser',
                         'broadcast-01': 'broadcaster',
                         'employ-01': 'employer',
                         'export-01': 'exporter',
                         'lend-01': 'lender',
                         'make-01': 'maker',
                         'manufacture-01': 'manufacturer',
                         'provide-01': 'provider',
                         'publish-01': 'publisher',
                         'supply-01': 'supplier',
                         'trade-01': 'trader',
                         'vend-01': 'vendor'}},
 'compare-01': {'': 'comparatively'},
 'compel-01': {'': 'compulsory'},
 'compete-01': {'': 'competition'},
 'comply-01': {'': 'compliant'},
 'confirm-01': {':polarity': {'-': 'unconfirmed'}},
 'consent-01': {'': 'consensual'},
 'construct-01': {'': 'construction'},
 'continue-01': {'': 'continually'},
 'contradict-01': {'': 'contradictory'},
 'convert-01': {'': 'conversion'},
 'cooperate-01': {'': 'cooperation'},
 'correspond-01': {'': 'correspondence'},
 'counter-01': {'': 'anti'},
 'country': {':*:ARG0': {'sign-02': 'signatory', 'supply-01': 'supplier'}},
 'crack-down-06': {'': 'crackdown'},
 'create-01': {'': 'creation'},
 'deacetylate-01': {'': 'deacetylation'},
 'deceive-01': {'': 'deceit'},
 'decide-01': {':polarity': {'-': 'undecided'}},
 'decrypt-00': {'': 'decryption'},
 'defend-01': {'': 'defense'},
 'defraud-01': {'': 'fraud'},
 'demethylate-01': {'': 'demethylation'},
 'depend-01': {'': 'dependency'},
 'dephosphorylate-01': {'': 'dephosphorylation'},
 'descend-01': {'': 'descent'},
 'despair-01': {'': 'desperation'},
 'destroy-01': {'': 'destruction'},
 'detain-01': {'': 'detention'},
 'detect-01': {'': 'detectable'},
 'detest-01': {'': 'detestable'},
 'devalue-01': {'': 'devaluation'},
 'develop-01': {'': 'development'},
 'develop-02': {'': 'development'},
 'die-01': {'': 'dead'},
 'differ-02': {'': 'different'},
 'dimerize-01': {'': 'dimerization'},
 'disarm-01': {'': 'disarmament'},
 'discriminate-02': {'': 'discriminatory'},
 'disgrace-01': {'': 'disgraceful'},
 'dispute-01': {'': 'disputable'},
 'dissatisfy-01': {'': 'dissatisfation'},
 'document-01': {':polarity': {'-': 'undocumented'}},
 'dominate-01': {'': 'dominance'},
 'downregulate-01': {'': 'downregulation'},
 'dysregulate-01': {'': 'dysregulation'},
 'edit-01': {':polarity': {'-': 'unedited'}},
 'educate-01': {'': 'educational'},
 'elect-01': {'': 'election'},
 'eliminate-01': {'': 'elimination'},
 'emphasize-01': {'': 'emphatically'},
 'employ-01': {':polarity': {'-': 'unemployed'}},
 'encrypt-01': {'': 'encryption'},
 'envision-01': {'': 'vision'},
 'exclaim-01': {'': 'exclamation'},
 'expect-01': {'': 'expectation'},
 'explore-01': {'': 'exploratory', ':polarity': {'-': 'unexplored'}},
 'facility': {':*:ARG0': {'incinerate-01': 'incinerator',
                          'refine-01': 'refinery'}},
 'fail-01': {'': 'failure'},
 'fame-01': {'': 'famous'},
 'fear-01': {'': 'fearful'},
 'flee-01': {'': 'flight'},
 'fly-01': {'': 'flight'},
 'force-01': {'': 'forceful'},
 'foresee-01': {'': 'foreseeable', ':polarity': {'-': 'unforeseen'}},
 'forgive-01': {'': 'forgiveness'},
 'free-04': {'': 'freedom'},
 'fulfill-01': {':polarity': {'-': 'unfulfilled'}},
 'globalize-01': {'': 'globalization'},
 'government-organization': {':*:ARG0': {'administrate-01': 'administration',
                                         'govern-01': 'government',
                                         'legislate-01': 'legislature'}},
 'hallucinate-01': {'': 'hallucinatory'},
 'have-half-life-01': {'': 'half-life'},
 'hesitate-01': {'': 'hesitancy'},
 'heterodimerize-01': {'': 'heterodimerization'},
 'hijack-01': {'': 'hijacking'},
 'hinder-01': {':polarity': {'-': 'unhindered'}},
 'homodimerize-01': {'': 'homodimerization'},
 'hunger-01': {'': 'hungry'},
 'hydrolyze-01': {'': 'hydrolysis'},
 'ill-01': {'': 'illness'},
 'imagine-01': {'': 'imaginable'},
 'impede-01': {':polarity': {'-': 'unimpeded'}},
 'impress-01': {'': 'impressive'},
 'increase-01': {'': 'increasingly'},
 'induce-01': {'': 'inducible'},
 'infect-01': {'': 'infection'},
 'inflame-01': {'': 'inflammatory'},
 'inhabit-01': {'': 'habitation'},
 'inhibit-01': {'': 'inhibitory'},
 'innovate-01': {'': 'innovative'},
 'intend-01': {'': 'intention'},
 'intrigue-01': {'': 'intrigueing'},
 'investigate-01': {'': 'investigative'},
 'invite-01': {'': 'invitation'},
 'isomerize-01': {'': 'isomerization'},
 'justify-01': {'': 'justifiable'},
 'keep-01': {':ARG1': {'peace': 'peacekeeping'}},
 'kidnap-01': {'': 'kidnapping'},
 'kill-01': {'': 'deadly'},
 'launch-01': {'': 'launching'},
 'lay-off-02': {'': 'layoff'},
 'legislate-01': {'': 'legislative'},
 'liberate-01': {'': 'liberation'},
 'live-01': {'': 'alive'},
 'location': {':*:ARG1': {'surround-01': 'surrounding'}},
 'love-01': {'': 'beloved'},
 'maintain-01': {':polarity': {'-': 'unmaintained'}},
 'measure-01': {'': 'measurable'},
 'meet-03': {'': 'meeting'},
 'merit-01': {'': 'meritorious'},
 'metastasize-101': {'': 'metastatic'},
 'methylate-01': {'': 'methylation'},
 'migrate-01': {'': 'migratory'},
 'misunderstand-01': {'': 'misunderstanding'},
 'modify-01': {':polarity': {'-': 'unmodified'}},
 'molecular-physical-entity': {':*:ARG0': {'promote-01': 'promoter'}},
 'name-01': {':polarity': {'-': 'unnamed'}},
 'neglect-01': {'': 'negligence'},
 'observe-01': {'': 'observational'},
 'operate-01': {'': 'operational'},
 'oppose-01': {'': 'opposition'},
 'organization': {':*:ARG0': {'administrate-01': 'administration',
                              'employ-01': 'employer',
                              'regulate-01': 'regulator'}},
 'oust-01': {'': 'ouster'},
 'overexpress-01': {'': 'overexpression'},
 'overwhelm-01': {'': 'overwhelmingly'},
 'pain-01': {'': 'painfully'},
 'persevere-01': {'': 'perseverance'},
 'person': {':*:ARG0': {'abuse-01': 'abuser',
                        'act-01': 'actress',
                        'administrate-01': 'administrator',
                        'admire-01': 'admirer',
                        'advertise-01': 'advertiser',
                        'advise-01': 'advisor',
                        'analyze-01': 'analyst',
                        'announce-01': 'announcer',
                        'apply-01': 'applicant',
                        'arbitrate-01': 'arbitrator',
                        'assail-01': 'assailant',
                        'assassinate-01': 'assassin',
                        'assist-01': 'assistant',
                        'attack-01': 'attacker',
                        'attend-01': 'attendee',
                        'audit-01': 'auditor',
                        'author-01': 'author',
                        'bake-01': 'baker',
                        'beg-01': 'beggar',
                        'believe-01': 'believer',
                        'betray-01': 'traitor',
                        'bid-01': 'bidder',
                        'blog-01': 'blogger',
                        'boost-01': 'booster',
                        'buy-01': 'buyer',
                        'campaign-01': 'campaigner',
                        'capitulate-01': 'capitulator',
                        'coach-01': 'coach',
                        'combat-01': 'combatant',
                        'commute-01': 'commuter',
                        'compete-01': 'competitor',
                        'compete-02': 'competitor',
                        'compose-02': 'composer',
                        'consult-01': 'consultant',
                        'consume-01': 'consumer',
                        'contribute-01': 'contributor',
                        'control-01': 'controller',
                        'create-01': 'creator',
                        'criticism-04': 'critic',
                        'criticize-01': 'critic',
                        'dance-01': 'dancer',
                        'deal-01': 'dealer',
                        'deal-02': 'dealer',
                        'defend-01': 'defender',
                        'demonstrate-01': 'demonstrator',
                        'design-01': 'designer',
                        'develop-02': 'developer',
                        'devote-01': 'devotee',
                        'dig-01': 'digger',
                        'distribute-01': 'distributor',
                        'donate-01': 'donor',
                        'draft-01': 'drafter',
                        'drink-01': 'drinker',
                        'drive-01': 'driver',
                        'eat-01': 'eater',
                        'embalm-01': 'embalmer',
                        'employ-01': 'employer',
                        'enable-01': 'enabler',
                        'entertain-01': 'entertainer',
                        'evaluate-01': 'evaluator',
                        'explore-01': 'explorer',
                        'export-01': 'exporter',
                        'extort-01': 'extortionist',
                        'farm-01': 'farmer',
                        'fight-01': 'fighter',
                        'finance-01': 'financier',
                        'fish-01': 'fisherman',
                        'follow-02': 'follower',
                        'found-01': 'founder',
                        'hack-04': 'hacker',
                        'hate-01': 'hater',
                        'hijack-01': 'hijacker',
                        'hit-01': 'hitter',
                        'hold-01': 'holder',
                        'hug-01': 'hugger',
                        'hunt-01': 'hunter',
                        'immigrate-01': 'immigrant',
                        'infiltrate-01': 'infiltrator',
                        'inhabit-01': 'inhabitant',
                        'inspect-01': 'inspector',
                        'insure-02': 'insurer',
                        'interpret-01': 'interpreter',
                        'interrogate-01': 'interrogator',
                        'invent-01': 'inventor',
                        'invest-01': 'investor',
                        'investigate-01': 'investigator',
                        'jog-01': 'jogger',
                        'judge-01': 'judge',
                        'kidnap-01': 'kidnapper',
                        'kill-01': 'killer',
                        'labor-01': 'laborer',
                        'lead-01': 'leader',
                        'lead-02': 'leader',
                        'leak-01': 'leaker',
                        'legislate-01': 'legislator',
                        'lend-01': 'lender',
                        'lie-08': 'liar',
                        'lobby-01': 'lobbyist',
                        'lose-03': 'loser',
                        'make-01': 'maker',
                        'manage-01': 'manager',
                        'mediate-01': 'mediator',
                        'merchandise-01': 'merchant',
                        'migrate-01': 'migrant',
                        'mine-01': 'miner',
                        'murder-01': 'murderer',
                        'negotiate-01': 'negotiator',
                        'observe-01': 'observer',
                        'occupy-01': 'occupant',
                        'offend-01': 'offender',
                        'operate-01': 'operator',
                        'oppose-01': 'opponent',
                        'organize-01': 'organizer',
                        'own-01': 'owner',
                        'paint-01': 'painter',
                        'paint-02': 'painter',
                        'participate-01': 'participant',
                        'pass-by-17': 'passerby',
                        'pay-01': 'payer',
                        'perform-01': 'performer',
                        'perpetrate-01': 'perpetrator',
                        'plan-01': 'planner',
                        'play-01': 'player',
                        'preach-01': 'preacher',
                        'produce-01': 'producer',
                        'prosecute-01': 'prosecutor',
                        'protest-01': 'protester',
                        'rap-02': 'rapper',
                        'rape-01': 'rapist',
                        'read-01': 'reader',
                        'reform-01': 'reformer',
                        'regulate-01': 'regulator',
                        'report-01': 'reporter',
                        'represent-01': 'representative',
                        'research-01': 'researcher',
                        'reside-01': 'resident',
                        'retire-01': 'retiree',
                        'review-02': 'reviewer',
                        'rob-01': 'robber',
                        'run-02': 'runner',
                        'sail-01': 'sailor',
                        'seek-01': 'seeker',
                        'sell-01': 'seller',
                        'serve-01': 'servant',
                        'serve-02': 'servant',
                        'shoot-02': 'shooter',
                        'sing-01': 'singer',
                        'smoke-02': 'smoker',
                        'smuggle-01': 'smuggler',
                        'speak-01': 'speaker',
                        'specialize-01': 'specialist',
                        'speculate-01': 'speculator',
                        'spy-01': 'spy',
                        'squat-02': 'squatter',
                        'steal-01': 'thief',
                        'strategize-01': 'strategist',
                        'strike-01': 'striker',
                        'strike-02': 'striker',
                        'study-01': 'student',
                        'subscribe-01': 'subscriber',
                        'suffer-01': 'sufferer',
                        'supervise-01': 'supervisor',
                        'support-01': 'supporter',
                        'surgery-01': 'surgeon',
                        'survive-01': 'survivor',
                        'survive-02': 'survivor',
                        'sympathize-01': 'sympathizer',
                        'teach-01': 'teacher',
                        'throw-01': 'thrower',
                        'tipple-01': 'tippler',
                        'tour-01': 'tourist',
                        'trade-01': 'trader',
                        'traffic-01': 'trafficker',
                        'transfer-01': 'transferor',
                        'translate-01': 'translator',
                        'travel-01': 'traveller',
                        'use-01': 'user',
                        'vend-01': 'vendor',
                        'visit-01': 'visitor',
                        'vote-01': 'voter',
                        'win-01': 'winner',
                        'work-01': 'worker',
                        'write-01': 'writer'},
            ':*:ARG1': {'employ-01': 'employee',
                        'imprison-01': 'prisoner',
                        'transfer-01': 'transferee'},
            ':*:ARG2': {'evacuate-01': 'evacuee'}},
 'phosphorylate-01': {'': 'phosphorylation'},
 'picture': {':*:ARG1': {'draw-01': 'drawing', 'paint-02': 'painting'}},
 'pray-01': {'': 'prayer'},
 'precede-01': {'': 'precursory'},
 'predict-01': {'': 'predictive'},
 'prefer-01': {'': 'preferential'},
 'prepare-02': {'': 'preparatory'},
 'presume-02': {'': 'presumably'},
 'pretend-01': {'': 'pretense'},
 'prevail-02': {'': 'prevalent'},
 'pride-01': {'': 'proud'},
 'product': {':*:ARG0': {'detect-01': 'detector',
                         'filter-01': 'filter',
                         'launch-01': 'launcher'}},
 'prosecute-01': {'': 'prosecution'},
 'prosper-01': {'': 'prosperity'},
 'protect-01': {'': 'protective'},
 'protein': {':*:ARG0': {'repress-01': 'repressor'}},
 'provoke-01': {'': 'provocative'},
 'punish-01': {'': 'punishable'},
 'qualify-02': {'': 'eligible'},
 'radiate-01': {'': 'radiation'},
 're-unify-01': {'': 'reunification'},
 'reactivate-01': {'': 'reactivation'},
 'realize-01': {'': 'aware'},
 'realize-02': {':polarity': {'-': 'unrealized'}},
 'rebel-01': {'': 'rebellious'},
 'rebut-01': {'': 'rebuttal'},
 'recombine-01': {'': 'recombinant'},
 'reconcile-01': {'': 'reconciliation'},
 'reconstruct-01': {'': 'reconstruction'},
 'reelect-01': {'': 'reelection'},
 'regulate-01': {'': 'regulation'},
 'reintegrate-01': {'': 'reintegration'},
 'relent-01': {':polarity': {'-': 'unrelenting'}},
 'renew-01': {'': 'renewable'},
 'repeat-01': {'': 'repeatedly'},
 'report-01': {'': 'reportedly'},
 'repress-01': {'': 'repression'},
 'resemble-01': {'': 'similarity'},
 'resent-01': {'': 'resentful'},
 'respect-01': {'': 'respectful'},
 'responsible-01': {'': 'responsibility'},
 'revere-01': {'': 'reverence'},
 'rise-up-00': {'': 'uprising'},
 'rob-01': {'': 'robbery'},
 'rust-01': {'': 'rusty'},
 'safe-01': {'': 'safety'},
 'see-01': {'': 'vision'},
 'seem-01': {'': 'seemingly'},
 'sense-02': {':polarity': {'-': 'senseless'}},
 'short-06': {'': 'shortage'},
 'sleep-01': {'': 'asleep'},
 'solve-01': {':polarity': {'-': 'unsolved'}},
 'specify-01': {':polarity': {'-': 'unspecified'}},
 'spy-01': {'': 'espionage'},
 'stagnate-01': {'': 'stagnant'},
 'starve-01': {'': 'starvation'},
 'steal-01': {'': 'theft'},
 'strong-02': {'': 'strength'},
 'subjugate-01': {'': 'subjugation'},
 'subvert-01': {'': 'subversion'},
 'succeed-01': {'': 'successful'},
 'sue-02': {'': 'lawsuit'},
 'suffice-01': {'': 'sufficient'},
 'suppress-01': {'': 'suppression'},
 'surpass-01': {':polarity': {'-': 'unsurpassed'}},
 'surprise-01': {'': 'surprisingly'},
 'surveil-01': {'': 'surveillance'},
 'sway-02': {':polarity': {'-': 'unswayed'}},
 'sweet-04': {'': 'sweetness'},
 'sweet-05': {'': 'sweetness'},
 'synthesize-01': {'': 'synthesis'},
 'take-off-19': {'': 'takeoff'},
 'take-over-12': {'': 'takeover'},
 'tax-01': {'': 'taxable'},
 'thing': {':*:ARG0': {'activate-01': 'activator',
                       'deter-01': 'deterrent',
                       'fertilize-01': 'fertilizer',
                       'incentivize-01': 'incentive',
                       'indicate-01': 'indicator',
                       'inhibit-01': 'inhibitor',
                       'receive-01': 'recipient',
                       'waive-01': 'waiver',
                       'wipe-01': 'wiper'},
           ':*:ARG1': {'expend-01': 'expense',
                       'hypothesize-01': 'hypothesis',
                       'intend-01': 'intent',
                       'nominate-01': 'nominee',
                       'opine-01': 'opinion',
                       'suggest-01': 'suggestion',
                       'symbolize-01': 'symbol',
                       'yield-03': 'yield'},
           ':*:ARG2': {'bless-01': 'blessing',
                       'justify-01': 'justification',
                       'summarize-01': 'summary'}},
 'think-01': {'': 'putative'},
 'thirst-01': {'': 'thirsty'},
 'trace-02': {'': 'traceable'},
 'transact-01': {'': 'transaction'},
 'transcribe-01': {'': 'transcription'},
 'transfect-01': {'': 'transfection'},
 'transfer-01': {'': 'transferrable'},
 'translocate-01': {'': 'translocation'},
 'treat-03': {':polarity': {'-': 'untreated'}},
 'treat-04': {':polarity': {'-': 'untreated'}},
 'ubiquitinate-01': {'': 'ubiquitination'},
 'understand-01': {'': 'understandable'},
 'upregulate-01': {'': 'upregulation'},
 'view-01': {'': 'viewing'},
 'visit-01': {'': 'visit'},
 'volunteer-01': {'': 'voluntary'},
 'warmonger-01': {'': 'warmongering'},
 'weaponize-01': {'': 'weaponization'},
 'will-02': {'': 'willing'},
 'win-01': {'': 'victory'},
 'wish-01': {'': 'wishful'}}
